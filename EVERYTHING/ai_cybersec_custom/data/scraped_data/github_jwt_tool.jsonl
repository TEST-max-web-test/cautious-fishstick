{"source": "github", "repo": "ticarpi/jwt_tool", "file": "README.md", "url": "https://github.com/ticarpi/jwt_tool/blob/master/README.md", "content": "# The JSON Web Token Toolkit v2\n>*jwt_tool.py* is a toolkit for validating, forging, scanning and tampering JWTs (JSON Web Tokens).  \n\n![jwt_tool version](https://img.shields.io/badge/version-v2.3.0-blue) ![python version](https://img.shields.io/badge/python-v3.6+-green)\n\n![logo](https://user-images.githubusercontent.com/19988419/100555535-18598280-3294-11eb-80ed-ca5a0c3455d6.png)\n\nIts functionality includes:\n* Checking the validity of a token\n* Testing for known exploits:\n  * (CVE-2015-2951) The ***alg=none*** signature-bypass vulnerability\n  * (CVE-2016-10555) The ***RS/HS256*** public key mismatch vulnerability\n  * (CVE-2018-0114) ***Key injection*** vulnerability\n  * (CVE-2019-20933/CVE-2020-28637) ***Blank password*** vulnerability\n  * (CVE-2020-28042) ***Null signature*** vulnerability\n  * (CVE-2022-21449) ***Psychic Signature*** ECDSA vulnerability\n* Scanning for misconfigurations or known weaknesses\n* Fuzzing claim values to provoke unexpected behaviours\n* Testing the validity of a secret/key file/Public Key/JWKS key\n* Identifying ***weak keys*** via a High-speed ***Dictionary Attack***\n* Forging new token header and payload contents and creating a new signature with the **key** or via another attack method\n* Timestamp tampering\n* RSA and ECDSA key generation, and reconstruction (from JWKS files)\n* Rate-limiting for all attacks\n* ...and lots more!\n\n---\n\n## Audience\nThis tool is written for **pentesters**, who need to check the strength of the tokens in use, and their susceptibility to known attacks. A range of tampering, signing and verifying options are available to help delve deeper into the potential weaknesses present in some JWT libraries.  \nIt has also been successful for **CTF challengers** - as CTFs seem keen on JWTs at present.  \nIt may also be useful for **developers** who are using JWTs in projects, but would like to test for stability and for known vulnerabilities when using forged tokens.\n\n---\n\n## Requirements\nThis tool is written natively in **Python 3** (version 3.6+) using the common libraries, however various cryptographic funtions (and general prettiness/readability) do require the installation of a few common Python libraries.  \n*(An older Python 2.x version of this tool is available on the legacy branch for those who need it, although this is no longer be supported or updated)*\n\n---\n\n## Installation\n\n### Docker\nThe preferred usage for jwt_tool is with the [official Dockerhub-hosted jwt_tool docker image](https://hub.docker.com/r/ticarpi/jwt_tool)  \nThe base command for running this is as follows:  \nBase command for running jwt_tool:  \n`docker run -it --network \"host\" --rm -v \"${PWD}:/tmp\" -v \"${HOME}/.jwt_tool:/root/.jwt_tool\" ticarpi/jwt_tool`  \n\nBy using the above command you can tag on any other arguments as normal.  \nNote that local files in your current working directory will be mapped into the docker container's /tmp directory, so you can use them using that absolute path in your arguments.  \ni.e.  \n*/tmp/localfile.txt*\n\n### Manual Install\nInstallation is just a case of downloading the `jwt_tool.py` file (or `git clone` the repo).  \n(`chmod` the file too if you want to add it to your *$PATH* and call it from anywhere.)\n\n`$ git clone https://github.com/ticarpi/jwt_tool`  \n`$ python3 -m pip install -r requirements.txt`  \n\nOn first run the tool will generate a config file, some utility files, logfile, and a set of Public and Private keys in various formats.  \n\n### Custom Configs\n* To make best use of the scanning options it is **strongly advised** to copy the custom-generated JWKS file somewhere that can be accessed remotely via a URL. This address should then be stored in `jwtconf.ini` as the \"jwkloc\" value.  \n* In order to capture external service interactions - such as DNS lookups and HTTP requests - put your unique address for Burp Collaborator (or other alternative tools such as RequestBin) into the config file as the \"httplistener\" value.  \n***Review the other options in the config file to customise your experience.***\n\n### Colour bug in Windows\nTo fix broken colours in Windows cmd/Powershell: uncomment the below two lines in `jwt_tool.py` (remove the \"# \" from the beginning of each line)  \nYou will also need to install colorama: `python3 -m pip install colorama`\n```\n# import colorama\n# colorama.init()\n```\n---\n\n## Usage\nThe first argument should be the JWT itself (*unless providing this in a header or cookie value*). Providing no additional arguments will show you the decoded token values for review.  \n`$ python3 jwt_tool.py <JWT>`  \nor the Docker base command:  \n`$ docker run -it --network \"host\" --rm -v \"${PWD}:/tmp\" -v \"${HOME}/.jwt_tool:/root/.jwt_tool\" ticarpi/jwt_tool`  \n\nThe toolkit will validate the token and list the header and payload values.  \n\n### Additional arguments\nThe many additional arguments will take you straight to the appropriate function and return you a token ready to use in your tests.  \nFor example, to tamper the existing token run the following:  \n`$ python3 jwt_tool.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.aqNCvShlNT9jBFTPBpHDbt2gBB1MyHiisSDdp8SQvgw -T`  \n\nMany options need additional values to set options.  \nFor example, to run a particular type of exploit you need to choose the eXploit (-X) option and select the vulnerability (here using \"a\" for the *alg:none* exploit):  \n`$ python3 jwt_tool.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.aqNCvShlNT9jBFTPBpHDbt2gBB1MyHiisSDdp8SQvgw -X a`\n\n### Extra parameters\nSome options such as Verifying tokens require additional parameters/files to be provided (here providing the Public Key in PEM format):  \n`$ python3 jwt_tool.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.aqNCvShlNT9jBFTPBpHDbt2gBB1MyHiisSDdp8SQvgw -V -pk public.pem`  \n\n### Sending tokens to a web application\nAll modes now allow for sending the token directly to an application.  \nYou need to specify:  \n* target URL (-t)\n* instead of a target URL, you can put your HTTP request into a file and reference the file with -r. This AUTOMATICALLY populates headers, cookies and POST data so this is the recommended option\n* a request header (-rh) or request cookies (-rc) that are needed by the application (***at least one must contain the token***)\n* (optional) any POST data (where the request is a POST)\n* (optional) any additional jwt_tool options, such as modes or tampering/injection options  \n* (optional) a *canary value* (-cv) - a text value you expect to see in a successful use of the token (e.g. \"Welcome, ticarpi\")  \nAn example request might look like this (using scanning mode for forced-errors):  \n`$ python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \"jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\" -rh \"Origin: null\" -cv \"Welcome\" -M er` \n\nVarious responses from the request are displayed:  \n* Response code\n* Response size\n* Unique request tracking ID (for use with logging)\n* Mode/options used\n\n---\n\n## Common Workflow\n\nHere is a quick run-through of a basic assessment of a JWT implementation. If no success with these options then dig deeper into other modes and options to hunt for new vulnerabilities (or zero-days!).  \n\n### Recon:  \nRead the token value to get a feel for the claims/values expected in the application:  \n`$ python3 jwt_tool.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.aqNCvShlNT9jBFTPBpHDbt2gBB1MyHiisSDdp8SQvgw`  \n\n### Scanning:\nRun a ***Playbook Scan*** using the provided token directly against the application to hunt for common misconfigurations:  \n`$ python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \"jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\" -M pb`  \n\n### Exploitation:\nIf any successful vulnerabilities are found change any relevant claims to try to exploit it (here using the *Inject JWKS* exploit and injecting a new username):  \n`$ python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \"jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\" -X i -I -pc name -pv admin` \n\n### Fuzzing:\nDig deeper by testing for unexpected values and claims to identify unexpected app behaviours, or run attacks on programming logic or token processing:  \n`$ python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \"jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\" -I -hc kid -hv custom_sqli_vectors.txt`  \n\n### Review:\nReview any successful exploitation by querying the logs to read more data about the request and :  \n`$ python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \"jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\" -X i -I -pc name -pv admin`   \n\n---\n\n### Help\nFor a list of options call the usage function:\nSome options such as Verifying tokens require additional parameters/files to be provided:  \n`$ python3 jwt_tool.py -h`\n\n**A more detailed user guide can be found on the [wiki page](https://github.com/ticarpi/jwt_tool/wiki/Using-jwt_tool).**\n\n---\n\n## JWT Attack Playbook - new wiki content!  \n![playbook_logo](https://user-images.githubusercontent.com/57728093/68797806-21f25700-064d-11ea-9baa-c58fb6f75c0b.png)\n\nHead over to the [JWT Attack Playbook](https://github.com/ticarpi/jwt_tool/wiki) for a detailed run-though of what JWTs are, what they do, and a full workflow of how to thoroughly test them for vulnerabilities, common weaknesses and unintended coding errors.\n\n---\n\n## Tips\n**Regex for finding JWTs in Burp Search**  \n*(make sure 'Case sensitive' and 'Regex' options are ticked)*  \n`[= ]eyJ[A-Za-z0-9_-]*\\.[A-Za-z0-9._-]*` - url-safe JWT version  \n`[= ]eyJ[A-Za-z0-9_\\/+-]*\\.[A-Za-z0-9._\\/+-]*` - all JWT versions (higher possibility of false positives)\n\n---\n\n## Further Reading\n* [JWT Attack Playbook (https://github.com/ticarpi/jwt_tool/wiki)](https://github.com/ticarpi/jwt_tool/wiki) - for a thorough JWT testing methodology\n\n* [A great intro to JWTs - https://jwt.io/introduction/](https://jwt.io/introduction/)\n\n* A lot of the initial inspiration for this tool comes from the vulnerabilities discovered by Tim McLean.  \n[Check out his blog on JWT weaknesses here: https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/](https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/)  \n\n* A whole bunch of exercises for testing JWT vulnerabilities are provided by [Pentesterlab (https://www.pentesterlab.com)](https://www.pentesterlab.com). I'd highly recommend a PRO subscription if you are interested in Web App Pentesting.  \n\n  *PLEASE NOTE:* This toolkit will solve most of the Pentesterlab JWT exercises in a few seconds when used correctly, however I'd **strongly** encourage you to work through these exercises yourself, working out the structure and the weaknesses. After all, it's all about learning...\n", "timestamp": "2025-10-24T11:40:05.076765"}
{"source": "github", "repo": "ticarpi/jwt_tool", "file": "common-payloads.txt", "url": "https://github.com/ticarpi/jwt_tool/blob/master/common-payloads.txt", "content": "iss\r\nsub\r\naud\r\nexp\r\nnbf\r\niat\r\njti\r\nname\r\ngiven_name\r\nfamily_name\r\nmiddle_name\r\nnickname\r\npreferred_username\r\nprofile\r\npicture\r\nwebsite\r\nemail\r\nemail_verified\r\ngender\r\nbirthdate\r\nzoneinfo\r\nlocale\r\nphone_number\r\nphone_number_verified\r\naddress\r\nupdated_at\r\nazp\r\nnonce\r\nauth_time\r\nat_hash\r\nc_hash\r\nacr\r\namr\r\nsub_jwk\r\ncnf\r\nsip_from_tag\r\nsip_date\r\nsip_callid\r\nsip_cseq_num\r\nsip_via_branch\r\norig\r\ndest\r\nmky\r\nevents\r\ntoe\r\ntxn\r\nrph\r\nsid\r\nvot\r\nvtm\r\nattest\r\norigid\r\nact\r\nscope\r\nclient_id\r\nmay_act\r\njcard\r\nat_use_nbr\r\ndiv\r\nopt", "timestamp": "2025-10-24T11:40:05.719040"}
{"source": "github", "repo": "ticarpi/jwt_tool", "file": "jwt-common.txt", "url": "https://github.com/ticarpi/jwt_tool/blob/master/jwt-common.txt", "content": "\n...\n[107 105 97 108 105]\n]V@IaC1%fU,DrVI\n`mix guardian.gen.secret`\n012345678901234567890123456789XY\n12345\n12345678901234567890123456789012\n3st4-3s-M1-Cl4v3-S3cr3t4\n61306132616264382d363136322d343163332d383364362d316366353539623436616663\n872e4e50ce9990d8b041330c47c9ddd11bec6b503ae9386a99da8584e9bb12c4\n8zUpiGcaPkNhNGi8oyrq\na43cc200a1bd292682598da42daa9fd14589f3d8bf832ffa206be775259ee1ea\nAC8d83&21Almnis710sds\nbanana\nbar\nc2a4eb068af8abef18d80b1689c7d785\nCh4ng3-m3-1M-n0t-s3cr3t\nCL4V3_SUP3R_S3CR3T4_C4TR4L_G4RD3N\nclient_secret_basic\ncustom\ndefault-key\nexample_key\nexample-hmac-key\nfe1a1915a379f3be5394b64d14794932\nfoobar_template\nGQDstcKsx0NHjPOuXOYg5MbeJ1XT0uFiwDVvVBrk\nguest\ngZH75aKtMN3Yj0iPS4hcgUuTwjAzZr9C\nhard!to-guess_secret\nhas a van\nHello, World!\nher key\nhis key\nhmac-secret\nhs256-secret\nJ5hZTw1vtee0PGaoAuaW\njwt\njwt-secret\nkey\nkey1\nkey2\nkey3\nkiali\nkkey\nmix guardian.gen.secret\nmy key\nMy super secret key!\nmy super secret password\nmy_temp_secret_key\nmy_very_long_and_safe_secret_key\nmy$ecretK3y\nmypass\nmysecretkey\nmysupersecretkey\nnewSecret\nOriginal secret string\npassword\nR9MyWaEoyiMYViVWo8Fk4TUGWiSoaW6U1nOqXri8_XU\nRfxRP43BIKoSQ7P1GfeO\nS0M3S3CR3TK3Y\ns3cr3t\nS3CR3T K3Y\nS3cr3t_K#Key\nS3cr3t123\nS3cr3Tk3Y\nseason-wiz-react-template\nsecret\nSecret key. You can use `mix guardian.gen.secret` to get one\nsecret_key\nsecret_key_here\nsecret-key\nsecret123\nsecretkey\nSetec Astronomy\nshared_secret\nshared-secret\nshhhhh\nshhhhhhared-secret\nSignerTest\nsome-secret-string\nSup3rS3cr3tk3y\nSuper Secret Key\nsuper_fancy_secret\nsuper-secret-password\nsupersecret\nsupersecretkeytemp\nsymmetric key\nT0pS3cr3tKeY!\ntemp\ntemp string\ntemp string. tolerate this for now pls.\ntemp_access_token\ntemp_key\ntempkey\ntemplate\ntemplate,line,count\ntemplateOptions\ntemplates\ntemplateWrappersMap\ntemple\ntemporary\ntemporary secret key\ntemporary_key\ntemporary_passkey\ntemporary_secret\ntemporary_secret_key\ntemporary2\ntempseckey\ntempwhilewaitingtofixwslubuntu\ntest-key\ntesting1\nTh1s1ss3cr3tdefault_page_template_id\nTHE_SAME_HMAC_KEY\nthis is a temp key\nThisIsMySuperSecret\ntoken\ntoo many secrets\ntop secret\nverysecret\nwrong-secret\nxxx\nXYZ\nYoUR sUpEr S3krEt 1337 HMAC kEy HeRE\nYOUR_HMAC_KEY\nyour-256-bit-secret\nyour-384-bit-secret\nyour-512-bit-secret\nyour-own-jwt-secret\nyour-top-secret-key\n", "timestamp": "2025-10-24T11:40:06.295268"}
