{"source": "github", "repo": "BC-SECURITY/Empire", "file": ".github/CONTRIBUTING.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/.github/CONTRIBUTING.md", "content": "# How To Contribute\n\nContributions are more than welcome! The more people who contribute to the project the better Empire will be for everyone. Below are a few guidelines for submitting contributions.\n\n\n## Creating Github Issues\n\nPlease first review the existing Empire issues to see if the error was resolved with a fix in the development branch or if we chose not to fix the error for some reason.\n\nThe more information you provide in a Github issue the easier it will be for us to track down and fix the problem:\n\n* Please provide the version of Empire you are using.\n* Please provide the OS and Python versions that you are using.\n* Please describe the expected behavior and the encountered error.\n  * The more detail the better!\n  * Include any actions taken just prior to the error.\n  * Please post a screenshot of the error, a link to a Pastebin dump of the error, or embedded text of the error.\n* Any additional information.\n\n## Documentation\n\nDocumentation is the `docs/` directory and syncs with [GitBook](https://bc-security.gitbook.io/empire-wiki/).\nThe documentation is written in [Markdown](https://www.markdownguide.org/basic-syntax/).\nPlease submit your documentation with your code changes if applicable.\nThe `main` branch in `BC-SECURITY/Empire` automatically syncs.\n\n\n## Submitting Code\n\n### Where should I branch my code?\n\n* Submit pull requests to the [main branch](https://github.com/BC-SECURITY/Empire/tree/main). After testing, changes will be merged to `main`.\n  * Sponsors Repo: Submit pull requests to `private-main` for most cases. `sponsors-main` for sponsor specific changes, `kali-main` for kali specific changes.\n\n\n### Modules\n\n* Depending on what you're working on, base your module on [powershell_template.py](https://github.com/BC-SECURITY/Empire/blob/master/empire/server/modules/powershell_template.py) or [python_template.py](https://github.com/BC-SECURITY/Empire/blob/master/empire/server/modules/python_template.py). **Note** that for some modules you may need to massage the output to get it into a nicely displayable text format with [Out-String](https://github.com/PowerShellEmpire/Empire/blob/0cbdb165a29e4a65ad8dddf03f6f0e36c33a7350/lib/modules/situational_awareness/network/powerview/get_user.py#L111).\n* Cite previous work in the **'Comments'** module section.\n* If your script.ps1 logic is large, may be reused by multiple modules, or is updated often, consider implementing the logic in the appropriate **data/module_source/*** directory and [pulling the script contents into the module on tasking](https://github.com/PowerShellEmpire/Empire/blob/0cbdb165a29e4a65ad8dddf03f6f0e36c33a7350/lib/modules/situational_awareness/network/powerview/get_user.py#L85-L95).\n* Use [approved PowerShell verbs](https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7.1) for any functions.\n* TEST YOUR MODULE! Be sure to run it from an Empire agent and test Python 3.x functionality before submitting a pull to ensure everything is working correctly.\n* For additional guidelines for your PowerShell code itself, check out the [PowerSploit style guide](https://github.com/PowerShellMafia/PowerSploit/blob/master/README.md).\n* For more in-depth docs on developing modules, see the [Module Development docs](https://bc-security.gitbook.io/empire-wiki/module-development)\n\n### Code Formatting and Linting\n\n* We are using [astral-sh/ruff](https://github.com/astral-sh/ruff) for linting and formatting.\n* After implementing your changes:\n    1. run `ruff check . --fix` (or `poetry run ruff check . --fix`).\n    2. run `ruff format .` (or `poetry run ruff format .`).\n* The repo is also configured to use [pre-commit](https://pre-commit.com/) to automatically format code.\n  * Once you have pre-commit installed, you can run `pre-commit install` to install the pre-commit hooks.\n  * Then pre-commit will execute ruff automatically before committing.\n\n### Tests\n\nPlease write tests for your code! We use [pytest](https://docs.pytest.org/en/latest/) for testing. Tests are located in the `tests/` directory. To run the tests, run `pytest` from the root directory of the project.\n\nFor tests that take >20-30 seconds, please add the `@pytest.mark.slow` decorator to the test function. This will allow us to skip the slow tests when running the tests, unless we explicitly want to run them with `pytest --runslow`.\n\n## Upgrading dependencies\nDependencies can be upgraded using [poetry-plugin-up](https://github.com/MousaZeidBaker/poetry-plugin-up).\n", "timestamp": "2025-10-24T22:24:23.279999"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": ".github/ci-and-release.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/.github/ci-and-release.md", "content": "# CI Processes\n\n## Pull Requests - Build and Test\nAll pull requests will run the `Lint and Test` workflow.\n\n* The workflow will run `black` and `isort` checks and then run `pytest` on Python 3.8, 3.9, and 3.10.\n* If the pull request is coming from a `release/*` branch, it will build the docker image and run `pytest` on it\n* If the pull request changes the `install.sh` script, it will run the install script on the supported OS and check for errors\n\nWhen submitting a pull request to `private-main`, the label `auto-merge-downstream` can be added. If the label is present, then merging a branch to `private-main` will automatically trigger the prerelease step of merging `private-main` into `sponsors-main` and `kali-main`.\n\n## BC-SECURITY/Empire-Sponsors Sponsors & Kali Release Process\n*Note: Starting in 2023, the Kali team will be pulling from the public repo.\nI am keeping the Kali workflows running for now with the exception of the tagging.\nThis is mostly out of laziness since I just wrote all of the CI/CD. In the near future,\nwe can rework these jobs to be more like \"sponsors & other downstream\" releases.*\n\nSponsors and Kali releases go through the same release process. It is easier to manage Empire releases by not allowing them to be released at different times and have the version numbers diverge.\nA side effect of this is its possible for a version bump to be empty (no changes) and still be released.\n\n### 1. cherry-pick any changes from BC-SECURITY/Empire#main to BC-SECURITY/Empire-Sponsors#private-main\n\nPull requests that should be merged from `main` to `private-main` can be auto-cherry-picked using the `Prerelease - Cherry Pick Main` workflow.\nAdd the label `auto-cherry-pick` to the pull request and upon merge, it will open a pull request into `BC-SECURITY/Empire-Sponsors#private-main`, assuming no conflicts.\nIf there are conflicts, you must cherry-pick the commits manually. See the steps below.\n\nIf you forgot to add the label, the workflow can be manually run, just enter the commit hash as an input to the workflow.\n\nIf you don't feel comfortable pushing to `private-main`, you can branch from `private-main` before cherry-picking and open a pull request to merge into `private-main`.\n\n```bash\ncd /tmp\ngit clone --recursive git@github.com:bc-security/empire-sponsors.git\ncd empire-sponsors\ngit remote add upstream git@github.com:bc-security/empire.git\ngit fetch upstream\ngit checkout private-main\n\n# cherry-pick all commits needed from main to private-main\ngit cherry-pick <commit-hash>\n\n# If there's any conflicts, resolve them then:\ngit add -A\ngit cherry-pick --continue\n\n# push\ngit push origin private-main\n```\n\n**Potential Enhancement:** Could add a GitHub workflow that you supply a commit hash and it will cherry-pick it into `private-main` and open a pull request.\n\n### 2. Merge Empire-Sponsors/private-main -> (Empire-Sponsors/sponsors-main, Empire-Sponsors/kali-main)\nRun the `Prerelease - Merge private-main` manual workflow. The branch that it runs on doesn't matter.\nThe workflow will merge `private-main` into `sponsors-main` and `kali-main`.\n\nNo pull requests will be opened, if there are issues that broke the code, they will manifest in CI when the release PR is open.\n\nIf this step fails, it is probably due to a merge conflict. In this case,\nthe merge conflicts need to be resolved, and its best to run this locally.\n\n<details>\n<summary>If `private-main` -> `kali-main` fails</summary>\n<p>\n\n```bash\ncd /tmp\ngit clone --recursive git@github.com:bc-security/empire-sponsors.git\ncd empire-sponsors\ngit checkout kali-main\ngit merge origin/private-main\n\n# Fix the conflicts, then:\ngit add -A\ngit merge --continue\ngit push origin kali-main\n```\n</p>\n</details>\n\n<details>\n<summary>If `private-main` -> `sponsors-main` fails</summary>\n<p>\n\n```bash\ncd /tmp\ngit clone --recursive git@github.com:bc-security/empire-sponsors.git\ncd empire-sponsors\ngit checkout sponsors-main\ngit merge origin/private-main\n\n# Fix the conflicts, then:\ngit add -A\ngit merge --continue\ngit push origin sponsors-main\n```\n</p>\n</details>\n\n**Potential Enhancement:** I'm still considering if this step should open PRs instead of doing direct merges.\n\n### 3. Start Private Release\nStart a release by running the `Private - Create Release` manual workflow.\nThe branch that it runs on doesn't matter.\nThe workflow will then create a release branch, push it to the repo, and create a pull request into `private-main`.\n\n* Updates `pyproject.toml` version\n* Updates `empire.py` version\n* Updates `CHANGELOG.md`\n\n### 4. Manual Step - Merge private-main release PR\nOnce the first workflow runs, it will open one pull request from the `release/v{version}-private` branch to `private-main`.\n\nCheck the changelog on this branch, this will be the changelog that is used for the release notes.\n\nYou can get a list of the new commits that are in this release by using the following command. Replace `v4.9.0-private` with whatever the previous release was.\n```\ngit --no-pager log --no-merges --pretty='format:%cs %s' private-main...v4.9.0-private\n```\n\nMerge the pull request. **DO NOT SQUASH**\n\n**Note**: If at this point there are additional changes for the release, merge them into the release branch, not\nthe `private-main` branch.\n\n**Potential Enhancement:** Use a git diff to generate a list of changes as suggestions for the release notes.\n\n### 5. Private - Tag and Release\nOnce the `release/` pull request is merged, the `Private - Tag Release` workflow will automatically run.\nThe workflow will create a tag and release on the `HEAD` of `private-main` using the release notes from `CHANGELOG.md` for the body of the release.\n\n### 6. Repeat Step 2 - Prerelease Merge\nRepeat step 2 to merge `private-main` into `sponsors-main` and `kali-main`.\n\n### 7. Start Sponsor/Kali Release\nStart the release by running the `Sponsors & Kali - Create Release` manual workflow.\nIf starkiller needs to be updated, provide a `starkillerVersion` input. The value provided should be a git tag minus the `-kali` or `-sponsors` suffix.\n\nIf a Starkiller tag was provided, it will update the Starkiller config and the changelog accordingly.\n\nA release PR will then be opened for each branch and the test suite will run.\n\n\n#### 8. Manual Step - Merge sponsor/kali release PRs\nOnce the workflow runs, it will open two pull requests from the `release/v{version}-sponsors` and `release/v{version}-kali` branches to `sponsors-main` and `kali-main` respectively.\n\nCheck the changelog on these branches, this will be the changelog that is used for the release notes.\n\nIf there are sponsor specific changelog entries that need to be added, add them to the `CHANGELOG-SPONSORS.md` file on the release branch.\n\nYou can get a list of the new commits that are in this release by using the following command. Replace `v4.9.0-sponsors` with whatever the previous release was.\n```\ngit --no-pager log --no-merges --pretty='format:%cs %s' sponsors-main...v4.9.0-sponsors\n```\n\nMerge the pull requests. **DO NOT SQUASH**\n\n**Note**: If at this point there are additional changes for the release, merge them into the release branch, not\nthe `sponsors-main` branch or `kali-main` branch.\n\n**Potential Enhancement** We could add automation that copies the `unreleased` section from the target branch to the version section in the `head` branch.\n\n### 9. Tag and Release\nOnce the pull requests are merged, the `Sponsors - Tag Release` and `Kali - Tag Release` workflows will automatically run.\nThe workflows will create a tag and release on the `HEAD` of `sponsors-main` and `kali-main`, using the release notes from `CHANGELOG.md` for the body of the release.\n\n### Setup\nRequires a secret in the repo `RELEASE_TOKEN` that has `repo` and `workflow` access.\n\n## BC-SECURITY/Empire Public Release Process\n### 1. Start Release\nStart a release by running the `Public - Create Release Branch` manual workflow. It doesn't matter which branch it runs on.\nFor the workflow input, provide the tag name that you want to release. If starkiller needs to be updated, provide a `starkillerVersion` input. The value provided should be a git tag.\n\nThe workflow will then checkout the chosen tag from the `sponsors` repo, create a release branch, push it to the public repo, and create a pull request into `main`.\n\nThe chosen tag should end in `-private`\n\n### 2. Manual Steps - Merge release PR\nOnce the first workflow runs, it will open one pull request from the `release/v{version}` branch to `main`.\n\nCheck the changelog on this branch, this will be the changelog that is used for the release notes.\n\nMerge the pull request. **DO NOT SQUASH**\n\n**Note**: If at this point there are additional changes for the release, merge them into the release branch, not\nthe `main` branch. This will ensure the change ends up in the release properly.\n\n### 3. Tag Release\nOnce the pull request is merged, the `Public - Tag Release` workflow will automatically run.\nThe workflow will create a tag and release on the `HEAD` of `main`, using the release notes from `CHANGELOG.md` for the body of the release.\n\nThe workflow will detect the last released tag, and use the release notes from the `CHANGELOG.md` between the last release and the current release.\n\n### Docker Builds\nThe `Docker Image CI` workflow will build the docker image for the release. Pushes to `main` will update the `latest` tag.\nTagged releases will push to the corresponding tag in DockerHub.\n\n### Setup\nRequires secrets in the repo `DOCKER_USERNAME` and `DOCKER_PASSWORD` as well as `RELEASE_TOKEN` that has `repo` and `workflow` access.\n\n## More Information\nhttps://www.bc-security.org/using-github-actions-to-manage-ci-cd-for-empire/\n\n## Contributing\nTo update the workflows if you don't have access to the `Empire-Sponsors` repo:\nMerge to `main` in `Empire`, then we can cherry-pick the changes into `private-main`.\n\nTo update the workflows if you have access to the `Empire-Sponsors` repo:\nMerge to `private-main` in `Empire-Sponsors`. It will automatically merge to `sponsors-main` and `kali-main` when the prerelease workflow runs. It will merge to `Empire#main` when the public release workflow runs.\n", "timestamp": "2025-10-24T22:24:24.106455"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": ".github/pull_request_template.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/.github/pull_request_template.md", "content": "## Describe your changes\n\n## Issue ticket number and link (if there is one)\n\n## Checklist before requesting a review\n- [ ] I have performed a self-review of my code\n- [ ] If it is a core feature, I have added thorough tests.\n- [ ] I have added an entry to `CHANGELOG.md`\n- [ ] I have updated the documentation in `docs/` (if applicable)\n", "timestamp": "2025-10-24T22:24:24.364336"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "CHANGELOG.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/CHANGELOG.md", "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n-   **Added** for new features.\n-   **Changed** for changes in existing functionality.\n-   **Deprecated** for soon-to-be removed features.\n-   **Removed** for now removed features.\n-   **Fixed** for any bug fixes.\n-   **Security** in case of vulnerabilities.\n\n## [Unreleased]\n\n## [6.2.1] - 2025-09-05\n\n-   Fix bug where websocket connection would fail because the jwt_auth method arguments changed\n\n## [6.2.0] - 2025-09-02\n\n-   Updated Starkiller to v3.1.0\n-   Added clean and reset options to the server\n-   Added other agent language support to fodhelper\n-   Added go support to spawn and spawnas\n-   Fixed launcher_bat when go agent is used\n-   Fixed issue where gopire doesn't detect high integrity agents\n-   Fixed C# execution in iron python agent to use ordered arguements\n-   Removed redundant C# function from iron python agent\n-   Cleaned up Rubeus and RunCoff yamls\n-   Fixed port normalization to allow host port and bind port to be different\n-   Allow 'X-Empire-Token' as an alternative header to 'Authorization'\n-   Remove abandoned passlib library and use bcrypt directly\n\n## [6.1.3] - 2025-07-11\n\n-   Updated Starkiller to v3.0.1\n-   Fixed PowerShell agent having base64 encoded Cookie name for HTTP listener\n\n## [6.1.2] - 2025-05-21\n\n### Added\n\n-   Added support for Ubuntu 24.04 in the install script\n\n### Fixed\n\n-   Fixed issue launching powershell on some distros by installing libicu\n\n## [6.1.1] - 2025-05-21\n\n### Fixed\n\n-   Fix issue caused by ordering of API routers\n\n## [6.1.0] - 2025-05-20\n\n### Changed\n\n-   Use pyyaml's C extension for loading/dumping module yamls to make startup and tests faster\n-   Simplified Dockerfile by using TARGETARCH variable\n-   Cleanup API code\n-   Use a new version of donut that supports arm64\n-   Update all deps\n\n### Removed\n\n-   Remove unused files\n\n## [6.0.3] - 2025-04-24\n\n-   Fixed SMB listener not sending start task\n-   Fixed ironpython shell commands running as cmd instead of powershell\n-   Added literal interpretation for shell commands to ironpython agent\n-   Fixed multi_launcher not being able to build smb agent\n-   Removed linux as go agent option as its not implemented yet\n\n## [6.0.2] - 2025-04-07\n\n-   Fixed issue where C# modules on powershell agent would be improperly formatted\n-   Fixed SharpWMI argument errors when using escaped quotes\n-   Updated result parser on SharpWMI to not use StreamWriter due to messing up results\n\n## [6.0.1] - 2025-04-03\n\n### Fixed\n\n-   Fixed issue generating Sharpire exes\n\n## [6.0.0] - 2025-03-25\n-   Updated Starkiller to v3.0.0\n\n### Highlights\n\n-   Plugin Marketplace\n-   Go agents\n-   Empire Compiler for C#\n-   Command line client removed\n\n### Added\n\n-   Added support for plugin registries and installing plugins via the API\n    -   See the Plugin Marketplace in Starkiller 3.0!\n-   New allow/deny list implementation that properly supports IPv4, IPv6, Ranges, and CIDRs\n-   Added API endpoints for managing autorun commands on agent checkin\n-   Added `api.ip` and `api.secure` as server config options\n-   Added Go agents\n    -   Added Go to install script\n    -   Added new stager type `multi_go_exe`\n    -   Added Go is an option for `multi_launcher`\n    -   Added new compiler class `GoCompiler`\n-   Added `-f` flag for install script to force install as root\n-   Added dynamic options to modules\n-   Added module `code_execution/invoke-script` for remote ps1 script execution\n-   Added module `python/code_execution/invoke-script` for remote py script execution\n-   Added sharphound ingestor for CE and tagged bloodhound with legacy\n-   Added check that module can be ran on the agent based on language\n\n### Changed\n\n-   Changed minimum Python version to 3.13\n-   Updated module_service logic for tasking types\n-   Swapped C# module RunOF for COFFLoader\n-   Updated parsing for bof formatting to use bof_pack\n-   Moved bash and pyinstaller stagers to linux folder\n-   Change formatter to ruff to consolidate developer tooling\n-   Revised the staging process for agents. Session IDs are provided by the server and all packets are wrapped in routing packets.\n    -   Updated stageless agents to work with python, ironpython, and powershell with the new staging process.\n-   Updated tactics and techniques on all modules\n-   Added a yaml formatter and run pre-commit across all files\n-   Combined config with config_manager\n-   Converted many parts of codebase to be compliant with flake8-use-pathlib\n-   Csharp and bof tasks attach the executable as a 'download' with a tag 'task:input'\n-   Pass output path to dotnet compiler, only compile the requested version\n-   Limited staging key space to letters and numbers to avoid invalid combinations\n\n#### Breaking\n\n-   Many improvements to plugins - see the `plugin-development` wiki page\n-   Moved `Agents` class to `AgentCommunicationService`\n    -   Refactored many of the functions and parameter names\n-   Moved `Stagers` class to `StagerGenerationService`\n    -   Refactored many of the funtions and parameter names\n-   Moved Plugin Task handling from `PluginService` to `PluginTaskService`\n-   Moved socks management to `AgentSocksService`\n    -   Renamed socks properties on `AgentSocksService` to use plural naming\n-   Removed `update_lastseen` parameter from `handle_agent_request`\n-   Renamed all config properties in client and server configs to use snake_case\n-   Starkiller is now accessed at `{api_url}/` instead of `{api_url}/index.html`\n-   `ip_whitelist` and `ip_blacklist` are now `ip_allow_list` and `ip_deny_list` and are lists instead of comma separated strings\n-   Using a new and improved [Empire-Compiler] for C# compilation\n    -   Downloads pre-compiled Empire-Compiler to eliminate `dotnet` as an OS dependency\n    -   Updated shortened task results to show the C# command ran and full input to show directory of the file\n    -   Updated C# tasks into folders and split yaml configs to be one per module and match Empire yaml format\n    -   All C# module code has been moved as submodules of Empire-Compiler\n    -   Moved EmpireCompiler compression from application to the server\n    -   Moved EmpireCompiler from install script to startup with autoupdate functionality\n    -   Replaced csharpserver plugin with `DotnetCompiler` class in `empire.server.common`\n-   module_service.execute_module returns a pydantic model\n-   agent_task_service functions take a user model instead of user id\n-   All writeable data moved out of the install path into `~/.local/share/empire`\n\n### Deprecated\n\n### Removed\n\n-   Removed autorun config options which haven't been used since Empire 3\n-   Removed install support for Debian 10\n-   Removed `nim` stager from Empire and install script\n-   Removed slack notifications from listeners\n-   Removed the following stagers\n    -   osx/pkg\n    -   windows/backdoorlnkmacro\n    -   windows/launcher_lnk\n    -   windows/launcher_sct\n    -   windows/ms16-051\n    -   windows/reverseshell\n-   Removed the following listeners\n    -   HTTP COM only supports powershell agent and uses an older COM object that isn't used often\n    -   OneDrive has new APIs and Microsoft hs made registration harder. May return in the future with revisions.\n    -   Dropbox has new APIs and may return in the future with revisions.\n-   Removed empire_config.directories.module_source and empire_config.directories.obfuscated_module_source\n-   Removed BLANK and RANDOM options for staging_keys (wasn't documented anyway)\n\n#### Breaking\n\n-   Removed the command line client. Use Starkiller instead.\n-   Removed `Listeners` class\n-   Removed `Credentials` class\n-   Removed functions from `Agents` class that were marked as deprecated in 5.x\n-   Removed `--restip` and `--restport` options from the command line. Use the config file instead.\n-   Removed `socketport` config option on the client which was no longer being used\n-   Removed script and module upload to memory in favor of modules with same functionality\n-   Removed reverseshellserver plugin\n\n### Fixed\n\n-   Fixed Powershell agent overwritting results for C# taskings\n-   Simplify option_util.validate_options, fixes a bug where an optional file option was treated as required\n-   Fixed issue loading a plugin that has multiple files\n-   Fixed issue with permissions caused by git operations being done with de-elevated permissions\n-   Fixed go agent using a preshared session id\n\n### Security\n\n## [5.12.2] - 2025-01-12\n\n### Fixed\n\n-   Fixed issue with C# exe and shellcode not compiling PowerShell stagers\n-   Fix delay/jitter adjustment in python agent (@janit0rjoe)\n\n## [5.12.1] - 2025-01-08\n\n### Fixed\n\n-   Fixed issue with install script caused by Poetry 2.0\n\n## [5.12.0] - 2024-12-14\n\n-   Reduce the check-in tests that were adding an unncessary amount of time to the CI\n-   Allow Python 3.13 to be used\n-   Fix python install\n-   Support Empire for system-wide deployment (@D3vil0p3r)\n-   Paths specified in config.yaml where user does not have write permission will be fallback to ~/.empire directory and config.yaml updated as well (@D3vil0p3r)\n-   Invoke-Obfuscation is no longer copied to /usr/local/share\n\n## [5.11.7] - 2024-11-11\n\n-   Fix arm installs by installing dotnet and powershell manually\n-   Fix issue initializing some databases by removing the unused Reporting table\n\n## [5.11.6] - 2024-11-08\n\n-   Fixed extra character in nanodump.x64.o\n-   Fixed bof tasking for IronPython agent\n\n## [5.11.5] - 2024-09-22\n\n-   Updated Starkiller to v2.8.2\n-   Fixed various Python 3.12 SyntaxWarning\n\n## [5.11.4] - 2024-09-04\n\n### Added\n\n-   Added nameserver check for linux hosts (@0x636f646f)\n\n## [5.11.3] - 2024-09-04\n\n### Changed\n\n-   Updated Rubeus to v2.3.2 (@Cx01N)\n\n### Fixed\n\n-   Fixed Rubeus error where only first arg was being used (@Cx01N)\n-   Fixed background jobs checking in continuously (@Cx01N)\n-   Fixed Rubeus killing agent when certain options were given that use System.Environment.Exit (@Cx01N)\n-   Fixed option parsing error in credential/tokens module (@Cx01N)\n-   Removed requirement for credid for mimikatz/pth (@Cx01N)\n\n## [5.11.2] - 2024-08-08\n\n### Added\n\n-   Added Route4Me to sponsor page on Empire (@Cx01N)\n\n### Fixed\n\n-   Fixed global obfuscation bug in listener staging (@Cx01N)\n\n## [5.11.1] - 2024-07-23\n\n### Changed\n\n-   Updated Ruff to 0.5.3 and added additional Ruff rules (@Vinnybod)\n\n### Fixed\n\n-   Removed duplicate code for ironpython agent for loading path resetting (@Cx01N)\n-   Fixed issue of Sharpire taskings not getting assigned correct id (@Cx01N)\n\n## [5.11.0] - 2024-07-14\n\n### Added\n\n-   Added threaded jobs for powershell tasks using Appdomains (@Cx01N)\n-   Added job tracking for all tasks in Sharpire (@Cx01N)\n-   Updated agents to track all tasks and removed only tracking jobs (@Cx01N)\n-   Added Invoke-BSOD modules (@Cx01N)\n-   Added ticketdumper ironpython module (@Hubbl3)\n-   Added ThreadlessInject module (@Cx01N)\n\n### Fixed\n\n-   Fixed issue in python agents where background jobs were failed due to a missing character (@Cx01N)\n-   Fixed task bundling for the c# server plugin (@Cx01N)\n-   Fixed missing New-GPOImmediateTask in powerview (@Cx01N)\n-   Fixed NET45 missing folder causing a compilation error (@Cx01N)\n-   Fixed NET45 files not being removed on server reset (@Cx01N)\n\n### Changed\n\n-   Converted C# server plugin to use plugin taskings (@Cx01N)\n-   Upgraded Ruff to 0.5.0 and Black to 24.4.2 (@Vinnybod)\n-   Added pylint-convention (PLC), pylint-error (PLE), pylint-warning (PLW), and pylint-refactor (PLR) to ruff config (@Vinnybod)\n\n## [5.10.3] - 2024-05-23\n\n### Changed\n\n-   Updated the default value for Sharpup to audit (@Cx01N)\n-   Updated the default value for Seatbelt to AntiVirus (@Cx01N)\n-   Updated the default value for SharpWMI to action=query (@Cx01N)\n-   Updated the default value for SharpSC to action=query service= (@Cx01N)\n-   Updated GetSystem to require admin (@Cx01N)\n-   Updated the default value for Moriarty to --debug (@Cx01N)\n\n### Fixed\n\n-   Fixed issue with generate_agent having a mismatched function name for stageless (@Cx01N)\n-   Fixed parsing issue for C# portscan with commas (@Cx01N)\n-   Fixed error for PrivExchange with missing System.XML.dll (@Cx01N)\n\n### Removed\n\n-   Removed BypassUACGrunt due to compatibility with only Covenant (@Cx01N)\n-   Removed BypassUACCommand due to compatibility with only Covenant (@Cx01N)\n\n## [5.10.2] - 2024-05-05\n-   Updated Starkiller to v2.8.1\n\n## [5.10.1] - 2024-04-26\n-   Updated Starkiller to v2.8.0\n\n### Added\n\n-   Added removal of starkiller directory to server reset (@Cx01N)\n\n### Fixed\n\n-   Fixed missing .NET 4.5 DLLs (@Cx01N)\n-   Fixed run_as_user issue when dealing with directories (@Cx01N)\n-   Fixed missing clr package for IronPython standard library (@Cx01N)\n\n## [5.10.0] - 2024-04-08\n\n### Added\n\n-   Added dependabot for github actions dependencies (@Vinnybod)\n-   Added install option to ./ps-empire file (@Cx01N)\n-   Added auto pull options for submodules on startup (@Cx01N)\n-   Added hook and socket message to receive callback messages for individual agents (@AaronVigal)\n-   Added sacrificial Spawn Process bof (@Cx01N)\n-   Added suggested values to most modules (@Cx01N)\n-   Added continuous, error, and completed tasking statuses (@Cx01N)\n-   Added continuous and error plugin statuses (@Cx01N)\n-   Added Moriary module (@C01N)\n-   Added .NET 4.5 compile option (@C01N)\n\n### Changed\n\n-   Updated all dependencies (@Vinnybod)\n-   Updated Dockerfile and install script to Python 3.12.2 (@Vinnybod)\n-   Updated starkiller snyc to no longer require root (@Cx01N)\n-   Change file permissions for empire and listener logs to be non-root (@Cx01N)\n\n### Fixed\n\n-   Fixed issue loading `openapi.json` (@Vinnybod)\n-   Fixed issue when False is given for options and option is appended with 'False' (@Cx01N)\n-   Fixed module generation error in ComputerDetails (@Cx01N)\n\n## [5.9.5] - 2024-02-22\n-   Updated Starkiller to v2.7.3\n\n## [5.9.4] - 2024-02-17\n\n### Fixed\n\n-   Fixed downloads for C# agent (@Cx01N)\n\n## [5.9.3] - 2024-02-09\n\n### Added\n\n-   Added option to windows_macro stager to select Excel or Word and AutoOpen or AutoClose (@Cx01N)\n\n### Fixed\n\n-   Fixed obfuscation issue in Malleable HTTP listeners and added tests (@Cx01N)\n-   Fixed issue that invalid session IDs were accepted by the server (@Cx01N)\n-   Fixed skywalker exploit (again) and added tests (@Cx01N)\n\n## [5.9.2] - 2024-01-31\n-   Updated Starkiller to v2.7.2\n\n### Fixed\n\n-   Fixed the ForeignKeyConstraint error when refreshing a directory that contains a file with a linked Download (@Vinnybod)\n-   Downgraded bcrypt to version 4.0.1 to resolve issue in passlib (@Cx01N)\n\n## [5.9.1] - 2024-01-25\n\n### Changed\n\n-   Convert agent task output to string before the BEFORE_TASKING_RESULT_HOOK (@Vinnybod)\n-   Updated tasklist for powershell code to not throw error when GetOwner fails (@Cx01N)\n\n### Fixed\n\n-   Updated Uvicorn to fix issue where an open browser would cause the shutdown to hang (<https://github.com/encode/uvicorn/pull/2145>) (@Vinnybod)\n-   Fixed the fastapi app lifecycle not being properly called on shutdown (@Vinnybod)\n-   Converted listener threads to daemons so they don't hang the shutdown in Python 3.12 and report `RuntimeError: can't create new thread at interpreter shutdown` (@Vinnybod)\n-   Log warning about ps/ls hooks and filters not being able to parse the JSON output (@Vinnybod)\n\n## [5.9.0] - 2024-01-20\n\n### Added\n\n-   Added validation and execution exceptions for modules to raise (@Vinnybod)\n-   Added decorators for module generate functions to automatically get the module_source and call finalize_module (@Vinnybod)\n-   Added execution exception to plugins (@Vinnybod)\n-   Added RUF rules to ruff config (@Vinnybod)\n-   Added SIM rules to ruff config (@Vinnybod)\n-   Added BOF modules to Empire as yamls (@Cx01N)\n    -   Added ClipBoardWindow-Inject module\n    -   Added nanodump module\n    -   Added secinject module\n    -   Added tgtdelegation module\n    -   Added TrustedSec's SA modules\n-   Added custom certificate path to server config.yaml (@AaronVigal)\n\n### Deprecated\n\n-   Returning tuples from module generate functions is deprecated\n    -   To return a 400, raise a `ModuleValidationException`\n    -   To return a 500, raise a `ModuleExecutionException`\n    -   Stop using `handle_error_message`\n-   Returning tuples from plugin execution functions is deprecated\n    -   To return a 400, raise a `PluginValidationException`\n    -   To return a 500, raise a `PluginExecutionException`\n-   Loading plugins from a `.plugin` file is deprecated\n    -   Use a `.py` file with a `plugin.yaml` instead\n-   Extending the `Plugin` class is deprecated\n    -   Use the `BasePlugin` class instead\n\n### Changed\n\n-   Migrated some Pydantic and FastAPI usage away from deprecated features (@Vinnybod)\n-   Updated the install script and Docker file from Python 3.12.0 to 3.12.1 (@Vinnybod)\n-   Upgraded all dependencies with `poetry up` (@Vinnybod)\n-   Plugin updates (@Vinnybod)\n    -   Plugins have a `plugin.yaml`\n    -   Base plugin class is now `BasePlugin`\n    -   Updated plugin documentation\n-   Upgraded Black to 23.12.0 (@Vinnybod)\n-   Upgraded Ruff to 0.1.9 (@Vinnybod)\n-   Upgraded Seatbelt to 1.2.1 (@Cx01N)\n\n## [5.8.4] - 2023-12-22\n\n### Fixed\n\n-   Fixed `Path` variables in EmpireConfig not properly expanding `~` (@Vinnybod)\n\n## [5.8.3] - 2023-12-15\n\n### Fixed\n\n-   Fixed error in Get-DomainComputer in Powerview when dnshostname property is missing (@Cx01N)\n\n## [5.8.2] - 2023-12-09\n\n### Fixed\n\n-   Fixed error in generating stager for HTTP Hop listener (@Cx01N)\n-   Fixed the publishing of docker images to go to the correct DockerHub coordinate (@Vinnybod)\n\n## [5.8.1] - 2023-11-30\n-   Updated Starkiller to v2.7.1\n\n### Added\n\n-   Add tags search to credentials endpoints (@Vinnybod)\n-   Allow Starkiller to be disabled (@Vinnybod)\n-   Allow API port to be configured from the config.yaml (@Vinnybod)\n-   Add flake8-comprehensions rules to ruff config (@Vinnybod)\n\n### Changed\n\n-   Upgrade Pydantic to v2 (@Vinnybod)\n-   Update common FastAPI Dependencies to use 'Annotated' types for simpler code (@Vinnybod)\n-   Simplify TestClient setup (@Vinnybod)\n-   Removed usages of deprecated `Credentials` and `Listeners` functions (@Vinnybod)\n-   Remove usages of deprecated `Agents` functions (@Vinnybod)\n-   Add typehinting for `MainMenu` object in modules (@Vinnybod)\n-   Removed `name` property from listener start and shutdown functions (@Vinnybod)\n-   Removed secretsocks as dependency for Python agents (@Cx01N)\n\n### Removed\n\n-   Remove unused migration scripts (@Vinnybod)\n\n### Fixed\n\n-   Fixed the database session management for websocket endpoints (@Vinnybod)\n\n## [5.8.0] - 2023-11-06\n\n-   Warning: You may run into errors installing things such as nim if you are running the install script on a machine that previously ran it. This is due to permissions changes with the install script. In this case it is recommended to use a fresh machine or manually remove the offending directories/files.\n\n### Added\n\n-   Added automatic tasking for sysinfo for stageless agents (@Cx01N)\n\n### Changed\n\n-   Modernized the Python and IronPython agents with new agent and staging code (@Cx01N)\n-   Updated listeners to consistently use port 80 and 443 for HTTP traffic by default (@Cx01N)\n-   Make the installation of donut conditional on architecture since it doesn't work on ARM (@Vinnybod)\n    -   When donut is invoked but not installed, give a useful warning (@Vinnybod)\n-   Allow a config to be loaded from an outside directory and the downloads/logs/etc to be stored in an outside directory (@Vinnybod)\n-   Correct more deprecation warnings for SQLAlchemy and invalid escape sequences (@Vinnybod)\n-   Updated the ruff minimum Python version to 3.10 and applied fixes to get codebase compliant (@Vinnybod)\n-   Remove unneeded condition statement from all listeners (@Vinnybod)\n-   Update Docker build (@Vinnybod)\n    -   Use the official Poetry installer\n    -   Fix Starkiller trying to auto-update inside the container\n    -   Pre-install Starkiller as part of the docker build\n    -   Use Python 3.12\n    -   Don't use apt for powershell and dotnet\n    -   DockerHub images now have linux/amd64 and linux/arm64 architectures\n-   Dependency changes (@Vinnybod)\n    -   Use BC-Security fork of md2pdf until upstream can support Python 3.12\n    -   Use a patched version of pysecretsocks that packages asyncore for Python 3.12 support\n    -   Use docopt-ng for Python 3.12 support\n    -   Add packaging as a runtime dependency\n-   Update install script (@Vinnybod)\n    -   Use pyenv to install Python\n    -   Use the official Poetry installer\n    -   Don't run the entire script as root\n    -   Rewrite the test containers and reuse a templated Dockerfile\n    -   Add Debian12 support\n    -   Bump all OS to use Python 3.12\n    -   Refactor the script to be a bit more readable\n    -   Condense the test_install_script job\n    -   Added option to start MySQL service on boot (@Cx01N)\n\n### Removed\n\n-   Drop support for Python 3.8 and 3.9\n\n## [5.7.3] - 2023-10-17\n\n-   Updated Starkiller to v2.6.1\n-   Fixed global obfuscation not working on modules (@Cx01N)\n-   Added bypass module in PowerShell to run bypasses after agent is staged (@Cx01N)\n-   Fixed IronPython and Python stagers not getting obfuscation applied (@Cx01N)\n\n## [5.7.2] - 2023-09-28\n\n-   Updated Dropbox C2 to use new API endpoints (@Cx01N)\n-   Standardized Kill Date and Working Hours for PowerShell Agents (@Cx01N)\n-   Apply fixes for future Python 3.12 compatibility (@Vinnybod)\n-   Add additional rulesets to ruff linting (@Vinnybod)\n\n## [5.7.1] - 2023-09-25\n\n## [5.7.0] - 2023-09-17\n\n-   Add avatars to users (@Vinnybod)\n-   Update plugin documentation, update embedded plugins to not abuse notifications (@Vinnybod)\n-   Add additional pre-commit hooks for code cleanup (@Vinnybod)\n-   Report test coverage on pull requests (@Vinnybod)\n-   Fixed issue with multiple parameters not executing in IronPython for C# tasks (@Cx01N)\n-   Fix for spawnas not generating bat file (@wizquaza)\n-   Fixed taskings for OneDrive listener (@Hubbl3)\n\n## [5.6.4] - 2023-09-08\n\n-   Added Stix2 to dependency list for Advanced Reports (@Cx01N)\n-   Fixed C# module imports for IronPython agent (@Cx01N)\n-   Updated Invoke-DllInjection.ps1 (@Signum21)\n-   Fix nimble install error (@fukusuket)\n\n## [5.6.3] - 2023-08-27\n\n-   Updated Starkiller to v2.5.3\n-   Added Advanced Reporting Plugin and dependencies (@Cx01N)\n-   Pin linters in the workflow\n-   Catch error when starting up database that was seeded by an older version of Empire (@Vinnybod)\n-   Updated Windows BAT launcher to use Base64 for all payloads (@Cx01N)\n\n## [5.6.2] - 2023-08-09\n\n-   Update the github issue templates to use forms (@Vinnybod)\n-   Fix issue with option validator throwing error for strict non-required options (@Vinnybod)\n-   Allow Starkiller to load even if the git pull fails if the dir exists (@Vinnybod)\n-   Update listener descriptions to not specify languages since Empire supports more languages now\n\n## [5.6.1] - 2023-08-02\n\n## [5.6.0] - 2023-07-25\n\n-   Upgrade dependencies\n-   Upgrade Dockerfile to bullseye and 3.11.4\n-   Allow download_service to accept a pathlib.Path object to create a download (@Vinnybod)\n-   Fix file option for listeners, stagers, plugins (@Vinnybod)\n-   Add tags to Listeners, Agents, Agent Tasks, Plugin Tasks, Credentials, and Downloads (@Vinnybod)\n    -   Add endpoints to add, edit, and delete tags for each resource type\n    -   Add tag list endpoint\n    -   Add tag filters to Agent Tasks, Plugin Tasks, and Downloads\n    -   Add events for new and updated tags\n-   Fix user filters for tasks to include tasks without any users (@Vinnybod)\n-   Refactor stager and listener tests to work better in parallel (@Vinnybod)\n-   Add a Invoke-PhishingLNK Module (@0xFFaraday)\n-   Fix changelog link in README (@theguly)\n\n## [5.5.4] - 2023-07-20\n-   Updated Starkiller to v2.4.3\n\n## [5.5.3] - 2023-07-20\n\n-   Updated Starkiller to v2.4.2\n-   Updated restip message to show IP address on server (@Cx01N)\n-   Fixed onedrive taskings for powershell (@Cx01N)\n-   Update pyyaml to 6.0.1 to avoid build issue from cython (@Vinnybod)\n-   Use MariaDB in Debian (@Vinnybod)\n\n## [5.5.2] - 2023-07-14\n\n-   Fix TypeError and crash when using `main` command in client (@jellyjellyrobot)\n-   Fix extraneous semi-colon breaking powershell 'literal' execution (@crittico)\n\n## [5.5.1] - 2023-07-06\n\n-   Fix basic_reporting plugin using the wrong agent checkin column\n\n## [5.5.0] - 2023-06-21\n\n-   Break out agent checkins to a new table (@Vinnybod)\n    -   New checkins endpoint to get them as a list\n    -   New checkins aggregate endpoint to get aggregated checkin data\n    -   Aggregate endpoint not supported with SQLite\n-   Add a warning message about using SQLite\n-   Added LinPEAS to Python modules (@Cx01N)\n-   Added python obfusscation using python-obfuscator (@Cx01N)\n-   Added IronPython SMB Agents/Listener (@Cx01N)\n-   Expand file options to plugins, stagers, and listeners (@Vinnybod)\n-   Added Python agent support to hop listener (@Cx01N)\n-   Added staging to hop listener (@Cx01N)\n-   Added python module for Pwnkit (CVE-2021-4034) (@Cx01N)\n-   Added python module for Polkit (CVE-2021-3560) (@Cx01N)\n-   Fixed safecheck error for python module sudo spawn (@Cx01N)\n-   Fixed file error in Invoke-Shellcode (@Cx01N)\n-   Removed duplicate modules between languages (@Cx01N)\n    -   Removed .NET Core modules due to errors\n    -   Removed redundant C# lateral movement modules\n    -   Removed Covenant Mimikatz in favor of Invoke-Mimikatz\n    -   Removed Invoke-Assembly in favor of Covenant's execute assembly\n    -   Removed Invoke-BOF in favor of RunOF\n    -   Removed Invoke-Rubeus in favor of Covenant's Rubeus\n    -   Removed Invoke-Seatbelt in favor of Covenant's Seatbelt\n    -   Removed Bloodhound v1 module\n-   Revamped malleable profiles and increased their generation reliability (@Cx01N)\n-   Allow the server to start even when starkiller sync fails (@Vinnybod)\n-   Remove libssl1.1 from the install script since it doesn't appear to be needed and causes install failures on some OS (@Vinnybod)\n-   Fix the restip argument which wasn't being used (@Vinnybod)\n-   Added reload endpoint to Malleable Profiles, Modules, Bypasses, and Plugins (@Cx01N)\n-   Updated and fixed pyinstaller stager (@Cx01N)\n\n## [5.4.2] - 2023-06-07\n\n-   Updated Starkiller to v2.3.2\n-   Fixed python modules not running properly (Cx01N)\n-   Updated python multi_socks to run with Python 3 (Cx01N)\n\n## [5.4.1] - 2023-06-02\n\n-   Fix database reset issue with MySQL (@Vinnybod)\n-   Add a message to the client recommending the use of the Starkiller (@Vinnybod)\n-   Fixed issue with Invoke-wmi not returning a success message (@Cx01N)\n-   Fixed dynamic function issue with Powerview (@Cx01N)\n-   Pair down the amount of minutes needed to run pull request builds (@Vinnybod)\n\n## [5.4.0] - 2023-05-22\n\n-   Remove Starkiller as a submodule, treat it as a normal directory (@Vinnybod)\n    -   Everything should 'just work', but if you have issues after pulling these latest changes, try deleting the Starkiller directory before running the server `rm -r empire/server/api/v2/starkiller`.\n-   Some improvements to the release flow after starkiller submodule removal (@Vinnybod)\n\n## [5.3.0] - 2023-05-17\n\n-   Add the ability to specify a module option as a file (@Vinnybod)\n\n## [5.2.2] - 2023-04-30\n\n-   Updated Starkiller to v2.2.0\n-   Dependency upgrades (@Vinnybod)\n\n## [5.2.1] - 2023-04-30\n\n-   Updated Donut to v1.0.2 (@Cx01N)\n-   Fixed issue with install path not being used properly when switching empire location (@Vinnybod)\n-   Lock nim version in the install script (@Vinnybod)\n-   Fixed issue with Powerview modules not performing dynamic detect on overhead functions (@Cx01N)\n-   Fixes for the onedrive listener that broke with 5.0 (@Vinnybod)\n\n## [5.2.0] - 2023-03-31\n\n-   Added new plugin functionality (@Vinnybod)\n    -   Added plugin tasks\n    -   Added plugin task endpoints\n    -   Gave plugins kwargs to allow for more flexibility. Plugins are now receiving a database session and user object.\n-   Tasks renamed to AgentTasks to avoid confusion with PluginTasks\n-   Rename tasking to task in most places to standardize the naming. The hook names have not been changed yet.\n-   Fix Starkiller error in Docker (@0x4xel)\n-   Fixed launcher_bat to work with all listeners (@Cx01N)\n-   Fixed issue with duplicate Server Header being added by Flask (@Cx01N)\n-   Fixed malleable c2 not generating IronPython agents correctly (@Cx01N)\n\n## [5.1.2] - 2023-03-29\n\n-   Updated Starkiller to v2.1.1\n-   Removed thread from IronPython agent (@Hubbl3)\n-   Fixed foreign listener issue with cookies (@Hubbl3)\n-   Fixed error message handling for port forward pivot (@Cx01N)\n-   Fixed upload not reporting error in PowerShell agent (@Cx01N)\n-   Fixed client not giving option to select upload directory (@Cx01N)\n-   Fixed persistence/powerbreach/eventlog launcher generation (@Cx01N)\n\n## [5.1.1] - 2023-03-17\n\n-   Added D/Invoke option to Process Injection (@Cx01N)\n-   Added IronPython and csharp to windows/launcher_bat (@Cx01N)\n-   Added language option to spawn and spawnas modules (@Cx01N)\n-   Fixed issue with powershell and ironpython agents not using public classes (@Cx01N)\n-   Fixed issue where large shellcode files lock up server in Invoke_Shellcode (@Cx01N)\n-   Increased the default time for base64 encoded ironpython payloads (@Cx01N)\n-   Fix issue with large stacktrace on stale socketio connection (@Vinnybod)\n\n## [5.1.0] - 2023-03-01\n\n-   Added a 'modified_input' field to the 'execute module' task (@Vinnybod)\n-   Added an endpoint to get the script for a module (@Vinnybod)\n\n## [5.0.4] - 2023-02-25\n\n-   Fix module error in PSRansom (@Cx01N)\n-   Update the install script to set up a new db user instead of overwriting the root user (@Vinnybod)\n-   Update the Starkiller syncer to skip updating if not in a git repo (@Vinnybod)\n-   Update the Docker CI action to publish latest on 'main' branch (@Vinnybod)\n-   Fix install of Poetry for Debian based systems (@Vinnybod)\n\n## [5.0.3] - 2023-02-20\n\n-   Updated Starkiller to v2.0.5\n-   Fix Invoke-Kerberoast with etype 17 or 18 (@AdrianVollmer)\n-   Add 3.11 support, bump Dockerfile to 3.11, bump Debian install to 3.8.16 (@Cx01N)\n-   Update the GitHub actions to remove usages of deprecated ::set-output function (@Vinnybod)\n-   Update plugin submodule references post 5.0 branch merges (@Vinnybod)\n\n## [5.0.2] - 2023-02-14\n\n-   Fix the test that detects errors loading modules (@Vinnybod)\n-   Allow empty user id and username on the task API (@Vinnybod)\n-   Rename module_slug to module_id for tasks for consistent naming on the api (@Vinnybod)\n-   Add a shebang to the checkout-latest-tag.sh script (@xambroz)\n\n## [5.0.1] - 2023-02-04\n\n-   Fixed the uniqueness check for MariaDB (@Vinnybod)\n-   Fixed redirector issue with parent listeners (@Cx01N)\n-   Added exception for agent task when server is initializing (@Cx01N)\n-   Fixed listener menu displaying error when viewing options (@Cx01N)\n-   Starkiller sync process now attempts to pull the ref from the remote (@Vinnybod)\n-   Auto-merge `private-main` to downstream `main` branches using a label (@Vinnybod)\n-   Fixed error in IronPython agent when running PowerShell tasks (@Cx01N)\n-   Fixed issue adding comms twice to stageless python agents (@Cx01N)\n-   Updated Redirector to Port Forward Pivot (@Cx01N)\n-   Updated to Mimikatz 2.2.0-20220919 (@Cx01N)\n-   Add Ruff linter and pre-commit hook (@Vinnybod)\n\n## [5.0.0] - 2023-01-15\n\n-   Added Starkiller as an integrated web app (@Vinnybod)\n-   Added full MySQL support (@Vinnybod)\n    -   MySQL is the new default\n    -   Database type can be changed by setting `database.use` in `config.yaml` or environment variable `DATABASE_USE`\n    -   SQLite is still supported\n    -   The Docker image still defaults to SQLite, but can be changed to MySQL by modifying the `config.yaml` or setting the environment variable `DATABASE_USE=mysql`.\n-   Added v2 API (@Vinnybod)\n-   Added autogenerated docs for v2 API (@Vinnybod)\n-   Added stageless options for agents (@Cx01N)\n-   Added clear window command to client (@Cx01N)\n-   Added mouse_support to client (@Cx01N)\n-   Added RunOF module to support COFF/BOF execution (@Cx01N)\n-   Added new database table for files (@Vinnybod)\n-   Added server-side storage of stagers (@Vinnybod)\n-   Added new listener object is created for each listener instead of using a shared state (@Vinnybod)\n-   Added listener, agent, and task hooks (@Vinnybod)\n-   Added db session to hooks (@Vinnybod)\n-   Added global obfuscation config and removed from config table (@Vinnybod)\n-   Added authors to bypass endpoints (@Vinnybod)\n-   Added a help command to the client to print the full doc string of a function. such as `help shell` or `help script_import` (@Vinnybod)\n-   Added `--literal` flag that can be used on shell commands that forces the agent to execute the command literally, ignoring any built-in aliases that exist such as for whoami or ps (@Vinnybod)\n-   Updated plugins endpoints and options (@Vinnybod)\n-   Updated authentication to use JWT auth instead of basic auth (@Vinnybod)\n-   Updated to MITRE ATT&CK v11 for sub-technique and tactic support (@Cx01N)\n-   Updated SOCKS & Chisel plugins for 5.0 (@Cx01N)\n-   Updated socketio emit to be async (@Vinnybod)\n-   Updated hooks to handle sync or async functions (@Vinnybod)\n-   Updated authors to have name, handle, and link for modules, listeners, stagers, and plugins (@Vinnybod)\n-   Updated Dockerfile for better caching (@Vinnybod)\n-   Updated agent.py to extract logic for sleep duration and lazily calculate file sizes (@lavafroth)\n-   Moved keyword_obfuscation config property under database defaults (@Vinnybod)\n-   Moved obfuscate and obfuscateCommand defaults under `database.defaults.obfuscation` (@Vinnybod)\n-   Restructured all the 'common' code (@Vinnybod)\n-   Converted reports to a plugin (@Cx01N)\n-   Converted generate_agent module to stager (@Cx01N)\n-   Removed malleable.Profile from listener options (@Cx01N)\n-   Removed old REST API (@Vinnybod)\n-   Removed old WebSocket API (@Vinnybod)\n-   Removed socketport since socketio runs on the same port as the API (@Vinnybod)\n-   Removed AFTER_AGENT_STAGE2_HOOK and replaced with AFTER_AGENT_CHECKIN_HOOK (@Vinnybod)\n-   Removed last seen time for users since it could cause db locking issues (@Vinnybod)\n-   Removed pydispatcher (@Vinnybod)\n-   Removed prompt line from server (@Vinnybod)\n\n## [4.10.0] - 2023-01-03\n\n-   Updated agent model for consumer methods to use the info property (@lavafroth)\n-   Debian 11, Ubuntu 2204, and ParrotOS Support (@Vinnybod)\n-   Add a \"-y\" option to the install script and fixed a bunch of formatting (@ajanvrin)\n-   Fixed issues with stripping comments from Python code and executing certain Python modules (@Jackrin)\n-   Added C# Crypto Miner module (@Cx01N)\n-   Added PSRansom module (@Cx01N)\n\n## [4.9.0] - 2022-11-29\n\n-   New CI/CD Process (@Vinnybod)\n\n## [4.8.4] - 2022-11-26\n\n-   Fixed #540 PydanticModule object has no attribute 'info' in API module search (@lavafroth)\n-   Fixed agent/server module version check (@Jackrin)\n\n## [4.8.3] - 2022-11-11\n\n## [4.8.2] - 2022-11-11\n\n-   Updated crontab method to work with python3 (@Cx01N)\n-   Updated linux_privesc_check to work with python3 (@Cx01N)\n-   Fixed mistakes in README.md (@Cx01N)\n-   Removed unused class in python agents (@Cx01N)\n\n## [4.8.1] - 2022-10-30\n\n-   Added container structure test to CI (@Vinnybod)\n-   Added a fallback checkout that doesn't use a token (@Vinnybod)\n-   Revamped README.md (@Cx01N)\n-   Simplified Dockerfile install process (@lavafroth)\n-   Fixed crashing issue with IronPython agent (@Cx01N)\n-   Fixed infinite loop output stream for csharpserver plugin (@dwilson5)\n-   Fixed querying stale and active agents (@lavafroth)\n\n## [4.8.0] - 2022-08-30\n\n-   Updated compiler to .NET SDK 6.0 (@Hubbl3)\n\n## [4.7.3] - 2022-08-20\n\n-   Added SANS 565 to README (@Cx01N)\n-   Fixed error when entering empty line into client (@Cx01N)\n-   Fixed Dropbox listener staging issue (@Cx01N)\n-   Fixed OneDrive listener staging issue (@Cx01N)\n\n## [4.7.2] - 2022-08-20\n\n## [4.7.1] - 2022-07-29\n\n-   Fix write_dllhijacker.yaml script_path reference (@kevNii)\n\n## [4.7.0] - 2022-06-25\n\n-   Update Python version on Dockerfile (@Vinnybod)\n-   Add Python 3.10 to CI tests  (@Vinnybod)\n-   Add a resource file command to the client (@Vinnybod)\n-   Add PowerShell and C# to IronPython modules (@Cx01N)\n-   Add ChiselServer, SocksProxyServer plugin as a submodule (@Cx01N)\n-   Fixed Sharpire download function (@Cx01N)\n-   Fixed spawnas to work with new bat file format (@Cx01N)\n-   Fixed tasking error for IronPython launcher executable (@Cx01N)\n-   Remove some python dependencies (@Vinnybod)\n-   Make tkinter import failure a warning instead of a fatal error (@Vinnybod)\n\n## [4.6.1] - 2022-06-10\n\n-   Use a BC-Security fork of Donut to resolve a python 3.10 issue (@Cx01N)\n-   Update reflective pick dlls (@Hubbl3)\n\n## [4.6.0] - 2022-05-24\n\n-   Added Certify C# module (@Cx01N)\n-   Added embedded VNC client and launcher (@Cx01N)\n-   Added obfuscate option to C# payloads (@Hubbl3)\n-   Added global obfuscation to C# modules (@Cx01N)\n-   Added -BasicParsing to .bat launcher (@X0RW3LL)\n-   Added obfuscation to bat launcher for HTTP and HTTP COM (@Cx01N)\n-   Added option to enable/disable JA3 evasion (@Cx01N)\n-   Added JA3 evasion technique to Malleable HTTP (@Cx01N)\n-   Added option to client config to remove borders on tables (@Cx01N)\n-   Updated staging for agents (@Cx01N)\n-   Updated confuser to confuserex 2 (@Cx01N)\n-   Fixed nim install on Ubuntu by using choosenim installer (@vinnybod)\n-   Converted reset.sh script to Python and add tests (@Vinnybod)\n-   Add a `--reset` flag to the client (@Vinnybod)\n\n## [4.5.5] - 2022-05-07\n\n-   Fixed http bug in malleable, http-com, and onedrive listeners (@Cx01N)\n-   Updated jq to 1.2.2 to avoid install errors (@Cx01N)\n\n## [4.5.4] - 2022-04-26\n\n-   Fixed typo from 4.5.3 with the bypass database model (@Vinnybod)\n\n## [4.5.3] - 2022-04-24\n\n-   Fixed issue where default_response is needed for external/generate_agent (@Cx01N)\n-   Added check if bypass language is compatible (@Cx01N)\n-   Added error message formatting for listeners and stagers (@Cx01N)\n-   Added `zip` to the Dockerfile which is necessary to create ms files such as docx (@junquera)\n\n## [4.5.2] - 2022-04-12\n\n-   Fix string format errors in dbx listener (@awsmhacks)\n-   Fix script_end error in schtasks.py (@harry-cmdzero)\n-   Add workflows for doing the public releases (@Vinnybod)\n-   Pull out common code from listeners to a listener_utils module (@Cx01N)\n-   Fix missing script_path and fix variable references in service_stager and service_exe_stager (@harry-cmdzero)\n\n## [4.5.1] - 2022-03-27\n\n-   Fixed empire_config `yaml` property to include fields that don't exist on the config object (@Vinnybod)\n\n## [4.5.0] - 2022-03-27\n\n-   Updated changelog to use [Keep a Changelog](https://keepachangelog.com/en/1.0.0/) (@Vinnybod).\n-   Added tests for listener launchers (@Vinnybod).\n-   Add a step to run the test suite on the Docker image itself (@Vinnybod)\n-   Removed .plugin from the black configuration (@Vinnybod)\n-   Removed random caps from backdoorlnk (@Cx01N)\n-   Added html files for listener responses (@Cx01N)\n-   Converted server config to a typed class (@Vinnybod)\n-   Add keyword obfuscation to the config.yaml (@Vinnybod)\n-   Fix proxy_creds variable name in bypassuac (@Cx01N)\n-   Updated launcher_bat to use web request for launcher (@Cx01N)\n-   updated malleable profiles with banzarloader (@Cx01N)\n-   Added C# execution modules (@Cx01N)\n-   Add tests for launcher code (@Vinnybod)\n-   Split ls/dir command line to get the first element for ls/dir command (@CyrilleFranchet)\n-   Updated lastwritetime on ls/dir command (@CyrilleFranchet)\n-   Fix script_end variable on privesc/ask module (@CyrilleFranchet)\n-   script_import will upload a file from the client's machine (@Cx01N)\n\n## [4.4.1] - 2022-03-06\n\n-   Fixed agent generation with custom headers (@Hubbl3)\n-   Fixed missing quote in get_users.yaml (@Cx01N)\n-   Fixed displaying info for plugins (@Cx01N)\n-   Fixed legacy plugin loading to ignore folders (@Cx01N)\n-   Removed http_mapi.ps1\n-   Removed comment that global obfuscation and keyword obfuscation cannot be combined (@Cx01N)\n\n## [4.4.0] - 2022-02-14\n\n-   Added auto copy to clipboard feature (@Cx01N)\n-   Added directory settings to yaml for downloads/stagers/obfuscated_modules (@Cx01N)\n-   Added C# process injection module (Cx01N)\n-   Added bypass yamls for PowerShell (@Hubbl3)\n-   Added Black and Isort integration (@Vinnybod)\n-   Added tests for loading and generating scripts with defaults (@Vinnybod)\n-   Updated Psinject to use updated version of reflective pick and bypasses (@Hubbl3)\n-   Fixed check for preobfuscation of files (Cx01N)\n-   Fixed issue with plugins using tuple (@Vinnybod)\n-   Removed random capitialization function for listeners (@Cx01N)\n-   Removed meterpreter and mapi listeners (@Cx01N)\n-   Powerview - added functions for group managed service accounts and fine grained pw pol (@jfmaes)\n\n## [4.3.3] - 2022-01-24\n\n-   Added a hook for when an agent is fully checked in (stage2) (@Vinnybod)\n\n## [4.3.2] - 2022-01-14\n\n-   Fixed issues with variables names in Mimikatz & Privesc modules (@sbrun)\n-   Fixed issue with Invoke-Obfuscation not being properly called (@Cx01N)\n-   Add dotnet install to dockerfile (@Vinnybod)\n\n## [4.3.1] - 2022-01-08\n\n-   Fixed issue with module variables referenced before assignment or undefined (@Vinnybod)\n-   Fixed bug with Invoke-Seatbelt caused by variable name mismatch (@Vinnybod)\n-   Fixed IronPython exit/shutdown issue (@Cx01N)\n-   Fixed ToLower() bug in PowerShell agent when using route (@CyrilleFranchet)\n-   Fixed multiline shell output bug (#491) (@CyrilleFranchet)\n-   Added dir command to the file browser hook (@CyrilleFranchet)\n-   Generate test account with secure rng (@moloch--)\n-   Add Invoke-FodhelperProgIDs module (@m1m1k4tz)\n-   Add Invoke-VeeamGetCreds module (@sadshade)\n\n## [4.3.0] - 2021-12-23\n\n-   Updated Invoke-Seatbelt, Invoke-Rubeus, & Invoke-WinPeas (@Cx01N)\n-   Updated C# modules: Seatbelt, SharpSploit (@Cx01N)\n-   Updated profiles to include APT29 (@Cx01N)\n-   Updated Mimikatz to 20210810-2 (@Cx01N)\n-   Updated reset script to remove c# tasks and generated-stagers (@Cx01N)\n-   Added obfuscation options into Empire CLI (@Cx01N)\n-   Added Invoke-BOF module (@Cx01N)\n-   Added C# server plugin to run on startup (@Cx01N)\n-   Added autostart plugin with options to config file (@Cx01N)\n-   Added upload & download options for Empire CLI (@Cx01N)\n-   Added Plugin folders and extensions (@Cx01N)\n-   Added C# redirector (@Cx01N)\n-   Added Invoke-DownloadFile (@Cx01N)\n-   Added error message in client for file downloads >1MB (@Cx01N)\n-   Moved NVNC and Sharpire as C# submodules (@Cx01N)\n-   Fixed Invoke-Assembley (@Cx01N)\n-   Fixed osx/clipboard & pilliageuser modules (@Cx01N)\n-   Removed unused wiki workflows (@Cx01N)\n\n## [4.2.0] - 2021-11-01\n\n-   Added revershell & cmd launchers with reversehell (@Cx01N)\n-   Added ironpython to compile through empire with embedded std lib (@Cx01N)\n-   Added proxy (SOCKS/TOR/HTTP) pivots to python agents (@Cx01N)\n-   Added notifications in bottom toolbar for plugins and agents (@Cx01N)\n-   Added C# VNC server (@Cx01N)\n-   Added extended rights for certificate templates (@daem0nc0re)\n-   Added donut for shellcode generation (@Cx01N)\n-   Updated WMI persistence and bug fixes (@janit0rjoe)\n-   Updated covenant compiler (@Hubbl3)\n-   Updated csharp powershell launcher to compile through empire (@Hubbl3)\n-   Fixed formatting error in enable_rdp (@jamarir)\n-   Fixed nim launcher to run internal to exe (@Cx01N)\n-   Fixed misc python module errors (@Cx01N)\n-   Fixed outfile message displaying wrong directory (@Cx01N)\n-   Removed sRDI for shellcode (@Cx01N)\n\n## [4.1.3] - 2021-09-28\n\n-   Fixed output from files throwing a error for the client (@Cx01N)\n\n## [4.1.2] - 2021-09-21\n\n-   Removed pyminifier as a dependency to prevent install errors (@Cx01N)\n\n## [4.1.1] - 2021-09-20\n\n-   Add OutputFunction to dcsync_hashdump (@jamarir)\n-   Convert file operations to use with syntax (@jamarir)\n-   Added Invoke-IronPython3 and some OffensiveDLR fixes (@Cx01N)\n-   Fix for (#476) - String indices error  ms16-032 & ms16-135 (@Cx01N)\n-   Fix help menu text on the interact menu (@archcloudlabs)\n-   Rework agent taskings in the client to not poll for a result (@Cx01N)\n-   Added Python agents to the external/generate_agent module (@Cx01N)\n-   Update add_sid_history module command (@ilanisme)\n\n## [4.1.0] - 2021-08-29\n\n-   Correct issue where install script would break depending on the current working directory (@Vinnybod)\n-   Empire client now currently refreshes listener list after killing a listener (@Vinnybod)\n-   Removed the wiki and added a link to the new docs (@Vinnybod)\n-   Added the initial filtering/hooking feature (@Vinnybod)\n-   Fix an issue where the docker builds would not run because it was deleting the database (@Vinnybod)\n-   Added autocomplete for taskings in the Empire Client and added a command to view a specific task (@Cx01N)\n-   Updated the OutputFunction feature to allow for arbitrary values (@Vinnybod)\n-   Added an IronPython3 agent (@Cx01N)\n\n## [4.0.2] - 2021-08-16\n\n-   Added socketio messages to screenshot/download/upload (@Cx01N)\n-   Added help message when no input is given to empire.py (@Cx01N)\n-   Fixed missing slash for module directories (@Cx01N)\n-   Fixed modules Get-SQLServerLoginDefaultPw and PortScan (@jamarir)\n-   Fixed formatting bug in the options table on the listener menu (@Vinnybod)\n-   Fixed querying retain-last-value config parameters (@ilanisme)\n-   Fixed invalid concat on keylogs (@Cx01N)\n-   Fixed mimikatz command and added suggested values (@Cx01N)\n-   Fixed misc bugs (@Vinnybod)\n-   Updated suggested values for stagers and reformatted code (@Cx01N)\n-   Updated editlistener menu (@Vinnybod)\n-   Removed client suppression for job started taskings (@Cx01N)\n\n## [4.0.1] - 2021-07-19\n\n-   Added API endpoints for sleep/jitter to agents (@Cx01N)\n-   Added sleep command to CLI (@Cx01N)\n-   Added sleep/jitter option to C# agents (@Hubbl3)\n-   Fix for Invoke-Obfuscation installation\n-   Added PrintNightmare module (@Cx01N)\n\n## [4.0.0] - 2021-06-28\n\n### Breaking Changes\n\n-   Removed old Empire CLI and cmdloop from server (@Cx01N)\n-   The credential create endpoint now accepts a single credential instead of a list\n-   Some endpoints which were previously throwing 500s when not found, now properly return a 404\n-   Plugin endpoints and socketio channels renamed to plural (plugin -> plugins) to match naming convention of other resources (@Vinnybod)\n\n### New Features\n\n-   Integrated server and client into Empire (@Cx01N, @Vinnybod)\n-   Introduced C# agents (@Hubbl3)\n-   Integrated Covenant Roslyn compiler for task compilation (@Hubbl3)\n-   Covenant Task compatibility (@Hubbl3, @Vinnybod)\n-   Added support for 'suggested values' on the server and auto completing the suggested values in the CLI (@Vinnybod)\n-   Added new launch parameters for starting server/client (@Cx01N, @Vinnybod)\n-   Added Offensive DLR Modules: IronPython, ClearScript, & Boolang (@Cx01N)\n-   Added MS16-051 stager (@Cx01N)\n-   Added Start-ProcessAsUser module (@Cx01N)\n-   Added NTLM-Extract module (@Cx01N)\n-   Added Invoke-SharpSecDump module (@Cx01N)\n-   Added sriptimport and scriptcommand to API (@Cx01N)\n-   Added auto generate certificate function to startup script (@Cx01N)\n-   Added Invoke-SpoolSample (@Cx01N)\n-   Added redirector chaining and proper tunneling (@Cx01N)\n-   Updated pycrypto to pycryptodome (@Cx01N)\n-   Updated PowerDump with AES NTLM hashes (@Cx01N)\n-   Updated cert/install/reset script with new directories (@Cx01N)\n-   Updated all modules to new YAML format (@Vinnybod, @Cx01N)\n-   Updated to Mimikatz 2.2.0 20210531 X11 RDP Clients (@Cx01N)\n-   Removed M2Crypto dependency (@Cx01N)\n-   Simplified kill/remove commands and added 'all' and 'stale' options (@Cx01N)\n-   Removed the need for manual database timestamp updates, merge taskings and results table to a single table (@Vinnybod)\n-   Added a socketio event for when tasking results come back (@Vinnybod)\n-   Readded rastamouse's bypass (@Cx01N)\n-   Added a 'since' query parameter to the tasks endpoint for more efficient querying (@Vinnybod)\n-   Added socketio tasking event handler to CLI for displaying task results in the interact menu (@Vinnybod)\n-   Install script prompts for xar, bomutils, openjdk, and dotnet for a more streamlined install (@Vinnybod)\n-   Install script now includes dotnet (@Vinnybod)\n-   Dockerfile size decreased by ~1GB by only installing the essentials. There is a note in the README (@Vinnybod)\n-   Made powershell bypasses dynamic. Now set with a single field `Bypasses` and they will be applied in the order provided (@Vinnybod)\n-   Added API endpoints for managing bypasses (@Vinnybod)\n-   Add processor architecture to powershell, csharp, and python agents (@Vinnybod)\n-   Add a display command to interact menu (@Vinnybod)\n-   Add additional endpoints for credential for get, update, and delete (@Vinnybod)\n-   Add create, update, remove credential functionality to the CLI (@Cx01N)\n-   Add an \"output function\" option on several modules (@jamarir)\n-   Updated shellcoderdi to newest version (@Cx01N)\n-   Added a Nim launcher (@Hubbl3)\n\n[Unreleased]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v6.2.1...HEAD\n\n[6.2.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v6.2.0...v6.2.1\n\n[6.2.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v6.1.4...v6.2.0\n\n[6.1.4]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v6.1.3...v6.1.4\n\n[6.1.3]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v6.1.2...v6.1.3\n\n[6.1.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v6.1.1...v6.1.2\n\n[6.1.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v6.1.0...v6.1.1\n\n[6.1.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v6.0.3...v6.1.0\n\n[6.0.3]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v6.0.2...v6.0.3\n\n[6.0.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v6.0.1...v6.0.2\n\n[6.0.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v6.0.0...v6.0.1\n\n[6.0.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.12.2...v6.0.0\n\n[5.12.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.12.1...v5.12.2\n\n[5.12.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.12.0...v5.12.1\n\n[5.12.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.11.7...v5.12.0\n\n[5.11.7]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.11.6...v5.11.7\n\n[5.11.6]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.11.5...v5.11.6\n\n[5.11.5]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.11.4...v5.11.5\n\n[5.11.4]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.11.3...v5.11.4\n\n[5.11.3]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.11.2...v5.11.3\n\n[5.11.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.11.1...v5.11.2\n\n[5.11.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.11.0...v5.11.1\n\n[5.11.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.10.3...v5.11.0\n\n[5.10.3]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.10.2...v5.10.3\n\n[5.10.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.10.1...v5.10.2\n\n[5.10.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.10.0...v5.10.1\n\n[5.10.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.9.5...v5.10.0\n\n[5.9.5]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.9.4...v5.9.5\n\n[5.9.4]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.9.3...v5.9.4\n\n[5.9.3]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.9.2...v5.9.3\n\n[5.9.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.9.1...v5.9.2\n\n[5.9.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.9.0...v5.9.1\n\n[5.9.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.8.4...v5.9.0\n\n[5.8.4]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.8.3...v5.8.4\n\n[5.8.3]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.8.2...v5.8.3\n\n[5.8.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.8.1...v5.8.2\n\n[5.8.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.8.0...v5.8.1\n\n[5.8.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.7.3...v5.8.0\n\n[5.7.3]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.7.2...v5.7.3\n\n[5.7.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.7.1...v5.7.2\n\n[5.7.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.7.0...v5.7.1\n\n[5.7.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.6.4...v5.7.0\n\n[5.6.4]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.6.3...v5.6.4\n\n[5.6.3]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.6.2...v5.6.3\n\n[5.6.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.6.1...v5.6.2\n\n[5.6.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.6.0...v5.6.1\n\n[5.6.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.5.4...v5.6.0\n\n[5.5.4]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.5.3...v5.5.4\n\n[5.5.3]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.5.2...v5.5.3\n\n[5.5.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.5.1...v5.5.2\n\n[5.5.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.5.0...v5.5.1\n\n[5.5.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.4.2...v5.5.0\n\n[5.4.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.4.1...v5.4.2\n\n[5.4.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.4.0...v5.4.1\n\n[5.4.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.3.0...v5.4.0\n\n[5.3.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.2.2...v5.3.0\n\n[5.2.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.2.1...v5.2.2\n\n[5.2.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.2.0...v5.2.1\n\n[5.2.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.1.2...v5.2.0\n\n[5.1.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.1.1...v5.1.2\n\n[5.1.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.1.0...v5.1.1\n\n[5.1.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.0.4...v5.1.0\n\n[5.0.4]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.0.3...v5.0.4\n\n[5.0.3]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.0.2...v5.0.3\n\n[5.0.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.0.1...v5.0.2\n\n[5.0.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v5.0.0...v5.0.1\n\n[5.0.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.10.0...v5.0.0\n\n[4.10.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.9.0...v4.10.0\n\n[4.9.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.8.4...v4.9.0\n\n[4.8.4]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.8.3...v4.8.4\n\n[4.8.3]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.8.2...v4.8.3\n\n[4.8.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.8.1...v4.8.2\n\n[4.8.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.8.0...v4.8.1\n\n[4.8.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.7.3...v4.8.0\n\n[4.7.3]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.7.2...v4.7.3\n\n[4.7.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.7.1...v4.7.2\n\n[4.7.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.7.0...v4.7.1\n\n[4.7.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.6.1...v4.7.0\n\n[4.6.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.6.0...v4.6.1\n\n[4.6.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.5.5...v4.6.0\n\n[4.5.5]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.5.4...v4.5.5\n\n[4.5.4]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.5.3...v4.5.4\n\n[4.5.3]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.5.2...v4.5.3\n\n[4.5.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.5.1...v4.5.2\n\n[4.5.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.5.0...v4.5.1\n\n[4.5.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.4.1...v4.5.0\n\n[4.4.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.4.0...v4.4.1\n\n[4.4.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.3.3...v4.4.0\n\n[4.3.3]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.3.2...v4.3.3\n\n[4.3.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.3.1...v4.3.2\n\n[4.3.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.3.0...v4.3.1\n\n[4.3.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.2.0...v4.3.0\n\n[4.2.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.1.3...v4.2.0\n\n[4.1.3]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.1.2...v4.1.3\n\n[4.1.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.1.1...v4.1.2\n\n[4.1.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.1.0...v4.1.1\n\n[4.1.0]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.0.3...v4.1.0\n\n[4.0.3]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.0.2...v4.0.3\n\n[4.0.2]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.0.1...v4.0.2\n\n[4.0.1]: https://github.com/BC-SECURITY/Empire-Sponsors/compare/v4.0.0...v4.0.1\n\n[4.0.0]: https://github.com/BC-SECURITY/Empire-Sponsors/releases/tag/v4.0.0\n", "timestamp": "2025-10-24T22:24:26.832684"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "README.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/README.md", "content": "<div align=\"center\">\n\n![Empire](https://user-images.githubusercontent.com/20302208/70022749-1ad2b080-154a-11ea-9d8c-1b42632fd9f9.jpg)\n[![Donate](https://img.shields.io/badge/Donate-Sponsor-blue?style=plastic&logo=github)](https://github.com/sponsors/BC-SECURITY)\n[![Docs](https://img.shields.io/badge/Wiki-Docs-green?style=plastic&logo=wikipedia)](https://bc-security.gitbook.io/empire-wiki/)\n[![Discord](https://img.shields.io/discord/716165691383873536?style=plastic&logo=discord)](https://discord.gg/P8PZPyf)\n[![Blog](https://img.shields.io/badge/Blog-Read%20me-orange?style=plastic&logo=wordpress)](https://www.bc-security.org/blog)\n[![Twitter URL](https://img.shields.io/twitter/follow/BCSecurity?style=plastic&logo=twitter)](https://twitter.com/BCSecurity)\n[![Twitter URL](https://img.shields.io/twitter/follow/EmpireC2Project?style=plastic&logo=twitter)](https://twitter.com/EmpireC2Project)\n[![YouTube URL](https://img.shields.io/youtube/channel/views/UCIV4xSntF1h1bvFt8SUfzZg?style=plastic&logo=youtube)](https://www.youtube.com/channel/UCIV4xSntF1h1bvFt8SUfzZg)\n[![LinkedIn](https://img.shields.io/badge/Linkedin-blue?style=plastic&logo=linkedin&logoColor=#0A66C2)](https://www.linkedin.com/company/bc-security/)\n\n</div>\n\n# Empire\nEmpire is a post-exploitation and adversary emulation framework that is used to aid Red Teams and Penetration Testers. The Empire server is written in Python 3 and is modular to allow operator flexibility. Empire comes built-in with a client that can be used remotely to access the server. There is also a GUI available for remotely accessing the Empire server, [Starkiller](https://github.com/BC-SECURITY/Starkiller).\n\n### Features\n- Server/Client Architecture for Multiplayer Support\n- Fully encrypted communications\n- HTTP/S, Malleable HTTP, OneDrive, Dropbox, and PHP Listeners\n- Massive library (400+) of supported tools in PowerShell, C#, & Python\n- Donut Integration for shellcode generation\n- Modular plugin interface for custom server features\n- Flexible module interface for adding new tools\n- Integrated obfuscation using [ConfuserEx 2](https://github.com/mkaring/ConfuserEx) & [Invoke-Obfuscation](https://github.com/danielbohannon/Invoke-Obfuscation)\n- In-memory .NET assembly execution\n- Customizable Bypasses\n- JA3/S and JARM Evasion\n- MITRE ATT&CK Integration\n- Integrated Roslyn compiler (Thanks to [Covenant](https://github.com/cobbr/Covenant))\n- Docker, Kali, ParrotOS, Ubuntu 20.04/22.04, and Debian 10/11/12 Install Support\n\n### Agents\n- PowerShell\n- Python 3\n- C#\n- IronPython 3\n- Go\n\n### Modules\n- [Assembly Execution](https://github.com/BC-SECURITY/Empire/blob/master/empire/server/data/module_source/code_execution/Invoke-Assembly.ps1)\n- [BOF Execution](https://github.com/airbus-cert/Invoke-Bof)\n- [Mimikatz](https://github.com/gentilkiwi/mimikatz)\n- [Seatbelt](https://github.com/GhostPack/Seatbelt)\n- [Rubeus](https://github.com/GhostPack/Rubeus)\n- [SharpSploit](https://github.com/cobbr/SharpSploit)\n- [Certify](https://github.com/GhostPack/Certify)\n- [ProcessInjection](https://github.com/3xpl01tc0d3r/ProcessInjection)\n- And Many More\n\n## Sponsors\n<div align=\"center\">\n\n[<img src=\"https://github.com/user-attachments/assets/604fbb97-4641-4a15-a6ba-039f67694f15\" width=\"200\"/>](https://www.route4me.com//)\n\n\n[<img src=\"https://github.com/user-attachments/assets/8685f8de-ad66-46d3-8751-8f2bdddc4ac1\" width=\"100\"/>](https://www.instagram.com/purpl3_cult/)\n</div>\n\n## Release Notes\n\nPlease see our [Releases](https://github.com/BC-SECURITY/Empire/releases) or [Changelog](/CHANGELOG.md) page for detailed release notes.\n\n###  Quickstart\nWhen cloning this repository, you will need to recurse submodules.\n```sh\ngit clone --recursive https://github.com/BC-SECURITY/Empire.git\n```\n\nCheck out the [Installation Page](https://bc-security.gitbook.io/empire-wiki/quickstart/installation) for install instructions.\n\nNote: The `main` branch is a reflection of the latest changes and may not always be stable.\nAfter cloning the repo, you can checkout the latest stable release by running the `setup/checkout-latest-tag.sh` script.\n```bash\ngit clone --recursive https://github.com/BC-SECURITY/Empire.git\ncd Empire\n./setup/checkout-latest-tag.sh\n./ps-empire install -y\n```\n\nIf you are using the sponsors version of Empire, it will pull the sponsors version of Starkiller.\nBecause these are private repositories, you need to have ssh credentials configured for GitHub.\nInstructions can be found [here](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh).\n\n#### Server\n\n```bash\n# Start Server\n./ps-empire server\n\n# Help\n./ps-empire server -h\n```\n\nCheck out the [Empire Docs](https://bc-security.gitbook.io/empire-wiki/) for more instructions on installing and using with Empire.\nFor a complete list of changes, see the [changelog](./changelog).\n\n## Starkiller\n<div align=\"center\"><img width=\"125\" src=\"https://user-images.githubusercontent.com/20302208/208271792-91973457-2d6c-4080-8625-0f9eebed0a82.png\"></div>\n\n[Starkiller](https://github.com/BC-SECURITY/Starkiller) is a web application GUI for PowerShell Empire that interfaces remotely with Empire via its API.\nStarkiller can be ran as a replacement for the Empire client or in a mixed environment with Starkiller and Empire clients.\nAs of 5.0, Starkiller is packaged in Empire as a git submodule and doesn't require any additional setup.\n\n## Contribution Rules\nSee [Contributing](./.github/CONTRIBUTING.md)\n\n## Contributors\nA special thanks to the following contributors for their help with Empire:\n\n[@harmj0y](https://twitter.com/harmj0y)\n[@sixdub](https://twitter.com/sixdub)\n[@enigma0x3](https://twitter.com/enigma0x3)\n[@rvrsh3ll](https://twitter.com/424f424f)\n[@killswitch_gui](https://twitter.com/killswitch_gui)\n[@xorrior](https://twitter.com/xorrior)\n[@Cx01N](https://twitter.com/Cx01N_)\n[@Hubbl3](https://twitter.com/_Hubbl3)\n[@Vinnybod](https://twitter.com/_vinnybod)\n\n## Official Discord Channel\nJoin us in [our Discord](https://discord.gg/P8PZPyf) with any comments, questions, concerns, or problems!\n\n<p align=\"center\">\n<a href=\"https://discord.gg/P8PZPyf\">\n<img src=\"https://discordapp.com/api/guilds/716165691383873536/widget.png?style=banner3\"/>\n</p>\n", "timestamp": "2025-10-24T22:24:27.844778"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/README.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/README.md", "content": "# Empire Command & Control\nEmpire is a powerful post-exploitation and adversary emulation framework designed to aid Red Teams and Penetration Testers.\nBuilt with flexibility and modularity in mind, Empire enables security professionals to conduct sophisticated operations with ease.\n\nThe Empire server is written in Python 3, providing a robust and extensible backend for managing compromised systems.\nOperators can interact with the server using Starkiller, a graphical user interface (GUI) that enhances usability and management.\n\n## Key Features\n- [x] **Server/Client Architecture** – Supports multiplayer operations with remote client access.\n- [x] **Multi-Client Support** – Choose between a GUI (Starkiller) or command-line interface.\n- [x] **Fully Encrypted Communications** – Ensures secure C2 channels\n- [x] **Diverse Listener Support** – Communicate over HTTP/S, Malleable HTTP, and PHP.\n- [x] **Extensive Module Library** – Over 400 tools in PowerShell, C#, and Python for post-exploitation and lateral movement.\n- [x] **Donut Integration** – Generate shellcode for execution.\n- [x] **Modular Plugin Interface** – Extend Empire with custom server features.\n- [x] **Flexible Module Framework** – Easily add new capabilities.\n- [x] **Advanced Obfuscation** – Integrated [ConfuserEx 2](https://github.com/mkaring/ConfuserEx) and [Invoke-Obfuscation](https://github.com/danielbohannon/Invoke-Obfuscation) for stealth.\n- [x] **In-Memory Execution** – Load and execute .NET assemblies without touching disk.\n- [x] **Customizable Bypasses** – Evade detection using JA3/S and JARM evasion techniques.\n- [x] **MITRE ATT&CK Integration** – Map techniques and tactics directly to the framework.\n- [x] **Built-in Roslyn Compiler** – Compile C# payloads on the fly (thanks to Covenant).\n- [x] **Broad Deployment Support** – Install on Docker, Kali Linux, Ubuntu, and Debian.\n", "timestamp": "2025-10-24T22:24:30.293428"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/SUMMARY.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/SUMMARY.md", "content": "# Table of Contents\n\n* [Empire](README.md)\n* [Quickstart](quickstart/README.md)\n  * [Installation](quickstart/installation.md)\n  * [Server](quickstart/server.md)\n  * [Resetting](quickstart/resetting.md)\n* [Starkiller](starkiller/README.md)\n  * [Introduction](starkiller/introduction.md)\n  * [Agent Tasks](starkiller/agent-tasks.md)\n* [Listeners](listeners/README.md)\n  * [Dropbox](listeners/dropbox.md)\n  * [OneDrive](listeners/onedrive.md)\n  * [HTTP](listeners/http.md)\n  * [Malleable C2](listeners/malleable-c2.md)\n* [Stagers](stagers/README.md)\n  * [multi_generate_agent](stagers/multi_generate_agent.md)\n* [Plugins](plugins/README.md)\n  * [Development](plugins/development/README.md)\n    * [Imports](plugins/development/imports.md)\n    * [Lifecycle Hooks](plugins/development/lifecycle-hooks.md)\n    * [Execution](plugins/development/execution.md)\n    * [Hooks and Filters](plugins/development/hooks-and-filters.md)\n    * [Plugin Tasks](plugins/development/plugin-tasks.md)\n    * [Notifications](plugins/development/notifications.md)\n    * [Database Usage](plugins/development/database-usage.md)\n    * [Settings](plugins/development/settings.md)\n    * [Migration](plugins/development/migration.md)\n* [Modules](modules/README.md)\n    * [Autorun Modules](modules/autorun_modules.md)\n    * [Module Development](modules/module-development/README.md)\n      * [PowerShell Modules](modules/module-development/powershell-modules.md)\n      * [Python Modules](modules/module-development/python-modules.md)\n      * [C# Modules](modules/module-development/c-modules.md)\n      * [BOF Modules](modules/module-development/bof-modules.md)\n* [Agents](agents/README.md)\n  * [Python](agents/python/README.md)\n    * [Main Agent Class](agents/python/mainagentclass.md)\n    * [Stage Class](agents/python/stageclass.md)\n    * [Packet Handler Class](agents/python/packethandlerclass.md)\n    * [Extended Packet Handler Class](agents/python/extendedpackethandlerclass.md)\n  * [Go](agents/go/README.md)\n    * [Main Agent Class](agents/go/mainagentclass.md)\n    * [Packet Handler Class](agents/go/packethandlerclass.md)\n    * [Main.go Template](agents/go/template.md)\n  * [Staging](agents/staging.md)\n* [RESTful API](restful-api/README.md)\n* [Settings](settings/README.md)\n  * [Logging](settings/logging.md)\n  * [Bypasses](settings/bypasses.md)\n  * [IP Filtering](settings/ip-filtering.md)\n", "timestamp": "2025-10-24T22:24:30.418404"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/agents/README.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/agents/README.md", "content": "# Empire Agents Overview\nThis page provides an in-depth overview of the different agents available within Empire, including their capabilities, features, and usage scenarios.\n\n## IronPython Agent\nIronPython brings the Python language to the .NET framework. The IronPython agent leverages this to execute Python scripts using .NET, bypassing restrictions on native Python interpreters. Additional documentation on the agent can be found [here](./python/README.md).\n\n### Features\n- Executes in a .NET context, allowing for unique evasion techniques.\n- Can interface with .NET libraries directly from Python code.\n- Runs Python, C#, and PowerShell taskings.\n\n## Python Agent\nThe Python agent offers cross-platform capabilities for targeting non-Windows systems, such as Linux and macOS. Additional documentation on the agent can be found [here](./python/README.md).\n\n### Features\n- Cross-platform for Linux and macOS.\n\n## Go Agent\nThe Go agent (`Gopire`) is designed for use in environments where Go is advantageous for performance and portability. It is lightweight and suitable for Windows systems. **Currently, the Go agent only supports Windows and the HTTP listener.** Future updates may include cross-platform support.\n\n### Features\n- **Currently only Windows compatible.**\n- Written in Go, providing performance and portability benefits.\n- Can run taskings such as C#, PowerShell, and shell commands.\n- Reflectively loaded to evade detection.\n- **Supports only the HTTP listener.**\n\nAdditional documentation on the agent can be found [here](./go/README.md).\n\n## PowerShell Agent\nThe PowerShell agent is the original agent for Empire.\n\n### Features:\n- Reflectively loads into memory.\n- Can run C# and PowerShell taskings.\n\n## C# Agent\nThe C# agent leverages [Sharpire](https://github.com/BC-SECURITY/Sharpire) as the implant.\n\n### Features\n- Can run C# and PowerShell taskings.\n", "timestamp": "2025-10-24T22:24:30.706658"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/agents/go/README.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/agents/go/README.md", "content": "# Go Agent Overview\n\nThe Go agent (`Gopire`) is a lightweight and portable agent for Empire, designed for environments where performance and portability are critical. It supports tasking execution and communication with the Empire server in a secure and covert manner. **Currently, the Go agent only supports Windows and the HTTP listener**.\n\n## Prerequisites\n\nTo compile the Go agent, the following are required:\n\n- Go 1.17+\n\n## Compilation and Setup\n\nThe Go agent is currently limited to Windows environments. To compile outside the Empire server:\n\n```bash\nGOOS=windows GOARCH=amd64 go build -o gopire_stager.exe main.go\n```\n\n## Features\n- Windows-only support: The Go agent currently only targets Windows environments.\n- Evasion Techniques: Reflectively loaded and does not leave a significant trace on disk.\n- Task Execution: Executes commands and taskings sent from the Empire server.\n- Encryption: Secure communications using AES encryption.\n- Profiles: Supports different communication profiles to evade network detection.\n- HTTP Listener Support: Only supports the HTTP listener for communication with the Empire server.\n", "timestamp": "2025-10-24T22:24:30.983327"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/agents/go/mainagentclass.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/agents/go/mainagentclass.md", "content": "## MainAgent Class\n\nThe `MainAgent` class manages the core functionality of the agent after the staging process. It handles communication with the Empire server, tasking execution, and results reporting.\n\n### Attributes\n\n- **packet_handler**: The `PacketHandler` instance responsible for encrypting/decrypting messages to/from the server.\n- **server**: The base URL of the command and control (C2) server.\n- **session_id**: A unique identifier for the current session.\n- **kill_date**: The date when the agent will terminate itself.\n- **working_hours**: The agent's allowed operation window.\n\n### Methods\n\n#### `run()`\nContinuously checks in with the Empire server for new tasking, executes the commands, and sends back results. This method will run until the `kill_date` is reached or the agent is otherwise terminated.\n\n#### `check_in()`\nCommunicates with the server to check for new tasks.\n\n#### `execute_command(command)`\nExecutes a command on the host system and returns the result.\n\n### Usage Example\n\n```go\nagent := MainAgent{...}\nagent.run()\n```\n", "timestamp": "2025-10-24T22:24:31.096251"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/agents/go/packethandlerclass.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/agents/go/packethandlerclass.md", "content": "# PacketHandler Class\n\nThe `PacketHandler` class manages packet creation, encryption, decryption, and communication between the agent and the Empire server. It handles network communication and ensures the secure transmission of tasking and results.\n\n### Attributes\n\n- **server**: The base URL of the Empire server.\n- **staging_key**: Key used during the staging process for initial secure communication.\n- **aeskey**: The key used to encrypt/decrypt tasking.\n- **sessionID**: Unique session identifier for the agent.\n\n### Methods\n\n#### `buildRoutingPacket()`\nConstructs a packet for secure communication with the Empire server, including encryption.\n\n#### `send_message()`\nSends data to the Empire server, either for tasking or result submission.\n\n#### `process_tasking(data)`\nProcesses a tasking packet received from the server, decrypting it, and executing the task on the agent's system.\n\n### Usage Example\n\n```go\npacketHandler := PacketHandler{...}\npacketHandler.send_message([]byte(\"tasking data\"))\n```\n", "timestamp": "2025-10-24T22:24:31.223576"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/agents/go/template.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/agents/go/template.md", "content": "# MainAgent Class\n\nThe `MainAgent` class manages the core functionality of the agent after the staging process. It handles communication with the Empire server, tasking execution, and results reporting.\n\n## Attributes\n\n- **packet_handler**: The `PacketHandler` instance responsible for encrypting/decrypting messages to/from the server.\n- **server**: The base URL of the command and control (C2) server.\n- **session_id**: A unique identifier for the current session.\n- **kill_date**: The date when the agent will terminate itself.\n- **working_hours**: The agent's allowed operation window.\n\n## Methods\n\n### `run()`\nContinuously checks in with the Empire server for new tasking, executes the commands, and sends back results. This method will run until the `kill_date` is reached or the agent is otherwise terminated.\n\n### `check_in()`\nCommunicates with the server to check for new tasks.\n\n### `execute_command(command)`\nExecutes a command on the host system and returns the result.\n\n## Usage Example\n\n```go\nagent := MainAgent{...}\nagent.run()\n```\n", "timestamp": "2025-10-24T22:24:31.340949"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/agents/python/README.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/agents/python/README.md", "content": "# Python & IronPython Agents\n\nThe agents are built in Python and IronPython to provide flexibility and extensibility for a variety of scenarios and environments.\n\n## Prerequisites\n\n- Python 3.x (for the Python agent)\n- IronPython 3.4+ (for the IronPython agent)\n\n## Dependencies\n\nThe agent incorporates multiple external Python functionalities, sourced via Jinja2 templates:\n\n```python\n{% include 'common/aes.py' %}\n{% include 'common/rc4.py' %}\n{% include 'common/diffiehellman.py' %}\n{% include 'common/get_sysinfo.py' %}\n{% include 'http/comms.py' %}\n```\n\nThese functionalities provide:\n- AES & RC4 Encryption: For encrypted communications.\n- Diffie-Hellman Key Exchange: Secure establishment of a shared secret key.\n- System Information: Gather details about the host system.\n- HTTP Communication Methods: Communication methods tailored for HTTP. (Can be customized with other listener options)\n\n### IronPython Dependencies\nThe IronPython agent will also use custom libraries that are added to lib.zip which include:\n- [SecretSocks](https://github.com/BC-SECURITY/PySecretSOCKS)\n\n## Staging Process\nStaging is the agent's initial phase, where it communicates with the server and prepares for secure interactions. During the staging process initial staging information is provided and used to create a secure communication channel.\n\n```\n+------------+             +------------+             +----------------+            +------------+\n|   Client   |             |    C2      |             |    Stager      |            |   Agent    |\n+------------+             +------------+             +----------------+            +------------+\n       |                          |                          |                            |\n       |                          |                          |                            |\n       |      Request Staging     |                          |                            |\n       |------------------------->|                          |                            |\n       |                          |                          |                            |\n       |                          | Generate Staging Key     |                            |\n       |                          |   & Profile (AES/HMAC)   |                            |\n       |                          |------------------------->|                            |\n       |                          |                          |                            |\n       |   Send Staging Key &    |                          |                             |\n       |        Profile           |                          |                            |\n       |<-------------------------|                          |                            |\n       |                          |                          |                            |\n       |                          |                          |   Decrypt Staging Profile  |\n       |                          |                          |<---------------------------|\n       |                          |                          |                            |\n       |                          |                          | Generate Diffie-Hellman    |\n       |                          |                          |    (AES Session Key)       |\n       |                          |                          |<---------------------------|\n       |                          |                          |                            |\n       |                          |                          |                            |\n       |                          |                          |                            | Decrypt\n       |                          |                          |                            | Tasking\n       |                          |                          |                            | using AES\n       |                          |                          |                            | Session Key\n       |                          |                          |                            |<-------|\n       |                          |                          |                            |\n       |                          |                          |                            | Execute\n       |                          |                          |                            |  Tasks\n       |                          |                          |                            |<-------|\n```\n\n1. Client → C2: The client requests the staging code.\n2. C2: The Command and Control (C2) server generates a staging key and a profile for the client. This staging key is usually encrypted using symmetric encryption like AES and is HMAC protected.\n3. C2 → Client: The server sends the encrypted staging key and profile to the client.\n4. Stager: The stager decrypts the staging profile and initiates a Diffie-Hellman key exchange process. This results in the creation of an AES session key that will be used for future communications.\n5. Agent: When the stager receives tasking, it decrypts the tasking using the AES session key. Then the agent executes the decrypted tasks.\n\nIn this process, multiple encryption schemes are at play:\n- AES/HMAC: Used to encrypt the staging key and ensure its integrity.\n- Diffie-Hellman: Used to securely negotiate an AES session key for encrypted communications between the stager/agent and the C2 server.\n\n## Components\n\n- **[Stage](stageclass.md)**: Handles the initial communication with the C2 server and sets up the main agent for execution.\n\n- **[MainAgent](mainagentclass.md)**: The core of the agent's functionality, it continuously communicates with the server, processes commands, and returns results.\n\n- **[PacketHandler](packethandlerclass.md) & [ExtendedPacketHandler](extendedpackethandlerclass.md)**: Manages the encrypted communication between the agent and the server.\n", "timestamp": "2025-10-24T22:24:31.663410"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/agents/python/extendedpackethandlerclass.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/agents/python/extendedpackethandlerclass.md", "content": "# ExtendedPacketHandler Class\n\n`ExtendedPacketHandler` is a subclass of `PacketHandler`. While `PacketHandler` focuses on managing packet structure and encryption, `ExtendedPacketHandler` extends this functionality by introducing specific methods to interact with the command and control server using HTTP requests. It integrates communication profiles to make these interactions customizable.\n\n## Attributes\nThe attributes for `ExtendedPacketHandler` depend on the agent's communication profile, but can look similar to below for an HTTP listener.\n- **headers**: The HTTP headers to use in requests. Derived from the agent's communication profile.\n- **taskURIs**: The list of potential URI endpoints for tasking. Randomly sampled to vary the request patterns.\n- **server**: The base URL of the command and control server.\n\n## Methods\n\n### `post_message(uri, data)`\n\nSends a POST request to the specified `uri` with the provided `data`, using the communication profile's headers. Returns the server's response.\n\n### `send_results_for_child(received_data)`\n\nForwards tasking results to the control server for SMB agents. It uses a random taskURI and sets a session cookie in the headers based on `received_data`.\n\n### `send_get_tasking_for_child(received_data)`\n\nForwards the get-tasking request to the control server for SMB agents, with data decoded from `received_data`.\n\n### `send_staging_for_child(received_data, hop_name)`\n\nForwards the staging request to the control server using a specific URI (`/login/process.php`) for SMB agents. Additionally, it sets the 'Hop-Name' in the headers.\n\n### `send_message(packets=None)`\n\nIf `packets` is not provided, it constructs a GET request to fetch tasking from the control server. If `packets` is provided, it constructs a POST request to send data to the server. It chooses a random taskURI for the request and manages error handling for server communication issues.\n\n## Usage Example\n\nTo use `ExtendedPacketHandler`, you need to instantiate it with the right parameters, including the agent instance, staging key, session ID, and the communication profile details (headers, taskURIs, server).\n\n```python\nhandler = ExtendedPacketHandler(agent_instance, \"sample_staging_key\", \"sample_session_id\", headers, server, taskURIs)\nresponse = handler.post_message(\"/some/endpoint\", \"some_data\")\n```\n", "timestamp": "2025-10-24T22:24:31.771834"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/agents/python/mainagentclass.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/agents/python/mainagentclass.md", "content": "## MainAgent Class\n\nThe `MainAgent` class represents the core functionality of the agent after the initial staging process. It handles tasking, command execution, results posting, and overall agent lifecycle management.\n\n### Attributes\n\n- **packet_handler**: An instance of a packet handler class, such as `ExtendedPacketHandler`, which facilitates communication with the command and control server.\n- **profile**: The communication profile string, inherited from the staging process, that determines the agent's network signatures.\n- **server**: The base URL of the command and control server.\n- **session_id**: A unique identifier for the agent's session.\n- **kill_date**: The date upon which the agent will automatically cease operations.\n- **working_hours**: A window of time during which the agent is allowed to operate.\n\n### Methods\n\n#### `check_in()`\n\nCommunicates with the command and control server to check for any new tasking or commands that should be executed.\n\n#### `process_packet(packet_type, data, result_id)`\n\nProcesses an individual packet of data, potentially executing a command, and then returning the result. The specific behavior is determined by the `packet_type`.\n\n#### `execute_command(command)`\n\nExecutes a given command on the host system, capturing any output or errors, and then returning the result.\n\n#### `send_results(result)`\n\nPackages up the result of a command and sends it to the command and control server using the `packet_handler`.\n\n#### `run()`\n\nThe main loop of the agent, which continually checks in with the server for new commands, executes them, and returns results. This loop will typically continue until the `kill_date` is reached or another termination condition is met.\n\n### Usage Example\n\nTo use the `MainAgent` class, it's typically instantiated within the `Stage` class after the initial staging process:\n\n```python\nagent = MainAgent(packet_handler=packetHandlerInstance, profile=profile, server=server, session_id=session_id, kill_date=kill_date, working_hours=working_hours)\nagent.run()\n```\n", "timestamp": "2025-10-24T22:24:31.884144"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/agents/python/packethandlerclass.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/agents/python/packethandlerclass.md", "content": "# PacketHandler Class\n\nThe `PacketHandler` class is responsible for creating, parsing, and processing packets for agent-server communication. This includes encrypting/decrypting packets, extracting metadata, and routing tasking.\n\n## Attributes\n\n- **agent**: An instance of the main agent.\n- **key**: Encryption key for the current session.\n- **staging_key**: Key used during the staging process.\n- **session_id**: Unique identifier for the current session.\n- **missedCheckins**: Counter for failed check-ins.\n- **language_list**: Dictionary linking programming languages to unique IDs.\n- **meta**: Defines metadata types for packets.\n- **additional**: Empty dictionary, can be populated with additional metadata.\n\n## Methods\n\n### `rc4(key, data)`\n\nEncrypts or decrypts the input `data` with the given `key` using the RC4 algorithm.\n\n### `parse_routing_packet(staging_key, data)`\n\nParses the encrypted agent data from a routing packet, which includes session ID, language, metadata type, and the encrypted data. The function returns a dictionary with session IDs as keys and tuples (language, metadata, additional data, encrypted data) as values.\n\n### `build_routing_packet(staging_key, session_id, meta, additional, enc_data)`\n\nBuilds a packet for agent communication, including a unique session ID, metadata, and encrypted data.\n\n### `decode_routing_packet(data)`\n\nParses all routing packets and processes packets specific to the agent's session ID.\n\n### `build_response_packet(tasking_id, packet_data, result_id)`\n\nConstructs a task packet for the agent, which includes packet type, task ID, and the actual data.\n\n### `parse_task_packet(packet, offset)`\n\nParses a packet to extract various details such as packet type, task ID, and data. Returns a tuple with all the extracted details.\n\n### `process_tasking(data)`\n\nProcesses an encrypted packet by decrypting it, extracting the packets, and directing the agent to execute them.\n\n### `process_job_tasking(result)`\n\nProcesses job data packets, mainly sending results back to the Command & Control server.\n", "timestamp": "2025-10-24T22:24:31.997938"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/agents/python/stageclass.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/agents/python/stageclass.md", "content": "## Stage Class\n\nThe `Stage` class is responsible for managing the agent's initial communication with the command and control server, including the setup of encryption keys and system information exchange. It acts as the bootstrap mechanism for the agent, setting up all necessary configurations for secure and covert operations.\n\n### Attributes\n\n- **staging_key**: A pre-shared key used for initial secure communications during the staging process.\n- **profile**: The communication profile string that defines how the agent should communicate (headers, user-agents, etc.).\n- **server**: The base URL of the command and control server.\n- **kill_date**: The date on which the agent will automatically cease operations.\n- **working_hours**: A time window during which the agent is allowed to operate.\n- **session_id**: A randomly generated session identifier for the agent.\n- **key**: The encryption key that will be derived from the Diffie-Hellman key exchange.\n- **headers**: The HTTP headers that the agent will use, derived from the communication profile.\n- **packet_handler**: An instance of the packet handler (likely `ExtendedPacketHandler`) which will handle the packet-level operations like encryption, routing, etc.\n- **taskURIs**: A list of potential URIs the agent can use to fetch tasking or communicate results.\n\n## Dependencies\n\nThe agent incorporates multiple external Python functionalities, sourced via Jinja2 templates:\n\n```python\n{% include 'common/aes.py' %}\n{% include 'common/rc4.py' %}\n{% include 'common/diffiehellman.py' %}\n{% include 'common/get_sysinfo.py' %}\n{% include 'http/comms.py' %}\n```\n\nThese functionalities provide:\n- AES & RC4 Encryption: For encrypted communications.\n- Diffie-Hellman Key Exchange: Secure establishment of a shared secret key.\n- System Information: Gather details about the host system.\n- HTTP Communication Methods: Communication methods tailored for HTTP. (Can be customized with other listener options)\n\n## Staging Process\nStaging is the agent's initial phase, where it communicates with the server and prepares for secure interactions. During the staging process initial staging information is provided and used to create a secure communication channel. This information is provided through a jinja profile such as:\n\n```python\nself.staging_key = b'{{ staging_key }}'\nself.profile = '{{ profile }}'\nself.server = '{{ host }}'\nself.kill_date = '{{ kill_date }}'\nself.working_hours = '{{ working_hours }}'\n```\n\n### Methods\n\n#### `generate_session_id()`\n\nGenerates a random session identifier for the agent. This ensures each agent instance has a unique identifier during its operation.\n\n#### `initialize_headers(profile)`\n\nParses the communication profile string to extract and set up the HTTP headers for the agent.\n\n#### `execute()`\n\nThe main method responsible for:\n\n1. Initiating the Diffie-Hellman key exchange with the server.\n2. Sending system information to the server.\n3. Decrypting the agent code received from the server.\n4. Executing the agent code and initializing the main agent operations.\n\n### Usage Example\n\nTo use the `Stage` class, instantiate it and then call the `execute` method. This will initiate the staging process:\n\n```python\nstager = Stage()\nstager.execute()\n```\n", "timestamp": "2025-10-24T22:24:32.110772"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/agents/staging.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/agents/staging.md", "content": "# Empire Staging Process\n\nEmpire uses an [Encrypted Key Exchange](https://en.wikipedia.org/wiki/Encrypted_key_exchange) \\(EKE\\) mechanism to securely establish communications between the control server and agents. In previous versions, the key negotiation was handled using RSA, but the modern implementation has been adapted to support multiple agent types, including PowerShell, C#, Python, IronPython, and Go.\n\nKey points in the staging process:\n1. The PowerShell agent uses RSA-based key exchange.\n2. The C#, Python, IronPython, and Go agents use Diffie-Hellman (DH) key exchange.\n3. A pre-shared key (PSK) is used to encrypt the routing packet with RC4.\n4. Stage 1 involves session key negotiation and establishing an encrypted channel.\n5. Stage 2 delivers the full agent to start beaconing.\n\n## Stage 0 Request (Launcher Execution)\nThe agent initiates communication by making a request to the control server at a predefined URI. The staging key (pre-shared key) is sent with the request.\n\n## Stage 0 Response (Key Negotiation)\nThe server returns a stager script (e.g., stager.ps1 for PowerShell). This stager is case-randomized and RC4-encrypted with the pre-shared key.\n\n## Stage 1: Session Key Exchange\nThe agent generates an RSA key pair (PowerShell) or performs a Diffie-Hellman key exchange (Other Agents).  The encrypted public key is sent to the server.  The server returns the session ID and an AES session key, encrypted for the agent.\n\n# Stage 2: Agent Delivery\nThe agent decrypts the AES session key and gathers system information. This system information is encrypted and sent to the server. The server responds with the full agent, patched with configuration details (e.g., key, beacon delay, routing info). The agent registers and starts beaconing for tasking. This updated process ensures more secure and flexible key exchanges while maintaining strong encryption across multiple agent types.\n\n```mermaid\nsequenceDiagram\n    participant ControlServer as Control Server\n    participant Client as Client (Agent)\n\n    ControlServer->>Client: 1. GET /<stage0>\n    Client-->>ControlServer: 2. Return encrypted stager (PSK + RC4)\n    ControlServer->>Client: 3. Generate Key Pair (RSA or DH). Encrypt and Send Public Key\n    Client-->>ControlServer: 4. Server returns ENCpub(session key). Session ID\n    ControlServer->>Client: 5. Decrypt session key. Send sysinfo encrypted with AES session key\n    Client-->>ControlServer: 6. Server returns full agent. Patched with key, delay, and config\n    Client->>ControlServer: Agent starts beaconing (Polling tasks)\n```\n", "timestamp": "2025-10-24T22:24:32.220673"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/database/README.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/database/README.md", "content": "# Database\n\nBeginning in Empire 5.0, MySQL is the default database. Trying to support multi-user setups and expanding our usage of the database started to reach limitations in SQLite. SQLite is still supported, and we run the full test suite against it, but is not recommended.\n\nFor database configuration see the [Configuration](../quickstart/server.md) section.\n\n## Setup\nThe install script will install MySQL if you install on one of the supported operating systems. If you want to switch between MySQL and SQLite, change the `use` property in the `database` section of the configuration file.\n\nThere is an environment variable `DATABASE_USE` that can be used to overwrite the `database.use` property in `config.yaml`.\n\n# Docker\nThe Docker image still defaults to SQLite. To use MySQL, you can change `config.yaml` or utilize the `DATABASE_USE` enviornment variable. For example `docker run -p 3306:3306 -p 1337:1337 -e DATABASE_USE='mysql' -it bcsecurity/empire:latest`.\nThe Docker image does not contain MySQL, so you will need to run a MySQL container or install MySQL on the host machine.\n", "timestamp": "2025-10-24T22:24:32.524650"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/listeners/README.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/listeners/README.md", "content": "# Listeners\nListeners in Empire are responsible for handling agent connections. They serve as the communication channels between compromised hosts and the Empire server, relaying commands and responses. Listeners can operate over various transport mechanisms such as HTTP, HTTPS, and SMB.\n\nEmpire supports multiple listener types, providing flexibility in how agents communicate based on the environment and operational needs.\n\n## Listener Types\nEmpire offers several listener types designed for different network conditions and evasion techniques:\n\n- **HTTP/HTTPS** – A standard HTTP listener for internet-facing operations supports both standard HTTP and encryptedd HTTPS.\n- **HTTP Malleable** – A customizable HTTP listener that allows beacons to match specific threat profiles.\n- **SMB** – A peer-to-peer listener that works over SMB pipes (**currently only supports IronPython**).\n- **HTTP Hop** – A listener that adds an intermediate hop or redirection server using PHP.\n- **Port Forward** – Enables chaining agents through port forwarding.\n- **HTTP Foreign** – Allows one server to generate stagers and agents for another Empire server.\n", "timestamp": "2025-10-24T22:24:32.822548"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/listeners/dropbox.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/listeners/dropbox.md", "content": "# Dropbox Listener\nThe Dropbox listener has been deprecated due to the use of outdated APIs.\nPrevious documentation can be found at the [BC Security Dropbox Blog Post](https://www.bc-security.org/post/empire-dropbox-c2-listener/).\n", "timestamp": "2025-10-24T22:24:32.946398"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/listeners/http.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/listeners/http.md", "content": "# HTTP Listener\n\nThe HTTP listener in Empire is one of the most commonly used communication channels for agents. It operates over **HTTP and HTTPS**, using **GET and POST** requests to relay data between agents and the Empire server.\n\nBy default, the HTTP listener runs on:\n- **Port 80 for HTTP**\n- **Port 443 for HTTPS**\nHowever, any port can be specified based on operational needs.\n\n## Key Configuration Options\n<div align=\"center\">\n<img src=\"../.gitbook/assets/listeners/http/http_listener_required.png\" width=\"40%\"/>\n<img src=\"../.gitbook/assets/listeners/http/http_listener_optional.png\" width=\"40%\"/>\n</div>\n\n### **Staging Key**\nThe **staging key** is used to negotiate the **session key** between the agent and the server. This ensures a secure communication channel and assigns the agent its **session ID**.\n\n### **Delay & Jitter**\n- **Delay** – The interval (in seconds) at which the agent checks back with the server.\n- **Jitter** – A randomness factor (between **0 and 1**) that modifies the delay to avoid detection.\n\n### **DefaultLostLimit**\nThis setting determines the number of **missed check-ins** before an agent assumes it has lost communication and exits.\n\n### **Default Profile**\nThe **default profile** defines how the agent communicates with the server, including:\n- **Endpoints**\n- **Headers**\n- **User-Agent string**\n\nIt is structured using `|` as a separator between these values.\n\n#### **Example Default Profile**\n```plaintext\n/admin/get.php,/news.php,/login/process.php|Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko\n```\n\n#### Example Control Server Headers\n```plaintext\nServer:Microsoft-IIS/7.5\n```\n\n### JA3 Evasion\nEmpire provides JA3 evasion to help prevent detection by TLS fingerprinting tools. This feature is based on the research published by BC Security:\n[JA3 Signatures and How to Avoid Them](https://bc-security.org/ja3-s-signatures-and-how-to-avoid-them/)\n\n### Optional Fields\nEmpire provides additional settings to customize listener behavior:\n\n- CertPath – Path to an SSL certificate for HTTPS listeners.\n- KillDate – The expiration date when the agent will automatically exit (MM/DD/YYYY).\n- WorkingHours – Defines when the agent will operate (09:00-17:00).\n- Cookie – Custom cookie name used for agent communication.\n- StagerURI – The URI for the stager (must use /download/, e.g., /download/stager.php).\n- UserAgent – Defines the user-agent string used for staging requests (default, none, or other).\n- Proxy – Proxy settings for agent communication.\n- ProxyCreds – Proxy credentials (domain\\username:password).\n\n## Default Response Page\nWhen accessed directly, the HTTP listener returns a response page similar to an IIS7 server:\n\n![](../.gitbook/assets/listeners/http/welcome.png)\n", "timestamp": "2025-10-24T22:24:33.063536"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/listeners/malleable-c2.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/listeners/malleable-c2.md", "content": "# Malleable C2\n\nThe Malleable C2 Listener gives control to operators to customize their beacons to match specific threats. It does this through profiles, which are simple scripts that instruct the listener how to store, interpret, and extract data.\n\n![Malleable profile for Amazon](../.gitbook/assets/image%20%282%29.png)\n\nMalleable C2 is not a new concept, having been employed by Cobalt Strike for several years and is one of the most valuable features for the platform. Profiles allow users to change various settings within a beacon to truly customize its footprint. This post is not going to be a deep dive into Malleable Profiles, since Empire leverages the same profiles used in Cobalt Strike. If you are interested in learning more, we highly encourage checking out [Joe Vest’s post](https://posts.specterops.io/a-deep-dive-into-cobalt-strike-malleable-c2-6660e33b0e0b) or [Cobalt Strike’s Malleable C2 documentation](https://www.cobaltstrike.com/help-malleable-c2).\n\nThis project originated from [Johneiser’s Malleable C2 Parser](https://github.com/johneiser/MalleableC2Parser), which is a Python 2.7 implementation that parses the profile for the listener. Unfortunately, the project was no longer maintained and required a [refactor](https://github.com/BC-SECURITY/MalleableC2Parser) to work with Empire.\n\nThe parser takes the profile and executes the set of transforms that were scripted. The transformation order is extremely important, since both directions have to produce the same result. Currently, Empire can only ingest the Global Options and HTTP/S blocks. So a lot of the new functionality that was added in Cobalt Strike 4.0 will not be ingested. In the future, we hope to incorporate this additional functionality.\n\n![Listener transform functionality from transformation.py](https://i1.wp.com/www.bc-security.org/wp-content/uploads/2020/09/Screenshot_2020-09-06_21-14-54.png?resize=586%2C324&ssl=1)\n\nAs of 6.0 malleable profiles can be easily managed from the malleable profiles tab under **listeners**. Here you can manually enter a profile by clicking on create and pasting in the profile configuration. You can also directly edit profiles by clicking on loaded profile and making changes then hitting **submit**\n\n![](<../.gitbook/assets/listeners/Malleable_C2/malleable_profiles.png>)\n\nLaunching a Malleable C2 Listener can be simply done by selecting http_malleable from the dropdown options when selecting a listener. The info page should look familiar since it uses similar settings as the standard HTTP listener, just with the addition **Profiles** dropdown. Profiles are managed from the malleable tab under listeners:\n\n![](<../.gitbook/assets/listeners/Malleable_C2/malleable_listener.png>)\n\n\nOne of the areas that still needs some improvement is when the listener tries to ingest serialized profiles. Occasionally Empire will successfully start the listener, but the agent will fail to properly stage when using a launcher. We are always trying to improve Empire functionality, so please [submit any issues](https://github.com/BC-SECURITY/Empire/issues) to our Github, since we heavily rely on users to help us identify areas for improvement.\n\nWe have also set up a [repository](https://github.com/BC-SECURITY/Malleable-C2-Profiles) for working profiles, which we will continue to update as new threat profiles are generated. This is also an opportunity for everyone to submit and share their profiles \\(assuming they work with Empire\\).\n\n![Code excerpt from http\\_malleable.py](https://i1.wp.com/www.bc-security.org/wp-content/uploads/2020/09/Screenshot_2020-09-06_21-15-26.png?resize=944%2C523&ssl=1)\n\nSimilar to Cobalt Strike, Empire can only load a single profile per instance \\(for now\\). You can always spin up another instance of Empire if you want to run multiple Malleable Listeners at once. Otherwise, other listener types will still work while you have an active Malleable C2 Listener.\n", "timestamp": "2025-10-24T22:24:33.173153"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/listeners/onedrive.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/listeners/onedrive.md", "content": "# OneDrive Listener\nThe OneDrive listener has been deprecated due to the use of outdated APIs.\nPrevious documentation can be found at the [BC Security OneDrive Blog Post](https://www.bc-security.org/post/using-the-onedrive-listener-in-empire-3-1-3/).\n", "timestamp": "2025-10-24T22:24:33.282352"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/modules/README.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/modules/README.md", "content": "# Empire Modules\nEmpire provides a flexible framework for executing various types of scripts and binaries, including PowerShell, Python, .NET assemblies, and beacon object files (BOF). This section outlines how modules work, including YAML configuration, dynamic options, and new ways to run external scripts without the need for a dedicated module.\n\n## What Are Modules?\nModules in Empire are reusable pieces of code that allow operators to perform tasks like data collection, lateral movement, or command execution. These modules can be customized and executed using YAML configuration files. Empire modules use various programming languages, including PowerShell, Python, and C#.\n\n## Running External Scripts without a Dedicated Module\nYou can import and execute external scripts such as PowerShell or Python without the need to create a fully dedicated module. This is useful for quick operations where you want to load and execute a script on the fly.\n\n### Examples\n\n\n{% tab title=\"PowerShell\" %}\nImporting and Executing PowerShell Scripts\n\n![](../.gitbook/assets/modules/powershell_invoke_script.gif)\n{% endtab %}\n\n{% tab title=\"Python\" %}\nImporting and Executing Python Scripts\n\n![](../.gitbook/assets/modules/python_invoke_script.gif)\n{% endtab %}\n\n{% tab title=\".NET Assembly\" %}\nExample: Running a .NET Assembly\n\n![](../.gitbook/assets/modules/execute_assembly.gif)\n{% endtab %}\n\n{% endtabs %}\n", "timestamp": "2025-10-24T22:24:33.569066"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/modules/autorun_modules.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/modules/autorun_modules.md", "content": "# AutoRun Modules\n\nThe **Autorun** feature allows users to predefine modules to automatically run when an agent becomes active.\n\n{% embed url=\"https://www.youtube.com/embed/xTRhLt4DO5o?autoplay=1\" %}\n\n## Steps to Configure AutoRun\n\n{% stepper %}\n{% step %}\n### Navigate to Listeners\n   - From the sidebar, click on the \"Listeners\" icon.\n   - You will be taken to the Listeners list screen, where all the active listeners are shown.\n{% endstep %}\n\n{% step %}\n### Select a Listener\n   - Choose the listener you want to configure from the list. If no listener exists, create one by clicking on the \"Create\" button at the top right.\n{% endstep %}\n\n{% step %}\n### Access Autorun\n   - Once inside the listener’s details, you’ll notice an option for the **AutoRun Modules** as a tab.\n   - Click on this tab to configure what should happen automatically when the listener is engaged.\n{% endstep %}\n\n{% step %}\n### Choose Modules for AutoRun\n   - In the Autorun screen, you can select specific modules that will automatically run whenever an agent first connects.\n{% endstep %}\n\n{% step %}\n### Confirm Selection\n   - After selecting your desired modules, confirm your choices. Empire will automatically link these modules to the listener.\n{% endstep %}\n\n{% step %}\n### Running\n   - When the listener is activated, the selected modules will now automatically run on any new agent.\n   - You can view the tasks in real time from Starkiller.\n{% endstep %}\n{% endstepper %}\n\n## Use Cases for AutoRun\n\n- **Automation of Payloads:** Configure a listener to automatically deliver payloads to compromised machines without manual input.\n- **Post-Exploitation Tasks:** Automatically run scripts to escalate privileges, gather system info, or set up persistence as soon as a listener engages.\n- **Environment Monitoring:** Set up monitoring modules to run instantly when an agent calls back to the listener.\n", "timestamp": "2025-10-24T22:24:33.683524"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/modules/module-development/README.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/modules/module-development/README.md", "content": "# Empire Modules\n\nModules are driven by a yaml configuration per module. In most cases, only a yaml is needed to create a module.\n\n{% embed url=\"https://youtu.be/ZS3Rdld_Ebo\" %}\n\n## Basic Structure\nEach module is defined by a set of metadata (like authors, description, and tactics) and options. These options define what values can be set when the module is executed.\n\n```yaml\nname: ExampleModule\nauthors:\n  - name: John Doe\n    handle: '@johndoe'\ndescription: A sample module demonstrating Empire module structure.\ntactics: []\ntechniques:\n  - T1234\nbackground: true\noutput_extension: ps1\nneeds_admin: false\nopsec_safe: true\nlanguage: powershell\nmin_language_version: '2'\ncomments: []\noptions:\n  - name: SampleOption\n    description: An example option.\n    required: true\n    value: 'default_value'\n    strict: true\n```\n\n## Advanced Options\nEmpire modules support advanced configuration for dynamic dependencies between options. For example, one option may depend on the value of another option. This is handled using the `depends_on` field.\n\n### Dynamic Option Dependencies\nThe `depends_on` field allows an option to be displayed or required based on the value of another option. In this example, the `CredID` option only appears if the `Credentials` option is set to `CredID`.\n\n```yaml\noptions:\n  - name: Credentials\n    description: Manually enter credentials or credential ID.\n    required: true\n    value: 'Manual'\n    strict: true\n    internal: true\n    suggested_values:\n      - Manual\n      - CredID\n  - name: CredID\n    description: Use CredID from the store.\n    required: false\n    value: ''\n    depends_on:\n      - name: Credentials\n        values: ['CredID']\n```\n\n## Internal Options\nThe internal field is used to manage dynamic options in Empire modules, such as top-tier switches that control which options are displayed to the user. These options are internal to Empire’s logic and are not used during the execution of the module itself. Instead, they help control the visibility and behavior of other options.\n\nFor example, an internal option can act as a switch to determine whether certain options appear based on the user’s selection.\n\n```yaml\n- name: Credentials\n  description: Manually enter credentials or credential ID.\n  required: true\n  value: 'Manual'\n  strict: true\n  internal: true\n  suggested_values:\n    - Manual\n    - CredID\n```\n\nIn this example, Credentials is an internal option that controls whether CredID or Password is shown to the user, depending on its value. This logic helps ensure the correct options are visible and modifiable based on the selected configurations.\n\n```yaml\noptions:\n  - name: Credentials\n    description: Manually enter credentials or credential ID.\n    required: true\n    value: 'Manual'\n    strict: true\n    internal: true\n    suggested_values:\n      - Manual\n      - CredID\n  - name: CredID\n    description: CredID from the store to use.\n    required: false\n    value: ''\n    depends_on:\n      - name: Credentials\n        values: ['CredID']\n  - name: Password\n    description: Password for manual credentials entry.\n    required: false\n    value: ''\n    depends_on:\n      - name: Credentials\n        values: ['Manual']\n```\n", "timestamp": "2025-10-24T22:24:33.959625"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/modules/module-development/bof-modules.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/modules/module-development/bof-modules.md", "content": "# BOF Modules\n\nBOF modules are configured similarly to PowerShell modules with a few key differences:\n- The `script`, `script_path`, and `script_end` fields are no longer used.\n- `bof.x86` and `bof.x64` refer to the path of the beacon object file for each architecture (x86 and x64).\n- `bof.entry_point` is an optional field to define the object file's entry point.\n- An `Architecture` field is required.\n- `format_string` is used to define how data should be passed.\n\n\n### Format String\n| Type | Description | Unpack With (C) |\n|------|-------------|-----------------|\n| **b** | Binary data | `BeaconDataExtract` |\n| **i** | 4-byte integer | `BeaconDataInt` |\n| **s** | 2-byte short integer | `BeaconDataShort` |\n| **z** | Zero-terminated + encoded string | `BeaconDataExtract` |\n| **Z** | Zero-terminated wide-char string (`wchar_t *`) | `BeaconDataExtract` |\n\n\n## Example BOF\n\n```yaml\noptions:\n  - name: Architecture\n    description: Architecture of the beacon_funcs.o to generate with (x64 or x86).\n    required: true\n    value: x64\n    strict: true\n    suggested_values:\n      - x64\n      - x86\n  - name: Filepath\n    description: Filepath to search for permissions.\n    required: true\n    value: 'C:\\\\windows\\\\system32\\\\cmd.exe'\n    format: Z\nbof:\n  x86: bof/situational_awareness/cacls.x86.o\n  x64: bof/situational_awareness/cacls.x64.o\n  entry_point: ''\n  format_string: Z\n```\n\nBOF modules also support the `advanced.custom_generate` method of generating the script.\n", "timestamp": "2025-10-24T22:24:34.077172"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/modules/module-development/c-modules.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/modules/module-development/c-modules.md", "content": "# C# Modules\n\nEmpire originally adopted Covenant's YAML format for C# modules but has since forked this into Empire-Compiler, which has gradually evolved away from the original Covenant implementation. These modules are defined in YAML files that specify metadata, options, and the C# code to be executed through the .NET Roslyn compiler.\n\n## Module Structure\n\nA typical C# module YAML has the following structure:\n\n```yaml\nname: ModuleName\nauthors:\n  - name: Author Name\n    handle: AuthorHandle\n    link: https://twitter.com/AuthorHandle\ndescription: Module description\nsoftware: ''\ntactics: [TA0002, TA0005]\ntechniques: [T1620]\nbackground: false\noutput_extension: ''\nneeds_admin: false\nopsec_safe: true\nlanguage: csharp\nmin_language_version: ''\noptions:\n  - name: OptionName\n    description: Option description\n    required: true\n    value: 'Default value'\n    strict: false\n    suggested_values: []\ncsharp:\n  UnsafeCompile: false\n  CompatibleDotNetVersions:\n    - Net35\n    - Net40\n  Code: |\n    using System;\n    using System.IO;\n\n    public static class Program\n    {\n        public static void Main(string[] args)\n        {\n            // Module implementation\n        }\n    }\n  ReferenceSourceLibraries:\n    - Name: LibraryName\n      Description: Library description\n      Location: LibraryPath\n      Language: CSharp\n      CompatibleDotNetVersions:\n        - Net35\n        - Net40\n      ReferenceAssemblies:\n        - Name: Assembly.dll\n          Location: net35\\Assembly.dll\n          DotNetVersion: Net35\n        - Name: AnotherAssembly.dll\n          Location: net40\\AnotherAssembly.dll\n          DotNetVersion: Net40\n      EmbeddedResources: []\n  ReferenceAssemblies: []\n  EmbeddedResources: []\n```\n\nEvery section except for the 'csharp' section are the same as the other module languages.\n\nThe csharp section is what was derived from the Covenant yamls. The `csharp` section contains the actual C# code and compilation settings, including whether to allow unsafe code, which .NET Framework versions are compatible, and references to external libraries and resources.\n\n## Advanced Generation\n\n**custom\\_generate:** For complex modules that require custom code that accesses Empire logic, such as lateral movement modules dynamically generating a listener launcher, a custom \"generate\" function can be used. To tell Empire to utilize the custom generate function, set `advanced.custom_generate: true`\n\nAdditional information about custom\\__generate can be found under the_ [_PowerShell Modules custom\\_generate_](https://bc-security.gitbook.io/empire-wiki/module-development/PowerShell-Modules#advanced)_._\n", "timestamp": "2025-10-24T22:24:34.193875"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/modules/module-development/powershell-modules.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/modules/module-development/powershell-modules.md", "content": "# PowerShell Modules\n\nThe [powershell\\_template.yaml](https://github.com/BC-SECURITY/Empire/blob/master/empire/server/modules/powershell\\_template.py) will help guide through the fields needed for writing a simple module. Of course, not every module will fit the simplest case. There are advanced options that we will discuss below.\n\nThe property `options` is a list of the options that can be set for the module at execution time. All modules must contain an option called **Agent**. Additional options go in the options list after the **Agent** argument. If the argument is required for execution, set `required: true`, and if a default value is warranted, set `value`. The [prompt module](https://github.com/BC-SECURITY/Empire/blob/master/empire/server/modules/powershell/collection/prompt.yaml) has an example of this.\n\nWhen Empire boots up, it loads all module yamls found in the modules directory. If there are any missing fields or misconfigurations, the module won't load and a warning will print to the console.\n\n## Defining the script\n\n**script:** For most scripts, simply pasting the script into the yaml is good enough.\n\n```yaml\nscript: |\n  Function Invoke-Template {\n\n  }\n```\n\n**script\\_path:** For longer scripts, or scripts that are shared between multiple modules, it is recommended to put the text file into the `empire/server/data/module_source` directory and reference it like so:\n\n```yaml\nscript_path: 'empire/server/data/module_source/credentials/Invoke-Mimikatz.ps1'\n```\n\nThe above example comes from the [logonpasswords module.](https://github.com/BC-SECURITY/Empire/blob/master/empire/server/modules/powershell/credentials/mimikatz/logonpasswords.yaml)\n\n**script\\_end:** In most cases the `script_end` will simply be a call to to the powershell function with a mustache template variable called `$PARAMS`. `{{ PARAMS }}` is where Empire will insert the formatted options.\n\n```yaml\nscript_end: Invoke-Function {{ PARAMS }}\n```\n\nThere are functions that require the script\\_end to be customized a bit further. For example: the one found in [Invoke-Kerberoast](https://github.com/BC-SECURITY/Empire/blob/master/empire/server/modules/powershell/credentials/invoke\\_kerberoast.yaml)\n\n```yaml\nscript_end: Invoke-Kerberoast {{ PARAMS }} | fl | {{ OUTPUT_FUNCTION }} | %{$_ + \"`n\"};\"`nInvoke-Kerberoast completed!\n```\n\n## Advanced\n\n### **Custom Generate**\n\n**custom\\_generate:** For complex modules that require custom code that accesses Empire logic, such as lateral movement modules dynamically generating a listener launcher, a custom \"generate\" function can be used. To tell Empire to utilize the custom generate function, set `advanced.custom_generate: true`\n\n```yaml\nadvanced:\n  custom_generate: true\n```\n\nThe python file should share the same name as the yaml file. For example `Invoke-Assembly.yaml` and `Invoke-Assembly.py` The generate function is a static function that gets passed 5 parameters:\n\n* main\\_menu: The main\\_menu object that gives the module access to listeners, stagers, and just about everything else it might need\n* module: The module, loaded from the yaml. In case we need to check properties like `opsec_safe`, `background`, etc.\n* params: The execution parameters. At this point, Empire has already validated the parameters provided are the correct parameters for this module, and that the required parameters are there.\n* obfuscate: Whether to obfuscate the code\n* obfuscation\\_command: The command to use to obfuscate the code\n\nIt returns the generated code to be run by the agent as a string.\n\nThe generate function **should** treat these parameters as read only, to not cause side effects.\n\n```python\nclass Module(object):\n    @staticmethod\n    def generate(\n        main_menu: MainMenu,\n        module: EmpireModule,\n        params: dict,\n        obfuscate: bool = False,\n        obfuscation_command: str = \"\",\n    ):\n```\n\nExamples of modules that use this custom generate function:\n\n* [bypassuac\\_eventvwr](https://github.com/BC-SECURITY/Empire/blob/master/empire/server/modules/powershell/privesc/bypassuac\\_eventvwr.py)\n* [invoke\\_assembly](https://github.com/BC-SECURITY/Empire/blob/master/empire/server/modules/powershell/code\\_execution/invoke\\_assembly.py)\n* [seatbelt](https://github.com/BC-SECURITY/Empire/blob/master/empire/server/modules/powershell/situational\\_awareness/host/seatbelt.py)\n\n#### Error Handling\n\nIf an error occurs during the execution of the generate function and it goes unchecked,\nthe client will receive a 500 error.\n\nThere are two Exceptions that can be raised by the generate function:\n**ModuleValidationException**: This exception should be raised if the module fails validation. This will return a 400 error to the client with the error message.\n**ModuleExecutionException**: This exception should be raised if the module fails execution. This will return a 500 error to the client with the error message.\n\n```python\nraise ModuleValidationException(\"Error Message\")\nraise ModuleExecutionException(\"Error Message\")\n```\n\n##### Deprecated\n\nPreviously, it was recommended that the generate function return a tuple of the script and the error.\n`handle_error_message` was provided as a helper function to handle this tuple.\n\nThis is no longer recommended, but is still supported. Please migrate away from the tuple return type\nto raising exceptions. The tuple return type will be removed in a future major release.\n\n#### Functions\n\n`get_module_source` is used pull the script from the yaml file defined in **script\\_path**. Once the script has been loaded, it will determine if obfuscation is enabled and obfuscate it.\n\n`finialize_module` will combine the `script` and `script_end` into a single script and then will apply obfuscation, if it is enabled.\n\n\n#### Decorators\n\n`@auto_get_source` is a decorator that will automatically call `get_module_source` and pass the script to the decorated function.\nTo use this decorator, the function must have a `script` kwarg and the `script_path` must be set in the yaml config.\n\n```python\n@staticmethod\n@auto_get_source\ndef generate(\n    main_menu: MainMenu,\n    module: EmpireModule,\n    params: dict,\n    obfuscate: bool = False,\n    obfuscation_command: str = \"\",\n    script: str = \"\",\n):\n    # do stuff\n    ...\n\n# The above is the equivalent of:\n@staticmethod\ndef generate(\n    main_menu: MainMenu,\n    module: EmpireModule,\n    params: dict,\n    obfuscate: bool = False,\n    obfuscation_command: str = \"\",\n):\n    # read in the common module source code\n    script, err = main_menu.modulesv2.get_module_source(\n        module_name=module.script_path,\n        obfuscate=obfuscate,\n        obfuscate_command=obfuscation_command,\n    )\n\n    if err:\n        return handle_error_message(err)\n\n    # do stuff\n    ...\n```\n\n`@auto_finalize` is a decorator that will automatically call `finalize_module` on the returned script from the decorated function.\n\nTo use this decorator, the function must not utilize the deprecated tuple return type or the\n`handle_error_message` function. First migrate the function to raise exceptions before using this decorator.\n\n```python\n@staticmethod\n@auto_finalize\ndef generate(\n    main_menu: MainMenu,\n    module: EmpireModule,\n    params: dict,\n    obfuscate: bool = False,\n    obfuscation_command: str = \"\",\n):\n    # Do stuff\n\n    return script, script_end\n\n# The above is the equivalent of:\n@staticmethod\ndef generate(\n    main_menu: MainMenu,\n    module: EmpireModule,\n    params: dict,\n    obfuscate: bool = False,\n    obfuscation_command: str = \"\",\n):\n    # Do stuff\n\n    script, script_end = main_menu.modulesv2.finalize_module(\n        script=script,\n        script_end=script_end,\n        obfuscate=obfuscate,\n        obfuscate_command=obfuscation_command,\n    )\n\n    return script\n```\n\n\n\n### String Formatting\n\n**option\\_format\\_string:** This tells Empire how to format all of the options before injecting them into the `script_end`. In most cases, the default option format string will be fine: `-{{ KEY }} \"{{ VALUE }}\"`.\n\n**option\\_format\\_string\\_boolean:** This tells Empire how to format boolean parameters when `True`. In most cases, the default format string will be fine: `-{{ KEY }}`.\n\n[Rubeus](https://github.com/BC-SECURITY/Empire/blob/master/empire/server/modules/powershell/credentials/rubeus.yaml) is an example of a module that overwrites the option\\_format\\_string, since it only has one parameter `Command` and deviates from the default:\n\n```yaml\noptions:\n  - name: Agent\n    description: Agent to run module on.\n    required: true\n    value: ''\n  - name: Command\n    description: Use available Rubeus commands as a one-liner.\n    required: false\n    value: ''\nscript_path: 'empire/server/data/module_source/credentials/Invoke-Rubeus.ps1'\nscript_end: \"Invoke-Rubeus -Command \\\"{{ PARAMS }}\\\"\"\nadvanced:\n  option_format_string: \"{{ VALUE }}\"\n  option_format_string_boolean: \"\"\n```\n\n**name\\_in\\_code**: There may be times when you want the display name for an option in Starkiller/CLI to be different from how it looks in the module's code. For this, you can use `name_in_code` such as in the [sharpsecdump module](https://github.com/BC-SECURITY/Empire/blob/master/empire/server/modules/powershell/credentials/sharpsecdump.yaml)\n\n```yaml\n  - name: Username\n    name_in_code: u\n    description: Username to use, if you want to use alternate credentials to run. Must\n      use with -p and -d flags, Misc)\n    required: false\n    value: ''\n  - name: Password\n    name_in_code: p\n    description: Plaintext password to use, if you want to use alternate credentials\n      to run. Must use with -u and -d flags\n    required: false\n    value: ''\n```\n\n**suggested\\_values**: A list of suggested values can be provided for an option. These values will be available in the CLI and Starkiller as autocomplete values.\n\n**strict**: If true, the option validator will check that the value chosen matches a value from the suggested values list.\n\n**type**: If a type is defined, the API will automatically validate the option value against the type. The following types are supported:\n* bool\n* int\n* float\n* str\n* file\n\nA 'file' option type should be an integer that corresponds to the `download` id of a file already on the empire server. The API will automatically validate that the file exists. If a `custom_generate` function is used, the whole database object for the file will be passed to the function.\n\nNote: Starkiller will automatically give file options with a dropdown or upload. File options have not yet been implemented in the client. It is recommended to use Starkiller.\n\n**OUTPUT\\_FUNCTION**: Some PowerShell modules have an option named `OutputFunction` that converts the output to json, xml, etc. The `OutputFunction` option can be inserted anywher in the `script` and `script_end` by using `{{ OUTPUT_FUNCTION }}`.\n\n* An example of this in a yaml can be seen in [sherlock](https://github.com/BC-SECURITY/Empire/blob/master/empire/server/modules/powershell/privesc/sherlock.yaml).\n* If a module uses a `custom_generate` function, it needs to perform this substitution on its own.\n", "timestamp": "2025-10-24T22:24:34.305634"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/modules/module-development/python-modules.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/modules/module-development/python-modules.md", "content": "# Python Modules\n\nPython modules are not much different from PowerShell modules in terms of the yaml schema. The differences for Python come in with the `script`, `script_path`, `script_end`, and option formatters.\n\nA python script doesn't have an `option_format_string`. Instead, options are injected into the script directly using mustache templating. An example of this is the python module [say](https://github.com/BC-SECURITY/Empire/blob/master/empire/server/modules/python/trollsploit/osx/say.yaml).\n\n```yaml\noptions:\n  - name: Agent\n    description: Agent to run module on.\n    required: true\n    value: ''\n  - name: Text\n    description:\n    required: true\n    value: 'The text to speak.'\n  - name: Voice\n    description: The voice to use.\n    required: true\n    value: 'alex'\nscript: run_command('say -v {{ Voice }} {{ Text }}')\n```\n\nPython modules also support the `advanced.custom_generate` method of generating the script. Python modules can be used with `script` OR `script_path` and will ignore `script_end`, `option_format_string`, and `option_format_string_boolean`.\n", "timestamp": "2025-10-24T22:24:34.412294"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/plugins/README.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/plugins/README.md", "content": "# Plugins\n\nPlugins are an extension of Empire that allow for custom scripts to be loaded.\nThis allows anyone to build or add community projects to extend Empire functionality.\n\n## Installing Plugins\n\nPlugin installation is available through the Starkiller __Plugin Marketplace__.\n\n### Additional Dependencies\n\nIf a plugin requires additional Python dependencies, the plugin page will show a warning\nthat the dependencies need to be installed before the plugin can be loaded.\n\n![](../.gitbook/assets/plugin-dependencies.png)\n", "timestamp": "2025-10-24T22:24:34.704857"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/plugins/development/README.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/plugins/development/README.md", "content": "# Plugin Development\n\n## Getting Started\n\nThe hello world plugin is an example plugin\nthat can be found in the `empire/server/plugins/example` directory.\n\n```\nempire/server/plugins/example\n├── __init__.py\n├── example.py\n└── plugin.yaml\n```\n\n## plugin.yaml\n```yaml\nname: example\nauthors:\n  - name: Author 1\n    handle: '@author1'\n    link: https://twitter.com/author1\n# Software and tools that from the MITRE ATT&CK framework (https://attack.mitre.org/software/)\nsoftware:\n# Techniques that from the MITRE ATT&CK framework (https://attack.mitre.org/techniques/enterprise/)\ntechniques:\n  - TXXXX\n  - TXXXX\n# The entry point for the plugin. The file that contains the `Plugin` class.\nmain: example.py\n# Extra dependencies that the plugin requires.\n# Empire will not automatically install these dependencies, but\n# will check if they are installed before running the plugin.\n# Starkiller may tell the user to install these dependencies when it is installed via the marketplace.\npython_deps:\n  - requests>=2.25.1\n  - pyyaml\n```\n\nThe `example.py` file contains the plugin class. The class must be named `Plugin`\nand must inherit from `empire.server.common.plugins.BasePlugin`.\n\n```python\nclass Plugin(BasePlugin):\n    ...\n```\n", "timestamp": "2025-10-24T22:24:34.993735"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/plugins/development/database-usage.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/plugins/development/database-usage.md", "content": "# Database Usage\n\nExecute functions and hooks/filters are sent a SQLAlchemy database session. This does\nnot need to be opened or closed, as the calling code handles that. The database session\nis passed in as a keyword argument.\n\n```python\nfrom sqlalchemy.orm import Session\n\ndef execute(self, command, **kwargs):\n    user = kwargs.get('user', None)\n    db: Session = kwargs.get('db', None)\n\n    agents = self.main_menu.agentsv2.get_all(db)\n\n    return \"Execution complete\"\n```\n\nIt is important not to close the database session, as it will be used by the calling\ncode and sent to other hooks/filters.\n\n```python\nfrom sqlalchemy.orm import Session\nfrom empire.server.core.db import models\n\ndef on_agent_checkin(self, db: Session, agent: models.Agent):\n    # Do something\n    pass\n```\n\nWhen executing code outside of the execute function or hooks/filters, you will need to\nopen a database session. This means that you must handle your database session in the\nplugin. Using the Context Manager syntax ensures the db session commits and closes\nproperly.\n\n```python\nfrom empire.server.core.db.base import SessionLocal\n\ndef do_something():\n    with SessionLocal.begin() as db:\n        # Do the things with the db session\n        pass\n```\n", "timestamp": "2025-10-24T22:24:35.114714"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/plugins/development/execution.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/plugins/development/execution.md", "content": "# Execution\n\n## Execute Function\nThe execute function is called when the plugin is executed via the API. The execute function is passed the following arguments:\n\n* command - A dict of the command arguments, already parsed and validated by the core Empire code\n* kwargs - Additional arguments that may be passed in by the core Empire code. Right now there are only two.\n  * user - The user database object for the user that is executing the plugin\n  * db - The database session object\n\n### Error Handling\n\nIf an error occurs during the execution of the plugin and it goes unchecked,\nthe client will receive a 500 error.\n\nThere are two Exceptions that can be raised by the plugin execution function:\n**PluginValidationException**: This exception should be raised if the plugin fails validation. This will return a 400 error to the client with the error message.\n**PluginExecutionException**: This exception should be raised if the plugin fails execution. This will return a 500 error to the client with the error message.\n\n```python\nraise PluginValidationException(\"Error Message\")\nraise PluginExecutionException(\"Error Message\")\n```\n\n### Response\n\nBefore the plugin's execute function is called, the core Empire code will validate the command arguments. If the arguments are invalid, the API will return a 400 error with the error message.\n\nThe execute function can return a String, a Boolean, or a Tuple of (Any, String)\n\n* None - The execution will be considered successful.\n* String - The string will be displayed to the user executing the plugin and the execution will be considered successful.\n* Boolean - If the boolean is True, the execution will be considered successful. If the boolean is False, the execution will be considered failed.\n\n#### Deprecated\n\n* Tuple - The tuple must be a tuple of (Any, String). The second value in the tuple represents an error message. The string will be displayed to the user executing the plugin and the execution will be considered failed.\n\nThis is deprecated.\nInstead of returning an error message in a tuple, raise a `PluginValidationException` or `PluginExecutionException`.\n\n\n```python\ndef execute(self, command, **kwargs):\n    ...\n\n    # Successful execution\n    return None\n    return \"Execution complete\"\n    return True\n\n    # Failed execution\n    raise PluginValidationException(\"Error Message\")\n    raise PluginExecutionException(\"Error Message\")\n```\n", "timestamp": "2025-10-24T22:24:35.226607"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/plugins/development/hooks-and-filters.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/plugins/development/hooks-and-filters.md", "content": "# Hooks and Filters\n\n## Hooks and Filters\n\nHooks and filters are a function that a developer can implement that will be called when some event happens.\n\n**Hooks** - Hooks are implemented to perform some side effect of an event happening. A hook does not need to return anything.\n\n**Filters** - Filters are implemented to perform some modification of data after an event happens. A filter should return the modified arguments that it was given.\n\nA minimal hook implementation.\n\n```python\nfrom sqlalchemy.orm import Session\nfrom empire.server.core.hooks import hooks\nfrom empire.server.core.db import models\n\ndef my_hook(db: Session, agent: models.Agent):\n    \"\"\"\n    print to the console whenever an agent checks in.\n    \"\"\"\n    print(f'New Agent Check in! Name: {agent.name}')\n\n\nhooks.register_hook(hooks.AFTER_AGENT_CHECKIN_HOOK, 'checkin_logger_hook', my_hook)\n```\n\nA minimal filter implementation.\n\n```python\nfrom sqlalchemy.orm import Session\nfrom empire.server.core.hooks import hooks\nfrom empire.server.core.db import models\n\ndef my_filter(db: Session, task: models.AgentTask):\n    \"\"\"\n    Reverses the output string of a tasking.\n    \"\"\"\n    task.output = task.output[::-1]\n\n    return task\n\n\nhooks.register_filter(hooks.BEFORE_TASKING_RESULT_FILTER, 'reverse_filter', my_filter)\n```\n\nEach event has its own set of unique arguments. At the moment, the events are:\n\n* AFTER_LISTENER_CREATED_HOOK\n\nThis event is triggered after the creation of a listener. Its arguments are (db: Session, listener: models.Listener).\n\n* AFTER\\_TASKING\\_HOOK\n\nThis event is triggered after the tasking is queued and written to the database. Its arguments are (db: Session, tasking: models.Tasking)\n\n* BEFORE\\_TASKING\\_RESULT\\_HOOK/BEFORE\\_TASKING\\_RESULT\\_FILTER\n\nThis event is triggered after the tasking results are received but before they are written to the database. Its arguments are (db: Session, tasking: models.Tasking) where tasking is the db record.\n\n* AFTER\\_TASKING\\_RESULT\\_HOOK\n\nThis event is triggered after the tasking results are received and after they are written to the database. Its arguments are (db: Session, tasking: models.Tasking) where tasking is the db record.\n\n* AFTER\\_AGENT\\_CHECKIN\\_HOOK\n\n This event is triggered after the agent has completed the stage2 of the checkin process, and the sysinfo has been written to the database. Its arguments are (db: Session, agent: models.Agent)\n\n* AFTER\\_AGENT\\_CALLBACK\\_HOOK\n\nThis event is triggered each time an agent calls back to the C2 server, after the sysinfo has been written to the database. Its arguments are (db: Session, agent_id: str)\n\n_The number of events at the moment is very minimal. If there's an event that you would like added, open an issue on the GitHub repo, come chat in our Discord, or put up a pull request._\n\n### Real World Examples\n\nEmpire utilizes both filters and hooks itself that can be used as a reference.\n\n* The Powershell agent was updated to return JSON for some of the base shell commands. There are filters for `ls`, `ps`, `route`, and `ifconfig` that convert the JSON response to a table before it gets stored in the database.\n* There is a hook implemented for the `ps` command that converts the results of `ps` from Powershell and Python agents into database records.\n* An example plugin that utilizes hooks is the [Twilio-Plugin](https://github.com/BC-SECURITY/Twilio-Plugin) which sends an operator a text message when an agent checks in.\n\nFuture enhancements:\n\n*   Since hooking the agent results events will invoke hooks on every single tasking result,\n    we'd like to implement something that is more module specific. For example, a module that needs to store credentials, such as Mimikatz, could have a `on_response` function in its `.py` file that is invoked specifically when that module returns.\n", "timestamp": "2025-10-24T22:24:35.334147"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/plugins/development/imports.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/plugins/development/imports.md", "content": "# Importing other python files\n\nAdd a `__init__.py` file to your plugin directory to make it a package.\n\nIf you want to import other python files in your plugin, you can do so by importing\nthem relative to your entrypoint.\n\nFor example, if you have a file called\n`example_helpers.py` in the same directory as your plugin, you can import it like so:\n\n```python\nfrom . import example_helpers\n```\n", "timestamp": "2025-10-24T22:24:35.450087"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/plugins/development/lifecycle-hooks.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/plugins/development/lifecycle-hooks.md", "content": "# Lifecycle Hooks\n\n## on_load\n\nThe `on_load` function is called when the plugin is loaded into memory.\n```python\n@override\ndef on_load(self, db):\n    print(\"Plugin loaded\")\n```\n\n## on_unload\n\nThe `on_unload` function is called when the plugin is unloaded from memory.\n```python\n@override\ndef on_unload(self, db):\n    print(\"Plugin unloaded\")\n```\n\n## on_start\n\nThe `on_start` function is called when the plugin is started.\n```python\n@override\ndef on_start(self, db):\n    print(\"Plugin started\")\n```\n\n## on_stop\n\nThe `on_stop` function is called when the plugin is stopped.\n```python\n@override\ndef on_stop(self, db):\n    print(\"Plugin stopped\")\n```\n", "timestamp": "2025-10-24T22:24:35.566373"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/plugins/development/migration.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/plugins/development/migration.md", "content": "# Migration Guide\n\nThis is an exhaustive list of changes that have been made to the plugin system between\nmajor Empire versions.\n\n## 4->5 Migration\nNot a lot has changed for plugins in Empire 5.0. We've just added a few guard rails for better\nstability between Empire versions.\n\nThe plugin interface is a guarantee that certain functionality will not be changed outside of major\nEmpire version updates (ie 4->5). So which functions are guaranteed? Any of the functions on the\n`core/*_service` classes not prefixed with a `_`.\n\nDoes this mean you can't use `util` functions or modify state in other parts of the empire code?\nNo. In most cases you will be fine to do so. We as maintainers just can't keep track of any and\nevery thing a plugin may be doing and guarantee that it won't break in a minor/patch update.\nThis is no different than the way things were pre 5.0.\n\n* Make sure `self.info` is a dict and not a tuple. A lot of plugins had a trailing comma that caused it to be interpreted as a tuple.\n* Update `Author` to `Authors` and follow the new format (Link, Handle, Name)\n* The execute plugin endpoint no longer automatically changes the state of the `self.options` dict inside the plugin. Instead, it sends validated parameters to the plugin as a dict and the plugin itself should decide whether it makes sense to modify the internal state or not.\n* `plugin_socketio_message` was moved from `MainMenu` to `plugin_service`.\n* Example conversion for a 5.0 plugin can be seen in [ChiselServer-Plugin](https://github.com/BC-SECURITY/ChiselServer-Plugin/compare/5.0)\n\n## 5->6 Migration\n* self.info is now an object of type `PluginInfo` instead of a dict\n  * `self.info[\"Name\"]` is now `self.info.name`\n* plugins now require a `plugin.yaml` file (added in 5.9)\n* all `self.info` fields are now in the `plugin.yaml` file\n* `.plugin` files are no longer supported and won't be loaded\n* The `Plugin` class is now called `BasePlugin`\n* Plugin constructors now take a `PluginInfo` object as the second positional argument\n* Removed `Category` from `PluginInfo` which was not used\n* Plugin execute function must take `**kwargs`\n* Plugin name is now based on the name in the `plugin.yaml` file instead of the filename\n* `mainMenu` is now `main_menu`\n* BasePlugin moved from common to core\n* Sending socketio messages can now be done via `self.send_socketio_message` which will automatically use the correct plugin id\n* `onLoad` renamed to `on_load` and receives a `db` object\n* Plugins can now be turned on and off via the API without needing to use the `execute` function\n  * Plugins have an `enabled` boolean attribute that is set in the database and on the plugin object\n* Lifecycle functions -\n  * `on_load` - When the plugin is loaded into memory\n  * `on_unload` - When the plugin is unloaded from memory\n  * `on_start` - When the plugin is started\n  * `on_stop` - When the plugin is stopped\n* `register` function was removed\n* `install_path` is automatically set on `BasePlugin` constructor\n* Plugins have an internal state that can be defined in a similar way to execution and module options\n  * Internal state persists through database restarts\n* `options` is now `execution_options`\n* New config options -\n  * `auto_start` - Automatically start the plugin when Empire starts\n    * If using `auto_start`, the default settings should be valid\n  * `auto_execute` - Automatically execute the plugin when Empire starts\n* Execution can be disabled by setting `self.execution_enabled = False`\n* `PluginTask` should now use the id of the plugin instead of the name\n", "timestamp": "2025-10-24T22:24:35.681172"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/plugins/development/notifications.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/plugins/development/notifications.md", "content": "# Notifications\n\nNotifications are meant for time sensitive information that the user should be aware of.\nIn Starkiller, these get displayed immediately, so it is important not to spam them.\n\nTo send a notification, use the `send_socketio_message` from the `BasePlugin`.\n\n```python\ndef execute(self, command, **kwargs):\n    self.send_socketio_message(\"Helo World!\")\n```\n", "timestamp": "2025-10-24T22:24:35.786802"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/plugins/development/plugin-tasks.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/plugins/development/plugin-tasks.md", "content": "# Plugin Tasks\n\nPlugins can store tasks. The data model looks pretty close to Agent tasks.\nThis is for agent executions that:\n\n1. Want to attach a file result\n2. Need to display a lot of output, where notifications don't quite work\n3. Has output you'll want to look back at later\n\n```python\nfrom empire.server.core.db import models\n\ndef execute(self, command, **kwargs):\n    user = kwargs.get('user', None)\n    db = kwargs.get('db', None)\n\n    input = 'Example plugin execution.'\n\n    plugin_task = models.PluginTask(\n      plugin_id=self.info[\"Name\"],\n      input=input,\n      input_full=input,\n      user_id=user.id,\n      status=models.PluginTaskStatus.completed,\n    )\n\n    db.add(plugin_task)\n```\n\nFor an example of using plugin tasks and attaching files, see the [basic_reporting plugin](https://github.com/BC-SECURITY/Empire/blob/main/server/plugins/basic_reporting/basic_reporting.plugin).\n\n## Statuses\n\nPlugin tasks in Empire follow a similar lifecycle to agent tasks, with status updates\nproviding key insights into the progress and outcomes of various plugin operations.\nBelow are the possible statuses for plugin taskings along with descriptions and\nrepresentative icons.\n\n### Queued\n\n- **Description**: The task is queued for the plugin. This status indicates that the task has been created and is waiting to be pulled by the server.\n- **Icon**: <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"12\" height=\"12\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill=\"#ffa200\" d=\"M256 0a256 256 0 1 1 0 512A256 256 0 1 1 256 0zM232 120V256c0 8 4 15.5 10.7 20l96 64c11 7.4 25.9 4.4 33.3-6.7s4.4-25.9-6.7-33.3L280 243.2V120c0-13.3-10.7-24-24-24s-24 10.7-24 24z\"/></svg>\n\n### Started\n\n- **Description**: The plugin has successfully pulled and started the tasking. This status signifies that the server has received the task and is either processing it or about to start processing.\n- **Icon**: <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\" width=\"12\" height=\"12\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill=\"#74C0FC\" d=\"M400 480H48c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48h352c26.5 0 48 21.5 48 48v352c0 26.5-21.5 48-48 48zm-204.7-98.1l184-184c6.2-6.2 6.2-16.4 0-22.6l-22.6-22.6c-6.2-6.2-16.4-6.2-22.6 0L184 302.7l-70.1-70.1c-6.2-6.2-16.4-6.2-22.6 0l-22.6 22.6c-6.2 6.2-6.2 16.4 0 22.6l104 104c6.2 6.3 16.4 6.3 22.6 0z\"/></svg>\n\n### Completed\n\n- **Description**: The task has returned data successfully. This indicates that the plugin has finished executing the task and has returned the output.\n- **Icon**: <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"12\" height=\"12\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill=\"#47b300\" d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z\"/></svg>\n\n### Error\n\n- **Description**: If an plugin reports an error for a task, it will return an ERROR status. This status allows users to identify tasks that did not execute as expected.\n- **Icon**: <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"12\" height=\"12\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill=\"#ff0000\" d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z\"/></svg>)\n\n### Continuous\n\n- **Description**: A special class for modules like keylogging since they are handled differently on the server due to their continuous nature. These tasks do not have a definite end and run continuously until stopped.\n- **Icon**: <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\" width=\"12\" height=\"12\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill=\"#B197FC\" d=\"M0 241.1C0 161 65 96 145.1 96c38.5 0 75.4 15.3 102.6 42.5L320 210.7l72.2-72.2C419.5 111.3 456.4 96 494.9 96C575 96 640 161 640 241.1v29.7C640 351 575 416 494.9 416c-38.5 0-75.4-15.3-102.6-42.5L320 301.3l-72.2 72.2C220.5 400.7 183.6 416 145.1 416C65 416 0 351 0 270.9V241.1zM274.7 256l-72.2-72.2c-15.2-15.2-35.9-23.8-57.4-23.8C100.3 160 64 196.3 64 241.1v29.7c0 44.8 36.3 81.1 81.1 81.1c21.5 0 42.2-8.5 57.4-23.8L274.7 256zm90.5 0l72.2 72.2c15.2 15.2 35.9 23.8 57.4 23.8c44.8 0 81.1-36.3 81.1-81.1V241.1c0-44.8-36.3-81.1-81.1-81.1c-21.5 0-42.2 8.5-57.4 23.8L365.3 256z\"/></svg>\n", "timestamp": "2025-10-24T22:24:35.896979"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/plugins/development/settings.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/plugins/development/settings.md", "content": "# Settings/State Management\n\nPlugins can have state that persists through server restarts.\nThere are different types of state.\n\n## Settings\n\nThere are values that are defined in the same format as execution options.\nThese options can be modified by the user and are persisted in the database.\n\n\"Settings\" supports one extra option that execution options don't. \"Editable\" is a boolean\nthat determines if the user can modify the value. If \"Editable\" is set to False, the\nvalue can be seen via the API, but not modified.\n\nWhen getting the settings from within the plugin, use `self.current_settings(db)`, which will\nreturn the current settings values from the database.\n\n```python\n@override\ndef on_start(self, db):\n    settings = self.current_settings(db)\n    print(settings)\n```\n\nTo set settings values, use `self.set_settings(db, settings)` where `settings` is a dict of\nthe values you want to set, or `self.state_settings_option(db, key, value)` to set a single\nvalue.\n\n```python\n@override\ndef on_start(self, db):\n    self.set_settings(db, {\"key\": \"value\"})\n    self.set_settings_option(db, \"key\", \"value\")\n```\n\n### `on_settings_change`\n\nWhen settings are updated, the `on_settings_change` function is called. This allows your plugin\nto react to changes in settings without needing to be restarted or continuously check the database.\n\n```python\n@override\ndef on_settings_change(self, db, settings):\n    print(settings)\n```\n\n\n## Internal State\n\nInternal state is state that is defined by the plugin and is not exposed via the API,\nbut is persisted in the database. It can be accessed via `self.internal_state(db)`,\nand can be set via `self.set_internal_state(db, state)` or `self.set_internal_state_option(db, key, value)`.\n", "timestamp": "2025-10-24T22:24:36.008929"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/quickstart/README.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/quickstart/README.md", "content": "# Quickstart\n\n## Run Commands\n\nEmpire uses a server/client architecture which is handled automatically by the startup script. The server will continue running from the terminal that it is launched from and Starkiller will be started on the configured port\n\n### Server\n\n```bash\n# Start Server\n./ps-empire server\n\n# Help\n./ps-empire server -h\n```\n\nThe server can be reset by passing a `--reset` flag. This will delete the database and any files that were created at runtime. It is recommended to run a `--reset` after any upgrades.\n\n\n```\n./ps-empire server --reset\n```\n\nDefault credentials are set in the config.yaml and are:\n```\nUsername: empireadmin\nPassword: password123\n```\nIt is strongly recommended that these be changed if Empire is being used for any kind of operational engagement.\n\n\n## Listeners 101\n\nThe first thing you need to do is set up a local listener. The **listeners** tab will display any active listeners, and active listeners can be disabled or modified from this tab. The `create` button in the top right will prompt you to select a listener type to build. The dropdown supports fuzzy search and tab completion. Each listener will have its own set of required and optional parameters.\n\n![](<../.gitbook/assets/listeners_tab.png>)\n\nHTTP is the most commonly used lsitener and supports both HTTP and HTTPS. For HTTPS, you must first set the CertPath to be a local .pem file. The provided **./setup/cert.sh** script will generate a self-signed cert and place it in **~/.local/share/empire/cert/empire.pem**.\n\nSet any optional paramaters such as WorkingHours, KillDate, DefaultDelay, and DefaultJitter for the listener, as well as whatever name you want it to be referred to as. You can then hit **submit** to start the listener. If the name is already taken, a nameX variant will be used, and Empire will alert you if the port is already in use.\n\n## Stagers 101\n\nThe staging process is described \\[\\[here|Staging]].\n\nEmpire implements various stagers in a modular format in **./empire/server/stagers/** . These include dlls, macros, one-liners, and more. To use a stager, select the stagers tab and click **create**, and you'll be taken to the individual stager's menu. The stagers tab will display any previously created stagers, along with key information about it them such as the agent lanuague it will use and what listener it is keyed to.\n\n![](<../.gitbook/assets/stagers.png>)\n\nFor UserAgent and proxy options, default uses the system defaults, none clears that option from being used in the stager, and anything else is assumed to be a custom setting (note, this last bit isn't properly implemented for proxy settings yet).\n\n## Agents 101\n\nWhen an agent checks in you will get a notification both on the server and in Starkiller.\n\n![](<../.gitbook/assets/server_check_in.png>)\n![](<../.gitbook/assets/starkiller_checkin.png>)\n\nOnce you have recieved a check in notification you can go to the agents tab and see all checked in agents. If an agent has turned red it means that the agent has failed to checkin and the server can not currently communicate with it. These are reffered to as stale agents\n\n![](<../.gitbook/assets/agents_tab.png>)\n\nFrom here you can click on any agent where you will be presented with a number of tabs including the interact tab for running modules, tasks, and view. The view tab will provide you informaiton that has been collected about the host along with other key informaiton like delay and jitter intervals.\n\nFor each registered agent, a `downloads/AGENT_NAME/` folder is created. An `agent.log` is created here with timestamped commands/results for agent communication. Downloads/module outputs are broken out into relevant folders here as well.\n\nWhen you're finished with an agent, you can either kill it from its interaction page or from the Agents tab.\n\n## Modules 101\n\nTo see available modules, use the modules tab under agents. This will provide a list of all available modules within Empire. These modules can be searched with the search bar on the lift or filiterd based on a number of criteria.\n\n![](<../.gitbook/assets/modules.png>)\n\nClicking on a module will take you to module overview where can read more information and configure settings. You can also select agents to task the module to and can deploy a module to multiple agents simultaneously\n\n![](<../.gitbook/assets/multi_agent_tasking.png>)\n", "timestamp": "2025-10-24T22:24:36.342477"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/quickstart/installation.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/quickstart/installation.md", "content": "# Installation\n\nWe recommend using the installation script or the Docker images to run Empire.\nAlternatively, you can install Empire via [Kali](https://www.kali.org/downloads/)'s package manager.\n\nThe following operating systems have been tested for Empire compatibility.\n\n* Ubuntu 20.04 / 22.04\n* Debian 11 / 12\n* Kali Linux\n* ParrotOS\n\nAs of Empire 6.0, Python 3.13 is the minimum Python version required.\n\n## Github\n\nNote: The `main` branch is a reflection of the latest changes and may not always be stable. After cloning the repo, you can checkout the latest stable release by running the `setup/checkout-latest-tag.sh` script.\n\n```bash\ngit clone --recursive https://github.com/BC-SECURITY/Empire.git\ncd Empire\n./setup/checkout-latest-tag.sh\n./ps-empire install -y\n```\n\n### Installation Script Options\nWhen running the ps-empire installation script, you can use the following optional flags to customize the installation process:\n\n- `-y`: Automatically answer 'Yes' to all prompts during installation. This is useful if you want to install all optional dependencies without being prompted for confirmation.\n- `-f`: Force the installation as root. Normally, Empire does not recommend installing as the root user for security reasons. However, if you need to bypass this restriction, you can use this flag. **Note: Using this option is not recommended unless absolutely necessary.**\n- `-h`: Displays the help text.\n```\n./ps-empire install -y -f\n```\n\n**Sponsors:**\n\n```\ngit clone --recursive https://github.com/BC-SECURITY/Empire-Sponsors.git\ncd Empire-Sponsors\n./setup/checkout-latest-tag.sh sponsors\n./ps-empire install -y\n```\n\nIf you are using the sponsors version of Empire, it will pull the sponsors version of Starkiller.\nBecause these are private repositories, you need to have ssh credentials configured for GitHub. Instructions can be found [here](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh).\n\n## Kali\n\nYou can install Empire on Kali by running the following:\n**Kali's version may be a few versions behind the latest release.**\n**Note:** Kali requires you to run Empire with `sudo`.\n\n```bash\nsudo apt install powershell-empire\n```\n\n\n## Docker\n\nIf you want to run Empire using a pre-built docker container.\n\n**Note**: For size savings on the image, it is not pre-built with the libraries needed for jar, dmg, and nim stagers. To add these to your image, run the `install.sh` script in the container and answer `y` to the prompts.\n\n```bash\n# Pull the latest image\ndocker pull bcsecurity/empire:latest\n\n# Run the server with the rest api port open\ndocker run -it -p 1337:1337 bcsecurity/empire:latest\n\n# To run the client against the already running server container\ndocker container ls\ndocker exec -it {container-id} ./ps-empire client\n\n# with persistent storage\ndocker pull bcsecurity/empire:latest\ndocker create -v /empire --name data bcsecurity/empire:latest\ndocker run -it -p 1337:1337 --volumes-from data bcsecurity/empire:latest\n\n# if you prefer to be dropped into bash instead of directly into empire\ndocker run -it -p 1337:1337 --volumes-from data --entrypoint /bin/bash bcsecurity/empire:latest\n```\n\nNote: These are example basic commands to get started with docker. Depending on the use case of the individual, one may need to reference the [Docker documentation](https://docs.docker.com).\n\nAll image versions can be found at: [https://hub.docker.com/r/bcsecurity/empire/](https://hub.docker.com/r/bcsecurity/empire/)\n\n* The last commit from master will be deployed to the `latest` tag\n* The last commit from the dev branch will be deployed to the `dev` tag\n* All GitHub tagged releases will be deployed using their version numbers (v3.0.0, v3.1.0, etc)\n\n## Community-Supported Operating Systems\n\nAt this time, we are choosing to only support Kali, ParrotOS, Debian 10/11/12, and Ubuntu 20.04/22.04 installations, however, we will accept pull requests that fix issues or provide installation scripts specific to other operating systems to this wiki.\n\n## Common Issues\n\n\n### Issue\n\n```\nCurrent Python version (3.12.2) is not allowed by the project (>=3.13,<3.14).\nPlease change python executable via the \"env use\" command.\n```\n\n#### Solution\n\n```\nsudo rm -rf .venv\npoetry install\n```\n\n\n### Issue\n\n```\n[*] Updating goenv\nfatal: not a git repository (or any of the parent directories): git\n```\n\n#### Solution\n\nOpen a new terminal, the install script should have set `$GOENV_ROOT` in your bashrc or zshrc file.\n", "timestamp": "2025-10-24T22:24:36.452087"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/quickstart/resetting.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/quickstart/resetting.md", "content": "# Resetting Empire state (--reset and --clean)\n\nEmpire provides two maintenance flags to help you return the system to a clean state between runs.\n\n## Reset\n\nStart fresh without historical data while keeping generated files and dependencies on disk intact.\n\n- What it does:\n  - Drops existing data and reinitializes the database schema. On the next start, Empire repopulates default values defined in your configuration.\n- What it does not do:\n  - Does not delete or modify your configuration files (for example, config.yaml).\n  - Does not delete Starkiller or Empire-Compiler.\n\n### Example\n```bash\n./ps-empire server --reset\n```\n\n## Clean\n\nCompletely resets Empire to a pristine state, removing config and all Starkiller and Empire-Compiler files.\n\n- What it does:\n  - Performs everything --reset does (drops data and reinitializes the database).\n  - Deletes configuration files (for example, config.yaml)\n  - Removes Starkiller and Empire-Compiler files.\n\n- What it does not do:\n  - Does not uninstall system-level prerequisites (for example, Python, Docker, or database servers).\n  - Does not remove your source checkout itself if you’re running from a cloned repository.\n\n### Example\n```bash\n./ps-empire server --clean\n```\n", "timestamp": "2025-10-24T22:24:36.563987"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/quickstart/server.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/quickstart/server.md", "content": "# Server\n\nThe Server configuration is managed via [empire/server/config.yaml](https://github.com/BC-SECURITY/Empire/blob/master/empire/client/config.yaml).\n\nOnce launched, Empire checks for user write permissions on paths specified in `config.yaml`. If the current user does not have write permissions on these paths, `~/.empire` will be set as fallback parent directory and the configuration file will be updated as well.\nIf `empire-priv.key` and `empire-chain.pem` are not found in ~/.local/share/empire directory, self-signed certs will be generated.\n\n* **suppress-self-cert-warning** - Suppress the http warnings when launching an Empire instance that uses a self-signed cert.\n\n* **api** - Configure the RESTful API.\n\nip - The IP address to bind the API and Starkiller to.\nport - The port to bind the API and Starkiller to.\nsecure - Enable HTTPS for the API and Starkiller. Browsers will not work with self-signed certs. Uses .key and .pem file from empire/server/data\n\n```yaml\napi:\n  ip: 0.0.0.0\n  port: 1337\n  secure: false\n```\n\n* **database** - Configure Empire's database. Empire utilizes MySQL by default for high performance database operations. It can be configured to use sqlite for more lightweight implementations if required For more info on the database, see the [Database](database/README.md) section.\n\nMySQL supports customizing the default url, username, password, and database name. By default these are set to\n```yaml\ndatabase:\n  use: mysql\n  mysql:\n    url: localhost:3306\n    username: empire_user\n    password: empire_password\n    database_name: empire\n```\n\n\nIf using SQLite the database location is customizable with the default setting:\n\n```yaml\ndatabase:\n  use: sqlite\n  sqlite:\n    location: empire/server/data/empire.db\n```\n\n\n\n\nThe defaults block defines the properties that are initially loaded into the database when it is first created. These include the staging key, default user and password and obfuscation settings.\n\n```yaml\ndatabase:\n  defaults:\n    # staging key will first look at OS environment variables, then here.\n    # If empty, will be prompted (like Empire <3.7).\n    staging-key: RANDOM\n    username: empireadmin\n    password: password123\n    # The default configuration for global obfuscation.\n    obfuscation:\n      - language: powershell\n        enabled: false\n        command: \"Token\\\\All\\\\1\"\n        module: \"invoke-obfuscation\"\n        preobfuscatable: true\n      - language: csharp\n        enabled: false\n        command: \"\"\n        module: \"confuser\"\n        preobfuscatable: false\n    ip_allow_list: []\n    ip_deny_list: []\n    keyword_obfuscation:\n      - Invoke-Empire\n      - Invoke-Mimikatz\n```\n\n* **empire_compiler** - Configure the Empire Compiler module. This block manages settings for the Empire Compiler, which is responsible for handling C# compilation tasks.\n\narchive: The URL to the Empire Compiler archive. The {{platform}} variable will be replaced with the current platform/architecture. (e.g. linux-amd64, linux-arm64)\n\n```yaml\nempire_compiler:\n  archive: https://github.com/BC-SECURITY/Empire-Compiler/releases/download/v0.3.2/EmpireCompiler-{{platform}}-v0.3.2.tgz\n```\n\n\n* **plugins** - Config related to plugins\nauto_start - boolean, whether the plugin should start automatically. If this is not set, Empire will defer to the plugin's own configuration.\nauto_execute - run an execute command on the plugin at startup. If this is not set, Empire will defer to the plugin's own configuration.\n\n```yaml\nplugins:\n  # Auto-execute plugin with defined settings\n  basic_reporting:\n    auto_start: true\n    auto_execute:\n      enabled: true\n      options:\n        report: all\n```\n* **plugin_marketplace** - This points the server to where Empire should look for additional available plugins to install. This defaults to the BC Security plugin marketplace but can point to a private marketplace as well.\nname - the display name for the marketplace in Empire\ngit_url - git project to pull plugins from\n\n\n```yaml\nplugin_marketplace:\n  registries:\n    - name: BC-SECURITY\n      git_url: git@github.com:BC-SECURITY/Empire-Plugin-Registry-Sponsors.git\n      ref: main\n      file: registry.yaml\n```\n* **directories** - Control where Empire should read and write specific data.\n\n```yaml\ndirectories:\n  downloads: downloads\n```\n\n* **logging** - See [Logging](../logging/logging.md) for more information on logging configuration.\n\n* **submodules** - Control if submodules will be auto updated on startup.\n\n```\nsubmodules:\n  auto_update: true\n```\n", "timestamp": "2025-10-24T22:24:36.672305"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/restful-api/README.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/restful-api/README.md", "content": "# RESTful API\n\n## Introduction\nThe Empire v2 API is a RESTful API that provides access to the data in Empire. It was introduced in Empire 5.0 and replaced the old v1 API.\nThe API is powered by [FastAPI](https://fastapi.tiangolo.com/) and is available at [http://localhost:1337/api/v2/](http://localhost:1337/api/v2/).\nThe Swagger UI is available at [http://localhost:1337/docs/](http://localhost:1337/docs/).\nThe docs here are to be used as a reference for the API and to explain nuances for interacting with it. For actual endpoint definitions, use the OpenAPI Spec. For explanations of what the heck a listener, stager, etc is, see the associated non-API documentation.\n\nThe server can be launched by running `./ps-empire server` and can be connected to with the built-in client or [Starkiller](https://github.com/BC-SECURITY/Starkiller). By default, the RESTful API is started on port 1337, over HTTP without a certificate. This is because self-signed certs are blocked by most web browsers and Starkiller is used via a web browser.\n\nIf launched with `--secure-api`, https will be used using the certificate located at `empire/server/data/empire.pem`, which is generated at startup.\n\nThe port can be configured in the server `config.yaml` file by the `api.port` property.\nIt can also be set by supplying `--restport <PORT_NUM>` on launch, which will take precedence over the config file.\n\n## API Authentication\nAPI Authentication is handled via JSON Web Tokens (JWT).\nThe default username for the API is `empireadmin` and the default password is `password123`.\n\nTo login, POST to the http://localhost:1337/token endpoint with the username and password. The response will contain a field called `access_token`. This token is the JWT that should be sent on subsequent requests as an Authorization header. (ie `Authorization: Bearer {access_token}`).\n\n## Endpoints\n\n### Listener Templates\n*/api/v2/listener-templates/*\nListener templates are the \"types\" of templates that can be used to create listeners.\nA listener template defines the options that can be used when creating a listener.\nListener templates are read-only via the API.\n\nThe options that are listed are derived from the associated listener objects. The `value` field will always be a string,\nfor a consistent API object, but the `type` field will tell the client how to interpret the value.\n\n### Listeners\n*/api/v2/listeners/*\nListeners are created by using a listener template. The create endpoint expects the\noptions dictionary to contain the options that are required for associated listener template\nand will be validated against the template. The options can be sent as strings, but Empire will\nstill validate that they can be parsed to the correct type and raise an exception if it isn't correct.\n\nThey can be created, updated, enabled/disabled, and deleted via the API. To update a listener,\nit must be disabled first.\n\n### Stager Templates\n*/api/v2/stager-templates/*\nStager templates are the \"types\" of templates that can be used to create stagers.\nA stager template defines the options that can be used when creating a stagers.\nStager templates are read-only via the API.\n\nThe options that are listed are derived from the associated stager objects. The `value` field will always be a string,\nfor a consistent API object, but the `type` field will tell the client how to interpret the value.\n\n### Stagers\n*/api/v2/stagers/*\nStagers are created by using a stager template. The create endpoint expects the\noptions dictionary to contain the options that are required for associated stager template\nand will be validated against the template. The options can be sent as strings, but Empire will\nstill validate that they can be parsed to the correct type and raise an exception if it isn't correct.\n\nThey can be created, updated, and deleted via the API.\nWhen creating a stager, there is an option to only \"generate\" instead of save.\nIf `save=false`, then the stager will not be saved to the database, but will be returned in the response. If the stager is a file, then the response will contain a reference to the download uri for that file.\n\n### Agents\n*/api/v2/agents/*\nThe agent endpoints allow for updating specific fields and deleting (aka killing or archiving).\nThe agent endpoints also have sub-resources for tasks and files.\n\n#### Agent Checkins\n*/api/v2/agents/{agent_id}/checkins/*\nThe agent checkins endpoints are for viewing the checkins for an agent. Checkins are created every time an agent checks in with the server. The checkins are read-only via the API.\n\n*/api/v2/agents/checkins/aggregate/*\nThe aggregate endpoint is a read-only view of the checkins for an agent. It is a summary of the checkins for agents over time.\n\n#### Agent Tasks\n*/api/v2/agents/{agent_id}/tasks/*\nThe agent tasks endpoints are for tasking an agent to do something.\nWhile there are a variety of `POST` endpoints for specific types of tasks, the resulting\nobjects are the same and can be viewed together via the `GET` endpoints. Tasks also support deletion as long as they are still only queued to run (the agent hasn't seen it yet).\n\nSome tasks have the ability to join in a `Download`, if this is the case, the downloads will appear as a property on the task response with a reference to the uri.\n\n#### Agent Files\n*/api/v2/agents/{agent_id}/files/*\nThe agent files endpoints are a read only view of the the files on an agent's machine.\nTo populate agent files, a task must be run to get a list of files. At the moment running an `ls`\nwill populate this resource because of a [hook](../plugins/development/hooks-and-filters.md) that is built in to Empire. There is also a `DirectoryList` task that also populates these, which is what the File Browser in Starkiller uses.\n\nIf a file is downloaded, then the associated AgentFile record will have a joined `Download` record. Just like Stagers and Agent Tasks, if a download is associated with a file, it will be returned along with the file with a reference to the uri to download it.\n\n### Modules\n*/api/v2/modules/*\nThe modules endpoints provide a way to view the currently loaded modules in Empire.\nAt the moment, there is no way to create modules via the API, they must exist on the server\nat the time that the server is ran. There is an update endpoint that allows for enabling and disabling a module. Disabling a module will block it from being allowed to execute.\n\n### Hosts\n*/api/v2/hosts/*\nHosts are read-only via the API. Hosts represent the machines that agents are running on.\nMultiple agents can run on a single host. The resources are generated when an agent connects and\nis based on its internal IP address and name.\n\n### Host Processes\n*/api/v2/hosts/{host_id}/host-processes/*\nHost processes are the processes that are scraped via the `ps` command on an agent. They are read-only via the API.\n\n### Downloads\n*/api/v2/downloads*\nThe downloads API allows for downloading of files from the Empire server.\nDownloads are linked to the following sources (and can be expanded in the future):\n* Saved stagers\n* Downloaded agent files, such as via the file browser or a task\n* Agent tasks\n\nA user can also upload a file to the server via the `POST` endpoint. That file can then\nbe referenced to be used in certain modules.\n\n### Credentials\n*/api/v2/credentials*\nCredentials support basic CRUD operations via the API.\nThey can also be generated by agent tasks.\n\n### Obfuscation\n#### Keywords\n*/api/v2/obfuscation/keywords*\nKeyword obfuscation supports basic CRUD operations via the API.\nThese are used for the `keyword replacement` feature within Empire.\n\n#### Global Obfuscation\n*/api/v2/obfuscation/global*\nThe global obfuscation endpoint allows for getting and modifying the global obfuscation configuration\nfor a language. Modules can be pre-obfuscated by using the `/preobfuscate` endpoint after configuring the obfuscation.\n\n### Bypasses\n*/api/v2/bypasses*\nBypasses support basic CRUD operations via the API.\nOnce created, these can be passed into the `Bypasses` field of a stager.\n\n### Malleable Profiles\n*/api/v2/malleable-profiles*\nMalleable Profiles support basic CRUD operations via the API.\nThey are initially loaded via .profile files on Empire startup, and then can be change via the API. Once created, they can be passed as an option to the malleable listener.\n\n### Plugins\n*/api/v2/plugins*\nThe plugin endpoints allow for the management of plugins. There is an endpoint for getting a single plugin, as well as a list of all plugins.\nThe `execute` endpoint allows for the execution of a plugin's code. Like a listener, stager, or module, the plugin defines its options in code, and the options can be sent as strings, but Empire will still validate that they can be parsed to the correct type and raise an exception if it isn't correct.\n\n### Meta\n*/api/v2/meta*\nThe meta endpoints are for getting information about the server itself.\nAt the moment, there is only an endpoint for getting the version of the server.\n\n### Users\n*/api/v2/users*\nUsers support basic CRUD operations via the API.\nThere is also an endpoint for updating a user's password. Only an admin user can create and\nupdate other users.\n", "timestamp": "2025-10-24T22:24:36.971960"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/settings/bypasses.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/settings/bypasses.md", "content": "# Bypasses\n\nBypasses are stored in yamls found in `/empire/server/bypass/` and uses a similar formatting as modules. Bypasses are currently only available to PowerShell modules and require a minimum version of PowerShell 3. Earlier version of PowerShell did not contain protections that require bypasses.\n\nWhen Empire first loads, it will wrie the data from the yamls to the database. The bypasses can then be edited via Starkiller or the API with the changes going only to the version stored in the database.\n\n### Example Bypasses YAML\n\n```\nname: ''\nauthors:\n  - ''\ndescription: ''\ncomments:\n  - ''\nlanguage: powershell\nmin_language_version: '3'\nscript: ''\n\n\n```\n", "timestamp": "2025-10-24T22:24:37.427603"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/settings/ip-filtering.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/settings/ip-filtering.md", "content": "# IP Filtering\n\nIP filtering allows you to restrict agent communication to a specific set of IP addresses.\n\n## Configuration\n\nThe default configuration is located in the server's `config.yaml` file in the database\ndefaults section. The `ip_allow_list` and `ip_deny_list` properties are lists of\nIP addresses, CIDR ranges, or dash-separated ranges.\n\nThe defaults from the `config.yaml` file are loaded into the database when Empire\nstarts up if the ip lists are empty in the database. After the initial load, IPs\ncan be added to both lists via the API or Starkiller.\n\nIP Filtering can be turned on/off by an admin user via the API. The default behavior has both lists empty and the feature enabled.\n\nAn IP Filtering interface is available in the [Sponsors](https://github.com/sponsors/BC-SECURITY) version of Starkiller.\n\n### Example Configuration formatting\n\n```yaml\ndatabase:\n    defaults:\n      ip_allow_list:\n        - 10.0.0.0-10.0.0.10\n      ip_deny_list:\n        - 10.0.0.0/32\n        - 10.0.0.1\n```\n\n## How it works\n\nWhen an agent checks in, the server checks the agent's IP address against the lists and\nwill immediately kill the agent if the IP is not allowed.\nIndividual listeners can also use IP filtering via `ip_service` to implement custom\nbehavior or stop the agent from even reaching the check in stage. The `http` listener\ndoes this and serves a different http response code if the IP is not allowed.\n\nThe IP filtering logic is as follows:\n* If no allow list or deny list is set, then all IPs are allowed.\n* If only an allow list is set, then only IPs in the allow list are allowed.\n* If only a deny list is set, then only IPs not in the deny list are allowed.\n* If both an allow list and a deny list are set, the IPs are first filtered through the allow list, and then the deny list.\n\nFor example filtering logic see the [tests](https://github.com/BC-SECURITY/Empire/blob/main/empire/test/test_ip_service.py).\n", "timestamp": "2025-10-24T22:24:37.547917"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/settings/logging.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/settings/logging.md", "content": "Logging\n----\n\nThe logging for the server is logged to the file `~/.local/share/empire/logs/empire_server.log` and to the console.\nBy default, the logging level is set to `INFO`.\n\n\n## Listener Logging\nListeners have their own logging configuration. All logs `debug` and above are written to\nthe file `~/.local/share/empire/logs/listener_<listener_name>.log`, and all logs `warning` and obove will go to the console.\n\nIf there is a log message that you also want sent to the server log and console,\nalso log it to the module logger with `log.info()`.\n\nTo use the listener logger for the `http` listener, you can use the following command:\n`self.instance_log.info()`.\n\n\n## Formatters\nThe default formatter for the console is the \"simple format\" that just contains the log level and message.\nThe expanded logging format contains extra info such as a timestamp and the line of code that triggered the log.\nThe expanded format is used in the server log file and can be enabled for the console logger using\n`logging.simple_console`\n\n## Configuration\n```yaml\nlogging:\n  level: INFO\n  directory: empire/server/downloads/logs/\n  simple_console: true\ndebug:\n  last_task:\n    enabled: false\n    file: empire/server/data/last_task.txt\n```\n\nLog level for the root server log defaults to `INFO`.\nIt can be changed by passing the `--log-level` flag to the server,\nwhich expects a string of one of the following values: `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`.\nIf no command line flag is passed, the config file is used.\n\nThe log directory can be changed by setting the `logging.directory` property in the config file.\n\n`simple_console` changes the console logging format to just the log level and message,\ninstead of the extended format.\n\n`debug.last_task` will cause Empire to save the input of the last task that was run to a file.\n\n## Command Line Flags\n`--log-level <level>`\n    Sets the log level for the server.\n\n`--debug`\n    Sets the log level for the server to `DEBUG`.\n\n## Development\nIn Empire 5 and beyond, if you want to print something to the console, you should\nalmost always be using the `logging` module instead of a print statement.\n\nNot all print statements have been removed from the code yet, simply because there was just a lot of code to convert.\nIf you find a print statement that should be removed: either replace it with logging, remove it, or see if it should be returned via the api (such as in stager generation).\n\n## Possible future features\n\n### JSON Logging\nAdd support for logging in JSON format to make it easier to parse the logs and integrate with other tools, such as with [structlog](https://www.structlog.org/en/stable/) or [python-json-logger](https://github.com/madzak/python-json-logger).\n\n### Plugin logging\nGive each plugin their own log file. With this, we could add endpoints to pull or tail the\nlogs for a specific plugin. This could be useful for debugging and for the plugin executions\nthat produce many lines of response for a single action to be viewed in Starkiller.\n", "timestamp": "2025-10-24T22:24:37.658748"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/stagers/multi_generate_agent.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/stagers/multi_generate_agent.md", "content": "# multi_generate_agent - Stageless Agent Generator\n\n## Overview\n\n`multi_generate_agent` is an Empire stager that generates a **stageless agent**, combining stage 0, stage 1, and stage 2 into a single file.\nUnlike traditional staged execution methods, this stager ensures that the agent is fully formed and ready to run immediately upon execution.\nThis method is particularly useful for **debugging**, as it allows operators to analyze a fully assembled agent without concerns about staged delivery issues.\nIt is also beneficial for **pre-staging agents**, making it useful in environments where fetching additional stages is undesirable or impractical.\nAdditionally, it can help **reduce detection risk**, as all necessary code is included in a single artifact, which may be beneficial in environments with restricted outbound network connectivity.\n\n## Compatibility\n\nThe `multi_generate_agent` stager is designed specifically for **Python, IronPython, and PowerShell agents**. It does not apply to **C# or Go agents**, as these are already compiled and inherently prestaged.\n\n## How It Works\n\nThe `multi_generate_agent` stager generates a self-contained Empire agent file that incorporates all required stages. Upon execution, the agent **performs a full key exchange** with the Empire server but does **not execute the passed code immediately**, allowing operators to trigger execution when needed. This design makes it ideal for debugging or scenarios where an agent needs to be prestaged without requiring additional network requests to retrieve code.\n\n![generate_agent](../.gitbook/assets/stagers/multi_generate_agent.png)\n", "timestamp": "2025-10-24T22:24:38.064467"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/starkiller/README.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/starkiller/README.md", "content": "# Starkiller\nStarkiller is a Frontend for [Powershell Empire](https://github.com/BC-SECURITY/Empire/). It is a web application written in VueJS. If you'd like to contribute please follow the [Contribution guide](/CONTRIBUTING.md). If you'd like to request a feature or report a bug, please follow the [Issue template](/.github/ISSUE_TEMPLATE.md).\n\n# Getting Started\nAs of Empire 5.0 and Starkiller 2.0, you no longer need to install Starkiller or build it from source.\nIt is prepackaged in Empire as a submodule and served via Empire's API.\n\n# Sponsorship and extra features\n[Sponsoring](https://github.com/sponsors/BC-SECURITY/) at the `Individual` level will give access to extra features.\n", "timestamp": "2025-10-24T22:24:38.350800"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/starkiller/agent-tasks.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/starkiller/agent-tasks.md", "content": "# Agent Tasks\n\nAgent tasks in Empire are managed through a series of status updates that reflect the lifecycle of a task from creation to completion. These statuses help users understand the current state of tasks assigned to agents. Below are the possible statuses for agent taskings along with descriptions and representative icons.\n\n## Queued\n\n- **Description**: The task is queued for the agent. This status indicates that the task has been created and is waiting to be pulled by the agent.\n- **Icon**: <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"12\" height=\"12\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill=\"#ffa200\" d=\"M256 0a256 256 0 1 1 0 512A256 256 0 1 1 256 0zM232 120V256c0 8 4 15.5 10.7 20l96 64c11 7.4 25.9 4.4 33.3-6.7s4.4-25.9-6.7-33.3L280 243.2V120c0-13.3-10.7-24-24-24s-24 10.7-24 24z\"/></svg>\n\n## Pulled\n\n- **Description**: The agent has successfully pulled the tasking. This status signifies that the agent has received the task and is either processing it or about to start processing.\n- **Icon**: <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\" width=\"12\" height=\"12\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill=\"#74C0FC\" d=\"M400 480H48c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48h352c26.5 0 48 21.5 48 48v352c0 26.5-21.5 48-48 48zm-204.7-98.1l184-184c6.2-6.2 6.2-16.4 0-22.6l-22.6-22.6c-6.2-6.2-16.4-6.2-22.6 0L184 302.7l-70.1-70.1c-6.2-6.2-16.4-6.2-22.6 0l-22.6 22.6c-6.2 6.2-6.2 16.4 0 22.6l104 104c6.2 6.3 16.4 6.3 22.6 0z\"/></svg>\n\n## Completed\n\n- **Description**: The task has returned data successfully. This indicates that the agent has finished executing the task and has returned the output.\n- **Icon**: <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"12\" height=\"12\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill=\"#47b300\" d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z\"/></svg>\n\n## Error\n\n- **Description**: If an agent reports an error for a task, it will return an ERROR status. This status allows users to identify tasks that did not execute as expected.\n- **Icon**: <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"12\" height=\"12\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill=\"#ff0000\" d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z\"/></svg>)\n\n## Continuous\n\n- **Description**: A special class for modules like keylogging since they are handled differently on the server due to their continuous nature. These tasks do not have a definite end and run continuously until stopped.\n- **Icon**: <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\" width=\"12\" height=\"12\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill=\"#B197FC\" d=\"M0 241.1C0 161 65 96 145.1 96c38.5 0 75.4 15.3 102.6 42.5L320 210.7l72.2-72.2C419.5 111.3 456.4 96 494.9 96C575 96 640 161 640 241.1v29.7C640 351 575 416 494.9 416c-38.5 0-75.4-15.3-102.6-42.5L320 301.3l-72.2 72.2C220.5 400.7 183.6 416 145.1 416C65 416 0 351 0 270.9V241.1zM274.7 256l-72.2-72.2c-15.2-15.2-35.9-23.8-57.4-23.8C100.3 160 64 196.3 64 241.1v29.7c0 44.8 36.3 81.1 81.1 81.1c21.5 0 42.2-8.5 57.4-23.8L274.7 256zm90.5 0l72.2 72.2c15.2 15.2 35.9 23.8 57.4 23.8c44.8 0 81.1-36.3 81.1-81.1V241.1c0-44.8-36.3-81.1-81.1-81.1c-21.5 0-42.2 8.5-57.4 23.8L365.3 256z\"/></svg>\n", "timestamp": "2025-10-24T22:24:38.475811"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "docs/starkiller/introduction.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/docs/starkiller/introduction.md", "content": "# Introduction\n\n[DLL\\_Cool\\_J](https://twitter.com/DLL\\_Cool\\_J) at ArchCloudLabs has a great Starkiller introduction video to compliment our lack of written documentation.\n\n{% embed url=\"https://youtu.be/zFlsxrGMScE\" %}\n", "timestamp": "2025-10-24T22:24:38.597924"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "empire/server/common/malleable/README.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/empire/server/common/malleable/README.md", "content": "# MalleableC2Parser\n\nA [**Malleable Command and Control Profile**](https://www.cobaltstrike.com/help-malleable-c2) is a \"simple program that specifies how to transform data and store it in a transaction\", and is a key feature of [**Cobal Strike**](https://www.cobaltstrike.com/)'s Beacon payload.  This library is an attempt to abstract that functionality out so that other toolsets may use the same files to define their own communication profiles.\n\n## Usage\n\n```\nimport malleable\ntry:\n  p = malleable.Profile()\n  p.ingest(\"amazon.profile\")\n  if p.validate():\n    request = p.get.construct_client(\"mydomain.sample\", \"mydata\")\n    print request.url, request.headers, request.body\nexcept MalleableError as e:\n  print str(e)\n```\n\n## Architecture\n\n### Profile\n\nThe `Profile` houses all the functionality of the Malleable C2 profile and is capable of ingesting and validating profiles.  A standard Malleable C2 profile contains a `Get Implementation`, a `Post Implementation`, and possibly a `Stager Implementation`, as well as several global variables like `sleeptime`, `jitter`, and `useragent`.\n\n### Implementation\n\nAn `Implementation` is the specific instantiation of an HTTP client-server `Transaction`, and there are three defined: `Get`, `Post`, and `Stager`.  Each `Implementation` has its own storage paradigm and purpose within the communication profile.\n\n- Get: Fetch tasking from the C2\n  - Client: metadata (Session metadata)\n  - Server: output (Beacon's tasks)\n- Post: Return results to the C2\n  - Client: id (Session ID), output (Beacon's responses)\n  - Server: output (Empty)\n- Stager: Download a payload stage\n  - Client: metadata (Empty)\n  - Server: output (Encoded payload stage)\n\n### Transaction\n\nA `Transaction` defines the core components of an interaction between a web client request and a web server response.  As such, a `Transaction` houses a `Client` and `Server` object, each holding the appropriate components included in their part of the transaction.\n\n- Client: url, verb scheme, host, port, path, parameters, headers, body\n\n- Server: code, headers, body\n\nEach `Client` and `Server` object of a `Transaction` also includes the ability to *store* and *extract* encoded data within its structure, houseing the true value of a Malleable C2 profile.\n\n### Transformation\n\nThis group of classes defines the model through which arbitrary data can undergo a sequence of reversable transformations.  A `Transform` houses the arbitrary functionality of a reversable transformation, and the following are defined:\n\n- Append\n- Base64\n- Base64Url\n- Mask\n- Netbios\n- Netbiosu\n- Prepend\n\nA `Terminator` houses the arbitrary functionality of a reversable storage mechanism, and the following are defined:\n\n- Print\n- Header\n- Parameter\n- UriAppend\n\nAnd finally, a `Container` houses a sequence of `Transforms` and their defined `Terminator`.  For example, a `Get Implementation` might include the `metadata Container`, which houses the `Base64Url Transform` and the `UriAppend Terminator`.  This means that the metadata to be sent in a GET request to the C2 server will first be Base64 encoded and url encoded, then stored at the end of the url.  The server will then retrieve the encoded data from the end of the url and proceed to url decode and base64 decode it.\n", "timestamp": "2025-10-24T22:24:43.766987"}
{"source": "github", "repo": "BC-SECURITY/Empire", "file": "empire/server/data/Invoke-Obfuscation/README.md", "url": "https://github.com/BC-SECURITY/Empire/blob/main/empire/server/data/Invoke-Obfuscation/README.md", "content": "Invoke-Obfuscation v1.8\n===============\n\n![Invoke-Obfuscation Screenshot](https://github.com/danielbohannon/danielbohannon.github.io/blob/master/Invoke-Obfuscation%20Screenshot.png)\n\nIntroduction\n------------\nInvoke-Obfuscation is a PowerShell v2.0+ compatible PowerShell command\nand script obfuscator.\n\nBackground\n----------\nIn the Fall of 2015 I decided to begin researching the flexibility of\nPowerShell's language and began cataloguing the various ways to\naccomplish a handful of common techniques that most attackers use on a\nregular basis.\n\nInitially focusing on encoded command and remote download cradle syntaxes,\nI discovered that various escape characters that did not hinder the\nexecution of the command persisted in the command line arguments, both in\nthe running process as well as what is logged in Security EID 4688 and\nSysmon EID 1 event logs. This led me to systematically explore ways of\nobfuscating each kind of \"token\" found in any PowerShell command or script.\n\nI then explored more obscure ways to perform string-level obfuscation,\nvarious encoding/encrypting techniques (like ASCII/hex/octal/binary and even\nSecureString), and finally PowerShell launch techniques to abstract the\ncommand line arguments from powershell.exe and to push it back to the parent\nand even grandparent process.\n\nPurpose\n-------\nAttackers and commodity malware have started using extremely basic\nobfuscation techniques to hide the majority of the command from the command\nline arguments of powershell.exe. I developed this tool to aid the Blue Team\nin simulating obfuscated commands based on what I currently know to be\nsyntactically possible in PowerShell 2.0-5.0 so that they can test their\ndetection capabilities of these techniques.\n\nThe tool's sole purpose is to break any assumptions that we as defenders may\nhave concerning how PowerShell commands can appear on the command line. My\nhope is that it will encourage the Blue Team to shift to looking for\nIndicators of Obfuscation on the command line in addition to updating\nPowerShell logging to include Module, ScriptBlock and Transcription logging\nas these sources simplify most aspects of the obfuscation techniques\ngenerated by this tool.\n\nUsage\n-----\nWhile all of the layers of obfuscation have been built out into separate\nscripts, most users will find the `Invoke-Obfuscation` function to be the\neasiest way to explorer and visualize the obfuscation techniques that this\nframework currently supports.\n\nInstallation\n------------\nThe source code for Invoke-Obfuscation is hosted at Github, and you may\ndownload, fork and review it from this repository\n(https://github.com/danielbohannon/Invoke-Obfuscation). Please report issues\nor feature requests through Github's bug tracker associated with this project.\n\nTo install:\n\n\tImport-Module ./Invoke-Obfuscation.psd1\n\tInvoke-Obfuscation\n\nLicense\n-------\nInvoke-Obfuscation is released under the Apache 2.0 license.\n\nRelease Notes\n-------------\nv1.0 - 2016-09-25 DerbyCon 6.0 (Louisville, Kentucky USA): PUBLIC Release of Invoke-Obfuscation.\n\nv1.1 - 2016-10-09 SANS DFIR Summit (Prague, Czech Republic): Added -f format operator re-ordering\nfunctionality to all applicable TOKEN obfuscation functions. Also added additional\nsyntax options for setting variable values.\n\nv1.2 - 2016-10-20 CODE BLUE (Tokyo, Japan): Added Type TOKEN obfuscation (direct type\ncasting with string obfuscation options for type name).\n\nv1.3 - 2016-10-22 Hacktivity (Budapest, Hungary): Added two new LAUNCHERs: CLIP+ and CLIP++.\nAlso added additional (and simpler) array char conversion syntax for all ENCODING\nfunctions that does not require For-EachObject/%.\n\nv1.4 - 2016-10-28 BruCON (Ghent, Belgium): Added new BXOR ENCODING function. Also enhanced\nrandomized case for all components of all ENCODING functions as well as for\nPowerShell execution flags for all LAUNCHERs. Finally, added -EP shorthand option\nfor -ExecutionPolicy to all LAUNCHERs as well as the optional integer representation\nof the -WindowStyle PowerShell execution flag: Normal (0), Hidden (1), Minimized (2),\nMaximized (3).\n\nv1.5 - 2016-11-04 Blue Hat (Redmond, Washington USA): Added WMIC LAUNCHER with some\nrandomization of WMIC command line arguments.\n\nv1.6 - 2017-01-24 Blue Hat IL (Tel Aviv, Israel):\n- Added CLI functionality:\nE.g., Invoke-Obfuscation -ScriptBlock {Write-Host 'CLI FTW!'} -Command 'Token\\All\\1,\nEncoding\\1,Launcher\\Stdin++\\234,Clip' -Quiet -NoExit\n- Added UNDO functionality to remove one layer of obfuscation at a time.\n- Removed Whitespace obfuscation from Token\\All\\1 to speed up large script obfuscation.\n- Added Process Argument Tree output for all launchers to aid defenders.\n- Added base menu auto-detect functionality to avoid needing to use BACK or HOME:\nE.g., if you ran TOKEN then ALL then 1, then just type LAUNCHER and you will get to\nthe LAUNCHER menu without needing to type HOME or BACK to get back to the home menu.\n- Added multi-command syntax utilized by CLI and interactive mode:\nE.g., Token\\All\\1,String\\3,Encoding\\5,Launcher\\Ps\\234,Clip\n- Added regex capability to all menu and obfuscation commands:\nE.g., Token\\*\\*,String\\[13],Encoding\\(1|6),Launcher\\.*[+]{2}\\234,Clip\n- Added OUT FILEPATH single command functionality.\n- Added decoding if powershell -enc syntax is entered as a SCRIPTBLOCK value.\n- Added alias ForEach to ForEach-Object/% randomized syntax options in all ENCODING\nfunctions.\n- Added -Key -Ke -K KEY substring syntax options to Out-SecureStringCommand.ps1.\n- Added more thorough case randomization to all \\Home\\String obfuscation functions.\n- Added -ST/-STA (Single-Threaded Apartment) flags to CLIP+ and CLIP++ launcher\nfunctions since they are required if running on PowerShell 2.0.\n- Added Get-Item/GI/Item syntax everywhere where Get-ChildItem is used to get\nvariable values.\n- Added Set-Item variable instantiation syntax to TYPE obfuscation function.\n- Added additional Invoke-Expression/IEX syntax using PowerShell automatic variables\nand environment variable value concatenations in Out-ObfuscatedStringCommand.ps1's\nOut-EncapsulatedInvokeExpression function and copied to all launchers, STRING and\nENCODING functions to add numerous command-line syntaxes for IEX.\n- Added two new JOIN syntaxes for String\\Reverse and all ENCODING obfuscation options:\n1) Added [String]::Join('',$string) JOIN syntax\n2) Added OFS-variable JOIN syntax (Output Field Separator automatic variable)\n- Added two more SecureString syntaxes to Encoding\\5:\n1) PtrToStringAnsi / SecureStringToGlobalAllocAnsi\n2) PtrToStringBSTR / SecureStringToBSTR\n- Added six GetMember alternate syntaxes for several SecureString members:\n1) PtrToStringAuto, ([Runtime.InteropServices.Marshal].GetMembers()[3].Name).Invoke\n2) PtrToStringAuto, ([Runtime.InteropServices.Marshal].GetMembers()[5].Name).Invoke\n3) PtrToStringUni , ([Runtime.InteropServices.Marshal].GetMembers()[2].Name).Invoke\n4) PtrToStringUni , ([Runtime.InteropServices.Marshal].GetMembers()[4].Name).Invoke\n5) PtrToStringAnsi, ([Runtime.InteropServices.Marshal].GetMembers()[0].Name).Invoke\n6) PtrToStringAnsi, ([Runtime.InteropServices.Marshal].GetMembers()[1].Name).Invoke\n- Updated Out-ObfuscatedTokenCommand.ps1 so that VARIABLE obfuscation won't\nencapsulate variables in ${} if they are already encapsulated (so ${${var}} won't\nhappen as this causes errors).\n- Replaced Invoke-Obfuscation.psm1 with Invoke-Obfuscation.psd1 (thanks @Carlos_Perez).\n- Fixed several TOKEN-level obfuscation bugs reported by @cobbr_io and @IISResetMe.\n\nv1.7 - 2017-03-03 nullcon (Goa, India):\n- Added 3 new LAUNCHERs: RUNDLL, RUNDLL++ and MSHTA++\n- Added additional ExecutionContext wildcard variable strings\n\nv1.8 - 2017-07-27 Black Hat (Las Vegas, Nevada USA):\n- Added 2 new ENCODING options: Special Characters and Whitespace\n\nv1.8.1 - 2017-12-19:\n- Added COMPRESS function for easier conversion of multi-line scripts to a one-liner\ncommand while drastically reducing the command length for cmd.exe command line length\nlimitation purposes.\n\nv1.8.2 - 2018-01-04:\n- Added AST obfuscation functions, which obfuscates by manipulating the structure of\nthe AbstractSyntaxTree without using many special characters.\n", "timestamp": "2025-10-24T22:24:44.854719"}
