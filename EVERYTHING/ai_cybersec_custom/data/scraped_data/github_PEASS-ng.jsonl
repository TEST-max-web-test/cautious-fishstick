{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "CONTRIBUTING.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/CONTRIBUTING.md", "content": "# Contributing to this repository\n\n## Making Suggestions \nIf you want to make a suggestion for linpeas or winpeas please use **[github issues](https://github.com/peass-ng/PEASS-ng/issues)**\n\n## Do don't know how to help?\nCheck out the **[TODO](https://github.com/peass-ng/PEASS-ng/blob/master/TODO.md) page**\n\n## Searching for files with sensitive information\nFrom the PEASS-ng release **winpeas and linpeas are auto-built** and will search for files containing sensitive information specified in the **[sesitive_files.yaml](https://github.com/peass-ng/PEASS-ng/blob/master/build_lists/sensitive_files.yaml)** file.\n\nIf you want to **contribute adding the search of new files that can contain sensitive information**, please, just update **[sesitive_files.yaml](https://github.com/peass-ng/PEASS-ng/blob/master/build_lists/sensitive_files.yaml)** and create a **PR to master** (*linpeas and winpeas will be auto-built in this PR*). You can find examples of how to contribute to this file inside the file.\nAlso, in the comments of this PR, put links to pages where and example of the file containing sensitive information can be foud.\n\n## Specific LinPEAS additions\nFrom the PEASS-ng release **linpeas is auto-build from [linpeas/builder](https://github.com/peass-ng/PEASS-ng/blob/master/linPEAS/builder/)**. Therefore, if you want to contribute adding any new check for linpeas/macpeas, please **add it in this directory and create a PR to master**. *Note that some code is auto-generated in the python but most of it it's just written in different files that will be merged into linpeas.sh*.\nThe new linpeas.sh script will be auto-generated in the PR.\n\n## Specific WinPEAS additions\nJust modify winpeas and create a PR to master.\nThe new winpeas binaries will be auto-generated in the PR.\n", "timestamp": "2025-10-21T13:30:43.700452"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "README.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/README.md", "content": "# PEASS-ng - Privilege Escalation Awesome Scripts SUITE new generation\n\n![](https://github.com/peass-ng/PEASS-ng/raw/master/linPEAS/images/peass.png)\n\n![](https://img.shields.io/badge/Black-Arch-black) ![](https://img.shields.io/badge/Arch-AUR-brightgreen) ![](https://img.shields.io/badge/Black%20Hat%20Arsenal-Asia%202020-red)\n\n# Basic Tutorial\n[![Tutorial](https://img.youtube.com/vi/2Ey1WQXNp3w/0.jpg)](https://www.youtube.com/watch?v=9_fJv_weLU0&list=PL9fPq3eQfaaDxjpXaDYApfVA_IB8T14w7)\n\n\nHere you will find **privilege escalation tools for Windows and Linux/Unix\\* and MacOS**.\n\nThese tools search for possible **local privilege escalation paths** that you could exploit and print them to you **with nice colors** so you can recognize the misconfigurations easily.\n\n- Check the **Local Windows Privilege Escalation checklist** from **[book.hacktricks.wiki](https://book.hacktricks.wiki/en/windows-hardening/checklist-windows-privilege-escalation.html)**\n- **[WinPEAS](https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS) - Windows local Privilege Escalation Awesome Script (C#.exe and .bat)**\n\n- Check the **Local Linux Privilege Escalation checklist** from **[book.hacktricks.wiki](https://book.hacktricks.wiki/en/linux-hardening/linux-privilege-escalation-checklist.html)**\n- **[LinPEAS](https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS) - Linux local Privilege Escalation Awesome Script (.sh)**\n\n## Quick Start\nFind the **latest versions of all the scripts and binaries in [the releases page](https://github.com/peass-ng/PEASS-ng/releases/latest)**.\n\n## JSON, HTML & PDF output\nCheck the **[parsers](./parsers/)** directory to **transform PEASS outputs to JSON, HTML and PDF**\n\n## Join us!\n\nIf you are a **PEASS & Hacktricks enthusiast**, you can get your hands now on **our [custom swag](https://peass.creator-spring.com/) and show how much you like our projects!**\n\nYou can also, join the üí¨ [Discord group](https://discord.gg/hRep4RUj7f) or the [telegram group](https://t.me/peass) to learn about latest news in cybersecurity and meet other cybersecurity enthusiasts, or follow me on Twitter üê¶ [@hacktricks_live](https://twitter.com/hacktricks_live).\n\n## Let's improve PEASS together\n\nIf you want to **add something** and have **any cool idea** related to this project, please let me know it in the **telegram group https://t.me/peass** or contribute reading the **[CONTRIBUTING.md](https://github.com/peass-ng/PEASS-ng/blob/master/CONTRIBUTING.md)** file.\n\n## Advisory\n\nAll the scripts/binaries of the PEAS suite should be used for authorized penetration testing and/or educational purposes only. Any misuse of this software will not be the responsibility of the author or of any other collaborator. Use it at your own machines and/or with the owner's permission.\n\n", "timestamp": "2025-10-21T13:30:44.373189"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "TODO.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/TODO.md", "content": "# TODO\n\n### Generate Nice Reports\n- [x] Create a parser from linpeas and winpeas.exe output to JSON. You can fin it [here](https://github.com/peass-ng/PEASS-ng/tree/master/parser).\n- [ ] Create a python script that generates a nice HTML/PDF from the JSON output\n\n### Generate a DB of Known Vulnerable Binaries\n- [ ] Create a DB of the md5/sha1 of binaries known to be vulnerable to command execution/Privilege Escalation\n\n### Maintain Updated LinPEAS's known SUID exploits \n- [ ] Maintain updated LinPEAS's known SUID exploits \n\n### Network Capabilities for WinPEAS\n- [ ] Give to WinPEAS network host discover capabilities and port scanner capabilities (like LinPEAS has)\n\n### Add More checks to LinPEAS and WinPEAS\n- [ ] Add more checks in LinPEAS\n- [ ] Add more checks in WinPEAS\n\n### Find a way to minify and/or obfuscate LinPEAS automatically\n- [ ] Find a way to minify and/or obfuscate linpeas.sh automatically. If you know a way contact me in Telegram or via github issues\n\n### Create a PEASS-ng Web Page were the project is properly presented\n- [ ] Let me know in Telegram or github issues if you are interested in helping with this\n\n### Relate LinPEAS and WinPEAS with the Att&ck matrix\n- [ ] In the title of each check of LinPEAS and WinPEAS indicate between parenthesis and in grey the Tactic used. Example: **Enumerating something** (*T1234*)\n- [ ] Once the previous task is done, modify LinPEAS and WinPEAS to be able to indicate just the Tactic(s) that want to be executed so the scripts only execute the checks related to those tactics. Example: `linpeas.sh -T T1590,T1591`\n", "timestamp": "2025-10-21T13:30:44.766619"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "parsers/README.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/parsers/README.md", "content": "# Privilege Escalation Awesome Scripts Parsers\n\nThese scripts allows you to transform the output of linpeas/macpeas/winpeas to JSON and then to PDF and HTML.\n\n```python3\npython3 peas2json.py </path/to/executed_peass.out> </path/to/peass.json>\npython3 json2pdf.py </path/to/peass.json> </path/to/peass.pdf>\npython3 json2html.py </path/to/peass.json> </path/to/peass.html>\n```\n\n\n## JSON Format\nBasically, **each section has**:\n - Infos (URLs or info about the section)\n - Text lines (the real text info found in the section, colors included)\n - More sections\n\nThere is a **maximun of 3 levels of sections**.\n\n```json\n{\n  \"<Main Section Name>\": {\n    \"sections\": {\n      \"<Secondary Section Name>\": {\n        \"sections\": {},\n        \"lines\": [\n          {\n            \"raw_text\": \"\\u001b[0m\\u001b[1;33m[+] \\u001b[1;32mnmap\\u001b[1;34m is available for network discover & port scanning, you should use it yourself\",\n            \"clean_text\": \"[+]  is available for network discover & port scanning, you should use it yourself\",\n            \"colors\": {\n                \"GREEN\": [\n                    \"nmap\"\n                ],\n                \"YELLOW\": [\n                    \"[+]\"\n                ]\n            }\n          }\n        ],\n        \"infos\": [\n          \"https://book.hacktricks.wiki/en/linux-hardening/privilege-escalation/index.html#kernel-exploits\"\n        ]\n      },\n      \"infos\": []\n```\n\n```json\n{\n  \"System Information\": {\n    \"sections\": {\n      \"Operative system\": {\n        \"sections\": {},\n        \"lines\": [\n          {\n            \"raw_text\": \"\\u001b[0m\\u001b[1;33m[+] \\u001b[1;32mnmap\\u001b[1;34m is available for network discover & port scanning, you should use it yourself\",\n            \"clean_text\": \"[+]  is available for network discover & port scanning, you should use it yourself\",\n            \"colors\": {\n                \"GREEN\": [\n                    \"nmap\"\n                ],\n                \"YELLOW\": [\n                    \"[+]\"\n                ]\n            }\n          }\n        ],\n        \"infos\": [\n          \"https://book.hacktricks.wiki/en/linux-hardening/privilege-escalation/index.html#kernel-exploits\"\n        ]\n      },\n      \"infos\": []\n```\n\n\nThere can also be a `<Third level Section Name>`\n\nIf you need to transform several outputs check out https://github.com/mnemonic-re/parsePEASS\n\n# TODO:\n\n- **PRs improving the code and the aspect of the final PDFs and HTMLs are always welcome!**\n", "timestamp": "2025-10-21T13:30:46.498168"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "winPEAS/README.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/winPEAS/README.md", "content": "# Windows Privilege Escalation Awesome Scripts\n\n![](https://github.com/peass-ng/PEASS-ng/raw/master/winPEAS/winPEASexe/images/winpeas.png)\n\nCheck the **Local Windows Privilege Escalation checklist** from **[book.hacktricks.wiki](https://book.hacktricks.wiki/en/windows-hardening/checklist-windows-privilege-escalation.html)**\n\nCheck more **information about how to exploit** found misconfigurations in **[book.hacktricks.wiki](https://book.hacktricks.wiki/en/windows-hardening/windows-local-privilege-escalation/index.html)**\n\n## Quick Start\nFind the **latest versions of all the scripts and binaries in [the releases page](https://github.com/peass-ng/PEASS-ng/releases/latest)**.\n\n## WinPEAS Flavours\n- [Link to WinPEAS C# .exe project](https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS/winPEASexe) (.Net >= 4.5.2 required)\n    - **Please, read the Readme of that folder to learn how to execute winpeas from memory or how make colors work among other tricks**\n- [Link to WinPEAS .ps1 project](https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS/winPEASps1)\n- [Link to WinPEAS .bat project](https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS/winPEASbat) \n\n\n## PEASS Style\n\nAre you a PEASS fan? Get now our merch at **[PEASS Shop](https://teespring.com/stores/peass)** and show your love for our favorite peas\n\n## Advisory\n\nAll the scripts/binaries of the PEAS Suite should be used for authorized penetration testing and/or educational purposes only. Any misuse of this software will not be the responsibility of the author or of any other collaborator. Use it at your own networks and/or with the network owner's permission.\n", "timestamp": "2025-10-21T13:30:47.169596"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "winPEAS/winPEASbat/README.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/winPEAS/winPEASbat/README.md", "content": "# Windows Privilege Escalation Awesome Script (.bat)\n\n![](https://github.com/peass-ng/PEASS-ng/raw/master/winPEAS/winPEASexe/images/winpeas.png)\n\n**WinPEAS is a script that search for possible paths to escalate privileges on Windows hosts. The checks are explained on [book.hacktricks.wiki](https://book.hacktricks.wiki/en/windows-hardening/windows-local-privilege-escalation/index.html)**\n\nCheck also the **Local Windows Privilege Escalation checklist** from [book.hacktricks.wiki](https://book.hacktricks.wiki/en/windows-hardening/checklist-windows-privilege-escalation.html)\n\n### WinPEAS.bat is a batch script made for Windows systems which don't support WinPEAS.exe (Net.4 required)\n\nUnfortunately this script **does not support colors** so you will need to know what are you looking for in each test and, also, you will have to know how to learn the icacls output, see below.\n\n## Windows PE using CMD (.bat)\n\nIf you want to search for files and registry that could contain passwords, set to *yes* the *long* variable at the beginning of the script.\n\nThe script will use acceschk.exe if it is available (with that name). But it is not necessary, it also uses wmic + icacls.\n\nSome of the tests in this script were extracted from **[here](https://github.com/enjoiz/Privesc/blob/master/privesc.bat)** and from **[here](https://github.com/codingo/OSCP-2/blob/master/Windows/WinPrivCheck.bat)**\n\n\n### Main checks\n\n<details>\n  <summary>Details</summary>\n\n- [x] Systeminfo --SO version and patches-- (windows suggester)\n- [x] Common known exploits (2K, XP, 2K3, 2K8, Vista, 7)\n- [x] Audit Settings\n- [x] WEF Settings\n- [x] LAPS installed?\n- [x] LSA protection?\n- [x] Credential Guard?\n- [x] WDigest?\n- [x] Number of cached cred\n- [x] UAC Settings\n- [x] AV?\n- [x] PS Settings\n- [x] Mounted disks\n- [x] SCCM installed?\n- [x] Remote Desktop Credentials Manager?\n- [x] WSUS Settings\n- [x] Processes list\n- [x] Interesting file permissions of binaries being executed \n- [x] Interesting file permissions of binaries run at startup\n- [x] AlwaysInstallElevated?\n- [x] Network info (see below)\n- [x] Users info (see below)\n- [x] Current user privileges \n- [x] Service binary permissions \n- [x] Check if permissions to modify any service registy\n- [x] Unquoted Service paths  \n- [x] DLL Hijacking in PATH\n- [x] Windows Vault\n- [x] DPAPI Master Keys\n- [x] AppCmd.exe?\n- [x] Check for unattended files\n- [x] Check for SAM & SYSTEM backups\n- [x] Check for cached GPP Passwords\n- [x] Check for McAffe SiteList.xml files\n- [x] Check for Cloud credentials\n- [x] Search for known registry to have passwords and keys inside (Winlogon...)\n- [x] Search for known files to have passwords inside (can take some minutes)\n- [x] If *long*, search files with passwords inside \n- [x] If *long*, search registry with passwords inside \n\n### More enumeration\n\n- [x] Date & Time\n- [x] Env\n- [x] Installed Software\n- [x] Running Processes \n- [x] Current Shares \n- [x] Network Interfaces\n- [x] Used Ports\n- [x] Firewall\n- [x] ARP\n- [x] Routes\n- [x] Hosts\n- [x] Cached DNS\n- [x] Info about current user (PRIVILEGES)\n- [x] List groups (info about administrators)\n- [x] Current logon users \n\n</details>\n\n### Understanding icacls permissions\n\nIcacls is the program used to check the rights that groups and users have in a file or folder.\n\nIclals is the main binary used here to check permissions.\n\nIts output is not intuitive so if you are not familiar with the command, continue reading. Take into account that in XP you need administrators rights to use icacls (for this OS is very recommended to upload sysinternals accesschk.exe to enumerate rights).\n\n**Interesting permissions**\n\n```\nD - Delete access\nF - Full access (Edit_Permissions+Create+Delete+Read+Write)\nN - No access\nM - Modify access (Create+Delete+Read+Write)\nRX - Read and eXecute access\nR - Read-only access\nW - Write-only access\n```\n\nWe will focus in **F** (full), **M** (Modify access) and **W** (write).\n\n**Use of Icacls by WinPEAS**\n\nWhen checking rights of a file or a folder the script search for the strings: *(F)* or *(M)* or *(W)* and the string \":\\\" (so the path of the file being checked will appear inside the output).\n\nIt also checks that the found right (F, M or W) can be exploited by the current user.\n\nA typical output where you dont have any nice access is:\n```\nC:\\Windows\\Explorer.EXE NT SERVICE\\TrustedInstaller:(F)\n```\n\nAn output where you have some interesting privilege will be like:\n```\nC:\\Users\\john\\Desktop\\desktop.ini NT AUTHORITY\\SYSTEM:(I)(F)\n                                MYDOMAIN\\john:(I)(F)\n```\n\nHere you can see that the privileges of user *NT AUTHORITY\\SYSTEM* appears in the output because it is in the same line as the path of the binary. However, in the next line, you can see that our user (john) has full privileges in that file. \n\nThis is the kind of outpuf that you have to look for when usnig the winPEAS.bat script.\n\n[More info about icacls here](https://ss64.com/nt/icacls.html)\n\n## Advisory\n\nAll the scripts/binaries of the PEAS Suite should be used for authorized penetration testing and/or educational purposes only. Any misuse of this software will not be the responsibility of the author or of any other collaborator. Use it at your own networks and/or with the network owner's permission.\n", "timestamp": "2025-10-21T13:30:47.562627"}
{"source": "github", "repo": "carlospolop/PEASS-ng", "file": "winPEAS/winPEASexe/README.md", "url": "https://github.com/peass-ng/PEASS-ng/blob/master/winPEAS/winPEASexe/README.md", "content": "# Windows Privilege Escalation Awesome Script (.exe)\n\n![](https://github.com/peass-ng/PEASS-ng/raw/master/winPEAS/winPEASexe/images/winpeas.png)\n\n**WinPEAS is a script that search for possible paths to escalate privileges on Windows hosts. The checks are explained on [book.hacktricks.wiki](https://book.hacktricks.wiki/en/windows-hardening/windows-local-privilege-escalation/index.html)**\n\nCheck also the **Local Windows Privilege Escalation checklist** from **[book.hacktricks.wiki](https://book.hacktricks.wiki/en/windows-hardening/checklist-windows-privilege-escalation.html)**\n\n[![youtube](https://github.com/peass-ng/PEASS-ng/raw/master/winPEAS/winPEASexe/images/screen.png)](https://youtu.be/66gOwXMnxRI)\n\n## Quick Start\n\n**.Net >= 4.5.2 is required**\n\nPrecompiled binaries:\n- Download the **[latest obfuscated and not obfuscated versions from here](https://github.com/peass-ng/PEASS-ng/releases/latest)** or **compile it yourself** (read instructions for compilation).\n\n```bash\n# Get latest release\n$url = \"https://github.com/peass-ng/PEASS-ng/releases/latest/download/winPEASany_ofs.exe\"\n\n# One liner to download and execute winPEASany from memory in a PS shell\n$wp=[System.Reflection.Assembly]::Load([byte[]](Invoke-WebRequest \"$url\" -UseBasicParsing | Select-Object -ExpandProperty Content)); [winPEAS.Program]::Main(\"\")\n\n# The previous cmd in 2 lines\n$wp=[System.Reflection.Assembly]::Load([byte[]](Invoke-WebRequest \"$url\" -UseBasicParsing | Select-Object -ExpandProperty Content));\n[winPEAS.Program]::Main(\"\") #Put inside the quotes the winpeas parameters you want to use\n\n# Download to disk and execute (super noisy)\n$wc = New-Object System.Net.WebClient\n$wc.DownloadFile(\"https://github.com/peass-ng/PEASS-ng/releases/latest/download/winPEASany_ofs.exe\", \"winPEASany_ofs.exe\")\n.\\winPEASany_ofs.exe\n\n# Load from disk in memory and execute:\n$wp = [System.Reflection.Assembly]::Load([byte[]]([IO.File]::ReadAllBytes(\"D:\\Users\\victim\\winPEAS.exe\")));\n[winPEAS.Program]::Main(\"\") #Put inside the quotes the winpeas parameters you want to use\n\n# Load from disk in base64 and execute\n##Generate winpeas in Base64:\n[Convert]::ToBase64String([IO.File]::ReadAllBytes(\"D:\\Users\\user\\winPEAS.exe\")) | Out-File -Encoding ASCII D:\\Users\\user\\winPEAS.txt\n##Now upload the B64 string to the victim inside a file or copy it to the clipboard\n\n ##If you have uploaded the B64 as afile load it with:\n$thecontent = Get-Content -Path D:\\Users\\victim\\winPEAS.txt\n ##If you have copied the B64 to the clipboard do:\n$thecontent = \"aaaaaaaa...\" #Where \"aaa...\" is the winpeas base64 string\n##Finally, load binary in memory and execute\n$wp = [System.Reflection.Assembly]::Load([Convert]::FromBase64String($thecontent))\n[winPEAS.Program]::Main(\"\") #Put inside the quotes the winpeas parameters you want to use\n\n# Loading from file and executing a winpeas obfuscated version\n##Load obfuscated version\n$wp = [System.Reflection.Assembly]::Load([byte[]]([IO.File]::ReadAllBytes(\"D:\\Users\\victim\\winPEAS-Obfuscated.exe\")));\n$wp.EntryPoint #Get the name of the ReflectedType, in obfuscated versions sometimes this is different from \"winPEAS.Program\"\n[<ReflectedType_from_before>]::Main(\"\") #Used the ReflectedType name to execute winpeas\n```\n\n## Parameters Examples\n\n```bash\nwinpeas.exe -h # Get Help\nwinpeas.exe #run all checks (except for additional slower checks - LOLBAS and linpeas.sh in WSL) (noisy - CTFs)\nwinpeas.exe systeminfo userinfo #Only systeminfo and userinfo checks executed\nwinpeas.exe notcolor #Do not color the output\nwinpeas.exe domain #enumerate also domain information\nwinpeas.exe wait #wait for user input between tests\nwinpeas.exe debug #display additional debug information\nwinpeas.exe log #log output to out.txt instead of standard output\nwinpeas.exe -linpeas=http://127.0.0.1/linpeas.sh #Execute also additional linpeas check (runs linpeas.sh in default WSL distribution) with custom linpeas.sh URL (if not provided, the default URL is: https://raw.githubusercontent.com/peass-ng/PEASS-ng/master/linPEAS/linpeas.sh)\nwinpeas.exe -lolbas  #Execute also additional LOLBAS search check\n```\n\n## Basic information\n\nThe goal of this project is to search for possible **Privilege Escalation Paths** in Windows environments.\n\nNew in this version:\n- Detect potential GPO abuse by flagging writable SYSVOL paths for GPOs applied to the current host and by highlighting membership in the \"Group Policy Creator Owners\" group.\n\n\nIt should take only a **few seconds** to execute almost all the checks and **some seconds/minutes during the lasts checks searching for known filenames** that could contain passwords (the time depened on the number of files in your home folder). By default only **some** filenames that could contain credentials are searched, you can use the **searchall** parameter to search all the list (this could will add some minutes).\n\nThe tool is based on **[SeatBelt](https://github.com/GhostPack/Seatbelt)**.\n\n### New (AD-aware) checks\n\n- Active Directory quick checks now include:\n  - gMSA readable managed passwords: enumerate msDS-GroupManagedServiceAccount objects and report those where the current user/group is allowed to retrieve the managed password (PrincipalsAllowedToRetrieveManagedPassword).\n  - AD CS (ESC4) hygiene: enumerate published certificate templates and highlight templates where the current user/group has dangerous control rights (GenericAll/WriteDacl/WriteOwner/WriteProperty/ExtendedRight) that could allow template abuse (e.g., ESC4 -> ESC1).\n\nThese checks are lightweight, read-only, and only run when the host is domain-joined.\n\n\n## Where are my COLORS?!?!?!\n\nThe **ouput will be colored** using **ansi** colors. If you are executing `winpeas.exe` **from a Windows console**, you need to set a registry value to see the colors (and open a new CMD):\n```\nREG ADD HKCU\\Console /v VirtualTerminalLevel /t REG_DWORD /d 1\n```\n\nBelow you have some indications about what does each color means exacty, but keep in mind that **Red** is for something interesting (from a pentester perspective) and **Green** is something well configured (from a defender perspective).\n\n![](https://github.com/peass-ng/PEASS-ng/raw/master/winPEAS/winPEASexe/images/colors.png)\n\n## Instructions to compile you own obfuscated version\n\n<details>\n  <summary>Details</summary>\n\nIn order to compile an **ofuscated version** of Winpeas and bypass some AVs you need to ** install dotfuscator ** in *VisualStudio*.\n\nTo install it *open VisualStudio --> Go to Search (CTRL+Q) --> Write \"dotfuscator\"* and just follow the instructions to install it.\n\nTo use **dotfuscator** you will need to **create an account** *(they will send you an email to the address you set during registration*).\n\nOnce you have installed and activated it you need to:\n1. **Compile** winpeas in VisualStudio\n2. **Open dotfuscator** app\n3. **Open** in dotfuscator **winPEAS.exe compiled**\n4. Click on **Build**\n5. The **single, minimized and obfuscated binary** will appear in a **folder called Dotfuscator inside the folder were winPEAS.exe** and the DLL were (this location will be saved by dotfuscator and by default all the following builds will appear in this folder).\n\n**I'm sorry that all of this is necessary but is worth it. Dotfuscator minimizes a bit the size of the executable and obfuscates the code**.\n\n![](https://raw.githubusercontent.com/peass-ng/PEASS-ng/master/winPEAS/winPEASexe/images/dotfuscator.PNG)\n\n**IMPORTANT**: Note that Defender will higly probable delete the winpeas iintial unobfuscated version, so you need to set as expections the origin folder of Winpeas and the folder were the obfuscated version will be saved:\n![](https://user-images.githubusercontent.com/1741662/148418852-e7ffee6a-c270-4e26-bf38-bb8977b3ad9c.png)\n</details>\n\n## Checks\n\n<details>\n  <summary>Details</summary>\n\n- **System Information**\n  - [x] Basic System info information\n  - [x] Use Watson to search for vulnerabilities\n  - [x] Enumerate Microsoft updates\n  - [x] PS, Audit, WEF and LAPS Settings\n  - [x] LSA protection\n  - [x] Credential Guard\n  - [x] WDigest\n  - [x] Number of cached cred\n  - [x] Environment Variables\n  - [x] Internet Settings\n  - [x] Current drives information\n  - [x] AV\n  - [x] Windows Defender\n  - [x] UAC configuration\n  - [x] NTLM Settings\n  - [x] Local Group Policy\n  - [x] Applocker Configuration & bypass suggestions\n  - [x] Printers\n  - [x] Named Pipes\n  - [x] AMSI Providers\n  - [x] SysMon\n  - [x] .NET Versions\n\n- **Users Information**\n  - [x] Users information\n  - [x] Current token privileges\n  - [x] Clipboard text\n  - [x] Current logged users\n  - [x] RDP sessions\n  - [x] Ever logged users\n  - [x] Autologin credentials\n  - [x] Home folders\n  - [x] Password policies\n  - [x] Local User details\n  - [x] Logon Sessions\n\n- **Processes Information**\n  - [x] Interesting processes (non Microsoft)\n\n- **Services Information**\n  - [x] Interesting services (non Microsoft) information\n  - [x] Modifiable services\n  - [x] Writable service registry binpath\n  - [x] PATH Dll Hijacking\n\n- **Applications Information**\n  - [x] Current Active Window\n  - [x] Installed software\n  - [x] AutoRuns\n  - [x] Scheduled tasks\n  - [x] Device drivers\n\n- **Network Information**\n  - [x] Current net shares\n  - [x] Mapped drives (WMI)\n  - [x] hosts file\n  - [x] Network Interfaces\n  - [x] Listening ports\n  - [x] Firewall rules\n  - [x] DNS Cache (limit 70)\n  - [x] Internet Settings\n\n- **Cloud Metadata Enumeration**\n  - [x] AWS Metadata\n  - [x] GCP Metadata\n  - [x] Azure Metadata\n\n- **Windows Credentials**\n  - [x] Windows Vault\n  - [x] Credential Manager\n  - [x] Saved RDP settings\n  - [x] Recently run commands\n  - [x] Default PS transcripts files\n  - [x] DPAPI Masterkeys\n  - [x] DPAPI Credential files\n  - [x] Remote Desktop Connection Manager credentials\n  - [x] Kerberos Tickets\n  - [x] Wifi\n  - [x] AppCmd.exe\n  - [x] SSClient.exe\n  - [x] SCCM\n  - [x] Security Package Credentials\n  - [x] AlwaysInstallElevated\n  - [x] WSUS\n\n- **Browser Information**\n  - [x] Firefox DBs\n  - [x] Credentials in firefox history\n  - [x] Chrome DBs\n  - [x] Credentials in chrome history\n  - [x] Current IE tabs\n  - [x] Credentials in IE history\n  - [x] IE Favorites\n  - [x] Extracting saved passwords for: Firefox, Chrome, Opera, Brave\n\n- **Interesting Files and registry**\n  - [x] Putty sessions\n  - [x] Putty SSH host keys\n  - [x] SuperPutty info\n  - [x] Office365 endpoints synced by OneDrive\n  - [x] SSH Keys inside registry\n  - [x] Cloud credentials\n  - [x] Check for unattended files\n  - [x] Check for SAM & SYSTEM backups\n  - [x] Check for cached GPP Passwords\n  - [x] Check for and extract creds from McAffe SiteList.xml files\n  - [x] Possible registries with credentials\n  - [x] Possible credentials files in users homes\n  - [x] Possible password files inside the Recycle bin\n  - [x] Possible files containing credentials (this take some minutes)\n  - [x] User documents (limit 100)\n  - [x] Oracle SQL Developer config files check\n  - [x] Slack files search\n  - [x] Outlook downloads\n  - [x] Machine and user certificate files\n  - [x] Office most recent documents\n  - [x] Hidden files and folders\n  - [x] Executable files in non-default folders with write permissions\n  - [x] WSL check\n\n- **Events Information**\n  - [x] Logon + Explicit Logon Events\n  - [x] Process Creation Events\n  - [x] PowerShell Events\n  - [x] Power On/Off Events\n\n- **Additional (slower) checks**\n  - [x] LOLBAS search\n  - [x] run **[linpeas.sh](https://raw.githubusercontent.com/peass-ng/PEASS-ng/master/linPEAS/linpeas.sh)** in default WSL distribution\n\n</details>\n\n## TODO\n- Add more checks\n- Mantain updated Watson (last JAN 2021)\n\nIf you want to help with any of this, you can do it using **[github issues](https://github.com/peass-ng/PEASS-ng/issues)** or you can submit a pull request.\n\nIf you find any issue, please report it using **[github issues](https://github.com/peass-ng/PEASS-ng/issues)**.\n\n**WinPEAS** is being **updated** every time I find something that could be useful to escalate privileges.\n\n## Advisory\n\nAll the scripts/binaries of the PEAS Suite should be used for authorized penetration testing and/or educational purposes only. Any misuse of this software will not be the responsibility of the author or of any other collaborator. Use it at your own networks and/or with the network owner's permission.\n", "timestamp": "2025-10-21T13:30:48.150240"}
