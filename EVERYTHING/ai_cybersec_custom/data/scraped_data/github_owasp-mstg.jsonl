{"source": "github", "repo": "OWASP/owasp-mstg", "file": "Crackmes/README.md", "url": "https://github.com/OWASP/mastg/blob/master/Crackmes/README.md", "content": "# UnCrackable Mobile Apps\n\n<img align=\"left\" width=\"100px\" src=\"../Document/Images/Other/uncrackable-logo.png\" />\n\nThese are the UnCrackable Apps for Android and iOS, a collection of mobile reverse engineering challenges. These challenges are used as examples throughout the OWASP MASTG. Of course, you can also solve them for fun.\n\nSee <https://mas.owasp.org/crackmes> for more information.\n", "timestamp": "2025-10-21T22:04:37.250872"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "License.md", "url": "https://github.com/OWASP/mastg/blob/master/License.md", "content": "## Creative Commons\n\n## Attribution-ShareAlike 4.0 International\n\nCreative Commons Corporation (\"Creative Commons\") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \"as-is\" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\n\n### Using Creative Commons Public Licenses\n\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n\n- **Considerations for licensors:** Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC-licensed material, or material used under an exception or limitation to copyright. [More considerations for licensors](http://wiki.creativecommons.org/Considerations_for_licensors_and_licensees#Considerations_for_licensors)\n\n- **Considerations for the public:** By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor's permission is not necessary for any reason–for example, because of any applicable exception or limitation to copyright–then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. [More considerations for the public](http://wiki.creativecommons.org/Considerations_for_licensors_and_licensees#Considerations_for_licensees)\n\n## Creative Commons Attribution-ShareAlike 4.0 International Public License\n\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\n### Section 1 – Definitions\n\na. **Adapted Material** means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\n\nb. **Adapter's License** means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\n\nc. **BY-SA Compatible License** means a license listed at [creativecommons.org/compatiblelicenses](http://creativecommons.org/compatiblelicenses), approved by Creative Commons as essentially the equivalent of this Public License.\n\nd. **Copyright and Similar Rights** means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\n\ne. **Effective Technological Measures** means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\n\nf. **Exceptions and Limitations** means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\n\ng. **License Elements** means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike.\n\nh. **Licensed Material** means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\n\ni. **Licensed Rights** means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\n\nj. **Licensor** means the individual(s) or entity(ies) granting rights under this Public License.\n\nk. **Share** means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\n\nl. **Sui Generis Database Rights** means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\n\nm. **You** means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n### Section 2 – Scope\n\na. **License grant.**\n\n   1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\n       A. reproduce and Share the Licensed Material, in whole or in part; and\n\n       B. produce, reproduce, and Share Adapted Material.\n\n   2. **Exceptions and Limitations.** For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\n\n   3. **Term.** The term of this Public License is specified in Section 6(a).\n\n   4. **Media and formats; technical modifications allowed.** The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\n\n   5. **Downstream recipients.**\n\n       A. **Offer from the Licensor – Licensed Material.** Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\n\n       B. **Additional offer from the Licensor – Adapted Material.** Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter's License You apply.\n\n       C. **No downstream restrictions.** You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\n   6. **No endorsement.** Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nb. **Other rights.**\n\n   1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\n\n   2. Patent and trademark rights are not licensed under this Public License.\n\n   3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n### Section 3 – License Conditions\n\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\na. **Attribution.**\n\n   1. If You Share the Licensed Material (including in modified form), You must:\n\n       A. retain the following if it is supplied by the Licensor with the Licensed Material:\n\n         i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\n\n         ii. a copyright notice;\n\n         iii. a notice that refers to this Public License;\n\n         iv. a notice that refers to the disclaimer of warranties;\n\n         v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\n       B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and\n\n       C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\n   2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\n\n   3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nb. **ShareAlike.**\n\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\n1. The Adapter's License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License.\n\n2. You must include the text of, or the URI or hyperlink to, the Adapter's License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\n\n3. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter's License You apply.\n\n### Section 4 – Sui Generis Database Rights\n\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\na. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\n\nb. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\n\nc. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\n\n### Section 5 – Disclaimer of Warranties and Limitation of Liability\n\na. **Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.**\n\nb. **To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.**\n\nc. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n### Section 6 – Term and Termination\n\na. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\n\nb. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\n   1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\n\n   2. upon express reinstatement by the Licensor.\n\n   For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\n\nc. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\n\nd. Sections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n### Section 7 – Other Terms and Conditions\n\na. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\n\nb. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\n### Section 8 – Interpretation\n\na. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\n\nb. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\n\nc. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\n\nd. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n> Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \"Licensor.\" The text of the Creative Commons public licenses is dedicated to the public domain under the [CC0 Public Domain Dedication](https://creativecommons.org/publicdomain/zero/1.0/legalcode). Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at [creativecommons.org/policies](http://creativecommons.org/policies), Creative Commons does not authorize the use of the trademark \"Creative Commons\" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\n>\n> Creative Commons may be contacted at creativecommons.org.\n", "timestamp": "2025-10-21T22:04:38.528052"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "README.md", "url": "https://github.com/OWASP/mastg/blob/master/README.md", "content": "<img width=\"180px\" align=\"right\" style=\"float: right;\" src=\"cover.png\">\n\n# OWASP Mobile Application Security Testing Guide (MASTG)\n\n[![OWASP Flagship](https://img.shields.io/badge/owasp-flagship%20project-48A646.svg)](https://owasp.org/projects/)\n[![Creative Commons License](https://img.shields.io/github/license/OWASP/mastg)](https://creativecommons.org/licenses/by-sa/4.0/ \"CC BY-SA 4.0\")\n\n[![Markdown Linter](https://github.com/OWASP/mastg/workflows/Markdown%20Linter/badge.svg)](https://github.com/OWASP/mastg/actions?query=workflow%3A%22Markdown+Linter%22)\n[![URL Checker](https://github.com/OWASP/mastg/workflows/URL%20Checker/badge.svg)](https://github.com/OWASP/mastg/actions?query=workflow%3A%22URL+Checker%22)\n\nThe **OWASP Mobile Application Security Testing Guide (MASTG)** is a comprehensive manual for mobile app security testing and reverse engineering. It describes technical processes for verifying the [OWASP Mobile Security Weakness Enumeration (MASWE)](https://github.com/OWASP/maswe \"MASWE\") weaknesses, which are in alignment with the controls listed in the [OWASP Mobile Application Verification Standard (MASVS)](https://github.com/OWASP/masvs \"MASVS\").\n\n> [OWASP MAS](https://mas.owasp.org): [OWASP MASVS](https://mas.owasp.org/MASVS) ➡ [OWASP MASWE](https://mas.owasp.org/MASWE) ➡ [OWASP MASTG](https://mas.owasp.org/MASTG)\n\n<br>\n\n<center>\n<a href=\"https://mas.owasp.org/MASTG/\">\n<img width=\"250px\" src=\"Document/Images/open_website.png\"/>\n</a>\n</center>\n\n<br>\n\n- 🌐 [Access the MASTG Web](https://mas.owasp.org/MASTG/)\n- ✅ [Get the latest Mobile App Security Checklists](https://github.com/OWASP/mastg/releases/latest)\n- ⚡ [Contribute!](https://mas.owasp.org/contributing)\n- 💥 [Play with our Crackmes](https://mas.owasp.org/crackmes)\n- 📞 [Contact Us](https://mas.owasp.org/contact)\n\n<br>\n\n## Trusted by\n\nThe OWASP MASVS, MASWE and MASTG are trusted by the following platform providers and standardization, governmental and educational institutions. [Learn more](https://mas.owasp.org/MASTG/0x02b-MASVS-MASTG-Adoption/).\n\n<a href=\"https://mas.owasp.org/MASTG/0x02b-MASVS-MASTG-Adoption/\">\n<img src=\"Document/Images/Other/trusted-by-logos.png\"/>\n</a>\n\n<br>\n\n## 🥇 MAS Advocates\n\nMAS Advocates are industry adopters of the OWASP MASVS, MASWE and MASTG who have invested a significant and consistent amount of resources to push the project forward by providing consistent high-impact contributions and continuously spreading the word. [Learn more](https://mas.owasp.org/MASTG/0x02c-Acknowledgements).\n\n<br>\n\n<a href=\"https://mas.owasp.org/MASTG/0x02c-Acknowledgements#our-mastg-advocates\">\n<img src=\"Document/Images/Other/nowsecure-logo.png\" width=\"200px;\" />\n<img src=\"Document/Images/Other/guardsquare-logo.png\" width=\"200px;\" />\n</a>\n\n<br>\n", "timestamp": "2025-10-21T22:04:38.944105"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/android/MASTG-APP-0001.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/android/MASTG-APP-0001.md", "content": "---\ntitle: AndroGoat\nplatform: android\nsource: https://github.com/satishpatnayak/AndroGoat\n---\n\nAn open source vulnerable/insecure app using Kotlin. This app has a wide range of vulnerabilities related to certificate pinning, custom URL schemes, Android Network Security Configuration, WebViews, root detection and over 20 other vulnerabilities.\n", "timestamp": "2025-10-21T22:04:40.179243"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/android/MASTG-APP-0002.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/android/MASTG-APP-0002.md", "content": "---\ntitle: Android License Validator\nplatform: android\nsource: https://mas.owasp.org/crackmes/Android#android-license-validator\n---\n\nThe Android License Validator is a crackme that implements a key validation function in native code, packaged as a standalone ELF executable for Android devices. Analyzing native code is often more challenging than Java, which is why critical business logic is frequently written this way.\n\nWhile this sample application may not represent a real-world scenario, it serves as a valuable learning tool to grasp the basics of symbolic execution. These insights can be applied in practical situations, especially when dealing with Android apps that include obfuscated native libraries. In fact, obfuscated code is often put into native libraries specifically to make the process of de-obfuscation more challenging.\n\n> By [Bernhard Mueller](https://github.com/muellerberndt \"Bernhard Mueller\")\n", "timestamp": "2025-10-21T22:04:40.302773"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/android/MASTG-APP-0003.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/android/MASTG-APP-0003.md", "content": "---\ntitle: Android UnCrackable L1\nplatform: android\nsource: https://mas.owasp.org/crackmes/Android#android-uncrackable-l1\n---\n\nA secret string is hidden somewhere in this app. Find a way to extract it.\n\n> By [Bernhard Mueller](https://github.com/muellerberndt \"Bernhard Mueller\")\n", "timestamp": "2025-10-21T22:04:40.403864"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/android/MASTG-APP-0004.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/android/MASTG-APP-0004.md", "content": "---\ntitle: Android UnCrackable L2\nplatform: android\nsource: https://mas.owasp.org/crackmes/Android#android-uncrackable-l2\n---\n\nThis app holds a secret inside. May include traces of native code.\n\n> By [Bernhard Mueller](https://github.com/muellerberndt \"Bernhard Mueller\"). Special thanks to Michael Helwig for finding and fixing an oversight in the anti-tampering mechanism.\n", "timestamp": "2025-10-21T22:04:40.508852"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/android/MASTG-APP-0005.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/android/MASTG-APP-0005.md", "content": "---\ntitle: Android UnCrackable L3\nplatform: android\nsource: https://mas.owasp.org/crackmes/Android#android-uncrackable-l3\n---\n\nThe crackme from hell! A secret string is hidden somewhere in this app. Find a way to extract it.\n\n> By [Bernhard Mueller](https://github.com/muellerberndt \"Bernhard Mueller\").\nSpecial thanks to [Eduardo Novella](https://github.com/enovella \"Eduardo Novella\") for testing, feedback and pointing out flaws in the initial build(s).\n", "timestamp": "2025-10-21T22:04:40.606719"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/android/MASTG-APP-0007.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/android/MASTG-APP-0007.md", "content": "---\ntitle: DIVA Android\nplatform: android\nsource: https://github.com/payatu/diva-android\n---\n\nAn app intentionally designed to be insecure which has received updates in 2016 and contains 13 different challenges.\n", "timestamp": "2025-10-21T22:04:40.811283"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/android/MASTG-APP-0010.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/android/MASTG-APP-0010.md", "content": "---\ntitle: InsecureBankv2\nplatform: android\nsource: https://github.com/dineshshetty/Android-InsecureBankv2\n---\n\nA vulnerable Android app made for security enthusiasts and developers to learn the Android insecurities by testing a vulnerable application. It has been updated in 2018 and contains a lot of vulnerabilities.\n", "timestamp": "2025-10-21T22:04:41.135122"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/android/MASTG-APP-0011.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/android/MASTG-APP-0011.md", "content": "---\ntitle: MASTG Hacking Playground (Java)\nplatform: android\nsource: https://github.com/OWASP/MASTG-Hacking-Playground/tree/master/Android/MASTG-Android-Java-App\n---\n\nA vulnerable Android app by the OWASP MAS project. See included vulnerabilities in [here](https://github.com/OWASP/MASTG-Hacking-Playground/wiki/Android-App).\n", "timestamp": "2025-10-21T22:04:41.247409"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/android/MASTG-APP-0012.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/android/MASTG-APP-0012.md", "content": "---\ntitle: MASTG Hacking Playground (Kotlin)\nplatform: android\nsource: https://github.com/OWASP/MASTG-Hacking-Playground/tree/master/Android/MASTG-Android-Kotlin-App\n---\n\nA vulnerable Android app by the OWASP MAS project.\n", "timestamp": "2025-10-21T22:04:41.352571"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/android/MASTG-APP-0014.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/android/MASTG-APP-0014.md", "content": "---\ntitle: InsecureShop\nplatform: android\nsource: https://github.com/hax0rgb/InsecureShop/\n---\n\nInsecureShop is an intentionally designed Android application that showcases vulnerabilities, aiming to educate developers and security experts about common pitfalls within modern Android apps. It serves as a dynamic platform for refining Android pentesting skills.\n\nThe majority of these vulnerabilities can be exploited on non-rooted devices, posing risks from both remote users and malicious third-party applications. Notably, the app doesn't utilize any APIs. InsecureShop presents an opportunity to explore a range of vulnerabilities:\n\n- **Hardcoded Credentials**: Embedded login credentials within the code.\n- **Insufficient URL Validation**: Allows loading of arbitrary URLs via Deeplinks.\n- **Arbitrary Code Execution**: Enables the execution of code from third-party packages.\n- **Access to Protected Components**: Permits third-party apps to launch secure components.\n- **Insecure Broadcast Receiver**: Registration of a broadcast enabling URL injection.\n- **Insecure Content Provider**: Accessible content provider putting user data at risk.\n\nComplementing these learning experiences, InsecureShop provides [documentation](https://docs.insecureshopapp.com/ \"InsecureShop Docs\") about the implemented vulnerabilities and their associated code. This documentation, however, refrains from offering complete solutions for each vulnerability showcased within the InsecureShop app.\n", "timestamp": "2025-10-21T22:04:41.565092"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/android/MASTG-APP-0015.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/android/MASTG-APP-0015.md", "content": "---\ntitle: Android UnCrackable L4\nplatform: android\nsource: https://mas.owasp.org/crackmes/Android#android-uncrackable-l4\n---\n\nThe Radare2 community always dreamed with its decentralized and free currency to allow r2 fans to make payments in places and transfer money between r2 users. A debug version of the r2Pay app has been developed and it will be supported very soon in many stores and websites. Can you verify that this is cryptographically unbreakable?\n\nHint: Run the APK in a non-tampered device to play a bit with the app.\n\n1. There is a master PIN code that generates green tokens (aka r2coins) on the screen. If you see a red r2coin, then this token won't be validated by the community. You need to find out the 4 digits PIN code and the salt employed as well. Flag: `r2con{PIN_NUMERIC:SALT_LOWERCASE}`\n2. There is a \"r2pay master key\" buried in layers of obfuscation and protections. Can you break the whitebox? Flag: `r2con{ascii(key)}`\n\n**Versions:**\n\n- `v0.9` - Release for OWASP MAS: Source code is available and the compilation has been softened in many ways to make the challenge easier and more enjoyable for newcomers.\n- `v1.0` - Release for R2con CTF 2020: No source code is available and many extra protections are in place.\n\n> Created and maintained by [Eduardo Novella](https://github.com/enovella \"Eduardo Novella\") & [Gautam Arvind](https://github.com/darvincisec \"Gautam Arvind\"). Special thanks to [NowSecure](https://www.nowsecure.com \"NowSecure\") for supporting this crackme.\n", "timestamp": "2025-10-21T22:04:41.672380"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/android/MASTG-APP-0016.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/android/MASTG-APP-0016.md", "content": "---\ntitle: Finstergram\nplatform: android\nsource: https://github.com/netlight/finstergram\n---\n\nFinstergram is an Android application designed with built-in security vulnerabilities to facilitate learning and teaching about common security issues in Android apps. To get started, simply open and build the project in your preferred version of Android Studio.\n\nFunctionally, Finstergram acts like a photo vault. The app requires a password to open your secret gallery, ostensibly preventing other users of the phone from accessing them. However, this security is not as foolproof as it seems.\n\nThe challenge presented involves having access to a non-rooted phone with the app installed. While you can unlock the phone, the app's password remains unknown. Your task is to identify vulnerabilities in Finstergram's code that could grant access to the secret gallery. Some initial strategies include examining the AndroidManifest file, understanding how the password is validated, investigating broadcast mechanisms, and exploring ways to leverage intents.\n", "timestamp": "2025-10-21T22:04:41.769213"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/android/MASTG-APP-0017.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/android/MASTG-APP-0017.md", "content": "---\ntitle: Disable-flutter-tls-verification\nplatform: android\nsource: https://github.com/NVISOsecurity/disable-flutter-tls-verification/blob/main/test_app/pinning.apk\n---\n\nAn android application designed to verify the @MASTG-TOOL-0101 script, which disables Flutter's TLS verification.\n", "timestamp": "2025-10-21T22:04:41.880615"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/android/MASTG-APP-0018.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/android/MASTG-APP-0018.md", "content": "---\ntitle: MASTestApp-Android-NETWORK\nplatform: android\nsource: https://github.com/sydseter/MASTestApp-Android-NETWORK\n---\n\nAn Android application designed to include weaknesses related to MASVS-NETWORK.\n", "timestamp": "2025-10-21T22:04:41.983718"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/android/MASTG-APP-0029.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/android/MASTG-APP-0029.md", "content": "---\ntitle: BugBazaar\nplatform: android\nsource: https://github.com/payatu/BugBazaar\n---\n\nBugBazaar is an open-source Android application intentionally designed to be vulnerable for hands-on security testing and training. It includes more than 30 vulnerabilities across many categories (WebView issues, intent/deeplink flaws, IPC/exported component problems, SQL injection, insecure storage and logging, hardcoded secrets, and authentication/authorization weaknesses). See the project README for the full list.\n", "timestamp": "2025-10-21T22:04:42.083175"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/ios/MASTG-APP-0023.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/ios/MASTG-APP-0023.md", "content": "---\ntitle: DVIA\nplatform: ios\nsource: http://damnvulnerableiosapp.com/\n---\n\nA vulnerable iOS app written in Objective-C which provides a platform to mobile security enthusiasts/professionals or students to test their iOS penetration testing skills.\n", "timestamp": "2025-10-21T22:04:42.517996"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/ios/MASTG-APP-0025.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/ios/MASTG-APP-0025.md", "content": "---\ntitle: iOS UnCrackable L1\nplatform: ios\nsource: https://mas.owasp.org/crackmes/iOS#ios-uncrackable-l1\n---\n\nA secret string is hidden somewhere in this app. Find a way to extract it.\n\n> By [Bernhard Mueller](https://github.com/muellerberndt \"Bernhard Mueller\")\n", "timestamp": "2025-10-21T22:04:42.729758"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/ios/MASTG-APP-0026.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/ios/MASTG-APP-0026.md", "content": "---\ntitle: iOS UnCrackable L2\nplatform: ios\nsource: https://mas.owasp.org/crackmes/iOS#ios-uncrackable-l2\n---\n\nThis app holds a secret inside - and this time it won't be tampered with!\n\n> By [Bernhard Mueller](https://github.com/muellerberndt \"Bernhard Mueller\")\n", "timestamp": "2025-10-21T22:04:42.841141"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/ios/MASTG-APP-0027.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/ios/MASTG-APP-0027.md", "content": "---\ntitle: Disable-flutter-tls-verification\nplatform: ios\nsource: https://github.com/NVISOsecurity/disable-flutter-tls-verification/blob/main/test_app/pinning.ipa\n---\n\nAn iOS application designed to verify the @MASTG-TOOL-0101 script, which disables Flutter's TLS verification.\n", "timestamp": "2025-10-21T22:04:42.936481"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/ios/MASTG-APP-0028.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/ios/MASTG-APP-0028.md", "content": "---\ntitle: iGoat-Swift\nplatform: ios\nsource: https://github.com/OWASP/iGoat-Swift\n---\n\nA Swift version of original iGoat Objective C project. Using OWASP iGoat, you can learn exploiting and defending vulnerabilities in iOS Swift applications. It contains many challenges such as:\n\n- Reverse Engineering\n- Runtime Analysis\n- Data Protection (Rest)\n- Data Protection (Transit)\n- Key Management\n- Tampering\n- Injection Flaws\n- Broken Cryptography\n- Memory Management\n- URL Scheme Attack\n- Social Engineering\n- SSL Pinning\n- Authentication\n- Jailbreak Detection\n- Side Channel Data Leaks\n- Cloud Misconfiguration\n- Crypto Challenges\n", "timestamp": "2025-10-21T22:04:43.041643"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "apps/ios/MASTG-APP-0030.md", "url": "https://github.com/OWASP/mastg/blob/master/apps/ios/MASTG-APP-0030.md", "content": "---\ntitle: iBugBazaar\nplatform: ios\nsource: https://github.com/payatu/iBugBazaar\n---\n\niBugBazaar is an open-source iOS application intentionally designed to be vulnerable for hands-on security testing and training. It contains more than 20 vulnerabilities (examples include hardcoded credentials, insecure storage and logging, WebView/XSS and redirect issues, insecure HTTP requests and authentication/authorization flaws). See the project README for the full list.\n", "timestamp": "2025-10-21T22:04:43.151251"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0001.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0001.md", "content": "---\ntitle: Use Secure Random Number Generator APIs\nalias: android-use-secure-random\nid: MASTG-BEST-0001\nplatform: android\n---\n\nUse a cryptographically secure pseudorandom number generator as provided by the platform or programming language you are using.\n\n## Java/Kotlin\n\nUse [`java.security.SecureRandom`](https://developer.android.com/reference/java/security/SecureRandom), which complies with the statistical random number generator tests specified in [FIPS 140-2, Security Requirements for Cryptographic Modules, section 4.9.1](http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.140-2.pdf) and meets the cryptographic strength requirements described in [RFC 4086: Randomness Requirements for Security](http://tools.ietf.org/html/rfc4086). It produces non-deterministic output and automatically seeds itself during object initialization using system entropy, so manual seeding is generally unnecessary and can weaken randomness if not done properly.\n\nThe default (no-argument) constructor of `SecureRandom` is recommended, as it uses the system-provided seed of appropriate length to ensure high entropy. Providing a seed (hardcoded or otherwise) to the constructor is [discouraged in the Android Documentation](https://developer.android.com/privacy-and-security/risks/weak-prng?source=studio#weak-prng-java-security-securerandom), because it risks creating deterministic output and undermining security.\n\nAlthough [the documentation](https://developer.android.com/reference/java/security/SecureRandom?hl=en#setSeed(byte[])) says the provided seed normally supplements the existing seed, this behavior may differ if an [old security provider](https://android-developers.googleblog.com/2016/06/security-crypto-provider-deprecated-in.html) is used. To avoid these pitfalls, ensure your app targets a modern Android version with an updated provider or explicitly configures a secure provider such as AndroidOpenSSL (or Conscrypt in newer releases).\n\n## Other Languages\n\nConsult the standard library or framework documentation to find the API that exposes the operating system's cryptographically secure pseudorandom number generator. This is usually the safest approach, provided there are no known vulnerabilities in that library's random number generation. For example, see the [Flutter/Dart issue](https://www.zellic.io/blog/proton-dart-flutter-csprng-prng/) as a reminder that some frameworks may have known weaknesses in their PRNG implementations.\n", "timestamp": "2025-10-21T22:04:43.796558"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0002.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0002.md", "content": "---\ntitle: Remove Logging Code\nalias: remove-logging-code\nid: MASTG-BEST-0002\nplatform: android\n---\n\nIdeally, a release build shouldn't use any logging functions, making it easier to assess sensitive data exposure.\n\n## Using ProGuard\n\nWhile preparing the production release, you can use tools like @MASTG-TOOL-0022 (included in Android Studio). To determine whether all logging functions from the `android.util.Log` class have been removed, check the ProGuard configuration file (proguard-rules.pro) for the following options (according to this [example of removing logging code](https://www.guardsquare.com/en/products/proguard/manual/examples#logging \"ProGuard\\'s example of removing logging code\") and this article about [enabling ProGuard in an Android Studio project](https://developer.android.com/studio/build/shrink-code#enable \"Android Developer - Enable shrinking, obfuscation, and optimization\")):\n\n```default\n-assumenosideeffects class android.util.Log\n{\n  public static boolean isLoggable(java.lang.String, int);\n  public static int v(...);\n  public static int i(...);\n  public static int w(...);\n  public static int d(...);\n  public static int e(...);\n  public static int wtf(...);\n}\n```\n\nNote that the example above only ensures that calls to the Log class' methods will be removed. If the string that will be logged is dynamically constructed, the code that constructs the string may remain in the bytecode. For example, the following code issues an implicit `StringBuilder` to construct the log statement:\n\nExample in Java:\n\n```java\nLog.v(\"Private key tag\", \"Private key [byte format]: \" + key);\n```\n\nExample in Kotlin:\n\n```kotlin\nLog.v(\"Private key tag\", \"Private key [byte format]: $key\")\n```\n\nThe compiled bytecode, however, is equivalent to the bytecode of the following log statement, which constructs the string explicitly:\n\nExample in Java:\n\n```java\nLog.v(\"Private key tag\", new StringBuilder(\"Private key [byte format]: \").append(key.toString()).toString());\n```\n\nExample in Kotlin:\n\n```kotlin\nLog.v(\"Private key tag\", StringBuilder(\"Private key [byte format]: \").append(key).toString())\n```\n\nProGuard guarantees removal of the `Log.v` method call. Whether the rest of the code (`new StringBuilder ...`) will be removed depends on the complexity of the code and the [ProGuard version](https://stackoverflow.com/questions/6009078/removing-unused-strings-during-proguard-optimisation \"Removing unused strings during ProGuard optimization \").\n\nThis is a security risk because the (unused) string leaks plain text data into memory, which can be accessed via a debugger or memory dumping.\n\nUnfortunately, no silver bullet exists for this issue, but one option would be to implement a custom logging facility that takes simple arguments and constructs the log statements internally.\n\n```java\nSecureLog.v(\"Private key [byte format]: \", key);\n```\n\nThen configure ProGuard to strip its calls.\n\n## Custom Logging\n\nYou can implement a custom logging facility and disable it at once only for the release builds.\n", "timestamp": "2025-10-21T22:04:43.902168"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0003.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0003.md", "content": "---\ntitle: Comply with Privacy Regulations and Best Practices\nalias: comply-with-privacy-regulations\nid: MASTG-BEST-0003\nplatform: android\n---\n\n\nRecommendations from [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n\n## Phase: Requirements\n\nIdentify and consult all relevant regulations for personal privacy. An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles. Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others.\n\n## Phase: Architecture and Design\n\nCarefully evaluate how secure design may interfere with privacy, and vice versa. Security and privacy concerns often seem to compete with each other.\n\n- From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified.\n- However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust.\n\nProgrammers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted.\n\n## References\n\n- [REF-340] U.S. Department of Commerce. \"Safe Harbor Privacy Framework\". <https://web.archive.org/web/20010223203241/http://www.export.gov/safeharbor/>. URL validated: 2023-04-07.\n- [REF-341] Federal Trade Commission. \"Financial Privacy: The Gramm-Leach Bliley Act (GLBA)\". <https://www.ftc.gov/business-guidance/privacy-security/gramm-leach-bliley-act>. URL validated: 2023-04-07.\n- [REF-342] U.S. Department of Human Services. \"Health Insurance Portability and Accountability Act (HIPAA)\". <https://www.hhs.gov/hipaa/index.html>. URL validated: 2023-04-07.\n- [REF-1047] Wikipedia. \"General Data Protection Regulation\". <https://en.wikipedia.org/wiki/General_Data_Protection_Regulation>.\n- [REF-1048] State of California Department of Justice, Office of the Attorney General. \"California Consumer Privacy Act (CCPA)\". <https://oag.ca.gov/privacy/ccpa>.\n", "timestamp": "2025-10-21T22:04:44.007859"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0004.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0004.md", "content": "---\ntitle: Exclude Sensitive Data from Backups\nalias: exclude-sensitive-data-from-backups\nid: MASTG-BEST-0004\nplatform: android\n---\n\nFor the sensitive files found, instruct the system to exclude them from the backup:\n\n- If you are using Auto Backup, mark them with the `exclude` tag in `backup_rules.xml` (for Android 11 or lower using `android:fullBackupContent`) or `data_extraction_rules.xml` (for Android 12 and higher using `android:dataExtractionRules`), depending on the target API. Make sure to use both the `cloud-backup` and `device-transfer` parameters.\n- If you are using the key-value approach, set up your [BackupAgent](https://developer.android.com/identity/data/keyvaluebackup#BackupAgent) accordingly.\n\nRefer to [\"Security recommendations for backups - Mitigations\"](https://developer.android.com/privacy-and-security/risks/backup-best-practices#security-recommendations-for-backups-mitigations) for more information.\n", "timestamp": "2025-10-21T22:04:44.108999"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0005.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0005.md", "content": "---\ntitle: Use Secure Encryption Modes\nalias: use-secure-encryption-modes\nid: MASTG-BEST-0005\nplatform: android\n---\n\nReplace insecure encryption modes with secure block cipher modes such as [AES-GCM or AES-CCM](https://csrc.nist.gov/pubs/sp/800/38/d/final) which are authenticated encryption modes that provide confidentiality, integrity, and authenticity.\n\nWe recommend avoiding CBC, which while being more secure than ECB, improper implementation, especially incorrect padding, can lead to vulnerabilities such as padding oracle attacks.\n\nFor comprehensive guidance on implementing secure encryption modes in Android, refer to the official Android Developers documentation on [Cryptography](https://developer.android.com/privacy-and-security/cryptography).\n", "timestamp": "2025-10-21T22:04:44.225950"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0006.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0006.md", "content": "---\ntitle: Use Up-to-Date APK Signing Schemes\nalias: use-up-to-date-apk-signing-schemes\nid: MASTG-BEST-0006\nplatform: android\n---\n\nEnsure that the app is signed with at least the v2 or v3 APK signing scheme, as these provide comprehensive integrity checks and protect the entire APK from tampering. For optimal security and compatibility, consider using v3, which also supports key rotation.\n\nOptionally, you can add v4 signing to enable faster [incremental updates](https://developer.android.com/about/versions/11/features#incremental) in Android 11 and above, but v4 alone does not provide security protections and should be used alongside v2 or v3.\n\nThe signing configuration can be managed through Android Studio or the `signingConfigs` section in `build.gradle` or `build.gradle.kts`. To activate both the v3 and v4 schemes, the following values must be set:\n\n```default\n// build.gradle\nandroid {\n  ...\n  signingConfigs {\n    config {\n        ...\n        enableV3Signing true\n        enableV4Signing true\n    }\n  }\n}\n```\n", "timestamp": "2025-10-21T22:04:44.370998"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0007.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0007.md", "content": "---\ntitle: Debuggable Flag Disabled in the AndroidManifest\nalias: debuggable-flag-disabled\nid: MASTG-BEST-0007\nplatform: android\n---\n\nEnsure the debuggable flag in the AndroidManifest.xml is set to `false` for all release builds.\n\n**Note:** Disabling debugging via the `debuggable` flag is an important first step but does not fully protect the app from advanced attacks. Skilled attackers can enable debugging through various means, such as binary patching (see @MASTG-TECH-0038) to allow attachment of a debugger or the use of binary instrumentation tools like @MASTG-TOOL-0001 to achieve similar capabilities. For apps requiring a higher level of security, consider implementing anti-debugging techniques as an additional layer of defense. Refer to @MASWE-0101 for detailed guidance.\n", "timestamp": "2025-10-21T22:04:44.482768"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0008.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0008.md", "content": "---\ntitle: Debugging Disabled for WebViews\nalias: debugging-disabled-webviews\nid: MASTG-BEST-0008\nplatform: android\n---\n\nEnsure that WebView debugging is disabled in production builds to prevent attackers from exploiting this feature to eavesdrop, modify, or debug communication within WebViews.\n\n- Set `WebView.setWebContentsDebuggingEnabled` to `false` in production, or remove the calls entirely if they are unnecessary.\n- If WebView debugging is required during development, ensure it is enabled only when the app is in a debuggable state by [checking the `ApplicationInfo.FLAG_DEBUGGABLE` flag at runtime](https://developer.chrome.com/docs/devtools/remote-debugging/webviews/#configure_webviews_for_debugging).\n\nFor example:\n\n```kotlin\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n    if (0 != (getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE))\n    { WebView.setWebContentsDebuggingEnabled(true); }\n}\n```\n\n**Note:** Disabling WebView debugging this way helps protect an app already running on a device. For an attacker to exploit WebView debugging, they must have physical access to the device (e.g., a stolen or test device) or remote access through malware or other malicious means. Additionally, the device must typically be unlocked, and the attacker would need to know the device PIN, password, or biometric authentication to gain full control and connect debugging tools like @MASTG-TOOL-0004 or Chrome DevTools.\n\nHowever, disabling WebView debugging does not eliminate all attack vectors. An attacker could:\n\n1. Patch the app to add calls to these APIs (see @MASTG-TECH-0038), then repackage and re-sign it (see @MASTG-TECH-0039).\n2. Use runtime method hooking (see @MASTG-TECH-0043) to enable WebView debugging dynamically at runtime.\n\nDisabling WebView debugging serves as one layer of defense to reduce risks but should be combined with other security measures.\n", "timestamp": "2025-10-21T22:04:44.655844"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0009.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0009.md", "content": "---\ntitle: Use Secure Encryption Algorithms\nalias: use-secure-encryption-algorithms\nid: MASTG-BEST-0009\nplatform: android\n---\n\nReplace insecure encryption algorithms with secure ones such as AES-256 (preferably in GCM mode) or Chacha20.\n\nFor comprehensive guidance on implementing secure encryption in Android, refer to the documentation on [\"Cryptography\"](https://developer.android.com/privacy-and-security/cryptography) and [\"Broken or risky cryptographic algorithm\"](https://developer.android.com/privacy-and-security/risks/broken-cryptographic-algorithm#weak-or-broken-cryptographic-encryption-functions-use-strong-cryptographic-algorithms-in-encryption-1B2M2Y8Asg) on the official Android Developers website.\n", "timestamp": "2025-10-21T22:04:44.760684"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0010.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0010.md", "content": "---\ntitle: Use Up-to-Date minSdkVersion\nalias: use-up-to-date-min-sdk-version\nid: MASTG-BEST-0010\nplatform: android\n---\n\nEnsure that the `minSdkVersion` in the `build.gradle` file is set to the latest version of the Android platform that aligns with your app's requirements while maintaining compatibility with your user base.\n\nCompanies often hesitate to increase `minSdkVersion` because they want their app to be available on as many devices as possible. Even though Google doesn't enforce a specific `minSdkVersion`, [as they do with the `targetSdkVersion`](https://support.google.com/googleplay/android-developer/answer/11926878), it's crucial to understand the implications of setting a low `minSdkVersion`, as it **directly impacts security**, **exposes users to vulnerabilities**, and **prevents the app from leveraging critical security protections**.\n\n## Clarifying the Difference: `targetSdkVersion` vs `minSdkVersion`\n\n- `targetSdkVersion`: Defines the highest API level the app is _designed_ to run on. The app _can_ run on lower API levels, but it won't necessarily take advantage of all new security enforcements.\n- `minSdkVersion`: Defines the lowest API level the app is _allowed_ to run on. This is crucial because many security features are only available on devices running a certain API level or higher. If you set a low `minSdkVersion`, your app **completely misses out on these protections** on older devices.\n\nEven if you set a high `targetSdkVersion`, the app can still run on older devices **without** the latest security improvements. If you set `targetSdkVersion=33` (Android 13) but `minSdkVersion=21` (Android 5), the app can still be installed on Android 5 devices, **which lack years of critical security updates**. Malware on these older devices can exploit missing security features that app-level code alone cannot address, as evidenced by vulnerabilities listed in the [Android Security Bulletins](https://source.android.com/docs/security/bulletin).\n\nWhile increasing `minSdkVersion` may slightly reduce the number of devices your app can run on, **it significantly enhances security** by ensuring that **all users have a baseline level of protection**.\n\n## Common Misconceptions\n\nThere are many misconceptions about the `minSdkVersion` and `targetSdkVersion` in Android development. The Android documentation sometimes mentions \"targeting\" when they actually mean \"running on.\" For example:\n\n> [Opt out of cleartext traffic](https://developer.android.com/privacy-and-security/security-config#CleartextTrafficPermitted): The guidance in this section applies only to apps that target Android 8.1 (API level 27) or lower. Starting with Android 9 (API level 28), cleartext support is disabled by default.\n\nThe note says the guidance applies to apps **targeting API 27 or lower**. But in reality, **even if an app targets API 28+ but is running on an older Android version (below API 28), cleartext traffic is still allowed** unless explicitly disabled. Developers might assume that just increasing `targetSdkVersion` automatically blocks cleartext, which is incorrect.\n\n## Notable Android Platform Security Improvements Over Time\n\n- Android 4.2 (API level 16) in November 2012 (introduction of SELinux)\n- Android 4.3 (API level 18) in July 2013 (SELinux became enabled by default)\n- Android 4.4 (API level 19) in October 2013 (several new APIs and ART introduced)\n- Android 5.0 (API level 21) in November 2014 (ART used by default and many other features added)\n- Android 6.0 (API level 23) in October 2015 (many new features and improvements, including granting; detailed permissions setup at runtime rather than all or nothing during installation)\n- Android 7.0 (API level 24-25) in August 2016 (new JIT compiler on ART)\n- Android 8.0 (API level 26-27) in August 2017 (a lot of security improvements)\n- Android 9 (API level 28) in August 2018 (restriction of background usage of mic or camera, introduction of lockdown mode, default HTTPS for all apps)\n- **Android 10 (API level 29)** in September 2019 (enforces TLS 1.3, access location \"only while using the app\", device tracking prevention, improve secure external storage)\n    - [Privacy (overview)](https://developer.android.com/about/versions/10/highlights#privacy_for_users \"Android 10 Privacy Overview\")\n    - [Privacy (details 1)](https://developer.android.com/about/versions/10/privacy \"Android 10 Privacy Details 1\")\n    - [Privacy (details 2)](https://developer.android.com/about/versions/10/privacy/changes \"Android 10 Privacy Details 2\")\n    - [Security (overview)](https://developer.android.com/about/versions/10/highlights#security \"Android 10 Security Overview\")\n    - [Security (details)](https://developer.android.com/about/versions/10/behavior-changes-all#security \"Android 10 Security Details\")\n- **Android 11 (API level 30)** in September 2020 (scoped storage enforcement, Permissions auto-reset, [reduced package visibility](https://developer.android.com/training/package-visibility), APK Signature Scheme v4)\n    - [Privacy (overview)](https://developer.android.com/about/versions/11/privacy \"Android 11 Privacy Overview\")\n    - [Privacy Behavior changes (all apps)](https://developer.android.com/about/versions/11/behavior-changes-all \"Android 11 Privacy Behavior changes (all apps)\")\n    - [Security Behavior changes (all apps)](https://developer.android.com/about/versions/11/behavior-changes-all#security \"Android 11 Security Behavior changes (all apps)\")\n    - [Privacy Behavior changes (apps targeting version)](https://developer.android.com/about/versions/11/behavior-changes-11#privacy \"Android 11 Privacy Behavior changes (apps targeting version)\")\n    - [Security Behavior changes (apps targeting version)](https://developer.android.com/about/versions/11/behavior-changes-11#security \"Android 11 Security Behavior changes (apps targeting version)\")\n- **Android 12 (API level 31-32)** in August 2021 (Material You, Web intent resolution, Privacy Dashboard)\n    - [Security and privacy](https://developer.android.com/about/versions/12/features#security-privacy \"Android 12 Security and privacy\")\n    - [Behavior changes (all apps)](https://developer.android.com/about/versions/12/behavior-changes-all#security-privacy \"Android 12 Behavior changes (all apps)\")\n    - [Behavior changes (apps targeting version)](https://developer.android.com/about/versions/12/behavior-changes-12#security-privacy \"Android 12 Behavior changes (apps targeting version)\")\n- **Android 13 (API level 33)** in 2022 (Safer exporting of context-registered receivers, new photo picker)\n    - [Security and privacy](https://developer.android.com/about/versions/13/features#privacy-security \"Android 13 Security and privacy\")\n    - [Privacy Behavior changes (all apps)](https://developer.android.com/about/versions/13/behavior-changes-all#privacy \"Android 13 Privacy Behavior changes (all apps)\")\n    - [Security Behavior changes (all apps)](https://developer.android.com/about/versions/13/behavior-changes-all#security \"Android 13 Security Behavior changes (all apps)\")\n    - [Privacy Behavior changes (apps targeting version)](https://developer.android.com/about/versions/13/behavior-changes-13#privacy \"Android 13 Privacy Behavior changes (apps targeting version)\")\n    - [Security Behavior changes (apps targeting version)](https://developer.android.com/about/versions/13/behavior-changes-13#security \"Android 13 Security Behavior changes (apps targeting version)\")\n- **Android 14 (API level 34)** in 2023:\n    - [Summary of changes](https://developer.android.com/about/versions/14/summary \"Android 14 Summary of changes\")\n    - [Security Behavior changes (all apps)](https://developer.android.com/about/versions/14/behavior-changes-all#security \"Android 14 Security Behavior changes (all apps)\")\n    - [Security Behavior changes (apps targeting version)](https://developer.android.com/about/versions/14/behavior-changes-14#security \"Android 14 Security Behavior changes (apps targeting version)\")\n- **Android 15 (API level 35)** in 2024:\n    - [Summary of changes](https://developer.android.com/about/versions/15/summary \"Android 15 Summary of changes\")\n    - [Security Behavior changes (all apps)](https://developer.android.com/about/versions/15/behavior-changes-all#security \"Android 15 Security Behavior changes (all apps)\")\n    - [Security Behavior changes (apps targeting version)](https://developer.android.com/about/versions/15/behavior-changes-15#security \"Android 15 Security Behavior changes (apps targeting version)\")\n- **Android 16 (API level 36)** in 2025 (:material-flask: BETA):\n    - [Summary of changes](https://developer.android.com/about/versions/16/summary \"Android 16 Summary of changes\")\n    - [Security Behavior changes (all apps)](https://developer.android.com/about/versions/16/behavior-changes-all#security \"Android 16 Security Behavior changes (all apps)\")\n    - [Security Behavior changes (apps targeting version)](https://developer.android.com/about/versions/16/behavior-changes-16#security \"Android 16 Security Behavior changes (apps targeting version)\")\n", "timestamp": "2025-10-21T22:04:44.867773"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0011.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0011.md", "content": "---\ntitle: Securely Load File Content in a WebView\nalias: securely-load-file-content-in-webview\nid: MASTG-BEST-0011\nplatform: android\n---\n\nThe recommended approach to **load file content to a WebView securely** is to use [`WebViewClient`](https://developer.android.com/reference/android/webkit/WebViewClient) with [`WebViewAssetLoader`](https://developer.android.com/reference/androidx/webkit/WebViewAssetLoader) to load assets from the app's assets or resources directory using `https://` URLs instead of insecure `file://` URLs. This ensures the content is loaded in a secure, same-origin environment and avoids exposing local files to potential cross-origin attacks.\n\nIf you must allow the WebView to load local files using the `file://` scheme, consider the following:\n\n- For apps with a `minSdkVersion` that has secure defaults for WebView file access methods, ensure that these methods are **not used** and the default values are preserved. Alternatively, explicitly set them to `false` to guarantee the WebView does not allow local file access:\n    - `setAllowFileAccess(false)`\n    - `setAllowFileAccessFromFileURLs(false)`\n    - `setAllowUniversalAccessFromFileURLs(false)`\n\n- For apps with a `minSdkVersion` that **does not have secure defaults** for these methods (e.g., older API levels), ensure that the above methods are **explicitly** set to `false` in your WebView configuration.\n\nFor more details, refer to the [official Android documentation on loading local content securely](https://developer.android.com/develop/ui/views/layout/webapps/load-local-content), especially the section on [\"Things to avoid\"](https://developer.android.com/develop/ui/views/layout/webapps/load-local-content#antipatterns).\n", "timestamp": "2025-10-21T22:04:44.982460"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0012.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0012.md", "content": "---\ntitle: Disable JavaScript in WebViews\nalias: disable-javascript-in-webviews\nid: MASTG-BEST-0012\nplatform: android\n---\n\nIf JavaScript is **not required**, explicitly disable it in WebViews by setting [`setJavaScriptEnabled(false)`](https://developer.android.com/reference/android/webkit/WebSettings.html#setJavaScriptEnabled%28boolean%29).\n\nEnabling JavaScript in WebViews **increases the attack surface** and can expose your app to severe security risks, including:\n\n- **[Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/):** Malicious JavaScript can execute within the WebView, leading to session hijacking, credential theft, or defacement.\n- **Data Exfiltration:** WebViews can access sensitive data such as cookies, tokens, or local files (e.g., via `file://` or `content://` URIs when `setAllowFileAccess(true)`, `setAllowFileAccessFromFileURLs(true)`, or `setAllowContentAccess(true)` are enabled) which can be exfiltrated by malicious scripts if `setAllowUniversalAccessFromFileURLs(true)` is set.\n- **Unauthorized Device Access:** JavaScript can be used in conjunction with `addJavascriptInterface` to exploit exposed native Android interfaces, leading to remote code execution (RCE).\n\nSometimes this is not possible due to app requirements. In those cases, ensure that you have implemented proper input validation, output encoding, and other security measures.\n\nNote: sometimes you may want to use alternatives to regular WebViews, such as [Trusted Web Activities](https://developer.android.com/guide/topics/app-bundle/trusted-web-activities) or [Custom Tabs](https://developer.chrome.com/docs/android/custom-tabs/overview/), which provide a more secure way to display web content in your app. In those cases, JavaScript is handled within the browser environment, which benefits from the latest security updates, sandboxing, and mitigations against common web vulnerabilities such as Cross-Site Scripting (XSS) and Machine-in-the-Middle (MITM) attacks.\n", "timestamp": "2025-10-21T22:04:45.087205"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0013.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0013.md", "content": "---\ntitle: Disable Content Provider Access in WebViews\nalias: disable-cont\nid: MASTG-BEST-0013\nplatform: android\n---\n\nUnlike other file content access methods from `WebSettings`, the `setAllowContentAccess` method always defaults to `true`. Therefore, **whenever access to content providers isn't explicitly needed**, ensure that the `setAllowContentAccess` method is set to `false` to prevent WebViews from accessing content providers.\n\n## Why is this important?\n\nEnabling content access in a WebView is not a vulnerability per se; it increases the number of ways an attacker could chain vulnerabilities. For example, if combined with an XSS or other injection vulnerability (or if the WebView is used to display untrusted remote content), it can allow an attacker to read sensitive data that they can send back to a remote server.\n\nAlthough there are many \"safeguards\" (such as CORS restrictions and the fact that a non-exported provider won't serve data to any external caller), the app's own content providers would be accessible even if they were not exported; they may have access to the app's private storage, both in internal and external storage. Also in some cases even other apps' files in shared/external storage, depending on the app permissions (e.g. `READ_MEDIA_IMAGES`, etc.).\n", "timestamp": "2025-10-21T22:04:45.197682"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0014.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0014.md", "content": "---\ntitle: Preventing Screenshots and Screen Recording\nalias: preventing-screenshots-and-screen-recording\nid: MASTG-BEST-0014\nplatform: android\n---\n\nEnsure the app hides sensitive content, such as card numbers and passcodes, from screenshots, screen recording, nonsecure displays, task switcher thumbnails, and remote screen sharing. Malware may capture screen output and extract confidential information. Protect on screen keyboards or custom keypad views as they may leak keystrokes from passcode fields. Screenshots can be saved in locations accessible to other apps or a local attacker.\n\nSetting [`FLAG_SECURE`](https://developer.android.com/security/fraud-prevention/activities#flag_secure) on the window prevents screenshots (or appear black), blocks screen recording, and hides content on nonsecure displays and in the system task switcher.\n\n<div style=\"display:flex; flex-wrap:wrap; gap:16px; align-items:flex-start; margin:16px 0;\">\n  <figure style=\"flex:1 1 220px; margin:0; text-align:center;\">\n    <img src=\"Images/Chapters/0x05d/task-switcher-without-flag-secure.png\" width=\"200\" alt=\"Task switcher without FLAG_SECURE\">\n    <figcaption>Without <code>FLAG_SECURE</code></figcaption>\n  </figure>\n  <figure style=\"flex:1 1 220px; margin:0; text-align:center;\">\n    <img src=\"Images/Chapters/0x05d/task-switcher-with-flag-secure.png\" width=\"200\" alt=\"Task switcher with FLAG_SECURE\">\n    <figcaption>With <code>FLAG_SECURE</code></figcaption>\n  </figure>\n</div>\n\nYou can follow the official documentation to implement `FLAG_SECURE` in your app, see [\"Secure sensitive activities\"](https://developer.android.com/security/fraud-prevention/activities).\n", "timestamp": "2025-10-21T22:04:45.303982"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0015.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0015.md", "content": "---\ntitle: Use `setRecentsScreenshotEnabled` to Prevent Screenshots When Backgrounded\nalias: preventing-screenshots-when-backgrounded\nid: MASTG-BEST-0015\nplatform: android\nstatus: placeholder\nnote: Preventing screenshots when an app is backgrounded helps protect sensitive data from being exposed in system-generated snapshots used by the Recents screen.\n---\n", "timestamp": "2025-10-21T22:04:45.408815"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0016.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0016.md", "content": "---\ntitle: Use `SECURE_FLAG` to Prevent Screenshots and Screen Recording\nalias: use-secure-flag-to-prevent-screenshots-and-screen-recording\nid: MASTG-BEST-0016\nplatform: android\nstatus: placeholder\nnote: Preventing screenshots and screen recording helps protect sensitive data from being exposed in system-generated snapshots and recordings.\n---\n", "timestamp": "2025-10-21T22:04:45.507702"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0017.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0017.md", "content": "---\ntitle: Use `setSecure` to Prevent Screenshots in SurfaceViews\nalias: preventing-screenshots-and-screen-recording\nid: MASTG-BEST-0017\nplatform: android\nstatus: placeholder\nnote: Preventing screenshots and screen recording helps protect sensitive data from being exposed in system-generated snapshots and recordings.\n---\n", "timestamp": "2025-10-21T22:04:45.608209"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0018.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0018.md", "content": "---\ntitle: Use `SecureFlagPolicy.SecureOn` to Prevent Screenshots in Compose Components\nalias: use-secureon-in-compose-components\nid: MASTG-BEST-0018\nplatform: android\nstatus: placeholder\nnote: Preventing screenshots and screen recording helps protect sensitive data from being exposed in system-generated snapshots and recordings.\n---\n", "timestamp": "2025-10-21T22:04:45.713126"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0019.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0019.md", "content": "---\ntitle: Use Non-Caching Input Types for Sensitive Fields\nalias: use-non-caching-input-types\nid: MASTG-BEST-0019\nplatform: android\nstatus: placeholder\nnote: Using non-caching input types helps protect sensitive data from being exposed in system-generated snapshots and recordings.\n---\n", "timestamp": "2025-10-21T22:04:45.811857"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0020.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0020.md", "content": "---\ntitle: Update the GMS Security Provider\nalias: update-gms-security-provider\nid: MASTG-BEST-0020\nplatform: android\n---\n\nAndroid devices vary widely in OS version and update frequency. Relying solely on platform-level security can leave apps exposed to outdated SSL/TLS implementations and known vulnerabilities.\n\n**The GMS Security Provider** (delivered via Google Play Services) addresses this by updating critical cryptographic components—such as `OpenSSL` and `TrustManager`, **independently of the Android OS**. This helps ensure **secure network communication**, even on older or unpatched devices.\n\nIt is strongly recommended to check and update the Security Provider **early during app startup**, ideally before making any secure network connections. Follow the Android Developer Documentation on [how to update the Security Provider to protect against SSL exploits](https://developer.android.com/privacy-and-security/security-gms-provider \"Updating Your Security Provider to Protect Against SSL Exploits\").\n\nIf your app needs to support devices both **with and without Google Play Services** (such as Huawei devices, Amazon tablets, or AOSP-based ROMs), implement runtime checks to detect Play Services availability.\n\n- On GMS-enabled devices, use the Security Provider to keep cryptographic libraries up to date.\n- On non-GMS devices, consider bundling a secure TLS library like [Conscrypt](https://conscrypt.org) to ensure consistent and strong network security across your entire device fleet.\n", "timestamp": "2025-10-21T22:04:46.001004"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/MASTG-BEST-0021.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/MASTG-BEST-0021.md", "content": "---\ntitle: Ensure Proper Error and Exception Handling\nalias: ensure-proper-error-and-exception-handling\nid: MASTG-BEST-0021\nplatform: android\n---\n\nSecure exception and error handling in Android is about preventing the leakage of sensitive information, managing failures gracefully, and ensuring that errors do not compromise security. User-facing error messages should remain generic, while controlled logging is reserved for developers. The [OWASP DevGuide](https://devguide.owasp.org/en/12-appendices/01-implementation-dos-donts/06-exception-error-handling/) reinforces these principles with a focus on not disclosing internal details to end users, not disclosing sensitive user data to developers, and ensuring secure failure modes that do not weaken authentication or authorization.\n\n- **Avoid leaking sensitive information**: Error messages shown to users should be generic and not reveal internal details. Logs should be sanitized to remove sensitive data and restricted to authorized personnel. The official [Log Info Disclosure](https://developer.android.com/privacy-and-security/risks/log-info-disclosure) guidance warns against including sensitive data or stack traces in production logs and recommends sanitization and reduced verbosity.\n- **Fail securely**: Exceptions must not weaken security controls. Any failure in security checks should result in a **deny** outcome, blocking the action rather than allowing weaker assumptions or insecure fallbacks. Security mechanisms should default to denying access until explicitly granted, since fail-open paths are a common attack vector.\n- **Validate strictly and abort on errors**: Unexpected formats or values should be treated as errors. Do not continue in a partially verified state. For example, if a network call succeeds at the transport layer but fails validation at the application layer, processing must stop. If the validation fails, do not try to sanitize the data to make the validation succeed.\n\nSee these resources for more details:\n\n- [\"OWASP - Fail Securely\"](https://owasp.org/www-community/Fail_securely)\n- [\"OWASP - Improper Error Handling\"](https://owasp.org/www-community/Improper_Error_Handling)\n- [\"CWE-636 - Not Failing Securely ('Failing Open')\"](https://cwe.mitre.org/data/definitions/636.html)\n", "timestamp": "2025-10-21T22:04:46.213041"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "best-practices/index.md", "url": "https://github.com/OWASP/mastg/blob/master/best-practices/index.md", "content": "---\nhide: toc\ntitle: Best Practices\n---\n\n??? info \"About the MASTG Best Practices\"\n\n    The MASTG Best Practices are a collection of specific strategies and practices that can be used to prevent or mitigate security and privacy risks in mobile apps. \n\n    Each Best Practices is designed to be simple and focused and may apply to one or multiple tests in the MASTG.\n", "timestamp": "2025-10-21T22:04:46.404810"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CODE/MASTG-DEMO-0025/MASTG-DEMO-0025.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CODE/MASTG-DEMO-0025/MASTG-DEMO-0025.md", "content": "---\nplatform: android\ntitle: Uses of Build.VERSION.SDK_INT with semgrep\nid: MASTG-DEMO-0025\ncode: [kotlin]\ntest: MASTG-TEST-0245\n---\n\n### Sample\n\nThe following sample uses the `Build.VERSION.SDK_INT` API to check the operating system version.\n\n{{ MastgTest.kt # MastgTest_reversed.java }}\n\n### Steps\n\nLet's run @MASTG-TOOL-0110 rules against the sample code.\n\n{{ ../../../../rules/mastg-android-sdk-version.yml }}\n\n{{ run.sh }}\n\n### Observation\n\nThe output file shows usages of the API that verifies the operating system version.\n\n{{ output.txt }}\n\n### Evaluation\n\nThe test passes because the output shows references to SDK version check API.\n", "timestamp": "2025-10-21T22:04:48.344843"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CODE/MASTG-DEMO-0025/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CODE/MASTG-DEMO-0025/output.txt", "content": "                  \n                  \n┌────────────────┐\n│ 1 Code Finding │\n└────────────────┘\n                           \n    MastgTest_reversed.java\n    ❯❱ rules.mastg-android-sdk-version\n          [MASVS-PLATFORM] Make sure to verify that your app runs on a device with an up-to-date OS version to\n          make sure it satisfy your security requirements                                                     \n                                                                                                              \n           26┆ return Build.VERSION.SDK_INT;\n\n", "timestamp": "2025-10-21T22:04:48.529467"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CODE/MASTG-DEMO-0050/MASTG-DEMO-0050.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CODE/MASTG-DEMO-0050/MASTG-DEMO-0050.md", "content": "---\nplatform: android\ntitle: Identifying Insecure Dependencies in Android Studio\nid: MASTG-DEMO-0050\ncode: [java]\ntest: MASTG-TEST-0272\n---\n\n### Sample\n\n{{ build.gradle.kts }}\n\n### Steps\n\nExecute `gradle` in Android Studio to trigger @MASTG-TOOL-0131.\n\n{{ run.sh }}\n\n### Observation\n\nThe scan identified 303 unique dependencies, four of which are vulnerable, as well as five vulnerabilities. More vulnerabilities may be found over time, so this number may increase. If you have used the `suppress.xml` file, there are 57 suppressed vulnerabilities.\n\n{{ output.txt }}\n\n### Evaluation\n\nDue to the number of vulnerabilities, the `dependency-check` report can be lengthy and can contain false positives. Review each of the reported instances. The dependency `okhttp-4.9.1.jar` added in the `build.gradle.kts` has known vulnerabilities and should be updated to the latest version.\n", "timestamp": "2025-10-21T22:04:48.900457"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CODE/MASTG-DEMO-0050/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CODE/MASTG-DEMO-0050/output.txt", "content": "...\n[redacted for readability]\n...\n        {\n            \"isVirtual\": false,\n            \"fileName\": \"okhttp-4.9.1.jar\",\n            \"filePath\": \"\\/Users\\/sushi2k\\/.gradle\\/caches\\/modules-2\\/files-2.1\\/com.squareup.okhttp3\\/okhttp\\/4.9.1\\/51215279c3fe472c59b6b7dd7491e6ac2e28a81b\\/okhttp-4.9.1.jar\",\n            \"md5\": \"018ce5d28ab7958a1f0bb93b35215ef6\",\n            \"sha1\": \"51215279c3fe472c59b6b7dd7491e6ac2e28a81b\",\n            \"sha256\": \"6afdd8f35f4eb60df965c290fa3acf29443fa986545113d0729b8461f6571f8f\",\n            \"description\": \"Square\\u2019s meticulous HTTP client for Java and Kotlin.\",\n            \"license\": \"The Apache Software License, Version 2.0: http:\\/\\/www.apache.org\\/licenses\\/LICENSE-2.0.txt\",\n...\n[redacted for readability]\n...\n            \"packages\": [\n                {\n                    \"id\": \"pkg:maven\\/com.squareup.okhttp3\\/okhttp@4.9.1\",\n                    \"confidence\": \"HIGH\",\n                    \"url\": \"https:\\/\\/ossindex.sonatype.org\\/component\\/pkg:maven\\/com.squareup.okhttp3\\/okhttp@4.9.1?utm_source=dependency-check&utm_medium=integration&utm_content=12.1.1\"\n                }\n            ],\n             \"vulnerabilityIds\": [\n                {\n                    \"id\": \"cpe:2.3:a:squareup:okhttp:4.9.1:*:*:*:*:*:*:*\",\n                    \"confidence\": \"HIGHEST\",\n                    \"url\": \"https:\\/\\/nvd.nist.gov\\/vuln\\/search\\/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Asquareup&cpe_product=cpe%3A%2F%3Asquareup%3Aokhttp&cpe_version=cpe%3A%2F%3Asquareup%3Aokhttp%3A4.9.1\"\n                },\n                {\n                    \"id\": \"cpe:2.3:a:squareup:okhttp3:4.9.1:*:*:*:*:*:*:*\",\n                    \"confidence\": \"HIGHEST\",\n                    \"url\": \"https:\\/\\/nvd.nist.gov\\/vuln\\/search\\/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Asquareup&cpe_product=cpe%3A%2F%3Asquareup%3Aokhttp3&cpe_version=cpe%3A%2F%3Asquareup%3Aokhttp3%3A4.9.1\"\n                }\n            ],\n            \"vulnerabilities\": [\n                {\n                    \"source\": \"OSSINDEX\",\n                    \"name\": \"CVE-2021-0341\",\n                    \"severity\": \"HIGH\",\n                    \"cvssv3\": {\n                        \"baseScore\": 7.5,\n                        \"attackVector\": \"NETWORK\",\n                        \"attackComplexity\": \"LOW\",\n                        \"privilegesRequired\": \"NONE\",\n                        \"userInteraction\": \"NONE\",\n                        \"scope\": \"UNCHANGED\",\n                        \"confidentialityImpact\": \"HIGH\",\n                        \"integrityImpact\": \"NONE\",\n                        \"availabilityImpact\": \"NONE\",\n                        \"baseSeverity\": \"HIGH\",\n                        \"version\": \"3.1\"\n                    },\n                    \"cwes\": [\n                        \"CWE-295\"\n                    ],\n                    \"description\": \"In verifyHostName of OkHostnameVerifier.java, there is a possible way to accept a certificate for the wrong domain due to improperly used crypto. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-8.1 Android-9 Android-10 Android-11Android ID: A-171980069\\n\\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\\/\\/ossindex.sonatype.org\\/vulnerability\\/CVE-2021-0341 for details\",\n                    \"notes\": \"\",\n                    \"references\": [\n                        {\n                            \"source\": \"OSSIndex\",\n                            \"url\": \"https:\\/\\/source.android.com\\/security\\/bulletin\\/2021-02-01#android-runtime\",\n                            \"name\": \"https:\\/\\/source.android.com\\/security\\/bulletin\\/2021-02-01#android-runtime\"\n                        },\n                        {\n                            \"source\": \"OSSINDEX\",\n                            \"url\": \"https:\\/\\/ossindex.sonatype.org\\/vulnerability\\/CVE-2021-0341?component-type=maven&component-name=com.squareup.okhttp3%2Fokhttp&utm_source=dependency-check&utm_medium=integration&utm_content=12.1.1\",\n                            \"name\": \"[CVE-2021-0341] CWE-295: Improper Certificate Validation\"\n                        },\n                        {\n                            \"source\": \"OSSIndex\",\n                            \"url\": \"http:\\/\\/web.nvd.nist.gov\\/view\\/vuln\\/detail?vulnId=CVE-2021-0341\",\n                            \"name\": \"http:\\/\\/web.nvd.nist.gov\\/view\\/vuln\\/detail?vulnId=CVE-2021-0341\"\n                        },\n                        {\n                            \"source\": \"OSSIndex\",\n                            \"url\": \"https:\\/\\/github.com\\/square\\/okhttp\\/pull\\/6353\",\n                            \"name\": \"https:\\/\\/github.com\\/square\\/okhttp\\/pull\\/6353\"\n                        }\n                    ],\n                    \"vulnerableSoftware\": [\n                        {\n                            \"software\": {\n                                \"id\": \"cpe:2.3:a:com.squareup.okhttp3:okhttp:4.9.1:*:*:*:*:*:*:*\",\n                                \"vulnerabilityIdMatched\": \"true\"\n                            }\n                        }\n                    ]\n                },\n                {\n                    \"source\": \"NVD\",\n                    \"name\": \"CVE-2023-0833\",\n                    \"severity\": \"MEDIUM\",\n                    \"cvssv3\": {\n                        \"baseScore\": 5.5,\n                        \"attackVector\": \"LOCAL\",\n                        \"attackComplexity\": \"LOW\",\n                        \"privilegesRequired\": \"LOW\",\n                        \"userInteraction\": \"NONE\",\n                        \"scope\": \"UNCHANGED\",\n                        \"confidentialityImpact\": \"HIGH\",\n                        \"integrityImpact\": \"NONE\",\n                        \"availabilityImpact\": \"NONE\",\n                        \"baseSeverity\": \"MEDIUM\",\n                        \"exploitabilityScore\": \"1.8\",\n                        \"impactScore\": \"3.6\",\n                        \"version\": \"3.1\"\n                    },\n                    \"cwes\": [\n                        \"CWE-209\"\n                    ],\n                    \"description\": \"A flaw was found in Red Hat's AMQ-Streams, which ships a version of the OKHttp component with an information disclosure flaw via an exception triggered by a header containing an illegal value. This issue could allow an authenticated attacker to access information outside of their regular permissions.\",\n                    \"notes\": \"\",\n...\n[redacted for readability]\n...", "timestamp": "2025-10-21T22:04:49.007473"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CODE/MASTG-DEMO-0051/MASTG-DEMO-0051.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CODE/MASTG-DEMO-0051/MASTG-DEMO-0051.md", "content": "---\nplatform: android\ntitle: Identifying Insecure Dependencies through SBOM Creation\nid: MASTG-DEMO-0051\ntest: MASTG-TEST-0272\n---\n\n### Steps\n\nExecute `cdxgen` in the root directory of the Android Studio project.\n\n{{ run.sh }}\n\nThis will create a SBOM file that can be uploaded to @MASTG-TOOL-0132 by following @MASTG-TECH-0130.\n\n### Observation\n\nIn the project of @MASTG-TOOL-0132, where the SBOM has been uploaded, the scan should have identified over 200 unique dependencies (components) with 7 vulnerable dependencies and 7 vulnerabilities (as more vulnerabilities might be found over time this number might increase).\n\n{{ sbom.json }}\n\n### Evaluation\n\nReview each of the reported instances. The dependency `okhttp` has 2 known vulnerabilities and `okio` has 1 known vulnerability and they should all be updated to the latest version.\n\n{{ output.json }}\n", "timestamp": "2025-10-21T22:04:49.362393"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CRYPTO/MASTG-DEMO-0007/MASTG-DEMO-0007.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CRYPTO/MASTG-DEMO-0007/MASTG-DEMO-0007.md", "content": "---\nplatform: android\ntitle: Common Uses of Insecure Random APIs\nid: MASTG-DEMO-0007\ncode: [java]\ntest: MASTG-TEST-0204\n---\n\n### Sample\n\n{{ MastgTest.kt # MastgTest_reversed.java }}\n\n### Steps\n\nLet's run our @MASTG-TOOL-0110 rule against the sample code.\n\n{{ ../../../../rules/mastg-android-random-apis-insufficient-entropy.yml }}\n\n{{ run.sh }}\n\n### Observation\n\nThe rule has identified five instances in the code file where an insecure random number generator is used. The specified line numbers can be located in the original code for further investigation and remediation.\n\n{{ output.txt }}\n\n### Evaluation\n\nReview each of the reported instances.\n\n- Line 12 seems to be used to generate random numbers for security purposes, in this case for generating authentication tokens.\n- Line 17 is part of the function `get_random`. Review any calls to this function to ensure that the random number is not used in a security-relevant context.\n- Line 27 is part of the password generation function which is a security-critical operation.\n\nNote that line 37 did not trigger the rule because the random number is generated using `SecureRandom` which is a secure random number generator.\n", "timestamp": "2025-10-21T22:04:50.011668"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CRYPTO/MASTG-DEMO-0007/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CRYPTO/MASTG-DEMO-0007/output.txt", "content": "                   \n                   \n┌─────────────────┐\n│ 3 Code Findings │\n└─────────────────┘\n                           \n    MastgTest_reversed.java\n    ❯❱ rules.mastg-android-random-apis-insufficient-entropy\n          [MASVS-CRYPTO-1] The application makes use of random number generators with insufficient entropy.\n                                                                                                           \n           22┆ double random1 = new Random().nextDouble();\n            ⋮┆----------------------------------------\n           23┆ double random2 = 1 + Math.random();\n            ⋮┆----------------------------------------\n           27┆ password.append(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".charAt(ran\n               dom.nextInt(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".length())));  \n\n", "timestamp": "2025-10-21T22:04:50.126503"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CRYPTO/MASTG-DEMO-0008/MASTG-DEMO-0008.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CRYPTO/MASTG-DEMO-0008/MASTG-DEMO-0008.md", "content": "---\nplatform: android\ntitle: Uses of Non-random Sources\nid: MASTG-DEMO-0008\ncode: [java]\ntest: MASTG-TEST-0205\n---\n\n### Sample\n\n{{ MastgTest.kt # MastgTest_reversed.java }}\n\n### Steps\n\nLet's run our @MASTG-TOOL-0110 rule against the sample code.\n\n{{ ../../../../rules/mastg-android-non-random-use.yml }}\n\n{{ run.sh }}\n\n### Observation\n\nThe rule has identified some instances in the code file where an non-random source is used. The specified line numbers can be located in the original code for further investigation and remediation.\n\n{{ output.txt }}\n\n### Evaluation\n\nReview each of the reported instances.\n", "timestamp": "2025-10-21T22:04:50.492409"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CRYPTO/MASTG-DEMO-0008/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CRYPTO/MASTG-DEMO-0008/output.txt", "content": "                   \n                   \n┌─────────────────┐\n│ 2 Code Findings │\n└─────────────────┘\n                           \n    MastgTest_reversed.java\n    ❯❱ rules.mastg-android-non-random-use\n          [MASVS-CRYPTO-1] The application makes use of non-random sources.\n                                                                           \n           22┆ int random1 = (int) new Date().getTime();\n            ⋮┆----------------------------------------\n           24┆ int random2 = c.get(14);\n\n", "timestamp": "2025-10-21T22:04:50.592280"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CRYPTO/MASTG-DEMO-0012/MASTG-DEMO-0012.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CRYPTO/MASTG-DEMO-0012/MASTG-DEMO-0012.md", "content": "---\nplatform: android\ntitle: Cryptographic Key Generation With Insufficient Key Length\ncode: [java]\nid: MASTG-DEMO-0012\ntest: MASTG-TEST-0208\n---\n\n### Sample\n\n{{ MastgTest.kt # MastgTest_reversed.java }}\n\n### Steps\n\nLet's run our @MASTG-TOOL-0110 rule against the sample code.\n\n{{ ../../../../rules/mastg-android-key-generation-with-insufficient-key-length.yml }}\n\n{{ run.sh }}\n\n### Observation\n\nThe rule has identified some instances in the code file where cryptographic keys are being generated. The specified line numbers can be located in the reverse-engineered code for further investigation and remediation.\n\n{{ output.txt }}\n\n### Evaluation\n\nThe test fails because the key size of the RSA key is set to `1024` bits, and the size of the AES key is set to `128`, which is considered insufficient in both cases.\n", "timestamp": "2025-10-21T22:04:51.015473"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CRYPTO/MASTG-DEMO-0012/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CRYPTO/MASTG-DEMO-0012/output.txt", "content": "                   \n                   \n┌─────────────────┐\n│ 2 Code Findings │\n└─────────────────┘\n                           \n    MastgTest_reversed.java\n    ❯❱ rules.mastg-android-key-generation-with-insufficient-key-length\n          [MASVS-CRYPTO] Make sure that the key size is according to security best practices\n                                                                                            \n           27┆ KeyPairGenerator generator = KeyPairGenerator.getInstance(\"RSA\");\n           28┆ generator.initialize(1024, new SecureRandom());\n            ⋮┆----------------------------------------\n           31┆ KeyGenerator keyGen1 = KeyGenerator.getInstance(\"AES\");\n           32┆ keyGen1.init(128);\n\n", "timestamp": "2025-10-21T22:04:51.120948"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CRYPTO/MASTG-DEMO-0017/MASTG-DEMO-0017.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CRYPTO/MASTG-DEMO-0017/MASTG-DEMO-0017.md", "content": "---\nplatform: android\ntitle: Use of Hardcoded AES Key in SecretKeySpec with semgrep\nid: MASTG-DEMO-0017\ntest: MASTG-TEST-0212\ntools: [semgrep]\ncode: [java]\n---\n\n### Sample\n\n{{ MastgTest.kt # MastgTest_reversed.java }}\n\n### Steps\n\nLet's run our @MASTG-TOOL-0110 rule against the sample code.\n\n{{ ../../../../rules/mastg-android-hardcoded-crypto-keys-usage.yml }}\n\n{{ run.sh }}\n\n### Observation\n\nThe rule has identified one instance in the code file where hardcoded keys is used. The specified line numbers can be located in the reverse-engineered code for further investigation and remediation.\n\n{{ output.txt }}\n\n### Evaluation\n\nThe test fails because hardcoded cryptographic keys are present in the code. Specifically:\n\n- On line 24, a byte array that represents a cryptographic key is directly hardcoded into the source code.\n- This hardcoded key is then used on line 26 to create a `SecretKeySpec`.\n- Additionally, on line 30, another instance of hardcoded data is used to create a separate `SecretKeySpec`.\n", "timestamp": "2025-10-21T22:04:51.479918"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CRYPTO/MASTG-DEMO-0017/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CRYPTO/MASTG-DEMO-0017/output.txt", "content": "                   \n                   \n┌─────────────────┐\n│ 3 Code Findings │\n└─────────────────┘\n                           \n    MastgTest_reversed.java\n    ❯❱ rules.mastg-android-hardcoded-crypto-keys-usage\n          [MASVS-CRYPTO-1] Hardcoded cryptographic keys found in use.\n                                                                     \n           24┆ byte[] keyBytes = {108, 97, 107, 100, 115, 108, 106, 107, 97, 108, 107, 106, 108, 107, 108,\n               115};                                                                                      \n           25┆ Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n           26┆ SecretKeySpec secretKey = new SecretKeySpec(keyBytes, \"AES\");\n            ⋮┆----------------------------------------\n           26┆ SecretKeySpec secretKey = new SecretKeySpec(keyBytes, \"AES\");\n            ⋮┆----------------------------------------\n           30┆ SecretKeySpec badSecretKeySpec = new SecretKeySpec(bytes, \"AES\");\n\n", "timestamp": "2025-10-21T22:04:51.579976"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CRYPTO/MASTG-DEMO-0022/MASTG-DEMO-0022.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CRYPTO/MASTG-DEMO-0022/MASTG-DEMO-0022.md", "content": "---\nplatform: android\ntitle: Uses of Broken Symmetric Encryption Algorithms in Cipher with semgrep\nid: MASTG-DEMO-0022\ncode: [kotlin]\ntest: MASTG-TEST-0221\n---\n\n### Sample\n\nThe code snippet below shows sample code contains use of insecure encryption algorithms.\n\n{{ MastgTest.kt # MastgTest_reversed.java }}\n\n### Steps\n\nLet's run our @MASTG-TOOL-0110 rule against the sample code.\n\n{{ ../../../../rules/mastg-android-broken-encryption-algorithms.yaml }}\n\n{{ run.sh }}\n\n### Observation\n\nThe rule has identified several instances in the code file where broken encryption algorithms are used. The specified line numbers can be located in the reverse-engineered code for further investigation and remediation.\n\n{{ output.txt }}\n\n### Evaluation\n\nThe test fails due to the use of broken encryption algorithms, specifically DES, 3DES, RC4 and Blowfish.\n\nSee @MASTG-TEST-0221 for more information.\n", "timestamp": "2025-10-21T22:04:51.931878"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CRYPTO/MASTG-DEMO-0022/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CRYPTO/MASTG-DEMO-0022/output.txt", "content": "                   \n                   \n┌─────────────────┐\n│ 4 Code Findings │\n└─────────────────┘\n                           \n    MastgTest_reversed.java\n    ❯❱ rules.mastg-android-broken-encryption-algorithms\n          [MASVS-CRYPTO-1] Broken encryption algorithms found in use.\n                                                                     \n           39┆ Cipher cipher = Cipher.getInstance(\"DES\");\n            ⋮┆----------------------------------------\n           62┆ Cipher cipher = Cipher.getInstance(\"DESede\");\n            ⋮┆----------------------------------------\n           81┆ Cipher cipher = Cipher.getInstance(\"RC4\");\n            ⋮┆----------------------------------------\n          100┆ Cipher cipher = Cipher.getInstance(\"Blowfish\");\n\n", "timestamp": "2025-10-21T22:04:52.039782"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CRYPTO/MASTG-DEMO-0023/MASTG-DEMO-0023.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CRYPTO/MASTG-DEMO-0023/MASTG-DEMO-0023.md", "content": "---\nplatform: android\ntitle: Uses of Broken Encryption Modes in Cipher with semgrep\nid: MASTG-DEMO-0023\ncode: [kotlin]\ntest: MASTG-TEST-0232\n---\n\n### Sample\n\nThe sample uses broken encryption modes.\n\n{{ MastgTest.kt # MastgTest_reversed.java }}\n\n### Steps\n\nLet's run our @MASTG-TOOL-0110 rule against the sample code.\n\n{{ ../../../../rules/mastg-android-broken-encryption-modes.yaml }}\n\n{{ run.sh }}\n\n### Observation\n\nThe rule has identified six instances in the code file where broken encryption modes are used. The specified line numbers can be located in the reverse-engineered code for further investigation and remediation.\n\n{{ output.txt }}\n\n### Evaluation\n\nThe test fails since the output contains several instances of the ECB mode of AES in different transformations explicitly or implicitly (ECB is the default mode for AES if not specified).\n\nSee @MASTG-TEST-0232 for more information.\n", "timestamp": "2025-10-21T22:04:52.410117"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CRYPTO/MASTG-DEMO-0023/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CRYPTO/MASTG-DEMO-0023/output.txt", "content": "                   \n                   \n┌─────────────────┐\n│ 6 Code Findings │\n└─────────────────┘\n                           \n    MastgTest_reversed.java\n    ❯❱ rules.mastg-android-broken-encryption-modes\n          [MASVS-CRYPTO-1] Broken encryption modes found in use.\n                                                                \n           36┆ Cipher cipher = Cipher.getInstance(\"AES\");\n            ⋮┆----------------------------------------\n           55┆ Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n            ⋮┆----------------------------------------\n           76┆ Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            ⋮┆----------------------------------------\n           95┆ Cipher cipher = Cipher.getInstance(\"AES/ECB/ISO10126Padding\");\n            ⋮┆----------------------------------------\n          118┆ Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n            ⋮┆----------------------------------------\n          141┆ Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n\n", "timestamp": "2025-10-21T22:04:52.521898"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-CRYPTO/MASTG-DEMO-0058/MASTG-DEMO-0058.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-CRYPTO/MASTG-DEMO-0058/MASTG-DEMO-0058.md", "content": "---\nplatform: android\ntitle: Use of Insecure ECB Block Mode in KeyGenParameterSpec\nid: MASTG-DEMO-0058\ncode: [kotlin]\ntest: MASTG-TEST-0232\n---\n\n### Sample\n\nThe code below generates symmetric encryption keys meant to be stored in the Android KeyStore, but it does so using the ECB block mode, which is considered broken due to practical known-plaintext attacks and is disallowed by NIST for data encryption. The method used to set the block modes is [`KeyGenParameterSpec.Builder#setBlockModes(...)`](https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.Builder#setBlockModes(java.lang.String[])):\n\n```kotlin\npublic KeyGenParameterSpec.Builder setBlockModes (String... blockModes)\n```\n\nCurrent versions of Android prohibit the usage of keys with for ECB in some cases. For example, it is not possible to use the key to encrypt data by the default. Nevertheless, there are some case, where ECB can still be used:\n\n- Decrypt data\n- Encrypt data with a key given `setRandomizedEncryptionRequired` is set to `false`\n\n{{ MastgTest.kt }}\n\n### Steps\n\n1. Install the app on a device (@MASTG-TECH-0005)\n2. Make sure you have @MASTG-TOOL-0001 installed on your machine and the frida-server running on the device\n3. Run `run.sh` to spawn the app with Frida\n4. Click the **Start** button\n5. Stop the script by pressing `Ctrl+C` and/or `q` to quit the Frida CLI\n\n{{ hooks.js # run.sh }}\n\n### Observation\n\nThe output shows all instances of block modes mode that were found at runtime. A backtrace is also provided to help identify the location in the code.\n\n{{ output.json }}\n\n### Evaluation\n\nThe method `setBlockModes` has now been called three times with ECB as one of the block modes.\n\nThe test fails, as key used with these `KeyGenParameterSpec` can now be used used to insecurely encrypt data.\n\nYou can automatically evaluate the output using tools like `jq` as demonstrated in `evaluation.sh`.\n\n{{ evaluate.sh }}\n\nSee @MASTG-TEST-0232 for more information.\n", "timestamp": "2025-10-21T22:04:52.937284"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-NETWORK/MASTG-DEMO-0048/MASTG-DEMO-0048.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-NETWORK/MASTG-DEMO-0048/MASTG-DEMO-0048.md", "content": "---\ntitle: SSLSocket Connection to Wrong Host Server Allowed by Lack of HostnameVerifier\nplatform: android\nid: MASTG-DEMO-0048\ntest: MASTG-TEST-0234\ncode: [kotlin]\nkind: fail\n---\n\n## Overview\n\nThe following sample code demonstrates how to connect to a @MASTG-TOOL-0143 server that delivers a certificate with a **wrong or invalid hostname** using `SSLSocket`, which inherently [doesn't perform any hostname validation checks](https://developer.android.com/training/articles/security-ssl.html#WarningsSslSocket).\n\n**Note:** The connection succeeds even if the app has a fully secure Network Security Configuration (NSC) in place because `SSLSocket` is not affected by it.\n\n{{ MastgTest.kt # MastgTest_reversed.java }}\n\n## Steps\n\n1. Reverse engineer the app (@MASTG-TECH-0017).\n2. Run a static analysis (@MASTG-TECH-0014) tool and look for all usages of `SSLSocket` and `HostnameVerifier`.\n\n{{ ../../../../rules/mastg-android-ssl-socket-hostnameverifier.yml }}\n\n{{ run.sh }}\n\n## Observation\n\nThe output contains a list of locations where `SSLSocket` and `HostnameVerifier` are used.\n\n{{ output.txt }}\n\n## Evaluation\n\nThe test case fails due to the missing `HostnameVerifier`.\n\n**Note:** If the app were to use a `HostnameVerifier`, the **connection would abort** with an exception like the following, which can be read in the logcat output:\n\n```plaintext\njavax.net.ssl.SSLException: Hostname verification failed for host: wrong.host.badssl.com\n```\n", "timestamp": "2025-10-21T22:04:53.494147"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-NETWORK/MASTG-DEMO-0048/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-NETWORK/MASTG-DEMO-0048/output.txt", "content": "                   \n                   \n┌─────────────────┐\n│ 3 Code Findings │\n└─────────────────┘\n                           \n    MastgTest_reversed.java\n     ❱ rules.mastg-android-ssl-socket-hostnameverifier\n           35┆ SocketFactory socketFactory = SSLSocketFactory.getDefault();\n            ⋮┆----------------------------------------\n           37┆ SSLSocketFactory sslSocketFactory = (SSLSocketFactory) socketFactory;\n            ⋮┆----------------------------------------\n           38┆ Socket createSocket = sslSocketFactory.createSocket(\"wrong.host.badssl.com\", 443);\n\n", "timestamp": "2025-10-21T22:04:53.596176"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-NETWORK/MASTG-DEMO-0049/MASTG-DEMO-0049.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-NETWORK/MASTG-DEMO-0049/MASTG-DEMO-0049.md", "content": "---\ntitle: SSLSocket Connection to Wrong Host Server Blocked by HostnameVerifier\nplatform: android\nid: MASTG-DEMO-0049\ntest: MASTG-TEST-0234\ncode: [kotlin]\nkind: pass\n---\n\n## Overview\n\nThe following sample code demonstrates how to connect to a @MASTG-TOOL-0143 server that delivers a certificate with a **wrong or invalid hostname** using `SSLSocket` which inherently [doesn't perform any hostname validation checks](https://developer.android.com/training/articles/security-ssl.html#WarningsSslSocket).\n\nHowever, the code implements a custom `HostnameVerifier` that performs hostname verification, thus blocking the connection to the server with the wrong hostname.\n\n{{ MastgTest.kt # MastgTest_reversed.java }}\n\n## Steps\n\n1. Reverse engineer the app (@MASTG-TECH-0017).\n2. Run a static analysis (@MASTG-TECH-0014) tool and look for all usages of `SSLSocket` and `HostnameVerifier`.\n\n{{ ../../../../rules/mastg-android-ssl-socket-hostnameverifier.yml }}\n\n{{ run.sh }}\n\n## Observation\n\nThe output contains a list of locations where `SSLSocket` and `HostnameVerifier` are used.\n\n{{ output.txt }}\n\n## Evaluation\n\nThe test case passes due to the use of a `HostnameVerifier`.\n\nAs expected, **the connection aborts** as you can see in the logcat output which contains the following exception:\n\n```plaintext\njavax.net.ssl.SSLException: Hostname verification failed for host: wrong.host.badssl.com\n```\n", "timestamp": "2025-10-21T22:04:53.895064"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-NETWORK/MASTG-DEMO-0049/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-NETWORK/MASTG-DEMO-0049/output.txt", "content": "                   \n                   \n┌─────────────────┐\n│ 5 Code Findings │\n└─────────────────┘\n                           \n    MastgTest_reversed.java\n     ❱ rules.mastg-android-ssl-socket-hostnameverifier\n           42┆ SocketFactory socketFactory = SSLSocketFactory.getDefault();\n            ⋮┆----------------------------------------\n           44┆ SSLSocketFactory sslSocketFactory = (SSLSocketFactory) socketFactory;\n            ⋮┆----------------------------------------\n           45┆ Socket createSocket = sslSocketFactory.createSocket(\"wrong.host.badssl.com\", 443);\n            ⋮┆----------------------------------------\n           49┆ hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier();\n            ⋮┆----------------------------------------\n           61┆ if (!hostnameVerifier.verify(\"wrong.host.badssl.com\", session)) {\n\n", "timestamp": "2025-10-21T22:04:53.996383"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-NETWORK/MASTG-DEMO-0054/MASTG-DEMO-0054.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-NETWORK/MASTG-DEMO-0054/MASTG-DEMO-0054.md", "content": "---\nplatform: android\ntitle: Use of a TrustManager that Does Not Validate Certificate Chains\nid: MASTG-DEMO-0054\ncode: [kotlin]\ntest: MSTG-TEST-0282\n---\n\n### Sample\n\nThis sample connects to <https://tlsexpired.no>, which has an expired certificate, to demonstrate the insecure use of a custom `TrustManager` that ignores certificate chain validity. It does this by overriding the `checkServerTrusted(...)` method and leaving it empty, which effectively disables certificate validation.\n\n{{ MastgTest.kt # MastgTest_reversed.java }}\n\nIf the app wouldn't use the insecure `TrustManager`, you would see this message:\n\n```txt\n[https://tlsexpired.no] Error: java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.\n```\n\n### Steps\n\nLet's run our @MASTG-TOOL-0110 rule against the sample code.\n\n{{ ../../../../rules/mastg-android-network-checkservertrusted.yml }}\n\n{{ run.sh }}\n\n### Observation\n\nThe rule identified one instance in the code where `checkServerTrusted(...)` is used without exception handling.\n\n{{ output.txt }}\n\n### Evaluation\n\nThe test fails because of the presence of the `checkServerTrusted(...)` method on in the `TrustManager` implementation, as well as the absence of exceptions being thrown.\n", "timestamp": "2025-10-21T22:04:54.323074"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-NETWORK/MASTG-DEMO-0054/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-NETWORK/MASTG-DEMO-0054/output.txt", "content": "                  \n                  \n┌────────────────┐\n│ 1 Code Finding │\n└────────────────┘\n                           \n    MastgTest_reversed.java\n    ❯❱ rules.mastg-android-network-checkservertrusted\n          Improper Server Certificate verification detected.\n                                                            \n           92┆ @Override // javax.net.ssl.X509TrustManager\n           93┆ public void checkServerTrusted(X509Certificate[] chain, String authType) {\n           94┆ }\n\n", "timestamp": "2025-10-21T22:04:54.457744"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-NETWORK/MASTG-DEMO-0055/MASTG-DEMO-0055.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-NETWORK/MASTG-DEMO-0055/MASTG-DEMO-0055.md", "content": "---\nplatform: android\ntitle: Use of the HostnameVerifier that Allows Any Hostname\nid: MASTG-DEMO-0055\ncode: [kotlin]\ntest: MSTG-TEST-0283\n---\n\n### Sample\n\nThis sample connects to a URL with an subject alternative name that does not match the hostname and configures a `HostnameVerifier` that allows any hostname.\n\n{{ MastgTest.kt # MastgTest_reversed.java }}\n\n### Steps\n\nLet's run our @MASTG-TOOL-0110 rule against the sample code.\n\n{{ ../../../../rules/mastg-android-network-hostname-verification.yml }}\n\n{{ run.sh }}\n\n### Observation\n\nThe rule identified one instance of the use of the `HostnameVerifier` in the code.\n\n{{ output.txt }}\n\n### Evaluation\n\nThe test fails because the app uses a `HostnameVerifier` that allows any hostname.\n\nIn this case, since the rule only checks for the presence of a `HostnameVerifier` and does not validate the implementation of the verifier, you need to manually validate the app's reverse-engineered code and inspect the provided code locations.\n\nThe rule points to MastgTest_reversed.java, where we can see the following code:\n\n```java\n            connection.setHostnameVerifier(new HostnameVerifier() { // from class: org.owasp.mastestapp.MastgTest$$ExternalSyntheticLambda0\n                @Override // javax.net.ssl.HostnameVerifier\n                public final boolean verify(String str, SSLSession sSLSession) {\n                    return MastgTest.fetchUrl$lambda$1(str, sSLSession);\n                }\n            });\n            ...\n\n    /* JADX INFO: Access modifiers changed from: private */\n    public static final boolean fetchUrl$lambda$1(String hostname, SSLSession sSLSession) {\n        Log.w(\"HOSTNAME_VERIFIER\", \"Insecurely allowing host: \" + hostname);\n        return true;\n    }\n```\n\nWe can see how:\n\n- the app sets a custom `HostnameVerifier` on the HTTPS connection.\n- the verifier calls `fetchUrl$lambda$1`, which logs a warning and returns `true`.\n\nThis way we can conclude that the hostname verification does **not** properly validate that the server's hostname matches the certificate subject alternative name.\n", "timestamp": "2025-10-21T22:04:54.795376"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-NETWORK/MASTG-DEMO-0055/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-NETWORK/MASTG-DEMO-0055/output.txt", "content": "                  \n                  \n┌────────────────┐\n│ 1 Code Finding │\n└────────────────┘\n                           \n    MastgTest_reversed.java\n    ❯❱ rules.mastg-android-network-hostname-verification\n          Improper server hostname verification detected\n                                                        \n           69┆ connection.setHostnameVerifier(new HostnameVerifier() { // from class:\n               org.owasp.mastestapp.MastgTest$$ExternalSyntheticLambda0              \n           70┆     @Override // javax.net.ssl.HostnameVerifier\n           71┆     public final boolean verify(String str, SSLSession sSLSession) {\n           72┆         return MastgTest.fetchUrl$lambda$1(str, sSLSession);\n           73┆     }\n           74┆ });\n\n", "timestamp": "2025-10-21T22:04:54.910093"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-NETWORK/MASTG-DEMO-0056/MASTG-DEMO-0056.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-NETWORK/MASTG-DEMO-0056/MASTG-DEMO-0056.md", "content": "---\nplatform: android\ntitle: WebView Ignoring TLS Errors in onReceivedSslError\nid: MASTG-DEMO-0056\ncode: [kotlin]\ntest: MSTG-TEST-0284\n---\n\n### Sample\n\nThis sample connects to <https://tlsexpired.no>, which has an expired SSL certificate, and demonstrates how a WebView ignores SSL/TLS errors by overriding the `onReceivedSslError(...)` method without proper validation. The app calls `proceed()` unconditionally, which allows the connection to continue even when there are TLS errors.\n\n{{ MastgTestWebView.kt # MastgTestWebView_reversed.java }}\n\n### Steps\n\nLet's run our @MASTG-TOOL-0110 rule against the sample code.\n\n{{ ../../../../rules/mastg-android-network-onreceivedsslerror.yml }}\n\n{{ run.sh }}\n\n### Observation\n\nThe rule identified one instance of the use of the `onReceivedSslError(...)` in the code.\n\n{{ output.txt }}\n\n### Evaluation\n\nThe test fails because the app uses a WebView that calls `proceed()` in its `onReceivedSslError(...)` method without validating the TLS error at all. You can manually validate this in the app's reverse-engineered code by inspecting the provided code locations.\n\nIn this case:\n\n```java\n            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n                ...\n                String message = this.this$0.getSslErrorMessage(error);\n                Log.e(\"MastgTestWebView\", \"SSL errors onReceivedSslError: \" + message);\n                Log.e(\"MastgTestWebView\", error.toString());\n                handler.proceed();\n            }\n```\n\nBy doing this, the app is effectively ignoring every TLS error even though we can see that the expired certificate error is logged (see @MASTG-TECH-0009):\n\n{{ logcat.txt }}\n", "timestamp": "2025-10-21T22:04:55.267833"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-NETWORK/MASTG-DEMO-0056/logcat.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-NETWORK/MASTG-DEMO-0056/logcat.txt", "content": "[ERROR:ssl_client_socket_impl.cc(877)] handshake failed; returned -1, SSL error code 1, net_error -201\nSSL errors onReceivedSslError: The date of the certificate is invalid.\nprimary error: 4 certificate: Issued to: OU=Insubordinate,O=Insecure CA,1.2.840.113549.1.9.1=#161a696e73656375726540746c737265766f636174696f6e2e6f7267,C=NO,ST=Buskerud,CN=tlsexpired.no;\nIssued by: 1.2.840.113549.1.9.1=#16126a6f68616e4073796473657465722e636f6d,CN=sydseter.com,OU=Sydseter,O=Sydseter,L=Drammen,ST=Drammen,C=NO;\n on URL: https://tlsexpired.no/\n", "timestamp": "2025-10-21T22:04:55.379577"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-NETWORK/MASTG-DEMO-0056/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-NETWORK/MASTG-DEMO-0056/output.txt", "content": "                  \n                  \n┌────────────────┐\n│ 1 Code Finding │\n└────────────────┘\n                                  \n    MastgTestWebView_reversed.java\n    ❯❱ rules.mastg-android-network-onreceivedsslerror\n          Improper use of onReceivedSslError handler\n                                                    \n           27┆ @Override // android.webkit.WebViewClient\n           28┆ public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n           29┆     Intrinsics.checkNotNullParameter(view, \"view\");\n           30┆     Intrinsics.checkNotNullParameter(handler, \"handler\");\n           31┆     Intrinsics.checkNotNullParameter(error, \"error\");\n           32┆     String message = this.this$0.getSslErrorMessage(error);\n           33┆     Log.e(\"MastgTestWebView\", \"SSL errors onReceivedSslError: \" + message);\n           34┆     Log.e(\"MastgTestWebView\", error.toString());\n           35┆     handler.proceed();\n           36┆ }\n\n", "timestamp": "2025-10-21T22:04:55.484122"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-NETWORK/MASTG-DEMO-0057/MASTG-DEMO-0057.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-NETWORK/MASTG-DEMO-0057/MASTG-DEMO-0057.md", "content": "---\nplatform: android\ntitle: Network Security Configuration Allows User-Added Certificates\nid: MASTG-DEMO-0057\ncode: [xml, kotlin]\ntest: MSTG-TEST-0286\n---\n\n### Sample\n\nThis sample Kotlin code fetches the @MASTG-TOOL-0143 server <https://mitm-software.badssl.com/> using `HttpsURLConnection`, which is not normally allowed because the certificate is not trusted by the system. However, due to the Network Security Configuration that permits user-added CA certificates, the connection is allowed to proceed.\n\n{{ MastgTest.kt # AndroidManifest.xml # AndroidManifest_reversed.xml # network_security_config.xml }}\n\n!!! note \"Running the app\"\n\n    You don't need to run the app on a device or emulator to test this demo because it focuses on the Network Security Configuration. However, if you want to run the app and verify that the connection is allowed, some additional preparation is required:\n\n    1. Obtain the root CA certificate for the server. For this example, obtain it  here: <https://github.com/chromium/badssl.com/blob/master/certs/src/crt/ca-mitm-software.crt>\n    2. Copy the certificate file onto the device or emulator. For example, use the command `adb push ca-mitm-software.crt /sdcard/Download/`.\n    3. On the device open **Settings > Security > Encryption & credentials > Install from storage** and select your certificate file. Confirm it installs under \"User credentials\".\n\n### Steps\n\nFirst of all we obtain the AndroidManifest.xml file (`AndroidManifest_reversed.xml`), which contains the `android:networkSecurityConfig` attribute pointing to the app's Network Security Configuration file (`network_security_config.xml`).\n\nLet's run our @MASTG-TOOL-0110 rule against the sample code.\n\n{{ ../../../../rules/mastg-android-network-insecure-trust-anchors.yml }}\n\n{{ run.sh }}\n\n### Observation\n\nThe rule has identified an element in the Network Security Configuration that allows user-added CA certificates.\n\n{{ output.txt }}\n\n### Evaluation\n\nThe test fails due to the `<certificates src=\"user\" />` element in the Network Security Configuration which allows user-added CA certificates.\n", "timestamp": "2025-10-21T22:04:55.800915"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-NETWORK/MASTG-DEMO-0057/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-NETWORK/MASTG-DEMO-0057/output.txt", "content": "                  \n                  \n┌────────────────┐\n│ 1 Code Finding │\n└────────────────┘\n                               \n    network_security_config.xml\n    ❯❱ rules.mastg-android-network-insecure-trust-anchors\n          The network security config allows certificates imported on the user's behalf thereby allowing\n          connections to potentially insecure CAs                                                       \n                                                                                                        \n            6┆ <certificates src=\"user\" />\n\n", "timestamp": "2025-10-21T22:04:55.900413"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-PLATFORM/MASTG-DEMO-0029/MASTG-DEMO-0029.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-PLATFORM/MASTG-DEMO-0029/MASTG-DEMO-0029.md", "content": "---\nplatform: android\ntitle: Uses of WebViews Allowing Content Access with semgrep\nid: MASTG-DEMO-0029\ncode: [kotlin]\ntest: MASTG-TEST-0250\n---\n\n## Sample\n\nThis sample demonstrates how a WebView in an Android app, when configured to allow content access, can be exploited by an attacker to interact with exposed `content://` URIs. While `content://` URIs are simply interfaces to content providers, a misconfigured or overly permissive content provider may grant access to sensitive resources—such as internal app files. In this example, internal file access is used as a representative impact to illustrate the full attack chain, though actual impacts depend on the specific behavior of the content provider.\n\nIn this demo we focus on the static analysis of the code using semgrep and don't run the app nor the attacker server.\n\nSee @MASTG-DEMO-0030 for all the details about the sample and the attack.\n\n{{ MastgTestWebView.kt # MastgTestWebView_reversed.java # AndroidManifest.xml # AndroidManifest_reversed.xml # filepaths.xml }}\n\n## Steps\n\nRun @MASTG-TOOL-0110 rules against the sample code.\n\n{{ ../../../../rules/mastg-android-webview-allow-local-access.yml }}\n\n{{ run.sh }}\n\n## Observation\n\nThe output shows **4 results** related to WebView configuration calls. However, it is important to note that the method `setAllowContentAccess` is not explicitly called in the code.\n\n{{ output.txt }}\n\n## Evaluation\n\nThe test **fails** due to the following WebView settings being configured:\n\n{{ evaluation.txt }}\n\nThe method `setAllowContentAccess` is not explicitly called in the code, which means it remains at its default value (`true`).\n", "timestamp": "2025-10-21T22:04:56.467790"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-PLATFORM/MASTG-DEMO-0029/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-PLATFORM/MASTG-DEMO-0029/output.txt", "content": "                   \n                   \n┌─────────────────┐\n│ 3 Code Findings │\n└─────────────────┘\n                                  \n    MastgTestWebView_reversed.java\n     ❱ rules.mastg-android-webview-settings\n          [MASVS-PLATFORM-2] Detected WebView settings.\n                                                       \n           27┆ WebSettings $this$mastgTest_u24lambda_u240 = webView.getSettings();\n            ⋮┆----------------------------------------\n           28┆ $this$mastgTest_u24lambda_u240.setJavaScriptEnabled(true);\n            ⋮┆----------------------------------------\n           29┆ $this$mastgTest_u24lambda_u240.setAllowUniversalAccessFromFileURLs(true);\n\n", "timestamp": "2025-10-21T22:04:56.691296"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-PLATFORM/MASTG-DEMO-0030/MASTG-DEMO-0030.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-PLATFORM/MASTG-DEMO-0030/MASTG-DEMO-0030.md", "content": "---\nplatform: android\ntitle: Uses of WebViews Allowing Content Access with Frida\nid: MASTG-DEMO-0030\ncode: [kotlin]\ntest: MASTG-TEST-0251\n---\n\n## Sample\n\nThis sample demonstrates the use of WebViews allowing content access in an Android app and how an attacker could exploit these settings to exfiltrate sensitive data from the app's internal storage using content URIs.\n\n{{ AndroidManifest.xml # filepaths.xml # MastgTestWebView.kt }}\n\n### AndroidManifest.xml\n\nThe app declares a content provider in the `AndroidManifest.xml` file, specifically a `FileProvider` with access to the app's internal storage as specified in the `filepaths.xml` file.\n\nNote that for the exfiltration to work we include the `android:usesCleartextTraffic=\"true\"` attribute in the `AndroidManifest.xml` file to allow cleartext traffic. However, the same script would work with HTTPS endpoints.\n\n### MastgTestWebView.kt\n\nThe code includes a script that demonstrates how an attacker could exploit the WebView settings to exfiltrate sensitive data **from the app's internal storage** using content URIs (`content://`).\n\nThis sample:\n\n- writes a sensitive file (`api-key.txt`) into internal storage using `File.writeText()`.\n- configures a WebView to\n    - allow JavaScript execution (`javaScriptEnabled = true`).\n    - allow universal access from file URLs (`allowUniversalAccessFromFileURLs = true`). Otherwise, the `XMLHttpRequest` to a `content://` URI from a `file://` base URL would be blocked due to CORS policy.\n    - content access is allowed by default (not explicitly called).\n- to simulate an XSS attack, the WebView uses `loadDataWithBaseURL` to load an HTML page with embedded JavaScript controlled by the attacker.\n\n### HTML and JavaScript\n\nSee `vulnerableHtml` in the MastgTestWebView.kt file.\n\n1. The attacker's script (running in the context of the vulnerable page) uses `XMLHttpRequest` to load the sensitive file from the content provider. The file is located at `/data/data/org.owasp.mastestapp/files/api-key.txt`\n2. `fetch` is used to send the file contents to an external server running on the host machine while the app is executed in the Android emulator (`http://10.0.2.2:5001/receive`).\n\n**Note:** For demonstration purposes, the exfiltrated data is displayed on screen. However, in a real attack scenario, the user would not notice as the data would be exfiltrated silently.\n\n### server.py\n\nA simple Python server that listens for incoming requests on port 5001 and logs the received data.\n\n{{ server.py }}\n\n## Steps\n\n1. Install the app on a device (@MASTG-TECH-0005)\n2. Make sure you have @MASTG-TOOL-0001 installed on your machine and the frida-server running on the device\n3. Run `run.sh` to spawn the app with Frida\n4. Click the **Start** button\n5. Stop the script by pressing `Ctrl+C` and/or `q` to quit the Frida CLI\n\n{{ run.sh # script.js }}\n\nThe Frida script is designed to enumerate instances of `WebView` in the application and list their configuration values. The script does not explicitly hook the setters of the `WebView` settings but instead calls the `getSettings()` method to retrieve the current configuration.\n\nThe script performs the following steps:\n\n1. Enumerates all instances of `WebView` in the application.\n2. For each `WebView` instance, it calls the `getSettings()` method to retrieve the current settings.\n3. Prints the configuration values of the `WebView` settings.\n4. Prints a backtrace when the `getSettings()` method is called to help identify where in the code the settings are being accessed.\n\n## Observation\n\nThe output shows that Frida found one WebView instance and lists many of the WebView settings. A backtrace is also provided to help identify where in the code the settings are being accessed.\n\n{{ output.txt }}\n\nWe can also see how the sensitive data was exfiltrated to the attacker's server by inspecting the server logs.\n\n{{ output_server.txt }}\n\n## Evaluation\n\nThe test **fails** due to the following WebView settings being configured:\n\n{{ evaluation.txt }}\n\nNote that the method `setAllowContentAccess` is not explicitly called in the code. However, using this approach we can't really tell since we're inspecting the WebView settings after they have been configured.\n\nAs indicated by the backtrace in the output, the settings were called in the `mastgTest` method of the `MastgTestWebView` class. Since this app is a demo and code obfuscation tools like ProGuard or R8 are not applied, we can even see the exact file name and line number where the settings were configured: `MastgTestWebView.kt:25`. In a production build, this information is typically removed or obfuscated unless explicitly preserved.\n", "timestamp": "2025-10-21T22:04:57.069548"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-PLATFORM/MASTG-DEMO-0030/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-PLATFORM/MASTG-DEMO-0030/output.txt", "content": "\n[*] WebView.getSettings() called on instance: android.webkit.WebView{5c7fac1 VFEDHVC.. ......I. 0,0-0,0}\n\nBacktrace:\nandroid.webkit.WebView.getSettings(Native Method)\norg.owasp.mastestapp.MastgTestWebView.mastgTest(MastgTestWebView.kt:25)\norg.owasp.mastestapp.MainActivityWebViewKt$WebViewScreen$1$1$2$1.invoke(MainActivityWebView.kt:88)\norg.owasp.mastestapp.MainActivityWebViewKt$WebViewScreen$1$1$2$1.invoke(MainActivityWebView.kt:85)\nandroidx.compose.ui.viewinterop.ViewFactoryHolder.<init>(AndroidView.android.kt:343)\nandroidx.compose.ui.viewinterop.AndroidView_androidKt$createAndroidViewNodeFactory$1.invoke(AndroidView.android.kt:274)\nandroidx.compose.ui.viewinterop.AndroidView_androidKt$createAndroidViewNodeFactory$1.invoke(AndroidView.android.kt:273)\nandroidx.compose.ui.viewinterop.AndroidView_androidKt$AndroidView$$inlined$ComposeNode$1.invoke(Composables.kt:254)\n\n\n\n[*] Triggering enumeration after getSettings() call...\n\n[*] Finished enumerating WebView instances!\n\n[*] Found WebView instance: android.webkit.WebView{5c7fac1 VFEDHVC.. ........ 0,0-904,1796}\n\t[+] JavaScriptEnabled: true\n\t[+] AllowFileAccess: false\n\t[+] AllowFileAccessFromFileURLs: false\n\t[+] AllowUniversalAccessFromFileURLs: true\n\t[+] AllowContentAccess: true\n\t[+] MixedContentMode: 1\n\t[+] SafeBrowsingEnabled: true\n", "timestamp": "2025-10-21T22:04:57.283241"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-PLATFORM/MASTG-DEMO-0031/MASTG-DEMO-0031.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-PLATFORM/MASTG-DEMO-0031/MASTG-DEMO-0031.md", "content": "---\nplatform: android\ntitle: Uses of WebViews Allowing Local File Access with Frida\nid: MASTG-DEMO-0031\ncode: [kotlin]\ntest: MASTG-TEST-0253\n---\n\n## Sample\n\nThis sample demonstrates the use of WebViews allowing local file access in an Android app and how an attacker could exploit these settings to exfiltrate sensitive data from the app's internal storage using file URIs.\n\n{{ AndroidManifest.xml # MastgTestWebView.kt }}\n\n### AndroidManifest.xml\n\nNote that for the exfiltration to work we include the `android:usesCleartextTraffic=\"true\"` attribute in the `AndroidManifest.xml` file to allow cleartext traffic. However, the same script would work with HTTPS endpoints.\n\n### MastgTestWebView.kt\n\nThe code includes a script that demonstrates how an attacker could exploit the WebView settings to exfiltrate sensitive data **from the app's internal storage** using file URIs (`file://`).\n\nThis sample:\n\n- writes a sensitive file (`api-key.txt`) into internal storage using `File.writeText()`.\n- configures a WebView to\n    - allow JavaScript execution (`javaScriptEnabled = true`).\n    - allow file access (`allowFileAccess = true`).\n    - allow file access from file URLs (`allowFileAccessFromFileURLs = true`).\n    - allow universal access from file URLs (`allowUniversalAccessFromFileURLs = true`).\n- to simulate an XSS attack, the WebView uses `loadDataWithBaseURL` to load an HTML page with embedded JavaScript controlled by the attacker.\n\n### HTML and JavaScript\n\nSee `vulnerableHtml` in the MastgTestWebView.kt file.\n\n1. The attacker's script (running in the context of the vulnerable page) uses `XMLHttpRequest` to load the sensitive file from the file system. The file is located at `/data/data/org.owasp.mastestapp/files/api-key.txt`\n2. `fetch` is used to send the file contents to an external server running on the host machine while the app is executed in the Android emulator (`http://10.0.2.2:5001/receive`).\n\n**Note:** For demonstration purposes, the exfiltrated data is displayed on screen. However, in a real attack scenario, the user would not notice as the data would be exfiltrated silently.\n\n### server.py\n\nA simple Python server that listens for incoming requests on port 5001 and logs the received data.\n\n{{ ../MASTG-DEMO-0030/server.py }}\n\n## Steps\n\n1. Install the app on a device (@MASTG-TECH-0005)\n2. Make sure you have @MASTG-TOOL-0001 installed on your machine and the frida-server running on the device\n3. Run `run.sh` to spawn the app with Frida\n4. Click the **Start** button\n5. Stop the script by pressing `Ctrl+C` and/or `q` to quit the Frida CLI\n\n{{ run.sh # ../MASTG-DEMO-0030/script.js }}\n\nThe Frida script is designed to enumerate instances of `WebView` in the application and list their configuration values. The script does not explicitly hook the setters of the `WebView` settings but instead calls the `getSettings()` method to retrieve the current configuration.\n\nThe script performs the following steps:\n\n1. Enumerates all instances of `WebView` in the application.\n2. For each `WebView` instance, it calls the `getSettings()` method to retrieve the current settings.\n3. Prints the configuration values of the `WebView` settings.\n4. Prints a backtrace when the `getSettings()` method is called to help identify where in the code the settings are being accessed.\n\n## Observation\n\nThe output shows that Frida found one WebView instance and lists many of the WebView settings. A backtrace is also provided to help identify where in the code the settings are being accessed.\n\n{{ output.txt }}\n\nWe can also see how the sensitive data was exfiltrated to the attacker's server by inspecting the server logs.\n\n{{ output_server.txt }}\n\n## Evaluation\n\nThe test **fails** due to the following WebView settings being configured:\n\n{{ evaluation.txt }}\n\nNote that using this approach we can't really tell if the methods are explicitly called in the code since we're inspecting the WebView settings after they have been configured. However, in this case, **all methods detected must have been explicitly called in the code since the settings are not enabled by default**.\n\nAs indicated by the backtrace in the output, the settings were called in the `mastgTest` method of the `MastgTestWebView` class. Since this app is a demo and symbols aren't stripped, we can even see the exact file and line number where the settings were configured: `MastgTestWebView.kt:25`.\n", "timestamp": "2025-10-21T22:04:57.731942"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-PLATFORM/MASTG-DEMO-0031/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-PLATFORM/MASTG-DEMO-0031/output.txt", "content": "\n[*] WebView.getSettings() called on instance: android.webkit.WebView{72e86a8 VFEDHVC.. ......I. 0,0-0,0}\n\nBacktrace:\nandroid.webkit.WebView.getSettings(Native Method)\norg.owasp.mastestapp.MastgTestWebView.mastgTest(MastgTestWebView.kt:26)\norg.owasp.mastestapp.MainActivityWebViewKt$WebViewScreen$1$1$2$1.invoke(MainActivityWebView.kt:88)\norg.owasp.mastestapp.MainActivityWebViewKt$WebViewScreen$1$1$2$1.invoke(MainActivityWebView.kt:85)\nandroidx.compose.ui.viewinterop.ViewFactoryHolder.<init>(AndroidView.android.kt:343)\nandroidx.compose.ui.viewinterop.AndroidView_androidKt$createAndroidViewNodeFactory$1.invoke(AndroidView.android.kt:274)\nandroidx.compose.ui.viewinterop.AndroidView_androidKt$createAndroidViewNodeFactory$1.invoke(AndroidView.android.kt:273)\nandroidx.compose.ui.viewinterop.AndroidView_androidKt$AndroidView$$inlined$ComposeNode$1.invoke(Composables.kt:254)\n\n\n\n[*] Triggering enumeration after getSettings() call...\n\n[*] Finished enumerating WebView instances!\n\n[*] Found WebView instance: android.webkit.WebView{72e86a8 VFEDHVC.. ........ 0,0-904,1796}\n\t[+] JavaScriptEnabled: true\n\t[+] AllowFileAccess: true\n\t[+] AllowFileAccessFromFileURLs: true\n\t[+] AllowUniversalAccessFromFileURLs: false\n\t[+] AllowContentAccess: true\n\t[+] MixedContentMode: 1\n\t[+] SafeBrowsingEnabled: true\n", "timestamp": "2025-10-21T22:04:57.958344"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-PLATFORM/MASTG-DEMO-0032/MASTG-DEMO-0032.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-PLATFORM/MASTG-DEMO-0032/MASTG-DEMO-0032.md", "content": "---\nplatform: android\ntitle: Uses of WebViews Allowing Local File Access with semgrep\nid: MASTG-DEMO-0032\ncode: [kotlin]\ntest: MASTG-TEST-0252\n---\n\n## Sample\n\nThis sample demonstrates the use of WebViews allowing local file access in an Android app and how an attacker could exploit these settings to exfiltrate sensitive data from the app's internal storage using `file://` URIs.\n\nIn this demo we focus on the static analysis of the code using semgrep and don't run the app nor the attacker server.\n\nSee @MASTG-DEMO-0031 for all the details about the sample and the attack.\n\n{{ MastgTestWebView.kt # AndroidManifest.xml }}\n\n## Steps\n\nLet's run @MASTG-TOOL-0110 rules against the sample code.\n\n{{ ../../../../rules/mastg-android-webview-allow-local-access.yml }}\n\n{{ run.sh }}\n\n## Observation\n\nThe output shows all WebView settings found in the code.\n\n{{ output.txt }}\n\n## Evaluation\n\nThe test **fails** due to the following WebView settings being configured:\n\n{{ evaluation.txt }}\n\nAll these settings are explicitly set to `true` in the code, otherwise, they would remain at their default values (`false`).\n", "timestamp": "2025-10-21T22:04:58.393070"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-PLATFORM/MASTG-DEMO-0032/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-PLATFORM/MASTG-DEMO-0032/output.txt", "content": "                   \n                   \n┌─────────────────┐\n│ 4 Code Findings │\n└─────────────────┘\n                                  \n    MastgTestWebView_reversed.java\n     ❱ rules.mastg-android-webview-settings\n          [MASVS-PLATFORM-2] Detected WebView settings.\n                                                       \n           29┆ WebSettings $this$mastgTest_u24lambda_u240 = webView.getSettings();\n            ⋮┆----------------------------------------\n           30┆ $this$mastgTest_u24lambda_u240.setJavaScriptEnabled(true);\n            ⋮┆----------------------------------------\n           31┆ $this$mastgTest_u24lambda_u240.setAllowFileAccess(true);\n            ⋮┆----------------------------------------\n           32┆ $this$mastgTest_u24lambda_u240.setAllowFileAccessFromFileURLs(true);\n\n", "timestamp": "2025-10-21T22:04:58.615018"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-PLATFORM/MASTG-DEMO-0040/MASTG-DEMO-0040.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-PLATFORM/MASTG-DEMO-0040/MASTG-DEMO-0040.md", "content": "---\nplatform: android\ntitle: Debuggable Flag Enabled in the AndroidManifest with semgrep\nid: MASTG-DEMO-0040\ncode: [kotlin]\ntest: MASTG-TEST-0226\n---\n\n### Sample\n\nThe code snippet below shows a sample manifest file with the debuggable flag enabled.\n\n{{ AndroidManifest.xml # AndroidManifest_reversed.xml }}\n\n### Steps\n\nLet's run our @MASTG-TOOL-0110 rule against the manifest file.\n\n{{ ../../../../rules/mastg-android-debuggable-flag.yml }}\n\n{{ run.sh }}\n\n### Observation\n\nThe rule has identified the `android:debuggable` attribute in the AndroidManifest.\n\n{{ output.txt }}\n\n### Evaluation\n\nThe test case fails because the `android:debuggable` attribute is explicitly set to `true`.\n", "timestamp": "2025-10-21T22:04:59.030625"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-PLATFORM/MASTG-DEMO-0040/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-PLATFORM/MASTG-DEMO-0040/output.txt", "content": "                  \n                  \n┌────────────────┐\n│ 1 Code Finding │\n└────────────────┘\n                                               \n    AndroidManifest_reversed.xml\n    ❯❱ mastg-android-debuggable-flag\n          [MASVS-RESILIENCE-4] debuggable detected as true.\n                                                           \n            5┆ <application android:allowBackup=\"true\"                                           \n               android:appComponentFactory=\"androidx.core.app.CoreComponentFactory\"              \n               android:dataExtractionRules=\"@xml/data_extraction_rules\" android:debuggable=\"true\"\n               android:extractNativeLibs=\"false\" android:fullBackupContent=\"@xml/backup_rules\"   \n               android:icon=\"@mipmap/ic_launcher\" android:label=\"@string/app_name\"               \n               android:roundIcon=\"@mipmap/ic_launcher_round\" android:supportsRtl=\"true\"          \n               android:theme=\"@style/Theme.MASTestApp\">                                                                           \n", "timestamp": "2025-10-21T22:04:59.137055"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-PLATFORM/MASTG-DEMO-0061/MASTG-DEMO-0061.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-PLATFORM/MASTG-DEMO-0061/MASTG-DEMO-0061.md", "content": "---\nplatform: android\ntitle: Uses of FLAG_SECURE with semgrep\nid: MASTG-DEMO-0061\ncode: [kotlin]\ntest: MASTG-TEST-0291\n---\n\n### Sample\n\nThe sample uses the `addFlags` method to set the `FLAG_SECURE` window flag on an activity that displays sensitive data.\n\n{{ MastgTest.kt # MastgTest_reversed.java }}\n\n### Steps\n\nLet's run our @MASTG-TOOL-0110 rule against the reversed java code.\n\n{{ ../../../../rules/mastg-android-sensitive-data-in-screenshot.yml }}\n\n{{ run.sh }}\n\n### Observation\n\nThe rule has identified one location in the code file where the app has set the `FLAG_SECURE` window flag using the `addFlags` method.\n\n{{ output.txt }}\n\n### Evaluation\n\nThis test passes because the app used the `addFlags` method to set the `FLAG_SECURE` window flag on an activity that displays sensitive data.\n", "timestamp": "2025-10-21T22:04:59.478660"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-PLATFORM/MASTG-DEMO-0061/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-PLATFORM/MASTG-DEMO-0061/output.txt", "content": "                  \n                  \n┌────────────────┐\n│ 1 Code Finding │\n└────────────────┘\n                           \n    MastgTest_reversed.java\n     ❱ rules.mastg-android-flag-secure-enable-flags\n          [MASVS-PLATFORM] Make sure you use this flag for all screens with sensitive data\n                                                                                          \n           32┆ ((Activity) this.context).getWindow().addFlags(8192);\n\n", "timestamp": "2025-10-21T22:04:59.582193"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-PLATFORM/MASTG-DEMO-0062/MASTG-DEMO-0062.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-PLATFORM/MASTG-DEMO-0062/MASTG-DEMO-0062.md", "content": "---\nplatform: android\ntitle: Enabling Screenshots in Recents via setRecentsScreenshotEnabled with semgrep\nid: MASTG-DEMO-0062\ncode: [kotlin]\ntest: MASTG-TEST-0292\nstatus: placeholder\nnote: This demo shows how to detect the use of `setRecentsScreenshotEnabled(true)` in Android apps using Semgrep.\n---\n", "timestamp": "2025-10-21T22:04:59.906924"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-PLATFORM/MASTG-DEMO-0063/MASTG-DEMO-0063.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-PLATFORM/MASTG-DEMO-0063/MASTG-DEMO-0063.md", "content": "---\nplatform: android\ntitle: Incorrectly Preventing Screenshots with SecureFlagPolicy in Compose Dialogs with semgrep\nid: MASTG-DEMO-0063\ncode: [kotlin]\ntest: MASTG-TEST-0293\nstatus: placeholder\nnote: This demo shows how to detect the incorrect use of `SecureFlagPolicy` in Jetpack Compose dialogs using Semgrep.\n---\n", "timestamp": "2025-10-21T22:05:00.250256"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-PRIVACY/MASTG-DEMO-0009/MASTG-DEMO-0009.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-PRIVACY/MASTG-DEMO-0009/MASTG-DEMO-0009.md", "content": "---\nplatform: android\ntitle: Detecting Sensitive Data in Network Traffic\nid: MASTG-DEMO-0009\ncode: [kotlin]\ntest: MASTG-TEST-0206\n---\n\n### Sample\n\nThe snippet below shows sample code that sends sensitive data over the network using the `HttpURLConnection` class. The data is sent to `https://httpbin.org/post` which is a dummy endpoint that returns the data it receives.\n\n{{ MastgTest.kt # MastgTest_reversed.java }}\n\n### Steps\n\nStart the device, in this case, the Android emulator:\n\n```bash\nemulator -avd Pixel_3a_API_33_arm64-v8a -writable-system\n```\n\nRun @MASTG-TOOL-0097 with the custom script for logging sensitive data and dump the relevant traffic to a file.\n\nNote that the script is preconfigured with data that's already considered sensitive for this application. When running this test in a real-world scenario, you should determine what is considered [sensitive data](../../../../Document/0x04b-Mobile-App-Security-Testing.md#identifying-sensitive-data \"Sensitive Data\") based on the app's privacy policy and relevant privacy regulations. One recommended way to do this is by checking the app's privacy policy and the App Store Privacy declarations.\n\n{{ mitm_sensitive_logger.py }}\n\n{{ run.sh }}\n\nLaunch the app from Android Studio and click the button which will send the sensitive data over the network. The script will capture the network traffic and log the sensitive data.\n\n### Observation\n\nThe script has identified several instances of sensitive data in the network traffic.\n\n- The first instance is a POST request to `https://httpbin.org/post` which contains the sensitive data values in the request body.\n- The second instance is a response from `https://httpbin.org/post` which contains the sensitive data values in the response body.\n\n{{ sensitive_data.log }}\n\n### Evaluation\n\nAfter reviewing the captured network traffic, we can conclude that the test fails because the sensitive data is sent over the network.\n\nThis is a dummy example, but in a real-world scenario, you should determine which of the reported instances are privacy-relevant and need to be addressed.\n\nNote that both the request and the response are encrypted using TLS, so they can be considered secure. However, this might represent a privacy issue depending on the relevant privacy regulations and the app's privacy policy. You should now check the privacy policy and the App Store Privacy declarations to see if the app is allowed to send this data to a third-party.\n", "timestamp": "2025-10-21T22:05:00.870518"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-PRIVACY/MASTG-DEMO-0033/MASTG-DEMO-0033.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-PRIVACY/MASTG-DEMO-0033/MASTG-DEMO-0033.md", "content": "---\nplatform: android\ntitle: Dangerous Permissions in the AndroidManifest with semgrep\nid: MASTG-DEMO-0033\ncode: [kotlin]\ntest: MASTG-TEST-0254\n---\n\n### Sample\n\nThe following is a sample AndroidManifest file that declares 4 dangerous permissions.\n\n{{ AndroidManifest.xml # AndroidManifest_reversed.xml }}\n\n### Steps\n\nLet's run our @MASTG-TOOL-0110 rule against the sample manifest file.\n\n{{ ../../../../rules/mastg-android-dangerous-app-permissions.yaml }}\n\n{{ run.sh }}\n\n### Observation\n\nThe rule has identified four instances in the AndroidManifest file where the app declares dangerous permissions.\n\n{{ output.txt }}\n\n### Evaluation\n\nThe test fails because the app declares the following dangerous permissions:\n\n- `WRITE_EXTERNAL_STORAGE`\n- `READ_CONTACTS`\n- `READ_EXTERNAL_STORAGE`\n- `ACCESS_FINE_LOCATION`\n", "timestamp": "2025-10-21T22:05:01.234405"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-PRIVACY/MASTG-DEMO-0033/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-PRIVACY/MASTG-DEMO-0033/output.txt", "content": "                   \n                   \n┌─────────────────┐\n│ 4 Code Findings │\n└─────────────────┘\n                                \n    AndroidManifest_reversed.xml\n    ❯❱ rules.detect-dangerous-android-permissions\n          Dangerous Android permission found:\n                                             \n            3┆ <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n            ⋮┆----------------------------------------\n            4┆ <uses-permission android:name=\"android.permission.READ_CONTACTS\"/>\n            ⋮┆----------------------------------------\n            5┆ <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n            ⋮┆----------------------------------------\n            6┆ <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\n\n", "timestamp": "2025-10-21T22:05:01.336295"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-RESILIENCE/MASTG-DEMO-0027/MASTG-DEMO-0027.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0027/MASTG-DEMO-0027.md", "content": "---\nplatform: android\ntitle: Runtime Use of KeyguardManager.isDeviceSecure and BiometricManager.canAuthenticate APIs with Frida\nid: MASTG-DEMO-0027\ncode: [kotlin]\ntest: MASTG-TEST-0249\n---\n\n### Sample\n\nThis sample checks if the device has a secure lock screen via `KeyguardManager.isDeviceSecure` and if the device supports strong biometric authentication using `BiometricManager.canAuthenticate`.\n\n{{ MastgTest.kt }}\n\n### Steps\n\n1. Install the app on a device (@MASTG-TECH-0005)\n2. Make sure you have @MASTG-TOOL-0001 installed on your machine and the frida-server running on the device\n3. Run `run.sh` to spawn the app with Frida\n4. Click the **Start** button\n5. Stop the script by pressing `Ctrl+C`\n\n{{ run.sh # script.js }}\n\n### Observation\n\nThe output reveals the use of `KeyguardManager.isDeviceSecure` and `BiometricManager.canAuthenticate`.\n\n{{ output.txt }}\n\n### Evaluation\n\nThe test passes because the output shows the use of `KeyguardManager.isDeviceSecure` and `BiometricManager.canAuthenticate` at runtime. We can see that:\n\n- `KeyguardManager.isDeviceSecure` is called from the file `MastgTest.kt`, class `MastgTest`, method `isDeviceSecure` at line 24.\n- `BiometricManager.canAuthenticate` is called from the file `MastgTest.kt`, class `MastgTest`, method `checkStrongBiometricStatus` at line 38.\n\nNote that in this case the output contains file names and even line numbers, but in real-world scenarios, this information may not be available or not be that useful (e.g. when using a production build or when the app is obfuscated). The output is still valuable because it shows that the APIs are being used at runtime.\n", "timestamp": "2025-10-21T22:05:01.932023"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-RESILIENCE/MASTG-DEMO-0027/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0027/output.txt", "content": "\n\n[*] KeyguardManager.isDeviceSecure() called - RESULT: false\n\n\nBacktrace:\nandroid.app.KeyguardManager.isDeviceSecure(Native Method)\norg.owasp.mastestapp.MastgTest.isDeviceSecure(MastgTest.kt:24)\norg.owasp.mastestapp.MastgTest.mastgTest(MastgTest.kt:10)\norg.owasp.mastestapp.MainActivityKt.MainScreen$lambda$9$lambda$8(MainActivity.kt:53)\norg.owasp.mastestapp.MainActivityKt.$r8$lambda$PhzGLzmkS_ibruOfiTT32AhzWl4(Unknown Source:0)\norg.owasp.mastestapp.MainActivityKt$$ExternalSyntheticLambda0.run(D8$$SyntheticClass:0)\njava.lang.Thread.run(Thread.java:1012)\n\n\n[*] BiometricManager.canAuthenticate called with: BIOMETRIC_STRONG (15) - RESULT: BIOMETRIC_ERROR_NONE_ENROLLED (11)\n\nBacktrace:\nandroid.hardware.biometrics.BiometricManager.canAuthenticate(Native Method)\norg.owasp.mastestapp.MastgTest.checkStrongBiometricStatus(MastgTest.kt:38)\norg.owasp.mastestapp.MastgTest.mastgTest(MastgTest.kt:11)\norg.owasp.mastestapp.MainActivityKt.MainScreen$lambda$9$lambda$8(MainActivity.kt:53)\norg.owasp.mastestapp.MainActivityKt.$r8$lambda$PhzGLzmkS_ibruOfiTT32AhzWl4(Unknown Source:0)\norg.owasp.mastestapp.MainActivityKt$$ExternalSyntheticLambda0.run(D8$$SyntheticClass:0)\njava.lang.Thread.run(Thread.java:1012)\n", "timestamp": "2025-10-21T22:05:02.039221"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-RESILIENCE/MASTG-DEMO-0028/MASTG-DEMO-0028.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0028/MASTG-DEMO-0028.md", "content": "---\nplatform: android\ntitle: Uses of KeyguardManager.isDeviceSecure and BiometricManager.canAuthenticate with semgrep\nid: MASTG-DEMO-0028\ncode: [kotlin]\ntest: MASTG-TEST-0247\n---\n\n### Sample\n\nThis sample checks if the device has a secure lock screen via `KeyguardManager.isDeviceSecure` and if the device supports strong biometric authentication using `BiometricManager.canAuthenticate`.\n\n{{ MastgTest.kt # MastgTest_reversed.java }}\n\n### Steps\n\nLet's run @MASTG-TOOL-0110 rules against the sample code.\n\n{{ ../../../../rules/mastg-android-device-passcode-present.yml }}\n\n{{ run.sh }}\n\n### Observation\n\nThe output shows all usages of APIs related to secure screen lock detection.\n\n{{ output.txt }}\n\n### Evaluation\n\nThe test passes because the output shows references to APIs that check for secure screen lock presence, specifically:\n\n- `KeyguardManager.isDeviceSecure` in line 33\n- `BiometricManager.canAuthenticate` in line 39\n", "timestamp": "2025-10-21T22:05:02.363355"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-RESILIENCE/MASTG-DEMO-0028/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0028/output.txt", "content": "                   \n                   \n┌─────────────────┐\n│ 2 Code Findings │\n└─────────────────┘\n                           \n    MastgTest_reversed.java\n     ❱ rules.mastg-android-device-passcode-present\n          [MASVS-STORAGE] Make sure to verify that your app runs on a device with a passcode set\n                                                                                                \n           30┆ Object systemService = context.getSystemService(\"keyguard\");\n           31┆ Intrinsics.checkNotNull(systemService, \"null cannot be cast to non-null type\n               android.app.KeyguardManager\");                                              \n           32┆ KeyguardManager keyguardManager = (KeyguardManager) systemService;\n           33┆ return keyguardManager.isDeviceSecure();\n            ⋮┆----------------------------------------\n           38┆ BiometricManager biometricManager = (BiometricManager)\n               this.context.getSystemService(BiometricManager.class);\n           39┆ int result = biometricManager.canAuthenticate(15);\n\n", "timestamp": "2025-10-21T22:05:02.466518"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-RESILIENCE/MASTG-DEMO-0037/MASTG-DEMO-0037.md", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0037/MASTG-DEMO-0037.md", "content": "---\nplatform: android\ntitle: App Leaking Information about Unclosed SQL Cursor via StrictMode\nid: MASTG-DEMO-0037\ncode: [kotlin]\ntest: MASTG-TEST-0263\n---\n\n### Sample\n\nThe snippet below shows sample code that enables a `StrictMode` policy to detect leaked (i.e., unclosed) SQLite objects. When such an object is detected, a log message is emitted to the system log.\n\nThe snippet then opens an SQL Cursor which remains unclosed, to trigger the policy.\n\n{{ MastgTest.kt }}\n\n### Steps\n\n1. Install the app on your device.\n2. Open the app and let it execute.\n3. Execute `run.sh` which uses @MASTG-TECH-0009 to show the system logs created by `StrictMode`.\n\n{{ run.sh }}\n\n### Observation\n\nThe system log outputs all detected `StrictMode` policy violations.\n\n{{ output.txt }}\n\n### Evaluation\n\nThe test fails because `StrictMode` is enabled, as we can see from the system log output which shows that there is a location (`MastgTest.kt:35`) where an SQL cursor is not closed properly.\n\n**Note:** The reported cursor not being closed is a different issue outside the scope of this demo.\n", "timestamp": "2025-10-21T22:05:02.841646"}
{"source": "github", "repo": "OWASP/owasp-mstg", "file": "demos/android/MASVS-RESILIENCE/MASTG-DEMO-0037/output.txt", "url": "https://github.com/OWASP/mastg/blob/master/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0037/output.txt", "content": "03-26 11:33:23.415  2340  2407 D StrictMode: StrictMode policy violation: android.os.strictmode.LeakedClosableViolation: A resource was acquired at attached stack trace but never released. See java.io.Closeable for information on avoiding resource leaks.\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.os.StrictMode$AndroidCloseGuardReporter.report(StrictMode.java:1994)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat dalvik.system.CloseGuard.warnIfOpen(CloseGuard.java:336)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.database.AbstractCursor.finalize(AbstractCursor.java:531)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.database.sqlite.SQLiteCursor.finalize(SQLiteCursor.java:291)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat java.lang.Daemons$FinalizerDaemon.doFinalize(Daemons.java:339)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat java.lang.Daemons$FinalizerDaemon.processReference(Daemons.java:324)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat java.lang.Daemons$FinalizerDaemon.runInternal(Daemons.java:300)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat java.lang.Daemons$Daemon.run(Daemons.java:145)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat java.lang.Thread.run(Thread.java:1012)\n03-26 11:33:23.415  2340  2407 D StrictMode: Caused by: java.lang.Throwable: Explicit termination method 'AbstractCursor.close' not called\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat dalvik.system.CloseGuard.openWithCallSite(CloseGuard.java:288)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat dalvik.system.CloseGuard.open(CloseGuard.java:257)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.database.AbstractCursor.<init>(AbstractCursor.java:227)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.database.AbstractWindowedCursor.<init>(AbstractWindowedCursor.java:39)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.database.sqlite.SQLiteCursor.<init>(SQLiteCursor.java:98)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.database.sqlite.SQLiteDirectCursorDriver.query(SQLiteDirectCursorDriver.java:52)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.database.sqlite.SQLiteDatabase.rawQueryWithFactory(SQLiteDatabase.java:1714)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.database.sqlite.SQLiteDatabase.rawQuery(SQLiteDatabase.java:1653)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat org.owasp.mastestapp.MastgTest.triggerSqliteCursorLeak(MastgTest.kt:35)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat org.owasp.mastestapp.MastgTest.mastgTest(MastgTest.kt:12)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat org.owasp.mastestapp.MainActivityKt$MyScreenContent$1$1$1.invoke(MainActivity.kt:117)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat org.owasp.mastestapp.MainActivityKt$MyScreenContent$1$1$1.invoke(MainActivity.kt:115)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat androidx.compose.foundation.ClickablePointerInputNode$pointerInput$3.invoke-k-4lQ0M(Clickable.kt:987)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat androidx.compose.foundation.ClickablePointerInputNode$pointerInput$3.invoke(Clickable.kt:981)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat androidx.compose.foundation.gestures.TapGestureDetectorKt$detectTapAndPress$2$1.invokeSuspend(TapGestureDetector.kt:255)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat kotlinx.coroutines.DispatchedTaskKt.resume(DispatchedTask.kt:177)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat kotlinx.coroutines.DispatchedTaskKt.dispatch(DispatchedTask.kt:166)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat kotlinx.coroutines.CancellableContinuationImpl.dispatchResume(CancellableContinuationImpl.kt:474)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat kotlinx.coroutines.CancellableContinuationImpl.resumeImpl(CancellableContinuationImpl.kt:508)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat kotlinx.coroutines.CancellableContinuationImpl.resumeImpl$default(CancellableContinuationImpl.kt:497)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat kotlinx.coroutines.CancellableContinuationImpl.resumeWith(CancellableContinuationImpl.kt:368)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat androidx.compose.ui.input.pointer.SuspendingPointerInputModifierNodeImpl$PointerEventHandlerCoroutine.offerPointerEvent(SuspendingPointerInputFilter.kt:665)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat androidx.compose.ui.input.pointer.SuspendingPointerInputModifierNodeImpl.dispatchPointerEvent(SuspendingPointerInputFilter.kt:544)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat androidx.compose.ui.input.pointer.SuspendingPointerInputModifierNodeImpl.onPointerEvent-H0pRuoY(SuspendingPointerInputFilter.kt:566)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat androidx.compose.foundation.AbstractClickablePointerInputNode.onPointerEvent-H0pRuoY(Clickable.kt:947)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat androidx.compose.foundation.AbstractClickableNode.onPointerEvent-H0pRuoY(Clickable.kt:795)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat androidx.compose.ui.input.pointer.Node.dispatchMainEventPass(HitPathTracker.kt:317)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat androidx.compose.ui.input.pointer.Node.dispatchMainEventPass(HitPathTracker.kt:303)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat androidx.compose.ui.input.pointer.NodeParent.dispatchMainEventPass(HitPathTracker.kt:185)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat androidx.compose.ui.input.pointer.HitPathTracker.dispatchChanges(HitPathTracker.kt:104)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat androidx.compose.ui.input.pointer.PointerInputEventProcessor.process-BIzXfog(PointerInputEventProcessor.kt:113)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat androidx.compose.ui.platform.AndroidComposeView.sendMotionEvent-8iAsVTc(AndroidComposeView.android.kt:1576)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat androidx.compose.ui.platform.AndroidComposeView.handleMotionEvent-8iAsVTc(AndroidComposeView.android.kt:1527)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat androidx.compose.ui.platform.AndroidComposeView.dispatchTouchEvent(AndroidComposeView.android.kt:1466)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3120)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2801)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3120)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2801)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3120)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2801)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3120)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2801)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat com.android.internal.policy.DecorView.superDispatchTouchEvent(DecorView.java:490)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat com.android.internal.policy.PhoneWindow.superDispatchTouchEvent(PhoneWindow.java:1904)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.app.Activity.dispatchTouchEvent(Activity.java:4377)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat com.android.internal.policy.DecorView.dispatchTouchEvent(DecorView.java:448)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.View.dispatchPointerEvent(View.java:15919)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:7021)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:6815)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:6229)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:6286)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:6252)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:6417)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:6260)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:6474)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:6233)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:6286)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:6252)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:6260)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:6233)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:9211)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:9162)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:9131)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:9337)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:267)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.os.MessageQueue.nativePollOnce(Native Method)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.os.MessageQueue.next(MessageQueue.java:335)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.os.Looper.loopOnce(Looper.java:162)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.os.Looper.loop(Looper.java:294)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat android.app.ActivityThread.main(ActivityThread.java:8177)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat java.lang.reflect.Method.invoke(Native Method)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:552)\n03-26 11:33:23.415  2340  2407 D StrictMode: \tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:971)", "timestamp": "2025-10-21T22:05:02.945336"}
