{"source": "github", "repo": "jhaddix/tbhm", "file": "01_Philosophy.md", "url": "https://github.com/jhaddix/tbhm/blob/master/01_Philosophy.md", "content": "# Philosophy\n\n## Differences from standard testing\nSingle-sourced:\n- looking mostly for common-ish vulns\n- not competing with others\n- incentivized for count\n- payment guaranteed and quality check based on approximation \n\nCrowdsourced:\n￼- ￼￼looking for vulns that aren’t as easy to find\n- racing vs. time\n- competitive vs. others \n- incentivized to find unique bugs\n- payment based on impact not number of findings\n\n## Tips / Notes:\n\n- 1st party bug bounties = Google Paypal, etc\n- 2nd party bug bounties = Bugcrowd, H1, Synack, etc\n\nBecause competition is introduced; when working in a bug bounty it is essential to have templates set up for your \"most found\" classes of vulnerabilities. Obviously custom vulnerabilities will always be custom writeups, but having a template for ones that come up often is essential. **Protip:** always remember to change the URLS and domains in the templates. Nothing will get a bug invalidated faster than stating the wrong domain or URLs in a report.\n\nWhen desigining these templates there are two really great resources to read:\n\n- https://blog.bugcrowd.com/advice-for-writing-a-great-vulnerability-report/\n- https://forum.bugcrowd.com/t/writing-a-bug-report-attack-scenario-and-impact-are-key/640\n", "timestamp": "2025-10-21T13:30:56.481618"}
{"source": "github", "repo": "jhaddix/tbhm", "file": "02_Discovery.md", "url": "https://github.com/jhaddix/tbhm/blob/master/02_Discovery.md", "content": "# Discovery\n\n## Find the road less traveled\n\nThis means find the application (or parts of an application) less tested. In wide scoped projects the flagship application will most liekly be heavily assessed. \n\n- ^.acme.com scope is your friend\n- Find domains via Google (and others!)\n  - Can be automated well via recon-ng and other tools.\n- Port scan for obscure web servers or services (on all domains)\n- Find acquisitions and the bounty acquisition rules\n  - Google has a 6 month rule\n- Functionality changes or re-designs\n- Mobile websites\n- New mobile app versions\n- Searching parent company by trademark or privacy policy\n\n## ￼Tool: Recon-ng script (enumall.sh\nhttps://github.com/jhaddix/domain\n\n## ￼LMGTFY: Let Me GOOGLE That For You\nsite:paypal.com -www.paypal.com -www.sandbox\n￼￼\n## List of Mergers and Acquisitions:\nhttps://en.wikipedia.org/wiki/List_of_mergers_and_acquisitions_by_Facebook\n\n## Port Scanning\nPort scanning is not just for Netpen! A full port scan of all your new found targets will usually yield #win:\n\n- separate webapps\n- extraneous services\n- Facebook had Jenkins Script console with no auth\n- IIS.net had rdp open vulnerable to MS12_020\n\n``nmap -sS -A -PN -p- --script=http-title dontscanme.bro``\n\n(syn scan, OS + service fingerprint, no ping, all ports, http titles)\n", "timestamp": "2025-10-21T13:30:56.947917"}
{"source": "github", "repo": "jhaddix/tbhm", "file": "03_Mapping.md", "url": "https://github.com/jhaddix/tbhm/blob/master/03_Mapping.md", "content": "# Mapping\n\n## ￼Mapping Tips:\n- Google\n- Smart* Directory Brute Forcing\n  - RAFT lists (included in Seclists)\n  - SVN Digger (included in Seclists)\n  -  Git Digger\n- Platform Identification:\n  - Wapplyzer (Chrome)\n  - Builtwith (Chrome)\n  - retire.js (cmd-line or Burp)\n  - Check CVE’s\n- Auxiliary\n  - WPScan\n  -CMSmap\n\n##￼Directory Bruteforce Workflow\nAfter bruteforcing look for other status codes indicating you are denied or require auth then append list there to test for misconfigured access control.\n\nExample:\n\n````\nGET http://www.acme.com - 200\nGET http://www.acme.com/backlog/ - 404\nGET http://www.acme.com/controlpanel/ - **401 hmm.. ok**\nGET http://www.acme.com/controlpanel/[bruteforce here now]\n````\n\n## ￼￼Mapping/Vuln Discovery using OSINT\nFind previous/existing problem:\n- Xssed.com\n- Reddit XSS - /r/xss\n- Punkspider\n- xss.cx\n- xssposed.org\n- twitter searching\n\nIssues might already reported but use the flaw area and injection type to guide you to further injections or filter bypass\n\n## ￼New Project: Maps\nNew OSINT/Mapping project\n- 250+ bounty programs\n- Crawl\n- DNS info + bruteforce\n- Bounty metadata (links, rewards, scope)\n- API -> Intrigue\n\nhttps://github.com/bugcrowdlabs/maps\n\n### ￼Using the Maps Project: Crawling\nUsing + Ruby + Anemone + JSON + Grep\n\n````\n$cat test_target_json.txt | grep redirect\n\nhttps://test_target/redirect/?url=http://twitter.com\nhttps://test_target/redirect/?url=http://facebook.com/...\nhttps://test_target/redirect/?url=http://pinterest.com/...\n````\n\n\n## New Tool: Intrigue\nOSINT framework, simple to integrate. Features like:\n- DNS Subdomain Brute force\n- Web Spider\n- Nmap Scan\n- etc\nCode @ http://github.com/intrigueio/intrigue-core\n\n\n￼\n", "timestamp": "2025-10-21T13:30:57.346948"}
{"source": "github", "repo": "jhaddix/tbhm", "file": "04_Authorization_and_Session.md", "url": "https://github.com/jhaddix/tbhm/blob/master/04_Authorization_and_Session.md", "content": "# Auth and Session\n\n\n## Auth (better be quick)\n\nAuth Related (more in logic, priv, and transport sections)\n\n- User/pass discrepancy flaw\n- Registration page harvesting\n- Login page harvesting\n- Password reset page harvesting\n- No account lockout\n- Weak password policy\n- Password not required for account updates\n- Password reset tokens (no expiry or re-use)\n\n## Session (better be quick)\n\nSession Related:\n- Failure to invalidate old cookies\n- No new cookies on login/logout/timeout\n- Never ending cookie length\n- Multiple sessions allowed\n- Easily reversible cookie (base64 most often)\n￼\n", "timestamp": "2025-10-21T13:30:57.759685"}
{"source": "github", "repo": "jhaddix/tbhm", "file": "05_XSS.md", "url": "https://github.com/jhaddix/tbhm/blob/master/05_XSS.md", "content": "# ￼￼￼Tactical Fuzzing - XSS\n\n## XSS\nCore Idea: Does the page functionality display something to the users?\nFor time sensitive testing the 80/20 rule applies. Many testers use Polyglot payloads. You probably have too!\n\n### *Multi-context, filter bypass based polyglot payload #1 (Rsnake XSS Cheat Sheet)\n\n```\n';alert(String.fromCharCode(88,83,83))//';alert(String. fromCharCode(88,83,83))//\";alert(String.fromCharCode (88,83,83))//\";alert(String.fromCharCode(88,83,83))//-- ></SCRIPT>\">'><SCRIPT>alert(String.fromCharCode(88,83,83)) </SCRIPT>\n```\n\n\n\n### Multi-context, filter bypass based polyglot payload #2 (Ashar Javed XSS Research)\n\n```\n \n\">><marquee><img src=x onerror=confirm(1)></marquee>\" ></plaintext\\></|\\><plaintext/onmouseover=prompt(1) ><script>prompt(1)</script>@gmail.com<isindex formaction=javascript:alert(/XSS/) type=submit>'-->\" ></script><script>alert(1)</script>\"><img/id=\"confirm&lpar; 1)\"/alt=\"/\"src=\"/\"onerror=eval(id&%23x29;>'\"><img src=\"http: //i.imgur.com/P8mL8.jpg\"> \n\n￼￼```\n\n### Multi-context polyglot payload (Mathias Karlsson)\n\n```\n\n\" onclick=alert(1)//<button ‘ onclick=alert(1)//> */ alert(1)//\n\n```\n\n###￼ Other XSS Observations\n\nInput Vectors:\n- Customizable Themes & Profiles via CSS\n- Event or meeting names\n- URI based\n- Imported from a 3rd party (think Facebook integration)\n- JSON POST Values (check returning content type)\n- File Upload names\n- Uploaded files (swf, HTML, ++)\n- Custom Error pages\n- fake params - ?realparam=1&foo=bar’+alert(/XSS/)+’\n- Login and Forgot password forms\n\n## SWF Parameter XSS\n\nCommon Params:\nonload, allowedDomain, movieplayer, xmlPath, eventhandler, callback (more on OWASP page)\n\nCommon Injection Strings:￼\n\n```\n\n\\%22})))}catch(e){alert(document.domain);}//\n\n```\n\n```\n\n\"]);}catch(e){}if(!self.a)self.a=!alert(document.domain);//\n\n```\n\n\n```\n\n\"a\")(({type:\"ready\"}));}catch(e){alert(1)}//\n\n```\n", "timestamp": "2025-10-21T13:30:58.174664"}
{"source": "github", "repo": "jhaddix/tbhm", "file": "06_SQLi.md", "url": "https://github.com/jhaddix/tbhm/blob/master/06_SQLi.md", "content": "#Tactical Fuzzing - SQLi\n\n## SQL Injection\n\nCore Idea: Does the page look like it might need to call on stored data?\n\nThere exist some SQLi polyglots, i.e (Mathias Karlsson);\n\n``\nSLEEP(1) /*‘ or SLEEP(1) or ‘“ or SLEEP(1) or “*/\n``\n\nWorks in single quote context, works in double quote context, works in “straight into query” context!\n\nYou can also leverage the large database of fuzzlists from Seclists (https://github.com/danielmiessler/SecLists)\n\n##￼￼SQL Injection Observations\nBlind is predominant, Error based is highly unlikely.\n\n``\n‘%2Bbenchmark(3200,SHA1(1))%2B’\n``\n\n\n``\n‘+BENCHMARK(40000000,SHA1(1337))+’\n``\n\nSQLMap is king!\n- Use -l to parse a Burp log file.\n- Use Tamper Scripts for blacklists.\n- SQLiPy Burp plugin works well to instrument SQLmap quickly.\nLots of injection in web services!\n\n##￼Best SQL injection resources\n\n- MySQL:\n  - [PentestMonkey's mySQL injection cheat sheet] (http://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet)\n  - [Reiners mySQL injection Filter Evasion Cheatsheet] (https://websec.wordpress.com/2010/12/04/sqli-filter-evasion-cheat-sheet-mysql/)\n- MSQQL:\n  - [EvilSQL's Error/Union/Blind MSSQL Cheatsheet] (http://evilsql.com/main/page2.php)\n  - [PentestMonkey's MSSQL SQLi injection Cheat Sheet] (http://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet)\n- ORACLE:\n  - [PentestMonkey's Oracle SQLi Cheatsheet] (http://pentestmonkey.net/cheat-sheet/sql-injection/oracle-sql-injection-cheat-sheet)\n- POSTGRESQL:\n  - [PentestMonkey's Postgres SQLi Cheatsheet] (http://pentestmonkey.net/cheat-sheet/sql-injection/postgres-sql-injection-cheat-sheet)\n- Others\n  - [Access SQLi Cheatsheet] (http://nibblesec.org/files/MSAccessSQLi/MSAccessSQLi.html)\n  - [PentestMonkey's Ingres SQL Injection Cheat Sheet] (http://pentestmonkey.net/cheat-sheet/sql-injection/ingres-sql-injection-cheat-sheet)\n  - [Pentestmonkey's DB2 SQL Injection Cheat Sheet] (http://pentestmonkey.net/cheat-sheet/sql-injection/db2-sql-injection-cheat-sheet)\n  - [Pentestmonkey's Informix SQL Injection Cheat Sheet] (http://pentestmonkey.net/cheat-sheet/sql-injection/informix-sql-injection-cheat-sheet)\n  - [SQLite3 Injection Cheat sheet] (https://sites.google.com/site/0x7674/home/sqlite3injectioncheatsheet)\n  - [Ruby on Rails (Active Record) SQL Injection Guide] (http://rails-sqli.org/)\n", "timestamp": "2025-10-21T13:30:58.604479"}
{"source": "github", "repo": "jhaddix/tbhm", "file": "07_File_Upload.md", "url": "https://github.com/jhaddix/tbhm/blob/master/07_File_Upload.md", "content": "# Tactical Fuzzing - FI & Uploads\n\n## Local file inclusion\n\nCore Idea: Does it (or can it) interact with the server file system?\n\n[Liffy] (https://github.com/rotlogix/liffy) is new and cool here but you can also use [Seclists] (https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/JHADDIX_LFI.txt):\n\n## ￼￼Malicious File Upload\n\nThis is an important and common attack vector in this type of testing.\nA file upload functions need a lot of protections to be adequately secure.\n\nAttacks:\n- Upload unexpected file format to achieve code exec (swf, html, php, php3, aspx, ++) Web shells or...\n- Execute XSS via same types of files. Images as well!\n- Attack the parser to DoS the site or XSS via storing payloads in metadata or file header\n- Bypass security zones and store malware on target site via file polyglots\n\nFile upload attacks are a whole presentation. Try this one to get a feel for bypass techniques:\n- content type spoofing\n- extension trickery\n- [File in the hole! presentaion] (https://www.nds.rub.de/media/attachments/files/2012/11/File-in-the-hole.pdf)\n\nAs referenced file polyglots can be used to store malware on servers!\n[See @dan_crowley ‘s talk] (http://goo.gl/pquXC2)\n[and @angealbertini research:] (corkami.com)\n\n## Remote file includes and redirects\n\nLook for any param with another web address in it. Same params from LFI can present here too.\n\nCommon blacklist bypasses:\n- escape \"/\" with \"\\/\" or “//” with “\\/\\/”\n- try single \"/\" instead of \"//\"\n- remove http i.e. \"continue=//google.com\"\n- “/\\/\\” , “|/” , “/%09/”\n- encode, slashes\n- ”./” CHANGE TO “..//”\n- ”../” CHANGE TO “....//”\n- ”/” CHANGE TO “//”\n\nRedirections Common Parameters or Injection points￼:\n- dest=\n- continue=\n- redirect=\n- url= (or anything with “url” in it)\n- uri= (same as above)\n- window=\n- next=\n\nRFI Common Parameters or Injection points:\n- File=\n- document=\n- Folder=\n- root=\n- Path=\n- pg=\n- style=\n- pdf=\n- template=\n- php_path=\n- doc=\n", "timestamp": "2025-10-21T13:30:59.003962"}
{"source": "github", "repo": "jhaddix/tbhm", "file": "08_CSRF.md", "url": "https://github.com/jhaddix/tbhm/blob/master/08_CSRF.md", "content": "### Testing CSRF On Application : \n- Csrf Normal\n- Chnage Method To GET-Based\n- Change Value Of CSRF-Token To undefined\n- Delete CSRF Token Value Or Delete Token Parameter\n- Use The same CSRF Value In Different Accounts\n- Replace Value CSRF Token with Same Length Characters\n- Change Content-Type from application/json to text/plain\n- Use Vulnerable-Subdomain To Bypass CSRF Token\n", "timestamp": "2025-10-21T13:30:59.416348"}
{"source": "github", "repo": "jhaddix/tbhm", "file": "09_Privledge_Logic_Transport.md", "url": "https://github.com/jhaddix/tbhm/blob/master/09_Privledge_Logic_Transport.md", "content": "# ￼Privilege, Transport, Logic\n\n## Privilege\n\nOften logic, priv, auth bugs are blurred.\n\nTesting user priv:\n- admin has power\n- peon has none\n- peon can use function only meant for admin\n\n## More Privilege\n\n- Find site functionality that is restricted to certain user types\n- Try accessing those functions with lesser/other user roles\n- Try to directly browse to views with sensitive information as a lesser priv user\n\nAutorize Burp plugin is pretty neat [here] (https://github.com/Quitten/Autorize).\n\n## Common Functions or Views\n￼\n- Add user function\n- Delete user function\n- start project / campaign / etc function\n- change account info (pass, CC, etc) function\n- customer analytics view\n- payment processing view\n- any view with PII\n\n## ￼Insecure direct object references\n\nIDORs are common place in bounties, and hard to catch with scanners.\n\nFind *any and all* UIDs\n- increment\n- decrement\n- negative values\n- Attempt to perform sensitive functions substituting another UID\n  - change password\n  - forgot password\n  - admin only functions\n\nCommon Functions , Views, or Files:\n- Everything from the CSRF Table, trying cross account attacks\n- Sub: UIDs, user hashes, or emails\n- Images that are non-public\n- Receipts\n- Private Files (pdfs, ++)\n- Shipping info & Purchase Orders\n- Sending / Deleting messages\n\n## Transport\n\nMost security concerned sites will enable HTTPs. It’s your job to ensure they’ve done it *EVERYWHERE*. Most of the time they miss something.\n\nExamples:\n- Sensitive images transported over HTTP\n- Analytics with session data / PII leaked over HTTP\n\n(ForceSSL) [￼https://github.com/arvinddoraiswamy/mywebappscripts/tree/master/ForceSSL]\n\n## Business Logic Flaws\nLogic flaws that are tricky, mostly manual:\n- substituting hashed parameters\n- step manipulation\n- use negatives in quantities\n- authentication bypass\n- application level DoS\n- Timing attacks\n", "timestamp": "2025-10-21T13:30:59.807933"}
{"source": "github", "repo": "jhaddix/tbhm", "file": "10_Mobile.md", "url": "https://github.com/jhaddix/tbhm/blob/master/10_Mobile.md", "content": "# Mobile\n## Data Storage\n\nIts common to see mobile apps not applying encryption to the files that store PII.\n\nCommon places to find PII unencrypted\n- Phone system logs (avail to all apps)\n- webkit cache (cache.db)\n- plists, dbs, etc\n- hardcoded in the binary\n\nQuick spin-up for iOS\n(Daniel Mayers' idb) [https://github.com/dmayer/idb]\n\n\n## Logs\n", "timestamp": "2025-10-21T13:31:00.196936"}
{"source": "github", "repo": "jhaddix/tbhm", "file": "11_Auxiliary_Info.md", "url": "https://github.com/jhaddix/tbhm/blob/master/11_Auxiliary_Info.md", "content": "# Auxiliary\n\n## The vulns formerly known as “noise”\n\n- Content Spoofing or HTML injection\n- Referer leakage\n- security headers\n- path disclosure\n- clickjacking\n- ++\n\n## ￼How to test a web app in n minute\n\nHow can you get maximum results within a given time window?\n\n## ￼￼Data Driven Assessment (diminishing return FTW)\n\n1. Visit the search, registration, contact, password reset, and comment forms and hit them with your polyglot strings\n2. Scan those specific functions with Burp’s built-in scanner\n3. Check your cookie, log out, check cookie, log in, check cookie. Submit old\ncookie, see if access.\n4. Perform user enumeration checks on login, registration, and password\nreset.\n5. Do a reset and see if; the password comes plaintext, uses a URL based\ntoken, is predictable, can be used multiple times, or logs you in\nautomatically\n6. Find numeric account identifiers anywhere in URLs and rotate them for\ncontext change\n7. Find the security-sensitive function(s) or files and see if vulnerable to\nnon-auth browsing (idors), lower-auth browsing, CSRF, CSRF protection\nbypass, and see if they can be done over HTTP.\n8. Directory brute for top short list on SecLists\n9. Check upload functions for alternate file types that can execute code (xss\nor php/etc/etc)\n", "timestamp": "2025-10-21T13:31:00.607451"}
{"source": "github", "repo": "jhaddix/tbhm", "file": "Fast Testing Checklist.md", "url": "https://github.com/jhaddix/tbhm/blob/master/Fast%20Testing%20Checklist.md", "content": "# Fast Testing Checklist\n\nA combination of my own methodology and the Web Application Hacker's Handbook Task checklist, as a Github-Flavored Markdown file\n\n# Contents\n- [App Recon and analysis](#App-Recon-and-analysis)\n- [Test handling of access](#test-handling-of-access)\n- [Test handling of input](#test-handling-of-input)\n- [Test application logic](#test-application-logic)\n- [Assess application hosting](#assess-application-hosting)\n- [Miscellaneous tests](#miscellaneous-tests)\n\n# Task Checklist\n\n## App Recon and analysis\n\n- [ ] Map visible content (Manually)\n- [ ] Discover hidden & default content (Direcory/File Bruteforce)\n- [ ] Test for debug parameters\n- [ ] Identify data entry points (Discover Dynamic Content in Burp Pro)\n- [ ] Identify the technologies used (Wapplyzer or similiar)\n- [ ] Research existing vulnerabilitties in technology (Google ++)\n- [ ] Gather wordlists for specific techniology (Assetnote ones are excellent)\n- [ ] Map the attack surface automatically (Spider)\n- [ ] Identify all javascript files for later analysis (in your proxy)\n\n## Test handling of access\n### - [ ] Authentication\n- [ ] Test password quality rules\n- [ ] Test for username enumeration\n- [ ] Test resilience to password guessing\n- [ ] Test any account recovery function\n- [ ] Test any \"remember me\" function\n- [ ] Test any impersonation function\n- [ ] Test username uniqueness\n- [ ] Check for unsafe distribution of credentials\n- [ ] Test for fail-open conditions\n- [ ] Test any multi-stage mechanisms\n### - [ ] Session handling\n- [ ] Test tokens for meaning\n- [ ] Test tokens for predictability\n- [ ] Check for insecure transmission of tokens\n- [ ] Check for disclosure of tokens in logs\n- [ ] Check mapping of tokens to sessions\n- [ ] Check session termination\n- [ ] Check for session fixation\n- [ ] Check for cross-site request forgery\n- [ ] Check cookie scope\n### - [ ] Access controls\n- [ ] Understand the access control requirements\n- [ ] Test effectiveness of controls, using multiple accounts if possible\n- [ ] Test for insecure access control methods (request parameters, Referer header, etc)\n\n## Test handling of input\n\n- [ ] Fuzz all request parameters\n- [ ] Test for SQL injection\n- [ ] Identify all reflected data\n- [ ] Test for reflected XSS\n- [ ] Test for HTTP header injection\n- [ ] Test for arbitrary redirection\n- [ ] Test for stored attacks\n- [ ] Test for OS command injection\n- [ ] Test for path traversal\n- [ ] Test for script injection\n- [ ] Test for file inclusion\n- [ ] Test for SMTP injection\n- [ ] Test for native software flaws (buffer overflow, integer bugs, format strings)\n- [ ] Test for SOAP injection\n- [ ] Test for LDAP injection\n- [ ] Test for XPath injection\n- [ ] Test for SSRF and HTTP Redirrects in all redirecting parameters\n\n## Test application logic\n\n- [ ] Identify the logic attack surface\n- [ ] Test transmission of data via the client\n- [ ] Test for reliance on client-side input validation\n- [ ] Test any thick-client components (Java, ActiveX, Flash)\n- [ ] Test multi-stage processes for logic flaws\n- [ ] Test handling of incomplete input\n- [ ] Test trust boundaries\n- [ ] Test transaction logic\n\n## Assess application hosting\n\n- [ ] Test segregation in shared infrastructures\n- [ ] Test segregation between ASP-hosted applications\n- [ ] Test for web server vulnerabilities\n- [ ] Default credentials\n- [ ] Default content\n- [ ] Dangerous HTTP methods\n- [ ] Proxy functionality\n- [ ] Virtual hosting mis-configuration\n- [ ] Bugs in web server software\n\n## Miscellaneous tests\n\n- [ ] Check for DOM-based attacks\n- [ ] Check for frame injection\n- [ ] Check for local privacy vulnerabilities\n- [ ] Persistent cookies\n- [ ] Caching\n- [ ] Sensitive data in URL parameters\n- [ ] Forms with autocomplete enabled\n- [ ] Follow up any information leakage\n- [ ] Check for weak SSL ciphers\n", "timestamp": "2025-10-21T13:31:01.306119"}
{"source": "github", "repo": "jhaddix/tbhm", "file": "README.md", "url": "https://github.com/jhaddix/tbhm/blob/master/README.md", "content": "\n\n# The Bug Hunter's Methodology (TBHM)\n\nWelcome! This repo is a collection of \n\n - tips  \n - tricks\n - tools\n - data analysis\n - and notes\n\nrelated to web application security assessments and more specifically towards bug hunting in bug bounties. \n\nThe current sections are divided as follows:\n\n### Before You Get Hacking\n\n* [Learning Resources](/Learning.md)\n* [Content Creators and Influencers](/Content.md)\n\n### Reconassiance\n\n### Application Analysis\n\n* [Mapping](/03_Mapping.md)\n* [Authorization and Sessions](/04_Authorization_and_Session.md)\n* Tactical fuzzing\n  * [XSS](/05_XSS.md)\n  * [SQLi](/06_SQLi.md)\n  * [File Inclusion](/07_File_Upload.md)\n  * [CSRF](/08_CSRF.md)\n* [Privilege, Transport and Logic](/09_Privledge_Logic_Transport.md)\n* Web services\n* [Mobile vulnerabilities](/10_Mobile.md)\n\n### Other\n\n* [Auxiliary Information](/11_Auxiliary_Info.md)\n\n\nThe goal of the project is to incorporate more up to date resources for bug hunters and web hackers to use during thier day-to-day work. \n\n@jhaddix\n\n##  History\n\n|Title| Conference | Version| Link \n|--|--|--|--|\n| How to Shot Web | Defcon 23 | 1.0 | Link |\n| The Bug Hunter's Methodology | xxx | xxx | Link |\n| The Bug Hunter's Methodology | xxx | xxx | Link |\n| The Bug Hunter's Methodology | xxx | xxx | Link |\n| The Bug Hunter's Methodology | xxx | xxx | Link |\n", "timestamp": "2025-10-21T13:31:02.316499"}
