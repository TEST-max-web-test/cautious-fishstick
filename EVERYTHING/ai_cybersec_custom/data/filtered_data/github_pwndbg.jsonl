{"source": "github", "repo": "pwndbg/pwndbg", "file": "docs/blog/posts/pwndbg-coding-sprints-report.md", "url": "https://github.com/pwndbg/pwndbg/blob/dev/docs/blog/posts/pwndbg-coding-sprints-report.md", "content": "---\ntitle: Pwndbg coding sprints report\ndate: 2022-08-21\nauthors: [disconnect3d]\nslug: pwndbg-coding-sprints-report\ndescription: >\n  Report of the two coding sprints with Pwndbg\n---\n\n(originally posted on https://disconnect3d.pl/2022/08/21/pwndbg-coding-sprints/)\n\nThis blog post is a report of the two coding sprints for the [Pwndbg project](https://github.com/pwndbg/pwndbg) that I organized first on the EuroPython 2022 conference and then, taking inspiration from the previous one, in the Hackerspace Kraków, located in Cracow, Poland.\n\nPS: If you are only looking for a list of things done, scroll down!\n\n<!-- more -->\n\n## Where I got the idea for sprints?\n\nI have recently attended the [EuroPython 2022](https://ep2022.europython.eu) conference and I enjoyed the “sprints” there. In short, a [sprint](https://ep2022.europython.eu/sprints#what-is-a-sprint-) is a semi-organized event, where anyone can announce a project they will be working on and others can join them. This helps both the projects and the event participants to learn about the project and to make first-time contributions. At the EuroPython conference, [there were 16 officially announced projects](https://ep2022.europython.eu/sprints#2022-sprints-listings), but I know that even more projects were being worked on in practice. Of course, other communities or conferences also do this (e.g. [NixCon](https://2022.nixcon.org/#hackday)).\n\nAt the EuroPython conference, I announced my own sprint to work on the Pwndbg project that I maintain. Having no expectations, I felt excited when four people showed up to learn something new and hack together on the project. Later, taking inspiration from it, I organized another sprint, this time in Cracow in the local Hackerspace with even a bigger response. Below, you can read a small report on the two sprints that have happened.\n\n## My general idea for a Pwndbg sprint\nPwndbg is written in Python, so on one hand is easy to hack on, but on the other hand it is a plugin for GDB, a console debugger for native programs (e.g. ones written in C, C++, Go or Rust). The general idea of Pwndbg is to alleviate the pain points of working with and improve the UX of GDB when debugging assembly code, reverse engineering a binary or during exploit development.\n\nSince not everyone is familiar with debuggers or the underlyings of programs execution (e.g. assembly code, CPU registers or stack or heap memory) I knew that I had to make some introduction to those concepts and if possible, prepare a list of simple tasks, so that people can get familiar with the codebase and the tool and contribute something.\n\n\n## EuroPython 2022 sprint\n\nOn the first sprint, four people showed up, mostly having no prior experience with the topic. We started with an introduction to what GDB and Pwndbg are and why and when they are useful.\n\nFor this, I took a small C program that had a buffer overflow bug:\n```c\n#include <stdio.h>\n#include <string.h>\n\nint main(int argc, char* argv[]) {\n    char name[16] = {0};\n\n    // NOTE: We copy the `argv[1]` string which may be of arbitrary length\n    // into the `name` buffer which is only of 16-bytes long. Thus, we can\n    // overwrite the stack memory of the program past the `name` buffer.\n    strcpy(name, argv[1]);\n\n    printf(\"Hello %s!\\n\", name);\n}\n```\n\nThen, after compiling it (`gcc main.c`), we ran the program twice to see that it will crash if we provide a too long string as its argument:\n\n```bash\n$ ./a.out Disconnect3d\nHello Disconnect3d!\n\n$ ./a.out Disconnect3d_at_EuroPython\nHello Disconnect3d_at_EuroPython!\n*** stack smashing detected ***: <unknown> terminated\nAborted (core dumped)\n```\n\nThen, I explained that the \"stack smashing detected\" we see is the \"stack canaries\" (also called \"stack cookies\") exploit mitigation added by compilers. This compiler feature adds a special 8-bytes canary value after the function's local variables located on the stack, so that then a stack frame may look like this:\n\n```\n------------------------------   lower addresses\nchar name[16];                         |\nuint8_t canary[8];                     |\nvoid* function_return_address;         V\n------------------------------   higher addresses\n```\n\nThis local stack canary value is then filled in just after the function’s prologue and is verified against a global value before the function returns to see if the stack was not corrupted (starting from the canary). Of course this may not detect all possible stack memory corruptions but it often makes it impossible to exploit a program (e.g. by changing the return address, also located on the stack), knowing just this vulnerability.\n\nThe stack canary mitigation can also be disabled. And if it were done (by passing in a `-fno-stack-protector` flag during compilation), we would get a different result when running the resulting program:\n\n```bash\n$ gcc -fno-stack-protector buf.c\n\n$ ./a.out Disconnect3d_on_EuroPython\nHello Disconnect3d_on_EuroPython!\nSegmentation fault (core dumped)\n```\n\nNow, the \"stack smashing detected\" is gone, but the program still crashed, because we still corrupted a part of its memory that we shouldn't have touched in a way that made the program do illegal things (e.g. accessing unmapped memory).\n\nDuring the sprint, we also ran a GDB+Pwndbg session to see the exact instructions that placed the canary value on the stack memory, to see that our input string was located just before it and how the canary was checked just before the function was returned.\n\nI am not going to describe all of this here, but you can see some of it in the below asciinema recording.\n\n[![asciicast](https://asciinema.org/a/zuuwfJIZrpu6IjuwWhiNgAdim.svg)](https://asciinema.org/a/zuuwfJIZrpu6IjuwWhiNgAdim)\n\n\n## Hackerspace Kraków sprint\n\nSince the second sprint was an ad-hoc event, I had to organize it myself. As a member of Hackerspace Kraków, I was able to reserve the hackerspace's softroom, which is a perfect place for people to hack on things using their computers. Then, I advertised the event on the [Hackerspace's mailing list](https://groups.google.com/g/hackerspace-krk/c/MP6mX4I5vXY) and on a few other mediums.\n\nI did not expect many people to come, especially that I advertised the sprint ~2 days before the event.\n\nBut... 8 people (!) showed up (excluding me). I prepared a document with some basic information and tasks, which can be found [here](https://hackmd.io/vjfZ4GIYS8eu_j-7q-fkBg) (though, it is in Polish and it was modified during and after the sprint).\n\nI won't lie: most people that came were friends of mine, some of which I play [CTFs](https://en.wikipedia.org/wiki/Capture_the_flag_(cybersecurity)) with. However, not all of them had really used or developed Pwndbg before.\n\n## Accomplishments from the two sprints\n\nOn the EP sprint, since we were just a group of four, we focused on small improvements to the codebase. In total, we did the following:\n* [reviewed and merged the fs/gs_base fetching improvement PR](https://github.com/pwndbg/pwndbg/pull/1030),\n* [pinned the project's dependencies](https://github.com/pwndbg/pwndbg/pull/1033),\n* [updated the unicorn dependency version](https://github.com/pwndbg/pwndbg/pull/1034),\n* [added a \"tip of the day\" feature](https://github.com/pwndbg/pwndbg/pull/1036),\n* [improved the UX of using Pwndbg within a Python virtual environment](https://github.com/pwndbg/pwndbg/pull/1037),\n* and also [worked on enhancing the display of arguments when stopping on a call to the printf functions family](https://github.com/pwndbg/pwndbg/pull/1038).\n\nThe last item from the list was the hardest to jump on and it still requires enhancements until it is merged. Nonetheless, all of this was a nice outcome from the whole sprint :).\n\nOn the second sprint, while we were a bigger group, we had much more limited time (since instead of having ~8 hours, we had just a few). Anyway, we were able to do the following:\n\n* [Cleanup some code leftover after dropping Python 2 support](https://github.com/pwndbg/pwndbg/pull/1052),\n* [Added documentation on how to debug Pwndbg using PyCharm remote debugging](https://github.com/pwndbg/pwndbg/pull/1058),\n* Reviewed and merged the PRs that [sets `$base_heap` variable](https://github.com/pwndbg/pwndbg/pull/1051) and [a tip for it](https://github.com/pwndbg/pwndbg/pull/1053), which may be useful for heap exploitation,\n* [Fix the X30 register display on AARCH64 targets](https://github.com/pwndbg/pwndbg/pull/1054),\n* [Fix `context args` display when PC/IP register pointed to unmapped memory](https://github.com/pwndbg/pwndbg/pull/1055),\n* [Fixed the `xor` and `memfrob` commands and added tests for them (! :D)](https://github.com/pwndbg/pwndbg/pull/1057),\n* [Worked on adding a way to dump memory that can be copied right away as C or Python code](https://github.com/pwndbg/pwndbg/pull/1056) (this needs to be changed to a command flag),\n* Investigated a [potential parsing issue](https://github.com/pwndbg/pwndbg/issues/1050), even looking at GDB's command parsing source code, [implemented potential patch](https://github.com/pwndbg/pwndbg/pull/1062), which only later turned out to be redundant and the issue to be invalid.\n\n## Summary and what's next?\n\nOrganizing those sprints helped me to get back to develop the Pwndbg project more and and attract more people to contribute to it. I also think that more conferences should have this kind of attractions (similarly as more conferences should have lightning talk sessions, heh).\n\nRegarding the Pwndbg sprints, I am organizing another one this week in Cracow on Tuesday, so if you live nearby and are interested in learning about Pwndbg or contributing to the project, feel invited! :)\n\nPS: Thanks a lot to [@arturcygan](https://twitter.com/arturcygan) for reviewing this blog post.\n", "timestamp": "2025-10-21T13:21:26.164126"}
{"source": "github", "repo": "pwndbg/pwndbg", "file": "docs/configuration/config.md", "url": "https://github.com/pwndbg/pwndbg/blob/dev/docs/configuration/config.md", "content": "<!-- THIS WHOLE FILE IS AUTOGENERATED. DO NOT MODIFY IT. See scripts/generate-docs.sh -->\n\n\n\n\n# config\n\n## **ai-anthropic-api-key**\n<small style=\"color: lightgray;\">(only in GDB)</small>\n\n\nAnthropic API key.\n\nDefaults to ANTHROPIC_API_KEY environment variable if not set.\n\n**Default:** ''  \n\n----------\n\n## **ai-history-size**\n<small style=\"color: lightgray;\">(only in GDB)</small>\n\n\nMaximum number of questions and answers to keep in the prompt.\n\n\n\n**Default:** 3  \n\n----------\n\n## **ai-max-tokens**\n<small style=\"color: lightgray;\">(only in GDB)</small>\n\n\nThe maximum number of tokens to return in the response.\n\nUseful when limiting verbosity or conserving resources. Set to a lower value to restrict output.\n\n**Default:** 100  \n\n----------\n\n## **ai-model**\n<small style=\"color: lightgray;\">(only in GDB)</small>\n\n\nThe name of the large language model to query.\n\nChanging this affects the behavior, response quality, and cost (if applicable) of AI responses.\n\n**Default:** 'gpt-3.5-turbo'  \n\n----------\n\n## **ai-ollama-endpoint**\n<small style=\"color: lightgray;\">(only in GDB)</small>\n\n\nOllama API endpoint.\n\nDefaults to OLLAMA_ENDPOINT environment variable if not set.\n\n**Default:** ''  \n\n----------\n\n## **ai-openai-api-key**\n<small style=\"color: lightgray;\">(only in GDB)</small>\n\n\nOpenAI API key.\n\nWill default to OPENAI_API_KEY environment variable if not set.\n\n**Default:** ''  \n\n----------\n\n## **ai-show-usage**\n<small style=\"color: lightgray;\">(only in GDB)</small>\n\n\nWhether to show how many tokens are used with each OpenAI API call.\n\n\n\n**Default:** off  \n\n----------\n\n## **ai-stack-depth**\n<small style=\"color: lightgray;\">(only in GDB)</small>\n\n\nRows of stack context to include in the prompt for the ai command.\n\n\n\n**Default:** 16  \n\n----------\n\n## **ai-temperature**\n<small style=\"color: lightgray;\">(only in GDB)</small>\n\n\nThe temperature specification for the LLM query.\n\nThis controls the degree of randomness in the response.\n\n**Default:** 0  \n\n----------\n\n## **attachp-resolution-method**\n<small style=\"color: lightgray;\">(only in GDB)</small>\n\n\nHow to determine the process to attach when multiple candidates exists.\n\n\n\n**Default:** 'ask'  \n**Valid values:** 'none', 'oldest', 'newest', 'ask'\n\n----------\n\n## **auto-explore-auxv**\n\n\nStack exploration for AUXV information; it may be really slow.\n\n\n\n**Default:** 'warn'  \n**Valid values:** 'warn', 'yes', 'no'\n\n----------\n\n## **auto-explore-pages**\n\n\nWhether to try to infer page permissions when memory maps are missing.\n\nThis command can cause errors.\n\n**Default:** 'warn'  \n**Valid values:** 'yes', 'warn', 'no'\n\n----------\n\n## **auto-explore-stack**\n\n\nStack exploration; it may be really slow.\n\n\n\n**Default:** 'warn'  \n**Valid values:** 'warn', 'yes', 'no'\n\n----------\n\n## **auto-save-search**\n\n\nAutomatically pass --save to \"search\" command.\n\n\n\n**Default:** off  \n\n----------\n\n## **bn-autosync**\n\n\nWhether to automatically run bn-sync every step.\n\n\n\n**Default:** off  \n\n----------\n\n## **bn-il-level**\n\n\nThe IL level to use when displaying Binary Ninja decompilation.\n\n\n\n**Default:** 'hlil'  \n**Valid values:** 'disasm', 'llil', 'mlil', 'hlil'\n\n----------\n\n## **bn-rpc-host**\n\n\nBinary Ninja XML-RPC server host.\n\n\n\n**Default:** '127.0.0.1'  \n\n----------\n\n## **bn-rpc-port**\n\n\nBinary Ninja XML-RPC server port.\n\n\n\n**Default:** 31337  \n\n----------\n\n## **bn-timeout**\n\n\nTime to wait for Binary Ninja XML-RPC, in seconds.\n\n\n\n**Default:** 2  \n\n----------\n\n## **context-backtrace-lines**\n\n\nNumber of lines to print in the backtrace context.\n\n\n\n**Default:** 8  \n\n----------\n\n## **context-clear-screen**\n\n\nWhether to clear the screen before printing the context.\n\n\n\n**Default:** off  \n\n----------\n\n## **context-code-lines**\n\n\nNumber of source code lines to print by the context command.\n\n\n\n**Default:** 10  \n\n----------\n\n## **context-code-tabstop**\n\n\nNumber of spaces that a <tab> in the source code counts for.\n\n\n\n**Default:** 8  \n\n----------\n\n## **context-disasm-lines**\n\n\nNumber of additional lines to print in the disasm context.\n\n\n\n**Default:** 10  \n\n----------\n\n## **context-ghidra**\n\n\nWhen to try to decompile the current function with ghidra.\n\nDoing this is slow and requires radare2/r2pipe or rizin/rzpipe.\n\n**Default:** 'never'  \n**Valid values:** 'always', 'never', 'if-no-source'\n\n----------\n\n## **context-history-size**\n\n\nNumber of context history entries to store.\n\n\n\n**Default:** 50  \n\n----------\n\n## **context-integration-decompile**\n\n\nWhether context should fall back to decompilation with no source code.\n\n\n\n**Default:** on  \n\n----------\n\n## **context-max-threads**\n\n\nMaximum number of threads displayed by the context command.\n\n\n\n**Default:** 4  \n\n----------\n\n## **context-output**\n\n\nWhere Pwndbg should output (\"stdout\" or file/tty).\n\n\n\n**Default:** 'stdout'  \n\n----------\n\n## **context-reserve-lines**\n\n\nWhen to reserve lines after the prompt to reduce context shake.\n\nThe \"if-ctx-fits\" setting only reserves lines if the whole context would still fit vertically in the current terminal window.\nIt doesn't take into account line-wrapping due to insufficient terminal width.\n\n**Default:** 'if-ctx-fits'  \n**Valid values:** 'never', 'if-ctx-fits', 'always'\n\n----------\n\n## **context-sections**\n\n\nWhich context sections are displayed (controls order).\n\n\n\n**Default:** 'regs disasm code ghidra stack backtrace expressions threads heap_tracker'  \n\n----------\n\n## **context-stack-lines**\n\n\nNumber of lines to print in the stack context.\n\n\n\n**Default:** 8  \n\n----------\n\n## **cymbol-editor**\n<small style=\"color: lightgray;\">(only in GDB)</small>\n\n\nPath to the editor for editing custom structures.\n\n\n\n**Default:** ''  \n\n----------\n\n## **debug-events**\n<small style=\"color: lightgray;\">(only in GDB)</small>\n\n\nDisplay internal event debugging info.\n\n\n\n**Default:** off  \n\n----------\n\n## **decompiler**\n\n\nFramework that your ghidra plugin installed.\n\n\n\n**Default:** 'radare2'  \n**Valid values:** 'radare2', 'rizin'\n\n----------\n\n## **default-visualize-chunk-number**\n\n\nDefault number of chunks to visualize.\n\n\n\n**Default:** 10  \n\n----------\n\n## **dereference-limit**\n\n\nMax number of pointers to dereference in a chain.\n\n\n\n**Default:** 5  \n\n----------\n\n## **disasm-annotations**\n\n\nDisplay annotations for instructions.\n\n\n\n**Default:** on  \n\n----------\n\n## **disasm-inline-symbols**\n\n\nReplacing constant operands with their symbol in the disassembly.\n\n\n\n**Default:** on  \n\n----------\n\n## **disasm-reg-alias**\n\n\nForce the disassembly to use register aliases (e.g. aarch64 x29 -> fp).\n\nThe register aliasing is done by capstone, see:\nhttps://github.com/capstone-engine/capstone/blob/next/docs/cs_v6_release_guide.md#:~:text=None.-,Register%20alias,-Register%20alias%20\n\nEnabling this may make disassembly slower.\n\n**Default:** off  \n\n----------\n\n## **disasm-telescope-depth**\n\n\nDepth of telescope for disasm annotations.\n\n\n\n**Default:** 3  \n\n----------\n\n## **disasm-telescope-string-length**\n\n\nThe number of characters in strings to display in disasm annotations.\n\n\n\n**Default:** 50  \n\n----------\n\n## **emulate**\n\n\nUnicorn emulation of code from the current PC register.\n\nEmulate can be:\n\n1. off             - no emulation is performed\n2. jumps-only      - emulation is done only to resolve branch instructions\n3. on              - emulation is done to resolve registers/memory values etc.\n\nEmulation can slow down Pwndbg. Disabling it may improve performance.\nEmulation requires >1GB RAM being available on the system and ability to allocate RWX memory.\n\n**Default:** 'on'  \n**Valid values:** 'on', 'off', 'jumps-only'\n\n----------\n\n## **emulate-annotations**\n\n\nUnicorn emulation for instruction annotations.\n\nRefers to register and memory value annotations.\n\n**Default:** on  \n\n----------\n\n## **emulate-future-annotations**\n\n\nUnicorn emulation for future instruction's annotations.\n\n\n\n**Default:** on  \n\n----------\n\n## **exception-debugger**\n\n\nWhether to debug exceptions raised in Pwndbg commands.\n\n\n\n**Default:** off  \n\n----------\n\n## **exception-verbose**\n\n\nPrint a full stacktrace for exceptions raised in Pwndbg commands.\n\n\n\n**Default:** off  \n\n----------\n\n## **gcc-compiler-path**\n<small style=\"color: lightgray;\">(only in GDB)</small>\n\n\nPath to the gcc/g++ toolchain for generating imported symbols.\n\n\n\n**Default:** ''  \n\n----------\n\n## **gdb-workaround-stop-event**\n<small style=\"color: lightgray;\">(only in GDB)</small>\n\n\nAsynchronous stop events to improve 'commands' functionality.\n\nNote that this may cause unexpected behavior with Pwndbg or gdb.execute.\n\nValues explained:\n\n+ `disabled` - Disable the workaround (default).\n+ `disabled-deadlock` - Disable only deadlock detection; deadlocks may still occur.\n+ `enabled` - Enable asynchronous stop events; gdb.execute may behave unexpectedly (asynchronously).\n\n**Default:** 'disabled'  \n**Valid values:** 'disabled', 'disabled-deadlock', 'enabled'\n\n----------\n\n## **go-dump-indent-amount**\n\n\nThe indent amount for go-dump pretty printing.\n\n\n\n**Default:** 4  \n\n----------\n\n## **go-dump-line-width**\n\n\nThe soft line width for go-dump pretty printing.\n\n\n\n**Default:** 80  \n\n----------\n\n## **hexdump-bytes**\n\n\nNumber of bytes printed by hexdump command.\n\n\n\n**Default:** 64  \n\n----------\n\n## **hexdump-group-use-big-endian**\n\n\nUse big-endian within each group of bytes in hexdump command.\n\nWhen `on`, use big-endian within each group of bytes. Only applies to raw bytes, not the ASCII part. See also hexdump-highlight-group-lsb.\n\n**Default:** off  \n\n----------\n\n## **hexdump-group-width**\n\n\nNumber of bytes grouped in hexdump command.\n\nIf -1, the architecture's pointer size is used.\n\n**Default:** -1  \n\n----------\n\n## **hexdump-limit-mb**\n\n\nThe maximum size in megabytes (MB) `hexdump` will read.\n\nSet the maximum size in megabytes (MB) that the `hexdump` command will attempt to read at once.\n    Prevents GDB crashes due to excessive memory allocation requests.\n    Set to 0 for unlimited (use with caution).\n\n**Default:** 10  \n\n----------\n\n## **hexdump-width**\n\n\nLine width of hexdump command.\n\n\n\n**Default:** 16  \n\n----------\n\n## **ida-rpc-host**\n<small style=\"color: lightgray;\">(only in GDB)</small>\n\n\nIda xmlrpc server address.\n\n\n\n**Default:** '127.0.0.1'  \n\n----------\n\n## **ida-rpc-port**\n<small style=\"color: lightgray;\">(only in GDB)</small>\n\n\nIda xmlrpc server port.\n\n\n\n**Default:** 31337  \n\n----------\n\n## **ida-timeout**\n<small style=\"color: lightgray;\">(only in GDB)</small>\n\n\nTime to wait for ida xmlrpc in seconds.\n\n\n\n**Default:** 2  \n\n----------\n\n## **integration-function-lookup**\n\n\nUse integration to look up function type signatures.\n\n\n\n**Default:** on  \n\n----------\n\n## **integration-provider**\n\n\nWhich provider to use for integration features.\n\n\n\n**Default:** 'none'  \n**Valid values:** 'none', 'binja', 'ida'\n\n----------\n\n## **integration-smart-enhance**\n\n\nUse integration to determine when to disassemble during enhancing.\n\n\n\n**Default:** on  \n\n----------\n\n## **integration-symbol-lookup**\n\n\nWhether to use integration to look up unknown symbols.\n\n\n\n**Default:** on  \n\n----------\n\n## **kernel-vmmap**\n\n\nThe method to get vmmap information when debugging via QEMU kernel.\n\nValues explained:\n\n+ `page-tables` - read /proc/$qemu-pid/mem to parse kernel page tables to render vmmap\n+ `monitor` - use QEMU's `monitor info mem` to render vmmap\n+ `none` - disable vmmap rendering; useful if rendering is particularly slow\n\nNote that the page-tables method will require the QEMU kernel process to be on the same machine and within the same PID namespace. Running QEMU kernel and GDB in different Docker containers will not work. Consider running both containers with --pid=host (meaning they will see and so be able to interact with all processes on the machine).\n\n**Default:** 'page-tables'  \n**Valid values:** 'page-tables', 'monitor', 'none'\n\n----------\n\n## **left-pad-disasm**\n\n\nWhether to left-pad disassembly.\n\n\n\n**Default:** on  \n\n----------\n\n## **max-decimal-number**\n\n\nShow all numbers greater than this in hex.\n\nFor negative numbers, their absolute value is used.\n\nSet the parameter to 'unlimited' if you want all values in decimal.\nSpecially, set the parameter to zero if you want all values in hex.\n\nThe assembly instruction operands come from capstone, and are thus\nnot controlled by this setting. For consistency with them, leave\nthis setting at 9 (the default).\n\n**Default:** 9  \n\n----------\n\n## **max-visualize-chunk-size**\n\n\nMax display size for heap chunks visualization (0 for display all).\n\n\n\n**Default:** 0  \n\n----------\n\n## **nearpc-integration-comments**\n\n\nWhether to show comments from integration provider.\n\n\n\n**Default:** on  \n\n----------\n\n## **nearpc-lines**\n\n\nNumber of additional lines to print for the nearpc command.\n\n\n\n**Default:** 10  \n\n----------\n\n## **nearpc-num-opcode-bytes**\n\n\nNumber of opcode bytes to print for each instruction.\n\n\n\n**Default:** 0  \n\n----------\n\n## **nearpc-opcode-separator-bytes**\n\n\nNumber of spaces between opcode bytes.\n\n\n\n**Default:** 1  \n\n----------\n\n## **nearpc-show-args**\n\n\nWhether to show call arguments below instruction.\n\n\n\n**Default:** on  \n\n----------\n\n## **objc-max-function-arguments**\n\n\nMaximum number of arguments to resolve for an Objective-C method call.\n\n\n\n**Default:** 32  \n\n----------\n\n## **objc-max-function-types-depth**\n\n\nMaximum allowed depth for a type in an Objective-C method call.\n\n\n\n**Default:** 32  \n\n----------\n\n## **safe-linking**\n\n\nWhether glibc uses safe-linking.\n\n\n\n**Default:** auto  \n**Valid values:** on, off, auto.\n\n----------\n\n## **show-compact-regs**\n\n\nWhether to show a compact register view with columns.\n\n\n\n**Default:** off  \n\n----------\n\n## **show-compact-regs-columns**\n\n\nThe number of columns (0 for dynamic number of columns).\n\n\n\n**Default:** 2  \n\n----------\n\n## **show-compact-regs-min-width**\n\n\nThe minimum width of each column.\n\n\n\n**Default:** 20  \n\n----------\n\n## **show-compact-regs-separation**\n\n\nThe number of spaces separating columns.\n\n\n\n**Default:** 4  \n\n----------\n\n## **show-flags**\n\n\nWhether to show flags registers.\n\n\n\n**Default:** off  \n\n----------\n\n## **show-retaddr-reg**\n\n\nWhether to show return address register.\n\n\n\n**Default:** on  \n\n----------\n\n## **show-tips**\n\n\nWhether to display the tip of the day on startup.\n\n\n\n**Default:** on  \n\n----------\n\n## **syntax-highlight**\n\n\nSource code / assembly syntax highlight.\n\n\n\n**Default:** on  \n\n----------\n\n## **telescope-dont-skip-registers**\n\n\nDon't skip a repeated line if a registers points to it.\n\n\n\n**Default:** on  \n\n----------\n\n## **telescope-frame-print-retaddr**\n\n\nPrint one pointer past the stack frame.\n\n\n\n**Default:** on  \n\n----------\n\n## **telescope-framepointer-offset**\n\n\nPrint offset to framepointer for each address, if sufficiently small.\n\n\n\n**Default:** on  \n\n----------\n\n## **telescope-lines**\n\n\nNumber of lines to printed by the telescope command.\n\n\n\n**Default:** 8  \n\n----------\n\n## **telescope-skip-repeating-val**\n\n\nWhether to skip repeating values of the telescope command.\n\n\n\n**Default:** on  \n\n----------\n\n## **telescope-skip-repeating-val-min**\n\n\nMinimum amount of repeated values before skipping lines.\n\n\n\n**Default:** 3  \n\n----------\n\n## **vmmap-prefer-relpaths**\n\n\nShow relative paths by default in vmmap.\n\n\n\n**Default:** on  \n\n----------\n", "timestamp": "2025-10-21T13:21:26.490683"}
{"source": "github", "repo": "pwndbg/pwndbg", "file": "docs/configuration/heap.md", "url": "https://github.com/pwndbg/pwndbg/blob/dev/docs/configuration/heap.md", "content": "<!-- THIS WHOLE FILE IS AUTOGENERATED. DO NOT MODIFY IT. See scripts/generate-docs.sh -->\n\n\n\n\n# heap\n\n## **glibc**\n\n\nGlibc version for heap heuristics resolution (e.g. 2.31).\n\n\n\n**Default:** ''  \n\n----------\n\n## **global-max-fast**\n\n\nThe address of global_max_fast.\n\n\n\n**Default:** '0'  \n\n----------\n\n## **heap-corruption-check-limit**\n\n\nAmount of chunks to traverse for the bin corruption check.\n\nThe bins are traversed both forwards and backwards.\n\n**Default:** 64  \n\n----------\n\n## **heap-dereference-limit**\n\n\nNumber of chunks to dereference in each bin.\n\n\n\n**Default:** 8  \n\n----------\n\n## **main-arena**\n\n\nThe address of main_arena.\n\n\n\n**Default:** '0'  \n\n----------\n\n## **mp**\n\n\nThe address of mp_.\n\n\n\n**Default:** '0'  \n\n----------\n\n## **ng-search-on-fail**\n\n\nLet the ng-slot* commands search the heap if necessary.\n\nFor freed, avail(able) and corrupted slots, it may be\nimpossible to recover the start of the group and meta.\n\nWhen this option is set to True, the ng-slotu and ng-slots\ncommands will search the heap to try to find the correct meta/group.\n\n**Default:** on  \n\n----------\n\n## **ng-vis-count**\n\n\nDefault count for ng-vis.\n\n\n\n**Default:** 10  \n\n----------\n\n## **resolve-heap-via-heuristic**\n\n=== \"GDB\"\n\n     The strategy to resolve heap via heuristic.\n\n    Values explained:\n\n    + `auto` - Pwndbg will try to use heuristics if debug symbols are missing\n    + `force` - Pwndbg will always try to use heuristics, even if debug symbols are available\n    + `never` - Pwndbg will never use heuristics to resolve the heap\n\n    If the output of the heap related command produces errors with heuristics, you\n    can try manually setting the libc symbol addresses.\n    For this, see the `heap_config` command output and set the `main_arena`, `mp_`,\n    `global_max_fast`, `tcache` and `thread_arena` addresses.\n\n    Note: Pwndbg will generate more reliable results with proper debug symbols.\n    Therefore, when debug symbols are missing, you should try to install them first\n    if you haven't already.\n\n    They can probably be installed via the package manager of your choice.\n    See also: https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html .\n\n    E.g. on Ubuntu/Debian you might need to do the following steps (for 64-bit and\n    32-bit binaries):\n    ```bash\n    sudo apt-get install libc6-dbg\n    sudo dpkg --add-architecture i386\n    sudo apt-get install libc-dbg:i386\n    ```\n    If you used setup.sh on Arch based distro you'll need to do a power cycle or set\n    environment variable manually like this:\n    ```bash\n    export DEBUGINFOD_URLS=https://debuginfod.archlinux.org\n    ```\n\n    In addition, even you have the debug symbols of libc, you might still see the\n    following warning when debugging a multi-threaded program:\n    ```\n    warning: Unable to find libthread_db matching inferior's thread library, thread\n    debugging will not be available.\n    ```\n\n    You'll need to ensure that the correct `libthread_db.so` is loaded. To do this,\n    set the search path using:\n    ```\n    set libthread-db-search-path <path having correct libthread_db.so>\n    ```\n    Then, restart your program to enable proper thread debugging.\n\n    **Default:** 'auto'  \n    **Valid values:** 'auto', 'force', 'never'\n=== \"LLDB\"\n\n     The strategy to resolve heap via heuristic.\n\n    Values explained:\n\n    + `auto` - Pwndbg will try to use heuristics if debug symbols are missing\n    + `force` - Pwndbg will always try to use heuristics, even if debug symbols are available\n    + `never` - Pwndbg will never use heuristics to resolve the heap\n\n    If the output of the heap related command produces errors with heuristics, you\n    can try manually setting the libc symbol addresses.\n    For this, see the `heap_config` command output and set the `main_arena`, `mp_`,\n    `global_max_fast`, `tcache` and `thread_arena` addresses.\n\n    Note: Pwndbg will generate more reliable results with proper debug symbols.\n    Therefore, when debug symbols are missing, you should try to install them first\n    if you haven't already.\n\n    They can probably be installed via the package manager of your choice.\n    See also: https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html .\n\n    E.g. on Ubuntu/Debian you might need to do the following steps (for 64-bit and\n    32-bit binaries):\n    ```bash\n    sudo apt-get install libc6-dbg\n    sudo dpkg --add-architecture i386\n    sudo apt-get install libc-dbg:i386\n    ```\n    If you used setup.sh on Arch based distro you'll need to do a power cycle or set\n    environment variable manually like this:\n    ```bash\n    export DEBUGINFOD_URLS=https://debuginfod.archlinux.org\n    ```\n\n    **Default:** 'auto'  \n    **Valid values:** 'auto', 'force', 'never'\n\n----------\n\n## **tcache**\n\n\nThe address pointed by tcache.\n\n\n\n**Default:** '0'  \n\n----------\n\n## **thread-arena**\n\n\nThe address pointed by thread_arena.\n\n\n\n**Default:** '0'  \n\n----------\n", "timestamp": "2025-10-21T13:21:26.610252"}
{"source": "github", "repo": "pwndbg/pwndbg", "file": "docs/configuration/theme.md", "url": "https://github.com/pwndbg/pwndbg/blob/dev/docs/configuration/theme.md", "content": "<!-- THIS WHOLE FILE IS AUTOGENERATED. DO NOT MODIFY IT. See scripts/generate-docs.sh -->\n\n\n\n\n# theme\n\n## **backtrace-address-color**\n\n\nColor for backtrace (address).\n\n\n\n**Default:** 'none'  \n\n----------\n\n## **backtrace-frame-label**\n\n\nFrame number label for backtrace.\n\n\n\n**Default:** ''  \n\n----------\n\n## **backtrace-frame-label-color**\n\n\nColor for backtrace (frame label).\n\n\n\n**Default:** 'none'  \n\n----------\n\n## **backtrace-prefix**\n\n\nPrefix for current backtrace label.\n\n\n\n**Default:** '►'  \n\n----------\n\n## **backtrace-prefix-color**\n\n\nColor for prefix of current backtrace label.\n\n\n\n**Default:** 'none'  \n\n----------\n\n## **backtrace-symbol-color**\n\n\nColor for backtrace (symbol).\n\n\n\n**Default:** 'none'  \n\n----------\n\n## **banner-color**\n\n\nColor for banner line.\n\n\n\n**Default:** 'blue'  \n\n----------\n\n## **banner-separator**\n\n\nRepeated banner separator character.\n\n\n\n**Default:** '─'  \n\n----------\n\n## **banner-title-color**\n\n\nColor for banner title.\n\n\n\n**Default:** 'none'  \n\n----------\n\n## **banner-title-position**\n\n\nBanner title position.\n\n\n\n**Default:** 'center'  \n**Valid values:** 'center', 'left', 'right'\n\n----------\n\n## **banner-title-surrounding-left**\n\n\nBanner title surrounding char (left side).\n\n\n\n**Default:** '[ '  \n\n----------\n\n## **banner-title-surrounding-right**\n\n\nBanner title surrounding char (right side).\n\n\n\n**Default:** ' ]'  \n\n----------\n\n## **bn-decomp-style**\n\n\nDecompilation highlight theme for Binary Ninja.\n\n\n\n**Default:** 'dark'  \n**Valid values:** 'dark', 'light'\n\n----------\n\n## **chain-arrow-color**\n\n\nColor of chain formatting (arrow).\n\n\n\n**Default:** 'normal'  \n\n----------\n\n## **chain-arrow-left**\n\n\nLeft arrow of chain formatting.\n\n\n\n**Default:** '◂—'  \n\n----------\n\n## **chain-arrow-right**\n\n\nRight arrow of chain formatting.\n\n\n\n**Default:** '—▸'  \n\n----------\n\n## **chain-contiguous-marker**\n\n\nContiguous marker of chain formatting.\n\n\n\n**Default:** '...'  \n\n----------\n\n## **chain-contiguous-marker-color**\n\n\nColor of chain formatting (contiguous marker).\n\n\n\n**Default:** 'normal'  \n\n----------\n\n## **code-prefix**\n\n\nPrefix marker for 'context code' command.\n\n\n\n**Default:** '►'  \n\n----------\n\n## **code-prefix-color**\n\n\nColor for 'context code' command (prefix marker).\n\n\n\n**Default:** 'none'  \n\n----------\n\n## **comment-color**\n\n\nColor for comment.\n\n\n\n**Default:** 'gray'  \n\n----------\n\n## **context-flag-bracket-color**\n\n\nColor for flags register (bracket).\n\n\n\n**Default:** 'none'  \n\n----------\n\n## **context-flag-changed-color**\n\n\nColor for flags register (flag changed).\n\n\n\n**Default:** 'underline'  \n\n----------\n\n## **context-flag-set-color**\n\n\nColor for flags register (flag set).\n\n\n\n**Default:** 'green,bold'  \n\n----------\n\n## **context-flag-unset-color**\n\n\nColor for flags register (flag unset).\n\n\n\n**Default:** 'red'  \n\n----------\n\n## **context-flag-value-color**\n\n\nColor for flags register (register value).\n\n\n\n**Default:** 'none'  \n\n----------\n\n## **context-register-changed-color**\n\n\nColor for registers label (change marker).\n\n\n\n**Default:** 'red'  \n\n----------\n\n## **context-register-changed-marker**\n\n\nChange marker for registers label.\n\n\n\n**Default:** '*'  \n\n----------\n\n## **context-register-color**\n\n\nColor for registers label.\n\n\n\n**Default:** 'bold'  \n\n----------\n\n## **disable-colors**\n\n\nWhether to color the output or not.\n\n\n\n**Default:** off  \n\n----------\n\n## **disasm-branch-color**\n\n\nColor for disasm (branch/call instruction).\n\n\n\n**Default:** 'bold'  \n\n----------\n\n## **disasm-branch-off**\n\n\nMarker for branches that will NOT be taken.\n\n\n\n**Default:** '✘'  \n\n----------\n\n## **disasm-branch-on**\n\n\nMarker for branches that WILL be taken.\n\n\n\n**Default:** '✔'  \n\n----------\n\n## **enhance-comment-color**\n\n\nColor of value enhance (comment).\n\n\n\n**Default:** 'none'  \n\n----------\n\n## **enhance-integer-value-color**\n\n\nColor of value enhance (integer).\n\n\n\n**Default:** 'none'  \n\n----------\n\n## **enhance-string-value-color**\n\n\nColor of value enhance (string).\n\n\n\n**Default:** 'none'  \n\n----------\n\n## **enhance-unknown-color**\n\n\nColor of value enhance (unknown value).\n\n\n\n**Default:** 'none'  \n\n----------\n\n## **go-dump-debug**\n\n\nColor for 'go-dump' command's debug info when --debug is specified.\n\n\n\n**Default:** 'blue'  \n\n----------\n\n## **hexdump-address-color**\n\n\nColor for hexdump command (address label).\n\n\n\n**Default:** 'none'  \n\n----------\n\n## **hexdump-ascii-block-separator**\n\n\nBlock separator char of the hexdump command.\n\n\n\n**Default:** '│'  \n\n----------\n\n## **hexdump-byte-separator**\n\n\nSeparator of single bytes in hexdump (does NOT affect group separator).\n\n\n\n**Default:** ' '  \n\n----------\n\n## **hexdump-colorize-ascii**\n\n\nWhether to colorize the hexdump command ascii section.\n\n\n\n**Default:** on  \n\n----------\n\n## **hexdump-highlight-group-lsb**\n\n\nHighlight LSB of each group.\n\nApplies only if hexdump-use-big-endian actually changes byte order.\n\n**Default:** 'underline'  \n\n----------\n\n## **hexdump-normal-color**\n\n\nColor for hexdump command (normal bytes).\n\n\n\n**Default:** 'none'  \n\n----------\n\n## **hexdump-offset-color**\n\n\nColor for hexdump command (offset label).\n\n\n\n**Default:** 'none'  \n\n----------\n\n## **hexdump-printable-color**\n\n\nColor for hexdump command (printable characters).\n\n\n\n**Default:** 'bold'  \n\n----------\n\n## **hexdump-separator-color**\n\n\nColor for hexdump command (group separator).\n\n\n\n**Default:** 'none'  \n\n----------\n\n## **hexdump-special-color**\n\n\nColor for hexdump command (special bytes).\n\n\n\n**Default:** 'yellow'  \n\n----------\n\n## **hexdump-zero-color**\n\n\nColor for hexdump command (zero bytes).\n\n\n\n**Default:** 'red'  \n\n----------\n\n## **highlight-breakpoints**\n\n\nWhether to highlight breakpoints.\n\n\n\n**Default:** on  \n\n----------\n\n## **highlight-color**\n\n\nColor added to highlights like source/pc.\n\n\n\n**Default:** 'green,bold'  \n\n----------\n\n## **highlight-pc**\n\n\nWhether to highlight the current instruction.\n\n\n\n**Default:** on  \n\n----------\n\n## **highlight-source**\n\n\nWhether to highlight the closest source line.\n\n\n\n**Default:** on  \n\n----------\n\n## **memory-code-color**\n\n\nColor for executable memory.\n\n\n\n**Default:** 'red'  \n\n----------\n\n## **memory-data-color**\n\n\nColor for all other writable memory.\n\n\n\n**Default:** 'purple'  \n\n----------\n\n## **memory-guard-color**\n\n\nColor added to all guard pages (no perms).\n\n\n\n**Default:** 'cyan'  \n\n----------\n\n## **memory-heap-color**\n\n\nColor for heap memory.\n\n\n\n**Default:** 'blue'  \n\n----------\n\n## **memory-rodata-color**\n\n\nColor for all read only memory.\n\n\n\n**Default:** 'normal'  \n\n----------\n\n## **memory-stack-color**\n\n\nColor for stack memory.\n\n\n\n**Default:** 'yellow'  \n\n----------\n\n## **memory-wx-color**\n\n\nColor added to all WX memory.\n\n\n\n**Default:** 'underline'  \n\n----------\n\n## **message-breakpoint-color**\n\n\nColor of breakpoint messages.\n\n\n\n**Default:** 'yellow'  \n\n----------\n\n## **message-debug-color**\n\n\nColor of debug messages.\n\n\n\n**Default:** 'blue'  \n\n----------\n\n## **message-error-color**\n\n\nColor of error messages.\n\n\n\n**Default:** 'red'  \n\n----------\n\n## **message-exit-color**\n\n\nColor of exit messages.\n\n\n\n**Default:** 'red'  \n\n----------\n\n## **message-hint-color**\n\n\nColor of hint and marker messages.\n\n\n\n**Default:** 'yellow'  \n\n----------\n\n## **message-info-color**\n\n\nColor of info messages.\n\n\n\n**Default:** 'white'  \n\n----------\n\n## **message-notice-color**\n\n\nColor of notice messages.\n\n\n\n**Default:** 'purple'  \n\n----------\n\n## **message-signal-color**\n\n\nColor of signal messages.\n\n\n\n**Default:** 'bold,red'  \n\n----------\n\n## **message-status-off-color**\n\n\nColor of off status messages.\n\n\n\n**Default:** 'red'  \n\n----------\n\n## **message-status-on-color**\n\n\nColor of on status messages.\n\n\n\n**Default:** 'green'  \n\n----------\n\n## **message-success-color**\n\n\nColor of success messages.\n\n\n\n**Default:** 'green'  \n\n----------\n\n## **message-system-color**\n\n\nColor of system messages.\n\n\n\n**Default:** 'light-red'  \n\n----------\n\n## **message-warning-color**\n\n\nColor of warning messages.\n\n\n\n**Default:** 'yellow'  \n\n----------\n\n## **nearpc-address-color**\n\n\nColor for nearpc command (address).\n\n\n\n**Default:** 'normal'  \n\n----------\n\n## **nearpc-argument-color**\n\n\nColor for nearpc command (target argument).\n\n\n\n**Default:** 'bold'  \n\n----------\n\n## **nearpc-branch-marker**\n\n\nBranch marker line for nearpc command.\n\n\n\n**Default:** '    ↓'  \n\n----------\n\n## **nearpc-branch-marker-color**\n\n\nColor for nearpc command (branch marker line).\n\n\n\n**Default:** 'normal'  \n\n----------\n\n## **nearpc-branch-marker-contiguous**\n\n\nContiguous branch marker line for nearpc command.\n\n\n\n**Default:** ' '  \n\n----------\n\n## **nearpc-breakpoint-color**\n\n\nColor for nearpc command (breakpoint marker).\n\n\n\n**Default:** 'red'  \n\n----------\n\n## **nearpc-breakpoint-prefix**\n\n\nBreakpoint marker for nearpc command.\n\n\n\n**Default:** 'b+'  \n\n----------\n\n## **nearpc-integration-comments-color**\n\n\nColor for nearpc command (integration comments).\n\n\n\n**Default:** 'bold'  \n\n----------\n\n## **nearpc-prefix**\n\n\nPrefix marker for nearpc command.\n\n\n\n**Default:** '►'  \n\n----------\n\n## **nearpc-prefix-color**\n\n\nColor for nearpc command (prefix marker).\n\n\n\n**Default:** 'none'  \n\n----------\n\n## **nearpc-symbol-color**\n\n\nColor for nearpc command (symbol).\n\n\n\n**Default:** 'normal'  \n\n----------\n\n## **nearpc-syscall-name-color**\n\n\nColor for nearpc command (resolved syscall name).\n\n\n\n**Default:** 'red'  \n\n----------\n\n## **prompt-alive-color**\n\n\nPrompt alive color.\n\n\n\n**Default:** 'bold,green'  \n\n----------\n\n## **prompt-color**\n\n\nPrompt color.\n\n\n\n**Default:** 'bold,red'  \n\n----------\n\n## **prop-name-color**\n\n\nColor used to highlight the name in name-value pairs.\n\n\nUsed heavily in mallocng commands.\n\n\n**Default:** 'bold'  \n\n----------\n\n## **prop-title-color**\n\n\nColor used to highlight the title of name-value pair groups.\n\n\nUsed heavily in mallocng commands.\n\n\n**Default:** 'green'  \n\n----------\n\n## **prop-value-color**\n\n\nColor used to highlight the value in name-value pairs.\n\n\nUsed heavily in mallocng commands.\n\n\n**Default:** 'yellow'  \n\n----------\n\n## **syntax-highlight-style**\n\n\nSource code / assembly syntax highlight stylename of pygments module.\n\n\n\n**Default:** 'monokai'  \n\n----------\n\n## **telescope-offset-color**\n\n\nColor of the telescope command (offset prefix).\n\n\n\n**Default:** 'normal'  \n\n----------\n\n## **telescope-offset-delimiter**\n\n\nOffset delimiter of the telescope command.\n\n\n\n**Default:** ':'  \n\n----------\n\n## **telescope-offset-delimiter-color**\n\n\nColor of the telescope command (offset delimiter).\n\n\n\n**Default:** 'normal'  \n\n----------\n\n## **telescope-offset-separator**\n\n\nOffset separator of the telescope command.\n\n\n\n**Default:** '│'  \n\n----------\n\n## **telescope-offset-separator-color**\n\n\nColor of the telescope command (offset separator).\n\n\n\n**Default:** 'normal'  \n\n----------\n\n## **telescope-register-color**\n\n\nColor of the telescope command (register).\n\n\n\n**Default:** 'bold'  \n\n----------\n\n## **telescope-repeating-marker**\n\n\nRepeating values marker of the telescope command.\n\n\n\n**Default:** '... ↓'  \n\n----------\n\n## **telescope-repeating-marker-color**\n\n\nColor of the telescope command (repeating values marker).\n\n\n\n**Default:** 'normal'  \n\n----------\n", "timestamp": "2025-10-21T13:21:26.973386"}
{"source": "github", "repo": "pwndbg/pwndbg", "file": "docs/features.md", "url": "https://github.com/pwndbg/pwndbg/blob/dev/docs/features.md", "content": "---\nhide:\n  - navigation\n---\n\n<!--\n  This document should give an overview of some of the most interesting\n  features Pwndbg has to offer. Use a lot of screenshots and recordings.\n  Don't go too much in-depth - it is better to write a tutorial in another\n  page of the docs and simply link to it.\n-->\n\n# Features\n\nPwndbg has a great deal of useful features. You can a see all available commands at any time by typing the `pwndbg` command or by checking the [Commands section](commands/index.md) of the documentation. For configuration and theming see the [Configuration section](configuration/index.md). Below is a subset of commands which are easy to capture in screenshots.\n\n## Disassembly and Emulation\n\nPwndbg leverages the [capstone](https://github.com/capstone-engine/capstone) and [unicorn](https://github.com/unicorn-engine/unicorn) engines, along with its own instrospection, to display, annotate and emulate instructions.\n\nOperands of instructions are resolved, conditions evaluated, and only the instructions that will actually be executed are shown.\n\n![](assets/caps/disasm_example.png)\n\nThis is incredibly useful when stepping through jump tables, PLT entries, and ROPping.\n\n![](assets/caps/emulation_rop.png)\n\n## Context\n\nA useful summary of the current execution context is printed every time the debugger stops (e.g. breakpoint or single-step), displaying all registers, the stack, call frames, disassembly, and additionally recursively dereferencing all pointers.  All memory addresses are color-coded to the type of memory they represent.\n\n![](assets/caps/context.png)\n\nA history of previous context output is kept which can be accessed using the `contextprev` and `contextnext` commands.\n\n### Arguments\n\nAll function call sites are annotated with the arguments to those functions.  This works best with debugging symbols, but also works in the most common case where an imported function (e.g. libc function via GOT or PLT) is used.\n\n![](assets/caps/arguments_getenv.png)\n![](assets/caps/arguments_memcpy.png)\n![](assets/caps/arguments_sigsetjmp.png)\n![](assets/caps/arguments_strcpy.png)\n![](assets/caps/arguments_syscall.png)\n![](assets/caps/arguments_xtraceinit.png)\n\n### Splitting / Layouting Context\n\nThe context sections can be distributed among different tty by using the `contextoutput` command. Thus, if you want to make better use of some of the empty space in the default Pwndbg output, you can split the panes in your terminal and redirect the various contexts among them.\n\n![](assets/caps/context_splitting.png)\n\nSee [Splitting the Context](tutorials/splitting-the-context.md) for more information.\n\n### GDB TUI\nThe context sections are available as native [GDB TUI](https://sourceware.org/gdb/current/onlinedocs/gdb.html/TUI.html) windows named `pwndbg_[sectionname]`. There are some predefined layouts coming with Pwndbg which you can select using `layout pwndbg` or `layout pwndbg_code`.\n\n![](assets/caps/context_tui.png)\n\nSee [GDB TUI](tutorials/gdb-tui.md) for more information.\n\n### Watch Expressions\n\nYou can add expressions to be watched by the context. Those expressions are evaluated and shown on every context refresh. For instance by doing `contextwatch execute \"info args\"` we can see the arguments of every function we are in (here we are in `mmap`):\n\n![](assets/caps/cwatch_infoargs.png)\n\nSee [`contextwatch`](commands/context/contextwatch.md) for more information.\n\n## Integrations\n\n### Ghidra\n\nWith the help of [radare2](https://github.com/radareorg/radare2) or [rizin](https://github.com/rizinorg/rizin) it is possible to show the decompiled source code of the ghidra decompiler.\n\nSee [Ghidra Integration](tutorials/decompiler-integration/ghidra-integration.md) for more information.\n\n### IDA Pro/Binary Ninja\n\nPwndbg is capable of integrating with IDA Pro or Binary Ninja by installing an XMLRPC server in the decompiler as a plugin, and then querying it for information.\n\nThis allows extraction of comments, decompiled lines of source, breakpoints, symbols, and synchronized debugging (single-steps update the cursor in the decompiler).\n\n![](assets/caps/ida_context.png){ style=\"width: 70%;\" }\n\nSee [Binary Ninja Integration](tutorials/decompiler-integration/binja-integration.md) or [IDA Integration](tutorials/decompiler-integration/ida-integration.md) for setup information.\n\n## Heap Inspection\n\nPwndbg provides commands for inspecting the heap and the allocator's state. Currently supported are:\n\n+ [glibc malloc](commands/index.md#glibc-ptmalloc2-heap)\n+ [jemalloc](commands/index.md#jemalloc-heap)\n+ [linux's buddy allocator](commands/kernel/buddydump.md)\n+ [linux's SLUB allocator](commands/kernel/slab.md)\n\nSee *some* of the commands for glibc malloc:\n![](assets/caps/heap_vis.png){ style=\"width: 70%;\" }\n![](assets/caps/heap_hi_bins.png){ style=\"width: 70%;\" }\n![](assets/caps/heap_try_free.png)\n![](assets/caps/heap_find_fake_fast.png){ style=\"width: 70%;\" }\n\n## LLDB\n\nWhile most other GDB plugins are well *GDB plugins*, Pwndbg's implementation is debugger-agnostic. You can use Pwndbg with LLDB!\n\n![](assets/caps/lldb.png){ style=\"width: 70%;\" }\n\n## WinDbg Compatibility\n\nFor those coming from a Windows background, Pwndbg has a complete WinDbg compatibility layer.  You can `dd`, `dps`, `eq`, and even `eb $rip 90` to your heart's content.\n\n![](assets/caps/windbg.png){ style=\"width: 70%;\" }\n\n## Go Debugging\n\nPwndbg has support for dumping complex Go values like maps and slices, including automatically parsing out type layouts in certain cases.\n\nSee the [Go debugging guide](tutorials/go-debugging.md) for more information.\n\n## So many commands\n\nGo take a look at [Commands](commands/index.md)! Here is some cool stuff you can do to get you started.\n\n### Process State Inspection\n\nUse the [`procinfo`](commands/process/procinfo.md) command in order to inspect the current process state, like UID, GID, Groups, SELinux context, and open file descriptors! Pwndbg works particularly well with remote GDB debugging like with Android phones.\n\n![](assets/caps/procinfo.png){ style=\"width: 50%;\" }\n![](assets/caps/procinfo_curl.png){ style=\"width: 50%;\" }\n\n### ROP Gadgets\n\nTools for finding rop gadgets statically don't know about everything that will be loaded into the address space and they can make mistakes about which addresses will actually end up executable. You can now rop at runtime with Pwndbg's [`rop`](commands/integrations/rop.md) and [`ropper`](commands/integrations/ropper.md).\n\n![](assets/caps/rop_grep.png){ style=\"width: 70%;\" }\n\n### Search\n\nPwndbg makes [`search`](commands/memory/search.md)ing the target memory space easy, with a complete and easy-to-use interface.  Whether you're searching for bytes, strings, or various sizes of integer values or pointers, it's a simple command away.\n\n![](assets/caps/search.png)\n\n### Finding Leaks\nFinding leak chains can be done using the [`leakfind`](commands/memory/leakfind.md) and [`probeleak`](commands/memory/probeleak.md) commands. They recursively inspect address ranges for pointers, and report on all pointers found.\n\n![](assets/caps/leakfind.png)\n![](assets/caps/probeleak.png)\n\n### Telescope\nInspecting memory dumps is easy with the [`telescope`](commands/memory/telescope.md) command.  It recursively dereferences a range of memory, letting you see everything at once.  As an added bonus, Pwndbg checks all of the available registers to see if they point into the memory range.\n\n![](assets/caps/telescope.png){ style=\"width: 70%;\" }\n\n### Virtual Memory Maps\nPwndbg enhances the standard memory map listing and allows easy searching with [`vmmap`](commands/memory/vmmap.md).\n\n![](assets/caps/vmmap.png){ style=\"width: 70%;\" }\n![](assets/caps/vmmap_rip.png){ style=\"width: 70%;\" }\n\n### Tracking glibc heap allocations\nIt can be very useful to see allocations happening in real time. It can give us a good idea of what the allocation pattern of a program looks like, and allows us to make informed decisions on how to optimize or attack it. The [`track-heap`](commands/linux_libc_elf/track-heap.md) command does just that.\n\n<video style=\"width: 80%;\" autoplay loop muted playsinline alt=\"track-heap example\">\n  <source src=\"../assets/videos/track-heap.webm\" type=\"video/webm\">\n  <source src=\"../assets/videos/track-heap.mp4\" type=\"video/mp4\">\n</video>\n\n### Tracking the GOT\nThe Procedure Linkage Table (PLT) and Global Offset Table (GOT) are very interesting exploitation targets since they contain many often-accessed function pointers. You can track how your program goes through the GOT using the [`track-got`](commands/linux_libc_elf/track-got.md) command.\n\n<video autoplay loop muted playsinline alt=\"track-got example\">\n  <source src=\"../assets/videos/track-got.webm\" type=\"video/webm\">\n  <source src=\"../assets/videos/track-got.mp4\" type=\"video/mp4\">\n</video>\n\n### Attach to a process by name\nThe days of running pidof in a different terminal are over. Use [`attachp`](commands/start/attachp.md) to attach to any process by name, pid, arguments or device file!\n\n![](assets/caps/attachp.png){ style=\"width: 70%;\" }\n", "timestamp": "2025-10-21T13:21:28.217279"}
{"source": "github", "repo": "pwndbg/pwndbg", "file": "docs/setup.md", "url": "https://github.com/pwndbg/pwndbg/blob/dev/docs/setup.md", "content": "---\nhide:\n  - navigation\n---\n\n# Setup\n\nThere are multiple ways to install Pwndbg, depending on whether you want to use it [with GDB](#installing-pwndbg-gdb), [with LLDB](#installing-pwndbg-lldb), use a [portable release](#download-the-portable-version), or install it [from source](#installing-from-source).\n\n## Installing pwndbg-gdb\nInstall via curl/sh (Linux/macOS)\n```{.bash .copy}\ncurl -qsL 'https://install.pwndbg.re' | sh -s -- -t pwndbg-gdb\n```\nInstall via Homebrew (macOS)\n```{.bash .copy}\nbrew install pwndbg/tap/pwndbg-gdb\n```\nInstall via the Nix package manager (Linux/macOS)\n```{.bash .copy}\nnix shell github:pwndbg/pwndbg\n```\n### Official Pwndbg packages\nWhen installing with GDB, you may also download a package to install through your package manager of choice. Download the package from the [releases page](https://github.com/pwndbg/pwndbg/releases) and pick the appropriate download from the second table.\n\nRPM-based Systems (CentOS/Alma/Rocky/RHEL):\n```{.bash .copy}\ndnf install ./pwndbg-2025.10.20.x86_64.rpm\n```\nDEB-based Systems (Debian/Ubuntu/Kali):\n```{.bash .copy}\napt install ./pwndbg_2025.10.20_amd64.deb\n```\nAlpine:\n```{.bash .copy}\napk add --allow-untrusted ./pwndbg_2025.10.20_x86_64.apk\n```\nArch Linux:\n```{.bash .copy}\npacman -U ./pwndbg-2025.10.20-1-x86_64.pkg.tar.zst\n```\n### Distro packages\nYou may want to install Pwndbg through your distribution's package manager. This installation method is **not officially supported** because we cannot control the versions of the python dependencies Pwndbg uses in this case. Please use any other installation method when reproducing bug reports (portable package is probably simplest in this case). If a bug reproduces with a distro package but not with any of the supported installation methods, please report it to the package maintainer; if the problem cannot be fixed, let us know and we will add it to a list of known issues below.\n\n=== \"Arch\"\n    ```{.bash .copy}\n    sudo pacman -S pwndbg\n    ```\n    You will also need to source Pwndbg from your `~/.gdbinit`. Add this line to the beginning of that file:\n    ```{.bash .copy}\n    source /usr/share/pwndbg/gdbinit.py\n    ```\n    Pwndbg will be started every time you invoke `gdb` now.\n\n=== \"Gentoo\"\n    ```{.bash .copy}\n    sudo emerge --ask dev-debug/pwndbg\n    ```\n\n----\n\n## Installing pwndbg-lldb\nThese installation methods provide the\n```{.bash .copy}\npwndbg-lldb ./your-binary\n```\ncommand.\n\nInstall via curl/sh (Linux/macOS)\n```{.bash .copy}\ncurl -qsL 'https://install.pwndbg.re' | sh -s -- -t pwndbg-lldb\n```\nInstall via Homebrew (macOS)\n```{.bash .copy}\nbrew install pwndbg/tap/pwndbg-lldb\n```\nInstall via the Nix package manager (Linux/macOS):\n```{.bash .copy}\nnix shell github:pwndbg/pwndbg#pwndbg-lldb\n```\n\n## Download the Portable Version\nYou can download a portable release on the [Pwndbg releases page](https://github.com/pwndbg/pwndbg/releases). There are seperate releases for GDB and LLDB. Use the first table to pick the appropriate download for your system architecture. You can then unpack the archive with:\n```{.bash .copy}\ntar -v -xf <archive-name>\n```\nAnd run Pwndbg with\n```bash\n./pwndbg/bin/pwndbg\n```\nor\n```\n./pwndbg/bin/pwndbg-lldb\n```\ndepending on which version you installed. You may add the appropriate file to your shell's PATH.\n\n### Removing Quarantine Flags (macOS)\n\nWhen first setting up the portable version of Pwndbg in macOS, Gatekeeper will normally try to prevent\nany code in the extracted files from running until the user explicitly allows each file to be run.\nAs we ship many files which would require this, the process of manually granting permission for each\none to be run can get quite tiresome.\n\nIn order to do this to all files at once, you may choose to run the following command, which removes\nthe quarantine flag from all extracted files at once:\n\n```{.bash .copy}\nxattr -rd com.apple.quarantine pwndbg\n```\n\nAssuming that the files were extracted to a folder called `pwndbg`.\n\n## Installing from source\nSee [contributing/Installing Pwndbg from source](contributing/setup-pwndbg-dev.md#installing-pwndbg-from-source), you do not need the \"The development environment\" section.\n", "timestamp": "2025-10-21T13:21:28.837183"}
{"source": "github", "repo": "pwndbg/pwndbg", "file": "docs/tutorials/decompiler-integration/ghidra-integration.md", "url": "https://github.com/pwndbg/pwndbg/blob/dev/docs/tutorials/decompiler-integration/ghidra-integration.md", "content": "# Ghidra\n\nUnlike with IDA and Binary Ninja, Ghidra is not considered an \"integration provider\". You cannot synchronise your Ghidra reverse engineering progress to Pwndbg.\nYou can however integrate Ghidra's decompiler into Pwndbg such that the decompiled version of any function you're in is shown in the Pwndbg context.\n\n??? example \"Example Screenshot\"\n    ![](../../assets/caps/tutorials/ghidra_decomp.png)\n\nTo do this, we will need the help of [radare2](https://github.com/radareorg/radare2) or [rizin](https://github.com/rizinorg/rizin).\n\n## Setup\n\n=== \"rizin\"\n    1. Install [rizin](https://github.com/rizinorg/rizin). It must be found by the debugger (within path).\n    2. Install the Ghidra plugin for rizin: [rz-ghidra](https://github.com/rizinorg/rz-ghidra).\n    3. Install [rzpipe](https://pypi.org/project/rzpipe/) and make sure the python used by the debugger can access it.\n    4. Add `set r2decompiler rizin` to your `~/.gdbinit` after Pwndbg is sourced.\n\n    Regarding the third step, if you don't install to your user or system-wide python (but rather a virtual environment), you may add something like this to the beginning of your `~/.gdbinit`:\n    ```\n    python\n    import sys\n    import os\n    from glob import glob\n\n    venv = os.path.expanduser('~/tools/rizin/venv')\n    site_dir_pattern = os.path.join(venv, 'lib', 'python*/site-packages')\n    site_dirs = glob(site_dir_pattern)\n    sys.path.insert(0, site_dirs[0])\n    import rzpipe\n    end\n    ```\n=== \"radare2\"\n    1. Install [radare2](https://github.com/radareorg/radare2). It must be found by the debugger (within path).\n    2. Install the Ghidra plugin for radare2: [r2ghidra](https://github.com/radareorg/r2ghidra).\n    3. Install [r2pipe](https://pypi.org/project/r2pipe/) and make sure the python used by the debugger can access it.\n    4. Add `set r2decompiler radare2` to your `~/.gdbinit` after Pwndbg is sourced.\n\n    Regarding the third step, if you don't install to your user or system-wide python (but rather a virtual environment), you may add something like this to the beginning of your `~/.gdbinit`:\n    ```\n    python\n    import sys\n    import os\n    from glob import glob\n\n    venv = os.path.expanduser('~/tools/radare2/venv')\n    site_dir_pattern = os.path.join(venv, 'lib', 'python*/site-packages')\n    site_dirs = glob(site_dir_pattern)\n    sys.path.insert(0, site_dirs[0])\n    import r2pipe\n    end\n    ```\n\n## Usage\n\nAppend `set context-ghidra if-no-source` to your `~/.gdbinit`. You should be able to see the\n`[ GHIDRA DECOMPILE ]` context now right below your disassembly. If you want to temporarily enable/disable\nit or move around the context sections, see [context-ghidra](../../configuration/config.md#context-ghidra)\nand [contextoutput](../../commands/context/contextoutput.md).\n\nBe warned, the first call to both radare2/r2ghidra and rizin/rz-ghidra are rather slow!\nSubsequent requests for decompiled source will be faster. And it does take up some resources\nas the radare2/rizin instance is kept by r2pipe/rzpipe to enable faster subsequent analysis.\n\nRemark: the plugin tries to guess the correct current line and mark it with \"-->\", but it might\nget it wrong.\n", "timestamp": "2025-10-21T13:21:29.523165"}
{"source": "github", "repo": "pwndbg/pwndbg", "file": "docs/tutorials/env-vars.md", "url": "https://github.com/pwndbg/pwndbg/blob/dev/docs/tutorials/env-vars.md", "content": "## Environment Variables\n\nPwndbg relies on several environment variables to customize its behavior. Below is a list of these variables and their purposes:\n\n- `PATH`: Standard system `PATH` variable used to locate executables.\n- `EDITOR`, `VISUAL`: Used by the `cymbol` command to open an editor.\n- `HOME`, `XDG_CACHE_HOME`: Used by `lib.tempfile` to determine temporary file locations.\n- `PWNDBG_VENV_PATH`: Specifies the virtual environment path for Pwndbg.\n- `NO_COLOR`: Disables colored output in Pwndbg.\n- `PWNDBG_LOGLEVEL`: Initial log level to use for log messages.\n- `OPENAI_API_KEY`, `ANTHROPIC_API_KEY`: Used by the `ai` command for accessing respective AI APIs.\n- `GITHUB_ACTIONS`, `RUN_FLAKY`: Used by `tests_commands.py` to determine the test environment.\n- `PWNDBG_PROFILE`: Enables profiling for benchmarking.\n- `USE_PDB`: Enables Python debugger in tests.\n- `PWNDBG_LAUNCH_TEST`: Used by tests to configure test launching.\n- `PWNDBG_ARCH`, `PWNDBG_KERNEL_TYPE`, `PWNDBG_KERNEL_VERSION`: Used by `gdblib` kernel tests to specify kernel parameters.\n- `SPHINX`: Used by `docs/source/conf.py`, likely to be removed.\n- `PWNLIB_NOTERM=1`: Set by Pwndbg to avoid terminal issues with Pwntools.\n", "timestamp": "2025-10-21T13:21:29.734309"}
{"source": "github", "repo": "pwndbg/pwndbg", "file": "docs/tutorials/gdb-lldb-commands.md", "url": "https://github.com/pwndbg/pwndbg/blob/dev/docs/tutorials/gdb-lldb-commands.md", "content": "# GDB vs LLDB\n\nFor users who are migrating from one debugger to another, here is a table comparison of some of the most common actions and how to do them in GDB and LLDB. Note that both debuggers offer shorthands for typing these commands.\n\n| **Functionality**                             | **GDB Command**                        | **LLDB Command**                                            |\n|-----------------------------------------------|----------------------------------------|-------------------------------------------------------------|\n| **Start Debugging Program**                   | `gdb ./your-program`                   | `lldb ./your-program`                                       |\n| **Set a Breakpoint**                          | `break <function-name>`                | `breakpoint set --name <function-name>`                     |\n| **Set Breakpoint on Address**                 | `break *<address>`                     | `breakpoint set --address <address>`                        |\n| **Set Breakpoint at Line**                    | `break <filename>:<line-number>`       | `breakpoint set --file <filename> --line <line-number>`     |\n| **Set Hardware Breakpoint**                   | `hbreak <function-name>`               | `breakpoint set --hardware --name <function-name>`          |\n| **Set Hardware Breakpoint at Memory**         | `hbreak *<memory-address>`             | `breakpoint set --hardware --address <memory-address>`      |\n| **List All Breakpoints**                      | `info breakpoints`                     | `breakpoint list`                                           |\n| **Delete Breakpoints**                        | `delete <breakpoint-number>`           | `breakpoint delete <breakpoint-number>`                     |\n| **Set Watchpoint**                            | `watch <variable>`                     | `watchpoint set variable <variable>`                        |\n| **Set Conditional Breakpoint**                | `break <function-name> if <condition>` | `breakpoint set --condition \"<condition>\"`                  |\n| **Continue Execution**                        | `continue`                             | `process continue`                                          |\n| **Next Instruction**                          | `next`                                 | `thread step-over`                                          |\n| **Step into a Function**                      | `step`                                 | `thread step-in`                                            |\n| **Step out of a Function**                    | `finish`                               | `thread step-out`                                           |\n| **Print Threads**                             | `info threads`                         | `thread list`                                               |\n| **Select Thread**                             | `thread <thread-id>`                   | `thread select <thread-id>`                                 |\n| **Print Register Values**                     | `info registers`                       | `register read -a`                                          |\n| **Print a Variable**                          | `print <variable>`                     | `print <variable>`                                          |\n| **Display Variable on Every Stop**            | `display <variable>`                   | `expression --watch <variable>`                             |\n| **Examine Memory (Hex)**                      | `x/<num>x <memory-address>`            | `memory read --format x --count <num> <memory-address>`     |\n| **Examine Memory (Integer)**                  | `x/<num>d <memory-address>`            | `memory read --format d --count <num> <memory-address>`     |\n| **Inspect Stack Trace**                       | `backtrace`                            | `thread backtrace`                                          |\n| **Change Register Value**                     | `set $<register-name> = <value>`       | `register write <register-name> <value>`                    |\n| **Check Program Status**                      | `info locals`                          | `frame variable`                                            |\n| **Check Program Info**                        | `info functions`                       | `image lookup --functions`                                  |\n| **Show Disassembly of Function**              | `disas <function-name>`                | `disassemble <function-name>`                               |\n| **Memory Dump (Hex)**                         | `x/<num>xh <memory-address>`           | `memory read --format x --count <num> <memory-address>`     |\n| **Memory Dump (Bytes)**                       | `x/<num>bx <memory-address>`           | `memory read --format b --count <num> <memory-address>`     |\n| **Show Process Information**                  | `info process`                         | `process status`                                            |\n| **Quit Debugging**                            | `quit`                                 | `quit`                                                      |\n| **Run Program with Arguments**                | `run <arg1> <arg2> ...`                | `process launch -- <arg1> <arg2> ...`                       |\n| **Show Current Function**                     | `info frame`                           | `frame info`                                                |\n| **Set Sysroot**                               | `set sysroot <path-to-sysroot>`        | `settings set target.sysroot <path-to-sysroot>`             |\n| **Set Source Directory**                      | `directory <path-to-source-directory>` | `settings set target.source-map <remote-path> <local-path>` |\n| **Set Architecture**                          | `set architecture <arch>`              | `target create --arch <arch> <executable-file>`             |\n| **Show Settings**                             | `show <setting-name>`                  | `settings show <setting-name>`                              |\n| **Set File for Debugging**                    | `file <executable-file>`               | `target create <executable-file>`                           |\n| **Start the Program at the First Instruction**| `starti`                               | `process launch --stop-at-entry`                            |\n| **Enable ASLR**                               | `set disable-randomization off`        | `settings set target.disable-aslr false`                    |\n", "timestamp": "2025-10-21T13:21:29.828540"}
{"source": "github", "repo": "pwndbg/pwndbg", "file": "docs/tutorials/gdb-tui.md", "url": "https://github.com/pwndbg/pwndbg/blob/dev/docs/tutorials/gdb-tui.md", "content": "# GDB TUI\n\n![](../assets/caps/context_tui.png)\n\nThe context sections are available as native [GDB TUI](https://sourceware.org/gdb/current/onlinedocs/gdb.html/TUI.html) windows named `pwndbg_[sectionname]`. There are some predefined layouts coming with Pwndbg which you can select using `layout pwndbg` or `layout pwndbg_code`.\n\nUse `focus cmd` to focus the command window and have the arrow keys scroll through the command history again. `tui disable` to disable TUI mode and go back to CLI mode when running commands with longer output. `ctrl-x + a` toggles between TUI and CLI mode quickly. Hold shift to ignore the TUI mouse integration and use the mouse normally to select text or copy data.\n\nTo create [your own layout](https://sourceware.org/gdb/current/onlinedocs/gdb.html/TUI-Commands.html) and selecting it use normal `tui new-layout` syntax like:\n```\ntui new-layout pwndbg_custom {-horizontal { { -horizontal { pwndbg_code 1 pwndbg_disasm 1 } 2 { {-horizontal pwndbg_legend 8 pwndbg_control 2 } 0 pwndbg_regs 1 pwndbg_stack 1 } 3 } 7 cmd 3 } 3 { pwndbg_backtrace 2 pwndbg_expressions 2 pwndbg_threads 1 } 1 } 1 status 1\nlayout pwndbg_custom\n```\n", "timestamp": "2025-10-21T13:21:29.935869"}
{"source": "github", "repo": "pwndbg/pwndbg", "file": "docs/tutorials/pwndbg-users.md", "url": "https://github.com/pwndbg/pwndbg/blob/dev/docs/tutorials/pwndbg-users.md", "content": "# Pwndbg in the wild\n\nHere is a non-exhaustive list of Pwndbg mentions found in the wild. Feel free to open a PR to add more if you find them!\n\n## Talks\n+ [EuroPython 2025 - Pwndbg: Low level debugging and exploit development with Python](https://ep2025.europython.eu/session/pwndbg-low-level-debugging-and-exploit-development-with-python) ([slides](https://docs.google.com/presentation/d/1m9yYOeHxkKznseTakYeKixOUcCEjk7e-goirNE93ISs/), [video](https://www.youtube.com/watch?v=hRvjre7AH-o&t=7100s))\n+ [OffensiveCon24 - How to Fuzz Your Way to Android Universal Root: Attacking Android Binder - by Eugene Rodionov, Zi Fan Tan and Gulshan Singh](https://www.youtube.com/watch?v=U-xSM159YLI&t=1859s)\n\n## Blog posts\n+ [Oops Safari, I think You Spilled Something! @ Exodus Intelligence](https://blog.exodusintel.com/2025/08/04/oops-safari-i-think-you-spilled-something/)\n+ [“Unstripping” binaries: Restoring debugging information in GDB with Pwndbg by Jason An @ Trail of Bits](https://blog.trailofbits.com/2024/09/06/unstripping-binaries-restoring-debugging-information-in-gdb-with-pwndbg/)\n+ [A Winter’s Tale: Improving messages and types in GDB’s Python API by Matheus Branco Borella @ Trail of Bits](https://blog.trailofbits.com/2023/04/18/a-winters-tale-improving-types-and-messages-in-gdbs-python-api/)\n+ [Patch-gapping Google Chrome @ Exodus Intelligence](https://blog.exodusintel.com/2019/09/09/patch-gapping-chrome/)\n+ [Inspecting rdtsc with pwndbg by John Shaughnessy](https://www.johnshaughnessy.com/blog/posts/rdtsc_and_pwndbg)\n\n## Videos\n+ [Intro to pwndbg - CTF Cookbook by SloppyJoePirates CTF Writeups](https://www.youtube.com/watch?v=5judobmDBKI)\n+ [Intro to Binary Exploitation (Pwn) by CryptoCat](https://youtu.be/wa3sMSdLyHw?list=PLHUKi1UlEgOIc07Rfk2Jgb5fZbxDPec94&t=730)\n+ [Bug A Day #8 - pwndbg #2 by Bug-A-Day](https://www.youtube.com/watch?v=mmkewHlDv9I)\n\n## Scripts\n+ [CVE-2022-24834 exploit by ptr-yudai](https://github.com/RICSecLab/exploit-poc-public/blob/main/CVE-2022-24834/exploit.py#L49)\n\n## Magazine articles\n+ [\"Programista\" polish programming magazine - Low level debugging with Pwndbg (in polish)](https://programistamag.pl/programista-42023-109-wrzesienpazdziernik-2023-debugowanie-niskopoziomowe-z-pwndbg/)\n", "timestamp": "2025-10-21T13:21:30.274942"}
