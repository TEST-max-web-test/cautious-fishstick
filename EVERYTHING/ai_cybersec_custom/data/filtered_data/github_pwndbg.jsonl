{"source": "github", "repo": "pwndbg/pwndbg", "file": "docs/blog/posts/pwndbg-coding-sprints-report.md", "url": "https://github.com/pwndbg/pwndbg/blob/dev/docs/blog/posts/pwndbg-coding-sprints-report.md", "content": "---\ntitle: Pwndbg coding sprints report\ndate: 2022-08-21\nauthors: [disconnect3d]\nslug: pwndbg-coding-sprints-report\ndescription: >\n  Report of the two coding sprints with Pwndbg\n---\n\n(originally posted on https://disconnect3d.pl/2022/08/21/pwndbg-coding-sprints/)\n\nThis blog post is a report of the two coding sprints for the [Pwndbg project](https://github.com/pwndbg/pwndbg) that I organized first on the EuroPython 2022 conference and then, taking inspiration from the previous one, in the Hackerspace Kraków, located in Cracow, Poland.\n\nPS: If you are only looking for a list of things done, scroll down!\n\n<!-- more -->\n\n## Where I got the idea for sprints?\n\nI have recently attended the [EuroPython 2022](https://ep2022.europython.eu) conference and I enjoyed the “sprints” there. In short, a [sprint](https://ep2022.europython.eu/sprints#what-is-a-sprint-) is a semi-organized event, where anyone can announce a project they will be working on and others can join them. This helps both the projects and the event participants to learn about the project and to make first-time contributions. At the EuroPython conference, [there were 16 officially announced projects](https://ep2022.europython.eu/sprints#2022-sprints-listings), but I know that even more projects were being worked on in practice. Of course, other communities or conferences also do this (e.g. [NixCon](https://2022.nixcon.org/#hackday)).\n\nAt the EuroPython conference, I announced my own sprint to work on the Pwndbg project that I maintain. Having no expectations, I felt excited when four people showed up to learn something new and hack together on the project. Later, taking inspiration from it, I organized another sprint, this time in Cracow in the local Hackerspace with even a bigger response. Below, you can read a small report on the two sprints that have happened.\n\n## My general idea for a Pwndbg sprint\nPwndbg is written in Python, so on one hand is easy to hack on, but on the other hand it is a plugin for GDB, a console debugger for native programs (e.g. ones written in C, C++, Go or Rust). The general idea of Pwndbg is to alleviate the pain points of working with and improve the UX of GDB when debugging assembly code, reverse engineering a binary or during exploit development.\n\nSince not everyone is familiar with debuggers or the underlyings of programs execution (e.g. assembly code, CPU registers or stack or heap memory) I knew that I had to make some introduction to those concepts and if possible, prepare a list of simple tasks, so that people can get familiar with the codebase and the tool and contribute something.\n\n\n## EuroPython 2022 sprint\n\nOn the first sprint, four people showed up, mostly having no prior experience with the topic. We started with an introduction to what GDB and Pwndbg are and why and when they are useful.\n\nFor this, I took a small C program that had a buffer overflow bug:\n```c\n#include <stdio.h>\n#include <string.h>\n\nint main(int argc, char* argv[]) {\n    char name[16] = {0};\n\n    // NOTE: We copy the `argv[1]` string which may be of arbitrary length\n    // into the `name` buffer which is only of 16-bytes long. Thus, we can\n    // overwrite the stack memory of the program past the `name` buffer.\n    strcpy(name, argv[1]);\n\n    printf(\"Hello %s!\\n\", name);\n}\n```\n\nThen, after compiling it (`gcc main.c`), we ran the program twice to see that it will crash if we provide a too long string as its argument:\n\n```bash\n$ ./a.out Disconnect3d\nHello Disconnect3d!\n\n$ ./a.out Disconnect3d_at_EuroPython\nHello Disconnect3d_at_EuroPython!\n*** stack smashing detected ***: <unknown> terminated\nAborted (core dumped)\n```\n\nThen, I explained that the \"stack smashing detected\" we see is the \"stack canaries\" (also called \"stack cookies\") exploit mitigation added by compilers. This compiler feature adds a special 8-bytes canary value after the function's local variables located on the stack, so that then a stack frame may look like this:\n\n```\n------------------------------   lower addresses\nchar name[16];                         |\nuint8_t canary[8];                     |\nvoid* function_return_address;         V\n------------------------------   higher addresses\n```\n\nThis local stack canary value is then filled in just after the function’s prologue and is verified against a global value before the function returns to see if the stack was not corrupted (starting from the canary). Of course this may not detect all possible stack memory corruptions but it often makes it impossible to exploit a program (e.g. by changing the return address, also located on the stack), knowing just this vulnerability.\n\nThe stack canary mitigation can also be disabled. And if it were done (by passing in a `-fno-stack-protector` flag during compilation), we would get a different result when running the resulting program:\n\n```bash\n$ gcc -fno-stack-protector buf.c\n\n$ ./a.out Disconnect3d_on_EuroPython\nHello Disconnect3d_on_EuroPython!\nSegmentation fault (core dumped)\n```\n\nNow, the \"stack smashing detected\" is gone, but the program still crashed, because we still corrupted a part of its memory that we shouldn't have touched in a way that made the program do illegal things (e.g. accessing unmapped memory).\n\nDuring the sprint, we also ran a GDB+Pwndbg session to see the exact instructions that placed the canary value on the stack memory, to see that our input string was located just before it and how the canary was checked just before the function was returned.\n\nI am not going to describe all of this here, but you can see some of it in the below asciinema recording.\n\n[![asciicast](https://asciinema.org/a/zuuwfJIZrpu6IjuwWhiNgAdim.svg)](https://asciinema.org/a/zuuwfJIZrpu6IjuwWhiNgAdim)\n\n\n## Hackerspace Kraków sprint\n\nSince the second sprint was an ad-hoc event, I had to organize it myself. As a member of Hackerspace Kraków, I was able to reserve the hackerspace's softroom, which is a perfect place for people to hack on things using their computers. Then, I advertised the event on the [Hackerspace's mailing list](https://groups.google.com/g/hackerspace-krk/c/MP6mX4I5vXY) and on a few other mediums.\n\nI did not expect many people to come, especially that I advertised the sprint ~2 days before the event.\n\nBut... 8 people (!) showed up (excluding me). I prepared a document with some basic information and tasks, which can be found [here](https://hackmd.io/vjfZ4GIYS8eu_j-7q-fkBg) (though, it is in Polish and it was modified during and after the sprint).\n\nI won't lie: most people that came were friends of mine, some of which I play [CTFs](https://en.wikipedia.org/wiki/Capture_the_flag_(cybersecurity)) with. However, not all of them had really used or developed Pwndbg before.\n\n## Accomplishments from the two sprints\n\nOn the EP sprint, since we were just a group of four, we focused on small improvements to the codebase. In total, we did the following:\n* [reviewed and merged the fs/gs_base fetching improvement PR](https://github.com/pwndbg/pwndbg/pull/1030),\n* [pinned the project's dependencies](https://github.com/pwndbg/pwndbg/pull/1033),\n* [updated the unicorn dependency version](https://github.com/pwndbg/pwndbg/pull/1034),\n* [added a \"tip of the day\" feature](https://github.com/pwndbg/pwndbg/pull/1036),\n* [improved the UX of using Pwndbg within a Python virtual environment](https://github.com/pwndbg/pwndbg/pull/1037),\n* and also [worked on enhancing the display of arguments when stopping on a call to the printf functions family](https://github.com/pwndbg/pwndbg/pull/1038).\n\nThe last item from the list was the hardest to jump on and it still requires enhancements until it is merged. Nonetheless, all of this was a nice outcome from the whole sprint :).\n\nOn the second sprint, while we were a bigger group, we had much more limited time (since instead of having ~8 hours, we had just a few). Anyway, we were able to do the following:\n\n* [Cleanup some code leftover after dropping Python 2 support](https://github.com/pwndbg/pwndbg/pull/1052),\n* [Added documentation on how to debug Pwndbg using PyCharm remote debugging](https://github.com/pwndbg/pwndbg/pull/1058),\n* Reviewed and merged the PRs that [sets `$base_heap` variable](https://github.com/pwndbg/pwndbg/pull/1051) and [a tip for it](https://github.com/pwndbg/pwndbg/pull/1053), which may be useful for heap exploitation,\n* [Fix the X30 register display on AARCH64 targets](https://github.com/pwndbg/pwndbg/pull/1054),\n* [Fix `context args` display when PC/IP register pointed to unmapped memory](https://github.com/pwndbg/pwndbg/pull/1055),\n* [Fixed the `xor` and `memfrob` commands and added tests for them (! :D)](https://github.com/pwndbg/pwndbg/pull/1057),\n* [Worked on adding a way to dump memory that can be copied right away as C or Python code](https://github.com/pwndbg/pwndbg/pull/1056) (this needs to be changed to a command flag),\n* Investigated a [potential parsing issue](https://github.com/pwndbg/pwndbg/issues/1050), even looking at GDB's command parsing source code, [implemented potential patch](https://github.com/pwndbg/pwndbg/pull/1062), which only later turned out to be redundant and the issue to be invalid.\n\n## Summary and what's next?\n\nOrganizing those sprints helped me to get back to develop the Pwndbg project more and and attract more people to contribute to it. I also think that more conferences should have this kind of attractions (similarly as more conferences should have lightning talk sessions, heh).\n\nRegarding the Pwndbg sprints, I am organizing another one this week in Cracow on Tuesday, so if you live nearby and are interested in learning about Pwndbg or contributing to the project, feel invited! :)\n\nPS: Thanks a lot to [@arturcygan](https://twitter.com/arturcygan) for reviewing this blog post.\n", "timestamp": "2025-10-21T22:00:21.880856"}
{"source": "github", "repo": "pwndbg/pwndbg", "file": "docs/commands/context/context.md", "url": "https://github.com/pwndbg/pwndbg/blob/dev/docs/commands/context/context.md", "content": "<!-- THIS PART OF THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT. See scripts/generate-docs.sh -->\n# context\n\n```text\nusage: context [-h] [--on] [--off] [subcontext ...]\n\n```\n\nPrint out the currently enabled context sections.\n\nThis is the text that gets printed on every stop. It can be useful\nto run this command manually when you change some process/debugger\nstate but don't want to step/continue (e.g. after using the `down`\nand `up` commands).\n\n**Alias:** ctx\n### Positional arguments\n\n|Positional Argument|Help|\n| :--- | :--- |\n|subcontext|Submenu to display: 'regs', 'disasm', 'code', 'stack', 'backtrace', 'ghidra', 'args', 'threads', 'heap_tracker', 'expressions', and/or 'last_signal'|\n\n### Optional arguments\n\n|Short|Long|Help|\n| :--- | :--- | :--- |\n|-h|--help|show this help message and exit|\n||--on|Show the section(s) in subsequent context commands again. The section(s) have to be in the 'context-sections' list.|\n||--off|Do not show the section(s) in subsequent context commands even though they might be in the 'context-sections' list.|\n\n### Notes\nTo see more commands related to context control run:\n```\npwndbg -c context\n```\nTo see context configuration run:\n```\nconfig context\n```\n\n<!-- END OF AUTOGENERATED PART. Do not modify this line or the line below, they mark the end of the auto-generated part of the file. If you want to extend the documentation in a way which cannot easily be done by adding to the command help description, write below the following line. -->\n<!-- ------------\\>8---- ----\\>8---- ----\\>8------------ -->\n\n### Usage example\n\n<video autoplay loop muted playsinline alt=\"context example\">\n  <source src=\"../../../assets/videos/context-up-down.webm\" type=\"video/webm\">\n  <source src=\"../../../assets/videos/context-up-down.mp4\" type=\"video/mp4\">\n</video>\n", "timestamp": "2025-10-21T22:00:22.999346"}
{"source": "github", "repo": "pwndbg/pwndbg", "file": "docs/commands/developer/dev-dump-instruction.md", "url": "https://github.com/pwndbg/pwndbg/blob/dev/docs/commands/developer/dev-dump-instruction.md", "content": "<!-- THIS PART OF THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT. See scripts/generate-docs.sh -->\n# dev-dump-instruction\n\n```text\nusage: dev-dump-instruction [-h] [-e] [-n] [address]\n\n```\n\nDump internal PwndbgInstruction attributes.\n\nUseful for debugging the disassembly and annotation subsystems\nin Pwndbg. See https://pwndbg.re/pwndbg/dev/contributing/improving-annotations/#bug-root-cause\nfor more information.\n### Positional arguments\n\n|Positional Argument|Help|\n| :--- | :--- |\n|address|The address to get the enhanced instruction from - must be in cache.|\n\n### Optional arguments\n\n|Short|Long|Help|\n| :--- | :--- | :--- |\n|-h|--help|show this help message and exit|\n|-e|--emulate|Force the use of emulation when enhancing the instruction, regardless of global 'emulate' setting.|\n|-n|--no-emulate|Disable the use of emulation when enhancing the instruction, regardless of global 'emulate' setting.|\n\n<!-- END OF AUTOGENERATED PART. Do not modify this line or the line below, they mark the end of the auto-generated part of the file. If you want to extend the documentation in a way which cannot easily be done by adding to the command help description, write below the following line. -->\n<!-- ------------\\>8---- ----\\>8---- ----\\>8------------ -->\n", "timestamp": "2025-10-21T22:00:24.306347"}
{"source": "github", "repo": "pwndbg/pwndbg", "file": "docs/commands/index.md", "url": "https://github.com/pwndbg/pwndbg/blob/dev/docs/commands/index.md", "content": "<!-- THIS FILE IS AUTOGENERATED. DO NOT EDIT IT. See scripts/generate-docs.sh -->\n\n\n\n\n# Commands\n\n## Breakpoint\n\n-  [break-if-not-taken](breakpoint/break-if-not-taken.md) - Breaks on a branch if it is not taken.\n-  [break-if-taken](breakpoint/break-if-taken.md) - Breaks on a branch if it is taken.\n-  [breakrva](breakpoint/breakrva.md) - Break at RVA from PIE base.\n-  [ignore](breakpoint/ignore.md) - Set ignore-count of breakpoint number N to COUNT.\n\n## Context\n\n-  [context](context/context.md) - Print out the currently enabled context sections.\n-  [contextnext](context/contextnext.md) - Select next entry in context history.\n-  [contextoutput](context/contextoutput.md) - Sets the output of a context section.\n-  [contextprev](context/contextprev.md) - Select previous entry in context history.\n-  [contextsearch](context/contextsearch.md) - Search for a string in the context history and select that entry.\n-  [contextunwatch](context/contextunwatch.md) - Removes an expression previously added to be watched.\n-  [contextwatch](context/contextwatch.md) - Adds an expression to be shown on context.\n-  [regs](context/regs.md) - Print out all registers and enhance the information.\n\n## Darwin/libsystem/Mach-O\n\n-  [commpage](darwin_libsystem_mach-o/commpage.md) - Dumps all values from the macOS commpage.\n\n## Developer\n\n-  [dev-dump-instruction](developer/dev-dump-instruction.md) - Dump internal PwndbgInstruction attributes.\n-  [log-level](developer/log-level.md) - Set the log level.\n\n## Disassemble\n\n-  [emulate](disassemble/emulate.md) - Like nearpc, but will emulate instructions from the current $PC forward.\n-  [nearpc](disassemble/nearpc.md) - Disassemble near a specified address.\n\n## GLibc ptmalloc2 Heap\n\n-  [arena](glibc_ptmalloc2_heap/arena.md) - Print the contents of an arena.\n-  [arenas](glibc_ptmalloc2_heap/arenas.md) - List this process's arenas.\n-  [bins](glibc_ptmalloc2_heap/bins.md) - Print the contents of all an arena's bins and a thread's tcache.\n-  [fastbins](glibc_ptmalloc2_heap/fastbins.md) - Print the contents of an arena's fastbins.\n-  [find-fake-fast](glibc_ptmalloc2_heap/find-fake-fast.md) - Find candidate fake fast or tcache chunks overlapping the specified address.\n-  [heap](glibc_ptmalloc2_heap/heap.md) - Iteratively print chunks on a heap.\n-  [hi](glibc_ptmalloc2_heap/hi.md) - Searches all heaps to find if an address belongs to a chunk. If yes, prints the chunk.\n-  [largebins](glibc_ptmalloc2_heap/largebins.md) - Print the contents of an arena's largebins.\n-  [malloc-chunk](glibc_ptmalloc2_heap/malloc-chunk.md) - Print a chunk.\n-  [mp](glibc_ptmalloc2_heap/mp.md) - Print the mp_ struct's contents.\n-  [smallbins](glibc_ptmalloc2_heap/smallbins.md) - Print the contents of an arena's smallbins.\n-  [tcache](glibc_ptmalloc2_heap/tcache.md) - Print a thread's tcache contents.\n-  [tcachebins](glibc_ptmalloc2_heap/tcachebins.md) - Print the contents of a tcache.\n-  [top-chunk](glibc_ptmalloc2_heap/top-chunk.md) - Print relevant information about an arena's top chunk.\n-  [try-free](glibc_ptmalloc2_heap/try-free.md) - Check what would happen if free was called with given address.\n-  [unsortedbin](glibc_ptmalloc2_heap/unsortedbin.md) - Print the contents of an arena's unsortedbin.\n-  [vis-heap-chunks](glibc_ptmalloc2_heap/vis-heap-chunks.md) - Visualize chunks on a heap.\n\n## Integrations\n\n-  [ai](integrations/ai.md) - Ask GPT-3 a question about the current debugging context.\n-  [bn-sync](integrations/bn-sync.md) - Synchronize Binary Ninja's cursor with GDB.\n-  [decomp](integrations/decomp.md) - Use the current integration to decompile code near an address.\n-  [j](integrations/j.md) - Synchronize IDA's cursor with GDB.\n-  [r2](integrations/r2.md) - Launches radare2.\n-  [r2pipe](integrations/r2pipe.md) - Execute stateful radare2 commands through r2pipe.\n-  [rop](integrations/rop.md) - Dump ROP gadgets with Jon Salwan's ROPgadget tool.\n-  [ropper](integrations/ropper.md) - ROP gadget search with ropper.\n-  [rz](integrations/rz.md) - Launches rizin.\n-  [rzpipe](integrations/rzpipe.md) - Execute stateful rizin commands through rzpipe.\n-  [save-ida](integrations/save-ida.md) - Save the ida database.\n\n## Kernel\n\n-  [binder](kernel/binder.md) - Show Android Binder information\n-  [buddydump](kernel/buddydump.md) - Displays metadata and freelists of the buddy allocator.\n-  [kbase](kernel/kbase.md) - Finds the kernel virtual base address.\n-  [kbpf](kernel/kbpf.md) - Prints information about the linux kernel bpf progs and maps.\n-  [kchecksec](kernel/kchecksec.md) - Checks for kernel hardening configuration options.\n-  [kcmdline](kernel/kcmdline.md) - Return the kernel commandline (/proc/cmdline).\n-  [kconfig](kernel/kconfig.md) - Outputs the kernel config.\n-  [kdmabuf](kernel/kdmabuf.md) - Prints DMA buf info\n-  [kdmesg](kernel/kdmesg.md) - Displays the kernel ring buffer (dmesg) contents.\n-  [klookup](kernel/klookup.md) - Lookup kernel symbols\n-  [kmod](kernel/kmod.md) - Displays the loaded Linux kernel modules.\n-  [knft-dump](kernel/knft-dump.md) - Dump all nftables: tables, chains, rules, expressions\n-  [knft-list-chains](kernel/knft-list-chains.md) - Dump netfilter chains form a specific table\n-  [knft-list-exprs](kernel/knft-list-exprs.md) - Dump only expressions from specific rule\n-  [knft-list-flowtables](kernel/knft-list-flowtables.md) - Dump netfilter flowtables from a specific table\n-  [knft-list-objects](kernel/knft-list-objects.md) - Dump netfilter objects from a specific table\n-  [knft-list-rules](kernel/knft-list-rules.md) - Dump netfilter rules form a specific chain\n-  [knft-list-sets](kernel/knft-list-sets.md) - Dump netfilter sets from a specific table\n-  [knft-list-tables](kernel/knft-list-tables.md) - Dump netfliter tables from a specific network namespace\n-  [ksyscalls](kernel/ksyscalls.md) - Displays Linux syscall table, including names and addresses of syscalls.\n-  [ktask](kernel/ktask.md) - Displays information about kernel tasks.\n-  [kversion](kernel/kversion.md) - Outputs the kernel version (/proc/version).\n-  [msr](kernel/msr.md) - Read or write to Model Specific Register (MSR)\n-  [p2v](kernel/p2v.md) - Translate physical address to its corresponding virtual address.\n-  [pageinfo](kernel/pageinfo.md) - Convert a pointer to a `struct page` to its corresponding virtual address.\n-  [pagewalk](kernel/pagewalk.md) - Performs pagewalk.\n-  [slab](kernel/slab.md) - Prints information about the linux kernel's slab allocator SLUB.\n-  [v2p](kernel/v2p.md) - Translate virtual address to its corresponding physmap address.\n\n## Linux/libc/ELF\n\n-  [argc](linux_libc_elf/argc.md) - Prints out the number of arguments.\n-  [argv](linux_libc_elf/argv.md) - Prints out the contents of argv.\n-  [aslr](linux_libc_elf/aslr.md) - Check the current ASLR status, or turn it on/off.\n-  [auxv-explore](linux_libc_elf/auxv-explore.md) - Explore and print information from the Auxiliary ELF Vector.\n-  [auxv](linux_libc_elf/auxv.md) - Print information from the Auxiliary ELF Vector.\n-  [elfsections](linux_libc_elf/elfsections.md) - Prints the section mappings contained in the ELF header.\n-  [envp](linux_libc_elf/envp.md) - Prints out the contents of the environment.\n-  [errno](linux_libc_elf/errno.md) - Converts errno (or argument) to its string representation.\n-  [got](linux_libc_elf/got.md) - Show the state of the Global Offset Table.\n-  [gotplt](linux_libc_elf/gotplt.md) - Prints any symbols found in the .got.plt section if it exists.\n-  [libcinfo](linux_libc_elf/libcinfo.md) - Show libc version and link to its sources\n-  [linkmap](linux_libc_elf/linkmap.md) - Show the state of the Link Map\n-  [onegadget](linux_libc_elf/onegadget.md) - Find gadgets which single-handedly give code execution.\n-  [parse-seccomp](linux_libc_elf/parse-seccomp.md) - Parse a struct sock_fprog from memory and dump its filter\n-  [piebase](linux_libc_elf/piebase.md) - Calculate VA of RVA from PIE base.\n-  [plt](linux_libc_elf/plt.md) - Prints any symbols found in Procedure Linkage Table sections if any exist.\n-  [strings](linux_libc_elf/strings.md) - Extracts and displays ASCII strings from readable memory pages of the debugged process.\n-  [threads](linux_libc_elf/threads.md) - List all threads belonging to the selected inferior.\n-  [tls](linux_libc_elf/tls.md) - Print out base address of the current Thread Local Storage (TLS).\n-  [track-got](linux_libc_elf/track-got.md) - Controls GOT tracking\n-  [track-heap](linux_libc_elf/track-heap.md) - Manages the heap tracker.\n\n## Memory\n\n-  [distance](memory/distance.md) - Print the distance between the two arguments, or print the offset to the address's page base.\n-  [dump-register-frame](memory/dump-register-frame.md) - Display the registers saved to memory for a certain frame type\n-  [gdt](memory/gdt.md) - Decode X86-64 GDT entries at address\n-  [go-dump](memory/go-dump.md) - Dumps a Go value of a given type at a specified address.\n-  [go-type](memory/go-type.md) - Dumps a Go runtime reflection type at a specified address.\n-  [hexdump](memory/hexdump.md) - Hexdumps data at the specified address or module name.\n-  [leakfind](memory/leakfind.md) - Attempt to find a leak chain given a starting address.\n-  [memfrob](memory/memfrob.md) - Memfrobs a region of memory (xor with '*').\n-  [mmap](memory/mmap.md) - Calls the mmap syscall and prints its resulting address.\n-  [mprotect](memory/mprotect.md) - Calls the mprotect syscall and prints its result value.\n-  [p2p](memory/p2p.md) - Pointer to pointer chain search. Searches given mapping for all pointers that point to specified mapping.\n-  [probeleak](memory/probeleak.md) - Pointer scan for possible offset leaks.\n-  [search](memory/search.md) - Search memory for byte sequences, strings, pointers, and integer values.\n-  [telescope](memory/telescope.md) - Recursively dereferences pointers starting at the specified address.\n-  [vmmap-add](memory/vmmap-add.md) - Add virtual memory map page.\n-  [vmmap-clear](memory/vmmap-clear.md) - Clear the vmmap cache.\n-  [vmmap-explore](memory/vmmap-explore.md) - Explore a page, trying to guess permissions.\n-  [vmmap](memory/vmmap.md) - Print virtual memory map pages.\n-  [xinfo](memory/xinfo.md) - Shows offsets of the specified address from various useful locations.\n-  [xor](memory/xor.md) - XOR `count` bytes at `address` with the key `key`.\n\n## Misc\n\n-  [asm](misc/asm.md) - Assemble shellcode into bytes\n-  [checksec](misc/checksec.md) - Prints out the binary security settings using `checksec`.\n-  [comm](misc/comm.md) - Put comments in assembly code.\n-  [cyclic](misc/cyclic.md) - Cyclic pattern creator/finder.\n-  [cymbol](misc/cymbol.md) - Manage custom C structures in pwndbg. Supports project-specific auto-loading from .gdbinit.\n-  [down](misc/down.md) - Select and print stack frame called by this one.\n-  [dt](misc/dt.md) - Dump out information on a type (e.g. ucontext_t).\n-  [dumpargs](misc/dumpargs.md) - Prints determined arguments for call/syscall instruction.\n-  [getfile](misc/getfile.md) - Gets the current file.\n-  [hex2ptr](misc/hex2ptr.md) - Converts a space-separated hex string to a little-endian address.\n-  [hijack-fd](misc/hijack-fd.md) - Replace a file descriptor of a debugged process.\n-  [ipi](misc/ipi.md) - Start an interactive IPython prompt.\n-  [patch-list](misc/patch-list.md) - List all patches.\n-  [patch-revert](misc/patch-revert.md) - Revert patch at given address.\n-  [patch](misc/patch.md) - Patches given instruction with given code or bytes.\n-  [plist](misc/plist.md) - Dumps the elements of a linked list.\n-  [sigreturn](misc/sigreturn.md) - Display the SigreturnFrame at the specific address\n-  [spray](misc/spray.md) - Spray memory with cyclic() generated values\n-  [tips](misc/tips.md) - Shows tips.\n-  [up](misc/up.md) - Select and print stack frame that called this one.\n-  [valist](misc/valist.md) - Dumps the arguments of a va_list.\n-  [vmmap-load](misc/vmmap-load.md) - Load virtual memory map pages from ELF file.\n\n## Process\n\n-  [killthreads](process/killthreads.md) - Kill all or given threads.\n-  [pid](process/pid.md) - Gets the pid.\n-  [procinfo](process/procinfo.md) - Display information about the running process.\n\n## Pwndbg\n\n-  [bugreport](pwndbg/bugreport.md) - Generate a bug report.\n-  [config](pwndbg/config.md) - Shows Pwndbg-specific configuration.\n-  [configfile](pwndbg/configfile.md) - Generates a configuration file for the current Pwndbg options.\n-  [heap-config](pwndbg/heap-config.md) - Shows heap related configuration.\n-  [memoize](pwndbg/memoize.md) - Toggles memoization (caching).\n-  [profiler](pwndbg/profiler.md) - Utilities for profiling Pwndbg.\n-  [pwndbg](pwndbg/pwndbg.md) - Prints out a list of all Pwndbg commands.\n-  [reinit-pwndbg](pwndbg/reinit-pwndbg.md) - Makes Pwndbg reinitialize all state.\n-  [reload](pwndbg/reload.md) - Reload Pwndbg.\n-  [theme](pwndbg/theme.md) - Shows Pwndbg-specific theme configuration.\n-  [themefile](pwndbg/themefile.md) - Generates a configuration file for the current Pwndbg theme options.\n-  [version](pwndbg/version.md) - Displays Pwndbg and its important deps versions.\n\n## Register\n\n-  [cpsr](register/cpsr.md) - Print out ARM CPSR or xPSR register.\n-  [fsbase](register/fsbase.md) - Prints out the FS base address. See also $fsbase.\n-  [gsbase](register/gsbase.md) - Prints out the GS base address. See also $gsbase.\n-  [setflag](register/setflag.md) - Modify the flags register.\n\n## Stack\n\n-  [canary](stack/canary.md) - Print out the current stack canary.\n-  [retaddr](stack/retaddr.md) - Print out the stack addresses that contain return addresses.\n-  [stack-explore](stack/stack-explore.md) - Explore stack from all threads.\n-  [stack](stack/stack.md) - Dereferences on stack data with specified count and offset.\n-  [stackf](stack/stackf.md) - Dereferences on stack data, printing the entire stack frame with specified count and offset .\n\n## Start\n\n-  [attachp](start/attachp.md) - Attaches to a given pid, process name, process found with partial argv match or to a device file.\n-  [entry](start/entry.md) - Start the debugged program stopping at its entrypoint address.\n-  [sstart](start/sstart.md) - Alias for 'tbreak __libc_start_main; run'.\n-  [start](start/start.md) - Start the debugged program stopping at the first convenient location\n\n## Step/Next/Continue\n\n-  [nextcall](step_next_continue/nextcall.md) - Breaks at the next call instruction.\n-  [nextjmp](step_next_continue/nextjmp.md) - Breaks at the next jump instruction.\n-  [nextproginstr](step_next_continue/nextproginstr.md) - Breaks at the next instruction that belongs to the running program.\n-  [nextret](step_next_continue/nextret.md) - Breaks at next return-like instruction.\n-  [nextsyscall](step_next_continue/nextsyscall.md) - Breaks at the next syscall not taking branches.\n-  [stepover](step_next_continue/stepover.md) - Breaks on the instruction after this one.\n-  [stepret](step_next_continue/stepret.md) - Breaks at next return-like instruction by 'stepping' to it.\n-  [stepsyscall](step_next_continue/stepsyscall.md) - Breaks at the next syscall by taking branches.\n-  [stepuntilasm](step_next_continue/stepuntilasm.md) - Breaks on the next matching instruction.\n-  [xuntil](step_next_continue/xuntil.md) - Continue execution until an address or expression.\n\n## WinDbg\n\n-  [bc](windbg/bc.md) - Clear the breakpoint with the specified index.\n-  [bd](windbg/bd.md) - Disable the breakpoint with the specified index.\n-  [be](windbg/be.md) - Enable the breakpoint with the specified index.\n-  [bl](windbg/bl.md) - List breakpoints.\n-  [bp](windbg/bp.md) - Set a breakpoint at the specified address.\n-  [da](windbg/da.md) - Dump a string at the specified address.\n-  [db](windbg/db.md) - Starting at the specified address, dump N bytes.\n-  [dc](windbg/dc.md) - Starting at the specified address, hexdump.\n-  [dd](windbg/dd.md) - Starting at the specified address, dump N dwords.\n-  [dds](windbg/dds.md) - Dump pointers and symbols at the specified address.\n-  [dq](windbg/dq.md) - Starting at the specified address, dump N qwords.\n-  [ds](windbg/ds.md) - Dump a string at the specified address.\n-  [dw](windbg/dw.md) - Starting at the specified address, dump N words.\n-  [eb](windbg/eb.md) - Write hex bytes at the specified address.\n-  [ed](windbg/ed.md) - Write hex dwords at the specified address.\n-  [eq](windbg/eq.md) - Write hex qwords at the specified address.\n-  [ew](windbg/ew.md) - Write hex words at the specified address.\n-  [ez](windbg/ez.md) - Write a string at the specified address.\n-  [eza](windbg/eza.md) - Write a string at the specified address.\n-  [go](windbg/go.md) - WinDbg compatibility alias for 'continue' command.\n-  [k](windbg/k.md) - Print a backtrace (alias 'bt').\n-  [ln](windbg/ln.md) - List the symbols nearest to the provided value.\n-  [pc](windbg/pc.md) - WinDbg compatibility alias for 'nextcall' command.\n-  [peb](windbg/peb.md) - Not be windows.\n\n## jemalloc Heap\n\n-  [jemalloc-extent-info](jemalloc_heap/jemalloc-extent-info.md) - Prints extent information for the given address\n-  [jemalloc-find-extent](jemalloc_heap/jemalloc-find-extent.md) - Returns extent information for pointer address allocated by jemalloc\n-  [jemalloc-heap](jemalloc_heap/jemalloc-heap.md) - Prints all extents information\n\n## musl\n\n-  [mallocng-dump](musl/mallocng-dump.md) - Dump the mallocng heap.\n-  [mallocng-explain](musl/mallocng-explain.md) - Gives a quick explanation of musl's mallocng allocator.\n-  [mallocng-find](musl/mallocng-find.md) - Find slot which contains the given address.\n-  [mallocng-group](musl/mallocng-group.md) - Print out information about a mallocng group at the given address.\n-  [mallocng-malloc-context](musl/mallocng-malloc-context.md) - Print out the mallocng __malloc_context (ctx) object.\n-  [mallocng-meta-area](musl/mallocng-meta-area.md) - Print out a mallocng meta_area object at the given address.\n-  [mallocng-meta](musl/mallocng-meta.md) - Print out information about a mallocng group given the address of its meta.\n-  [mallocng-slot-start](musl/mallocng-slot-start.md) - Dump information about a mallocng slot, given its start address.\n-  [mallocng-slot-user](musl/mallocng-slot-user.md) - Dump information about a mallocng slot, given its user address.\n-  [mallocng-visualize-slots](musl/mallocng-visualize-slots.md) - Visualize slots in a group.\n\n<!-- END OF AUTOGENERATED PART. Do not modify this line or the line below, they mark the end of the auto-generated part of the file. If you want to extend the documentation in a way which cannot easily be done by adding to the command help description, write below the following line. -->\n<!-- ------------\\>8---- ----\\>8---- ----\\>8------------ -->\n", "timestamp": "2025-10-21T22:00:26.998940"}
{"source": "github", "repo": "pwndbg/pwndbg", "file": "docs/commands/linux_libc_elf/libcinfo.md", "url": "https://github.com/pwndbg/pwndbg/blob/dev/docs/commands/linux_libc_elf/libcinfo.md", "content": "<!-- THIS PART OF THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT. See scripts/generate-docs.sh -->\n# libcinfo\n\n```text\nusage: libcinfo [-h]\n\n```\n\nShow libc version and link to its sources\n### Optional arguments\n\n|Short|Long|Help|\n| :--- | :--- | :--- |\n|-h|--help|show this help message and exit|\n\n<!-- END OF AUTOGENERATED PART. Do not modify this line or the line below, they mark the end of the auto-generated part of the file. If you want to extend the documentation in a way which cannot easily be done by adding to the command help description, write below the following line. -->\n<!-- ------------\\>8---- ----\\>8---- ----\\>8------------ -->\n", "timestamp": "2025-10-21T22:00:33.711071"}
